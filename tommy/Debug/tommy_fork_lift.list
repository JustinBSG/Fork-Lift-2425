
tommy_fork_lift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006be8  08006be8  00007be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca0  08006ca0  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ca0  08006ca0  00007ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca8  08006ca8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca8  08006ca8  00007ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cac  08006cac  00007cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006cb0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000000c  08006cbc  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08006cbc  00008394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016516  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d59  00000000  00000000  0001e552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  000212b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f59  00000000  00000000  00022640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ec2  00000000  00000000  00023599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d7e  00000000  00000000  0002645b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc630  00000000  00000000  0003f1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005568  00000000  00000000  0011b84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00120db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006bd0 	.word	0x08006bd0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006bd0 	.word	0x08006bd0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	4b50      	ldr	r3, [pc, #320]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	4a4f      	ldr	r2, [pc, #316]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e76:	4b4d      	ldr	r3, [pc, #308]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b4a      	ldr	r3, [pc, #296]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	4a49      	ldr	r2, [pc, #292]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8e:	4b47      	ldr	r3, [pc, #284]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	4b44      	ldr	r3, [pc, #272]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a43      	ldr	r2, [pc, #268]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b41      	ldr	r3, [pc, #260]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	4b38      	ldr	r3, [pc, #224]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a37      	ldr	r2, [pc, #220]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b35      	ldr	r3, [pc, #212]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b32      	ldr	r3, [pc, #200]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	4a31      	ldr	r2, [pc, #196]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eee:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <MX_GPIO_Init+0x158>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2108      	movs	r1, #8
 8000efe:	482c      	ldr	r0, [pc, #176]	@ (8000fb0 <MX_GPIO_Init+0x15c>)
 8000f00:	f001 fc06 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0e:	f001 fbff 	bl	8002710 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000f18:	4826      	ldr	r0, [pc, #152]	@ (8000fb4 <MX_GPIO_Init+0x160>)
 8000f1a:	f001 fbf9 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f24:	4824      	ldr	r0, [pc, #144]	@ (8000fb8 <MX_GPIO_Init+0x164>)
 8000f26:	f001 fbf3 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481b      	ldr	r0, [pc, #108]	@ (8000fb0 <MX_GPIO_Init+0x15c>)
 8000f42:	f001 fa63 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 8000f46:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8000f4a:	61fb      	str	r3, [r7, #28]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f62:	f001 fa53 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000f66:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_GPIO_Init+0x160>)
 8000f80:	f001 fa44 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 8000f84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <MX_GPIO_Init+0x164>)
 8000f9e:	f001 fa35 	bl	800240c <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	@ 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	48001000 	.word	0x48001000
 8000fb8:	48000c00 	.word	0x48000c00

08000fbc <hmc5883l_init>:
  .y_max = 0,
  .z_min = 0,
  .z_max = 0,
};

void hmc5883l_init(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  uint8_t data[3] = {0x70, 0xA0, 0x00};
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <hmc5883l_init+0x40>)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	8019      	strh	r1, [r3, #0]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	0c12      	lsrs	r2, r2, #16
 8000fd0:	701a      	strb	r2, [r3, #0]
  hmc5883l_write(HMC5883L_REG_ADDR_CONFA, &(data[0]));
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f812 	bl	8001000 <hmc5883l_write>
  hmc5883l_write(HMC5883L_REG_ADDR_CONFB, &(data[1]));
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f000 f80c 	bl	8001000 <hmc5883l_write>
  hmc5883l_write(HMC5883L_REG_ADDR_MODE, &(data[2]));
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	3302      	adds	r3, #2
 8000fec:	4619      	mov	r1, r3
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f000 f806 	bl	8001000 <hmc5883l_write>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08006be8 	.word	0x08006be8

08001000 <hmc5883l_write>:

void hmc5883l_write(uint8_t reg, uint8_t* data) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDR << 1, reg, 1, data, 1, HAL_MAX_DELAY);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	b29a      	uxth	r2, r3
 8001010:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	213c      	movs	r1, #60	@ 0x3c
 8001022:	4803      	ldr	r0, [pc, #12]	@ (8001030 <hmc5883l_write+0x30>)
 8001024:	f001 fc28 	bl	8002878 <HAL_I2C_Mem_Write>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000048 	.word	0x20000048

08001034 <hmc5883l_read>:

void hmc5883l_read(uint8_t reg, uint8_t* data) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDR << 1, reg, 1, data, 1, HAL_MAX_DELAY);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	b29a      	uxth	r2, r3
 8001044:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	213c      	movs	r1, #60	@ 0x3c
 8001056:	4803      	ldr	r0, [pc, #12]	@ (8001064 <hmc5883l_read+0x30>)
 8001058:	f001 fd22 	bl	8002aa0 <HAL_I2C_Mem_Read>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000048 	.word	0x20000048

08001068 <hmc5883l_read_data>:
  uint8_t status;
  hmc5883l_read(HMC5883L_REG_ADDR_STATUS, &status);
  return (status & 0x01);
}

void hmc5883l_read_data(HMC5883L_Data* data) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];
  hmc5883l_read(HMC5883L_REG_ADDR_X_MSB, &(buffer[0]));
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4619      	mov	r1, r3
 8001076:	2003      	movs	r0, #3
 8001078:	f7ff ffdc 	bl	8001034 <hmc5883l_read>
  hmc5883l_read(HMC5883L_REG_ADDR_X_LSB, &(buffer[1]));
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	3301      	adds	r3, #1
 8001082:	4619      	mov	r1, r3
 8001084:	2004      	movs	r0, #4
 8001086:	f7ff ffd5 	bl	8001034 <hmc5883l_read>
  hmc5883l_read(HMC5883L_REG_ADDR_Y_MSB, &(buffer[2]));
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	3302      	adds	r3, #2
 8001090:	4619      	mov	r1, r3
 8001092:	2007      	movs	r0, #7
 8001094:	f7ff ffce 	bl	8001034 <hmc5883l_read>
  hmc5883l_read(HMC5883L_REG_ADDR_Y_LSB, &(buffer[3]));
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	3303      	adds	r3, #3
 800109e:	4619      	mov	r1, r3
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff ffc7 	bl	8001034 <hmc5883l_read>
  hmc5883l_read(HMC5883L_REG_ADDR_Z_MSB, &(buffer[4]));
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	3304      	adds	r3, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	2005      	movs	r0, #5
 80010b0:	f7ff ffc0 	bl	8001034 <hmc5883l_read>
  hmc5883l_read(HMC5883L_REG_ADDR_Z_LSB, &(buffer[5]));
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	3305      	adds	r3, #5
 80010ba:	4619      	mov	r1, r3
 80010bc:	2006      	movs	r0, #6
 80010be:	f7ff ffb9 	bl	8001034 <hmc5883l_read>
  data->x = (int16_t)(buffer[0] << 8 | buffer[1]);
 80010c2:	7a3b      	ldrb	r3, [r7, #8]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7a7b      	ldrb	r3, [r7, #9]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	801a      	strh	r2, [r3, #0]
  data->y = (int16_t)(buffer[2] << 8 | buffer[3]);
 80010d4:	7abb      	ldrb	r3, [r7, #10]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	805a      	strh	r2, [r3, #2]
  data->z = (int16_t)(buffer[4] << 8 | buffer[5]);
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	809a      	strh	r2, [r3, #4]
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <hmc5883l_cal_xy_angle>:

float hmc5883l_cal_xy_angle(const HMC5883L_Data* const data, const HMC5883L_Calibration* const cali_data) {
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  return atan2(data->y - cali_data->y_offset, data->x - cali_data->x_offset) * 180.0 / M_PI + 180.0;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f9ce 	bl	80004bc <__aeabi_i2d>
 8001120:	4604      	mov	r4, r0
 8001122:	460d      	mov	r5, r1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112a:	461a      	mov	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f9c1 	bl	80004bc <__aeabi_i2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	ec43 2b11 	vmov	d1, r2, r3
 8001142:	ec45 4b10 	vmov	d0, r4, r5
 8001146:	f005 fad7 	bl	80066f8 <atan2>
 800114a:	ec51 0b10 	vmov	r0, r1, d0
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <hmc5883l_cal_xy_angle+0xa0>)
 8001154:	f7ff fa1c 	bl	8000590 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	a30d      	add	r3, pc, #52	@ (adr r3, 8001198 <hmc5883l_cal_xy_angle+0x98>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fb3d 	bl	80007e4 <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <hmc5883l_cal_xy_angle+0xa0>)
 8001178:	f7ff f854 	bl	8000224 <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fc9e 	bl	8000ac4 <__aeabi_d2f>
 8001188:	4603      	mov	r3, r0
 800118a:	ee07 3a90 	vmov	s15, r3
}
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	54442d18 	.word	0x54442d18
 800119c:	400921fb 	.word	0x400921fb
 80011a0:	40668000 	.word	0x40668000

080011a4 <hmc5883l_calibrate>:

void hmc5883l_calibrate(HMC5883L_Calibration* cali_data) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  cali_data->start_time = HAL_GetTick();
 80011ac:	f001 f81c 	bl	80021e8 <HAL_GetTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	615a      	str	r2, [r3, #20]
  while (HAL_GetTick() - cali_data->start_time <= 10000) {
 80011b8:	e049      	b.n	800124e <hmc5883l_calibrate+0xaa>
    HMC5883L_Data data;
    hmc5883l_read_data(&data);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff52 	bl	8001068 <hmc5883l_read_data>
    if (data.x < cali_data->x_min)
 80011c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	da03      	bge.n	80011da <hmc5883l_calibrate+0x36>
      cali_data->x_min = data.x;
 80011d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	801a      	strh	r2, [r3, #0]
    if (data.x > cali_data->x_max)
 80011da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dd03      	ble.n	80011f0 <hmc5883l_calibrate+0x4c>
      cali_data->x_max = data.x;
 80011e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	805a      	strh	r2, [r3, #2]
    if (data.y < cali_data->y_min)
 80011f0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	da03      	bge.n	8001206 <hmc5883l_calibrate+0x62>
      cali_data->y_min = data.y;
 80011fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	809a      	strh	r2, [r3, #4]
    if (data.y > cali_data->y_max)
 8001206:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001210:	429a      	cmp	r2, r3
 8001212:	dd03      	ble.n	800121c <hmc5883l_calibrate+0x78>
      cali_data->y_max = data.y;
 8001214:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	80da      	strh	r2, [r3, #6]
    if (data.z < cali_data->z_min)
 800121c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001226:	429a      	cmp	r2, r3
 8001228:	da03      	bge.n	8001232 <hmc5883l_calibrate+0x8e>
      cali_data->z_min = data.z;
 800122a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	811a      	strh	r2, [r3, #8]
    if (data.z > cali_data->z_max)
 8001232:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800123c:	429a      	cmp	r2, r3
 800123e:	dd03      	ble.n	8001248 <hmc5883l_calibrate+0xa4>
      cali_data->z_max = data.z;
 8001240:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	815a      	strh	r2, [r3, #10]
    HAL_Delay(100);
 8001248:	2064      	movs	r0, #100	@ 0x64
 800124a:	f000 ffd9 	bl	8002200 <HAL_Delay>
  while (HAL_GetTick() - cali_data->start_time <= 10000) {
 800124e:	f000 ffcb 	bl	80021e8 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800125e:	4293      	cmp	r3, r2
 8001260:	d9ab      	bls.n	80011ba <hmc5883l_calibrate+0x16>
  }
  cali_data->x_offset = (cali_data->x_max + cali_data->x_min) / 2;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001268:	461a      	mov	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	4413      	add	r3, r2
 8001272:	0fda      	lsrs	r2, r3, #31
 8001274:	4413      	add	r3, r2
 8001276:	105b      	asrs	r3, r3, #1
 8001278:	b21a      	sxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	819a      	strh	r2, [r3, #12]
  cali_data->y_offset = (cali_data->y_max + cali_data->y_min) / 2;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800128c:	4413      	add	r3, r2
 800128e:	0fda      	lsrs	r2, r3, #31
 8001290:	4413      	add	r3, r2
 8001292:	105b      	asrs	r3, r3, #1
 8001294:	b21a      	sxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	81da      	strh	r2, [r3, #14]
  cali_data->z_offset = (cali_data->z_max + cali_data->z_min) / 2;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012a0:	461a      	mov	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	0fda      	lsrs	r2, r3, #31
 80012ac:	4413      	add	r3, r2
 80012ae:	105b      	asrs	r3, r3, #1
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	821a      	strh	r2, [r3, #16]
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <MX_I2C1_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	@ (800133c <MX_I2C1_Init+0x7c>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012fc:	f001 fa20 	bl	8002740 <HAL_I2C_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001306:	f000 f97a 	bl	80015fe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4809      	ldr	r0, [pc, #36]	@ (8001334 <MX_I2C1_Init+0x74>)
 800130e:	f001 ffa3 	bl	8003258 <HAL_I2CEx_ConfigAnalogFilter>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001318:	f000 f971 	bl	80015fe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_I2C1_Init+0x74>)
 8001320:	f001 ffe5 	bl	80032ee <HAL_I2CEx_ConfigDigitalFilter>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 f968 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000048 	.word	0x20000048
 8001338:	40005400 	.word	0x40005400
 800133c:	40b285c2 	.word	0x40b285c2

08001340 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0a0      	sub	sp, #128	@ 0x80
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	2254      	movs	r2, #84	@ 0x54
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f005 f99d 	bl	80066a0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <HAL_I2C_MspInit+0xe0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d153      	bne.n	8001418 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001370:	2340      	movs	r3, #64	@ 0x40
 8001372:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001374:	2300      	movs	r3, #0
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fde5 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001388:	f000 f939 	bl	80015fe <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	4a24      	ldr	r2, [pc, #144]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c2:	2312      	movs	r3, #18
 80013c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ce:	2304      	movs	r3, #4
 80013d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f001 f816 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e4:	2312      	movs	r3, #18
 80013e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f0:	2304      	movs	r3, #4
 80013f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013f8:	4619      	mov	r1, r3
 80013fa:	480b      	ldr	r0, [pc, #44]	@ (8001428 <HAL_I2C_MspInit+0xe8>)
 80013fc:	f001 f806 	bl	800240c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001404:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 8001406:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800140a:	6593      	str	r3, [r2, #88]	@ 0x58
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_I2C_MspInit+0xe4>)
 800140e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	3780      	adds	r7, #128	@ 0x80
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40005400 	.word	0x40005400
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f000 fe75 	bl	800211e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f89a 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f7ff fd0c 	bl	8000e54 <MX_GPIO_Init>
  MX_UART4_Init();
 800143c:	f000 fd16 	bl	8001e6c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001440:	f000 fd60 	bl	8001f04 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001444:	f000 f9a2 	bl	800178c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001448:	f000 fa22 	bl	8001890 <MX_TIM3_Init>
  MX_TIM1_Init();
 800144c:	f000 f944 	bl	80016d8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001450:	f000 fb4c 	bl	8001aec <MX_TIM8_Init>
  MX_TIM4_Init();
 8001454:	f000 fa9e 	bl	8001994 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001458:	f000 faf2 	bl	8001a40 <MX_TIM5_Init>
  MX_I2C1_Init();
 800145c:	f7ff ff30 	bl	80012c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001460:	2100      	movs	r1, #0
 8001462:	4836      	ldr	r0, [pc, #216]	@ (800153c <main+0x110>)
 8001464:	f003 f8f2 	bl	800464c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001468:	2104      	movs	r1, #4
 800146a:	4834      	ldr	r0, [pc, #208]	@ (800153c <main+0x110>)
 800146c:	f003 f8ee 	bl	800464c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001470:	2100      	movs	r1, #0
 8001472:	4833      	ldr	r0, [pc, #204]	@ (8001540 <main+0x114>)
 8001474:	f003 f8ea 	bl	800464c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001478:	2104      	movs	r1, #4
 800147a:	4831      	ldr	r0, [pc, #196]	@ (8001540 <main+0x114>)
 800147c:	f003 f8e6 	bl	800464c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001480:	4830      	ldr	r0, [pc, #192]	@ (8001544 <main+0x118>)
 8001482:	f003 f809 	bl	8004498 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001486:	213c      	movs	r1, #60	@ 0x3c
 8001488:	482e      	ldr	r0, [pc, #184]	@ (8001544 <main+0x118>)
 800148a:	f003 fa97 	bl	80049bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800148e:	482e      	ldr	r0, [pc, #184]	@ (8001548 <main+0x11c>)
 8001490:	f003 f802 	bl	8004498 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001494:	213c      	movs	r1, #60	@ 0x3c
 8001496:	482c      	ldr	r0, [pc, #176]	@ (8001548 <main+0x11c>)
 8001498:	f003 fa90 	bl	80049bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800149c:	482b      	ldr	r0, [pc, #172]	@ (800154c <main+0x120>)
 800149e:	f002 fffb 	bl	8004498 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80014a2:	213c      	movs	r1, #60	@ 0x3c
 80014a4:	4829      	ldr	r0, [pc, #164]	@ (800154c <main+0x120>)
 80014a6:	f003 fa89 	bl	80049bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80014aa:	4829      	ldr	r0, [pc, #164]	@ (8001550 <main+0x124>)
 80014ac:	f002 fff4 	bl	8004498 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80014b0:	213c      	movs	r1, #60	@ 0x3c
 80014b2:	4827      	ldr	r0, [pc, #156]	@ (8001550 <main+0x124>)
 80014b4:	f003 fa82 	bl	80049bc <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2108      	movs	r1, #8
 80014bc:	4825      	ldr	r0, [pc, #148]	@ (8001554 <main+0x128>)
 80014be:	f001 f927 	bl	8002710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014c8:	4823      	ldr	r0, [pc, #140]	@ (8001558 <main+0x12c>)
 80014ca:	f001 f921 	bl	8002710 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014d4:	4821      	ldr	r0, [pc, #132]	@ (800155c <main+0x130>)
 80014d6:	f001 f91b 	bl	8002710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e0:	481e      	ldr	r0, [pc, #120]	@ (800155c <main+0x130>)
 80014e2:	f001 f915 	bl	8002710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ec:	481b      	ldr	r0, [pc, #108]	@ (800155c <main+0x130>)
 80014ee:	f001 f90f 	bl	8002710 <HAL_GPIO_WritePin>

  hmc5883l_init();
 80014f2:	f7ff fd63 	bl	8000fbc <hmc5883l_init>
  HAL_Delay(10);
 80014f6:	200a      	movs	r0, #10
 80014f8:	f000 fe82 	bl	8002200 <HAL_Delay>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001502:	4816      	ldr	r0, [pc, #88]	@ (800155c <main+0x130>)
 8001504:	f001 f904 	bl	8002710 <HAL_GPIO_WritePin>
  hmc5883l_calibrate(&hmc5883l_cali_data);
 8001508:	4815      	ldr	r0, [pc, #84]	@ (8001560 <main+0x134>)
 800150a:	f7ff fe4b 	bl	80011a4 <hmc5883l_calibrate>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001514:	4811      	ldr	r0, [pc, #68]	@ (800155c <main+0x130>)
 8001516:	f001 f8fb 	bl	8002710 <HAL_GPIO_WritePin>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    #if (TEST)
    HAL_Delay(1);
 800151a:	2001      	movs	r0, #1
 800151c:	f000 fe70 	bl	8002200 <HAL_Delay>
    hmc5883l_read_data(&hmc5883l_data);
 8001520:	4810      	ldr	r0, [pc, #64]	@ (8001564 <main+0x138>)
 8001522:	f7ff fda1 	bl	8001068 <hmc5883l_read_data>
    test_hmc_angle = hmc5883l_cal_xy_angle(&hmc5883l_data, &hmc5883l_cali_data);
 8001526:	490e      	ldr	r1, [pc, #56]	@ (8001560 <main+0x134>)
 8001528:	480e      	ldr	r0, [pc, #56]	@ (8001564 <main+0x138>)
 800152a:	f7ff fde9 	bl	8001100 <hmc5883l_cal_xy_angle>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <main+0x13c>)
 8001534:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 8001538:	bf00      	nop
 800153a:	e7ee      	b.n	800151a <main+0xee>
 800153c:	200000ec 	.word	0x200000ec
 8001540:	20000138 	.word	0x20000138
 8001544:	200000a0 	.word	0x200000a0
 8001548:	20000184 	.word	0x20000184
 800154c:	200001d0 	.word	0x200001d0
 8001550:	2000021c 	.word	0x2000021c
 8001554:	48000800 	.word	0x48000800
 8001558:	48000c00 	.word	0x48000c00
 800155c:	48001000 	.word	0x48001000
 8001560:	20000030 	.word	0x20000030
 8001564:	20000028 	.word	0x20000028
 8001568:	2000009c 	.word	0x2000009c

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b094      	sub	sp, #80	@ 0x50
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2238      	movs	r2, #56	@ 0x38
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f005 f890 	bl	80066a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800158e:	2000      	movs	r0, #0
 8001590:	f001 fefa 	bl	8003388 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a2:	2303      	movs	r3, #3
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015aa:	2355      	movs	r3, #85	@ 0x55
 80015ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 ff96 	bl	80034f0 <HAL_RCC_OscConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015ca:	f000 f818 	bl	80015fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
 80015d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d2:	2303      	movs	r3, #3
 80015d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2104      	movs	r1, #4
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fa94 	bl	8003b14 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015f2:	f000 f804 	bl	80015fe <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3750      	adds	r7, #80	@ 0x50
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001602:	b672      	cpsid	i
}
 8001604:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001606:	bf00      	nop
 8001608:	e7fd      	b.n	8001606 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_MspInit+0x44>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001616:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <HAL_MspInit+0x44>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6613      	str	r3, [r2, #96]	@ 0x60
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <HAL_MspInit+0x44>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_MspInit+0x44>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162e:	4a08      	ldr	r2, [pc, #32]	@ (8001650 <HAL_MspInit+0x44>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001634:	6593      	str	r3, [r2, #88]	@ 0x58
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_MspInit+0x44>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001642:	f001 ff45 	bl	80034d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <NMI_Handler+0x4>

0800165c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <MemManage_Handler+0x4>

0800166c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <UsageFault_Handler+0x4>

0800167c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016aa:	f000 fd8b 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2224      	movs	r2, #36	@ 0x24
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 ffda 	bl	80066a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016f6:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <MX_TIM1_Init+0xac>)
 80016f8:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <MX_TIM1_Init+0xb0>)
 80016fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016fc:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <MX_TIM1_Init+0xac>)
 80016fe:	2200      	movs	r2, #0
 8001700:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <MX_TIM1_Init+0xac>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001708:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <MX_TIM1_Init+0xac>)
 800170a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800170e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <MX_TIM1_Init+0xac>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <MX_TIM1_Init+0xac>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <MX_TIM1_Init+0xac>)
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001722:	2303      	movs	r3, #3
 8001724:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800172a:	2301      	movs	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001732:	230a      	movs	r3, #10
 8001734:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800173a:	2301      	movs	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001742:	230a      	movs	r3, #10
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_TIM1_Init+0xac>)
 800174e:	f003 f88f 	bl	8004870 <HAL_TIM_Encoder_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001758:	f7ff ff51 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_TIM1_Init+0xac>)
 800176e:	f004 f893 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001778:	f7ff ff41 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3730      	adds	r7, #48	@ 0x30
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200000a0 	.word	0x200000a0
 8001788:	40012c00 	.word	0x40012c00

0800178c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08e      	sub	sp, #56	@ 0x38
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	615a      	str	r2, [r3, #20]
 80017bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017be:	4b33      	ldr	r3, [pc, #204]	@ (800188c <MX_TIM2_Init+0x100>)
 80017c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <MX_TIM2_Init+0x100>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <MX_TIM2_Init+0x100>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <MX_TIM2_Init+0x100>)
 80017d4:	f244 129f 	movw	r2, #16799	@ 0x419f
 80017d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <MX_TIM2_Init+0x100>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <MX_TIM2_Init+0x100>)
 80017e2:	2280      	movs	r2, #128	@ 0x80
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e6:	4829      	ldr	r0, [pc, #164]	@ (800188c <MX_TIM2_Init+0x100>)
 80017e8:	f002 fdfe 	bl	80043e8 <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017f2:	f7ff ff04 	bl	80015fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001800:	4619      	mov	r1, r3
 8001802:	4822      	ldr	r0, [pc, #136]	@ (800188c <MX_TIM2_Init+0x100>)
 8001804:	f003 fa9c 	bl	8004d40 <HAL_TIM_ConfigClockSource>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800180e:	f7ff fef6 	bl	80015fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001812:	481e      	ldr	r0, [pc, #120]	@ (800188c <MX_TIM2_Init+0x100>)
 8001814:	f002 feb8 	bl	8004588 <HAL_TIM_PWM_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800181e:	f7ff feee 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4816      	ldr	r0, [pc, #88]	@ (800188c <MX_TIM2_Init+0x100>)
 8001832:	f004 f831 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800183c:	f7ff fedf 	bl	80015fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001840:	2360      	movs	r3, #96	@ 0x60
 8001842:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	480d      	ldr	r0, [pc, #52]	@ (800188c <MX_TIM2_Init+0x100>)
 8001858:	f003 f95e 	bl	8004b18 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001862:	f7ff fecc 	bl	80015fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	2204      	movs	r2, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4807      	ldr	r0, [pc, #28]	@ (800188c <MX_TIM2_Init+0x100>)
 800186e:	f003 f953 	bl	8004b18 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001878:	f7ff fec1 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800187c:	4803      	ldr	r0, [pc, #12]	@ (800188c <MX_TIM2_Init+0x100>)
 800187e:	f000 fa99 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 8001882:	bf00      	nop
 8001884:	3738      	adds	r7, #56	@ 0x38
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000ec 	.word	0x200000ec

08001890 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	@ 0x38
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001896:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018c2:	4b32      	ldr	r3, [pc, #200]	@ (800198c <MX_TIM3_Init+0xfc>)
 80018c4:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <MX_TIM3_Init+0x100>)
 80018c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80018c8:	4b30      	ldr	r3, [pc, #192]	@ (800198c <MX_TIM3_Init+0xfc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <MX_TIM3_Init+0xfc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16800;
 80018d4:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <MX_TIM3_Init+0xfc>)
 80018d6:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80018da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018dc:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <MX_TIM3_Init+0xfc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018e2:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <MX_TIM3_Init+0xfc>)
 80018e4:	2280      	movs	r2, #128	@ 0x80
 80018e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018e8:	4828      	ldr	r0, [pc, #160]	@ (800198c <MX_TIM3_Init+0xfc>)
 80018ea:	f002 fd7d 	bl	80043e8 <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018f4:	f7ff fe83 	bl	80015fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001902:	4619      	mov	r1, r3
 8001904:	4821      	ldr	r0, [pc, #132]	@ (800198c <MX_TIM3_Init+0xfc>)
 8001906:	f003 fa1b 	bl	8004d40 <HAL_TIM_ConfigClockSource>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001910:	f7ff fe75 	bl	80015fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001914:	481d      	ldr	r0, [pc, #116]	@ (800198c <MX_TIM3_Init+0xfc>)
 8001916:	f002 fe37 	bl	8004588 <HAL_TIM_PWM_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001920:	f7ff fe6d 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	4816      	ldr	r0, [pc, #88]	@ (800198c <MX_TIM3_Init+0xfc>)
 8001934:	f003 ffb0 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800193e:	f7ff fe5e 	bl	80015fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001942:	2360      	movs	r3, #96	@ 0x60
 8001944:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001952:	463b      	mov	r3, r7
 8001954:	2200      	movs	r2, #0
 8001956:	4619      	mov	r1, r3
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <MX_TIM3_Init+0xfc>)
 800195a:	f003 f8dd 	bl	8004b18 <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001964:	f7ff fe4b 	bl	80015fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	2204      	movs	r2, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4807      	ldr	r0, [pc, #28]	@ (800198c <MX_TIM3_Init+0xfc>)
 8001970:	f003 f8d2 	bl	8004b18 <HAL_TIM_PWM_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800197a:	f7ff fe40 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <MX_TIM3_Init+0xfc>)
 8001980:	f000 fa18 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 8001984:	bf00      	nop
 8001986:	3738      	adds	r7, #56	@ 0x38
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000138 	.word	0x20000138
 8001990:	40000400 	.word	0x40000400

08001994 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 fe7c 	bl	80066a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	463b      	mov	r3, r7
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019b2:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 80019b4:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <MX_TIM4_Init+0xa8>)
 80019b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 80019c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d8:	2303      	movs	r3, #3
 80019da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e0:	2301      	movs	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80019e8:	230a      	movs	r3, #10
 80019ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f0:	2301      	movs	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80019f8:	230a      	movs	r3, #10
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	4619      	mov	r1, r3
 8001a02:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 8001a04:	f002 ff34 	bl	8004870 <HAL_TIM_Encoder_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a0e:	f7ff fdf6 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 8001a20:	f003 ff3a 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a2a:	f7ff fde8 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	3730      	adds	r7, #48	@ 0x30
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000184 	.word	0x20000184
 8001a3c:	40000800 	.word	0x40000800

08001a40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2224      	movs	r2, #36	@ 0x24
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 fe26 	bl	80066a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <MX_TIM5_Init+0xa4>)
 8001a60:	4a21      	ldr	r2, [pc, #132]	@ (8001ae8 <MX_TIM5_Init+0xa8>)
 8001a62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <MX_TIM5_Init+0xa4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <MX_TIM5_Init+0xa4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <MX_TIM5_Init+0xa4>)
 8001a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <MX_TIM5_Init+0xa4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <MX_TIM5_Init+0xa4>)
 8001a80:	2280      	movs	r2, #128	@ 0x80
 8001a82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a84:	2303      	movs	r3, #3
 8001a86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a94:	230a      	movs	r3, #10
 8001a96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <MX_TIM5_Init+0xa4>)
 8001ab0:	f002 fede 	bl	8004870 <HAL_TIM_Encoder_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001aba:	f7ff fda0 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <MX_TIM5_Init+0xa4>)
 8001acc:	f003 fee4 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001ad6:	f7ff fd92 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	3730      	adds	r7, #48	@ 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200001d0 	.word	0x200001d0
 8001ae8:	40000c00 	.word	0x40000c00

08001aec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	@ 0x30
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	2224      	movs	r2, #36	@ 0x24
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f004 fdd0 	bl	80066a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	463b      	mov	r3, r7
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b0c:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <MX_TIM8_Init+0xb0>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b36:	2303      	movs	r3, #3
 8001b38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b46:	230a      	movs	r3, #10
 8001b48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001b56:	230a      	movs	r3, #10
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480d      	ldr	r0, [pc, #52]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b62:	f002 fe85 	bl	8004870 <HAL_TIM_Encoder_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001b6c:	f7ff fd47 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_TIM8_Init+0xac>)
 8001b82:	f003 fe89 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001b8c:	f7ff fd37 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3730      	adds	r7, #48	@ 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000021c 	.word	0x2000021c
 8001b9c:	40013400 	.word	0x40013400

08001ba0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b090      	sub	sp, #64	@ 0x40
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d34 <HAL_TIM_Encoder_MspInit+0x194>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d128      	bne.n	8001c14 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001bc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bce:	4b5a      	ldr	r3, [pc, #360]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a56      	ldr	r2, [pc, #344]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b54      	ldr	r3, [pc, #336]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c02:	2302      	movs	r3, #2
 8001c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	484b      	ldr	r0, [pc, #300]	@ (8001d3c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001c0e:	f000 fbfd 	bl	800240c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c12:	e08a      	b.n	8001d2a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a49      	ldr	r2, [pc, #292]	@ (8001d40 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d129      	bne.n	8001c72 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c1e:	4b46      	ldr	r3, [pc, #280]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c22:	4a45      	ldr	r2, [pc, #276]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c2a:	4b43      	ldr	r3, [pc, #268]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	623b      	str	r3, [r7, #32]
 8001c34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c36:	4b40      	ldr	r3, [pc, #256]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c42:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c4e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c60:	2302      	movs	r3, #2
 8001c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4836      	ldr	r0, [pc, #216]	@ (8001d44 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001c6c:	f000 fbce 	bl	800240c <HAL_GPIO_Init>
}
 8001c70:	e05b      	b.n	8001d2a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a34      	ldr	r2, [pc, #208]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d129      	bne.n	8001cd0 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	4a2d      	ldr	r2, [pc, #180]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c88:	4b2b      	ldr	r3, [pc, #172]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b28      	ldr	r3, [pc, #160]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	4a27      	ldr	r2, [pc, #156]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca0:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cac:	2303      	movs	r3, #3
 8001cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cca:	f000 fb9f 	bl	800240c <HAL_GPIO_Init>
}
 8001cce:	e02c      	b.n	8001d2a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d127      	bne.n	8001d2a <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cda:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ce0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ce6:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d0a:	23c0      	movs	r3, #192	@ 0xc0
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001d26:	f000 fb71 	bl	800240c <HAL_GPIO_Init>
}
 8001d2a:	bf00      	nop
 8001d2c:	3740      	adds	r7, #64	@ 0x40
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	40000800 	.word	0x40000800
 8001d44:	48000c00 	.word	0x48000c00
 8001d48:	40000c00 	.word	0x40000c00
 8001d4c:	40013400 	.word	0x40013400

08001d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d60:	d10c      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d62:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_TIM_Base_MspInit+0x5c>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	4a11      	ldr	r2, [pc, #68]	@ (8001dac <HAL_TIM_Base_MspInit+0x5c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <HAL_TIM_Base_MspInit+0x5c>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d7a:	e010      	b.n	8001d9e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <HAL_TIM_Base_MspInit+0x60>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10b      	bne.n	8001d9e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_TIM_Base_MspInit+0x5c>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <HAL_TIM_Base_MspInit+0x5c>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_TIM_Base_MspInit+0x5c>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40000400 	.word	0x40000400

08001db4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd4:	d11c      	bne.n	8001e10 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <HAL_TIM_MspPostInit+0xa8>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	4a20      	ldr	r2, [pc, #128]	@ (8001e5c <HAL_TIM_MspPostInit+0xa8>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_TIM_MspPostInit+0xa8>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001dee:	2318      	movs	r3, #24
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4815      	ldr	r0, [pc, #84]	@ (8001e60 <HAL_TIM_MspPostInit+0xac>)
 8001e0a:	f000 faff 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e0e:	e020      	b.n	8001e52 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a13      	ldr	r2, [pc, #76]	@ (8001e64 <HAL_TIM_MspPostInit+0xb0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d11b      	bne.n	8001e52 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_TIM_MspPostInit+0xa8>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <HAL_TIM_MspPostInit+0xa8>)
 8001e20:	f043 0310 	orr.w	r3, r3, #16
 8001e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_TIM_MspPostInit+0xa8>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e32:	230c      	movs	r3, #12
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e42:	2302      	movs	r3, #2
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4806      	ldr	r0, [pc, #24]	@ (8001e68 <HAL_TIM_MspPostInit+0xb4>)
 8001e4e:	f000 fadd 	bl	800240c <HAL_GPIO_Init>
}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	@ 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48000c00 	.word	0x48000c00
 8001e64:	40000400 	.word	0x40000400
 8001e68:	48001000 	.word	0x48001000

08001e6c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e70:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <MX_UART4_Init+0x90>)
 8001e72:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <MX_UART4_Init+0x94>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e76:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <MX_UART4_Init+0x90>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <MX_UART4_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <MX_UART4_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <MX_UART4_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <MX_UART4_Init+0x90>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <MX_UART4_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <MX_UART4_Init+0x90>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <MX_UART4_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_UART4_Init+0x90>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <MX_UART4_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eb4:	4811      	ldr	r0, [pc, #68]	@ (8001efc <MX_UART4_Init+0x90>)
 8001eb6:	f003 fd85 	bl	80059c4 <HAL_UART_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001ec0:	f7ff fb9d 	bl	80015fe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	480d      	ldr	r0, [pc, #52]	@ (8001efc <MX_UART4_Init+0x90>)
 8001ec8:	f004 fb20 	bl	800650c <HAL_UARTEx_SetTxFifoThreshold>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001ed2:	f7ff fb94 	bl	80015fe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4808      	ldr	r0, [pc, #32]	@ (8001efc <MX_UART4_Init+0x90>)
 8001eda:	f004 fb55 	bl	8006588 <HAL_UARTEx_SetRxFifoThreshold>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001ee4:	f7ff fb8b 	bl	80015fe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	@ (8001efc <MX_UART4_Init+0x90>)
 8001eea:	f004 fad6 	bl	800649a <HAL_UARTEx_DisableFifoMode>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ef4:	f7ff fb83 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000268 	.word	0x20000268
 8001f00:	40004c00 	.word	0x40004c00

08001f04 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f0a:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <MX_USART1_UART_Init+0x94>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f0e:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f4c:	4811      	ldr	r0, [pc, #68]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f4e:	f003 fd39 	bl	80059c4 <HAL_UART_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f58:	f7ff fb51 	bl	80015fe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	480d      	ldr	r0, [pc, #52]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f60:	f004 fad4 	bl	800650c <HAL_UARTEx_SetTxFifoThreshold>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f6a:	f7ff fb48 	bl	80015fe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4808      	ldr	r0, [pc, #32]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f72:	f004 fb09 	bl	8006588 <HAL_UARTEx_SetRxFifoThreshold>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f7c:	f7ff fb3f 	bl	80015fe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <MX_USART1_UART_Init+0x90>)
 8001f82:	f004 fa8a 	bl	800649a <HAL_UARTEx_DisableFifoMode>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f8c:	f7ff fb37 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200002fc 	.word	0x200002fc
 8001f98:	40013800 	.word	0x40013800

08001f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0a0      	sub	sp, #128	@ 0x80
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	2254      	movs	r2, #84	@ 0x54
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fb6f 	bl	80066a0 <memset>
  if(uartHandle->Instance==UART4)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80020bc <HAL_UART_MspInit+0x120>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d137      	bne.n	800203c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 ffb7 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe4:	f7ff fb0b 	bl	80015fe <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fe8:	4b35      	ldr	r3, [pc, #212]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	4a34      	ldr	r2, [pc, #208]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8001fee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff4:	4b32      	ldr	r3, [pc, #200]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002000:	4b2f      	ldr	r3, [pc, #188]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	4a2e      	ldr	r2, [pc, #184]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200c:	4b2c      	ldr	r3, [pc, #176]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002018:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800201c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800202a:	2305      	movs	r3, #5
 800202c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002032:	4619      	mov	r1, r3
 8002034:	4823      	ldr	r0, [pc, #140]	@ (80020c4 <HAL_UART_MspInit+0x128>)
 8002036:	f000 f9e9 	bl	800240c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800203a:	e03a      	b.n	80020b2 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a21      	ldr	r2, [pc, #132]	@ (80020c8 <HAL_UART_MspInit+0x12c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d135      	bne.n	80020b2 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002046:	2301      	movs	r3, #1
 8002048:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204e:	f107 0318 	add.w	r3, r7, #24
 8002052:	4618      	mov	r0, r3
 8002054:	f001 ff7a 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800205e:	f7ff face 	bl	80015fe <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002062:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	4a16      	ldr	r2, [pc, #88]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206c:	6613      	str	r3, [r2, #96]	@ 0x60
 800206e:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8002070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	4a10      	ldr	r2, [pc, #64]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_UART_MspInit+0x124>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002092:	2330      	movs	r3, #48	@ 0x30
 8002094:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020a2:	2307      	movs	r3, #7
 80020a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <HAL_UART_MspInit+0x128>)
 80020ae:	f000 f9ad 	bl	800240c <HAL_GPIO_Init>
}
 80020b2:	bf00      	nop
 80020b4:	3780      	adds	r7, #128	@ 0x80
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40004c00 	.word	0x40004c00
 80020c0:	40021000 	.word	0x40021000
 80020c4:	48000800 	.word	0x48000800
 80020c8:	40013800 	.word	0x40013800

080020cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020cc:	480d      	ldr	r0, [pc, #52]	@ (8002104 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d0:	f7ff faf0 	bl	80016b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	@ (8002108 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	@ (800210c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <LoopForever+0xe>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002118 <LoopForever+0x16>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f004 fad9 	bl	80066b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fe:	f7ff f995 	bl	800142c <main>

08002102 <LoopForever>:

LoopForever:
    b LoopForever
 8002102:	e7fe      	b.n	8002102 <LoopForever>
  ldr   r0, =_estack
 8002104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002110:	08006cb0 	.word	0x08006cb0
  ldr r2, =_sbss
 8002114:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002118:	20000394 	.word	0x20000394

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>

0800211e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 f93d 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212e:	200f      	movs	r0, #15
 8002130:	f000 f80e 	bl	8002150 <HAL_InitTick>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	e001      	b.n	8002144 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002140:	f7ff fa64 	bl	800160c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002144:	79fb      	ldrb	r3, [r7, #7]

}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800215c:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <HAL_InitTick+0x68>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d022      	beq.n	80021aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002164:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <HAL_InitTick+0x6c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <HAL_InitTick+0x68>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002170:	fbb1 f3f3 	udiv	r3, r1, r3
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f93a 	bl	80023f2 <HAL_SYSTICK_Config>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b0f      	cmp	r3, #15
 8002188:	d809      	bhi.n	800219e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218a:	2200      	movs	r2, #0
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002192:	f000 f914 	bl	80023be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <HAL_InitTick+0x70>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e007      	b.n	80021ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
 80021a2:	e004      	b.n	80021ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e001      	b.n	80021ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_IncTick+0x1c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_IncTick+0x20>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a03      	ldr	r2, [pc, #12]	@ (80021e0 <HAL_IncTick+0x1c>)
 80021d4:	6013      	str	r3, [r2, #0]
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	20000390 	.word	0x20000390
 80021e4:	20000008 	.word	0x20000008

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000390 	.word	0x20000390

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff ffee 	bl	80021e8 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002218:	d004      	beq.n	8002224 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_Delay+0x40>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002224:	bf00      	nop
 8002226:	f7ff ffdf 	bl	80021e8 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	429a      	cmp	r2, r3
 8002234:	d8f7      	bhi.n	8002226 <HAL_Delay+0x26>
  {
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000008 	.word	0x20000008

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	@ (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	@ (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	@ 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	@ 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff47 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023cc:	f7ff ff5e 	bl	800228c <__NVIC_GetPriorityGrouping>
 80023d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7ff ff90 	bl	80022fc <NVIC_EncodePriority>
 80023dc:	4602      	mov	r2, r0
 80023de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff5f 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffb2 	bl	8002364 <SysTick_Config>
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800241a:	e15a      	b.n	80026d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 814c 	beq.w	80026cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d005      	beq.n	800244c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002448:	2b02      	cmp	r3, #2
 800244a:	d130      	bne.n	80024ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002482:	2201      	movs	r2, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 0201 	and.w	r2, r3, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d017      	beq.n	80024ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d123      	bne.n	800253e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	6939      	ldr	r1, [r7, #16]
 800253a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0203 	and.w	r2, r3, #3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80a6 	beq.w	80026cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002580:	4b5b      	ldr	r3, [pc, #364]	@ (80026f0 <HAL_GPIO_Init+0x2e4>)
 8002582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002584:	4a5a      	ldr	r2, [pc, #360]	@ (80026f0 <HAL_GPIO_Init+0x2e4>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6613      	str	r3, [r2, #96]	@ 0x60
 800258c:	4b58      	ldr	r3, [pc, #352]	@ (80026f0 <HAL_GPIO_Init+0x2e4>)
 800258e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002598:	4a56      	ldr	r2, [pc, #344]	@ (80026f4 <HAL_GPIO_Init+0x2e8>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025c2:	d01f      	beq.n	8002604 <HAL_GPIO_Init+0x1f8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a4c      	ldr	r2, [pc, #304]	@ (80026f8 <HAL_GPIO_Init+0x2ec>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d019      	beq.n	8002600 <HAL_GPIO_Init+0x1f4>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a4b      	ldr	r2, [pc, #300]	@ (80026fc <HAL_GPIO_Init+0x2f0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_GPIO_Init+0x1f0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002700 <HAL_GPIO_Init+0x2f4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00d      	beq.n	80025f8 <HAL_GPIO_Init+0x1ec>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a49      	ldr	r2, [pc, #292]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <HAL_GPIO_Init+0x1e8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_GPIO_Init+0x2fc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_GPIO_Init+0x1e4>
 80025ec:	2305      	movs	r3, #5
 80025ee:	e00a      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025f0:	2306      	movs	r3, #6
 80025f2:	e008      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e006      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025f8:	2303      	movs	r3, #3
 80025fa:	e004      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e002      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 8002604:	2300      	movs	r3, #0
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	f002 0203 	and.w	r2, r2, #3
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	4093      	lsls	r3, r2
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002616:	4937      	ldr	r1, [pc, #220]	@ (80026f4 <HAL_GPIO_Init+0x2e8>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002624:	4b39      	ldr	r3, [pc, #228]	@ (800270c <HAL_GPIO_Init+0x300>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002648:	4a30      	ldr	r2, [pc, #192]	@ (800270c <HAL_GPIO_Init+0x300>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800264e:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <HAL_GPIO_Init+0x300>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002672:	4a26      	ldr	r2, [pc, #152]	@ (800270c <HAL_GPIO_Init+0x300>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002678:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_GPIO_Init+0x300>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800269c:	4a1b      	ldr	r2, [pc, #108]	@ (800270c <HAL_GPIO_Init+0x300>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <HAL_GPIO_Init+0x300>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026c6:	4a11      	ldr	r2, [pc, #68]	@ (800270c <HAL_GPIO_Init+0x300>)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3301      	adds	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f47f ae9d 	bne.w	800241c <HAL_GPIO_Init+0x10>
  }
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010000 	.word	0x40010000
 80026f8:	48000400 	.word	0x48000400
 80026fc:	48000800 	.word	0x48000800
 8002700:	48000c00 	.word	0x48000c00
 8002704:	48001000 	.word	0x48001000
 8002708:	48001400 	.word	0x48001400
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800272c:	e002      	b.n	8002734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e08d      	b.n	800286e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fdea 	bl	8001340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2224      	movs	r2, #36	@ 0x24
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002790:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	e006      	b.n	80027c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d108      	bne.n	80027e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	e007      	b.n	80027f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002804:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002814:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69d9      	ldr	r1, [r3, #28]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1a      	ldr	r2, [r3, #32]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	f040 80f9 	bne.w	8002a92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_I2C_Mem_Write+0x34>
 80028a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0ed      	b.n	8002a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_I2C_Mem_Write+0x4e>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e0e6      	b.n	8002a94 <HAL_I2C_Mem_Write+0x21c>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028ce:	f7ff fc8b 	bl	80021e8 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2319      	movs	r3, #25
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fac3 	bl	8002e6c <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0d1      	b.n	8002a94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2221      	movs	r2, #33	@ 0x21
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002910:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002918:	88f8      	ldrh	r0, [r7, #6]
 800291a:	893a      	ldrh	r2, [r7, #8]
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4603      	mov	r3, r0
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f9d3 	bl	8002cd4 <I2C_RequestMemoryWrite>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0a9      	b.n	8002a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2bff      	cmp	r3, #255	@ 0xff
 8002948:	d90e      	bls.n	8002968 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	@ 0xff
 800294e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	b2da      	uxtb	r2, r3
 8002956:	8979      	ldrh	r1, [r7, #10]
 8002958:	2300      	movs	r3, #0
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fc47 	bl	80031f4 <I2C_TransferConfig>
 8002966:	e00f      	b.n	8002988 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	b2da      	uxtb	r2, r3
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fc36 	bl	80031f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fac6 	bl	8002f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e07b      	b.n	8002a94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d034      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x1c8>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d130      	bne.n	8002a40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	2200      	movs	r2, #0
 80029e6:	2180      	movs	r1, #128	@ 0x80
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fa3f 	bl	8002e6c <I2C_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e04d      	b.n	8002a94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2bff      	cmp	r3, #255	@ 0xff
 8002a00:	d90e      	bls.n	8002a20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	22ff      	movs	r2, #255	@ 0xff
 8002a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	8979      	ldrh	r1, [r7, #10]
 8002a10:	2300      	movs	r3, #0
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 fbeb 	bl	80031f4 <I2C_TransferConfig>
 8002a1e:	e00f      	b.n	8002a40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	8979      	ldrh	r1, [r7, #10]
 8002a32:	2300      	movs	r3, #0
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fbda 	bl	80031f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d19e      	bne.n	8002988 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 faac 	bl	8002fac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e01a      	b.n	8002a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2220      	movs	r2, #32
 8002a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_I2C_Mem_Write+0x224>)
 8002a72:	400b      	ands	r3, r1
 8002a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
  }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	fe00e800 	.word	0xfe00e800

08002aa0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	817b      	strh	r3, [r7, #10]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	813b      	strh	r3, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	f040 80fd 	bne.w	8002cc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_I2C_Mem_Read+0x34>
 8002ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0f1      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Mem_Read+0x4e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0ea      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x224>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002af6:	f7ff fb77 	bl	80021e8 <HAL_GetTick>
 8002afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2319      	movs	r3, #25
 8002b02:	2201      	movs	r2, #1
 8002b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f9af 	bl	8002e6c <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0d5      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2222      	movs	r2, #34	@ 0x22
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b40:	88f8      	ldrh	r0, [r7, #6]
 8002b42:	893a      	ldrh	r2, [r7, #8]
 8002b44:	8979      	ldrh	r1, [r7, #10]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4603      	mov	r3, r0
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f913 	bl	8002d7c <I2C_RequestMemoryRead>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0ad      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2bff      	cmp	r3, #255	@ 0xff
 8002b70:	d90e      	bls.n	8002b90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	@ 0xff
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	4b52      	ldr	r3, [pc, #328]	@ (8002ccc <HAL_I2C_Mem_Read+0x22c>)
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fb33 	bl	80031f4 <I2C_TransferConfig>
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ccc <HAL_I2C_Mem_Read+0x22c>)
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fb22 	bl	80031f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2104      	movs	r1, #4
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f956 	bl	8002e6c <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07c      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d034      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x1d0>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d130      	bne.n	8002c70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c14:	2200      	movs	r2, #0
 8002c16:	2180      	movs	r1, #128	@ 0x80
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f927 	bl	8002e6c <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e04d      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2bff      	cmp	r3, #255	@ 0xff
 8002c30:	d90e      	bls.n	8002c50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	22ff      	movs	r2, #255	@ 0xff
 8002c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	8979      	ldrh	r1, [r7, #10]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fad3 	bl	80031f4 <I2C_TransferConfig>
 8002c4e:	e00f      	b.n	8002c70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	8979      	ldrh	r1, [r7, #10]
 8002c62:	2300      	movs	r3, #0
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fac2 	bl	80031f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d19a      	bne.n	8002bb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f994 	bl	8002fac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01a      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2220      	movs	r2, #32
 8002c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_I2C_Mem_Read+0x230>)
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
  }
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	80002400 	.word	0x80002400
 8002cd0:	fe00e800 	.word	0xfe00e800

08002cd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	817b      	strh	r3, [r7, #10]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	813b      	strh	r3, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	8979      	ldrh	r1, [r7, #10]
 8002cf4:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <I2C_RequestMemoryWrite+0xa4>)
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fa79 	bl	80031f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f909 	bl	8002f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e02c      	b.n	8002d70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d26:	e015      	b.n	8002d54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d28:	893b      	ldrh	r3, [r7, #8]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8ef 	bl	8002f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e012      	b.n	8002d70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4a:	893b      	ldrh	r3, [r7, #8]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2180      	movs	r1, #128	@ 0x80
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f884 	bl	8002e6c <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	80002000 	.word	0x80002000

08002d7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	817b      	strh	r3, [r7, #10]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	813b      	strh	r3, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	8979      	ldrh	r1, [r7, #10]
 8002d9c:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <I2C_RequestMemoryRead+0xa4>)
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2300      	movs	r3, #0
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa26 	bl	80031f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	69b9      	ldr	r1, [r7, #24]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f8b6 	bl	8002f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e02c      	b.n	8002e16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc2:	893b      	ldrh	r3, [r7, #8]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dcc:	e015      	b.n	8002dfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dce:	893b      	ldrh	r3, [r7, #8]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	69b9      	ldr	r1, [r7, #24]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f89c 	bl	8002f1e <I2C_WaitOnTXISFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e012      	b.n	8002e16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2140      	movs	r1, #64	@ 0x40
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f831 	bl	8002e6c <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	80002000 	.word	0x80002000

08002e24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d103      	bne.n	8002e42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d007      	beq.n	8002e60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	619a      	str	r2, [r3, #24]
  }
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e7c:	e03b      	b.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	6839      	ldr	r1, [r7, #0]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f8d6 	bl	8003034 <I2C_IsErrorOccurred>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e041      	b.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e98:	d02d      	beq.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9a:	f7ff f9a5 	bl	80021e8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d122      	bne.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d113      	bne.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f043 0220 	orr.w	r2, r3, #32
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d0b4      	beq.n	8002e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f2a:	e033      	b.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f87f 	bl	8003034 <I2C_IsErrorOccurred>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e031      	b.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f46:	d025      	beq.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7ff f94e 	bl	80021e8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d11a      	bne.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d013      	beq.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d1c4      	bne.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb8:	e02f      	b.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f838 	bl	8003034 <I2C_IsErrorOccurred>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e02d      	b.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fce:	f7ff f90b 	bl	80021e8 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d302      	bcc.n	8002fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11a      	bne.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d013      	beq.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b20      	cmp	r3, #32
 8003026:	d1c8      	bne.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d068      	beq.n	8003132 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2210      	movs	r2, #16
 8003066:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003068:	e049      	b.n	80030fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003070:	d045      	beq.n	80030fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7ff f8b9 	bl	80021e8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_IsErrorOccurred+0x54>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d13a      	bne.n	80030fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003092:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800309a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030aa:	d121      	bne.n	80030f0 <I2C_IsErrorOccurred+0xbc>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030b2:	d01d      	beq.n	80030f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d01a      	beq.n	80030f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030ca:	f7ff f88d 	bl	80021e8 <HAL_GetTick>
 80030ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d0:	e00e      	b.n	80030f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030d2:	f7ff f889 	bl	80021e8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b19      	cmp	r3, #25
 80030de:	d907      	bls.n	80030f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f043 0320 	orr.w	r3, r3, #32
 80030e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030ee:	e006      	b.n	80030fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d1e9      	bne.n	80030d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b20      	cmp	r3, #32
 800310a:	d003      	beq.n	8003114 <I2C_IsErrorOccurred+0xe0>
 800310c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0aa      	beq.n	800306a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2220      	movs	r2, #32
 8003122:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f043 0308 	orr.w	r3, r3, #8
 800316c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01c      	beq.n	80031e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fe3b 	bl	8002e24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <I2C_IsErrorOccurred+0x1bc>)
 80031ba:	400b      	ands	r3, r1
 80031bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3728      	adds	r7, #40	@ 0x28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	fe00e800 	.word	0xfe00e800

080031f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	817b      	strh	r3, [r7, #10]
 8003202:	4613      	mov	r3, r2
 8003204:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800320c:	7a7b      	ldrb	r3, [r7, #9]
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003214:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	4313      	orrs	r3, r2
 800321e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003222:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	0d5b      	lsrs	r3, r3, #21
 800322e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003232:	4b08      	ldr	r3, [pc, #32]	@ (8003254 <I2C_TransferConfig+0x60>)
 8003234:	430b      	orrs	r3, r1
 8003236:	43db      	mvns	r3, r3
 8003238:	ea02 0103 	and.w	r1, r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	03ff63ff 	.word	0x03ff63ff

08003258 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d138      	bne.n	80032e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003278:	2302      	movs	r3, #2
 800327a:	e032      	b.n	80032e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	@ 0x24
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b20      	cmp	r3, #32
 8003302:	d139      	bne.n	8003378 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800330e:	2302      	movs	r3, #2
 8003310:	e033      	b.n	800337a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2224      	movs	r2, #36	@ 0x24
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003340:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d141      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003396:	4b4b      	ldr	r3, [pc, #300]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a2:	d131      	bne.n	8003408 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a4:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033aa:	4a46      	ldr	r2, [pc, #280]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b4:	4b43      	ldr	r3, [pc, #268]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033bc:	4a41      	ldr	r2, [pc, #260]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033c4:	4b40      	ldr	r3, [pc, #256]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2232      	movs	r2, #50	@ 0x32
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	4a3f      	ldr	r2, [pc, #252]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	0c9b      	lsrs	r3, r3, #18
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033da:	e002      	b.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e2:	4b38      	ldr	r3, [pc, #224]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ee:	d102      	bne.n	80033f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f2      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033f6:	4b33      	ldr	r3, [pc, #204]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003402:	d158      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e057      	b.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003408:	4b2e      	ldr	r3, [pc, #184]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800340e:	4a2d      	ldr	r2, [pc, #180]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003414:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003418:	e04d      	b.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003420:	d141      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003422:	4b28      	ldr	r3, [pc, #160]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342e:	d131      	bne.n	8003494 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003430:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003436:	4a23      	ldr	r2, [pc, #140]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003440:	4b20      	ldr	r3, [pc, #128]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003448:	4a1e      	ldr	r2, [pc, #120]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800344e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003450:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2232      	movs	r2, #50	@ 0x32
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	4a1c      	ldr	r2, [pc, #112]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003466:	e002      	b.n	800346e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b01      	subs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346e:	4b15      	ldr	r3, [pc, #84]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347a:	d102      	bne.n	8003482 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f2      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348e:	d112      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e011      	b.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800349a:	4a0a      	ldr	r2, [pc, #40]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034a4:	e007      	b.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034a6:	4b07      	ldr	r3, [pc, #28]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034ae:	4a05      	ldr	r2, [pc, #20]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40007000 	.word	0x40007000
 80034c8:	20000000 	.word	0x20000000
 80034cc:	431bde83 	.word	0x431bde83

080034d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a04      	ldr	r2, [pc, #16]	@ (80034ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034de:	6093      	str	r3, [r2, #8]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40007000 	.word	0x40007000

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e2fe      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d075      	beq.n	80035fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800350e:	4b97      	ldr	r3, [pc, #604]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003518:	4b94      	ldr	r3, [pc, #592]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d102      	bne.n	800352e <HAL_RCC_OscConfig+0x3e>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d002      	beq.n	8003534 <HAL_RCC_OscConfig+0x44>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4b8d      	ldr	r3, [pc, #564]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x108>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d157      	bne.n	80035f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e2d9      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x74>
 8003556:	4b85      	ldr	r3, [pc, #532]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a84      	ldr	r2, [pc, #528]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x98>
 800356e:	4b7f      	ldr	r3, [pc, #508]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7e      	ldr	r2, [pc, #504]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b7c      	ldr	r3, [pc, #496]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7b      	ldr	r2, [pc, #492]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003588:	4b78      	ldr	r3, [pc, #480]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a77      	ldr	r2, [pc, #476]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b75      	ldr	r3, [pc, #468]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a74      	ldr	r2, [pc, #464]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fe1e 	bl	80021e8 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fe1a 	bl	80021e8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	@ 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e29e      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c2:	4b6a      	ldr	r3, [pc, #424]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xc0>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe fe0a 	bl	80021e8 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe fe06 	bl	80021e8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	@ 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e28a      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ea:	4b60      	ldr	r3, [pc, #384]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0xe8>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003606:	4b59      	ldr	r3, [pc, #356]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003610:	4b56      	ldr	r3, [pc, #344]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d102      	bne.n	8003626 <HAL_RCC_OscConfig+0x136>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d002      	beq.n	800362c <HAL_RCC_OscConfig+0x13c>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d11f      	bne.n	800366c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800362c:	4b4f      	ldr	r3, [pc, #316]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_OscConfig+0x154>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e25d      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b49      	ldr	r3, [pc, #292]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	4946      	ldr	r1, [pc, #280]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003658:	4b45      	ldr	r3, [pc, #276]	@ (8003770 <HAL_RCC_OscConfig+0x280>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fd77 	bl	8002150 <HAL_InitTick>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d043      	beq.n	80036f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e249      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003674:	4b3d      	ldr	r3, [pc, #244]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a3c      	ldr	r2, [pc, #240]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800367a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fdb2 	bl	80021e8 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003688:	f7fe fdae 	bl	80021e8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e232      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800369a:	4b34      	ldr	r3, [pc, #208]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b31      	ldr	r3, [pc, #196]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	061b      	lsls	r3, r3, #24
 80036b4:	492d      	ldr	r1, [pc, #180]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
 80036ba:	e01a      	b.n	80036f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 80036c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe fd8e 	bl	80021e8 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7fe fd8a 	bl	80021e8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e20e      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1e0>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d041      	beq.n	8003782 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01c      	beq.n	8003740 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003706:	4b19      	ldr	r3, [pc, #100]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370c:	4a17      	ldr	r2, [pc, #92]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fe fd67 	bl	80021e8 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371e:	f7fe fd63 	bl	80021e8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1e7      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003730:	4b0e      	ldr	r3, [pc, #56]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ef      	beq.n	800371e <HAL_RCC_OscConfig+0x22e>
 800373e:	e020      	b.n	8003782 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003740:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003746:	4a09      	ldr	r2, [pc, #36]	@ (800376c <HAL_RCC_OscConfig+0x27c>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fe fd4a 	bl	80021e8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003756:	e00d      	b.n	8003774 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003758:	f7fe fd46 	bl	80021e8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d906      	bls.n	8003774 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1ca      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003774:	4b8c      	ldr	r3, [pc, #560]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ea      	bne.n	8003758 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80a6 	beq.w	80038dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003794:	4b84      	ldr	r3, [pc, #528]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_OscConfig+0x2b4>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x2b6>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	4b7f      	ldr	r3, [pc, #508]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ae:	4a7e      	ldr	r2, [pc, #504]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80037b6:	4b7c      	ldr	r3, [pc, #496]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c6:	4b79      	ldr	r3, [pc, #484]	@ (80039ac <HAL_RCC_OscConfig+0x4bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d2:	4b76      	ldr	r3, [pc, #472]	@ (80039ac <HAL_RCC_OscConfig+0x4bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a75      	ldr	r2, [pc, #468]	@ (80039ac <HAL_RCC_OscConfig+0x4bc>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7fe fd03 	bl	80021e8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7fe fcff 	bl	80021e8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e183      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f8:	4b6c      	ldr	r3, [pc, #432]	@ (80039ac <HAL_RCC_OscConfig+0x4bc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d108      	bne.n	800381e <HAL_RCC_OscConfig+0x32e>
 800380c:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800381c:	e024      	b.n	8003868 <HAL_RCC_OscConfig+0x378>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d110      	bne.n	8003848 <HAL_RCC_OscConfig+0x358>
 8003826:	4b60      	ldr	r3, [pc, #384]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	4a5e      	ldr	r2, [pc, #376]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003836:	4b5c      	ldr	r3, [pc, #368]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383c:	4a5a      	ldr	r2, [pc, #360]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003846:	e00f      	b.n	8003868 <HAL_RCC_OscConfig+0x378>
 8003848:	4b57      	ldr	r3, [pc, #348]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	4a56      	ldr	r2, [pc, #344]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003858:	4b53      	ldr	r3, [pc, #332]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	4a52      	ldr	r2, [pc, #328]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d016      	beq.n	800389e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fe fcba 	bl	80021e8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fe fcb6 	bl	80021e8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e138      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388e:	4b46      	ldr	r3, [pc, #280]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ed      	beq.n	8003878 <HAL_RCC_OscConfig+0x388>
 800389c:	e015      	b.n	80038ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389e:	f7fe fca3 	bl	80021e8 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe fc9f 	bl	80021e8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e121      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038bc:	4b3a      	ldr	r3, [pc, #232]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ed      	bne.n	80038a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ca:	7ffb      	ldrb	r3, [r7, #31]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b35      	ldr	r3, [pc, #212]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	4a34      	ldr	r2, [pc, #208]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d03c      	beq.n	8003962 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01c      	beq.n	800392a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038f0:	4b2d      	ldr	r3, [pc, #180]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 80038f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038f6:	4a2c      	ldr	r2, [pc, #176]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fe fc72 	bl	80021e8 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003908:	f7fe fc6e 	bl	80021e8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0f2      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800391a:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 800391c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <HAL_RCC_OscConfig+0x418>
 8003928:	e01b      	b.n	8003962 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800392a:	4b1f      	ldr	r3, [pc, #124]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 800392c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fe fc55 	bl	80021e8 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003942:	f7fe fc51 	bl	80021e8 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0d5      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003954:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1ef      	bne.n	8003942 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80c9 	beq.w	8003afe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396c:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b0c      	cmp	r3, #12
 8003976:	f000 8083 	beq.w	8003a80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d15e      	bne.n	8003a40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a08      	ldr	r2, [pc, #32]	@ (80039a8 <HAL_RCC_OscConfig+0x4b8>)
 8003988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800398c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fe fc2b 	bl	80021e8 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003994:	e00c      	b.n	80039b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003996:	f7fe fc27 	bl	80021e8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d905      	bls.n	80039b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0ab      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b0:	4b55      	ldr	r3, [pc, #340]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ec      	bne.n	8003996 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039bc:	4b52      	ldr	r3, [pc, #328]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	4b52      	ldr	r3, [pc, #328]	@ (8003b0c <HAL_RCC_OscConfig+0x61c>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6a11      	ldr	r1, [r2, #32]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039cc:	3a01      	subs	r2, #1
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	4311      	orrs	r1, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80039d6:	0212      	lsls	r2, r2, #8
 80039d8:	4311      	orrs	r1, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039de:	0852      	lsrs	r2, r2, #1
 80039e0:	3a01      	subs	r2, #1
 80039e2:	0552      	lsls	r2, r2, #21
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039ea:	0852      	lsrs	r2, r2, #1
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0652      	lsls	r2, r2, #25
 80039f0:	4311      	orrs	r1, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039f6:	06d2      	lsls	r2, r2, #27
 80039f8:	430a      	orrs	r2, r1
 80039fa:	4943      	ldr	r1, [pc, #268]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b41      	ldr	r3, [pc, #260]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a40      	ldr	r2, [pc, #256]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a3d      	ldr	r2, [pc, #244]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe fbe6 	bl	80021e8 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fe fbe2 	bl	80021e8 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e066      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	4b35      	ldr	r3, [pc, #212]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x530>
 8003a3e:	e05e      	b.n	8003afe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a40:	4b31      	ldr	r3, [pc, #196]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a30      	ldr	r2, [pc, #192]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fbcc 	bl	80021e8 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fe fbc8 	bl	80021e8 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e04c      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a66:	4b28      	ldr	r3, [pc, #160]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a72:	4b25      	ldr	r3, [pc, #148]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	4924      	ldr	r1, [pc, #144]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a78:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <HAL_RCC_OscConfig+0x620>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	60cb      	str	r3, [r1, #12]
 8003a7e:	e03e      	b.n	8003afe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e039      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0203 	and.w	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d12c      	bne.n	8003afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d123      	bne.n	8003afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d11b      	bne.n	8003afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d113      	bne.n	8003afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	3b01      	subs	r3, #1
 8003af4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	019f800c 	.word	0x019f800c
 8003b10:	feeefffc 	.word	0xfeeefffc

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e11e      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b91      	ldr	r3, [pc, #580]	@ (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d910      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 020f 	bic.w	r2, r3, #15
 8003b42:	498c      	ldr	r1, [pc, #560]	@ (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b8a      	ldr	r3, [pc, #552]	@ (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e106      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d073      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d129      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b70:	4b81      	ldr	r3, [pc, #516]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0f4      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b80:	f000 f99e 	bl	8003ec0 <RCC_GetSysClockFreqFromPLLSource>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a7c      	ldr	r2, [pc, #496]	@ (8003d7c <HAL_RCC_ClockConfig+0x268>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d93f      	bls.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d033      	beq.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d12f      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bae:	4b72      	ldr	r3, [pc, #456]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bb6:	4a70      	ldr	r2, [pc, #448]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e024      	b.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0c6      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bdc:	4b66      	ldr	r3, [pc, #408]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0be      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bec:	f000 f8ce 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4a61      	ldr	r2, [pc, #388]	@ (8003d7c <HAL_RCC_ClockConfig+0x268>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d909      	bls.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c02:	4a5d      	ldr	r2, [pc, #372]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4957      	ldr	r1, [pc, #348]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c20:	f7fe fae2 	bl	80021e8 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7fe fade 	bl	80021e8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e095      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 020c 	and.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1eb      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d023      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c68:	4b43      	ldr	r3, [pc, #268]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a42      	ldr	r2, [pc, #264]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c80:	4b3d      	ldr	r3, [pc, #244]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c88:	4a3b      	ldr	r2, [pc, #236]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c90:	4b39      	ldr	r3, [pc, #228]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4936      	ldr	r1, [pc, #216]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b80      	cmp	r3, #128	@ 0x80
 8003ca8:	d105      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003caa:	4b33      	ldr	r3, [pc, #204]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4a32      	ldr	r2, [pc, #200]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d21d      	bcs.n	8003d00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 020f 	bic.w	r2, r3, #15
 8003ccc:	4929      	ldr	r1, [pc, #164]	@ (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cd4:	f7fe fa88 	bl	80021e8 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fe fa84 	bl	80021e8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e03b      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b20      	ldr	r3, [pc, #128]	@ (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d1ed      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4917      	ldr	r1, [pc, #92]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2a:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	490f      	ldr	r1, [pc, #60]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d3e:	f000 f825 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d42:	4602      	mov	r2, r0
 8003d44:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	490c      	ldr	r1, [pc, #48]	@ (8003d80 <HAL_RCC_ClockConfig+0x26c>)
 8003d50:	5ccb      	ldrb	r3, [r1, r3]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d84 <HAL_RCC_ClockConfig+0x270>)
 8003d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <HAL_RCC_ClockConfig+0x274>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe f9f4 	bl	8002150 <HAL_InitTick>
 8003d68:	4603      	mov	r3, r0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	04c4b400 	.word	0x04c4b400
 8003d80:	08006bec 	.word	0x08006bec
 8003d84:	20000000 	.word	0x20000000
 8003d88:	20000004 	.word	0x20000004

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d92:	4b2c      	ldr	r3, [pc, #176]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	e047      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003da4:	4b27      	ldr	r3, [pc, #156]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d102      	bne.n	8003db6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003db0:	4b26      	ldr	r3, [pc, #152]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	e03e      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003db6:	4b23      	ldr	r3, [pc, #140]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d136      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc2:	4b20      	ldr	r3, [pc, #128]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	4a16      	ldr	r2, [pc, #88]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dea:	68d2      	ldr	r2, [r2, #12]
 8003dec:	0a12      	lsrs	r2, r2, #8
 8003dee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
      break;
 8003df8:	e00c      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dfa:	4a13      	ldr	r2, [pc, #76]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	4a10      	ldr	r2, [pc, #64]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	0a12      	lsrs	r2, r2, #8
 8003e08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e0c:	fb02 f303 	mul.w	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
      break;
 8003e12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0e5b      	lsrs	r3, r3, #25
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e001      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e34:	693b      	ldr	r3, [r7, #16]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	007a1200 	.word	0x007a1200

08003e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e54:	4b03      	ldr	r3, [pc, #12]	@ (8003e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000000 	.word	0x20000000

08003e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e6c:	f7ff fff0 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4904      	ldr	r1, [pc, #16]	@ (8003e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	08006bfc 	.word	0x08006bfc

08003e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e98:	f7ff ffda 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	0adb      	lsrs	r3, r3, #11
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	4904      	ldr	r1, [pc, #16]	@ (8003ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	08006bfc 	.word	0x08006bfc

08003ec0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3301      	adds	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d10c      	bne.n	8003efe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ee4:	4a17      	ldr	r2, [pc, #92]	@ (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eee:	68d2      	ldr	r2, [r2, #12]
 8003ef0:	0a12      	lsrs	r2, r2, #8
 8003ef2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	617b      	str	r3, [r7, #20]
    break;
 8003efc:	e00c      	b.n	8003f18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003efe:	4a12      	ldr	r2, [pc, #72]	@ (8003f48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f08:	68d2      	ldr	r2, [r2, #12]
 8003f0a:	0a12      	lsrs	r2, r2, #8
 8003f0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
    break;
 8003f16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f18:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	0e5b      	lsrs	r3, r3, #25
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f32:	687b      	ldr	r3, [r7, #4]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40021000 	.word	0x40021000
 8003f44:	007a1200 	.word	0x007a1200
 8003f48:	00f42400 	.word	0x00f42400

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8098 	beq.w	800409a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6e:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	4b40      	ldr	r3, [pc, #256]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f86:	4b3d      	ldr	r3, [pc, #244]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f96:	4b3a      	ldr	r3, [pc, #232]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a39      	ldr	r2, [pc, #228]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa2:	f7fe f921 	bl	80021e8 <HAL_GetTick>
 8003fa6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa8:	e009      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fe f91d 	bl	80021e8 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d902      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	74fb      	strb	r3, [r7, #19]
        break;
 8003fbc:	e005      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fbe:	4b30      	ldr	r3, [pc, #192]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ef      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d159      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01e      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d019      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fec:	4b23      	ldr	r3, [pc, #140]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ff8:	4b20      	ldr	r3, [pc, #128]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004008:	4b1c      	ldr	r3, [pc, #112]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400e:	4a1b      	ldr	r2, [pc, #108]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004018:	4a18      	ldr	r2, [pc, #96]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402a:	f7fe f8dd 	bl	80021e8 <HAL_GetTick>
 800402e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004030:	e00b      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fe f8d9 	bl	80021e8 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d902      	bls.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	74fb      	strb	r3, [r7, #19]
            break;
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404a:	4b0c      	ldr	r3, [pc, #48]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ec      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800405e:	4b07      	ldr	r3, [pc, #28]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406c:	4903      	ldr	r1, [pc, #12]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004074:	e008      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	74bb      	strb	r3, [r7, #18]
 800407a:	e005      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800407c:	40021000 	.word	0x40021000
 8004080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004088:	7c7b      	ldrb	r3, [r7, #17]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d105      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408e:	4ba7      	ldr	r3, [pc, #668]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004092:	4aa6      	ldr	r2, [pc, #664]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004098:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a6:	4ba1      	ldr	r3, [pc, #644]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f023 0203 	bic.w	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	499d      	ldr	r1, [pc, #628]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040c8:	4b98      	ldr	r3, [pc, #608]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ce:	f023 020c 	bic.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	4995      	ldr	r1, [pc, #596]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ea:	4b90      	ldr	r3, [pc, #576]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	498c      	ldr	r1, [pc, #560]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800410c:	4b87      	ldr	r3, [pc, #540]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	4984      	ldr	r1, [pc, #528]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800412e:	4b7f      	ldr	r3, [pc, #508]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	497b      	ldr	r1, [pc, #492]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004150:	4b76      	ldr	r3, [pc, #472]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	4973      	ldr	r1, [pc, #460]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004172:	4b6e      	ldr	r3, [pc, #440]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	496a      	ldr	r1, [pc, #424]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004194:	4b65      	ldr	r3, [pc, #404]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4962      	ldr	r1, [pc, #392]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b6:	4b5d      	ldr	r3, [pc, #372]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	4959      	ldr	r1, [pc, #356]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d8:	4b54      	ldr	r3, [pc, #336]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	4951      	ldr	r1, [pc, #324]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041fa:	4b4c      	ldr	r3, [pc, #304]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	4948      	ldr	r1, [pc, #288]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800421c:	4b43      	ldr	r3, [pc, #268]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	4940      	ldr	r1, [pc, #256]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800423a:	d105      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b3b      	ldr	r3, [pc, #236]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a3a      	ldr	r2, [pc, #232]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004246:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004254:	4b35      	ldr	r3, [pc, #212]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004262:	4932      	ldr	r1, [pc, #200]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004272:	d105      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004274:	4b2d      	ldr	r3, [pc, #180]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800427e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800428c:	4b27      	ldr	r3, [pc, #156]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429a:	4924      	ldr	r1, [pc, #144]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4b1f      	ldr	r3, [pc, #124]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a1e      	ldr	r2, [pc, #120]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c4:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	4916      	ldr	r1, [pc, #88]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b11      	ldr	r3, [pc, #68]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a10      	ldr	r2, [pc, #64]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d019      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	4908      	ldr	r1, [pc, #32]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800431a:	d109      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b03      	ldr	r3, [pc, #12]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a02      	ldr	r2, [pc, #8]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004326:	60d3      	str	r3, [r2, #12]
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d015      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800433c:	4b29      	ldr	r3, [pc, #164]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	4926      	ldr	r1, [pc, #152]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800435a:	d105      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800435c:	4b21      	ldr	r3, [pc, #132]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a20      	ldr	r2, [pc, #128]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004366:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d015      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004374:	4b1b      	ldr	r3, [pc, #108]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004382:	4918      	ldr	r1, [pc, #96]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004392:	d105      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004394:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a12      	ldr	r2, [pc, #72]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043ac:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ba:	490a      	ldr	r1, [pc, #40]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ca:	d105      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a04      	ldr	r2, [pc, #16]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000

080043e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e049      	b.n	800448e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd fc9e 	bl	8001d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f000 fd96 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d001      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e054      	b.n	800455a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a26      	ldr	r2, [pc, #152]	@ (8004568 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044da:	d01d      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a22      	ldr	r2, [pc, #136]	@ (800456c <HAL_TIM_Base_Start_IT+0xd4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a21      	ldr	r2, [pc, #132]	@ (8004570 <HAL_TIM_Base_Start_IT+0xd8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004574 <HAL_TIM_Base_Start_IT+0xdc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004578 <HAL_TIM_Base_Start_IT+0xe0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1c      	ldr	r2, [pc, #112]	@ (800457c <HAL_TIM_Base_Start_IT+0xe4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1b      	ldr	r2, [pc, #108]	@ (8004580 <HAL_TIM_Base_Start_IT+0xe8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d115      	bne.n	8004544 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	4b19      	ldr	r3, [pc, #100]	@ (8004584 <HAL_TIM_Base_Start_IT+0xec>)
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b06      	cmp	r3, #6
 8004528:	d015      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d011      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	e008      	b.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e000      	b.n	8004558 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40014000 	.word	0x40014000
 8004580:	40015000 	.word	0x40015000
 8004584:	00010007 	.word	0x00010007

08004588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e049      	b.n	800462e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f841 	bl	8004636 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 fcc6 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_TIM_PWM_Start+0x24>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e03c      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b04      	cmp	r3, #4
 8004674:	d109      	bne.n	800468a <HAL_TIM_PWM_Start+0x3e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	e02f      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d109      	bne.n	80046a4 <HAL_TIM_PWM_Start+0x58>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e022      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d109      	bne.n	80046be <HAL_TIM_PWM_Start+0x72>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	e015      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x8c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e008      	b.n	80046ea <HAL_TIM_PWM_Start+0x9e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0a6      	b.n	8004840 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0xb6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004700:	e023      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0xc6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004710:	e01b      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start+0xd6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004720:	e013      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start+0xe6>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004730:	e00b      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b10      	cmp	r3, #16
 8004736:	d104      	bne.n	8004742 <HAL_TIM_PWM_Start+0xf6>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004740:	e003      	b.n	800474a <HAL_TIM_PWM_Start+0xfe>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f001 f87a 	bl	800584c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a3a      	ldr	r2, [pc, #232]	@ (8004848 <HAL_TIM_PWM_Start+0x1fc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_TIM_PWM_Start+0x148>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a39      	ldr	r2, [pc, #228]	@ (800484c <HAL_TIM_PWM_Start+0x200>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_TIM_PWM_Start+0x148>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a37      	ldr	r2, [pc, #220]	@ (8004850 <HAL_TIM_PWM_Start+0x204>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_TIM_PWM_Start+0x148>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a36      	ldr	r2, [pc, #216]	@ (8004854 <HAL_TIM_PWM_Start+0x208>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_TIM_PWM_Start+0x148>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a34      	ldr	r2, [pc, #208]	@ (8004858 <HAL_TIM_PWM_Start+0x20c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_TIM_PWM_Start+0x148>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a33      	ldr	r2, [pc, #204]	@ (800485c <HAL_TIM_PWM_Start+0x210>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_TIM_PWM_Start+0x14c>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_TIM_PWM_Start+0x14e>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a25      	ldr	r2, [pc, #148]	@ (8004848 <HAL_TIM_PWM_Start+0x1fc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d022      	beq.n	80047fe <HAL_TIM_PWM_Start+0x1b2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c0:	d01d      	beq.n	80047fe <HAL_TIM_PWM_Start+0x1b2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a26      	ldr	r2, [pc, #152]	@ (8004860 <HAL_TIM_PWM_Start+0x214>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d018      	beq.n	80047fe <HAL_TIM_PWM_Start+0x1b2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a24      	ldr	r2, [pc, #144]	@ (8004864 <HAL_TIM_PWM_Start+0x218>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_TIM_PWM_Start+0x1b2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a23      	ldr	r2, [pc, #140]	@ (8004868 <HAL_TIM_PWM_Start+0x21c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00e      	beq.n	80047fe <HAL_TIM_PWM_Start+0x1b2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a19      	ldr	r2, [pc, #100]	@ (800484c <HAL_TIM_PWM_Start+0x200>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d009      	beq.n	80047fe <HAL_TIM_PWM_Start+0x1b2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a18      	ldr	r2, [pc, #96]	@ (8004850 <HAL_TIM_PWM_Start+0x204>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <HAL_TIM_PWM_Start+0x1b2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a18      	ldr	r2, [pc, #96]	@ (800485c <HAL_TIM_PWM_Start+0x210>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d115      	bne.n	800482a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	4b19      	ldr	r3, [pc, #100]	@ (800486c <HAL_TIM_PWM_Start+0x220>)
 8004806:	4013      	ands	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b06      	cmp	r3, #6
 800480e:	d015      	beq.n	800483c <HAL_TIM_PWM_Start+0x1f0>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004816:	d011      	beq.n	800483c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	e008      	b.n	800483c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e000      	b.n	800483e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40013400 	.word	0x40013400
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800
 800485c:	40015000 	.word	0x40015000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	00010007 	.word	0x00010007

08004870 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e097      	b.n	80049b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fd f981 	bl	8001ba0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80048b4:	f023 0307 	bic.w	r3, r3, #7
 80048b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f000 fb47 	bl	8004f58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	4313      	orrs	r3, r2
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004910:	f023 030c 	bic.w	r3, r3, #12
 8004914:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800491c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	4313      	orrs	r3, r2
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	011a      	lsls	r2, r3, #4
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	031b      	lsls	r3, r3, #12
 8004940:	4313      	orrs	r3, r2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	4313      	orrs	r3, r2
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d110      	bne.n	8004a0e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d102      	bne.n	80049f8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049f2:	7b7b      	ldrb	r3, [r7, #13]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d001      	beq.n	80049fc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e089      	b.n	8004b10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a0c:	e031      	b.n	8004a72 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d110      	bne.n	8004a36 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a14:	7bbb      	ldrb	r3, [r7, #14]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a1a:	7b3b      	ldrb	r3, [r7, #12]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d001      	beq.n	8004a24 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e075      	b.n	8004b10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a34:	e01d      	b.n	8004a72 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d108      	bne.n	8004a4e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a3c:	7bbb      	ldrb	r3, [r7, #14]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a42:	7b7b      	ldrb	r3, [r7, #13]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d102      	bne.n	8004a4e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a48:	7b3b      	ldrb	r3, [r7, #12]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d001      	beq.n	8004a52 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e05e      	b.n	8004b10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d010      	beq.n	8004aa0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004a7e:	e01f      	b.n	8004ac0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2201      	movs	r2, #1
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fedf 	bl	800584c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0202 	orr.w	r2, r2, #2
 8004a9c:	60da      	str	r2, [r3, #12]
      break;
 8004a9e:	e02e      	b.n	8004afe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	2104      	movs	r1, #4
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fecf 	bl	800584c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0204 	orr.w	r2, r2, #4
 8004abc:	60da      	str	r2, [r3, #12]
      break;
 8004abe:	e01e      	b.n	8004afe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 febf 	bl	800584c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 feb8 	bl	800584c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0202 	orr.w	r2, r2, #2
 8004aea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0204 	orr.w	r2, r2, #4
 8004afa:	60da      	str	r2, [r3, #12]
      break;
 8004afc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0ff      	b.n	8004d36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b14      	cmp	r3, #20
 8004b42:	f200 80f0 	bhi.w	8004d26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b46:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004d27 	.word	0x08004d27
 8004b54:	08004d27 	.word	0x08004d27
 8004b58:	08004d27 	.word	0x08004d27
 8004b5c:	08004be1 	.word	0x08004be1
 8004b60:	08004d27 	.word	0x08004d27
 8004b64:	08004d27 	.word	0x08004d27
 8004b68:	08004d27 	.word	0x08004d27
 8004b6c:	08004c23 	.word	0x08004c23
 8004b70:	08004d27 	.word	0x08004d27
 8004b74:	08004d27 	.word	0x08004d27
 8004b78:	08004d27 	.word	0x08004d27
 8004b7c:	08004c63 	.word	0x08004c63
 8004b80:	08004d27 	.word	0x08004d27
 8004b84:	08004d27 	.word	0x08004d27
 8004b88:	08004d27 	.word	0x08004d27
 8004b8c:	08004ca5 	.word	0x08004ca5
 8004b90:	08004d27 	.word	0x08004d27
 8004b94:	08004d27 	.word	0x08004d27
 8004b98:	08004d27 	.word	0x08004d27
 8004b9c:	08004ce5 	.word	0x08004ce5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa8a 	bl	80050c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0208 	orr.w	r2, r2, #8
 8004bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0204 	bic.w	r2, r2, #4
 8004bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6999      	ldr	r1, [r3, #24]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	619a      	str	r2, [r3, #24]
      break;
 8004bde:	e0a5      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fb04 	bl	80051f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6999      	ldr	r1, [r3, #24]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	619a      	str	r2, [r3, #24]
      break;
 8004c20:	e084      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fb77 	bl	800531c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0208 	orr.w	r2, r2, #8
 8004c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0204 	bic.w	r2, r2, #4
 8004c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69d9      	ldr	r1, [r3, #28]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	61da      	str	r2, [r3, #28]
      break;
 8004c60:	e064      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fbe9 	bl	8005440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69d9      	ldr	r1, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	021a      	lsls	r2, r3, #8
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	61da      	str	r2, [r3, #28]
      break;
 8004ca2:	e043      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fc5c 	bl	8005568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0204 	bic.w	r2, r2, #4
 8004cce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ce2:	e023      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fca6 	bl	800563c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004d24:	e002      	b.n	8004d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop

08004d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0ee      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x1fa>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004d7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a6b      	ldr	r2, [pc, #428]	@ (8004f44 <HAL_TIM_ConfigClockSource+0x204>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	f000 80b9 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004d9c:	4a69      	ldr	r2, [pc, #420]	@ (8004f44 <HAL_TIM_ConfigClockSource+0x204>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	f200 80be 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004da4:	4a68      	ldr	r2, [pc, #416]	@ (8004f48 <HAL_TIM_ConfigClockSource+0x208>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	f000 80b1 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004dac:	4a66      	ldr	r2, [pc, #408]	@ (8004f48 <HAL_TIM_ConfigClockSource+0x208>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	f200 80b6 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004db4:	4a65      	ldr	r2, [pc, #404]	@ (8004f4c <HAL_TIM_ConfigClockSource+0x20c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	f000 80a9 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004dbc:	4a63      	ldr	r2, [pc, #396]	@ (8004f4c <HAL_TIM_ConfigClockSource+0x20c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	f200 80ae 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004dc4:	4a62      	ldr	r2, [pc, #392]	@ (8004f50 <HAL_TIM_ConfigClockSource+0x210>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	f000 80a1 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004dcc:	4a60      	ldr	r2, [pc, #384]	@ (8004f50 <HAL_TIM_ConfigClockSource+0x210>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	f200 80a6 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004dd4:	4a5f      	ldr	r2, [pc, #380]	@ (8004f54 <HAL_TIM_ConfigClockSource+0x214>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	f000 8099 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004ddc:	4a5d      	ldr	r2, [pc, #372]	@ (8004f54 <HAL_TIM_ConfigClockSource+0x214>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	f200 809e 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004de4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004de8:	f000 8091 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004dec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004df0:	f200 8096 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004df8:	f000 8089 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e00:	f200 808e 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e08:	d03e      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0x148>
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e0e:	f200 8087 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e16:	f000 8086 	beq.w	8004f26 <HAL_TIM_ConfigClockSource+0x1e6>
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e1e:	d87f      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e20:	2b70      	cmp	r3, #112	@ 0x70
 8004e22:	d01a      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x11a>
 8004e24:	2b70      	cmp	r3, #112	@ 0x70
 8004e26:	d87b      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e28:	2b60      	cmp	r3, #96	@ 0x60
 8004e2a:	d050      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x18e>
 8004e2c:	2b60      	cmp	r3, #96	@ 0x60
 8004e2e:	d877      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e30:	2b50      	cmp	r3, #80	@ 0x50
 8004e32:	d03c      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x16e>
 8004e34:	2b50      	cmp	r3, #80	@ 0x50
 8004e36:	d873      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e38:	2b40      	cmp	r3, #64	@ 0x40
 8004e3a:	d058      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x1ae>
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d86f      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e40:	2b30      	cmp	r3, #48	@ 0x30
 8004e42:	d064      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004e44:	2b30      	cmp	r3, #48	@ 0x30
 8004e46:	d86b      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d060      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d867      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d05c      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d05a      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x1ce>
 8004e58:	e062      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e6a:	f000 fccf 	bl	800580c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	609a      	str	r2, [r3, #8]
      break;
 8004e86:	e04f      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e98:	f000 fcb8 	bl	800580c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eaa:	609a      	str	r2, [r3, #8]
      break;
 8004eac:	e03c      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 fc2a 	bl	8005714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2150      	movs	r1, #80	@ 0x50
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fc83 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e02c      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 fc49 	bl	8005772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2160      	movs	r1, #96	@ 0x60
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fc73 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 8004eec:	e01c      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	461a      	mov	r2, r3
 8004efc:	f000 fc0a 	bl	8005714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2140      	movs	r1, #64	@ 0x40
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fc63 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 8004f0c:	e00c      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f000 fc5a 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 8004f1e:	e003      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8004f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	00100070 	.word	0x00100070
 8004f48:	00100050 	.word	0x00100050
 8004f4c:	00100040 	.word	0x00100040
 8004f50:	00100030 	.word	0x00100030
 8004f54:	00100020 	.word	0x00100020

08004f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800509c <TIM_Base_SetConfig+0x144>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d017      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f76:	d013      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a49      	ldr	r2, [pc, #292]	@ (80050a0 <TIM_Base_SetConfig+0x148>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a48      	ldr	r2, [pc, #288]	@ (80050a4 <TIM_Base_SetConfig+0x14c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a47      	ldr	r2, [pc, #284]	@ (80050a8 <TIM_Base_SetConfig+0x150>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a46      	ldr	r2, [pc, #280]	@ (80050ac <TIM_Base_SetConfig+0x154>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a45      	ldr	r2, [pc, #276]	@ (80050b0 <TIM_Base_SetConfig+0x158>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a39      	ldr	r2, [pc, #228]	@ (800509c <TIM_Base_SetConfig+0x144>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d023      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc0:	d01f      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a36      	ldr	r2, [pc, #216]	@ (80050a0 <TIM_Base_SetConfig+0x148>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01b      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a35      	ldr	r2, [pc, #212]	@ (80050a4 <TIM_Base_SetConfig+0x14c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d017      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a34      	ldr	r2, [pc, #208]	@ (80050a8 <TIM_Base_SetConfig+0x150>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a33      	ldr	r2, [pc, #204]	@ (80050ac <TIM_Base_SetConfig+0x154>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00f      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a33      	ldr	r2, [pc, #204]	@ (80050b4 <TIM_Base_SetConfig+0x15c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a32      	ldr	r2, [pc, #200]	@ (80050b8 <TIM_Base_SetConfig+0x160>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a31      	ldr	r2, [pc, #196]	@ (80050bc <TIM_Base_SetConfig+0x164>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80050b0 <TIM_Base_SetConfig+0x158>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d108      	bne.n	8005014 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <TIM_Base_SetConfig+0x144>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a1a      	ldr	r2, [pc, #104]	@ (80050ac <TIM_Base_SetConfig+0x154>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1a      	ldr	r2, [pc, #104]	@ (80050b4 <TIM_Base_SetConfig+0x15c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <TIM_Base_SetConfig+0x160>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <TIM_Base_SetConfig+0x164>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <TIM_Base_SetConfig+0x158>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d103      	bne.n	8005070 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d105      	bne.n	800508e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]
  }
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40015000 	.word	0x40015000
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 0201 	bic.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 0302 	bic.w	r3, r3, #2
 800510c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a30      	ldr	r2, [pc, #192]	@ (80051dc <TIM_OC1_SetConfig+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2f      	ldr	r2, [pc, #188]	@ (80051e0 <TIM_OC1_SetConfig+0x120>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00f      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2e      	ldr	r2, [pc, #184]	@ (80051e4 <TIM_OC1_SetConfig+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2d      	ldr	r2, [pc, #180]	@ (80051e8 <TIM_OC1_SetConfig+0x128>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a2c      	ldr	r2, [pc, #176]	@ (80051ec <TIM_OC1_SetConfig+0x12c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a2b      	ldr	r2, [pc, #172]	@ (80051f0 <TIM_OC1_SetConfig+0x130>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10c      	bne.n	8005162 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0308 	bic.w	r3, r3, #8
 800514e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1d      	ldr	r2, [pc, #116]	@ (80051dc <TIM_OC1_SetConfig+0x11c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1c      	ldr	r2, [pc, #112]	@ (80051e0 <TIM_OC1_SetConfig+0x120>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00f      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1b      	ldr	r2, [pc, #108]	@ (80051e4 <TIM_OC1_SetConfig+0x124>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00b      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1a      	ldr	r2, [pc, #104]	@ (80051e8 <TIM_OC1_SetConfig+0x128>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <TIM_OC1_SetConfig+0x12c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d003      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a18      	ldr	r2, [pc, #96]	@ (80051f0 <TIM_OC1_SetConfig+0x130>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d111      	bne.n	80051b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800
 80051f0:	40015000 	.word	0x40015000

080051f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f023 0210 	bic.w	r2, r3, #16
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800522e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0320 	bic.w	r3, r3, #32
 8005242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a2c      	ldr	r2, [pc, #176]	@ (8005304 <TIM_OC2_SetConfig+0x110>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_OC2_SetConfig+0x74>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a2b      	ldr	r2, [pc, #172]	@ (8005308 <TIM_OC2_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC2_SetConfig+0x74>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a2a      	ldr	r2, [pc, #168]	@ (800530c <TIM_OC2_SetConfig+0x118>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d10d      	bne.n	8005284 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005282:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1f      	ldr	r2, [pc, #124]	@ (8005304 <TIM_OC2_SetConfig+0x110>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a1e      	ldr	r2, [pc, #120]	@ (8005308 <TIM_OC2_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00f      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1e      	ldr	r2, [pc, #120]	@ (8005310 <TIM_OC2_SetConfig+0x11c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1d      	ldr	r2, [pc, #116]	@ (8005314 <TIM_OC2_SetConfig+0x120>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005318 <TIM_OC2_SetConfig+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a17      	ldr	r2, [pc, #92]	@ (800530c <TIM_OC2_SetConfig+0x118>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d113      	bne.n	80052dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40013400 	.word	0x40013400
 800530c:	40015000 	.word	0x40015000
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800

0800531c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2b      	ldr	r2, [pc, #172]	@ (8005428 <TIM_OC3_SetConfig+0x10c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d007      	beq.n	800538e <TIM_OC3_SetConfig+0x72>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2a      	ldr	r2, [pc, #168]	@ (800542c <TIM_OC3_SetConfig+0x110>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <TIM_OC3_SetConfig+0x72>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a29      	ldr	r2, [pc, #164]	@ (8005430 <TIM_OC3_SetConfig+0x114>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10d      	bne.n	80053aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005428 <TIM_OC3_SetConfig+0x10c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	@ (800542c <TIM_OC3_SetConfig+0x110>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005434 <TIM_OC3_SetConfig+0x118>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005438 <TIM_OC3_SetConfig+0x11c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <TIM_OC3_SetConfig+0x120>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a16      	ldr	r2, [pc, #88]	@ (8005430 <TIM_OC3_SetConfig+0x114>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d113      	bne.n	8005402 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	621a      	str	r2, [r3, #32]
}
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40013400 	.word	0x40013400
 8005430:	40015000 	.word	0x40015000
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800

08005440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800547a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800548e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	031b      	lsls	r3, r3, #12
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2c      	ldr	r2, [pc, #176]	@ (8005550 <TIM_OC4_SetConfig+0x110>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_OC4_SetConfig+0x74>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005554 <TIM_OC4_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC4_SetConfig+0x74>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005558 <TIM_OC4_SetConfig+0x118>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10d      	bne.n	80054d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	031b      	lsls	r3, r3, #12
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005550 <TIM_OC4_SetConfig+0x110>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a1e      	ldr	r2, [pc, #120]	@ (8005554 <TIM_OC4_SetConfig+0x114>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00f      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a1e      	ldr	r2, [pc, #120]	@ (800555c <TIM_OC4_SetConfig+0x11c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005560 <TIM_OC4_SetConfig+0x120>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <TIM_OC4_SetConfig+0x124>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a17      	ldr	r2, [pc, #92]	@ (8005558 <TIM_OC4_SetConfig+0x118>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d113      	bne.n	8005528 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005506:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800550e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40013400 	.word	0x40013400
 8005558:	40015000 	.word	0x40015000
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800

08005568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80055ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a19      	ldr	r2, [pc, #100]	@ (8005624 <TIM_OC5_SetConfig+0xbc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <TIM_OC5_SetConfig+0xc0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00f      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a17      	ldr	r2, [pc, #92]	@ (800562c <TIM_OC5_SetConfig+0xc4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <TIM_OC5_SetConfig+0xc8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <TIM_OC5_SetConfig+0xcc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a14      	ldr	r2, [pc, #80]	@ (8005638 <TIM_OC5_SetConfig+0xd0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d109      	bne.n	80055fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	621a      	str	r2, [r3, #32]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800
 8005638:	40015000 	.word	0x40015000

0800563c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800566a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	051b      	lsls	r3, r3, #20
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a1a      	ldr	r2, [pc, #104]	@ (80056fc <TIM_OC6_SetConfig+0xc0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a19      	ldr	r2, [pc, #100]	@ (8005700 <TIM_OC6_SetConfig+0xc4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a18      	ldr	r2, [pc, #96]	@ (8005704 <TIM_OC6_SetConfig+0xc8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a17      	ldr	r2, [pc, #92]	@ (8005708 <TIM_OC6_SetConfig+0xcc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a16      	ldr	r2, [pc, #88]	@ (800570c <TIM_OC6_SetConfig+0xd0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a15      	ldr	r2, [pc, #84]	@ (8005710 <TIM_OC6_SetConfig+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d109      	bne.n	80056d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40012c00 	.word	0x40012c00
 8005700:	40013400 	.word	0x40013400
 8005704:	40014000 	.word	0x40014000
 8005708:	40014400 	.word	0x40014400
 800570c:	40014800 	.word	0x40014800
 8005710:	40015000 	.word	0x40015000

08005714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800573e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 030a 	bic.w	r3, r3, #10
 8005750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005772:	b480      	push	{r7}
 8005774:	b087      	sub	sp, #28
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f023 0210 	bic.w	r2, r3, #16
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800579c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80057e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f043 0307 	orr.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	431a      	orrs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	2201      	movs	r2, #1
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1a      	ldr	r2, [r3, #32]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	43db      	mvns	r3, r3
 800586e:	401a      	ands	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e074      	b.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a34      	ldr	r2, [pc, #208]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a33      	ldr	r2, [pc, #204]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a31      	ldr	r2, [pc, #196]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d108      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a21      	ldr	r2, [pc, #132]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005930:	d01d      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1d      	ldr	r2, [pc, #116]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1c      	ldr	r2, [pc, #112]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a15      	ldr	r2, [pc, #84]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a11      	ldr	r2, [pc, #68]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10c      	bne.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4313      	orrs	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40013400 	.word	0x40013400
 80059b0:	40015000 	.word	0x40015000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40014000 	.word	0x40014000

080059c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e042      	b.n	8005a5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fc fad7 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2224      	movs	r2, #36	@ 0x24
 80059f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb24 	bl	800605c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f825 	bl	8005a64 <UART_SetConfig>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e01b      	b.n	8005a5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fba3 	bl	80061a0 <UART_CheckIdleState>
 8005a5a:	4603      	mov	r3, r0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a68:	b08c      	sub	sp, #48	@ 0x30
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4baa      	ldr	r3, [pc, #680]	@ (8005d3c <UART_SetConfig+0x2d8>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a9f      	ldr	r2, [pc, #636]	@ (8005d40 <UART_SetConfig+0x2dc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d004      	beq.n	8005ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005acc:	4313      	orrs	r3, r2
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005ada:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aee:	f023 010f 	bic.w	r1, r3, #15
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a90      	ldr	r2, [pc, #576]	@ (8005d44 <UART_SetConfig+0x2e0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d125      	bne.n	8005b54 <UART_SetConfig+0xf0>
 8005b08:	4b8f      	ldr	r3, [pc, #572]	@ (8005d48 <UART_SetConfig+0x2e4>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d81a      	bhi.n	8005b4c <UART_SetConfig+0xe8>
 8005b16:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <UART_SetConfig+0xb8>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b3d 	.word	0x08005b3d
 8005b24:	08005b35 	.word	0x08005b35
 8005b28:	08005b45 	.word	0x08005b45
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b32:	e116      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005b34:	2302      	movs	r3, #2
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3a:	e112      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b42:	e10e      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005b44:	2308      	movs	r3, #8
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4a:	e10a      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b52:	e106      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a7c      	ldr	r2, [pc, #496]	@ (8005d4c <UART_SetConfig+0x2e8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d138      	bne.n	8005bd0 <UART_SetConfig+0x16c>
 8005b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d48 <UART_SetConfig+0x2e4>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b0c      	cmp	r3, #12
 8005b6a:	d82d      	bhi.n	8005bc8 <UART_SetConfig+0x164>
 8005b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <UART_SetConfig+0x110>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005ba9 	.word	0x08005ba9
 8005b78:	08005bc9 	.word	0x08005bc9
 8005b7c:	08005bc9 	.word	0x08005bc9
 8005b80:	08005bc9 	.word	0x08005bc9
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005bc9 	.word	0x08005bc9
 8005b8c:	08005bc9 	.word	0x08005bc9
 8005b90:	08005bc9 	.word	0x08005bc9
 8005b94:	08005bb1 	.word	0x08005bb1
 8005b98:	08005bc9 	.word	0x08005bc9
 8005b9c:	08005bc9 	.word	0x08005bc9
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bae:	e0d8      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bb6:	e0d4      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bbe:	e0d0      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bc6:	e0cc      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bce:	e0c8      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a5e      	ldr	r2, [pc, #376]	@ (8005d50 <UART_SetConfig+0x2ec>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d125      	bne.n	8005c26 <UART_SetConfig+0x1c2>
 8005bda:	4b5b      	ldr	r3, [pc, #364]	@ (8005d48 <UART_SetConfig+0x2e4>)
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005be4:	2b30      	cmp	r3, #48	@ 0x30
 8005be6:	d016      	beq.n	8005c16 <UART_SetConfig+0x1b2>
 8005be8:	2b30      	cmp	r3, #48	@ 0x30
 8005bea:	d818      	bhi.n	8005c1e <UART_SetConfig+0x1ba>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d00a      	beq.n	8005c06 <UART_SetConfig+0x1a2>
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d814      	bhi.n	8005c1e <UART_SetConfig+0x1ba>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <UART_SetConfig+0x19a>
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d008      	beq.n	8005c0e <UART_SetConfig+0x1aa>
 8005bfc:	e00f      	b.n	8005c1e <UART_SetConfig+0x1ba>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c04:	e0ad      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c06:	2302      	movs	r3, #2
 8005c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c0c:	e0a9      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c0e:	2304      	movs	r3, #4
 8005c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c14:	e0a5      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c16:	2308      	movs	r3, #8
 8005c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c1c:	e0a1      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c1e:	2310      	movs	r3, #16
 8005c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c24:	e09d      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8005d54 <UART_SetConfig+0x2f0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d125      	bne.n	8005c7c <UART_SetConfig+0x218>
 8005c30:	4b45      	ldr	r3, [pc, #276]	@ (8005d48 <UART_SetConfig+0x2e4>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c3c:	d016      	beq.n	8005c6c <UART_SetConfig+0x208>
 8005c3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c40:	d818      	bhi.n	8005c74 <UART_SetConfig+0x210>
 8005c42:	2b80      	cmp	r3, #128	@ 0x80
 8005c44:	d00a      	beq.n	8005c5c <UART_SetConfig+0x1f8>
 8005c46:	2b80      	cmp	r3, #128	@ 0x80
 8005c48:	d814      	bhi.n	8005c74 <UART_SetConfig+0x210>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <UART_SetConfig+0x1f0>
 8005c4e:	2b40      	cmp	r3, #64	@ 0x40
 8005c50:	d008      	beq.n	8005c64 <UART_SetConfig+0x200>
 8005c52:	e00f      	b.n	8005c74 <UART_SetConfig+0x210>
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5a:	e082      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c62:	e07e      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c64:	2304      	movs	r3, #4
 8005c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c6a:	e07a      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c72:	e076      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c74:	2310      	movs	r3, #16
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c7a:	e072      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a35      	ldr	r2, [pc, #212]	@ (8005d58 <UART_SetConfig+0x2f4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d12a      	bne.n	8005cdc <UART_SetConfig+0x278>
 8005c86:	4b30      	ldr	r3, [pc, #192]	@ (8005d48 <UART_SetConfig+0x2e4>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c94:	d01a      	beq.n	8005ccc <UART_SetConfig+0x268>
 8005c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c9a:	d81b      	bhi.n	8005cd4 <UART_SetConfig+0x270>
 8005c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca0:	d00c      	beq.n	8005cbc <UART_SetConfig+0x258>
 8005ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca6:	d815      	bhi.n	8005cd4 <UART_SetConfig+0x270>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <UART_SetConfig+0x250>
 8005cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cb0:	d008      	beq.n	8005cc4 <UART_SetConfig+0x260>
 8005cb2:	e00f      	b.n	8005cd4 <UART_SetConfig+0x270>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cba:	e052      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cc2:	e04e      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cca:	e04a      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd2:	e046      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cda:	e042      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a17      	ldr	r2, [pc, #92]	@ (8005d40 <UART_SetConfig+0x2dc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d13a      	bne.n	8005d5c <UART_SetConfig+0x2f8>
 8005ce6:	4b18      	ldr	r3, [pc, #96]	@ (8005d48 <UART_SetConfig+0x2e4>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005cf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cf4:	d01a      	beq.n	8005d2c <UART_SetConfig+0x2c8>
 8005cf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cfa:	d81b      	bhi.n	8005d34 <UART_SetConfig+0x2d0>
 8005cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d00:	d00c      	beq.n	8005d1c <UART_SetConfig+0x2b8>
 8005d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d06:	d815      	bhi.n	8005d34 <UART_SetConfig+0x2d0>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <UART_SetConfig+0x2b0>
 8005d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d10:	d008      	beq.n	8005d24 <UART_SetConfig+0x2c0>
 8005d12:	e00f      	b.n	8005d34 <UART_SetConfig+0x2d0>
 8005d14:	2300      	movs	r3, #0
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d1a:	e022      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d22:	e01e      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d2a:	e01a      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d32:	e016      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d3a:	e012      	b.n	8005d62 <UART_SetConfig+0x2fe>
 8005d3c:	cfff69f3 	.word	0xcfff69f3
 8005d40:	40008000 	.word	0x40008000
 8005d44:	40013800 	.word	0x40013800
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40004400 	.word	0x40004400
 8005d50:	40004800 	.word	0x40004800
 8005d54:	40004c00 	.word	0x40004c00
 8005d58:	40005000 	.word	0x40005000
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4aae      	ldr	r2, [pc, #696]	@ (8006020 <UART_SetConfig+0x5bc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	f040 8097 	bne.w	8005e9c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d823      	bhi.n	8005dbe <UART_SetConfig+0x35a>
 8005d76:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <UART_SetConfig+0x318>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005dbf 	.word	0x08005dbf
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005daf 	.word	0x08005daf
 8005d90:	08005dbf 	.word	0x08005dbf
 8005d94:	08005dbf 	.word	0x08005dbf
 8005d98:	08005dbf 	.word	0x08005dbf
 8005d9c:	08005db7 	.word	0x08005db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da0:	f7fe f862 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8005da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005da6:	e010      	b.n	8005dca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da8:	4b9e      	ldr	r3, [pc, #632]	@ (8006024 <UART_SetConfig+0x5c0>)
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dac:	e00d      	b.n	8005dca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fd ffed 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8005db2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005db4:	e009      	b.n	8005dca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dbc:	e005      	b.n	8005dca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005dc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8130 	beq.w	8006032 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	4a94      	ldr	r2, [pc, #592]	@ (8006028 <UART_SetConfig+0x5c4>)
 8005dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d305      	bcc.n	8005e02 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d903      	bls.n	8005e0a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e08:	e113      	b.n	8006032 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	60bb      	str	r3, [r7, #8]
 8005e10:	60fa      	str	r2, [r7, #12]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e16:	4a84      	ldr	r2, [pc, #528]	@ (8006028 <UART_SetConfig+0x5c4>)
 8005e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2200      	movs	r2, #0
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e2c:	f7fa fe9a 	bl	8000b64 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	020b      	lsls	r3, r1, #8
 8005e42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e46:	0202      	lsls	r2, r0, #8
 8005e48:	6979      	ldr	r1, [r7, #20]
 8005e4a:	6849      	ldr	r1, [r1, #4]
 8005e4c:	0849      	lsrs	r1, r1, #1
 8005e4e:	2000      	movs	r0, #0
 8005e50:	460c      	mov	r4, r1
 8005e52:	4605      	mov	r5, r0
 8005e54:	eb12 0804 	adds.w	r8, r2, r4
 8005e58:	eb43 0905 	adc.w	r9, r3, r5
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	469a      	mov	sl, r3
 8005e64:	4693      	mov	fp, r2
 8005e66:	4652      	mov	r2, sl
 8005e68:	465b      	mov	r3, fp
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f7fa fe79 	bl	8000b64 <__aeabi_uldivmod>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4613      	mov	r3, r2
 8005e78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e80:	d308      	bcc.n	8005e94 <UART_SetConfig+0x430>
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e88:	d204      	bcs.n	8005e94 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a3a      	ldr	r2, [r7, #32]
 8005e90:	60da      	str	r2, [r3, #12]
 8005e92:	e0ce      	b.n	8006032 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e9a:	e0ca      	b.n	8006032 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea4:	d166      	bne.n	8005f74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d827      	bhi.n	8005efe <UART_SetConfig+0x49a>
 8005eae:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <UART_SetConfig+0x450>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	08005eff 	.word	0x08005eff
 8005ec4:	08005eef 	.word	0x08005eef
 8005ec8:	08005eff 	.word	0x08005eff
 8005ecc:	08005eff 	.word	0x08005eff
 8005ed0:	08005eff 	.word	0x08005eff
 8005ed4:	08005ef7 	.word	0x08005ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed8:	f7fd ffc6 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8005edc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ede:	e014      	b.n	8005f0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee0:	f7fd ffd8 	bl	8003e94 <HAL_RCC_GetPCLK2Freq>
 8005ee4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ee6:	e010      	b.n	8005f0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8006024 <UART_SetConfig+0x5c0>)
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005eec:	e00d      	b.n	8005f0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eee:	f7fd ff4d 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8005ef2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ef4:	e009      	b.n	8005f0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005efc:	e005      	b.n	8005f0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8090 	beq.w	8006032 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	4a44      	ldr	r2, [pc, #272]	@ (8006028 <UART_SetConfig+0x5c4>)
 8005f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f24:	005a      	lsls	r2, r3, #1
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	441a      	add	r2, r3
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	2b0f      	cmp	r3, #15
 8005f3c:	d916      	bls.n	8005f6c <UART_SetConfig+0x508>
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f44:	d212      	bcs.n	8005f6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f023 030f 	bic.w	r3, r3, #15
 8005f4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	8bfb      	ldrh	r3, [r7, #30]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	8bfa      	ldrh	r2, [r7, #30]
 8005f68:	60da      	str	r2, [r3, #12]
 8005f6a:	e062      	b.n	8006032 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f72:	e05e      	b.n	8006032 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d828      	bhi.n	8005fce <UART_SetConfig+0x56a>
 8005f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <UART_SetConfig+0x520>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	08005fb9 	.word	0x08005fb9
 8005f90:	08005fcf 	.word	0x08005fcf
 8005f94:	08005fbf 	.word	0x08005fbf
 8005f98:	08005fcf 	.word	0x08005fcf
 8005f9c:	08005fcf 	.word	0x08005fcf
 8005fa0:	08005fcf 	.word	0x08005fcf
 8005fa4:	08005fc7 	.word	0x08005fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa8:	f7fd ff5e 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8005fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fae:	e014      	b.n	8005fda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb0:	f7fd ff70 	bl	8003e94 <HAL_RCC_GetPCLK2Freq>
 8005fb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fb6:	e010      	b.n	8005fda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006024 <UART_SetConfig+0x5c0>)
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fbc:	e00d      	b.n	8005fda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fbe:	f7fd fee5 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8005fc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fc4:	e009      	b.n	8005fda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fcc:	e005      	b.n	8005fda <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d028      	beq.n	8006032 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	4a10      	ldr	r2, [pc, #64]	@ (8006028 <UART_SetConfig+0x5c4>)
 8005fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	441a      	add	r2, r3
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b0f      	cmp	r3, #15
 8006008:	d910      	bls.n	800602c <UART_SetConfig+0x5c8>
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006010:	d20c      	bcs.n	800602c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	b29a      	uxth	r2, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60da      	str	r2, [r3, #12]
 800601c:	e009      	b.n	8006032 <UART_SetConfig+0x5ce>
 800601e:	bf00      	nop
 8006020:	40008000 	.word	0x40008000
 8006024:	00f42400 	.word	0x00f42400
 8006028:	08006c04 	.word	0x08006c04
      }
      else
      {
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2201      	movs	r2, #1
 8006036:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2201      	movs	r2, #1
 800603e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2200      	movs	r2, #0
 8006046:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2200      	movs	r2, #0
 800604c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800604e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006052:	4618      	mov	r0, r3
 8006054:	3730      	adds	r7, #48	@ 0x30
 8006056:	46bd      	mov	sp, r7
 8006058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800605c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01a      	beq.n	8006172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800615a:	d10a      	bne.n	8006172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	605a      	str	r2, [r3, #4]
  }
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b098      	sub	sp, #96	@ 0x60
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b0:	f7fc f81a 	bl	80021e8 <HAL_GetTick>
 80061b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d12f      	bne.n	8006224 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061cc:	2200      	movs	r2, #0
 80061ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f88e 	bl	80062f4 <UART_WaitOnFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d022      	beq.n	8006224 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80061fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800620a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e6      	bne.n	80061de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e063      	b.n	80062ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b04      	cmp	r3, #4
 8006230:	d149      	bne.n	80062c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006232:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800623a:	2200      	movs	r2, #0
 800623c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f857 	bl	80062f4 <UART_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d03c      	beq.n	80062c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	623b      	str	r3, [r7, #32]
   return(result);
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800626a:	633b      	str	r3, [r7, #48]	@ 0x30
 800626c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e6      	bne.n	800624c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3308      	adds	r3, #8
 8006284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	60fb      	str	r3, [r7, #12]
   return(result);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800629e:	61fa      	str	r2, [r7, #28]
 80062a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	69b9      	ldr	r1, [r7, #24]
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	617b      	str	r3, [r7, #20]
   return(result);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e5      	bne.n	800627e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e012      	b.n	80062ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3758      	adds	r7, #88	@ 0x58
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4613      	mov	r3, r2
 8006302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006304:	e04f      	b.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800630c:	d04b      	beq.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630e:	f7fb ff6b 	bl	80021e8 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <UART_WaitOnFlagUntilTimeout+0x30>
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e04e      	b.n	80063c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	d037      	beq.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b80      	cmp	r3, #128	@ 0x80
 800633a:	d034      	beq.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b40      	cmp	r3, #64	@ 0x40
 8006340:	d031      	beq.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b08      	cmp	r3, #8
 800634e:	d110      	bne.n	8006372 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2208      	movs	r2, #8
 8006356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f838 	bl	80063ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2208      	movs	r2, #8
 8006362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e029      	b.n	80063c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800637c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006380:	d111      	bne.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800638a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f81e 	bl	80063ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e00f      	b.n	80063c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4013      	ands	r3, r2
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d0a0      	beq.n	8006306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b095      	sub	sp, #84	@ 0x54
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	61fb      	str	r3, [r7, #28]
   return(result);
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3308      	adds	r3, #8
 800642a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800642c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800642e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e3      	bne.n	8006408 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d118      	bne.n	800647a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	60bb      	str	r3, [r7, #8]
   return(result);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f023 0310 	bic.w	r3, r3, #16
 800645c:	647b      	str	r3, [r7, #68]	@ 0x44
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6979      	ldr	r1, [r7, #20]
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	613b      	str	r3, [r7, #16]
   return(result);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e6      	bne.n	8006448 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800648e:	bf00      	nop
 8006490:	3754      	adds	r7, #84	@ 0x54
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e027      	b.n	8006500 <HAL_UARTEx_DisableFifoMode+0x66>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2224      	movs	r2, #36	@ 0x24
 80064bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006520:	2302      	movs	r3, #2
 8006522:	e02d      	b.n	8006580 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2224      	movs	r2, #36	@ 0x24
 8006530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0201 	bic.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f84f 	bl	8006604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800659c:	2302      	movs	r3, #2
 800659e:	e02d      	b.n	80065fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	@ 0x24
 80065ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f811 	bl	8006604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006610:	2b00      	cmp	r3, #0
 8006612:	d108      	bne.n	8006626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006624:	e031      	b.n	800668a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006626:	2308      	movs	r3, #8
 8006628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800662a:	2308      	movs	r3, #8
 800662c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	0e5b      	lsrs	r3, r3, #25
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	0f5b      	lsrs	r3, r3, #29
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	7b3a      	ldrb	r2, [r7, #12]
 8006652:	4911      	ldr	r1, [pc, #68]	@ (8006698 <UARTEx_SetNbDataToProcess+0x94>)
 8006654:	5c8a      	ldrb	r2, [r1, r2]
 8006656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800665a:	7b3a      	ldrb	r2, [r7, #12]
 800665c:	490f      	ldr	r1, [pc, #60]	@ (800669c <UARTEx_SetNbDataToProcess+0x98>)
 800665e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006660:	fb93 f3f2 	sdiv	r3, r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	7b7a      	ldrb	r2, [r7, #13]
 8006670:	4909      	ldr	r1, [pc, #36]	@ (8006698 <UARTEx_SetNbDataToProcess+0x94>)
 8006672:	5c8a      	ldrb	r2, [r1, r2]
 8006674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006678:	7b7a      	ldrb	r2, [r7, #13]
 800667a:	4908      	ldr	r1, [pc, #32]	@ (800669c <UARTEx_SetNbDataToProcess+0x98>)
 800667c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800667e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	08006c1c 	.word	0x08006c1c
 800669c:	08006c24 	.word	0x08006c24

080066a0 <memset>:
 80066a0:	4402      	add	r2, r0
 80066a2:	4603      	mov	r3, r0
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d100      	bne.n	80066aa <memset+0xa>
 80066a8:	4770      	bx	lr
 80066aa:	f803 1b01 	strb.w	r1, [r3], #1
 80066ae:	e7f9      	b.n	80066a4 <memset+0x4>

080066b0 <__libc_init_array>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	4d0d      	ldr	r5, [pc, #52]	@ (80066e8 <__libc_init_array+0x38>)
 80066b4:	4c0d      	ldr	r4, [pc, #52]	@ (80066ec <__libc_init_array+0x3c>)
 80066b6:	1b64      	subs	r4, r4, r5
 80066b8:	10a4      	asrs	r4, r4, #2
 80066ba:	2600      	movs	r6, #0
 80066bc:	42a6      	cmp	r6, r4
 80066be:	d109      	bne.n	80066d4 <__libc_init_array+0x24>
 80066c0:	4d0b      	ldr	r5, [pc, #44]	@ (80066f0 <__libc_init_array+0x40>)
 80066c2:	4c0c      	ldr	r4, [pc, #48]	@ (80066f4 <__libc_init_array+0x44>)
 80066c4:	f000 fa84 	bl	8006bd0 <_init>
 80066c8:	1b64      	subs	r4, r4, r5
 80066ca:	10a4      	asrs	r4, r4, #2
 80066cc:	2600      	movs	r6, #0
 80066ce:	42a6      	cmp	r6, r4
 80066d0:	d105      	bne.n	80066de <__libc_init_array+0x2e>
 80066d2:	bd70      	pop	{r4, r5, r6, pc}
 80066d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d8:	4798      	blx	r3
 80066da:	3601      	adds	r6, #1
 80066dc:	e7ee      	b.n	80066bc <__libc_init_array+0xc>
 80066de:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e2:	4798      	blx	r3
 80066e4:	3601      	adds	r6, #1
 80066e6:	e7f2      	b.n	80066ce <__libc_init_array+0x1e>
 80066e8:	08006ca8 	.word	0x08006ca8
 80066ec:	08006ca8 	.word	0x08006ca8
 80066f0:	08006ca8 	.word	0x08006ca8
 80066f4:	08006cac 	.word	0x08006cac

080066f8 <atan2>:
 80066f8:	f000 b802 	b.w	8006700 <__ieee754_atan2>
 80066fc:	0000      	movs	r0, r0
	...

08006700 <__ieee754_atan2>:
 8006700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006704:	ec57 6b11 	vmov	r6, r7, d1
 8006708:	4273      	negs	r3, r6
 800670a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006888 <__ieee754_atan2+0x188>
 800670e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8006712:	4333      	orrs	r3, r6
 8006714:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006718:	4543      	cmp	r3, r8
 800671a:	ec51 0b10 	vmov	r0, r1, d0
 800671e:	4635      	mov	r5, r6
 8006720:	d809      	bhi.n	8006736 <__ieee754_atan2+0x36>
 8006722:	4244      	negs	r4, r0
 8006724:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006728:	4304      	orrs	r4, r0
 800672a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800672e:	4544      	cmp	r4, r8
 8006730:	468e      	mov	lr, r1
 8006732:	4681      	mov	r9, r0
 8006734:	d907      	bls.n	8006746 <__ieee754_atan2+0x46>
 8006736:	4632      	mov	r2, r6
 8006738:	463b      	mov	r3, r7
 800673a:	f7f9 fd73 	bl	8000224 <__adddf3>
 800673e:	ec41 0b10 	vmov	d0, r0, r1
 8006742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006746:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800674a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800674e:	4334      	orrs	r4, r6
 8006750:	d103      	bne.n	800675a <__ieee754_atan2+0x5a>
 8006752:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006756:	f000 b89b 	b.w	8006890 <atan>
 800675a:	17bc      	asrs	r4, r7, #30
 800675c:	f004 0402 	and.w	r4, r4, #2
 8006760:	ea53 0909 	orrs.w	r9, r3, r9
 8006764:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006768:	d107      	bne.n	800677a <__ieee754_atan2+0x7a>
 800676a:	2c02      	cmp	r4, #2
 800676c:	d05f      	beq.n	800682e <__ieee754_atan2+0x12e>
 800676e:	2c03      	cmp	r4, #3
 8006770:	d1e5      	bne.n	800673e <__ieee754_atan2+0x3e>
 8006772:	a141      	add	r1, pc, #260	@ (adr r1, 8006878 <__ieee754_atan2+0x178>)
 8006774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006778:	e7e1      	b.n	800673e <__ieee754_atan2+0x3e>
 800677a:	4315      	orrs	r5, r2
 800677c:	d106      	bne.n	800678c <__ieee754_atan2+0x8c>
 800677e:	f1be 0f00 	cmp.w	lr, #0
 8006782:	da5f      	bge.n	8006844 <__ieee754_atan2+0x144>
 8006784:	a13e      	add	r1, pc, #248	@ (adr r1, 8006880 <__ieee754_atan2+0x180>)
 8006786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800678a:	e7d8      	b.n	800673e <__ieee754_atan2+0x3e>
 800678c:	4542      	cmp	r2, r8
 800678e:	d10f      	bne.n	80067b0 <__ieee754_atan2+0xb0>
 8006790:	4293      	cmp	r3, r2
 8006792:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8006796:	d107      	bne.n	80067a8 <__ieee754_atan2+0xa8>
 8006798:	2c02      	cmp	r4, #2
 800679a:	d84c      	bhi.n	8006836 <__ieee754_atan2+0x136>
 800679c:	4b34      	ldr	r3, [pc, #208]	@ (8006870 <__ieee754_atan2+0x170>)
 800679e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067a6:	e7ca      	b.n	800673e <__ieee754_atan2+0x3e>
 80067a8:	2c02      	cmp	r4, #2
 80067aa:	d848      	bhi.n	800683e <__ieee754_atan2+0x13e>
 80067ac:	4b31      	ldr	r3, [pc, #196]	@ (8006874 <__ieee754_atan2+0x174>)
 80067ae:	e7f6      	b.n	800679e <__ieee754_atan2+0x9e>
 80067b0:	4543      	cmp	r3, r8
 80067b2:	d0e4      	beq.n	800677e <__ieee754_atan2+0x7e>
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80067ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80067be:	da1e      	bge.n	80067fe <__ieee754_atan2+0xfe>
 80067c0:	2f00      	cmp	r7, #0
 80067c2:	da01      	bge.n	80067c8 <__ieee754_atan2+0xc8>
 80067c4:	323c      	adds	r2, #60	@ 0x3c
 80067c6:	db1e      	blt.n	8006806 <__ieee754_atan2+0x106>
 80067c8:	4632      	mov	r2, r6
 80067ca:	463b      	mov	r3, r7
 80067cc:	f7fa f80a 	bl	80007e4 <__aeabi_ddiv>
 80067d0:	ec41 0b10 	vmov	d0, r0, r1
 80067d4:	f000 f9f4 	bl	8006bc0 <fabs>
 80067d8:	f000 f85a 	bl	8006890 <atan>
 80067dc:	ec51 0b10 	vmov	r0, r1, d0
 80067e0:	2c01      	cmp	r4, #1
 80067e2:	d013      	beq.n	800680c <__ieee754_atan2+0x10c>
 80067e4:	2c02      	cmp	r4, #2
 80067e6:	d015      	beq.n	8006814 <__ieee754_atan2+0x114>
 80067e8:	2c00      	cmp	r4, #0
 80067ea:	d0a8      	beq.n	800673e <__ieee754_atan2+0x3e>
 80067ec:	a318      	add	r3, pc, #96	@ (adr r3, 8006850 <__ieee754_atan2+0x150>)
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	f7f9 fd15 	bl	8000220 <__aeabi_dsub>
 80067f6:	a318      	add	r3, pc, #96	@ (adr r3, 8006858 <__ieee754_atan2+0x158>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	e014      	b.n	8006828 <__ieee754_atan2+0x128>
 80067fe:	a118      	add	r1, pc, #96	@ (adr r1, 8006860 <__ieee754_atan2+0x160>)
 8006800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006804:	e7ec      	b.n	80067e0 <__ieee754_atan2+0xe0>
 8006806:	2000      	movs	r0, #0
 8006808:	2100      	movs	r1, #0
 800680a:	e7e9      	b.n	80067e0 <__ieee754_atan2+0xe0>
 800680c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006810:	4619      	mov	r1, r3
 8006812:	e794      	b.n	800673e <__ieee754_atan2+0x3e>
 8006814:	a30e      	add	r3, pc, #56	@ (adr r3, 8006850 <__ieee754_atan2+0x150>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fd01 	bl	8000220 <__aeabi_dsub>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	a10d      	add	r1, pc, #52	@ (adr r1, 8006858 <__ieee754_atan2+0x158>)
 8006824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006828:	f7f9 fcfa 	bl	8000220 <__aeabi_dsub>
 800682c:	e787      	b.n	800673e <__ieee754_atan2+0x3e>
 800682e:	a10a      	add	r1, pc, #40	@ (adr r1, 8006858 <__ieee754_atan2+0x158>)
 8006830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006834:	e783      	b.n	800673e <__ieee754_atan2+0x3e>
 8006836:	a10c      	add	r1, pc, #48	@ (adr r1, 8006868 <__ieee754_atan2+0x168>)
 8006838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683c:	e77f      	b.n	800673e <__ieee754_atan2+0x3e>
 800683e:	2000      	movs	r0, #0
 8006840:	2100      	movs	r1, #0
 8006842:	e77c      	b.n	800673e <__ieee754_atan2+0x3e>
 8006844:	a106      	add	r1, pc, #24	@ (adr r1, 8006860 <__ieee754_atan2+0x160>)
 8006846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800684a:	e778      	b.n	800673e <__ieee754_atan2+0x3e>
 800684c:	f3af 8000 	nop.w
 8006850:	33145c07 	.word	0x33145c07
 8006854:	3ca1a626 	.word	0x3ca1a626
 8006858:	54442d18 	.word	0x54442d18
 800685c:	400921fb 	.word	0x400921fb
 8006860:	54442d18 	.word	0x54442d18
 8006864:	3ff921fb 	.word	0x3ff921fb
 8006868:	54442d18 	.word	0x54442d18
 800686c:	3fe921fb 	.word	0x3fe921fb
 8006870:	08006c48 	.word	0x08006c48
 8006874:	08006c30 	.word	0x08006c30
 8006878:	54442d18 	.word	0x54442d18
 800687c:	c00921fb 	.word	0xc00921fb
 8006880:	54442d18 	.word	0x54442d18
 8006884:	bff921fb 	.word	0xbff921fb
 8006888:	7ff00000 	.word	0x7ff00000
 800688c:	00000000 	.word	0x00000000

08006890 <atan>:
 8006890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	ec55 4b10 	vmov	r4, r5, d0
 8006898:	4bbf      	ldr	r3, [pc, #764]	@ (8006b98 <atan+0x308>)
 800689a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800689e:	429e      	cmp	r6, r3
 80068a0:	46ab      	mov	fp, r5
 80068a2:	d918      	bls.n	80068d6 <atan+0x46>
 80068a4:	4bbd      	ldr	r3, [pc, #756]	@ (8006b9c <atan+0x30c>)
 80068a6:	429e      	cmp	r6, r3
 80068a8:	d801      	bhi.n	80068ae <atan+0x1e>
 80068aa:	d109      	bne.n	80068c0 <atan+0x30>
 80068ac:	b144      	cbz	r4, 80068c0 <atan+0x30>
 80068ae:	4622      	mov	r2, r4
 80068b0:	462b      	mov	r3, r5
 80068b2:	4620      	mov	r0, r4
 80068b4:	4629      	mov	r1, r5
 80068b6:	f7f9 fcb5 	bl	8000224 <__adddf3>
 80068ba:	4604      	mov	r4, r0
 80068bc:	460d      	mov	r5, r1
 80068be:	e006      	b.n	80068ce <atan+0x3e>
 80068c0:	f1bb 0f00 	cmp.w	fp, #0
 80068c4:	f340 812b 	ble.w	8006b1e <atan+0x28e>
 80068c8:	a597      	add	r5, pc, #604	@ (adr r5, 8006b28 <atan+0x298>)
 80068ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80068ce:	ec45 4b10 	vmov	d0, r4, r5
 80068d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d6:	4bb2      	ldr	r3, [pc, #712]	@ (8006ba0 <atan+0x310>)
 80068d8:	429e      	cmp	r6, r3
 80068da:	d813      	bhi.n	8006904 <atan+0x74>
 80068dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80068e0:	429e      	cmp	r6, r3
 80068e2:	d80c      	bhi.n	80068fe <atan+0x6e>
 80068e4:	a392      	add	r3, pc, #584	@ (adr r3, 8006b30 <atan+0x2a0>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	f7f9 fc99 	bl	8000224 <__adddf3>
 80068f2:	4bac      	ldr	r3, [pc, #688]	@ (8006ba4 <atan+0x314>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	f7fa f8db 	bl	8000ab0 <__aeabi_dcmpgt>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d1e7      	bne.n	80068ce <atan+0x3e>
 80068fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006902:	e029      	b.n	8006958 <atan+0xc8>
 8006904:	f000 f95c 	bl	8006bc0 <fabs>
 8006908:	4ba7      	ldr	r3, [pc, #668]	@ (8006ba8 <atan+0x318>)
 800690a:	429e      	cmp	r6, r3
 800690c:	ec55 4b10 	vmov	r4, r5, d0
 8006910:	f200 80bc 	bhi.w	8006a8c <atan+0x1fc>
 8006914:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006918:	429e      	cmp	r6, r3
 800691a:	f200 809e 	bhi.w	8006a5a <atan+0x1ca>
 800691e:	4622      	mov	r2, r4
 8006920:	462b      	mov	r3, r5
 8006922:	4620      	mov	r0, r4
 8006924:	4629      	mov	r1, r5
 8006926:	f7f9 fc7d 	bl	8000224 <__adddf3>
 800692a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ba4 <atan+0x314>)
 800692c:	2200      	movs	r2, #0
 800692e:	f7f9 fc77 	bl	8000220 <__aeabi_dsub>
 8006932:	2200      	movs	r2, #0
 8006934:	4606      	mov	r6, r0
 8006936:	460f      	mov	r7, r1
 8006938:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800693c:	4620      	mov	r0, r4
 800693e:	4629      	mov	r1, r5
 8006940:	f7f9 fc70 	bl	8000224 <__adddf3>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7f9 ff4a 	bl	80007e4 <__aeabi_ddiv>
 8006950:	f04f 0a00 	mov.w	sl, #0
 8006954:	4604      	mov	r4, r0
 8006956:	460d      	mov	r5, r1
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	4620      	mov	r0, r4
 800695e:	4629      	mov	r1, r5
 8006960:	f7f9 fe16 	bl	8000590 <__aeabi_dmul>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4680      	mov	r8, r0
 800696a:	4689      	mov	r9, r1
 800696c:	f7f9 fe10 	bl	8000590 <__aeabi_dmul>
 8006970:	a371      	add	r3, pc, #452	@ (adr r3, 8006b38 <atan+0x2a8>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	4606      	mov	r6, r0
 8006978:	460f      	mov	r7, r1
 800697a:	f7f9 fe09 	bl	8000590 <__aeabi_dmul>
 800697e:	a370      	add	r3, pc, #448	@ (adr r3, 8006b40 <atan+0x2b0>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f7f9 fc4e 	bl	8000224 <__adddf3>
 8006988:	4632      	mov	r2, r6
 800698a:	463b      	mov	r3, r7
 800698c:	f7f9 fe00 	bl	8000590 <__aeabi_dmul>
 8006990:	a36d      	add	r3, pc, #436	@ (adr r3, 8006b48 <atan+0x2b8>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fc45 	bl	8000224 <__adddf3>
 800699a:	4632      	mov	r2, r6
 800699c:	463b      	mov	r3, r7
 800699e:	f7f9 fdf7 	bl	8000590 <__aeabi_dmul>
 80069a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006b50 <atan+0x2c0>)
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f7f9 fc3c 	bl	8000224 <__adddf3>
 80069ac:	4632      	mov	r2, r6
 80069ae:	463b      	mov	r3, r7
 80069b0:	f7f9 fdee 	bl	8000590 <__aeabi_dmul>
 80069b4:	a368      	add	r3, pc, #416	@ (adr r3, 8006b58 <atan+0x2c8>)
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f7f9 fc33 	bl	8000224 <__adddf3>
 80069be:	4632      	mov	r2, r6
 80069c0:	463b      	mov	r3, r7
 80069c2:	f7f9 fde5 	bl	8000590 <__aeabi_dmul>
 80069c6:	a366      	add	r3, pc, #408	@ (adr r3, 8006b60 <atan+0x2d0>)
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f7f9 fc2a 	bl	8000224 <__adddf3>
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	f7f9 fddc 	bl	8000590 <__aeabi_dmul>
 80069d8:	a363      	add	r3, pc, #396	@ (adr r3, 8006b68 <atan+0x2d8>)
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	4680      	mov	r8, r0
 80069e0:	4689      	mov	r9, r1
 80069e2:	4630      	mov	r0, r6
 80069e4:	4639      	mov	r1, r7
 80069e6:	f7f9 fdd3 	bl	8000590 <__aeabi_dmul>
 80069ea:	a361      	add	r3, pc, #388	@ (adr r3, 8006b70 <atan+0x2e0>)
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f7f9 fc16 	bl	8000220 <__aeabi_dsub>
 80069f4:	4632      	mov	r2, r6
 80069f6:	463b      	mov	r3, r7
 80069f8:	f7f9 fdca 	bl	8000590 <__aeabi_dmul>
 80069fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8006b78 <atan+0x2e8>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f7f9 fc0d 	bl	8000220 <__aeabi_dsub>
 8006a06:	4632      	mov	r2, r6
 8006a08:	463b      	mov	r3, r7
 8006a0a:	f7f9 fdc1 	bl	8000590 <__aeabi_dmul>
 8006a0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8006b80 <atan+0x2f0>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	f7f9 fc04 	bl	8000220 <__aeabi_dsub>
 8006a18:	4632      	mov	r2, r6
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	f7f9 fdb8 	bl	8000590 <__aeabi_dmul>
 8006a20:	a359      	add	r3, pc, #356	@ (adr r3, 8006b88 <atan+0x2f8>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fbfb 	bl	8000220 <__aeabi_dsub>
 8006a2a:	4632      	mov	r2, r6
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	f7f9 fdaf 	bl	8000590 <__aeabi_dmul>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4640      	mov	r0, r8
 8006a38:	4649      	mov	r1, r9
 8006a3a:	f7f9 fbf3 	bl	8000224 <__adddf3>
 8006a3e:	4622      	mov	r2, r4
 8006a40:	462b      	mov	r3, r5
 8006a42:	f7f9 fda5 	bl	8000590 <__aeabi_dmul>
 8006a46:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	d148      	bne.n	8006ae2 <atan+0x252>
 8006a50:	4620      	mov	r0, r4
 8006a52:	4629      	mov	r1, r5
 8006a54:	f7f9 fbe4 	bl	8000220 <__aeabi_dsub>
 8006a58:	e72f      	b.n	80068ba <atan+0x2a>
 8006a5a:	4b52      	ldr	r3, [pc, #328]	@ (8006ba4 <atan+0x314>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4629      	mov	r1, r5
 8006a62:	f7f9 fbdd 	bl	8000220 <__aeabi_dsub>
 8006a66:	4b4f      	ldr	r3, [pc, #316]	@ (8006ba4 <atan+0x314>)
 8006a68:	4606      	mov	r6, r0
 8006a6a:	460f      	mov	r7, r1
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7f9 fbd7 	bl	8000224 <__adddf3>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	f7f9 feb1 	bl	80007e4 <__aeabi_ddiv>
 8006a82:	f04f 0a01 	mov.w	sl, #1
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	e765      	b.n	8006958 <atan+0xc8>
 8006a8c:	4b47      	ldr	r3, [pc, #284]	@ (8006bac <atan+0x31c>)
 8006a8e:	429e      	cmp	r6, r3
 8006a90:	d21c      	bcs.n	8006acc <atan+0x23c>
 8006a92:	4b47      	ldr	r3, [pc, #284]	@ (8006bb0 <atan+0x320>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7f9 fbc1 	bl	8000220 <__aeabi_dsub>
 8006a9e:	4b44      	ldr	r3, [pc, #272]	@ (8006bb0 <atan+0x320>)
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	460f      	mov	r7, r1
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	f7f9 fd71 	bl	8000590 <__aeabi_dmul>
 8006aae:	4b3d      	ldr	r3, [pc, #244]	@ (8006ba4 <atan+0x314>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f7f9 fbb7 	bl	8000224 <__adddf3>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4630      	mov	r0, r6
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7f9 fe91 	bl	80007e4 <__aeabi_ddiv>
 8006ac2:	f04f 0a02 	mov.w	sl, #2
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	460d      	mov	r5, r1
 8006aca:	e745      	b.n	8006958 <atan+0xc8>
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	4938      	ldr	r1, [pc, #224]	@ (8006bb4 <atan+0x324>)
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	f7f9 fe86 	bl	80007e4 <__aeabi_ddiv>
 8006ad8:	f04f 0a03 	mov.w	sl, #3
 8006adc:	4604      	mov	r4, r0
 8006ade:	460d      	mov	r5, r1
 8006ae0:	e73a      	b.n	8006958 <atan+0xc8>
 8006ae2:	4b35      	ldr	r3, [pc, #212]	@ (8006bb8 <atan+0x328>)
 8006ae4:	4e35      	ldr	r6, [pc, #212]	@ (8006bbc <atan+0x32c>)
 8006ae6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fb97 	bl	8000220 <__aeabi_dsub>
 8006af2:	4622      	mov	r2, r4
 8006af4:	462b      	mov	r3, r5
 8006af6:	f7f9 fb93 	bl	8000220 <__aeabi_dsub>
 8006afa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b06:	f7f9 fb8b 	bl	8000220 <__aeabi_dsub>
 8006b0a:	f1bb 0f00 	cmp.w	fp, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	460d      	mov	r5, r1
 8006b12:	f6bf aedc 	bge.w	80068ce <atan+0x3e>
 8006b16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b1a:	461d      	mov	r5, r3
 8006b1c:	e6d7      	b.n	80068ce <atan+0x3e>
 8006b1e:	a51c      	add	r5, pc, #112	@ (adr r5, 8006b90 <atan+0x300>)
 8006b20:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b24:	e6d3      	b.n	80068ce <atan+0x3e>
 8006b26:	bf00      	nop
 8006b28:	54442d18 	.word	0x54442d18
 8006b2c:	3ff921fb 	.word	0x3ff921fb
 8006b30:	8800759c 	.word	0x8800759c
 8006b34:	7e37e43c 	.word	0x7e37e43c
 8006b38:	e322da11 	.word	0xe322da11
 8006b3c:	3f90ad3a 	.word	0x3f90ad3a
 8006b40:	24760deb 	.word	0x24760deb
 8006b44:	3fa97b4b 	.word	0x3fa97b4b
 8006b48:	a0d03d51 	.word	0xa0d03d51
 8006b4c:	3fb10d66 	.word	0x3fb10d66
 8006b50:	c54c206e 	.word	0xc54c206e
 8006b54:	3fb745cd 	.word	0x3fb745cd
 8006b58:	920083ff 	.word	0x920083ff
 8006b5c:	3fc24924 	.word	0x3fc24924
 8006b60:	5555550d 	.word	0x5555550d
 8006b64:	3fd55555 	.word	0x3fd55555
 8006b68:	2c6a6c2f 	.word	0x2c6a6c2f
 8006b6c:	bfa2b444 	.word	0xbfa2b444
 8006b70:	52defd9a 	.word	0x52defd9a
 8006b74:	3fadde2d 	.word	0x3fadde2d
 8006b78:	af749a6d 	.word	0xaf749a6d
 8006b7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006b80:	fe231671 	.word	0xfe231671
 8006b84:	3fbc71c6 	.word	0x3fbc71c6
 8006b88:	9998ebc4 	.word	0x9998ebc4
 8006b8c:	3fc99999 	.word	0x3fc99999
 8006b90:	54442d18 	.word	0x54442d18
 8006b94:	bff921fb 	.word	0xbff921fb
 8006b98:	440fffff 	.word	0x440fffff
 8006b9c:	7ff00000 	.word	0x7ff00000
 8006ba0:	3fdbffff 	.word	0x3fdbffff
 8006ba4:	3ff00000 	.word	0x3ff00000
 8006ba8:	3ff2ffff 	.word	0x3ff2ffff
 8006bac:	40038000 	.word	0x40038000
 8006bb0:	3ff80000 	.word	0x3ff80000
 8006bb4:	bff00000 	.word	0xbff00000
 8006bb8:	08006c60 	.word	0x08006c60
 8006bbc:	08006c80 	.word	0x08006c80

08006bc0 <fabs>:
 8006bc0:	ec51 0b10 	vmov	r0, r1, d0
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006bca:	ec43 2b10 	vmov	d0, r2, r3
 8006bce:	4770      	bx	lr

08006bd0 <_init>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr

08006bdc <_fini>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr
