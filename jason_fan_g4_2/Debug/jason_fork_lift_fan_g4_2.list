
jason_fork_lift_fan_g4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004700  08004700  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004708  08004708  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004708  08004708  00005708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800470c  0800470c  0000570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004710  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000010  08004720  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004720  000061f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d8d  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249b  00000000  00000000  00017dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001a268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c77  00000000  00000000  0001b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002390  00000000  00000000  0001bed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132a0  00000000  00000000  0001e267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9be2  00000000  00000000  00031507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b0e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  0010b12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0010f45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080046a8 	.word	0x080046a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080046a8 	.word	0x080046a8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b3e      	ldr	r3, [pc, #248]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a3d      	ldr	r2, [pc, #244]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b3b      	ldr	r3, [pc, #236]	@ (8000618 <MX_GPIO_Init+0x110>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b38      	ldr	r3, [pc, #224]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a37      	ldr	r2, [pc, #220]	@ (8000618 <MX_GPIO_Init+0x110>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b35      	ldr	r3, [pc, #212]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b32      	ldr	r3, [pc, #200]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a31      	ldr	r2, [pc, #196]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b2f      	ldr	r3, [pc, #188]	@ (8000618 <MX_GPIO_Init+0x110>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b2c      	ldr	r3, [pc, #176]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a2b      	ldr	r2, [pc, #172]	@ (8000618 <MX_GPIO_Init+0x110>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a25      	ldr	r2, [pc, #148]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <MX_GPIO_Init+0x110>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C_IN2_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2130      	movs	r1, #48	@ 0x30
 800059a:	4820      	ldr	r0, [pc, #128]	@ (800061c <MX_GPIO_Init+0x114>)
 800059c:	f000 ff2c 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_IN2_Pin|A_IN1_Pin|C_IN1_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f242 0103 	movw	r1, #8195	@ 0x2003
 80005a6:	481e      	ldr	r0, [pc, #120]	@ (8000620 <MX_GPIO_Init+0x118>)
 80005a8:	f000 ff26 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 518c 	mov.w	r1, #4480	@ 0x1180
 80005b2:	481c      	ldr	r0, [pc, #112]	@ (8000624 <MX_GPIO_Init+0x11c>)
 80005b4:	f000 ff20 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C_IN2_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin|D_IN1_Pin;
 80005b8:	2330      	movs	r3, #48	@ 0x30
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4813      	ldr	r0, [pc, #76]	@ (800061c <MX_GPIO_Init+0x114>)
 80005d0:	f000 fd90 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin A_IN1_Pin C_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin|A_IN1_Pin|C_IN1_Pin;
 80005d4:	f242 0303 	movw	r3, #8195	@ 0x2003
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <MX_GPIO_Init+0x118>)
 80005ee:	f000 fd81 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 80005f2:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	@ (8000624 <MX_GPIO_Init+0x11c>)
 800060c:	f000 fd72 	bl	80010f4 <HAL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	48000800 	.word	0x48000800
 8000620:	48000400 	.word	0x48000400
 8000624:	48001000 	.word	0x48001000

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fbeb 	bl	8000e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f83c 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff ff68 	bl	8000508 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000638:	f000 f8ee 	bl	8000818 <MX_TIM2_Init>
  MX_TIM3_Init();
 800063c:	f000 f984 	bl	8000948 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000640:	f000 fad2 	bl	8000be8 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000644:	f000 fa84 	bl	8000b50 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	4813      	ldr	r0, [pc, #76]	@ (8000698 <main+0x70>)
 800064c:	f001 ffd4 	bl	80025f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000650:	2104      	movs	r1, #4
 8000652:	4811      	ldr	r0, [pc, #68]	@ (8000698 <main+0x70>)
 8000654:	f001 ffd0 	bl	80025f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000658:	2108      	movs	r1, #8
 800065a:	480f      	ldr	r0, [pc, #60]	@ (8000698 <main+0x70>)
 800065c:	f001 ffcc 	bl	80025f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000660:	210c      	movs	r1, #12
 8000662:	480d      	ldr	r0, [pc, #52]	@ (8000698 <main+0x70>)
 8000664:	f001 ffc8 	bl	80025f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	480c      	ldr	r0, [pc, #48]	@ (800069c <main+0x74>)
 800066c:	f001 ffc4 	bl	80025f8 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 fc39 	bl	8000ee8 <HAL_Delay>
    // TIM2->CCR1 = 10000 / 2; // 1.65V // PC0
    // TIM2->CCR2 = 10000 / 2; // 1.65V // PC1
    // TIM2->CCR3 = 10000 / 2; // 1.65V // PA2
    // TIM2->CCR4 = 10000 / 2; // 1.65V // PA3

    HAL_UART_Receive(&huart4, &testing, 1, HAL_MAX_DELAY);
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800067a:	2201      	movs	r2, #1
 800067c:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <main+0x78>)
 800067e:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <main+0x7c>)
 8000680:	f003 f900 	bl	8003884 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart1, &testing, 1, HAL_MAX_DELAY);
 8000684:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000688:	2201      	movs	r2, #1
 800068a:	4905      	ldr	r1, [pc, #20]	@ (80006a0 <main+0x78>)
 800068c:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <main+0x80>)
 800068e:	f003 f86b 	bl	8003768 <HAL_UART_Transmit>
    HAL_Delay(1);
 8000692:	bf00      	nop
 8000694:	e7ec      	b.n	8000670 <main+0x48>
 8000696:	bf00      	nop
 8000698:	2000002c 	.word	0x2000002c
 800069c:	20000078 	.word	0x20000078
 80006a0:	20000000 	.word	0x20000000
 80006a4:	200000c4 	.word	0x200000c4
 80006a8:	20000158 	.word	0x20000158

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	@ 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	2238      	movs	r2, #56	@ 0x38
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 ffc8 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006d2:	f000 fea9 	bl	8001428 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	2303      	movs	r3, #3
 80006e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006ec:	2314      	movs	r3, #20
 80006ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0318 	add.w	r3, r7, #24
 8000700:	4618      	mov	r0, r3
 8000702:	f000 ff45 	bl	8001590 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800070c:	f000 f818 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2303      	movs	r3, #3
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2102      	movs	r1, #2
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fa43 	bl	8001bb4 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000734:	f000 f804 	bl	8000740 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3750      	adds	r7, #80	@ 0x50
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <Error_Handler+0x8>

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <HAL_MspInit+0x44>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6613      	str	r3, [r2, #96]	@ 0x60
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <HAL_MspInit+0x44>)
 8000760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x44>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	6593      	str	r3, [r2, #88]	@ 0x58
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x44>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000782:	f000 fef5 	bl	8001570 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <NMI_Handler+0x4>

0800079c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <MemManage_Handler+0x4>

080007ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <UsageFault_Handler+0x4>

080007bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 fb5f 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	@ (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	@ 0x38
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000838:	463b      	mov	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800084a:	4b3e      	ldr	r3, [pc, #248]	@ (8000944 <MX_TIM2_Init+0x12c>)
 800084c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000850:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000852:	4b3c      	ldr	r3, [pc, #240]	@ (8000944 <MX_TIM2_Init+0x12c>)
 8000854:	224f      	movs	r2, #79	@ 0x4f
 8000856:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b3a      	ldr	r3, [pc, #232]	@ (8000944 <MX_TIM2_Init+0x12c>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800085e:	4b39      	ldr	r3, [pc, #228]	@ (8000944 <MX_TIM2_Init+0x12c>)
 8000860:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000864:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b37      	ldr	r3, [pc, #220]	@ (8000944 <MX_TIM2_Init+0x12c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800086c:	4b35      	ldr	r3, [pc, #212]	@ (8000944 <MX_TIM2_Init+0x12c>)
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000872:	4834      	ldr	r0, [pc, #208]	@ (8000944 <MX_TIM2_Init+0x12c>)
 8000874:	f001 fe08 	bl	8002488 <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800087e:	f7ff ff5f 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000888:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800088c:	4619      	mov	r1, r3
 800088e:	482d      	ldr	r0, [pc, #180]	@ (8000944 <MX_TIM2_Init+0x12c>)
 8000890:	f002 f8d8 	bl	8002a44 <HAL_TIM_ConfigClockSource>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800089a:	f7ff ff51 	bl	8000740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800089e:	4829      	ldr	r0, [pc, #164]	@ (8000944 <MX_TIM2_Init+0x12c>)
 80008a0:	f001 fe49 	bl	8002536 <HAL_TIM_PWM_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008aa:	f7ff ff49 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4821      	ldr	r0, [pc, #132]	@ (8000944 <MX_TIM2_Init+0x12c>)
 80008be:	f002 fe6d 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008c8:	f7ff ff3a 	bl	8000740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008cc:	2360      	movs	r3, #96	@ 0x60
 80008ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	4619      	mov	r1, r3
 80008e2:	4818      	ldr	r0, [pc, #96]	@ (8000944 <MX_TIM2_Init+0x12c>)
 80008e4:	f001 ff9a 	bl	800281c <HAL_TIM_PWM_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008ee:	f7ff ff27 	bl	8000740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	2204      	movs	r2, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4812      	ldr	r0, [pc, #72]	@ (8000944 <MX_TIM2_Init+0x12c>)
 80008fa:	f001 ff8f 	bl	800281c <HAL_TIM_PWM_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000904:	f7ff ff1c 	bl	8000740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	2208      	movs	r2, #8
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_TIM2_Init+0x12c>)
 8000910:	f001 ff84 	bl	800281c <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800091a:	f7ff ff11 	bl	8000740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	220c      	movs	r2, #12
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	@ (8000944 <MX_TIM2_Init+0x12c>)
 8000926:	f001 ff79 	bl	800281c <HAL_TIM_PWM_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000930:	f7ff ff06 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <MX_TIM2_Init+0x12c>)
 8000936:	f000 f8b1 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3738      	adds	r7, #56	@ 0x38
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000002c 	.word	0x2000002c

08000948 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 800097c:	4a2d      	ldr	r2, [pc, #180]	@ (8000a34 <MX_TIM3_Init+0xec>)
 800097e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 8000982:	224f      	movs	r2, #79	@ 0x4f
 8000984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800098c:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 800098e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000992:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 800099c:	2280      	movs	r2, #128	@ 0x80
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009a0:	4823      	ldr	r0, [pc, #140]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 80009a2:	f001 fd71 	bl	8002488 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009ac:	f7ff fec8 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ba:	4619      	mov	r1, r3
 80009bc:	481c      	ldr	r0, [pc, #112]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 80009be:	f002 f841 	bl	8002a44 <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009c8:	f7ff feba 	bl	8000740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009cc:	4818      	ldr	r0, [pc, #96]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 80009ce:	f001 fdb2 	bl	8002536 <HAL_TIM_PWM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009d8:	f7ff feb2 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 80009ec:	f002 fdd6 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009f6:	f7ff fea3 	bl	8000740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fa:	2360      	movs	r3, #96	@ 0x60
 80009fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 8000a12:	f001 ff03 	bl	800281c <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a1c:	f7ff fe90 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <MX_TIM3_Init+0xe8>)
 8000a22:	f000 f83b 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 8000a26:	bf00      	nop
 8000a28:	3738      	adds	r7, #56	@ 0x38
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000078 	.word	0x20000078
 8000a34:	40000400 	.word	0x40000400

08000a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a48:	d10c      	bne.n	8000a64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_TIM_Base_MspInit+0x5c>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4e:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <HAL_TIM_Base_MspInit+0x5c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <HAL_TIM_Base_MspInit+0x5c>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a62:	e010      	b.n	8000a86 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_TIM_Base_MspInit+0x60>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d10b      	bne.n	8000a86 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_TIM_Base_MspInit+0x5c>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_TIM_Base_MspInit+0x5c>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_TIM_Base_MspInit+0x5c>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40000400 	.word	0x40000400

08000a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000abc:	d11d      	bne.n	8000afa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <HAL_TIM_MspPostInit+0xa8>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <HAL_TIM_MspPostInit+0xa8>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <HAL_TIM_MspPostInit+0xa8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f000 fafe 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000af8:	e020      	b.n	8000b3c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <HAL_TIM_MspPostInit+0xac>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d11b      	bne.n	8000b3c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_TIM_MspPostInit+0xa8>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b08:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_TIM_MspPostInit+0xa8>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_TIM_MspPostInit+0xa8>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <HAL_TIM_MspPostInit+0xb0>)
 8000b38:	f000 fadc 	bl	80010f4 <HAL_GPIO_Init>
}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	@ 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40000400 	.word	0x40000400
 8000b4c:	48001000 	.word	0x48001000

08000b50 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b54:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	@ (8000be4 <MX_UART4_Init+0x94>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b98:	4811      	ldr	r0, [pc, #68]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000b9a:	f002 fd95 	bl	80036c8 <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f7ff fdcc 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000bac:	f003 fc86 	bl	80044bc <HAL_UARTEx_SetTxFifoThreshold>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000bb6:	f7ff fdc3 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000bbe:	f003 fcbb 	bl	8004538 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bc8:	f7ff fdba 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_UART4_Init+0x90>)
 8000bce:	f003 fc3c 	bl	800444a <HAL_UARTEx_DisableFifoMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f7ff fdb2 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000c4 	.word	0x200000c4
 8000be4:	40004c00 	.word	0x40004c00

08000be8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000bee:	4a23      	ldr	r2, [pc, #140]	@ (8000c7c <MX_USART1_UART_Init+0x94>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c30:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c32:	f002 fd49 	bl	80036c8 <HAL_UART_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c3c:	f7ff fd80 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c40:	2100      	movs	r1, #0
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c44:	f003 fc3a 	bl	80044bc <HAL_UARTEx_SetTxFifoThreshold>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f7ff fd77 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c56:	f003 fc6f 	bl	8004538 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c60:	f7ff fd6e 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_USART1_UART_Init+0x90>)
 8000c66:	f003 fbf0 	bl	800444a <HAL_UARTEx_DisableFifoMode>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f7ff fd66 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000158 	.word	0x20000158
 8000c7c:	40013800 	.word	0x40013800

08000c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0a0      	sub	sp, #128	@ 0x80
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	2254      	movs	r2, #84	@ 0x54
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 fcd5 	bl	8004650 <memset>
  if(uartHandle->Instance==UART4)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a3e      	ldr	r2, [pc, #248]	@ (8000da4 <HAL_UART_MspInit+0x124>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d137      	bne.n	8000d20 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 f995 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc8:	f7ff fd3a 	bl	8000740 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ccc:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd0:	4a35      	ldr	r2, [pc, #212]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000cd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd8:	4b33      	ldr	r3, [pc, #204]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	4b30      	ldr	r3, [pc, #192]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cfc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4824      	ldr	r0, [pc, #144]	@ (8000dac <HAL_UART_MspInit+0x12c>)
 8000d1a:	f000 f9eb 	bl	80010f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d1e:	e03c      	b.n	8000d9a <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a22      	ldr	r2, [pc, #136]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d137      	bne.n	8000d9a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 f958 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000d42:	f7ff fcfd 	bl	8000740 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a11      	ldr	r2, [pc, #68]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f000 f9ad 	bl	80010f4 <HAL_GPIO_Init>
}
 8000d9a:	bf00      	nop
 8000d9c:	3780      	adds	r7, #128	@ 0x80
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004c00 	.word	0x40004c00
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000800 	.word	0x48000800
 8000db0:	40013800 	.word	0x40013800

08000db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db4:	480d      	ldr	r0, [pc, #52]	@ (8000dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db8:	f7ff fd1c 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	@ (8000df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <LoopForever+0xe>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e00 <LoopForever+0x16>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f003 fc3d 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de6:	f7ff fc1f 	bl	8000628 <main>

08000dea <LoopForever>:

LoopForever:
    b LoopForever
 8000dea:	e7fe      	b.n	8000dea <LoopForever>
  ldr   r0, =_estack
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000df8:	08004710 	.word	0x08004710
  ldr r2, =_sbss
 8000dfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e00:	200001f0 	.word	0x200001f0

08000e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC1_2_IRQHandler>

08000e06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f93d 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f80e 	bl	8000e38 <HAL_InitTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	e001      	b.n	8000e2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e28:	f7ff fc90 	bl	800074c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <HAL_InitTick+0x68>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d022      	beq.n	8000e92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_InitTick+0x6c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <HAL_InitTick+0x68>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f93a 	bl	80010da <HAL_SYSTICK_Config>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10f      	bne.n	8000e8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	d809      	bhi.n	8000e86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e72:	2200      	movs	r2, #0
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e7a:	f000 f914 	bl	80010a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_InitTick+0x70>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e007      	b.n	8000e96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	e004      	b.n	8000e96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e001      	b.n	8000e96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	20000008 	.word	0x20000008

08000eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_IncTick+0x1c>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a03      	ldr	r2, [pc, #12]	@ (8000ec8 <HAL_IncTick+0x1c>)
 8000ebc:	6013      	str	r3, [r2, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	200001ec 	.word	0x200001ec
 8000ecc:	2000000c 	.word	0x2000000c

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200001ec 	.word	0x200001ec

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f00:	d004      	beq.n	8000f0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_Delay+0x40>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0c:	bf00      	nop
 8000f0e:	f7ff ffdf 	bl	8000ed0 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d8f7      	bhi.n	8000f0e <HAL_Delay+0x26>
  {
  }
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000000c 	.word	0x2000000c

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	@ (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	@ 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff47 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff5e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff90 	bl	8000fe4 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5f 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffb2 	bl	800104c <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001102:	e15a      	b.n	80013ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 814c 	beq.w	80013b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d005      	beq.n	8001134 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001130:	2b02      	cmp	r3, #2
 8001132:	d130      	bne.n	8001196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	f003 0201 	and.w	r2, r3, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d017      	beq.n	80011d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d123      	bne.n	8001226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	6939      	ldr	r1, [r7, #16]
 8001222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0203 	and.w	r2, r3, #3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 80a6 	beq.w	80013b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001268:	4b5b      	ldr	r3, [pc, #364]	@ (80013d8 <HAL_GPIO_Init+0x2e4>)
 800126a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126c:	4a5a      	ldr	r2, [pc, #360]	@ (80013d8 <HAL_GPIO_Init+0x2e4>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6613      	str	r3, [r2, #96]	@ 0x60
 8001274:	4b58      	ldr	r3, [pc, #352]	@ (80013d8 <HAL_GPIO_Init+0x2e4>)
 8001276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001280:	4a56      	ldr	r2, [pc, #344]	@ (80013dc <HAL_GPIO_Init+0x2e8>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012aa:	d01f      	beq.n	80012ec <HAL_GPIO_Init+0x1f8>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a4c      	ldr	r2, [pc, #304]	@ (80013e0 <HAL_GPIO_Init+0x2ec>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d019      	beq.n	80012e8 <HAL_GPIO_Init+0x1f4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a4b      	ldr	r2, [pc, #300]	@ (80013e4 <HAL_GPIO_Init+0x2f0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d013      	beq.n	80012e4 <HAL_GPIO_Init+0x1f0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a4a      	ldr	r2, [pc, #296]	@ (80013e8 <HAL_GPIO_Init+0x2f4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_GPIO_Init+0x1ec>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a49      	ldr	r2, [pc, #292]	@ (80013ec <HAL_GPIO_Init+0x2f8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x1e8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a48      	ldr	r2, [pc, #288]	@ (80013f0 <HAL_GPIO_Init+0x2fc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012d4:	2305      	movs	r3, #5
 80012d6:	e00a      	b.n	80012ee <HAL_GPIO_Init+0x1fa>
 80012d8:	2306      	movs	r3, #6
 80012da:	e008      	b.n	80012ee <HAL_GPIO_Init+0x1fa>
 80012dc:	2304      	movs	r3, #4
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x1fa>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e004      	b.n	80012ee <HAL_GPIO_Init+0x1fa>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x1fa>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_GPIO_Init+0x1fa>
 80012ec:	2300      	movs	r3, #0
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	f002 0203 	and.w	r2, r2, #3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4093      	lsls	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fe:	4937      	ldr	r1, [pc, #220]	@ (80013dc <HAL_GPIO_Init+0x2e8>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800130c:	4b39      	ldr	r3, [pc, #228]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001330:	4a30      	ldr	r2, [pc, #192]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800135a:	4a26      	ldr	r2, [pc, #152]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001384:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ae:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f ae9d 	bne.w	8001104 <HAL_GPIO_Init+0x10>
  }
}
 80013ca:	bf00      	nop
 80013cc:	bf00      	nop
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000c00 	.word	0x48000c00
 80013ec:	48001000 	.word	0x48001000
 80013f0:	48001400 	.word	0x48001400
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001414:	e002      	b.n	800141c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d141      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001436:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800143e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001442:	d131      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001444:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800144a:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001450:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800145c:	4a41      	ldr	r2, [pc, #260]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001462:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001464:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2232      	movs	r2, #50	@ 0x32
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a3f      	ldr	r2, [pc, #252]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147a:	e002      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3b01      	subs	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001482:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800148e:	d102      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f2      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001496:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a2:	d158      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e057      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014b8:	e04d      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014c0:	d141      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c2:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ce:	d131      	bne.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014d6:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2232      	movs	r2, #50	@ 0x32
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	0c9b      	lsrs	r3, r3, #18
 8001502:	3301      	adds	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001506:	e002      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3b01      	subs	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151a:	d102      	bne.n	8001522 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f2      	bne.n	8001508 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152e:	d112      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e011      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001540:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001544:	e007      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001554:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40007000 	.word	0x40007000
 8001568:	20000004 	.word	0x20000004
 800156c:	431bde83 	.word	0x431bde83

08001570 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a04      	ldr	r2, [pc, #16]	@ (800158c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157e:	6093      	str	r3, [r2, #8]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e2fe      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d075      	beq.n	800169a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ae:	4b97      	ldr	r3, [pc, #604]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015b8:	4b94      	ldr	r3, [pc, #592]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d102      	bne.n	80015ce <HAL_RCC_OscConfig+0x3e>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_OscConfig+0x44>
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d10b      	bne.n	80015ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	4b8d      	ldr	r3, [pc, #564]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d05b      	beq.n	8001698 <HAL_RCC_OscConfig+0x108>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d157      	bne.n	8001698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e2d9      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x74>
 80015f6:	4b85      	ldr	r3, [pc, #532]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a84      	ldr	r2, [pc, #528]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e01d      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x98>
 800160e:	4b7f      	ldr	r3, [pc, #508]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7e      	ldr	r2, [pc, #504]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b7c      	ldr	r3, [pc, #496]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7b      	ldr	r2, [pc, #492]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001628:	4b78      	ldr	r3, [pc, #480]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a77      	ldr	r2, [pc, #476]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b75      	ldr	r3, [pc, #468]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a74      	ldr	r2, [pc, #464]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800163e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fc42 	bl	8000ed0 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fc3e 	bl	8000ed0 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	@ 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e29e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001662:	4b6a      	ldr	r3, [pc, #424]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0xc0>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc2e 	bl	8000ed0 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fc2a 	bl	8000ed0 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	@ 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e28a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168a:	4b60      	ldr	r3, [pc, #384]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0xe8>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d075      	beq.n	8001792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a6:	4b59      	ldr	r3, [pc, #356]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b0:	4b56      	ldr	r3, [pc, #344]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0x136>
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d002      	beq.n	80016cc <HAL_RCC_OscConfig+0x13c>
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d11f      	bne.n	800170c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016cc:	4b4f      	ldr	r3, [pc, #316]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_OscConfig+0x154>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e25d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b49      	ldr	r3, [pc, #292]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	4946      	ldr	r1, [pc, #280]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016f8:	4b45      	ldr	r3, [pc, #276]	@ (8001810 <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb9b 	bl	8000e38 <HAL_InitTick>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d043      	beq.n	8001790 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e249      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d023      	beq.n	800175c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	4b3d      	ldr	r3, [pc, #244]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a3c      	ldr	r2, [pc, #240]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fbd6 	bl	8000ed0 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fbd2 	bl	8000ed0 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e232      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173a:	4b34      	ldr	r3, [pc, #208]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b31      	ldr	r3, [pc, #196]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	061b      	lsls	r3, r3, #24
 8001754:	492d      	ldr	r1, [pc, #180]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
 800175a:	e01a      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2a      	ldr	r2, [pc, #168]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001762:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fbb2 	bl	8000ed0 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fbae 	bl	8000ed0 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e20e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001782:	4b22      	ldr	r3, [pc, #136]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1e0>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d041      	beq.n	8001822 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ac:	4a17      	ldr	r2, [pc, #92]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb8b 	bl	8000ed0 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fb87 	bl	8000ed0 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1e7      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ef      	beq.n	80017be <HAL_RCC_OscConfig+0x22e>
 80017de:	e020      	b.n	8001822 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e6:	4a09      	ldr	r2, [pc, #36]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb6e 	bl	8000ed0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb6a 	bl	8000ed0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d906      	bls.n	8001814 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1ca      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	4b8c      	ldr	r3, [pc, #560]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ea      	bne.n	80017f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80a6 	beq.w	800197c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001834:	4b84      	ldr	r3, [pc, #528]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_OscConfig+0x2b4>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x2b6>
 8001844:	2300      	movs	r3, #0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001854:	6593      	str	r3, [r2, #88]	@ 0x58
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	4b79      	ldr	r3, [pc, #484]	@ (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001872:	4b76      	ldr	r3, [pc, #472]	@ (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	@ (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff fb27 	bl	8000ed0 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fb23 	bl	8000ed0 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e183      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	4b6c      	ldr	r3, [pc, #432]	@ (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d108      	bne.n	80018be <HAL_RCC_OscConfig+0x32e>
 80018ac:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b2:	4a65      	ldr	r2, [pc, #404]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018bc:	e024      	b.n	8001908 <HAL_RCC_OscConfig+0x378>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d110      	bne.n	80018e8 <HAL_RCC_OscConfig+0x358>
 80018c6:	4b60      	ldr	r3, [pc, #384]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e6:	e00f      	b.n	8001908 <HAL_RCC_OscConfig+0x378>
 80018e8:	4b57      	ldr	r3, [pc, #348]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ee:	4a56      	ldr	r2, [pc, #344]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f8:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	4a52      	ldr	r2, [pc, #328]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d016      	beq.n	800193e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fade 	bl	8000ed0 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff fada 	bl	8000ed0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e138      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ed      	beq.n	8001918 <HAL_RCC_OscConfig+0x388>
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff fac7 	bl	8000ed0 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff fac3 	bl	8000ed0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e121      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ed      	bne.n	8001946 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b35      	ldr	r3, [pc, #212]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	4a34      	ldr	r2, [pc, #208]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001990:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001992:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001996:	4a2c      	ldr	r2, [pc, #176]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa96 	bl	8000ed0 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a8:	f7ff fa92 	bl	8000ed0 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0f2      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ba:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x418>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fa79 	bl	8000ed0 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e2:	f7ff fa75 	bl	8000ed0 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0d5      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80c9 	beq.w	8001b9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	f000 8083 	beq.w	8001b20 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d15e      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fa4f 	bl	8000ed0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	e00c      	b.n	8001a50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fa4b 	bl	8000ed0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d905      	bls.n	8001a50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0ab      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	4b55      	ldr	r3, [pc, #340]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ec      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5c:	4b52      	ldr	r3, [pc, #328]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4b52      	ldr	r3, [pc, #328]	@ (8001bac <HAL_RCC_OscConfig+0x61c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6a11      	ldr	r1, [r2, #32]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a6c:	3a01      	subs	r2, #1
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	4311      	orrs	r1, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a76:	0212      	lsls	r2, r2, #8
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a7e:	0852      	lsrs	r2, r2, #1
 8001a80:	3a01      	subs	r2, #1
 8001a82:	0552      	lsls	r2, r2, #21
 8001a84:	4311      	orrs	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a8a:	0852      	lsrs	r2, r2, #1
 8001a8c:	3a01      	subs	r2, #1
 8001a8e:	0652      	lsls	r2, r2, #25
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a96:	06d2      	lsls	r2, r2, #27
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	4943      	ldr	r1, [pc, #268]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a40      	ldr	r2, [pc, #256]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ab6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fa0a 	bl	8000ed0 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fa06 	bl	8000ed0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e066      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b35      	ldr	r3, [pc, #212]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x530>
 8001ade:	e05e      	b.n	8001b9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a30      	ldr	r2, [pc, #192]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f9f0 	bl	8000ed0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f9ec 	bl	8000ed0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b12:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4924      	ldr	r1, [pc, #144]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
 8001b1e:	e03e      	b.n	8001b9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e039      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d12c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d123      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d11b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d113      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	3b01      	subs	r3, #1
 8001b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	019f800c 	.word	0x019f800c
 8001bb0:	feeefffc 	.word	0xfeeefffc

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e11e      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b91      	ldr	r3, [pc, #580]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b8e      	ldr	r3, [pc, #568]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 020f 	bic.w	r2, r3, #15
 8001be2:	498c      	ldr	r1, [pc, #560]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b8a      	ldr	r3, [pc, #552]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e106      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d073      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d129      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c10:	4b81      	ldr	r3, [pc, #516]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0f4      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c20:	f000 f99e 	bl	8001f60 <RCC_GetSysClockFreqFromPLLSource>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4a7c      	ldr	r2, [pc, #496]	@ (8001e1c <HAL_RCC_ClockConfig+0x268>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d93f      	bls.n	8001cae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d033      	beq.n	8001cae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d12f      	bne.n	8001cae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c4e:	4b72      	ldr	r3, [pc, #456]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c56:	4a70      	ldr	r2, [pc, #448]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e024      	b.n	8001cae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0c6      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0be      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c8c:	f000 f8ce 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4a61      	ldr	r2, [pc, #388]	@ (8001e1c <HAL_RCC_ClockConfig+0x268>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d909      	bls.n	8001cae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ca2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001caa:	2380      	movs	r3, #128	@ 0x80
 8001cac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cae:	4b5a      	ldr	r3, [pc, #360]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 0203 	bic.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4957      	ldr	r1, [pc, #348]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc0:	f7ff f906 	bl	8000ed0 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f7ff f902 	bl	8000ed0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e095      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	4b4e      	ldr	r3, [pc, #312]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 020c 	and.w	r2, r3, #12
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d1eb      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d023      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d08:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a42      	ldr	r2, [pc, #264]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d20:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d28:	4a3b      	ldr	r2, [pc, #236]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4936      	ldr	r1, [pc, #216]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b80      	cmp	r3, #128	@ 0x80
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d4a:	4b33      	ldr	r3, [pc, #204]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4a32      	ldr	r2, [pc, #200]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d56:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d21d      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d64:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 020f 	bic.w	r2, r3, #15
 8001d6c:	4929      	ldr	r1, [pc, #164]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d74:	f7ff f8ac 	bl	8000ed0 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7ff f8a8 	bl	8000ed0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e03b      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1ed      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4917      	ldr	r1, [pc, #92]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490f      	ldr	r1, [pc, #60]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dde:	f000 f825 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490c      	ldr	r1, [pc, #48]	@ (8001e20 <HAL_RCC_ClockConfig+0x26c>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_RCC_ClockConfig+0x270>)
 8001dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_RCC_ClockConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f818 	bl	8000e38 <HAL_InitTick>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	04c4b400 	.word	0x04c4b400
 8001e20:	080046c0 	.word	0x080046c0
 8001e24:	20000004 	.word	0x20000004
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	e047      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e50:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	e03e      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e56:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d136      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3301      	adds	r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d10c      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e80:	4a1a      	ldr	r2, [pc, #104]	@ (8001eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8a:	68d2      	ldr	r2, [r2, #12]
 8001e8c:	0a12      	lsrs	r2, r2, #8
 8001e8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
      break;
 8001e98:	e00c      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	0a12      	lsrs	r2, r2, #8
 8001ea8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
      break;
 8001eb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0e5b      	lsrs	r3, r3, #25
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e001      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ed4:	693b      	ldr	r3, [r7, #16]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4904      	ldr	r1, [pc, #16]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	080046d0 	.word	0x080046d0

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f38:	f7ff ffda 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0adb      	lsrs	r3, r3, #11
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4904      	ldr	r1, [pc, #16]	@ (8001f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	080046d0 	.word	0x080046d0

08001f60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f66:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d10c      	bne.n	8001f9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f84:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	4a14      	ldr	r2, [pc, #80]	@ (8001fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f8e:	68d2      	ldr	r2, [r2, #12]
 8001f90:	0a12      	lsrs	r2, r2, #8
 8001f92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
    break;
 8001f9c:	e00c      	b.n	8001fb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f9e:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fa8:	68d2      	ldr	r2, [r2, #12]
 8001faa:	0a12      	lsrs	r2, r2, #8
 8001fac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    break;
 8001fb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0e5b      	lsrs	r3, r3, #25
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	007a1200 	.word	0x007a1200
 8001fe8:	00f42400 	.word	0x00f42400

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8098 	beq.w	800213a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b43      	ldr	r3, [pc, #268]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b40      	ldr	r3, [pc, #256]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	4a3f      	ldr	r2, [pc, #252]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	@ 0x58
 8002026:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002036:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a39      	ldr	r2, [pc, #228]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002040:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002042:	f7fe ff45 	bl	8000ed0 <HAL_GetTick>
 8002046:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002048:	e009      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204a:	f7fe ff41 	bl	8000ed0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d902      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	74fb      	strb	r3, [r7, #19]
        break;
 800205c:	e005      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800205e:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ef      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d159      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002070:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800207a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01e      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	d019      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800208c:	4b23      	ldr	r3, [pc, #140]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002096:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002098:	4b20      	ldr	r3, [pc, #128]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a8:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ae:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b8:	4a18      	ldr	r2, [pc, #96]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d016      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7fe ff01 	bl	8000ed0 <HAL_GetTick>
 80020ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d0:	e00b      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7fe fefd 	bl	8000ed0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d902      	bls.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	74fb      	strb	r3, [r7, #19]
            break;
 80020e8:	e006      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ea:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ec      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210c:	4903      	ldr	r1, [pc, #12]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002114:	e008      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002116:	7cfb      	ldrb	r3, [r7, #19]
 8002118:	74bb      	strb	r3, [r7, #18]
 800211a:	e005      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002128:	7c7b      	ldrb	r3, [r7, #17]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4ba7      	ldr	r3, [pc, #668]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	4aa6      	ldr	r2, [pc, #664]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002138:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002146:	4ba1      	ldr	r3, [pc, #644]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214c:	f023 0203 	bic.w	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	499d      	ldr	r1, [pc, #628]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002168:	4b98      	ldr	r3, [pc, #608]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f023 020c 	bic.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4995      	ldr	r1, [pc, #596]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800218a:	4b90      	ldr	r3, [pc, #576]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002190:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	498c      	ldr	r1, [pc, #560]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021ac:	4b87      	ldr	r3, [pc, #540]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	4984      	ldr	r1, [pc, #528]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ce:	4b7f      	ldr	r3, [pc, #508]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	497b      	ldr	r1, [pc, #492]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021f0:	4b76      	ldr	r3, [pc, #472]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	4973      	ldr	r1, [pc, #460]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002212:	4b6e      	ldr	r3, [pc, #440]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002218:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	496a      	ldr	r1, [pc, #424]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002234:	4b65      	ldr	r3, [pc, #404]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4962      	ldr	r1, [pc, #392]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002256:	4b5d      	ldr	r3, [pc, #372]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	4959      	ldr	r1, [pc, #356]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002278:	4b54      	ldr	r3, [pc, #336]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800227e:	f023 0203 	bic.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002286:	4951      	ldr	r1, [pc, #324]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800229a:	4b4c      	ldr	r3, [pc, #304]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	4948      	ldr	r1, [pc, #288]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022bc:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4940      	ldr	r1, [pc, #256]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022da:	d105      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022dc:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a3a      	ldr	r2, [pc, #232]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d015      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022f4:	4b35      	ldr	r3, [pc, #212]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	4932      	ldr	r1, [pc, #200]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002312:	d105      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a2c      	ldr	r2, [pc, #176]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800231e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	4924      	ldr	r1, [pc, #144]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002346:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800234a:	d105      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a1e      	ldr	r2, [pc, #120]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002356:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002372:	4916      	ldr	r1, [pc, #88]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d019      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	4908      	ldr	r1, [pc, #32]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ba:	d109      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a02      	ldr	r2, [pc, #8]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]
 80023c8:	e002      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023dc:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	4926      	ldr	r1, [pc, #152]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023fa:	d105      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a20      	ldr	r2, [pc, #128]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002406:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002414:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002422:	4918      	ldr	r1, [pc, #96]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800242e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002432:	d105      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800244c:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800244e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002452:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	490a      	ldr	r1, [pc, #40]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800246a:	d105      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002476:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002478:	7cbb      	ldrb	r3, [r7, #18]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e049      	b.n	800252e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fac2 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f000 fbc8 	bl	8002c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e049      	b.n	80025dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f841 	bl	80025e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f000 fb71 	bl	8002c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <HAL_TIM_PWM_Start+0x24>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e03c      	b.n	8002696 <HAL_TIM_PWM_Start+0x9e>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b04      	cmp	r3, #4
 8002620:	d109      	bne.n	8002636 <HAL_TIM_PWM_Start+0x3e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	e02f      	b.n	8002696 <HAL_TIM_PWM_Start+0x9e>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d109      	bne.n	8002650 <HAL_TIM_PWM_Start+0x58>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e022      	b.n	8002696 <HAL_TIM_PWM_Start+0x9e>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d109      	bne.n	800266a <HAL_TIM_PWM_Start+0x72>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	bf14      	ite	ne
 8002662:	2301      	movne	r3, #1
 8002664:	2300      	moveq	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	e015      	b.n	8002696 <HAL_TIM_PWM_Start+0x9e>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b10      	cmp	r3, #16
 800266e:	d109      	bne.n	8002684 <HAL_TIM_PWM_Start+0x8c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e008      	b.n	8002696 <HAL_TIM_PWM_Start+0x9e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0a6      	b.n	80027ec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_PWM_Start+0xb6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026ac:	e023      	b.n	80026f6 <HAL_TIM_PWM_Start+0xfe>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d104      	bne.n	80026be <HAL_TIM_PWM_Start+0xc6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026bc:	e01b      	b.n	80026f6 <HAL_TIM_PWM_Start+0xfe>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_PWM_Start+0xd6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026cc:	e013      	b.n	80026f6 <HAL_TIM_PWM_Start+0xfe>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d104      	bne.n	80026de <HAL_TIM_PWM_Start+0xe6>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026dc:	e00b      	b.n	80026f6 <HAL_TIM_PWM_Start+0xfe>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d104      	bne.n	80026ee <HAL_TIM_PWM_Start+0xf6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026ec:	e003      	b.n	80026f6 <HAL_TIM_PWM_Start+0xfe>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 ff26 	bl	8003550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3a      	ldr	r2, [pc, #232]	@ (80027f4 <HAL_TIM_PWM_Start+0x1fc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <HAL_TIM_PWM_Start+0x148>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a39      	ldr	r2, [pc, #228]	@ (80027f8 <HAL_TIM_PWM_Start+0x200>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_TIM_PWM_Start+0x148>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a37      	ldr	r2, [pc, #220]	@ (80027fc <HAL_TIM_PWM_Start+0x204>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <HAL_TIM_PWM_Start+0x148>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a36      	ldr	r2, [pc, #216]	@ (8002800 <HAL_TIM_PWM_Start+0x208>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_TIM_PWM_Start+0x148>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a34      	ldr	r2, [pc, #208]	@ (8002804 <HAL_TIM_PWM_Start+0x20c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_TIM_PWM_Start+0x148>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a33      	ldr	r2, [pc, #204]	@ (8002808 <HAL_TIM_PWM_Start+0x210>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <HAL_TIM_PWM_Start+0x14c>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <HAL_TIM_PWM_Start+0x14e>
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002758:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a25      	ldr	r2, [pc, #148]	@ (80027f4 <HAL_TIM_PWM_Start+0x1fc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d022      	beq.n	80027aa <HAL_TIM_PWM_Start+0x1b2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800276c:	d01d      	beq.n	80027aa <HAL_TIM_PWM_Start+0x1b2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a26      	ldr	r2, [pc, #152]	@ (800280c <HAL_TIM_PWM_Start+0x214>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d018      	beq.n	80027aa <HAL_TIM_PWM_Start+0x1b2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a24      	ldr	r2, [pc, #144]	@ (8002810 <HAL_TIM_PWM_Start+0x218>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_TIM_PWM_Start+0x1b2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <HAL_TIM_PWM_Start+0x21c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_TIM_PWM_Start+0x1b2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a19      	ldr	r2, [pc, #100]	@ (80027f8 <HAL_TIM_PWM_Start+0x200>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_TIM_PWM_Start+0x1b2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <HAL_TIM_PWM_Start+0x204>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_TIM_PWM_Start+0x1b2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a18      	ldr	r2, [pc, #96]	@ (8002808 <HAL_TIM_PWM_Start+0x210>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d115      	bne.n	80027d6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <HAL_TIM_PWM_Start+0x220>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d015      	beq.n	80027e8 <HAL_TIM_PWM_Start+0x1f0>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c2:	d011      	beq.n	80027e8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d4:	e008      	b.n	80027e8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e000      	b.n	80027ea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40013400 	.word	0x40013400
 80027fc:	40014000 	.word	0x40014000
 8002800:	40014400 	.word	0x40014400
 8002804:	40014800 	.word	0x40014800
 8002808:	40015000 	.word	0x40015000
 800280c:	40000400 	.word	0x40000400
 8002810:	40000800 	.word	0x40000800
 8002814:	40000c00 	.word	0x40000c00
 8002818:	00010007 	.word	0x00010007

0800281c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002836:	2302      	movs	r3, #2
 8002838:	e0ff      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b14      	cmp	r3, #20
 8002846:	f200 80f0 	bhi.w	8002a2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800284a:	a201      	add	r2, pc, #4	@ (adr r2, 8002850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	080028a5 	.word	0x080028a5
 8002854:	08002a2b 	.word	0x08002a2b
 8002858:	08002a2b 	.word	0x08002a2b
 800285c:	08002a2b 	.word	0x08002a2b
 8002860:	080028e5 	.word	0x080028e5
 8002864:	08002a2b 	.word	0x08002a2b
 8002868:	08002a2b 	.word	0x08002a2b
 800286c:	08002a2b 	.word	0x08002a2b
 8002870:	08002927 	.word	0x08002927
 8002874:	08002a2b 	.word	0x08002a2b
 8002878:	08002a2b 	.word	0x08002a2b
 800287c:	08002a2b 	.word	0x08002a2b
 8002880:	08002967 	.word	0x08002967
 8002884:	08002a2b 	.word	0x08002a2b
 8002888:	08002a2b 	.word	0x08002a2b
 800288c:	08002a2b 	.word	0x08002a2b
 8002890:	080029a9 	.word	0x080029a9
 8002894:	08002a2b 	.word	0x08002a2b
 8002898:	08002a2b 	.word	0x08002a2b
 800289c:	08002a2b 	.word	0x08002a2b
 80028a0:	080029e9 	.word	0x080029e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fa8a 	bl	8002dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0208 	orr.w	r2, r2, #8
 80028be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0204 	bic.w	r2, r2, #4
 80028ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6999      	ldr	r1, [r3, #24]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	619a      	str	r2, [r3, #24]
      break;
 80028e2:	e0a5      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fb04 	bl	8002ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6999      	ldr	r1, [r3, #24]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	021a      	lsls	r2, r3, #8
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	619a      	str	r2, [r3, #24]
      break;
 8002924:	e084      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fb77 	bl	8003020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0208 	orr.w	r2, r2, #8
 8002940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0204 	bic.w	r2, r2, #4
 8002950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69d9      	ldr	r1, [r3, #28]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	61da      	str	r2, [r3, #28]
      break;
 8002964:	e064      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fbe9 	bl	8003144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69d9      	ldr	r1, [r3, #28]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	021a      	lsls	r2, r3, #8
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	61da      	str	r2, [r3, #28]
      break;
 80029a6:	e043      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fc5c 	bl	800326c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80029e6:	e023      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fca6 	bl	8003340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	021a      	lsls	r2, r3, #8
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a28:	e002      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop

08002a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIM_ConfigClockSource+0x1c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0ee      	b.n	8002c3e <HAL_TIM_ConfigClockSource+0x1fa>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002a7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6b      	ldr	r2, [pc, #428]	@ (8002c48 <HAL_TIM_ConfigClockSource+0x204>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	f000 80b9 	beq.w	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002aa0:	4a69      	ldr	r2, [pc, #420]	@ (8002c48 <HAL_TIM_ConfigClockSource+0x204>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f200 80be 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002aa8:	4a68      	ldr	r2, [pc, #416]	@ (8002c4c <HAL_TIM_ConfigClockSource+0x208>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f000 80b1 	beq.w	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002ab0:	4a66      	ldr	r2, [pc, #408]	@ (8002c4c <HAL_TIM_ConfigClockSource+0x208>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f200 80b6 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ab8:	4a65      	ldr	r2, [pc, #404]	@ (8002c50 <HAL_TIM_ConfigClockSource+0x20c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	f000 80a9 	beq.w	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002ac0:	4a63      	ldr	r2, [pc, #396]	@ (8002c50 <HAL_TIM_ConfigClockSource+0x20c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	f200 80ae 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ac8:	4a62      	ldr	r2, [pc, #392]	@ (8002c54 <HAL_TIM_ConfigClockSource+0x210>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	f000 80a1 	beq.w	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002ad0:	4a60      	ldr	r2, [pc, #384]	@ (8002c54 <HAL_TIM_ConfigClockSource+0x210>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f200 80a6 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c58 <HAL_TIM_ConfigClockSource+0x214>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	f000 8099 	beq.w	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8002c58 <HAL_TIM_ConfigClockSource+0x214>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f200 809e 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ae8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002aec:	f000 8091 	beq.w	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002af0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002af4:	f200 8096 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002af8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002afc:	f000 8089 	beq.w	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b04:	f200 808e 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b0c:	d03e      	beq.n	8002b8c <HAL_TIM_ConfigClockSource+0x148>
 8002b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b12:	f200 8087 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1a:	f000 8086 	beq.w	8002c2a <HAL_TIM_ConfigClockSource+0x1e6>
 8002b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b22:	d87f      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b24:	2b70      	cmp	r3, #112	@ 0x70
 8002b26:	d01a      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x11a>
 8002b28:	2b70      	cmp	r3, #112	@ 0x70
 8002b2a:	d87b      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b2c:	2b60      	cmp	r3, #96	@ 0x60
 8002b2e:	d050      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x18e>
 8002b30:	2b60      	cmp	r3, #96	@ 0x60
 8002b32:	d877      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b34:	2b50      	cmp	r3, #80	@ 0x50
 8002b36:	d03c      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0x16e>
 8002b38:	2b50      	cmp	r3, #80	@ 0x50
 8002b3a:	d873      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b3c:	2b40      	cmp	r3, #64	@ 0x40
 8002b3e:	d058      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b40:	2b40      	cmp	r3, #64	@ 0x40
 8002b42:	d86f      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b44:	2b30      	cmp	r3, #48	@ 0x30
 8002b46:	d064      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b48:	2b30      	cmp	r3, #48	@ 0x30
 8002b4a:	d86b      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d060      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d867      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d05c      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d05a      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b5c:	e062      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b6e:	f000 fccf 	bl	8003510 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	609a      	str	r2, [r3, #8]
      break;
 8002b8a:	e04f      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b9c:	f000 fcb8 	bl	8003510 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bae:	609a      	str	r2, [r3, #8]
      break;
 8002bb0:	e03c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 fc2a 	bl	8003418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2150      	movs	r1, #80	@ 0x50
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fc83 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e02c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 fc49 	bl	8003476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2160      	movs	r1, #96	@ 0x60
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fc73 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e01c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 fc0a 	bl	8003418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2140      	movs	r1, #64	@ 0x40
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fc63 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002c10:	e00c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f000 fc5a 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002c22:	e003      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e000      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8002c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	00100070 	.word	0x00100070
 8002c4c:	00100050 	.word	0x00100050
 8002c50:	00100040 	.word	0x00100040
 8002c54:	00100030 	.word	0x00100030
 8002c58:	00100020 	.word	0x00100020

08002c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002da0 <TIM_Base_SetConfig+0x144>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d017      	beq.n	8002ca4 <TIM_Base_SetConfig+0x48>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c7a:	d013      	beq.n	8002ca4 <TIM_Base_SetConfig+0x48>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a49      	ldr	r2, [pc, #292]	@ (8002da4 <TIM_Base_SetConfig+0x148>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00f      	beq.n	8002ca4 <TIM_Base_SetConfig+0x48>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a48      	ldr	r2, [pc, #288]	@ (8002da8 <TIM_Base_SetConfig+0x14c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_Base_SetConfig+0x48>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a47      	ldr	r2, [pc, #284]	@ (8002dac <TIM_Base_SetConfig+0x150>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0x48>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a46      	ldr	r2, [pc, #280]	@ (8002db0 <TIM_Base_SetConfig+0x154>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x48>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a45      	ldr	r2, [pc, #276]	@ (8002db4 <TIM_Base_SetConfig+0x158>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a39      	ldr	r2, [pc, #228]	@ (8002da0 <TIM_Base_SetConfig+0x144>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d023      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc4:	d01f      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a36      	ldr	r2, [pc, #216]	@ (8002da4 <TIM_Base_SetConfig+0x148>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01b      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a35      	ldr	r2, [pc, #212]	@ (8002da8 <TIM_Base_SetConfig+0x14c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d017      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a34      	ldr	r2, [pc, #208]	@ (8002dac <TIM_Base_SetConfig+0x150>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a33      	ldr	r2, [pc, #204]	@ (8002db0 <TIM_Base_SetConfig+0x154>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00f      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a33      	ldr	r2, [pc, #204]	@ (8002db8 <TIM_Base_SetConfig+0x15c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <TIM_Base_SetConfig+0x160>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	@ (8002dc0 <TIM_Base_SetConfig+0x164>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_Base_SetConfig+0xaa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2c      	ldr	r2, [pc, #176]	@ (8002db4 <TIM_Base_SetConfig+0x158>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d108      	bne.n	8002d18 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a18      	ldr	r2, [pc, #96]	@ (8002da0 <TIM_Base_SetConfig+0x144>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <TIM_Base_SetConfig+0x110>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a1a      	ldr	r2, [pc, #104]	@ (8002db0 <TIM_Base_SetConfig+0x154>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00f      	beq.n	8002d6c <TIM_Base_SetConfig+0x110>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002db8 <TIM_Base_SetConfig+0x15c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <TIM_Base_SetConfig+0x110>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a19      	ldr	r2, [pc, #100]	@ (8002dbc <TIM_Base_SetConfig+0x160>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d007      	beq.n	8002d6c <TIM_Base_SetConfig+0x110>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a18      	ldr	r2, [pc, #96]	@ (8002dc0 <TIM_Base_SetConfig+0x164>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <TIM_Base_SetConfig+0x110>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a13      	ldr	r2, [pc, #76]	@ (8002db4 <TIM_Base_SetConfig+0x158>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d103      	bne.n	8002d74 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f023 0201 	bic.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	611a      	str	r2, [r3, #16]
  }
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40013400 	.word	0x40013400
 8002db4:	40015000 	.word	0x40015000
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800

08002dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f023 0201 	bic.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 0302 	bic.w	r3, r3, #2
 8002e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a30      	ldr	r2, [pc, #192]	@ (8002ee0 <TIM_OC1_SetConfig+0x11c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <TIM_OC1_SetConfig+0x88>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee4 <TIM_OC1_SetConfig+0x120>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00f      	beq.n	8002e4c <TIM_OC1_SetConfig+0x88>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee8 <TIM_OC1_SetConfig+0x124>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00b      	beq.n	8002e4c <TIM_OC1_SetConfig+0x88>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <TIM_OC1_SetConfig+0x128>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <TIM_OC1_SetConfig+0x88>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef0 <TIM_OC1_SetConfig+0x12c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <TIM_OC1_SetConfig+0x88>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef4 <TIM_OC1_SetConfig+0x130>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d10c      	bne.n	8002e66 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0308 	bic.w	r3, r3, #8
 8002e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee0 <TIM_OC1_SetConfig+0x11c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <TIM_OC1_SetConfig+0xd2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <TIM_OC1_SetConfig+0x120>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00f      	beq.n	8002e96 <TIM_OC1_SetConfig+0xd2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <TIM_OC1_SetConfig+0x124>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_OC1_SetConfig+0xd2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1a      	ldr	r2, [pc, #104]	@ (8002eec <TIM_OC1_SetConfig+0x128>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_OC1_SetConfig+0xd2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a19      	ldr	r2, [pc, #100]	@ (8002ef0 <TIM_OC1_SetConfig+0x12c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_OC1_SetConfig+0xd2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <TIM_OC1_SetConfig+0x130>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d111      	bne.n	8002eba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	621a      	str	r2, [r3, #32]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40013400 	.word	0x40013400
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40014400 	.word	0x40014400
 8002ef0:	40014800 	.word	0x40014800
 8002ef4:	40015000 	.word	0x40015000

08002ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f023 0210 	bic.w	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0320 	bic.w	r3, r3, #32
 8002f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a2c      	ldr	r2, [pc, #176]	@ (8003008 <TIM_OC2_SetConfig+0x110>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <TIM_OC2_SetConfig+0x74>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800300c <TIM_OC2_SetConfig+0x114>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_OC2_SetConfig+0x74>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a2a      	ldr	r2, [pc, #168]	@ (8003010 <TIM_OC2_SetConfig+0x118>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10d      	bne.n	8002f88 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <TIM_OC2_SetConfig+0x110>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <TIM_OC2_SetConfig+0xc0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a1e      	ldr	r2, [pc, #120]	@ (800300c <TIM_OC2_SetConfig+0x114>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00f      	beq.n	8002fb8 <TIM_OC2_SetConfig+0xc0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003014 <TIM_OC2_SetConfig+0x11c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00b      	beq.n	8002fb8 <TIM_OC2_SetConfig+0xc0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8003018 <TIM_OC2_SetConfig+0x120>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d007      	beq.n	8002fb8 <TIM_OC2_SetConfig+0xc0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <TIM_OC2_SetConfig+0x124>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_OC2_SetConfig+0xc0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <TIM_OC2_SetConfig+0x118>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d113      	bne.n	8002fe0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40013400 	.word	0x40013400
 8003010:	40015000 	.word	0x40015000
 8003014:	40014000 	.word	0x40014000
 8003018:	40014400 	.word	0x40014400
 800301c:	40014800 	.word	0x40014800

08003020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800304e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800306c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2b      	ldr	r2, [pc, #172]	@ (800312c <TIM_OC3_SetConfig+0x10c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <TIM_OC3_SetConfig+0x72>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2a      	ldr	r2, [pc, #168]	@ (8003130 <TIM_OC3_SetConfig+0x110>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_OC3_SetConfig+0x72>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a29      	ldr	r2, [pc, #164]	@ (8003134 <TIM_OC3_SetConfig+0x114>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d10d      	bne.n	80030ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a1e      	ldr	r2, [pc, #120]	@ (800312c <TIM_OC3_SetConfig+0x10c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <TIM_OC3_SetConfig+0xbe>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <TIM_OC3_SetConfig+0x110>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00f      	beq.n	80030de <TIM_OC3_SetConfig+0xbe>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <TIM_OC3_SetConfig+0x118>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00b      	beq.n	80030de <TIM_OC3_SetConfig+0xbe>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <TIM_OC3_SetConfig+0x11c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_OC3_SetConfig+0xbe>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <TIM_OC3_SetConfig+0x120>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <TIM_OC3_SetConfig+0xbe>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a16      	ldr	r2, [pc, #88]	@ (8003134 <TIM_OC3_SetConfig+0x114>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d113      	bne.n	8003106 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	621a      	str	r2, [r3, #32]
}
 8003120:	bf00      	nop
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40013400 	.word	0x40013400
 8003134:	40015000 	.word	0x40015000
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800

08003144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	031b      	lsls	r3, r3, #12
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003254 <TIM_OC4_SetConfig+0x110>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <TIM_OC4_SetConfig+0x74>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003258 <TIM_OC4_SetConfig+0x114>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_OC4_SetConfig+0x74>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a2a      	ldr	r2, [pc, #168]	@ (800325c <TIM_OC4_SetConfig+0x118>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10d      	bne.n	80031d4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80031be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	031b      	lsls	r3, r3, #12
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003254 <TIM_OC4_SetConfig+0x110>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <TIM_OC4_SetConfig+0xc0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1e      	ldr	r2, [pc, #120]	@ (8003258 <TIM_OC4_SetConfig+0x114>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00f      	beq.n	8003204 <TIM_OC4_SetConfig+0xc0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <TIM_OC4_SetConfig+0x11c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_OC4_SetConfig+0xc0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003264 <TIM_OC4_SetConfig+0x120>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <TIM_OC4_SetConfig+0xc0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <TIM_OC4_SetConfig+0x124>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_OC4_SetConfig+0xc0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a17      	ldr	r2, [pc, #92]	@ (800325c <TIM_OC4_SetConfig+0x118>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d113      	bne.n	800322c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800320a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003212:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	019b      	lsls	r3, r3, #6
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40013400 	.word	0x40013400
 800325c:	40015000 	.word	0x40015000
 8003260:	40014000 	.word	0x40014000
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800

0800326c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80032b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a19      	ldr	r2, [pc, #100]	@ (8003328 <TIM_OC5_SetConfig+0xbc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <TIM_OC5_SetConfig+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a18      	ldr	r2, [pc, #96]	@ (800332c <TIM_OC5_SetConfig+0xc0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00f      	beq.n	80032ee <TIM_OC5_SetConfig+0x82>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a17      	ldr	r2, [pc, #92]	@ (8003330 <TIM_OC5_SetConfig+0xc4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_OC5_SetConfig+0x82>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a16      	ldr	r2, [pc, #88]	@ (8003334 <TIM_OC5_SetConfig+0xc8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <TIM_OC5_SetConfig+0x82>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a15      	ldr	r2, [pc, #84]	@ (8003338 <TIM_OC5_SetConfig+0xcc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_OC5_SetConfig+0x82>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a14      	ldr	r2, [pc, #80]	@ (800333c <TIM_OC5_SetConfig+0xd0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d109      	bne.n	8003302 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	621a      	str	r2, [r3, #32]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40013400 	.word	0x40013400
 8003330:	40014000 	.word	0x40014000
 8003334:	40014400 	.word	0x40014400
 8003338:	40014800 	.word	0x40014800
 800333c:	40015000 	.word	0x40015000

08003340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	051b      	lsls	r3, r3, #20
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1a      	ldr	r2, [pc, #104]	@ (8003400 <TIM_OC6_SetConfig+0xc0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <TIM_OC6_SetConfig+0x84>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <TIM_OC6_SetConfig+0xc4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00f      	beq.n	80033c4 <TIM_OC6_SetConfig+0x84>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a18      	ldr	r2, [pc, #96]	@ (8003408 <TIM_OC6_SetConfig+0xc8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_OC6_SetConfig+0x84>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a17      	ldr	r2, [pc, #92]	@ (800340c <TIM_OC6_SetConfig+0xcc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_OC6_SetConfig+0x84>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a16      	ldr	r2, [pc, #88]	@ (8003410 <TIM_OC6_SetConfig+0xd0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_OC6_SetConfig+0x84>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <TIM_OC6_SetConfig+0xd4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d109      	bne.n	80033d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	029b      	lsls	r3, r3, #10
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	621a      	str	r2, [r3, #32]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40013400 	.word	0x40013400
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800
 8003414:	40015000 	.word	0x40015000

08003418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0201 	bic.w	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 030a 	bic.w	r3, r3, #10
 8003454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003476:	b480      	push	{r7}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f023 0210 	bic.w	r2, r3, #16
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	031b      	lsls	r3, r3, #12
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80034ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f043 0307 	orr.w	r3, r3, #7
 80034fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800352a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	021a      	lsls	r2, r3, #8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	431a      	orrs	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4313      	orrs	r3, r2
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2201      	movs	r2, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1a      	ldr	r2, [r3, #32]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	43db      	mvns	r3, r3
 8003572:	401a      	ands	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e074      	b.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a34      	ldr	r2, [pc, #208]	@ (80036ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a33      	ldr	r2, [pc, #204]	@ (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d108      	bne.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80035f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003634:	d01d      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1f      	ldr	r2, [pc, #124]	@ (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d018      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a15      	ldr	r2, [pc, #84]	@ (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a11      	ldr	r2, [pc, #68]	@ (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10c      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	4313      	orrs	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40013400 	.word	0x40013400
 80036b4:	40015000 	.word	0x40015000
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40014000 	.word	0x40014000

080036c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e042      	b.n	8003760 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7fd fac7 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2224      	movs	r2, #36	@ 0x24
 80036f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fc7a 	bl	800400c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f97b 	bl	8003a14 <UART_SetConfig>
 800371e:	4603      	mov	r3, r0
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e01b      	b.n	8003760 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fcf9 	bl	8004150 <UART_CheckIdleState>
 800375e:	4603      	mov	r3, r0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	@ 0x28
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	2b20      	cmp	r3, #32
 8003780:	d17b      	bne.n	800387a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_UART_Transmit+0x26>
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e074      	b.n	800387c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2221      	movs	r2, #33	@ 0x21
 800379e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037a2:	f7fd fb95 	bl	8000ed0 <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	88fa      	ldrh	r2, [r7, #6]
 80037b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c0:	d108      	bne.n	80037d4 <HAL_UART_Transmit+0x6c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	e003      	b.n	80037dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037dc:	e030      	b.n	8003840 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	@ 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fd5b 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e03d      	b.n	800387c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	3302      	adds	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	e007      	b.n	800382e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3301      	adds	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1c8      	bne.n	80037de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2200      	movs	r2, #0
 8003854:	2140      	movs	r1, #64	@ 0x40
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fd24 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e006      	b.n	800387c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e000      	b.n	800387c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800387a:	2302      	movs	r3, #2
  }
}
 800387c:	4618      	mov	r0, r3
 800387e:	3720      	adds	r7, #32
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	@ 0x28
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800389a:	2b20      	cmp	r3, #32
 800389c:	f040 80b5 	bne.w	8003a0a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_UART_Receive+0x28>
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ad      	b.n	8003a0c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2222      	movs	r2, #34	@ 0x22
 80038bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038c6:	f7fd fb03 	bl	8000ed0 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e4:	d10e      	bne.n	8003904 <HAL_UART_Receive+0x80>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <HAL_UART_Receive+0x76>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80038f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80038f8:	e02d      	b.n	8003956 <HAL_UART_Receive+0xd2>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	22ff      	movs	r2, #255	@ 0xff
 80038fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003902:	e028      	b.n	8003956 <HAL_UART_Receive+0xd2>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10d      	bne.n	8003928 <HAL_UART_Receive+0xa4>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <HAL_UART_Receive+0x9a>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	22ff      	movs	r2, #255	@ 0xff
 8003918:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800391c:	e01b      	b.n	8003956 <HAL_UART_Receive+0xd2>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	227f      	movs	r2, #127	@ 0x7f
 8003922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003926:	e016      	b.n	8003956 <HAL_UART_Receive+0xd2>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003930:	d10d      	bne.n	800394e <HAL_UART_Receive+0xca>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <HAL_UART_Receive+0xc0>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	227f      	movs	r2, #127	@ 0x7f
 800393e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003942:	e008      	b.n	8003956 <HAL_UART_Receive+0xd2>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	223f      	movs	r2, #63	@ 0x3f
 8003948:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800394c:	e003      	b.n	8003956 <HAL_UART_Receive+0xd2>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800395c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003966:	d108      	bne.n	800397a <HAL_UART_Receive+0xf6>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d104      	bne.n	800397a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e003      	b.n	8003982 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003982:	e036      	b.n	80039f2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	2120      	movs	r1, #32
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fc88 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e032      	b.n	8003a0c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10c      	bne.n	80039c6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	8a7b      	ldrh	r3, [r7, #18]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	3302      	adds	r3, #2
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	e00c      	b.n	80039e0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	8a7b      	ldrh	r3, [r7, #18]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	4013      	ands	r3, r2
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3301      	adds	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1c2      	bne.n	8003984 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a18:	b08c      	sub	sp, #48	@ 0x30
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4baa      	ldr	r3, [pc, #680]	@ (8003cec <UART_SetConfig+0x2d8>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a9f      	ldr	r2, [pc, #636]	@ (8003cf0 <UART_SetConfig+0x2dc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003a8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	f023 010f 	bic.w	r1, r3, #15
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a90      	ldr	r2, [pc, #576]	@ (8003cf4 <UART_SetConfig+0x2e0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d125      	bne.n	8003b04 <UART_SetConfig+0xf0>
 8003ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf8 <UART_SetConfig+0x2e4>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d81a      	bhi.n	8003afc <UART_SetConfig+0xe8>
 8003ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8003acc <UART_SetConfig+0xb8>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003add 	.word	0x08003add
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af5 	.word	0x08003af5
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae2:	e116      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aea:	e112      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003aec:	2304      	movs	r3, #4
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003af2:	e10e      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003af4:	2308      	movs	r3, #8
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e10a      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003afc:	2310      	movs	r3, #16
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e106      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a7c      	ldr	r2, [pc, #496]	@ (8003cfc <UART_SetConfig+0x2e8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d138      	bne.n	8003b80 <UART_SetConfig+0x16c>
 8003b0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003cf8 <UART_SetConfig+0x2e4>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d82d      	bhi.n	8003b78 <UART_SetConfig+0x164>
 8003b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <UART_SetConfig+0x110>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b59 	.word	0x08003b59
 8003b28:	08003b79 	.word	0x08003b79
 8003b2c:	08003b79 	.word	0x08003b79
 8003b30:	08003b79 	.word	0x08003b79
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003b79 	.word	0x08003b79
 8003b3c:	08003b79 	.word	0x08003b79
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b61 	.word	0x08003b61
 8003b48:	08003b79 	.word	0x08003b79
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003b79 	.word	0x08003b79
 8003b54:	08003b71 	.word	0x08003b71
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b5e:	e0d8      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003b60:	2302      	movs	r3, #2
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b66:	e0d4      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6e:	e0d0      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003b70:	2308      	movs	r3, #8
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b76:	e0cc      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	e0c8      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a5e      	ldr	r2, [pc, #376]	@ (8003d00 <UART_SetConfig+0x2ec>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d125      	bne.n	8003bd6 <UART_SetConfig+0x1c2>
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf8 <UART_SetConfig+0x2e4>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b94:	2b30      	cmp	r3, #48	@ 0x30
 8003b96:	d016      	beq.n	8003bc6 <UART_SetConfig+0x1b2>
 8003b98:	2b30      	cmp	r3, #48	@ 0x30
 8003b9a:	d818      	bhi.n	8003bce <UART_SetConfig+0x1ba>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d00a      	beq.n	8003bb6 <UART_SetConfig+0x1a2>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d814      	bhi.n	8003bce <UART_SetConfig+0x1ba>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <UART_SetConfig+0x19a>
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d008      	beq.n	8003bbe <UART_SetConfig+0x1aa>
 8003bac:	e00f      	b.n	8003bce <UART_SetConfig+0x1ba>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bb4:	e0ad      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bbc:	e0a9      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc4:	e0a5      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bcc:	e0a1      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003bce:	2310      	movs	r3, #16
 8003bd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd4:	e09d      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4a      	ldr	r2, [pc, #296]	@ (8003d04 <UART_SetConfig+0x2f0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d125      	bne.n	8003c2c <UART_SetConfig+0x218>
 8003be0:	4b45      	ldr	r3, [pc, #276]	@ (8003cf8 <UART_SetConfig+0x2e4>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bec:	d016      	beq.n	8003c1c <UART_SetConfig+0x208>
 8003bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bf0:	d818      	bhi.n	8003c24 <UART_SetConfig+0x210>
 8003bf2:	2b80      	cmp	r3, #128	@ 0x80
 8003bf4:	d00a      	beq.n	8003c0c <UART_SetConfig+0x1f8>
 8003bf6:	2b80      	cmp	r3, #128	@ 0x80
 8003bf8:	d814      	bhi.n	8003c24 <UART_SetConfig+0x210>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0x1f0>
 8003bfe:	2b40      	cmp	r3, #64	@ 0x40
 8003c00:	d008      	beq.n	8003c14 <UART_SetConfig+0x200>
 8003c02:	e00f      	b.n	8003c24 <UART_SetConfig+0x210>
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0a:	e082      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c12:	e07e      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c1a:	e07a      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c22:	e076      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c2a:	e072      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a35      	ldr	r2, [pc, #212]	@ (8003d08 <UART_SetConfig+0x2f4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12a      	bne.n	8003c8c <UART_SetConfig+0x278>
 8003c36:	4b30      	ldr	r3, [pc, #192]	@ (8003cf8 <UART_SetConfig+0x2e4>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c44:	d01a      	beq.n	8003c7c <UART_SetConfig+0x268>
 8003c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c4a:	d81b      	bhi.n	8003c84 <UART_SetConfig+0x270>
 8003c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c50:	d00c      	beq.n	8003c6c <UART_SetConfig+0x258>
 8003c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c56:	d815      	bhi.n	8003c84 <UART_SetConfig+0x270>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <UART_SetConfig+0x250>
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c60:	d008      	beq.n	8003c74 <UART_SetConfig+0x260>
 8003c62:	e00f      	b.n	8003c84 <UART_SetConfig+0x270>
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c6a:	e052      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c72:	e04e      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c74:	2304      	movs	r3, #4
 8003c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c7a:	e04a      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c82:	e046      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c84:	2310      	movs	r3, #16
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c8a:	e042      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a17      	ldr	r2, [pc, #92]	@ (8003cf0 <UART_SetConfig+0x2dc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d13a      	bne.n	8003d0c <UART_SetConfig+0x2f8>
 8003c96:	4b18      	ldr	r3, [pc, #96]	@ (8003cf8 <UART_SetConfig+0x2e4>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ca0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ca4:	d01a      	beq.n	8003cdc <UART_SetConfig+0x2c8>
 8003ca6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003caa:	d81b      	bhi.n	8003ce4 <UART_SetConfig+0x2d0>
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb0:	d00c      	beq.n	8003ccc <UART_SetConfig+0x2b8>
 8003cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb6:	d815      	bhi.n	8003ce4 <UART_SetConfig+0x2d0>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <UART_SetConfig+0x2b0>
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc0:	d008      	beq.n	8003cd4 <UART_SetConfig+0x2c0>
 8003cc2:	e00f      	b.n	8003ce4 <UART_SetConfig+0x2d0>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cca:	e022      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cd2:	e01e      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cda:	e01a      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce2:	e016      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cea:	e012      	b.n	8003d12 <UART_SetConfig+0x2fe>
 8003cec:	cfff69f3 	.word	0xcfff69f3
 8003cf0:	40008000 	.word	0x40008000
 8003cf4:	40013800 	.word	0x40013800
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40004400 	.word	0x40004400
 8003d00:	40004800 	.word	0x40004800
 8003d04:	40004c00 	.word	0x40004c00
 8003d08:	40005000 	.word	0x40005000
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4aae      	ldr	r2, [pc, #696]	@ (8003fd0 <UART_SetConfig+0x5bc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	f040 8097 	bne.w	8003e4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d823      	bhi.n	8003d6e <UART_SetConfig+0x35a>
 8003d26:	a201      	add	r2, pc, #4	@ (adr r2, 8003d2c <UART_SetConfig+0x318>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d6f 	.word	0x08003d6f
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d6f 	.word	0x08003d6f
 8003d3c:	08003d5f 	.word	0x08003d5f
 8003d40:	08003d6f 	.word	0x08003d6f
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003d6f 	.word	0x08003d6f
 8003d4c:	08003d67 	.word	0x08003d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7fe f8da 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d56:	e010      	b.n	8003d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d58:	4b9e      	ldr	r3, [pc, #632]	@ (8003fd4 <UART_SetConfig+0x5c0>)
 8003d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d5c:	e00d      	b.n	8003d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5e:	f7fe f865 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8003d62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d64:	e009      	b.n	8003d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d6c:	e005      	b.n	8003d7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8130 	beq.w	8003fe2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	4a94      	ldr	r2, [pc, #592]	@ (8003fd8 <UART_SetConfig+0x5c4>)
 8003d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d305      	bcc.n	8003db2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d903      	bls.n	8003dba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003db8:	e113      	b.n	8003fe2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	60fa      	str	r2, [r7, #12]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	4a84      	ldr	r2, [pc, #528]	@ (8003fd8 <UART_SetConfig+0x5c4>)
 8003dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2200      	movs	r2, #0
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ddc:	f7fc fa1c 	bl	8000218 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	020b      	lsls	r3, r1, #8
 8003df2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003df6:	0202      	lsls	r2, r0, #8
 8003df8:	6979      	ldr	r1, [r7, #20]
 8003dfa:	6849      	ldr	r1, [r1, #4]
 8003dfc:	0849      	lsrs	r1, r1, #1
 8003dfe:	2000      	movs	r0, #0
 8003e00:	460c      	mov	r4, r1
 8003e02:	4605      	mov	r5, r0
 8003e04:	eb12 0804 	adds.w	r8, r2, r4
 8003e08:	eb43 0905 	adc.w	r9, r3, r5
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	469a      	mov	sl, r3
 8003e14:	4693      	mov	fp, r2
 8003e16:	4652      	mov	r2, sl
 8003e18:	465b      	mov	r3, fp
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	f7fc f9fb 	bl	8000218 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4613      	mov	r3, r2
 8003e28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e30:	d308      	bcc.n	8003e44 <UART_SetConfig+0x430>
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e38:	d204      	bcs.n	8003e44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	e0ce      	b.n	8003fe2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e4a:	e0ca      	b.n	8003fe2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e54:	d166      	bne.n	8003f24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003e56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d827      	bhi.n	8003eae <UART_SetConfig+0x49a>
 8003e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <UART_SetConfig+0x450>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08003eaf 	.word	0x08003eaf
 8003e74:	08003e9f 	.word	0x08003e9f
 8003e78:	08003eaf 	.word	0x08003eaf
 8003e7c:	08003eaf 	.word	0x08003eaf
 8003e80:	08003eaf 	.word	0x08003eaf
 8003e84:	08003ea7 	.word	0x08003ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e88:	f7fe f83e 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003e8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e8e:	e014      	b.n	8003eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e90:	f7fe f850 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8003e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e96:	e010      	b.n	8003eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e98:	4b4e      	ldr	r3, [pc, #312]	@ (8003fd4 <UART_SetConfig+0x5c0>)
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e9c:	e00d      	b.n	8003eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9e:	f7fd ffc5 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8003ea2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ea4:	e009      	b.n	8003eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003eac:	e005      	b.n	8003eba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003eb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8090 	beq.w	8003fe2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	4a44      	ldr	r2, [pc, #272]	@ (8003fd8 <UART_SetConfig+0x5c4>)
 8003ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed4:	005a      	lsls	r2, r3, #1
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	441a      	add	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d916      	bls.n	8003f1c <UART_SetConfig+0x508>
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef4:	d212      	bcs.n	8003f1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f023 030f 	bic.w	r3, r3, #15
 8003efe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	8bfb      	ldrh	r3, [r7, #30]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	8bfa      	ldrh	r2, [r7, #30]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	e062      	b.n	8003fe2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f22:	e05e      	b.n	8003fe2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d828      	bhi.n	8003f7e <UART_SetConfig+0x56a>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <UART_SetConfig+0x520>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fd ffd6 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f5e:	e014      	b.n	8003f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fd ffe8 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8003f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f66:	e010      	b.n	8003f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <UART_SetConfig+0x5c0>)
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f6c:	e00d      	b.n	8003f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fd ff5d 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8003f72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f74:	e009      	b.n	8003f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f7c:	e005      	b.n	8003f8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f88:	bf00      	nop
    }

    if (pclk != 0U)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d028      	beq.n	8003fe2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	4a10      	ldr	r2, [pc, #64]	@ (8003fd8 <UART_SetConfig+0x5c4>)
 8003f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	441a      	add	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d910      	bls.n	8003fdc <UART_SetConfig+0x5c8>
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc0:	d20c      	bcs.n	8003fdc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e009      	b.n	8003fe2 <UART_SetConfig+0x5ce>
 8003fce:	bf00      	nop
 8003fd0:	40008000 	.word	0x40008000
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	080046d8 	.word	0x080046d8
      }
      else
      {
        ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ffe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004002:	4618      	mov	r0, r3
 8004004:	3730      	adds	r7, #48	@ 0x30
 8004006:	46bd      	mov	sp, r7
 8004008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800400c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01a      	beq.n	8004122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800410a:	d10a      	bne.n	8004122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b098      	sub	sp, #96	@ 0x60
 8004154:	af02      	add	r7, sp, #8
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004160:	f7fc feb6 	bl	8000ed0 <HAL_GetTick>
 8004164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b08      	cmp	r3, #8
 8004172:	d12f      	bne.n	80041d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417c:	2200      	movs	r2, #0
 800417e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f88e 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d022      	beq.n	80041d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800419c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e6      	bne.n	800418e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e063      	b.n	800429c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d149      	bne.n	8004276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ea:	2200      	movs	r2, #0
 80041ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f857 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d03c      	beq.n	8004276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	623b      	str	r3, [r7, #32]
   return(result);
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800421a:	633b      	str	r3, [r7, #48]	@ 0x30
 800421c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e6      	bne.n	80041fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	60fb      	str	r3, [r7, #12]
   return(result);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3308      	adds	r3, #8
 800424c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800424e:	61fa      	str	r2, [r7, #28]
 8004250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	69b9      	ldr	r1, [r7, #24]
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	617b      	str	r3, [r7, #20]
   return(result);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e012      	b.n	800429c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3758      	adds	r7, #88	@ 0x58
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b4:	e04f      	b.n	8004356 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042bc:	d04b      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fc fe07 	bl	8000ed0 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e04e      	b.n	8004376 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d037      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b80      	cmp	r3, #128	@ 0x80
 80042ea:	d034      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b40      	cmp	r3, #64	@ 0x40
 80042f0:	d031      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d110      	bne.n	8004322 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2208      	movs	r2, #8
 8004306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f838 	bl	800437e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2208      	movs	r2, #8
 8004312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e029      	b.n	8004376 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800432c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004330:	d111      	bne.n	8004356 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800433a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f81e 	bl	800437e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e00f      	b.n	8004376 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4013      	ands	r3, r2
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	429a      	cmp	r2, r3
 8004372:	d0a0      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800437e:	b480      	push	{r7}
 8004380:	b095      	sub	sp, #84	@ 0x54
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800439a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e6      	bne.n	8004386 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e3      	bne.n	80043b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d118      	bne.n	800442a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	60bb      	str	r3, [r7, #8]
   return(result);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0310 	bic.w	r3, r3, #16
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	613b      	str	r3, [r7, #16]
   return(result);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e6      	bne.n	80043f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800443e:	bf00      	nop
 8004440:	3754      	adds	r7, #84	@ 0x54
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_UARTEx_DisableFifoMode+0x16>
 800445c:	2302      	movs	r3, #2
 800445e:	e027      	b.n	80044b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	@ 0x24
 800446c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800448e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e02d      	b.n	8004530 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	@ 0x24
 80044e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f84f 	bl	80045b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800454c:	2302      	movs	r3, #2
 800454e:	e02d      	b.n	80045ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	@ 0x24
 800455c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f811 	bl	80045b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045d4:	e031      	b.n	800463a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045d6:	2308      	movs	r3, #8
 80045d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045da:	2308      	movs	r3, #8
 80045dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	0e5b      	lsrs	r3, r3, #25
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	0f5b      	lsrs	r3, r3, #29
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045fe:	7bbb      	ldrb	r3, [r7, #14]
 8004600:	7b3a      	ldrb	r2, [r7, #12]
 8004602:	4911      	ldr	r1, [pc, #68]	@ (8004648 <UARTEx_SetNbDataToProcess+0x94>)
 8004604:	5c8a      	ldrb	r2, [r1, r2]
 8004606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800460a:	7b3a      	ldrb	r2, [r7, #12]
 800460c:	490f      	ldr	r1, [pc, #60]	@ (800464c <UARTEx_SetNbDataToProcess+0x98>)
 800460e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004610:	fb93 f3f2 	sdiv	r3, r3, r2
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	7b7a      	ldrb	r2, [r7, #13]
 8004620:	4909      	ldr	r1, [pc, #36]	@ (8004648 <UARTEx_SetNbDataToProcess+0x94>)
 8004622:	5c8a      	ldrb	r2, [r1, r2]
 8004624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004628:	7b7a      	ldrb	r2, [r7, #13]
 800462a:	4908      	ldr	r1, [pc, #32]	@ (800464c <UARTEx_SetNbDataToProcess+0x98>)
 800462c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800462e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	080046f0 	.word	0x080046f0
 800464c:	080046f8 	.word	0x080046f8

08004650 <memset>:
 8004650:	4402      	add	r2, r0
 8004652:	4603      	mov	r3, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4d0d      	ldr	r5, [pc, #52]	@ (8004698 <__libc_init_array+0x38>)
 8004664:	4c0d      	ldr	r4, [pc, #52]	@ (800469c <__libc_init_array+0x3c>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	2600      	movs	r6, #0
 800466c:	42a6      	cmp	r6, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	4d0b      	ldr	r5, [pc, #44]	@ (80046a0 <__libc_init_array+0x40>)
 8004672:	4c0c      	ldr	r4, [pc, #48]	@ (80046a4 <__libc_init_array+0x44>)
 8004674:	f000 f818 	bl	80046a8 <_init>
 8004678:	1b64      	subs	r4, r4, r5
 800467a:	10a4      	asrs	r4, r4, #2
 800467c:	2600      	movs	r6, #0
 800467e:	42a6      	cmp	r6, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f855 3b04 	ldr.w	r3, [r5], #4
 8004688:	4798      	blx	r3
 800468a:	3601      	adds	r6, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004692:	4798      	blx	r3
 8004694:	3601      	adds	r6, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	08004708 	.word	0x08004708
 800469c:	08004708 	.word	0x08004708
 80046a0:	08004708 	.word	0x08004708
 80046a4:	0800470c 	.word	0x0800470c

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
