
jason_fork_lift_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005eac  08005eac  00006eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  00007094  2**0
                  CONTENTS
  4 .ARM          00000008  08005eec  08005eec  00006eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef4  08005ef4  00007094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00006ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08005efc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000094  08005f90  00007094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08005f90  000073b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ae5  00000000  00000000  000070c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b03  00000000  00000000  0001aba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d30  00000000  00000000  0001e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021912  00000000  00000000  0001f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015658  00000000  00000000  00040de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d979b  00000000  00000000  0005643a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fbd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  0012fc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00134408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000094 	.word	0x20000094
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e94 	.word	0x08005e94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000098 	.word	0x20000098
 8000214:	08005e94 	.word	0x08005e94

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	0000      	movs	r0, r0
	...

08000d98 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da8:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 8000daa:	f001 fb81 	bl	80024b0 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	f240 8095 	bls.w	8000eee <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d102      	bne.n	8000dd4 <update_encoder+0x3c>
    num_pulse = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e035      	b.n	8000e40 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dd18      	ble.n	8000e10 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d10a      	bne.n	8000e04 <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6892      	ldr	r2, [r2, #8]
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e01d      	b.n	8000e40 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e017      	b.n	8000e40 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	2b10      	cmp	r3, #16
 8000e1e:	d105      	bne.n	8000e2c <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6892      	ldr	r2, [r2, #8]
 8000e38:	1a9a      	subs	r2, r3, r2
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	8a9b      	ldrh	r3, [r3, #20]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e5a:	ee16 0a90 	vmov	r0, s13
 8000e5e:	f7ff fb3f 	bl	80004e0 <__aeabi_f2d>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	f7ff f9dd 	bl	8000224 <__adddf3>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	a322      	add	r3, pc, #136	@ (adr r3, 8000efc <update_encoder+0x164>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fb8a 	bl	8000590 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fdbe 	bl	8000a04 <__aeabi_d2f>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	ed93 7a00 	vldr	s14, [r3]
 8000e98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8000ea6:	68b8      	ldr	r0, [r7, #8]
 8000ea8:	f7ff fb1a 	bl	80004e0 <__aeabi_f2d>
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <update_encoder+0x160>)
 8000eb2:	f7ff fb6d 	bl	8000590 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4614      	mov	r4, r2
 8000ebc:	461d      	mov	r5, r3
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff faec 	bl	800049c <__aeabi_ui2d>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4620      	mov	r0, r4
 8000eca:	4629      	mov	r1, r5
 8000ecc:	f7ff fc8a 	bl	80007e4 <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fd94 	bl	8000a04 <__aeabi_d2f>
 8000edc:	4602      	mov	r2, r0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 8000ee2:	f001 fae5 	bl	80024b0 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	e000      	b.n	8000ef0 <update_encoder+0x158>
    return;
 8000eee:	bf00      	nop
}
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	408f4000 	.word	0x408f4000
 8000efc:	54442d18 	.word	0x54442d18
 8000f00:	400921fb 	.word	0x400921fb

08000f04 <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b095      	sub	sp, #84	@ 0x54
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d107      	bne.n	8000f22 <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 8000f12:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	e030      	b.n	8000f84 <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 8000f22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f34:	e00d      	b.n	8000f52 <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 8000f36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	461a      	mov	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	4413      	add	r3, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff26 	bl	8000d98 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f4e:	3301      	adds	r3, #1
 8000f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	ddee      	ble.n	8000f36 <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3318      	adds	r3, #24
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3330      	adds	r3, #48	@ 0x30
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3348      	adds	r3, #72	@ 0x48
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 8000f76:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f84:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000f86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f8c:	ee06 0a10 	vmov	s12, r0
 8000f90:	ee06 1a90 	vmov	s13, r1
 8000f94:	ee07 2a10 	vmov	s14, r2
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb0 0a46 	vmov.f32	s0, s12
 8000fa0:	eef0 0a66 	vmov.f32	s1, s13
 8000fa4:	eeb0 1a47 	vmov.f32	s2, s14
 8000fa8:	eef0 1a67 	vmov.f32	s3, s15
 8000fac:	3754      	adds	r7, #84	@ 0x54
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
	...

08000fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fca:	4b50      	ldr	r3, [pc, #320]	@ (800110c <MX_GPIO_Init+0x158>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	4a4f      	ldr	r2, [pc, #316]	@ (800110c <MX_GPIO_Init+0x158>)
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800110c <MX_GPIO_Init+0x158>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800110c <MX_GPIO_Init+0x158>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a49      	ldr	r2, [pc, #292]	@ (800110c <MX_GPIO_Init+0x158>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b47      	ldr	r3, [pc, #284]	@ (800110c <MX_GPIO_Init+0x158>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffa:	4b44      	ldr	r3, [pc, #272]	@ (800110c <MX_GPIO_Init+0x158>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a43      	ldr	r2, [pc, #268]	@ (800110c <MX_GPIO_Init+0x158>)
 8001000:	f043 0320 	orr.w	r3, r3, #32
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b41      	ldr	r3, [pc, #260]	@ (800110c <MX_GPIO_Init+0x158>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0320 	and.w	r3, r3, #32
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b3e      	ldr	r3, [pc, #248]	@ (800110c <MX_GPIO_Init+0x158>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a3d      	ldr	r2, [pc, #244]	@ (800110c <MX_GPIO_Init+0x158>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b3b      	ldr	r3, [pc, #236]	@ (800110c <MX_GPIO_Init+0x158>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b38      	ldr	r3, [pc, #224]	@ (800110c <MX_GPIO_Init+0x158>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a37      	ldr	r2, [pc, #220]	@ (800110c <MX_GPIO_Init+0x158>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b35      	ldr	r3, [pc, #212]	@ (800110c <MX_GPIO_Init+0x158>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	4832      	ldr	r0, [pc, #200]	@ (8001110 <MX_GPIO_Init+0x15c>)
 8001048:	f001 fcc6 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8001052:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001056:	f001 fcbf 	bl	80029d8 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8001060:	482c      	ldr	r0, [pc, #176]	@ (8001114 <MX_GPIO_Init+0x160>)
 8001062:	f001 fcb9 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800106c:	482a      	ldr	r0, [pc, #168]	@ (8001118 <MX_GPIO_Init+0x164>)
 800106e:	f001 fcb3 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 8001072:	2308      	movs	r3, #8
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4821      	ldr	r0, [pc, #132]	@ (8001110 <MX_GPIO_Init+0x15c>)
 800108a:	f001 fb23 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 800108e:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8001092:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010aa:	f001 fb13 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 80010ae:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4813      	ldr	r0, [pc, #76]	@ (8001114 <MX_GPIO_Init+0x160>)
 80010c8:	f001 fb04 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 80010cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <MX_GPIO_Init+0x164>)
 80010e6:	f001 faf5 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ea:	2340      	movs	r3, #64	@ 0x40
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_GPIO_Init+0x164>)
 8001100:	f001 fae8 	bl	80026d4 <HAL_GPIO_Init>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	@ 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000
 8001110:	48000800 	.word	0x48000800
 8001114:	48001000 	.word	0x48001000
 8001118:	48000c00 	.word	0x48000c00

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001120:	f001 f961 	bl	80023e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f89c 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f7ff ff44 	bl	8000fb4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800112c:	f000 fc38 	bl	80019a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001130:	f000 fd12 	bl	8001b58 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001134:	f000 fd92 	bl	8001c5c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001138:	f000 fde6 	bl	8001d08 <MX_TIM5_Init>
  MX_TIM8_Init();
 800113c:	f000 fe3a 	bl	8001db4 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001140:	f000 fc88 	bl	8001a54 <MX_TIM2_Init>
  MX_UART4_Init();
 8001144:	f000 fff6 	bl	8002134 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001148:	f001 f840 	bl	80021cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800114c:	2100      	movs	r1, #0
 800114e:	4838      	ldr	r0, [pc, #224]	@ (8001230 <main+0x114>)
 8001150:	f002 fdbc 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001154:	210c      	movs	r1, #12
 8001156:	4836      	ldr	r0, [pc, #216]	@ (8001230 <main+0x114>)
 8001158:	f002 fdb8 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	4835      	ldr	r0, [pc, #212]	@ (8001234 <main+0x118>)
 8001160:	f002 fdb4 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001164:	2104      	movs	r1, #4
 8001166:	4833      	ldr	r0, [pc, #204]	@ (8001234 <main+0x118>)
 8001168:	f002 fdb0 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 800116c:	4832      	ldr	r0, [pc, #200]	@ (8001238 <main+0x11c>)
 800116e:	f002 fcd3 	bl	8003b18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001172:	213c      	movs	r1, #60	@ 0x3c
 8001174:	4830      	ldr	r0, [pc, #192]	@ (8001238 <main+0x11c>)
 8001176:	f002 ff61 	bl	800403c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800117a:	4830      	ldr	r0, [pc, #192]	@ (800123c <main+0x120>)
 800117c:	f002 fccc 	bl	8003b18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001180:	213c      	movs	r1, #60	@ 0x3c
 8001182:	482e      	ldr	r0, [pc, #184]	@ (800123c <main+0x120>)
 8001184:	f002 ff5a 	bl	800403c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001188:	482d      	ldr	r0, [pc, #180]	@ (8001240 <main+0x124>)
 800118a:	f002 fcc5 	bl	8003b18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800118e:	213c      	movs	r1, #60	@ 0x3c
 8001190:	482b      	ldr	r0, [pc, #172]	@ (8001240 <main+0x124>)
 8001192:	f002 ff53 	bl	800403c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8001196:	482b      	ldr	r0, [pc, #172]	@ (8001244 <main+0x128>)
 8001198:	f002 fcbe 	bl	8003b18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800119c:	213c      	movs	r1, #60	@ 0x3c
 800119e:	4829      	ldr	r0, [pc, #164]	@ (8001244 <main+0x128>)
 80011a0:	f002 ff4c 	bl	800403c <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2108      	movs	r1, #8
 80011a8:	4827      	ldr	r0, [pc, #156]	@ (8001248 <main+0x12c>)
 80011aa:	f001 fc15 	bl	80029d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b4:	4825      	ldr	r0, [pc, #148]	@ (800124c <main+0x130>)
 80011b6:	f001 fc0f 	bl	80029d8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011c0:	4823      	ldr	r0, [pc, #140]	@ (8001250 <main+0x134>)
 80011c2:	f001 fc09 	bl	80029d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4820      	ldr	r0, [pc, #128]	@ (8001250 <main+0x134>)
 80011ce:	f001 fc03 	bl	80029d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011d8:	481d      	ldr	r0, [pc, #116]	@ (8001250 <main+0x134>)
 80011da:	f001 fbfd 	bl	80029d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	481b      	ldr	r0, [pc, #108]	@ (8001250 <main+0x134>)
 80011e4:	f001 fbf8 	bl	80029d8 <HAL_GPIO_WritePin>

  servo_reset_all();
 80011e8:	f000 fb52 	bl	8001890 <servo_reset_all>
  HAL_Delay(1000);
 80011ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011f0:	f001 f96a 	bl	80024c8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f001 f967 	bl	80024c8 <HAL_Delay>
#if (TEST == 0)

#else
    wheels_control(test_target_pwm);
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <main+0x138>)
 80011fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fe:	f000 f9bd 	bl	800157c <wheels_control>
    test_wheel_vel = read_current_velocity(encoders);
 8001202:	4815      	ldr	r0, [pc, #84]	@ (8001258 <main+0x13c>)
 8001204:	f7ff fe7e 	bl	8000f04 <read_current_velocity>
 8001208:	eeb0 6a40 	vmov.f32	s12, s0
 800120c:	eef0 6a60 	vmov.f32	s13, s1
 8001210:	eeb0 7a41 	vmov.f32	s14, s2
 8001214:	eef0 7a61 	vmov.f32	s15, s3
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <main+0x140>)
 800121a:	ed83 6a00 	vstr	s12, [r3]
 800121e:	edc3 6a01 	vstr	s13, [r3, #4]
 8001222:	ed83 7a02 	vstr	s14, [r3, #8]
 8001226:	edc3 7a03 	vstr	s15, [r3, #12]
    HAL_Delay(1);
 800122a:	bf00      	nop
 800122c:	e7e2      	b.n	80011f4 <main+0xd8>
 800122e:	bf00      	nop
 8001230:	20000158 	.word	0x20000158
 8001234:	2000010c 	.word	0x2000010c
 8001238:	200000c0 	.word	0x200000c0
 800123c:	200001a4 	.word	0x200001a4
 8001240:	200001f0 	.word	0x200001f0
 8001244:	2000023c 	.word	0x2000023c
 8001248:	48000800 	.word	0x48000800
 800124c:	48000c00 	.word	0x48000c00
 8001250:	48001000 	.word	0x48001000
 8001254:	20000060 	.word	0x20000060
 8001258:	20000000 	.word	0x20000000
 800125c:	200000b0 	.word	0x200000b0

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	@ 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	2238      	movs	r2, #56	@ 0x38
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fde4 	bl	8005e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001282:	2000      	movs	r0, #0
 8001284:	f001 fbc0 	bl	8002a08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001290:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	2303      	movs	r3, #3
 8001298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800129e:	2355      	movs	r3, #85	@ 0x55
 80012a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	f107 0318 	add.w	r3, r7, #24
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fc5c 	bl	8002b70 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80012be:	f000 f818 	bl	80012f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2303      	movs	r3, #3
 80012c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2104      	movs	r1, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 ff5a 	bl	8003194 <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012e6:	f000 f804 	bl	80012f2 <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3750      	adds	r7, #80	@ 0x50
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f6:	b672      	cpsid	i
}
 80012f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80012fa:	bf00      	nop
 80012fc:	e7fd      	b.n	80012fa <Error_Handler+0x8>
	...

08001300 <wheel_control>:
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
}

void wheel_control(Wheel wheel, int speed) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8001312:	4293      	cmp	r3, r2
 8001314:	dd03      	ble.n	800131e <wheel_control+0x1e>
    speed = 16800;
 8001316:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	e005      	b.n	800132a <wheel_control+0x2a>
  else if (speed < -16800)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	4a94      	ldr	r2, [pc, #592]	@ (8001574 <wheel_control+0x274>)
 8001322:	4293      	cmp	r3, r2
 8001324:	da01      	bge.n	800132a <wheel_control+0x2a>
    speed = -16800;
 8001326:	4b93      	ldr	r3, [pc, #588]	@ (8001574 <wheel_control+0x274>)
 8001328:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b03      	cmp	r3, #3
 800132e:	f200 80e9 	bhi.w	8001504 <wheel_control+0x204>
 8001332:	a201      	add	r2, pc, #4	@ (adr r2, 8001338 <wheel_control+0x38>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	08001349 	.word	0x08001349
 800133c:	080013b1 	.word	0x080013b1
 8001340:	08001425 	.word	0x08001425
 8001344:	0800148f 	.word	0x0800148f
    case FRONT_LEFT:
      if (speed > 0) {
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd0c      	ble.n	8001368 <wheel_control+0x68>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2120      	movs	r1, #32
 8001352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001356:	f001 fb3f 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2110      	movs	r1, #16
 800135e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001362:	f001 fb39 	bl	80029d8 <HAL_GPIO_WritePin>
 8001366:	e01b      	b.n	80013a0 <wheel_control+0xa0>
      } else if (speed < 0) {
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	da0c      	bge.n	8001388 <wheel_control+0x88>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	2120      	movs	r1, #32
 8001372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001376:	f001 fb2f 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2110      	movs	r1, #16
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f001 fb29 	bl	80029d8 <HAL_GPIO_WritePin>
 8001386:	e00b      	b.n	80013a0 <wheel_control+0xa0>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2120      	movs	r1, #32
 800138c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001390:	f001 fb22 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2110      	movs	r1, #16
 8001398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139c:	f001 fb1c 	bl	80029d8 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013aa:	4b73      	ldr	r3, [pc, #460]	@ (8001578 <wheel_control+0x278>)
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80013ae:	e0dd      	b.n	800156c <wheel_control+0x26c>
    case FRONT_RIGHT:
      if (speed < 0) {
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da0e      	bge.n	80013d4 <wheel_control+0xd4>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c0:	f001 fb0a 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ce:	f001 fb03 	bl	80029d8 <HAL_GPIO_WritePin>
 80013d2:	e01f      	b.n	8001414 <wheel_control+0x114>
      } else if (speed > 0) {
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dd0e      	ble.n	80013f8 <wheel_control+0xf8>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e4:	f001 faf8 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f2:	f001 faf1 	bl	80029d8 <HAL_GPIO_WritePin>
 80013f6:	e00d      	b.n	8001414 <wheel_control+0x114>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f001 fae9 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800140c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001410:	f001 fae2 	bl	80029d8 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800141a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800141e:	4b56      	ldr	r3, [pc, #344]	@ (8001578 <wheel_control+0x278>)
 8001420:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001422:	e0a3      	b.n	800156c <wheel_control+0x26c>
    case REAR_LEFT:
      if (speed > 0) {
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	dd0c      	ble.n	8001444 <wheel_control+0x144>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2140      	movs	r1, #64	@ 0x40
 800142e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001432:	f001 fad1 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2180      	movs	r1, #128	@ 0x80
 800143a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143e:	f001 facb 	bl	80029d8 <HAL_GPIO_WritePin>
 8001442:	e01b      	b.n	800147c <wheel_control+0x17c>
      } else if (speed < 0) {
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	da0c      	bge.n	8001464 <wheel_control+0x164>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2140      	movs	r1, #64	@ 0x40
 800144e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001452:	f001 fac1 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145e:	f001 fabb 	bl	80029d8 <HAL_GPIO_WritePin>
 8001462:	e00b      	b.n	800147c <wheel_control+0x17c>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2140      	movs	r1, #64	@ 0x40
 8001468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146c:	f001 fab4 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001478:	f001 faae 	bl	80029d8 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001482:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001486:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 800148c:	e06e      	b.n	800156c <wheel_control+0x26c>
    case REAR_RIGHT:
      if (speed < 0) {
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da0e      	bge.n	80014b2 <wheel_control+0x1b2>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800149a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149e:	f001 fa9b 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ac:	f001 fa94 	bl	80029d8 <HAL_GPIO_WritePin>
 80014b0:	e01f      	b.n	80014f2 <wheel_control+0x1f2>
      } else if (speed > 0) {
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd0e      	ble.n	80014d6 <wheel_control+0x1d6>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c2:	f001 fa89 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d0:	f001 fa82 	bl	80029d8 <HAL_GPIO_WritePin>
 80014d4:	e00d      	b.n	80014f2 <wheel_control+0x1f2>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e0:	f001 fa7a 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ee:	f001 fa73 	bl	80029d8 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001500:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8001502:	e033      	b.n	800156c <wheel_control+0x26c>
    default:
      if (speed > 0) {
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	dd0c      	ble.n	8001524 <wheel_control+0x224>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2120      	movs	r1, #32
 800150e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001512:	f001 fa61 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	2110      	movs	r1, #16
 800151a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151e:	f001 fa5b 	bl	80029d8 <HAL_GPIO_WritePin>
 8001522:	e01b      	b.n	800155c <wheel_control+0x25c>
      } else if (speed < 0) {
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	da0c      	bge.n	8001544 <wheel_control+0x244>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2120      	movs	r1, #32
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f001 fa51 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2110      	movs	r1, #16
 800153a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153e:	f001 fa4b 	bl	80029d8 <HAL_GPIO_WritePin>
 8001542:	e00b      	b.n	800155c <wheel_control+0x25c>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2120      	movs	r1, #32
 8001548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154c:	f001 fa44 	bl	80029d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2110      	movs	r1, #16
 8001554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001558:	f001 fa3e 	bl	80029d8 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001562:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001566:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <wheel_control+0x278>)
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800156a:	bf00      	nop
  }
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	ffffbe60 	.word	0xffffbe60
 8001578:	40000400 	.word	0x40000400

0800157c <wheels_control>:

void wheels_control(WheelPWM pwm) {
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	463c      	mov	r4, r7
 8001584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff feb7 	bl	8001300 <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4619      	mov	r1, r3
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff feb2 	bl	8001300 <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4619      	mov	r1, r3
 80015a0:	2002      	movs	r0, #2
 80015a2:	f7ff fead 	bl	8001300 <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	2003      	movs	r0, #3
 80015ac:	f7ff fea8 	bl	8001300 <wheel_control>
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}

080015b8 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 80015c8:	2355      	movs	r3, #85	@ 0x55
 80015ca:	737b      	strb	r3, [r7, #13]
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
 80015ce:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 80015d0:	2308      	movs	r3, #8
 80015d2:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 80015d4:	2303      	movs	r3, #3
 80015d6:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 80015d8:	2301      	movs	r3, #1
 80015da:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 80015dc:	883b      	ldrh	r3, [r7, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 80015e2:	883b      	ldrh	r3, [r7, #0]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 8001602:	f107 010c 	add.w	r1, r7, #12
 8001606:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800160a:	220a      	movs	r2, #10
 800160c:	489c      	ldr	r0, [pc, #624]	@ (8001880 <servo_move+0x2c8>)
 800160e:	f003 fd69 	bl	80050e4 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	2b03      	cmp	r3, #3
 8001620:	f200 810c 	bhi.w	800183c <servo_move+0x284>
 8001624:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <servo_move+0x74>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	080016bd 	.word	0x080016bd
 8001634:	0800173d 	.word	0x0800173d
 8001638:	080017bd 	.word	0x080017bd
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001642:	d91c      	bls.n	800167e <servo_move+0xc6>
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff36 	bl	80004bc <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b8b      	ldr	r3, [pc, #556]	@ (8001884 <servo_move+0x2cc>)
 8001656:	f7fe ff9b 	bl	8000590 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	a379      	add	r3, pc, #484	@ (adr r3, 8001848 <servo_move+0x290>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7ff f8bc 	bl	80007e4 <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff f99e 	bl	80009b4 <__aeabi_d2iz>
 8001678:	4603      	mov	r3, r0
 800167a:	b21b      	sxth	r3, r3
 800167c:	e01b      	b.n	80016b6 <servo_move+0xfe>
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff19 	bl	80004bc <__aeabi_i2d>
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b7e      	ldr	r3, [pc, #504]	@ (8001888 <servo_move+0x2d0>)
 8001690:	f7fe ff7e 	bl	8000590 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	a36c      	add	r3, pc, #432	@ (adr r3, 8001850 <servo_move+0x298>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7ff f89f 	bl	80007e4 <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f981 	bl	80009b4 <__aeabi_d2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	8093      	strh	r3, [r2, #4]
      break;
 80016ba:	e0c0      	b.n	800183e <servo_move+0x286>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016c2:	d91c      	bls.n	80016fe <servo_move+0x146>
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fef6 	bl	80004bc <__aeabi_i2d>
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001884 <servo_move+0x2cc>)
 80016d6:	f7fe ff5b 	bl	8000590 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	a35d      	add	r3, pc, #372	@ (adr r3, 8001858 <servo_move+0x2a0>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7ff f87c 	bl	80007e4 <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f95e 	bl	80009b4 <__aeabi_d2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	e01b      	b.n	8001736 <servo_move+0x17e>
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fed9 	bl	80004bc <__aeabi_i2d>
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b5e      	ldr	r3, [pc, #376]	@ (8001888 <servo_move+0x2d0>)
 8001710:	f7fe ff3e 	bl	8000590 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	a350      	add	r3, pc, #320	@ (adr r3, 8001860 <servo_move+0x2a8>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7ff f85f 	bl	80007e4 <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f941 	bl	80009b4 <__aeabi_d2iz>
 8001732:	4603      	mov	r3, r0
 8001734:	b21b      	sxth	r3, r3
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	8093      	strh	r3, [r2, #4]
      break;
 800173a:	e080      	b.n	800183e <servo_move+0x286>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001742:	d91c      	bls.n	800177e <servo_move+0x1c6>
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe feb6 	bl	80004bc <__aeabi_i2d>
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b4b      	ldr	r3, [pc, #300]	@ (8001884 <servo_move+0x2cc>)
 8001756:	f7fe ff1b 	bl	8000590 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	a341      	add	r3, pc, #260	@ (adr r3, 8001868 <servo_move+0x2b0>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f83c 	bl	80007e4 <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f91e 	bl	80009b4 <__aeabi_d2iz>
 8001778:	4603      	mov	r3, r0
 800177a:	b21b      	sxth	r3, r3
 800177c:	e01b      	b.n	80017b6 <servo_move+0x1fe>
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe99 	bl	80004bc <__aeabi_i2d>
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b3e      	ldr	r3, [pc, #248]	@ (8001888 <servo_move+0x2d0>)
 8001790:	f7fe fefe 	bl	8000590 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	a334      	add	r3, pc, #208	@ (adr r3, 8001870 <servo_move+0x2b8>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7ff f81f 	bl	80007e4 <__aeabi_ddiv>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f901 	bl	80009b4 <__aeabi_d2iz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	8093      	strh	r3, [r2, #4]
      break;
 80017ba:	e040      	b.n	800183e <servo_move+0x286>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017c2:	d91c      	bls.n	80017fe <servo_move+0x246>
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe76 	bl	80004bc <__aeabi_i2d>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <servo_move+0x2cc>)
 80017d6:	f7fe fedb 	bl	8000590 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <servo_move+0x2d4>)
 80017e8:	f7fe fffc 	bl	80007e4 <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f8de 	bl	80009b4 <__aeabi_d2iz>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	e01b      	b.n	8001836 <servo_move+0x27e>
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe59 	bl	80004bc <__aeabi_i2d>
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b1e      	ldr	r3, [pc, #120]	@ (8001888 <servo_move+0x2d0>)
 8001810:	f7fe febe 	bl	8000590 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	a316      	add	r3, pc, #88	@ (adr r3, 8001878 <servo_move+0x2c0>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe ffdf 	bl	80007e4 <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f8c1 	bl	80009b4 <__aeabi_d2iz>
 8001832:	4603      	mov	r3, r0
 8001834:	b21b      	sxth	r3, r3
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	8093      	strh	r3, [r2, #4]
      break;
 800183a:	e000      	b.n	800183e <servo_move+0x286>
    default:
      break;
 800183c:	bf00      	nop
  }
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	00000000 	.word	0x00000000
 800184c:	40781000 	.word	0x40781000
 8001850:	00000000 	.word	0x00000000
 8001854:	c076e000 	.word	0xc076e000
 8001858:	00000000 	.word	0x00000000
 800185c:	4077a000 	.word	0x4077a000
 8001860:	00000000 	.word	0x00000000
 8001864:	c0777000 	.word	0xc0777000
 8001868:	00000000 	.word	0x00000000
 800186c:	40777000 	.word	0x40777000
 8001870:	00000000 	.word	0x00000000
 8001874:	c0772000 	.word	0xc0772000
 8001878:	00000000 	.word	0x00000000
 800187c:	c0775000 	.word	0xc0775000
 8001880:	20000288 	.word	0x20000288
 8001884:	40568000 	.word	0x40568000
 8001888:	c0568000 	.word	0xc0568000
 800188c:	40778000 	.word	0x40778000

08001890 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  for (int i = 0; i < 4; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	e010      	b.n	80018be <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <servo_reset_all+0x40>)
 80018a8:	4413      	add	r3, r2
 80018aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018ae:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fe80 	bl	80015b8 <servo_move>
  for (int i = 0; i < 4; i++)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	ddeb      	ble.n	800189c <servo_reset_all+0xc>
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000070 	.word	0x20000070

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_MspInit+0x44>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018de:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <HAL_MspInit+0x44>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_MspInit+0x44>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x44>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x44>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x44>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800190a:	f001 f921 	bl	8002b50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <NMI_Handler+0x4>

08001924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <MemManage_Handler+0x4>

08001934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <UsageFault_Handler+0x4>

08001944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001972:	f000 fd8b 	bl	800248c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	@ 0x30
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2224      	movs	r2, #36	@ 0x24
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 fa44 	bl	8005e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019be:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <MX_TIM1_Init+0xac>)
 80019c0:	4a23      	ldr	r2, [pc, #140]	@ (8001a50 <MX_TIM1_Init+0xb0>)
 80019c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019c4:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <MX_TIM1_Init+0xac>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <MX_TIM1_Init+0xac>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <MX_TIM1_Init+0xac>)
 80019d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <MX_TIM1_Init+0xac>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019de:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <MX_TIM1_Init+0xac>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <MX_TIM1_Init+0xac>)
 80019e6:	2280      	movs	r2, #128	@ 0x80
 80019e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ea:	2303      	movs	r3, #3
 80019ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80019fa:	230a      	movs	r3, #10
 80019fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <MX_TIM1_Init+0xac>)
 8001a16:	f002 fa6b 	bl	8003ef0 <HAL_TIM_Encoder_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a20:	f7ff fc67 	bl	80012f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_TIM1_Init+0xac>)
 8001a36:	f003 fa6f 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a40:	f7ff fc57 	bl	80012f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	@ 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200000c0 	.word	0x200000c0
 8001a50:	40012c00 	.word	0x40012c00

08001a54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	@ 0x38
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a8e:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001a9c:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001aaa:	2280      	movs	r2, #128	@ 0x80
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aae:	4829      	ldr	r0, [pc, #164]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001ab0:	f001 ffda 	bl	8003a68 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001aba:	f7ff fc1a 	bl	80012f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4822      	ldr	r0, [pc, #136]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001acc:	f002 fc78 	bl	80043c0 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ad6:	f7ff fc0c 	bl	80012f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ada:	481e      	ldr	r0, [pc, #120]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001adc:	f002 f894 	bl	8003c08 <HAL_TIM_PWM_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ae6:	f7ff fc04 	bl	80012f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	4816      	ldr	r0, [pc, #88]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001afa:	f003 fa0d 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b04:	f7ff fbf5 	bl	80012f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	2360      	movs	r3, #96	@ 0x60
 8001b0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001b20:	f002 fb3a 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b2a:	f7ff fbe2 	bl	80012f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2204      	movs	r2, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4807      	ldr	r0, [pc, #28]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001b36:	f002 fb2f 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001b40:	f7ff fbd7 	bl	80012f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b44:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <MX_TIM2_Init+0x100>)
 8001b46:	f000 fa99 	bl	800207c <HAL_TIM_MspPostInit>

}
 8001b4a:	bf00      	nop
 8001b4c:	3738      	adds	r7, #56	@ 0x38
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000010c 	.word	0x2000010c

08001b58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08e      	sub	sp, #56	@ 0x38
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8a:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001b8c:	4a32      	ldr	r2, [pc, #200]	@ (8001c58 <MX_TIM3_Init+0x100>)
 8001b8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001b90:	4b30      	ldr	r3, [pc, #192]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001b9e:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001ba2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001baa:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001bac:	2280      	movs	r2, #128	@ 0x80
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bb0:	4828      	ldr	r0, [pc, #160]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001bb2:	f001 ff59 	bl	8003a68 <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001bbc:	f7ff fb99 	bl	80012f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4821      	ldr	r0, [pc, #132]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001bce:	f002 fbf7 	bl	80043c0 <HAL_TIM_ConfigClockSource>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001bd8:	f7ff fb8b 	bl	80012f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bdc:	481d      	ldr	r0, [pc, #116]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001bde:	f002 f813 	bl	8003c08 <HAL_TIM_PWM_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001be8:	f7ff fb83 	bl	80012f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4816      	ldr	r0, [pc, #88]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001bfc:	f003 f98c 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c06:	f7ff fb74 	bl	80012f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0a:	2360      	movs	r3, #96	@ 0x60
 8001c0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001c22:	f002 fab9 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c2c:	f7ff fb61 	bl	80012f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	220c      	movs	r2, #12
 8001c34:	4619      	mov	r1, r3
 8001c36:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001c38:	f002 faae 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001c42:	f7ff fb56 	bl	80012f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c46:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <MX_TIM3_Init+0xfc>)
 8001c48:	f000 fa18 	bl	800207c <HAL_TIM_MspPostInit>

}
 8001c4c:	bf00      	nop
 8001c4e:	3738      	adds	r7, #56	@ 0x38
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000158 	.word	0x20000158
 8001c58:	40000400 	.word	0x40000400

08001c5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	@ 0x30
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2224      	movs	r2, #36	@ 0x24
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 f8e6 	bl	8005e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <MX_TIM4_Init+0xa4>)
 8001c7c:	4a21      	ldr	r2, [pc, #132]	@ (8001d04 <MX_TIM4_Init+0xa8>)
 8001c7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c80:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <MX_TIM4_Init+0xa4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <MX_TIM4_Init+0xa4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_TIM4_Init+0xa4>)
 8001c8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <MX_TIM4_Init+0xa4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <MX_TIM4_Init+0xa4>)
 8001c9c:	2280      	movs	r2, #128	@ 0x80
 8001c9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001cb0:	230a      	movs	r3, #10
 8001cb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001cc0:	230a      	movs	r3, #10
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480d      	ldr	r0, [pc, #52]	@ (8001d00 <MX_TIM4_Init+0xa4>)
 8001ccc:	f002 f910 	bl	8003ef0 <HAL_TIM_Encoder_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001cd6:	f7ff fb0c 	bl	80012f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4806      	ldr	r0, [pc, #24]	@ (8001d00 <MX_TIM4_Init+0xa4>)
 8001ce8:	f003 f916 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001cf2:	f7ff fafe 	bl	80012f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	3730      	adds	r7, #48	@ 0x30
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200001a4 	.word	0x200001a4
 8001d04:	40000800 	.word	0x40000800

08001d08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	@ 0x30
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2224      	movs	r2, #36	@ 0x24
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 f890 	bl	8005e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d26:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <MX_TIM5_Init+0xa4>)
 8001d28:	4a21      	ldr	r2, [pc, #132]	@ (8001db0 <MX_TIM5_Init+0xa8>)
 8001d2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <MX_TIM5_Init+0xa4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <MX_TIM5_Init+0xa4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <MX_TIM5_Init+0xa4>)
 8001d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <MX_TIM5_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <MX_TIM5_Init+0xa4>)
 8001d48:	2280      	movs	r2, #128	@ 0x80
 8001d4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d54:	2301      	movs	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d5c:	230a      	movs	r3, #10
 8001d5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d64:	2301      	movs	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	480d      	ldr	r0, [pc, #52]	@ (8001dac <MX_TIM5_Init+0xa4>)
 8001d78:	f002 f8ba 	bl	8003ef0 <HAL_TIM_Encoder_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001d82:	f7ff fab6 	bl	80012f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	@ (8001dac <MX_TIM5_Init+0xa4>)
 8001d94:	f003 f8c0 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001d9e:	f7ff faa8 	bl	80012f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	3730      	adds	r7, #48	@ 0x30
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200001f0 	.word	0x200001f0
 8001db0:	40000c00 	.word	0x40000c00

08001db4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	@ 0x30
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	2224      	movs	r2, #36	@ 0x24
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 f83a 	bl	8005e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001dd4:	4a23      	ldr	r2, [pc, #140]	@ (8001e64 <MX_TIM8_Init+0xb0>)
 8001dd6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001dfa:	2280      	movs	r2, #128	@ 0x80
 8001dfc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e0e:	230a      	movs	r3, #10
 8001e10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e16:	2301      	movs	r3, #1
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001e1e:	230a      	movs	r3, #10
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4619      	mov	r1, r3
 8001e28:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001e2a:	f002 f861 	bl	8003ef0 <HAL_TIM_Encoder_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001e34:	f7ff fa5d 	bl	80012f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_TIM8_Init+0xac>)
 8001e4a:	f003 f865 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001e54:	f7ff fa4d 	bl	80012f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3730      	adds	r7, #48	@ 0x30
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000023c 	.word	0x2000023c
 8001e64:	40013400 	.word	0x40013400

08001e68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b090      	sub	sp, #64	@ 0x40
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a5d      	ldr	r2, [pc, #372]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x194>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d128      	bne.n	8001edc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001e90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e96:	4b5a      	ldr	r3, [pc, #360]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	4b57      	ldr	r3, [pc, #348]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea6:	4a56      	ldr	r2, [pc, #344]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eae:	4b54      	ldr	r3, [pc, #336]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ece:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	484b      	ldr	r0, [pc, #300]	@ (8002004 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001ed6:	f000 fbfd 	bl	80026d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001eda:	e08a      	b.n	8001ff2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a49      	ldr	r2, [pc, #292]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d129      	bne.n	8001f3a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee6:	4b46      	ldr	r3, [pc, #280]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eea:	4a45      	ldr	r2, [pc, #276]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ef2:	4b43      	ldr	r3, [pc, #268]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efe:	4b40      	ldr	r3, [pc, #256]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	4a3f      	ldr	r2, [pc, #252]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f16:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f30:	4619      	mov	r1, r3
 8001f32:	4836      	ldr	r0, [pc, #216]	@ (800200c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001f34:	f000 fbce 	bl	80026d4 <HAL_GPIO_Init>
}
 8001f38:	e05b      	b.n	8001ff2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	@ (8002010 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d129      	bne.n	8001f98 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f44:	4b2e      	ldr	r3, [pc, #184]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	4a2d      	ldr	r2, [pc, #180]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f50:	4b2b      	ldr	r3, [pc, #172]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	4b28      	ldr	r3, [pc, #160]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f60:	4a27      	ldr	r2, [pc, #156]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f68:	4b25      	ldr	r3, [pc, #148]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f74:	2303      	movs	r3, #3
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f84:	2302      	movs	r3, #2
 8001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f92:	f000 fb9f 	bl	80026d4 <HAL_GPIO_Init>
}
 8001f96:	e02c      	b.n	8001ff2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d127      	bne.n	8001ff2 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fa2:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	4a16      	ldr	r2, [pc, #88]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001fa8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fae:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x198>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fd2:	23c0      	movs	r3, #192	@ 0xc0
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	@ (8002004 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001fee:	f000 fb71 	bl	80026d4 <HAL_GPIO_Init>
}
 8001ff2:	bf00      	nop
 8001ff4:	3740      	adds	r7, #64	@ 0x40
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	40021000 	.word	0x40021000
 8002004:	48000800 	.word	0x48000800
 8002008:	40000800 	.word	0x40000800
 800200c:	48000c00 	.word	0x48000c00
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40013400 	.word	0x40013400

08002018 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002028:	d10c      	bne.n	8002044 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202a:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_TIM_Base_MspInit+0x5c>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	4a11      	ldr	r2, [pc, #68]	@ (8002074 <HAL_TIM_Base_MspInit+0x5c>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6593      	str	r3, [r2, #88]	@ 0x58
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_TIM_Base_MspInit+0x5c>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002042:	e010      	b.n	8002066 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0b      	ldr	r2, [pc, #44]	@ (8002078 <HAL_TIM_Base_MspInit+0x60>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10b      	bne.n	8002066 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_TIM_Base_MspInit+0x5c>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_TIM_Base_MspInit+0x5c>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6593      	str	r3, [r2, #88]	@ 0x58
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_TIM_Base_MspInit+0x5c>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40000400 	.word	0x40000400

0800207c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209c:	d11c      	bne.n	80020d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800209e:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <HAL_TIM_MspPostInit+0xa8>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	4a20      	ldr	r2, [pc, #128]	@ (8002124 <HAL_TIM_MspPostInit+0xa8>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <HAL_TIM_MspPostInit+0xa8>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020b6:	2318      	movs	r3, #24
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80020c6:	2302      	movs	r3, #2
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4815      	ldr	r0, [pc, #84]	@ (8002128 <HAL_TIM_MspPostInit+0xac>)
 80020d2:	f000 faff 	bl	80026d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020d6:	e020      	b.n	800211a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a13      	ldr	r2, [pc, #76]	@ (800212c <HAL_TIM_MspPostInit+0xb0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d11b      	bne.n	800211a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <HAL_TIM_MspPostInit+0xa8>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002124 <HAL_TIM_MspPostInit+0xa8>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_TIM_MspPostInit+0xa8>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80020fa:	2324      	movs	r3, #36	@ 0x24
 80020fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800210a:	2302      	movs	r3, #2
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	4806      	ldr	r0, [pc, #24]	@ (8002130 <HAL_TIM_MspPostInit+0xb4>)
 8002116:	f000 fadd 	bl	80026d4 <HAL_GPIO_Init>
}
 800211a:	bf00      	nop
 800211c:	3728      	adds	r7, #40	@ 0x28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	48000c00 	.word	0x48000c00
 800212c:	40000400 	.word	0x40000400
 8002130:	48001000 	.word	0x48001000

08002134 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002138:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <MX_UART4_Init+0x90>)
 800213a:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <MX_UART4_Init+0x94>)
 800213c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800213e:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <MX_UART4_Init+0x90>)
 8002140:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002144:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <MX_UART4_Init+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <MX_UART4_Init+0x90>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <MX_UART4_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <MX_UART4_Init+0x90>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <MX_UART4_Init+0x90>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <MX_UART4_Init+0x90>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <MX_UART4_Init+0x90>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002170:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <MX_UART4_Init+0x90>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <MX_UART4_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800217c:	4811      	ldr	r0, [pc, #68]	@ (80021c4 <MX_UART4_Init+0x90>)
 800217e:	f002 ff61 	bl	8005044 <HAL_UART_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002188:	f7ff f8b3 	bl	80012f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800218c:	2100      	movs	r1, #0
 800218e:	480d      	ldr	r0, [pc, #52]	@ (80021c4 <MX_UART4_Init+0x90>)
 8002190:	f003 fd8a 	bl	8005ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800219a:	f7ff f8aa 	bl	80012f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800219e:	2100      	movs	r1, #0
 80021a0:	4808      	ldr	r0, [pc, #32]	@ (80021c4 <MX_UART4_Init+0x90>)
 80021a2:	f003 fdbf 	bl	8005d24 <HAL_UARTEx_SetRxFifoThreshold>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80021ac:	f7ff f8a1 	bl	80012f2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	@ (80021c4 <MX_UART4_Init+0x90>)
 80021b2:	f003 fd40 	bl	8005c36 <HAL_UARTEx_DisableFifoMode>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80021bc:	f7ff f899 	bl	80012f2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000288 	.word	0x20000288
 80021c8:	40004c00 	.word	0x40004c00

080021cc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021d0:	4b22      	ldr	r3, [pc, #136]	@ (800225c <MX_USART1_UART_Init+0x90>)
 80021d2:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <MX_USART1_UART_Init+0x94>)
 80021d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021d6:	4b21      	ldr	r3, [pc, #132]	@ (800225c <MX_USART1_UART_Init+0x90>)
 80021d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021de:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <MX_USART1_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <MX_USART1_UART_Init+0x90>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <MX_USART1_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021f0:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <MX_USART1_UART_Init+0x90>)
 80021f2:	220c      	movs	r2, #12
 80021f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f6:	4b19      	ldr	r3, [pc, #100]	@ (800225c <MX_USART1_UART_Init+0x90>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021fc:	4b17      	ldr	r3, [pc, #92]	@ (800225c <MX_USART1_UART_Init+0x90>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <MX_USART1_UART_Init+0x90>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <MX_USART1_UART_Init+0x90>)
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800220e:	4b13      	ldr	r3, [pc, #76]	@ (800225c <MX_USART1_UART_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002214:	4811      	ldr	r0, [pc, #68]	@ (800225c <MX_USART1_UART_Init+0x90>)
 8002216:	f002 ff15 	bl	8005044 <HAL_UART_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002220:	f7ff f867 	bl	80012f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002224:	2100      	movs	r1, #0
 8002226:	480d      	ldr	r0, [pc, #52]	@ (800225c <MX_USART1_UART_Init+0x90>)
 8002228:	f003 fd3e 	bl	8005ca8 <HAL_UARTEx_SetTxFifoThreshold>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002232:	f7ff f85e 	bl	80012f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002236:	2100      	movs	r1, #0
 8002238:	4808      	ldr	r0, [pc, #32]	@ (800225c <MX_USART1_UART_Init+0x90>)
 800223a:	f003 fd73 	bl	8005d24 <HAL_UARTEx_SetRxFifoThreshold>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002244:	f7ff f855 	bl	80012f2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	@ (800225c <MX_USART1_UART_Init+0x90>)
 800224a:	f003 fcf4 	bl	8005c36 <HAL_UARTEx_DisableFifoMode>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002254:	f7ff f84d 	bl	80012f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2000031c 	.word	0x2000031c
 8002260:	40013800 	.word	0x40013800

08002264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0a0      	sub	sp, #128	@ 0x80
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800227c:	f107 0318 	add.w	r3, r7, #24
 8002280:	2254      	movs	r2, #84	@ 0x54
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fdd9 	bl	8005e3c <memset>
  if(uartHandle->Instance==UART4)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3d      	ldr	r2, [pc, #244]	@ (8002384 <HAL_UART_MspInit+0x120>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d137      	bne.n	8002304 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002294:	2308      	movs	r3, #8
 8002296:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229c:	f107 0318 	add.w	r3, r7, #24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 f993 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022ac:	f7ff f821 	bl	80012f2 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022b0:	4b35      	ldr	r3, [pc, #212]	@ (8002388 <HAL_UART_MspInit+0x124>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	4a34      	ldr	r2, [pc, #208]	@ (8002388 <HAL_UART_MspInit+0x124>)
 80022b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80022bc:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <HAL_UART_MspInit+0x124>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <HAL_UART_MspInit+0x124>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002388 <HAL_UART_MspInit+0x124>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <HAL_UART_MspInit+0x124>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80022f2:	2305      	movs	r3, #5
 80022f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022fa:	4619      	mov	r1, r3
 80022fc:	4823      	ldr	r0, [pc, #140]	@ (800238c <HAL_UART_MspInit+0x128>)
 80022fe:	f000 f9e9 	bl	80026d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002302:	e03a      	b.n	800237a <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a21      	ldr	r2, [pc, #132]	@ (8002390 <HAL_UART_MspInit+0x12c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d135      	bne.n	800237a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800230e:	2301      	movs	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002316:	f107 0318 	add.w	r3, r7, #24
 800231a:	4618      	mov	r0, r3
 800231c:	f001 f956 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002326:	f7fe ffe4 	bl	80012f2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800232a:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <HAL_UART_MspInit+0x124>)
 800232c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232e:	4a16      	ldr	r2, [pc, #88]	@ (8002388 <HAL_UART_MspInit+0x124>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002334:	6613      	str	r3, [r2, #96]	@ 0x60
 8002336:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <HAL_UART_MspInit+0x124>)
 8002338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HAL_UART_MspInit+0x124>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	4a10      	ldr	r2, [pc, #64]	@ (8002388 <HAL_UART_MspInit+0x124>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <HAL_UART_MspInit+0x124>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800235a:	2330      	movs	r3, #48	@ 0x30
 800235c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800236a:	2307      	movs	r3, #7
 800236c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002372:	4619      	mov	r1, r3
 8002374:	4805      	ldr	r0, [pc, #20]	@ (800238c <HAL_UART_MspInit+0x128>)
 8002376:	f000 f9ad 	bl	80026d4 <HAL_GPIO_Init>
}
 800237a:	bf00      	nop
 800237c:	3780      	adds	r7, #128	@ 0x80
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40004c00 	.word	0x40004c00
 8002388:	40021000 	.word	0x40021000
 800238c:	48000800 	.word	0x48000800
 8002390:	40013800 	.word	0x40013800

08002394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002394:	480d      	ldr	r0, [pc, #52]	@ (80023cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002396:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002398:	f7ff faf0 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800239c:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800239e:	490d      	ldr	r1, [pc, #52]	@ (80023d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <LoopForever+0xe>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023b4:	4c0a      	ldr	r4, [pc, #40]	@ (80023e0 <LoopForever+0x16>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c2:	f003 fd43 	bl	8005e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023c6:	f7fe fea9 	bl	800111c <main>

080023ca <LoopForever>:

LoopForever:
    b LoopForever
 80023ca:	e7fe      	b.n	80023ca <LoopForever>
  ldr   r0, =_estack
 80023cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80023d8:	08005efc 	.word	0x08005efc
  ldr r2, =_sbss
 80023dc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80023e0:	200003b4 	.word	0x200003b4

080023e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC1_2_IRQHandler>

080023e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 f93d 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f6:	200f      	movs	r0, #15
 80023f8:	f000 f80e 	bl	8002418 <HAL_InitTick>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	71fb      	strb	r3, [r7, #7]
 8002406:	e001      	b.n	800240c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002408:	f7ff fa64 	bl	80018d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800240c:	79fb      	ldrb	r3, [r7, #7]

}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_InitTick+0x68>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d022      	beq.n	8002472 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800242c:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <HAL_InitTick+0x6c>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <HAL_InitTick+0x68>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002438:	fbb1 f3f3 	udiv	r3, r1, r3
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f93a 	bl	80026ba <HAL_SYSTICK_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10f      	bne.n	800246c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	d809      	bhi.n	8002466 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002452:	2200      	movs	r2, #0
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800245a:	f000 f914 	bl	8002686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800245e:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <HAL_InitTick+0x70>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e007      	b.n	8002476 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	e004      	b.n	8002476 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e001      	b.n	8002476 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000090 	.word	0x20000090
 8002484:	20000088 	.word	0x20000088
 8002488:	2000008c 	.word	0x2000008c

0800248c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <HAL_IncTick+0x1c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_IncTick+0x20>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4413      	add	r3, r2
 800249a:	4a03      	ldr	r2, [pc, #12]	@ (80024a8 <HAL_IncTick+0x1c>)
 800249c:	6013      	str	r3, [r2, #0]
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	200003b0 	.word	0x200003b0
 80024ac:	20000090 	.word	0x20000090

080024b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <HAL_GetTick+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	200003b0 	.word	0x200003b0

080024c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff ffee 	bl	80024b0 <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024e0:	d004      	beq.n	80024ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e2:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <HAL_Delay+0x40>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ec:	bf00      	nop
 80024ee:	f7ff ffdf 	bl	80024b0 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d8f7      	bhi.n	80024ee <HAL_Delay+0x26>
  {
  }
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000090 	.word	0x20000090

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	@ (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	@ (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	@ 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
         );
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	@ 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002650:	f7ff ff8e 	bl	8002570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff47 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002694:	f7ff ff5e 	bl	8002554 <__NVIC_GetPriorityGrouping>
 8002698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff ff90 	bl	80025c4 <NVIC_EncodePriority>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff5f 	bl	8002570 <__NVIC_SetPriority>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffb2 	bl	800262c <SysTick_Config>
 80026c8:	4603      	mov	r3, r0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026e2:	e15a      	b.n	800299a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	4013      	ands	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 814c 	beq.w	8002994 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d005      	beq.n	8002714 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002710:	2b02      	cmp	r3, #2
 8002712:	d130      	bne.n	8002776 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274a:	2201      	movs	r2, #1
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	f003 0201 	and.w	r2, r3, #1
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b03      	cmp	r3, #3
 8002780:	d017      	beq.n	80027b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d123      	bne.n	8002806 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	08da      	lsrs	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3208      	adds	r2, #8
 80027c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	08da      	lsrs	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3208      	adds	r2, #8
 8002800:	6939      	ldr	r1, [r7, #16]
 8002802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0203 	and.w	r2, r3, #3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80a6 	beq.w	8002994 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002848:	4b5b      	ldr	r3, [pc, #364]	@ (80029b8 <HAL_GPIO_Init+0x2e4>)
 800284a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284c:	4a5a      	ldr	r2, [pc, #360]	@ (80029b8 <HAL_GPIO_Init+0x2e4>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6613      	str	r3, [r2, #96]	@ 0x60
 8002854:	4b58      	ldr	r3, [pc, #352]	@ (80029b8 <HAL_GPIO_Init+0x2e4>)
 8002856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002860:	4a56      	ldr	r2, [pc, #344]	@ (80029bc <HAL_GPIO_Init+0x2e8>)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800288a:	d01f      	beq.n	80028cc <HAL_GPIO_Init+0x1f8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a4c      	ldr	r2, [pc, #304]	@ (80029c0 <HAL_GPIO_Init+0x2ec>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d019      	beq.n	80028c8 <HAL_GPIO_Init+0x1f4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a4b      	ldr	r2, [pc, #300]	@ (80029c4 <HAL_GPIO_Init+0x2f0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d013      	beq.n	80028c4 <HAL_GPIO_Init+0x1f0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a4a      	ldr	r2, [pc, #296]	@ (80029c8 <HAL_GPIO_Init+0x2f4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00d      	beq.n	80028c0 <HAL_GPIO_Init+0x1ec>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a49      	ldr	r2, [pc, #292]	@ (80029cc <HAL_GPIO_Init+0x2f8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d007      	beq.n	80028bc <HAL_GPIO_Init+0x1e8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a48      	ldr	r2, [pc, #288]	@ (80029d0 <HAL_GPIO_Init+0x2fc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_GPIO_Init+0x1e4>
 80028b4:	2305      	movs	r3, #5
 80028b6:	e00a      	b.n	80028ce <HAL_GPIO_Init+0x1fa>
 80028b8:	2306      	movs	r3, #6
 80028ba:	e008      	b.n	80028ce <HAL_GPIO_Init+0x1fa>
 80028bc:	2304      	movs	r3, #4
 80028be:	e006      	b.n	80028ce <HAL_GPIO_Init+0x1fa>
 80028c0:	2303      	movs	r3, #3
 80028c2:	e004      	b.n	80028ce <HAL_GPIO_Init+0x1fa>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e002      	b.n	80028ce <HAL_GPIO_Init+0x1fa>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_GPIO_Init+0x1fa>
 80028cc:	2300      	movs	r3, #0
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	f002 0203 	and.w	r2, r2, #3
 80028d4:	0092      	lsls	r2, r2, #2
 80028d6:	4093      	lsls	r3, r2
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028de:	4937      	ldr	r1, [pc, #220]	@ (80029bc <HAL_GPIO_Init+0x2e8>)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ec:	4b39      	ldr	r3, [pc, #228]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002910:	4a30      	ldr	r2, [pc, #192]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002916:	4b2f      	ldr	r3, [pc, #188]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800293a:	4a26      	ldr	r2, [pc, #152]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002940:	4b24      	ldr	r3, [pc, #144]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002964:	4a1b      	ldr	r2, [pc, #108]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800296a:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800298e:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f ae9d 	bne.w	80026e4 <HAL_GPIO_Init+0x10>
  }
}
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010000 	.word	0x40010000
 80029c0:	48000400 	.word	0x48000400
 80029c4:	48000800 	.word	0x48000800
 80029c8:	48000c00 	.word	0x48000c00
 80029cc:	48001000 	.word	0x48001000
 80029d0:	48001400 	.word	0x48001400
 80029d4:	40010400 	.word	0x40010400

080029d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
 80029e4:	4613      	mov	r3, r2
 80029e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e8:	787b      	ldrb	r3, [r7, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f4:	e002      	b.n	80029fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d141      	bne.n	8002a9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a16:	4b4b      	ldr	r3, [pc, #300]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a22:	d131      	bne.n	8002a88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a24:	4b47      	ldr	r3, [pc, #284]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a2a:	4a46      	ldr	r2, [pc, #280]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a34:	4b43      	ldr	r3, [pc, #268]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a3c:	4a41      	ldr	r2, [pc, #260]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a44:	4b40      	ldr	r3, [pc, #256]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2232      	movs	r2, #50	@ 0x32
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	0c9b      	lsrs	r3, r3, #18
 8002a56:	3301      	adds	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5a:	e002      	b.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a62:	4b38      	ldr	r3, [pc, #224]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6e:	d102      	bne.n	8002a76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f2      	bne.n	8002a5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a76:	4b33      	ldr	r3, [pc, #204]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a82:	d158      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e057      	b.n	8002b38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a88:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a98:	e04d      	b.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aa0:	d141      	bne.n	8002b26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aa2:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aae:	d131      	bne.n	8002b14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab0:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ab6:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac0:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ace:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2232      	movs	r2, #50	@ 0x32
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	4a1c      	ldr	r2, [pc, #112]	@ (8002b4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae6:	e002      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afa:	d102      	bne.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f2      	bne.n	8002ae8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0e:	d112      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e011      	b.n	8002b38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b24:	e007      	b.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b2e:	4a05      	ldr	r2, [pc, #20]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40007000 	.word	0x40007000
 8002b48:	20000088 	.word	0x20000088
 8002b4c:	431bde83 	.word	0x431bde83

08002b50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b5e:	6093      	str	r3, [r2, #8]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40007000 	.word	0x40007000

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e2fe      	b.n	8003180 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d075      	beq.n	8002c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8e:	4b97      	ldr	r3, [pc, #604]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b98:	4b94      	ldr	r3, [pc, #592]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	d102      	bne.n	8002bae <HAL_RCC_OscConfig+0x3e>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d002      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x44>
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d10b      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05b      	beq.n	8002c78 <HAL_RCC_OscConfig+0x108>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d157      	bne.n	8002c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e2d9      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x74>
 8002bd6:	4b85      	ldr	r3, [pc, #532]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a84      	ldr	r2, [pc, #528]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0xb0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x98>
 8002bee:	4b7f      	ldr	r3, [pc, #508]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7b      	ldr	r2, [pc, #492]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0xb0>
 8002c08:	4b78      	ldr	r3, [pc, #480]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a77      	ldr	r2, [pc, #476]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b75      	ldr	r3, [pc, #468]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a74      	ldr	r2, [pc, #464]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7ff fc42 	bl	80024b0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff fc3e 	bl	80024b0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	@ 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e29e      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c42:	4b6a      	ldr	r3, [pc, #424]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0xc0>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7ff fc2e 	bl	80024b0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff fc2a 	bl	80024b0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	@ 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e28a      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6a:	4b60      	ldr	r3, [pc, #384]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0xe8>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d075      	beq.n	8002d72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c86:	4b59      	ldr	r3, [pc, #356]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c90:	4b56      	ldr	r3, [pc, #344]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	d102      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x136>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d002      	beq.n	8002cac <HAL_RCC_OscConfig+0x13c>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d11f      	bne.n	8002cec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cac:	4b4f      	ldr	r3, [pc, #316]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x154>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e25d      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b49      	ldr	r3, [pc, #292]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	4946      	ldr	r1, [pc, #280]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cd8:	4b45      	ldr	r3, [pc, #276]	@ (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fb9b 	bl	8002418 <HAL_InitTick>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d043      	beq.n	8002d70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e249      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d023      	beq.n	8002d3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7ff fbd6 	bl	80024b0 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7ff fbd2 	bl	80024b0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e232      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d1a:	4b34      	ldr	r3, [pc, #208]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	492d      	ldr	r1, [pc, #180]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
 8002d3a:	e01a      	b.n	8002d72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2a      	ldr	r2, [pc, #168]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7ff fbb2 	bl	80024b0 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d50:	f7ff fbae 	bl	80024b0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e20e      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d62:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x1e0>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d041      	beq.n	8002e02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d86:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8c:	4a17      	ldr	r2, [pc, #92]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d96:	f7ff fb8b 	bl	80024b0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9e:	f7ff fb87 	bl	80024b0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1e7      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0ef      	beq.n	8002d9e <HAL_RCC_OscConfig+0x22e>
 8002dbe:	e020      	b.n	8002e02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc6:	4a09      	ldr	r2, [pc, #36]	@ (8002dec <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7ff fb6e 	bl	80024b0 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd6:	e00d      	b.n	8002df4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7ff fb6a 	bl	80024b0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d906      	bls.n	8002df4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1ca      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	2000008c 	.word	0x2000008c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df4:	4b8c      	ldr	r3, [pc, #560]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1ea      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80a6 	beq.w	8002f5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e10:	2300      	movs	r3, #0
 8002e12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e14:	4b84      	ldr	r3, [pc, #528]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_OscConfig+0x2b4>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x2b6>
 8002e24:	2300      	movs	r3, #0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e36:	4b7c      	ldr	r3, [pc, #496]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e46:	4b79      	ldr	r3, [pc, #484]	@ (800302c <HAL_RCC_OscConfig+0x4bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e52:	4b76      	ldr	r3, [pc, #472]	@ (800302c <HAL_RCC_OscConfig+0x4bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a75      	ldr	r2, [pc, #468]	@ (800302c <HAL_RCC_OscConfig+0x4bc>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7ff fb27 	bl	80024b0 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7ff fb23 	bl	80024b0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e183      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	4b6c      	ldr	r3, [pc, #432]	@ (800302c <HAL_RCC_OscConfig+0x4bc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d108      	bne.n	8002e9e <HAL_RCC_OscConfig+0x32e>
 8002e8c:	4b66      	ldr	r3, [pc, #408]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	4a65      	ldr	r2, [pc, #404]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e9c:	e024      	b.n	8002ee8 <HAL_RCC_OscConfig+0x378>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d110      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x358>
 8002ea6:	4b60      	ldr	r3, [pc, #384]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	4a5e      	ldr	r2, [pc, #376]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ec6:	e00f      	b.n	8002ee8 <HAL_RCC_OscConfig+0x378>
 8002ec8:	4b57      	ldr	r3, [pc, #348]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ece:	4a56      	ldr	r2, [pc, #344]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed8:	4b53      	ldr	r3, [pc, #332]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	4a52      	ldr	r2, [pc, #328]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d016      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7ff fade 	bl	80024b0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7ff fada 	bl	80024b0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e138      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f0e:	4b46      	ldr	r3, [pc, #280]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ed      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x388>
 8002f1c:	e015      	b.n	8002f4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7ff fac7 	bl	80024b0 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7ff fac3 	bl	80024b0 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e121      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ed      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f54:	4a34      	ldr	r2, [pc, #208]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d03c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01c      	beq.n	8002faa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f70:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f76:	4a2c      	ldr	r2, [pc, #176]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7ff fa96 	bl	80024b0 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f88:	f7ff fa92 	bl	80024b0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0f2      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f9a:	4b23      	ldr	r3, [pc, #140]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ef      	beq.n	8002f88 <HAL_RCC_OscConfig+0x418>
 8002fa8:	e01b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002faa:	4b1f      	ldr	r3, [pc, #124]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7ff fa79 	bl	80024b0 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc2:	f7ff fa75 	bl	80024b0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0d5      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ef      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80c9 	beq.w	800317e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fec:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	f000 8083 	beq.w	8003100 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d15e      	bne.n	80030c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a08      	ldr	r2, [pc, #32]	@ (8003028 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7ff fa4f 	bl	80024b0 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003014:	e00c      	b.n	8003030 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7ff fa4b 	bl	80024b0 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d905      	bls.n	8003030 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0ab      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
 8003028:	40021000 	.word	0x40021000
 800302c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003030:	4b55      	ldr	r3, [pc, #340]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ec      	bne.n	8003016 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303c:	4b52      	ldr	r3, [pc, #328]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	4b52      	ldr	r3, [pc, #328]	@ (800318c <HAL_RCC_OscConfig+0x61c>)
 8003042:	4013      	ands	r3, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6a11      	ldr	r1, [r2, #32]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800304c:	3a01      	subs	r2, #1
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	4311      	orrs	r1, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003056:	0212      	lsls	r2, r2, #8
 8003058:	4311      	orrs	r1, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800305e:	0852      	lsrs	r2, r2, #1
 8003060:	3a01      	subs	r2, #1
 8003062:	0552      	lsls	r2, r2, #21
 8003064:	4311      	orrs	r1, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800306a:	0852      	lsrs	r2, r2, #1
 800306c:	3a01      	subs	r2, #1
 800306e:	0652      	lsls	r2, r2, #25
 8003070:	4311      	orrs	r1, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003076:	06d2      	lsls	r2, r2, #27
 8003078:	430a      	orrs	r2, r1
 800307a:	4943      	ldr	r1, [pc, #268]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 800307c:	4313      	orrs	r3, r2
 800307e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003080:	4b41      	ldr	r3, [pc, #260]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a40      	ldr	r2, [pc, #256]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 8003086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800308a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800308c:	4b3e      	ldr	r3, [pc, #248]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a3d      	ldr	r2, [pc, #244]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 8003092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003096:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7ff fa0a 	bl	80024b0 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7ff fa06 	bl	80024b0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e066      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b2:	4b35      	ldr	r3, [pc, #212]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x530>
 80030be:	e05e      	b.n	800317e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c0:	4b31      	ldr	r3, [pc, #196]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a30      	ldr	r2, [pc, #192]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 80030c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7ff f9f0 	bl	80024b0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d4:	f7ff f9ec 	bl	80024b0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e04c      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e6:	4b28      	ldr	r3, [pc, #160]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030f2:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	4924      	ldr	r1, [pc, #144]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 80030f8:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <HAL_RCC_OscConfig+0x620>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	60cb      	str	r3, [r1, #12]
 80030fe:	e03e      	b.n	800317e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e039      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800310c:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <HAL_RCC_OscConfig+0x618>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0203 	and.w	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	429a      	cmp	r2, r3
 800311e:	d12c      	bne.n	800317a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	3b01      	subs	r3, #1
 800312c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d123      	bne.n	800317a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11b      	bne.n	800317a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d113      	bne.n	800317a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d109      	bne.n	800317a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	3b01      	subs	r3, #1
 8003174:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	019f800c 	.word	0x019f800c
 8003190:	feeefffc 	.word	0xfeeefffc

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e11e      	b.n	80033ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b91      	ldr	r3, [pc, #580]	@ (80033f4 <HAL_RCC_ClockConfig+0x260>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d910      	bls.n	80031dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b8e      	ldr	r3, [pc, #568]	@ (80033f4 <HAL_RCC_ClockConfig+0x260>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 020f 	bic.w	r2, r3, #15
 80031c2:	498c      	ldr	r1, [pc, #560]	@ (80033f4 <HAL_RCC_ClockConfig+0x260>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b8a      	ldr	r3, [pc, #552]	@ (80033f4 <HAL_RCC_ClockConfig+0x260>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e106      	b.n	80033ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d073      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d129      	bne.n	8003244 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f0:	4b81      	ldr	r3, [pc, #516]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0f4      	b.n	80033ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003200:	f000 f99e 	bl	8003540 <RCC_GetSysClockFreqFromPLLSource>
 8003204:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4a7c      	ldr	r2, [pc, #496]	@ (80033fc <HAL_RCC_ClockConfig+0x268>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d93f      	bls.n	800328e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800320e:	4b7a      	ldr	r3, [pc, #488]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003222:	2b00      	cmp	r3, #0
 8003224:	d033      	beq.n	800328e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800322a:	2b00      	cmp	r3, #0
 800322c:	d12f      	bne.n	800328e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800322e:	4b72      	ldr	r3, [pc, #456]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003236:	4a70      	ldr	r2, [pc, #448]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 8003238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800323c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e024      	b.n	800328e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d107      	bne.n	800325c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324c:	4b6a      	ldr	r3, [pc, #424]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0c6      	b.n	80033ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325c:	4b66      	ldr	r3, [pc, #408]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0be      	b.n	80033ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800326c:	f000 f8ce 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8003270:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4a61      	ldr	r2, [pc, #388]	@ (80033fc <HAL_RCC_ClockConfig+0x268>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d909      	bls.n	800328e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800327a:	4b5f      	ldr	r3, [pc, #380]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003282:	4a5d      	ldr	r2, [pc, #372]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 8003284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003288:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b5a      	ldr	r3, [pc, #360]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4957      	ldr	r1, [pc, #348]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a0:	f7ff f906 	bl	80024b0 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7ff f902 	bl	80024b0 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e095      	b.n	80033ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b4e      	ldr	r3, [pc, #312]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d023      	beq.n	8003324 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e8:	4b43      	ldr	r3, [pc, #268]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a42      	ldr	r2, [pc, #264]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 80032ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003300:	4b3d      	ldr	r3, [pc, #244]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003308:	4a3b      	ldr	r2, [pc, #236]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800330a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800330e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b39      	ldr	r3, [pc, #228]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4936      	ldr	r1, [pc, #216]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
 8003322:	e008      	b.n	8003336 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b80      	cmp	r3, #128	@ 0x80
 8003328:	d105      	bne.n	8003336 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800332a:	4b33      	ldr	r3, [pc, #204]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4a32      	ldr	r2, [pc, #200]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 8003330:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003334:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003336:	4b2f      	ldr	r3, [pc, #188]	@ (80033f4 <HAL_RCC_ClockConfig+0x260>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d21d      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003344:	4b2b      	ldr	r3, [pc, #172]	@ (80033f4 <HAL_RCC_ClockConfig+0x260>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 020f 	bic.w	r2, r3, #15
 800334c:	4929      	ldr	r1, [pc, #164]	@ (80033f4 <HAL_RCC_ClockConfig+0x260>)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003354:	f7ff f8ac 	bl	80024b0 <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7ff f8a8 	bl	80024b0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e03b      	b.n	80033ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <HAL_RCC_ClockConfig+0x260>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d1ed      	bne.n	800335c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b1a      	ldr	r3, [pc, #104]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4917      	ldr	r1, [pc, #92]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	490f      	ldr	r1, [pc, #60]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033be:	f000 f825 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <HAL_RCC_ClockConfig+0x264>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	490c      	ldr	r1, [pc, #48]	@ (8003400 <HAL_RCC_ClockConfig+0x26c>)
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <HAL_RCC_ClockConfig+0x270>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033de:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <HAL_RCC_ClockConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f818 	bl	8002418 <HAL_InitTick>
 80033e8:	4603      	mov	r3, r0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40022000 	.word	0x40022000
 80033f8:	40021000 	.word	0x40021000
 80033fc:	04c4b400 	.word	0x04c4b400
 8003400:	08005eac 	.word	0x08005eac
 8003404:	20000088 	.word	0x20000088
 8003408:	2000008c 	.word	0x2000008c

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003412:	4b2c      	ldr	r3, [pc, #176]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d102      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800341e:	4b2a      	ldr	r3, [pc, #168]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	e047      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003424:	4b27      	ldr	r3, [pc, #156]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d102      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003430:	4b26      	ldr	r3, [pc, #152]	@ (80034cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	e03e      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003436:	4b23      	ldr	r3, [pc, #140]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d136      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003442:	4b20      	ldr	r3, [pc, #128]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800344c:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	3301      	adds	r3, #1
 8003458:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d10c      	bne.n	800347a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003460:	4a1a      	ldr	r2, [pc, #104]	@ (80034cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	4a16      	ldr	r2, [pc, #88]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800346a:	68d2      	ldr	r2, [r2, #12]
 800346c:	0a12      	lsrs	r2, r2, #8
 800346e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	617b      	str	r3, [r7, #20]
      break;
 8003478:	e00c      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800347a:	4a13      	ldr	r2, [pc, #76]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	4a10      	ldr	r2, [pc, #64]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003484:	68d2      	ldr	r2, [r2, #12]
 8003486:	0a12      	lsrs	r2, r2, #8
 8003488:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800348c:	fb02 f303 	mul.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
      break;
 8003492:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	0e5b      	lsrs	r3, r3, #25
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e001      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034b4:	693b      	ldr	r3, [r7, #16]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	007a1200 	.word	0x007a1200

080034d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b03      	ldr	r3, [pc, #12]	@ (80034e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000088 	.word	0x20000088

080034e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034ec:	f7ff fff0 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4904      	ldr	r1, [pc, #16]	@ (8003510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	08005ebc 	.word	0x08005ebc

08003514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003518:	f7ff ffda 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0adb      	lsrs	r3, r3, #11
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4904      	ldr	r1, [pc, #16]	@ (800353c <HAL_RCC_GetPCLK2Freq+0x28>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	08005ebc 	.word	0x08005ebc

08003540 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003546:	4b1e      	ldr	r3, [pc, #120]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003550:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3301      	adds	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d10c      	bne.n	800357e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003564:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800356e:	68d2      	ldr	r2, [r2, #12]
 8003570:	0a12      	lsrs	r2, r2, #8
 8003572:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
    break;
 800357c:	e00c      	b.n	8003598 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800357e:	4a12      	ldr	r2, [pc, #72]	@ (80035c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	4a0e      	ldr	r2, [pc, #56]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	0a12      	lsrs	r2, r2, #8
 800358c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
    break;
 8003596:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003598:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0e5b      	lsrs	r3, r3, #25
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	3301      	adds	r3, #1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035b2:	687b      	ldr	r3, [r7, #4]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40021000 	.word	0x40021000
 80035c4:	007a1200 	.word	0x007a1200
 80035c8:	00f42400 	.word	0x00f42400

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035d4:	2300      	movs	r3, #0
 80035d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035d8:	2300      	movs	r3, #0
 80035da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8098 	beq.w	800371a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ee:	4b43      	ldr	r3, [pc, #268]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	4b40      	ldr	r3, [pc, #256]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	4a3f      	ldr	r2, [pc, #252]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003604:	6593      	str	r3, [r2, #88]	@ 0x58
 8003606:	4b3d      	ldr	r3, [pc, #244]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003616:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a39      	ldr	r2, [pc, #228]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003620:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003622:	f7fe ff45 	bl	80024b0 <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003628:	e009      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe ff41 	bl	80024b0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d902      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	74fb      	strb	r3, [r7, #19]
        break;
 800363c:	e005      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800363e:	4b30      	ldr	r3, [pc, #192]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ef      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d159      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003650:	4b2a      	ldr	r3, [pc, #168]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01e      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	d019      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800366c:	4b23      	ldr	r3, [pc, #140]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003676:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003678:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367e:	4a1f      	ldr	r2, [pc, #124]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003688:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003698:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fe ff01 	bl	80024b0 <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b0:	e00b      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fefd 	bl	80024b0 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d902      	bls.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	74fb      	strb	r3, [r7, #19]
            break;
 80036c8:	e006      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ca:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ec      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10b      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036de:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ec:	4903      	ldr	r1, [pc, #12]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036f4:	e008      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	74bb      	strb	r3, [r7, #18]
 80036fa:	e005      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036fc:	40021000 	.word	0x40021000
 8003700:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003708:	7c7b      	ldrb	r3, [r7, #17]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370e:	4ba7      	ldr	r3, [pc, #668]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	4aa6      	ldr	r2, [pc, #664]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003718:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003726:	4ba1      	ldr	r3, [pc, #644]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372c:	f023 0203 	bic.w	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	499d      	ldr	r1, [pc, #628]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003748:	4b98      	ldr	r3, [pc, #608]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374e:	f023 020c 	bic.w	r2, r3, #12
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4995      	ldr	r1, [pc, #596]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800376a:	4b90      	ldr	r3, [pc, #576]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003770:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	498c      	ldr	r1, [pc, #560]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800378c:	4b87      	ldr	r3, [pc, #540]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	4984      	ldr	r1, [pc, #528]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ae:	4b7f      	ldr	r3, [pc, #508]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	497b      	ldr	r1, [pc, #492]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037d0:	4b76      	ldr	r3, [pc, #472]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	4973      	ldr	r1, [pc, #460]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f2:	4b6e      	ldr	r3, [pc, #440]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	496a      	ldr	r1, [pc, #424]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003814:	4b65      	ldr	r3, [pc, #404]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4962      	ldr	r1, [pc, #392]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003836:	4b5d      	ldr	r3, [pc, #372]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	4959      	ldr	r1, [pc, #356]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003858:	4b54      	ldr	r3, [pc, #336]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003866:	4951      	ldr	r1, [pc, #324]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800387a:	4b4c      	ldr	r3, [pc, #304]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003880:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	4948      	ldr	r1, [pc, #288]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800389c:	4b43      	ldr	r3, [pc, #268]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	4940      	ldr	r1, [pc, #256]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ba:	d105      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038bc:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a3a      	ldr	r2, [pc, #232]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038d4:	4b35      	ldr	r3, [pc, #212]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e2:	4932      	ldr	r1, [pc, #200]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038f2:	d105      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a2c      	ldr	r2, [pc, #176]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d015      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800390c:	4b27      	ldr	r3, [pc, #156]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	4924      	ldr	r1, [pc, #144]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800392a:	d105      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392c:	4b1f      	ldr	r3, [pc, #124]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a1e      	ldr	r2, [pc, #120]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003936:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d015      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003944:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	4916      	ldr	r1, [pc, #88]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003962:	d105      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003964:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a10      	ldr	r2, [pc, #64]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800396e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d019      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800397c:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	4908      	ldr	r1, [pc, #32]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800399c:	4b03      	ldr	r3, [pc, #12]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a02      	ldr	r2, [pc, #8]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039a6:	60d3      	str	r3, [r2, #12]
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039bc:	4b29      	ldr	r3, [pc, #164]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	4926      	ldr	r1, [pc, #152]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039da:	d105      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039dc:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a20      	ldr	r2, [pc, #128]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80039f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a02:	4918      	ldr	r1, [pc, #96]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a14:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4a12      	ldr	r2, [pc, #72]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	490a      	ldr	r1, [pc, #40]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a04      	ldr	r2, [pc, #16]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a58:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000

08003a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e049      	b.n	8003b0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe fac2 	bl	8002018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 fd96 	bl	80045d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d001      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e054      	b.n	8003bda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a26      	ldr	r2, [pc, #152]	@ (8003be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5a:	d01d      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a22      	ldr	r2, [pc, #136]	@ (8003bec <HAL_TIM_Base_Start_IT+0xd4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	@ (8003bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1c      	ldr	r2, [pc, #112]	@ (8003bfc <HAL_TIM_Base_Start_IT+0xe4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x80>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1b      	ldr	r2, [pc, #108]	@ (8003c00 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d115      	bne.n	8003bc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	4b19      	ldr	r3, [pc, #100]	@ (8003c04 <HAL_TIM_Base_Start_IT+0xec>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d015      	beq.n	8003bd6 <HAL_TIM_Base_Start_IT+0xbe>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb0:	d011      	beq.n	8003bd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc2:	e008      	b.n	8003bd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e000      	b.n	8003bd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	40013400 	.word	0x40013400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40015000 	.word	0x40015000
 8003c04:	00010007 	.word	0x00010007

08003c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e049      	b.n	8003cae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f841 	bl	8003cb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fcc6 	bl	80045d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <HAL_TIM_PWM_Start+0x24>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e03c      	b.n	8003d6a <HAL_TIM_PWM_Start+0x9e>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d109      	bne.n	8003d0a <HAL_TIM_PWM_Start+0x3e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	e02f      	b.n	8003d6a <HAL_TIM_PWM_Start+0x9e>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d109      	bne.n	8003d24 <HAL_TIM_PWM_Start+0x58>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e022      	b.n	8003d6a <HAL_TIM_PWM_Start+0x9e>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d109      	bne.n	8003d3e <HAL_TIM_PWM_Start+0x72>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e015      	b.n	8003d6a <HAL_TIM_PWM_Start+0x9e>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d109      	bne.n	8003d58 <HAL_TIM_PWM_Start+0x8c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e008      	b.n	8003d6a <HAL_TIM_PWM_Start+0x9e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0a6      	b.n	8003ec0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_PWM_Start+0xb6>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d80:	e023      	b.n	8003dca <HAL_TIM_PWM_Start+0xfe>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Start+0xc6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d90:	e01b      	b.n	8003dca <HAL_TIM_PWM_Start+0xfe>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Start+0xd6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da0:	e013      	b.n	8003dca <HAL_TIM_PWM_Start+0xfe>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start+0xe6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003db0:	e00b      	b.n	8003dca <HAL_TIM_PWM_Start+0xfe>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0xf6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dc0:	e003      	b.n	8003dca <HAL_TIM_PWM_Start+0xfe>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	6839      	ldr	r1, [r7, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 f87a 	bl	8004ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ec8 <HAL_TIM_PWM_Start+0x1fc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x148>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a39      	ldr	r2, [pc, #228]	@ (8003ecc <HAL_TIM_PWM_Start+0x200>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x148>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a37      	ldr	r2, [pc, #220]	@ (8003ed0 <HAL_TIM_PWM_Start+0x204>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x148>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a36      	ldr	r2, [pc, #216]	@ (8003ed4 <HAL_TIM_PWM_Start+0x208>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x148>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a34      	ldr	r2, [pc, #208]	@ (8003ed8 <HAL_TIM_PWM_Start+0x20c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x148>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a33      	ldr	r2, [pc, #204]	@ (8003edc <HAL_TIM_PWM_Start+0x210>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_TIM_PWM_Start+0x14c>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_TIM_PWM_Start+0x14e>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a25      	ldr	r2, [pc, #148]	@ (8003ec8 <HAL_TIM_PWM_Start+0x1fc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d022      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x1b2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e40:	d01d      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x1b2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a26      	ldr	r2, [pc, #152]	@ (8003ee0 <HAL_TIM_PWM_Start+0x214>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d018      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x1b2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a24      	ldr	r2, [pc, #144]	@ (8003ee4 <HAL_TIM_PWM_Start+0x218>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x1b2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a23      	ldr	r2, [pc, #140]	@ (8003ee8 <HAL_TIM_PWM_Start+0x21c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x1b2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a19      	ldr	r2, [pc, #100]	@ (8003ecc <HAL_TIM_PWM_Start+0x200>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x1b2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a18      	ldr	r2, [pc, #96]	@ (8003ed0 <HAL_TIM_PWM_Start+0x204>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x1b2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_TIM_PWM_Start+0x210>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d115      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_TIM_PWM_Start+0x220>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	d015      	beq.n	8003ebc <HAL_TIM_PWM_Start+0x1f0>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e96:	d011      	beq.n	8003ebc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	e008      	b.n	8003ebc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e000      	b.n	8003ebe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40013400 	.word	0x40013400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800
 8003edc:	40015000 	.word	0x40015000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	00010007 	.word	0x00010007

08003ef0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e097      	b.n	8004034 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fd ffa5 	bl	8001e68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003f34:	f023 0307 	bic.w	r3, r3, #7
 8003f38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f000 fb47 	bl	80045d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	4313      	orrs	r3, r2
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003f90:	f023 030c 	bic.w	r3, r3, #12
 8003f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	4313      	orrs	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	011a      	lsls	r2, r3, #4
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	031b      	lsls	r3, r3, #12
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800404c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004054:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800405c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004064:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d110      	bne.n	800408e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d102      	bne.n	8004078 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004072:	7b7b      	ldrb	r3, [r7, #13]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d001      	beq.n	800407c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e089      	b.n	8004190 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800408c:	e031      	b.n	80040f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b04      	cmp	r3, #4
 8004092:	d110      	bne.n	80040b6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004094:	7bbb      	ldrb	r3, [r7, #14]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d102      	bne.n	80040a0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800409a:	7b3b      	ldrb	r3, [r7, #12]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d001      	beq.n	80040a4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e075      	b.n	8004190 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040b4:	e01d      	b.n	80040f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d108      	bne.n	80040ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040bc:	7bbb      	ldrb	r3, [r7, #14]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d105      	bne.n	80040ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040c2:	7b7b      	ldrb	r3, [r7, #13]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040c8:	7b3b      	ldrb	r3, [r7, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e05e      	b.n	8004190 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_TIM_Encoder_Start_IT+0xc4>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d010      	beq.n	8004120 <HAL_TIM_Encoder_Start_IT+0xe4>
 80040fe:	e01f      	b.n	8004140 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2201      	movs	r2, #1
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fedf 	bl	8004ecc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0202 	orr.w	r2, r2, #2
 800411c:	60da      	str	r2, [r3, #12]
      break;
 800411e:	e02e      	b.n	800417e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	2104      	movs	r1, #4
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fecf 	bl	8004ecc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0204 	orr.w	r2, r2, #4
 800413c:	60da      	str	r2, [r3, #12]
      break;
 800413e:	e01e      	b.n	800417e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f000 febf 	bl	8004ecc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	2104      	movs	r1, #4
 8004156:	4618      	mov	r0, r3
 8004158:	f000 feb8 	bl	8004ecc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0202 	orr.w	r2, r2, #2
 800416a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0204 	orr.w	r2, r2, #4
 800417a:	60da      	str	r2, [r3, #12]
      break;
 800417c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0ff      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b14      	cmp	r3, #20
 80041c2:	f200 80f0 	bhi.w	80043a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004221 	.word	0x08004221
 80041d0:	080043a7 	.word	0x080043a7
 80041d4:	080043a7 	.word	0x080043a7
 80041d8:	080043a7 	.word	0x080043a7
 80041dc:	08004261 	.word	0x08004261
 80041e0:	080043a7 	.word	0x080043a7
 80041e4:	080043a7 	.word	0x080043a7
 80041e8:	080043a7 	.word	0x080043a7
 80041ec:	080042a3 	.word	0x080042a3
 80041f0:	080043a7 	.word	0x080043a7
 80041f4:	080043a7 	.word	0x080043a7
 80041f8:	080043a7 	.word	0x080043a7
 80041fc:	080042e3 	.word	0x080042e3
 8004200:	080043a7 	.word	0x080043a7
 8004204:	080043a7 	.word	0x080043a7
 8004208:	080043a7 	.word	0x080043a7
 800420c:	08004325 	.word	0x08004325
 8004210:	080043a7 	.word	0x080043a7
 8004214:	080043a7 	.word	0x080043a7
 8004218:	080043a7 	.word	0x080043a7
 800421c:	08004365 	.word	0x08004365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fa8a 	bl	8004740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0208 	orr.w	r2, r2, #8
 800423a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0204 	bic.w	r2, r2, #4
 800424a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6999      	ldr	r1, [r3, #24]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	619a      	str	r2, [r3, #24]
      break;
 800425e:	e0a5      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fb04 	bl	8004874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6999      	ldr	r1, [r3, #24]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	021a      	lsls	r2, r3, #8
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	619a      	str	r2, [r3, #24]
      break;
 80042a0:	e084      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fb77 	bl	800499c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0208 	orr.w	r2, r2, #8
 80042bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0204 	bic.w	r2, r2, #4
 80042cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69d9      	ldr	r1, [r3, #28]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	61da      	str	r2, [r3, #28]
      break;
 80042e0:	e064      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fbe9 	bl	8004ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69d9      	ldr	r1, [r3, #28]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	021a      	lsls	r2, r3, #8
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	61da      	str	r2, [r3, #28]
      break;
 8004322:	e043      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fc5c 	bl	8004be8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0208 	orr.w	r2, r2, #8
 800433e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004362:	e023      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fca6 	bl	8004cbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800437e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80043a4:	e002      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
      break;
 80043aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop

080043c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIM_ConfigClockSource+0x1c>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0ee      	b.n	80045ba <HAL_TIM_ConfigClockSource+0x1fa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80043fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6b      	ldr	r2, [pc, #428]	@ (80045c4 <HAL_TIM_ConfigClockSource+0x204>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f000 80b9 	beq.w	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 800441c:	4a69      	ldr	r2, [pc, #420]	@ (80045c4 <HAL_TIM_ConfigClockSource+0x204>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f200 80be 	bhi.w	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 8004424:	4a68      	ldr	r2, [pc, #416]	@ (80045c8 <HAL_TIM_ConfigClockSource+0x208>)
 8004426:	4293      	cmp	r3, r2
 8004428:	f000 80b1 	beq.w	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 800442c:	4a66      	ldr	r2, [pc, #408]	@ (80045c8 <HAL_TIM_ConfigClockSource+0x208>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f200 80b6 	bhi.w	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 8004434:	4a65      	ldr	r2, [pc, #404]	@ (80045cc <HAL_TIM_ConfigClockSource+0x20c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f000 80a9 	beq.w	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 800443c:	4a63      	ldr	r2, [pc, #396]	@ (80045cc <HAL_TIM_ConfigClockSource+0x20c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f200 80ae 	bhi.w	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 8004444:	4a62      	ldr	r2, [pc, #392]	@ (80045d0 <HAL_TIM_ConfigClockSource+0x210>)
 8004446:	4293      	cmp	r3, r2
 8004448:	f000 80a1 	beq.w	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 800444c:	4a60      	ldr	r2, [pc, #384]	@ (80045d0 <HAL_TIM_ConfigClockSource+0x210>)
 800444e:	4293      	cmp	r3, r2
 8004450:	f200 80a6 	bhi.w	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 8004454:	4a5f      	ldr	r2, [pc, #380]	@ (80045d4 <HAL_TIM_ConfigClockSource+0x214>)
 8004456:	4293      	cmp	r3, r2
 8004458:	f000 8099 	beq.w	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 800445c:	4a5d      	ldr	r2, [pc, #372]	@ (80045d4 <HAL_TIM_ConfigClockSource+0x214>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f200 809e 	bhi.w	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 8004464:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004468:	f000 8091 	beq.w	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 800446c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004470:	f200 8096 	bhi.w	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 8004474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004478:	f000 8089 	beq.w	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004480:	f200 808e 	bhi.w	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 8004484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004488:	d03e      	beq.n	8004508 <HAL_TIM_ConfigClockSource+0x148>
 800448a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800448e:	f200 8087 	bhi.w	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004496:	f000 8086 	beq.w	80045a6 <HAL_TIM_ConfigClockSource+0x1e6>
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449e:	d87f      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 80044a0:	2b70      	cmp	r3, #112	@ 0x70
 80044a2:	d01a      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x11a>
 80044a4:	2b70      	cmp	r3, #112	@ 0x70
 80044a6:	d87b      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 80044a8:	2b60      	cmp	r3, #96	@ 0x60
 80044aa:	d050      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x18e>
 80044ac:	2b60      	cmp	r3, #96	@ 0x60
 80044ae:	d877      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 80044b0:	2b50      	cmp	r3, #80	@ 0x50
 80044b2:	d03c      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
 80044b4:	2b50      	cmp	r3, #80	@ 0x50
 80044b6:	d873      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d058      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x1ae>
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d86f      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 80044c0:	2b30      	cmp	r3, #48	@ 0x30
 80044c2:	d064      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 80044c4:	2b30      	cmp	r3, #48	@ 0x30
 80044c6:	d86b      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d060      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d867      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d05c      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d05a      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x1ce>
 80044d8:	e062      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044ea:	f000 fccf 	bl	8004e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	609a      	str	r2, [r3, #8]
      break;
 8004506:	e04f      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004518:	f000 fcb8 	bl	8004e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800452a:	609a      	str	r2, [r3, #8]
      break;
 800452c:	e03c      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800453a:	461a      	mov	r2, r3
 800453c:	f000 fc2a 	bl	8004d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2150      	movs	r1, #80	@ 0x50
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fc83 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 800454c:	e02c      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800455a:	461a      	mov	r2, r3
 800455c:	f000 fc49 	bl	8004df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2160      	movs	r1, #96	@ 0x60
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fc73 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 800456c:	e01c      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800457a:	461a      	mov	r2, r3
 800457c:	f000 fc0a 	bl	8004d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2140      	movs	r1, #64	@ 0x40
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fc63 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 800458c:	e00c      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f000 fc5a 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 800459e:	e003      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      break;
 80045a4:	e000      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80045a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	00100070 	.word	0x00100070
 80045c8:	00100050 	.word	0x00100050
 80045cc:	00100040 	.word	0x00100040
 80045d0:	00100030 	.word	0x00100030
 80045d4:	00100020 	.word	0x00100020

080045d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a4c      	ldr	r2, [pc, #304]	@ (800471c <TIM_Base_SetConfig+0x144>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d017      	beq.n	8004620 <TIM_Base_SetConfig+0x48>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f6:	d013      	beq.n	8004620 <TIM_Base_SetConfig+0x48>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a49      	ldr	r2, [pc, #292]	@ (8004720 <TIM_Base_SetConfig+0x148>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00f      	beq.n	8004620 <TIM_Base_SetConfig+0x48>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a48      	ldr	r2, [pc, #288]	@ (8004724 <TIM_Base_SetConfig+0x14c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00b      	beq.n	8004620 <TIM_Base_SetConfig+0x48>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a47      	ldr	r2, [pc, #284]	@ (8004728 <TIM_Base_SetConfig+0x150>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <TIM_Base_SetConfig+0x48>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a46      	ldr	r2, [pc, #280]	@ (800472c <TIM_Base_SetConfig+0x154>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_Base_SetConfig+0x48>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a45      	ldr	r2, [pc, #276]	@ (8004730 <TIM_Base_SetConfig+0x158>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d108      	bne.n	8004632 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a39      	ldr	r2, [pc, #228]	@ (800471c <TIM_Base_SetConfig+0x144>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d023      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004640:	d01f      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a36      	ldr	r2, [pc, #216]	@ (8004720 <TIM_Base_SetConfig+0x148>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01b      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a35      	ldr	r2, [pc, #212]	@ (8004724 <TIM_Base_SetConfig+0x14c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d017      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a34      	ldr	r2, [pc, #208]	@ (8004728 <TIM_Base_SetConfig+0x150>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a33      	ldr	r2, [pc, #204]	@ (800472c <TIM_Base_SetConfig+0x154>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00f      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a33      	ldr	r2, [pc, #204]	@ (8004734 <TIM_Base_SetConfig+0x15c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00b      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a32      	ldr	r2, [pc, #200]	@ (8004738 <TIM_Base_SetConfig+0x160>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a31      	ldr	r2, [pc, #196]	@ (800473c <TIM_Base_SetConfig+0x164>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_Base_SetConfig+0xaa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2c      	ldr	r2, [pc, #176]	@ (8004730 <TIM_Base_SetConfig+0x158>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d108      	bne.n	8004694 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a18      	ldr	r2, [pc, #96]	@ (800471c <TIM_Base_SetConfig+0x144>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <TIM_Base_SetConfig+0x110>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a1a      	ldr	r2, [pc, #104]	@ (800472c <TIM_Base_SetConfig+0x154>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00f      	beq.n	80046e8 <TIM_Base_SetConfig+0x110>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004734 <TIM_Base_SetConfig+0x15c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <TIM_Base_SetConfig+0x110>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a19      	ldr	r2, [pc, #100]	@ (8004738 <TIM_Base_SetConfig+0x160>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <TIM_Base_SetConfig+0x110>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a18      	ldr	r2, [pc, #96]	@ (800473c <TIM_Base_SetConfig+0x164>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_Base_SetConfig+0x110>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a13      	ldr	r2, [pc, #76]	@ (8004730 <TIM_Base_SetConfig+0x158>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d105      	bne.n	800470e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f023 0201 	bic.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	611a      	str	r2, [r3, #16]
  }
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40013400 	.word	0x40013400
 8004730:	40015000 	.word	0x40015000
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f023 0201 	bic.w	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 0302 	bic.w	r3, r3, #2
 800478c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a30      	ldr	r2, [pc, #192]	@ (800485c <TIM_OC1_SetConfig+0x11c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <TIM_OC1_SetConfig+0x88>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004860 <TIM_OC1_SetConfig+0x120>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00f      	beq.n	80047c8 <TIM_OC1_SetConfig+0x88>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004864 <TIM_OC1_SetConfig+0x124>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <TIM_OC1_SetConfig+0x88>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004868 <TIM_OC1_SetConfig+0x128>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_OC1_SetConfig+0x88>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	@ (800486c <TIM_OC1_SetConfig+0x12c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_OC1_SetConfig+0x88>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004870 <TIM_OC1_SetConfig+0x130>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10c      	bne.n	80047e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0308 	bic.w	r3, r3, #8
 80047ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <TIM_OC1_SetConfig+0x11c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <TIM_OC1_SetConfig+0xd2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004860 <TIM_OC1_SetConfig+0x120>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00f      	beq.n	8004812 <TIM_OC1_SetConfig+0xd2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004864 <TIM_OC1_SetConfig+0x124>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00b      	beq.n	8004812 <TIM_OC1_SetConfig+0xd2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004868 <TIM_OC1_SetConfig+0x128>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d007      	beq.n	8004812 <TIM_OC1_SetConfig+0xd2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a19      	ldr	r2, [pc, #100]	@ (800486c <TIM_OC1_SetConfig+0x12c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_OC1_SetConfig+0xd2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a18      	ldr	r2, [pc, #96]	@ (8004870 <TIM_OC1_SetConfig+0x130>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d111      	bne.n	8004836 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	621a      	str	r2, [r3, #32]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40013400 	.word	0x40013400
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800
 8004870:	40015000 	.word	0x40015000

08004874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f023 0210 	bic.w	r2, r3, #16
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0320 	bic.w	r3, r3, #32
 80048c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004984 <TIM_OC2_SetConfig+0x110>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_OC2_SetConfig+0x74>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a2b      	ldr	r2, [pc, #172]	@ (8004988 <TIM_OC2_SetConfig+0x114>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_OC2_SetConfig+0x74>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a2a      	ldr	r2, [pc, #168]	@ (800498c <TIM_OC2_SetConfig+0x118>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d10d      	bne.n	8004904 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <TIM_OC2_SetConfig+0x110>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <TIM_OC2_SetConfig+0xc0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <TIM_OC2_SetConfig+0x114>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00f      	beq.n	8004934 <TIM_OC2_SetConfig+0xc0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1e      	ldr	r2, [pc, #120]	@ (8004990 <TIM_OC2_SetConfig+0x11c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_OC2_SetConfig+0xc0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a1d      	ldr	r2, [pc, #116]	@ (8004994 <TIM_OC2_SetConfig+0x120>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_OC2_SetConfig+0xc0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a1c      	ldr	r2, [pc, #112]	@ (8004998 <TIM_OC2_SetConfig+0x124>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_OC2_SetConfig+0xc0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a17      	ldr	r2, [pc, #92]	@ (800498c <TIM_OC2_SetConfig+0x118>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d113      	bne.n	800495c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800493a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40013400 	.word	0x40013400
 800498c:	40015000 	.word	0x40015000
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa8 <TIM_OC3_SetConfig+0x10c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_OC3_SetConfig+0x72>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2a      	ldr	r2, [pc, #168]	@ (8004aac <TIM_OC3_SetConfig+0x110>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_OC3_SetConfig+0x72>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a29      	ldr	r2, [pc, #164]	@ (8004ab0 <TIM_OC3_SetConfig+0x114>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10d      	bne.n	8004a2a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa8 <TIM_OC3_SetConfig+0x10c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <TIM_OC3_SetConfig+0xbe>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1d      	ldr	r2, [pc, #116]	@ (8004aac <TIM_OC3_SetConfig+0x110>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <TIM_OC3_SetConfig+0xbe>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab4 <TIM_OC3_SetConfig+0x118>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_OC3_SetConfig+0xbe>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <TIM_OC3_SetConfig+0x11c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_OC3_SetConfig+0xbe>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004abc <TIM_OC3_SetConfig+0x120>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC3_SetConfig+0xbe>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a16      	ldr	r2, [pc, #88]	@ (8004ab0 <TIM_OC3_SetConfig+0x114>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d113      	bne.n	8004a82 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40013400 	.word	0x40013400
 8004ab0:	40015000 	.word	0x40015000
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800

08004ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd0 <TIM_OC4_SetConfig+0x110>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_OC4_SetConfig+0x74>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd4 <TIM_OC4_SetConfig+0x114>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC4_SetConfig+0x74>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd8 <TIM_OC4_SetConfig+0x118>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10d      	bne.n	8004b50 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	031b      	lsls	r3, r3, #12
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd0 <TIM_OC4_SetConfig+0x110>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_OC4_SetConfig+0xc0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd4 <TIM_OC4_SetConfig+0x114>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00f      	beq.n	8004b80 <TIM_OC4_SetConfig+0xc0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a1e      	ldr	r2, [pc, #120]	@ (8004bdc <TIM_OC4_SetConfig+0x11c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_OC4_SetConfig+0xc0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004be0 <TIM_OC4_SetConfig+0x120>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_OC4_SetConfig+0xc0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a1c      	ldr	r2, [pc, #112]	@ (8004be4 <TIM_OC4_SetConfig+0x124>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_OC4_SetConfig+0xc0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	@ (8004bd8 <TIM_OC4_SetConfig+0x118>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d113      	bne.n	8004ba8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	019b      	lsls	r3, r3, #6
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40015000 	.word	0x40015000
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	40014400 	.word	0x40014400
 8004be4:	40014800 	.word	0x40014800

08004be8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	041b      	lsls	r3, r3, #16
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <TIM_OC5_SetConfig+0xbc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <TIM_OC5_SetConfig+0x82>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <TIM_OC5_SetConfig+0xc0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00f      	beq.n	8004c6a <TIM_OC5_SetConfig+0x82>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a17      	ldr	r2, [pc, #92]	@ (8004cac <TIM_OC5_SetConfig+0xc4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <TIM_OC5_SetConfig+0x82>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a16      	ldr	r2, [pc, #88]	@ (8004cb0 <TIM_OC5_SetConfig+0xc8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_OC5_SetConfig+0x82>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a15      	ldr	r2, [pc, #84]	@ (8004cb4 <TIM_OC5_SetConfig+0xcc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_OC5_SetConfig+0x82>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a14      	ldr	r2, [pc, #80]	@ (8004cb8 <TIM_OC5_SetConfig+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d109      	bne.n	8004c7e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40013400 	.word	0x40013400
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40014400 	.word	0x40014400
 8004cb4:	40014800 	.word	0x40014800
 8004cb8:	40015000 	.word	0x40015000

08004cbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	051b      	lsls	r3, r3, #20
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <TIM_OC6_SetConfig+0xc0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <TIM_OC6_SetConfig+0x84>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a19      	ldr	r2, [pc, #100]	@ (8004d80 <TIM_OC6_SetConfig+0xc4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00f      	beq.n	8004d40 <TIM_OC6_SetConfig+0x84>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a18      	ldr	r2, [pc, #96]	@ (8004d84 <TIM_OC6_SetConfig+0xc8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <TIM_OC6_SetConfig+0x84>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a17      	ldr	r2, [pc, #92]	@ (8004d88 <TIM_OC6_SetConfig+0xcc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_OC6_SetConfig+0x84>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a16      	ldr	r2, [pc, #88]	@ (8004d8c <TIM_OC6_SetConfig+0xd0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_OC6_SetConfig+0x84>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	@ (8004d90 <TIM_OC6_SetConfig+0xd4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d109      	bne.n	8004d54 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	029b      	lsls	r3, r3, #10
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40013400 	.word	0x40013400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800
 8004d90:	40015000 	.word	0x40015000

08004d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0201 	bic.w	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f023 030a 	bic.w	r3, r3, #10
 8004dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b087      	sub	sp, #28
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f023 0210 	bic.w	r2, r3, #16
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	031b      	lsls	r3, r3, #12
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f043 0307 	orr.w	r3, r3, #7
 8004e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	2201      	movs	r2, #1
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	401a      	ands	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1a      	ldr	r2, [r3, #32]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e074      	b.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a34      	ldr	r2, [pc, #208]	@ (8005028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a33      	ldr	r2, [pc, #204]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a31      	ldr	r2, [pc, #196]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d108      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a21      	ldr	r2, [pc, #132]	@ (8005028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d022      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb0:	d01d      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d018      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1c      	ldr	r2, [pc, #112]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a15      	ldr	r2, [pc, #84]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a18      	ldr	r2, [pc, #96]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a11      	ldr	r2, [pc, #68]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10c      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40015000 	.word	0x40015000
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40014000 	.word	0x40014000

08005044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e042      	b.n	80050dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fd f8fb 	bl	8002264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2224      	movs	r2, #36	@ 0x24
 8005072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fbb2 	bl	80057f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8b3 	bl	8005200 <UART_SetConfig>
 800509a:	4603      	mov	r3, r0
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e01b      	b.n	80050dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fc31 	bl	800593c <UART_CheckIdleState>
 80050da:	4603      	mov	r3, r0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	@ 0x28
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d17b      	bne.n	80051f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_UART_Transmit+0x26>
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e074      	b.n	80051f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2221      	movs	r2, #33	@ 0x21
 800511a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800511e:	f7fd f9c7 	bl	80024b0 <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513c:	d108      	bne.n	8005150 <HAL_UART_Transmit+0x6c>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	e003      	b.n	8005158 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005158:	e030      	b.n	80051bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	2180      	movs	r1, #128	@ 0x80
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fc93 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e03d      	b.n	80051f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005190:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	3302      	adds	r3, #2
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e007      	b.n	80051aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1c8      	bne.n	800515a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	2140      	movs	r1, #64	@ 0x40
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fc5c 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e006      	b.n	80051f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e000      	b.n	80051f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005204:	b08c      	sub	sp, #48	@ 0x30
 8005206:	af00      	add	r7, sp, #0
 8005208:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	431a      	orrs	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	431a      	orrs	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4313      	orrs	r3, r2
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4baa      	ldr	r3, [pc, #680]	@ (80054d8 <UART_SetConfig+0x2d8>)
 8005230:	4013      	ands	r3, r2
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005238:	430b      	orrs	r3, r1
 800523a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a9f      	ldr	r2, [pc, #636]	@ (80054dc <UART_SetConfig+0x2dc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005268:	4313      	orrs	r3, r2
 800526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005276:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005280:	430b      	orrs	r3, r1
 8005282:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	f023 010f 	bic.w	r1, r3, #15
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a90      	ldr	r2, [pc, #576]	@ (80054e0 <UART_SetConfig+0x2e0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d125      	bne.n	80052f0 <UART_SetConfig+0xf0>
 80052a4:	4b8f      	ldr	r3, [pc, #572]	@ (80054e4 <UART_SetConfig+0x2e4>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d81a      	bhi.n	80052e8 <UART_SetConfig+0xe8>
 80052b2:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <UART_SetConfig+0xb8>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052e1 	.word	0x080052e1
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ce:	e116      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d6:	e112      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052de:	e10e      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e10a      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e106      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a7c      	ldr	r2, [pc, #496]	@ (80054e8 <UART_SetConfig+0x2e8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d138      	bne.n	800536c <UART_SetConfig+0x16c>
 80052fa:	4b7a      	ldr	r3, [pc, #488]	@ (80054e4 <UART_SetConfig+0x2e4>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005300:	f003 030c 	and.w	r3, r3, #12
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d82d      	bhi.n	8005364 <UART_SetConfig+0x164>
 8005308:	a201      	add	r2, pc, #4	@ (adr r2, 8005310 <UART_SetConfig+0x110>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005345 	.word	0x08005345
 8005314:	08005365 	.word	0x08005365
 8005318:	08005365 	.word	0x08005365
 800531c:	08005365 	.word	0x08005365
 8005320:	08005355 	.word	0x08005355
 8005324:	08005365 	.word	0x08005365
 8005328:	08005365 	.word	0x08005365
 800532c:	08005365 	.word	0x08005365
 8005330:	0800534d 	.word	0x0800534d
 8005334:	08005365 	.word	0x08005365
 8005338:	08005365 	.word	0x08005365
 800533c:	08005365 	.word	0x08005365
 8005340:	0800535d 	.word	0x0800535d
 8005344:	2300      	movs	r3, #0
 8005346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534a:	e0d8      	b.n	80054fe <UART_SetConfig+0x2fe>
 800534c:	2302      	movs	r3, #2
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005352:	e0d4      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535a:	e0d0      	b.n	80054fe <UART_SetConfig+0x2fe>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005362:	e0cc      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e0c8      	b.n	80054fe <UART_SetConfig+0x2fe>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5e      	ldr	r2, [pc, #376]	@ (80054ec <UART_SetConfig+0x2ec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d125      	bne.n	80053c2 <UART_SetConfig+0x1c2>
 8005376:	4b5b      	ldr	r3, [pc, #364]	@ (80054e4 <UART_SetConfig+0x2e4>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005380:	2b30      	cmp	r3, #48	@ 0x30
 8005382:	d016      	beq.n	80053b2 <UART_SetConfig+0x1b2>
 8005384:	2b30      	cmp	r3, #48	@ 0x30
 8005386:	d818      	bhi.n	80053ba <UART_SetConfig+0x1ba>
 8005388:	2b20      	cmp	r3, #32
 800538a:	d00a      	beq.n	80053a2 <UART_SetConfig+0x1a2>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d814      	bhi.n	80053ba <UART_SetConfig+0x1ba>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <UART_SetConfig+0x19a>
 8005394:	2b10      	cmp	r3, #16
 8005396:	d008      	beq.n	80053aa <UART_SetConfig+0x1aa>
 8005398:	e00f      	b.n	80053ba <UART_SetConfig+0x1ba>
 800539a:	2300      	movs	r3, #0
 800539c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a0:	e0ad      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053a2:	2302      	movs	r3, #2
 80053a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a8:	e0a9      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053aa:	2304      	movs	r3, #4
 80053ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b0:	e0a5      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053b2:	2308      	movs	r3, #8
 80053b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b8:	e0a1      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053ba:	2310      	movs	r3, #16
 80053bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c0:	e09d      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a4a      	ldr	r2, [pc, #296]	@ (80054f0 <UART_SetConfig+0x2f0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d125      	bne.n	8005418 <UART_SetConfig+0x218>
 80053cc:	4b45      	ldr	r3, [pc, #276]	@ (80054e4 <UART_SetConfig+0x2e4>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053d8:	d016      	beq.n	8005408 <UART_SetConfig+0x208>
 80053da:	2bc0      	cmp	r3, #192	@ 0xc0
 80053dc:	d818      	bhi.n	8005410 <UART_SetConfig+0x210>
 80053de:	2b80      	cmp	r3, #128	@ 0x80
 80053e0:	d00a      	beq.n	80053f8 <UART_SetConfig+0x1f8>
 80053e2:	2b80      	cmp	r3, #128	@ 0x80
 80053e4:	d814      	bhi.n	8005410 <UART_SetConfig+0x210>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <UART_SetConfig+0x1f0>
 80053ea:	2b40      	cmp	r3, #64	@ 0x40
 80053ec:	d008      	beq.n	8005400 <UART_SetConfig+0x200>
 80053ee:	e00f      	b.n	8005410 <UART_SetConfig+0x210>
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f6:	e082      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053f8:	2302      	movs	r3, #2
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fe:	e07e      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005400:	2304      	movs	r3, #4
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005406:	e07a      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005408:	2308      	movs	r3, #8
 800540a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540e:	e076      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005410:	2310      	movs	r3, #16
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005416:	e072      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a35      	ldr	r2, [pc, #212]	@ (80054f4 <UART_SetConfig+0x2f4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d12a      	bne.n	8005478 <UART_SetConfig+0x278>
 8005422:	4b30      	ldr	r3, [pc, #192]	@ (80054e4 <UART_SetConfig+0x2e4>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005430:	d01a      	beq.n	8005468 <UART_SetConfig+0x268>
 8005432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005436:	d81b      	bhi.n	8005470 <UART_SetConfig+0x270>
 8005438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800543c:	d00c      	beq.n	8005458 <UART_SetConfig+0x258>
 800543e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005442:	d815      	bhi.n	8005470 <UART_SetConfig+0x270>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <UART_SetConfig+0x250>
 8005448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800544c:	d008      	beq.n	8005460 <UART_SetConfig+0x260>
 800544e:	e00f      	b.n	8005470 <UART_SetConfig+0x270>
 8005450:	2300      	movs	r3, #0
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005456:	e052      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005458:	2302      	movs	r3, #2
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545e:	e04e      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005460:	2304      	movs	r3, #4
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005466:	e04a      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005468:	2308      	movs	r3, #8
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546e:	e046      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005470:	2310      	movs	r3, #16
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005476:	e042      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a17      	ldr	r2, [pc, #92]	@ (80054dc <UART_SetConfig+0x2dc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d13a      	bne.n	80054f8 <UART_SetConfig+0x2f8>
 8005482:	4b18      	ldr	r3, [pc, #96]	@ (80054e4 <UART_SetConfig+0x2e4>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800548c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005490:	d01a      	beq.n	80054c8 <UART_SetConfig+0x2c8>
 8005492:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005496:	d81b      	bhi.n	80054d0 <UART_SetConfig+0x2d0>
 8005498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800549c:	d00c      	beq.n	80054b8 <UART_SetConfig+0x2b8>
 800549e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a2:	d815      	bhi.n	80054d0 <UART_SetConfig+0x2d0>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <UART_SetConfig+0x2b0>
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ac:	d008      	beq.n	80054c0 <UART_SetConfig+0x2c0>
 80054ae:	e00f      	b.n	80054d0 <UART_SetConfig+0x2d0>
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b6:	e022      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054b8:	2302      	movs	r3, #2
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054be:	e01e      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c6:	e01a      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ce:	e016      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d6:	e012      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054d8:	cfff69f3 	.word	0xcfff69f3
 80054dc:	40008000 	.word	0x40008000
 80054e0:	40013800 	.word	0x40013800
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40004400 	.word	0x40004400
 80054ec:	40004800 	.word	0x40004800
 80054f0:	40004c00 	.word	0x40004c00
 80054f4:	40005000 	.word	0x40005000
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4aae      	ldr	r2, [pc, #696]	@ (80057bc <UART_SetConfig+0x5bc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	f040 8097 	bne.w	8005638 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800550a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800550e:	2b08      	cmp	r3, #8
 8005510:	d823      	bhi.n	800555a <UART_SetConfig+0x35a>
 8005512:	a201      	add	r2, pc, #4	@ (adr r2, 8005518 <UART_SetConfig+0x318>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800553d 	.word	0x0800553d
 800551c:	0800555b 	.word	0x0800555b
 8005520:	08005545 	.word	0x08005545
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800554b 	.word	0x0800554b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800555b 	.word	0x0800555b
 8005538:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fd ffd4 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8005540:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b9e      	ldr	r3, [pc, #632]	@ (80057c0 <UART_SetConfig+0x5c0>)
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005548:	e00d      	b.n	8005566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fd ff5f 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800554e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005550:	e009      	b.n	8005566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8130 	beq.w	80057ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	4a94      	ldr	r2, [pc, #592]	@ (80057c4 <UART_SetConfig+0x5c4>)
 8005574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005578:	461a      	mov	r2, r3
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005580:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	429a      	cmp	r2, r3
 8005590:	d305      	bcc.n	800559e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055a4:	e113      	b.n	80057ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	2200      	movs	r2, #0
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	60fa      	str	r2, [r7, #12]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	4a84      	ldr	r2, [pc, #528]	@ (80057c4 <UART_SetConfig+0x5c4>)
 80055b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2200      	movs	r2, #0
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055c8:	f7fb fa6c 	bl	8000aa4 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4610      	mov	r0, r2
 80055d2:	4619      	mov	r1, r3
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	020b      	lsls	r3, r1, #8
 80055de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055e2:	0202      	lsls	r2, r0, #8
 80055e4:	6979      	ldr	r1, [r7, #20]
 80055e6:	6849      	ldr	r1, [r1, #4]
 80055e8:	0849      	lsrs	r1, r1, #1
 80055ea:	2000      	movs	r0, #0
 80055ec:	460c      	mov	r4, r1
 80055ee:	4605      	mov	r5, r0
 80055f0:	eb12 0804 	adds.w	r8, r2, r4
 80055f4:	eb43 0905 	adc.w	r9, r3, r5
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	469a      	mov	sl, r3
 8005600:	4693      	mov	fp, r2
 8005602:	4652      	mov	r2, sl
 8005604:	465b      	mov	r3, fp
 8005606:	4640      	mov	r0, r8
 8005608:	4649      	mov	r1, r9
 800560a:	f7fb fa4b 	bl	8000aa4 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4613      	mov	r3, r2
 8005614:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800561c:	d308      	bcc.n	8005630 <UART_SetConfig+0x430>
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005624:	d204      	bcs.n	8005630 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a3a      	ldr	r2, [r7, #32]
 800562c:	60da      	str	r2, [r3, #12]
 800562e:	e0ce      	b.n	80057ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005636:	e0ca      	b.n	80057ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005640:	d166      	bne.n	8005710 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005642:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005646:	2b08      	cmp	r3, #8
 8005648:	d827      	bhi.n	800569a <UART_SetConfig+0x49a>
 800564a:	a201      	add	r2, pc, #4	@ (adr r2, 8005650 <UART_SetConfig+0x450>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005675 	.word	0x08005675
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005685 	.word	0x08005685
 800565c:	0800569b 	.word	0x0800569b
 8005660:	0800568b 	.word	0x0800568b
 8005664:	0800569b 	.word	0x0800569b
 8005668:	0800569b 	.word	0x0800569b
 800566c:	0800569b 	.word	0x0800569b
 8005670:	08005693 	.word	0x08005693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005674:	f7fd ff38 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8005678:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800567a:	e014      	b.n	80056a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7fd ff4a 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8005680:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005682:	e010      	b.n	80056a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005684:	4b4e      	ldr	r3, [pc, #312]	@ (80057c0 <UART_SetConfig+0x5c0>)
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005688:	e00d      	b.n	80056a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568a:	f7fd febf 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800568e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005690:	e009      	b.n	80056a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005698:	e005      	b.n	80056a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8090 	beq.w	80057ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	4a44      	ldr	r2, [pc, #272]	@ (80057c4 <UART_SetConfig+0x5c4>)
 80056b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c0:	005a      	lsls	r2, r3, #1
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	441a      	add	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d916      	bls.n	8005708 <UART_SetConfig+0x508>
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e0:	d212      	bcs.n	8005708 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f023 030f 	bic.w	r3, r3, #15
 80056ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	8bfb      	ldrh	r3, [r7, #30]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	8bfa      	ldrh	r2, [r7, #30]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	e062      	b.n	80057ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800570e:	e05e      	b.n	80057ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005710:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005714:	2b08      	cmp	r3, #8
 8005716:	d828      	bhi.n	800576a <UART_SetConfig+0x56a>
 8005718:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <UART_SetConfig+0x520>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005745 	.word	0x08005745
 8005724:	0800574d 	.word	0x0800574d
 8005728:	08005755 	.word	0x08005755
 800572c:	0800576b 	.word	0x0800576b
 8005730:	0800575b 	.word	0x0800575b
 8005734:	0800576b 	.word	0x0800576b
 8005738:	0800576b 	.word	0x0800576b
 800573c:	0800576b 	.word	0x0800576b
 8005740:	08005763 	.word	0x08005763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005744:	f7fd fed0 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8005748:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800574a:	e014      	b.n	8005776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800574c:	f7fd fee2 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8005750:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005752:	e010      	b.n	8005776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005754:	4b1a      	ldr	r3, [pc, #104]	@ (80057c0 <UART_SetConfig+0x5c0>)
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005758:	e00d      	b.n	8005776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575a:	f7fd fe57 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800575e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005760:	e009      	b.n	8005776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005768:	e005      	b.n	8005776 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005774:	bf00      	nop
    }

    if (pclk != 0U)
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d028      	beq.n	80057ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	4a10      	ldr	r2, [pc, #64]	@ (80057c4 <UART_SetConfig+0x5c4>)
 8005782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005786:	461a      	mov	r2, r3
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	fbb3 f2f2 	udiv	r2, r3, r2
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	441a      	add	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	fbb2 f3f3 	udiv	r3, r2, r3
 800579e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	d910      	bls.n	80057c8 <UART_SetConfig+0x5c8>
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ac:	d20c      	bcs.n	80057c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	e009      	b.n	80057ce <UART_SetConfig+0x5ce>
 80057ba:	bf00      	nop
 80057bc:	40008000 	.word	0x40008000
 80057c0:	00f42400 	.word	0x00f42400
 80057c4:	08005ec4 	.word	0x08005ec4
      }
      else
      {
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2201      	movs	r2, #1
 80057da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2200      	movs	r2, #0
 80057e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3730      	adds	r7, #48	@ 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01a      	beq.n	800590e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058f6:	d10a      	bne.n	800590e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	605a      	str	r2, [r3, #4]
  }
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b098      	sub	sp, #96	@ 0x60
 8005940:	af02      	add	r7, sp, #8
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800594c:	f7fc fdb0 	bl	80024b0 <HAL_GetTick>
 8005950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b08      	cmp	r3, #8
 800595e:	d12f      	bne.n	80059c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005968:	2200      	movs	r2, #0
 800596a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f88e 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d022      	beq.n	80059c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800598e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005998:	647b      	str	r3, [r7, #68]	@ 0x44
 800599a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800599e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e6      	bne.n	800597a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e063      	b.n	8005a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d149      	bne.n	8005a62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d6:	2200      	movs	r2, #0
 80059d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f857 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d03c      	beq.n	8005a62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	623b      	str	r3, [r7, #32]
   return(result);
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e6      	bne.n	80059e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3a:	61fa      	str	r2, [r7, #28]
 8005a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	69b9      	ldr	r1, [r7, #24]
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	617b      	str	r3, [r7, #20]
   return(result);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e012      	b.n	8005a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3758      	adds	r7, #88	@ 0x58
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa0:	e04f      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aa8:	d04b      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fc fd01 	bl	80024b0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e04e      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d037      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b80      	cmp	r3, #128	@ 0x80
 8005ad6:	d034      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d031      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d110      	bne.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2208      	movs	r2, #8
 8005af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f838 	bl	8005b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2208      	movs	r2, #8
 8005afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e029      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b1c:	d111      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f81e 	bl	8005b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e00f      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	bf0c      	ite	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	2300      	movne	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d0a0      	beq.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b095      	sub	sp, #84	@ 0x54
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e6      	bne.n	8005b72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e3      	bne.n	8005ba4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d118      	bne.n	8005c16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f023 0310 	bic.w	r3, r3, #16
 8005bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e6      	bne.n	8005be4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c2a:	bf00      	nop
 8005c2c:	3754      	adds	r7, #84	@ 0x54
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_UARTEx_DisableFifoMode+0x16>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e027      	b.n	8005c9c <HAL_UARTEx_DisableFifoMode+0x66>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	@ 0x24
 8005c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e02d      	b.n	8005d1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	@ 0x24
 8005ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f84f 	bl	8005da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e02d      	b.n	8005d98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	@ 0x24
 8005d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f811 	bl	8005da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dc0:	e031      	b.n	8005e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	0e5b      	lsrs	r3, r3, #25
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	0f5b      	lsrs	r3, r3, #29
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dea:	7bbb      	ldrb	r3, [r7, #14]
 8005dec:	7b3a      	ldrb	r2, [r7, #12]
 8005dee:	4911      	ldr	r1, [pc, #68]	@ (8005e34 <UARTEx_SetNbDataToProcess+0x94>)
 8005df0:	5c8a      	ldrb	r2, [r1, r2]
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005df6:	7b3a      	ldrb	r2, [r7, #12]
 8005df8:	490f      	ldr	r1, [pc, #60]	@ (8005e38 <UARTEx_SetNbDataToProcess+0x98>)
 8005dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	7b7a      	ldrb	r2, [r7, #13]
 8005e0c:	4909      	ldr	r1, [pc, #36]	@ (8005e34 <UARTEx_SetNbDataToProcess+0x94>)
 8005e0e:	5c8a      	ldrb	r2, [r1, r2]
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e14:	7b7a      	ldrb	r2, [r7, #13]
 8005e16:	4908      	ldr	r1, [pc, #32]	@ (8005e38 <UARTEx_SetNbDataToProcess+0x98>)
 8005e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	08005edc 	.word	0x08005edc
 8005e38:	08005ee4 	.word	0x08005ee4

08005e3c <memset>:
 8005e3c:	4402      	add	r2, r0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d100      	bne.n	8005e46 <memset+0xa>
 8005e44:	4770      	bx	lr
 8005e46:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4a:	e7f9      	b.n	8005e40 <memset+0x4>

08005e4c <__libc_init_array>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e84 <__libc_init_array+0x38>)
 8005e50:	4c0d      	ldr	r4, [pc, #52]	@ (8005e88 <__libc_init_array+0x3c>)
 8005e52:	1b64      	subs	r4, r4, r5
 8005e54:	10a4      	asrs	r4, r4, #2
 8005e56:	2600      	movs	r6, #0
 8005e58:	42a6      	cmp	r6, r4
 8005e5a:	d109      	bne.n	8005e70 <__libc_init_array+0x24>
 8005e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8005e8c <__libc_init_array+0x40>)
 8005e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8005e90 <__libc_init_array+0x44>)
 8005e60:	f000 f818 	bl	8005e94 <_init>
 8005e64:	1b64      	subs	r4, r4, r5
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	2600      	movs	r6, #0
 8005e6a:	42a6      	cmp	r6, r4
 8005e6c:	d105      	bne.n	8005e7a <__libc_init_array+0x2e>
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e74:	4798      	blx	r3
 8005e76:	3601      	adds	r6, #1
 8005e78:	e7ee      	b.n	8005e58 <__libc_init_array+0xc>
 8005e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7e:	4798      	blx	r3
 8005e80:	3601      	adds	r6, #1
 8005e82:	e7f2      	b.n	8005e6a <__libc_init_array+0x1e>
 8005e84:	08005ef4 	.word	0x08005ef4
 8005e88:	08005ef4 	.word	0x08005ef4
 8005e8c:	08005ef4 	.word	0x08005ef4
 8005e90:	08005ef8 	.word	0x08005ef8

08005e94 <_init>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr

08005ea0 <_fini>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr
