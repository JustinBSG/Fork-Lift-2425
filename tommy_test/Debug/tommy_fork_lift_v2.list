
tommy_fork_lift_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004594  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800476c  0800476c  0000576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ac  080047ac  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b4  080047b4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080047bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  080047c8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080047c8  00006288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d59  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bf  00000000  00000000  00017d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9a  00000000  00000000  0001b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022bb  00000000  00000000  0001bf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001346d  00000000  00000000  0001e1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d93eb  00000000  00000000  0003163a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aa25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  0010aa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0010ee54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004754 	.word	0x08004754

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004754 	.word	0x08004754

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b3f      	ldr	r3, [pc, #252]	@ (800061c <MX_GPIO_Init+0x114>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a3e      	ldr	r2, [pc, #248]	@ (800061c <MX_GPIO_Init+0x114>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b3c      	ldr	r3, [pc, #240]	@ (800061c <MX_GPIO_Init+0x114>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b39      	ldr	r3, [pc, #228]	@ (800061c <MX_GPIO_Init+0x114>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a38      	ldr	r2, [pc, #224]	@ (800061c <MX_GPIO_Init+0x114>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b36      	ldr	r3, [pc, #216]	@ (800061c <MX_GPIO_Init+0x114>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b33      	ldr	r3, [pc, #204]	@ (800061c <MX_GPIO_Init+0x114>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a32      	ldr	r2, [pc, #200]	@ (800061c <MX_GPIO_Init+0x114>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b30      	ldr	r3, [pc, #192]	@ (800061c <MX_GPIO_Init+0x114>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b2d      	ldr	r3, [pc, #180]	@ (800061c <MX_GPIO_Init+0x114>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a2c      	ldr	r2, [pc, #176]	@ (800061c <MX_GPIO_Init+0x114>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b2a      	ldr	r3, [pc, #168]	@ (800061c <MX_GPIO_Init+0x114>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b27      	ldr	r3, [pc, #156]	@ (800061c <MX_GPIO_Init+0x114>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a26      	ldr	r2, [pc, #152]	@ (800061c <MX_GPIO_Init+0x114>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b24      	ldr	r3, [pc, #144]	@ (800061c <MX_GPIO_Init+0x114>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, C_IN1_Pin|C_IN2_Pin|D_IN1_Pin|LED4_Pin
 8000596:	2200      	movs	r2, #0
 8000598:	f242 71d8 	movw	r1, #10200	@ 0x27d8
 800059c:	4820      	ldr	r0, [pc, #128]	@ (8000620 <MX_GPIO_Init+0x118>)
 800059e:	f001 f913 	bl	80017c8 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin|D_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_IN2_Pin|A_IN1_Pin|B_IN1_Pin|B_IN2_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f001 f90c 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LINEAR_ACT_2_2_Pin|LINEAR_ACT_1_1_Pin|LINEAR_ACT_1_2_Pin|LINEAR_ACT_2_1_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2156      	movs	r1, #86	@ 0x56
 80005b4:	481b      	ldr	r0, [pc, #108]	@ (8000624 <MX_GPIO_Init+0x11c>)
 80005b6:	f001 f907 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C_IN1_Pin C_IN2_Pin D_IN1_Pin LED4_Pin
                           LED3_Pin LED2_Pin LED1_Pin D_IN2_Pin */
  GPIO_InitStruct.Pin = C_IN1_Pin|C_IN2_Pin|D_IN1_Pin|LED4_Pin
 80005ba:	f242 73d8 	movw	r3, #10200	@ 0x27d8
 80005be:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|LED2_Pin|LED1_Pin|D_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4813      	ldr	r0, [pc, #76]	@ (8000620 <MX_GPIO_Init+0x118>)
 80005d4:	f000 ff76 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_IN2_Pin A_IN1_Pin B_IN1_Pin B_IN2_Pin */
  GPIO_InitStruct.Pin = A_IN2_Pin|A_IN1_Pin|B_IN1_Pin|B_IN2_Pin;
 80005d8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f4:	f000 ff66 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINEAR_ACT_2_2_Pin LINEAR_ACT_1_1_Pin LINEAR_ACT_1_2_Pin LINEAR_ACT_2_1_Pin */
  GPIO_InitStruct.Pin = LINEAR_ACT_2_2_Pin|LINEAR_ACT_1_1_Pin|LINEAR_ACT_1_2_Pin|LINEAR_ACT_2_1_Pin;
 80005f8:	2356      	movs	r3, #86	@ 0x56
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_GPIO_Init+0x11c>)
 8000610:	f000 ff58 	bl	80014c4 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	@ 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	48001000 	.word	0x48001000
 8000624:	48000c00 	.word	0x48000c00

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fdd3 	bl	80011d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f8ac 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff ff68 	bl	8000508 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000638:	f000 fa12 	bl	8000a60 <MX_TIM3_Init>
  MX_TIM1_Init();
 800063c:	f000 f952 	bl	80008e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000640:	f000 f9aa 	bl	8000998 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000644:	f000 fa72 	bl	8000b2c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000648:	f000 fac6 	bl	8000bd8 <MX_TIM5_Init>
  MX_TIM8_Init();
 800064c:	f000 fb1a 	bl	8000c84 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000650:	f000 fcf4 	bl	800103c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000654:	2108      	movs	r1, #8
 8000656:	4845      	ldr	r0, [pc, #276]	@ (800076c <main+0x144>)
 8000658:	f002 f9ce 	bl	80029f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800065c:	210c      	movs	r1, #12
 800065e:	4843      	ldr	r0, [pc, #268]	@ (800076c <main+0x144>)
 8000660:	f002 f9ca 	bl	80029f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000664:	2100      	movs	r1, #0
 8000666:	4842      	ldr	r0, [pc, #264]	@ (8000770 <main+0x148>)
 8000668:	f002 f9c6 	bl	80029f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800066c:	210c      	movs	r1, #12
 800066e:	4840      	ldr	r0, [pc, #256]	@ (8000770 <main+0x148>)
 8000670:	f002 f9c2 	bl	80029f8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 8000674:	483f      	ldr	r0, [pc, #252]	@ (8000774 <main+0x14c>)
 8000676:	f002 f8ef 	bl	8002858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800067a:	213c      	movs	r1, #60	@ 0x3c
 800067c:	483d      	ldr	r0, [pc, #244]	@ (8000774 <main+0x14c>)
 800067e:	f002 fb73 	bl	8002d68 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000682:	483d      	ldr	r0, [pc, #244]	@ (8000778 <main+0x150>)
 8000684:	f002 f8e8 	bl	8002858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000688:	213c      	movs	r1, #60	@ 0x3c
 800068a:	483b      	ldr	r0, [pc, #236]	@ (8000778 <main+0x150>)
 800068c:	f002 fb6c 	bl	8002d68 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000690:	483a      	ldr	r0, [pc, #232]	@ (800077c <main+0x154>)
 8000692:	f002 f8e1 	bl	8002858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000696:	213c      	movs	r1, #60	@ 0x3c
 8000698:	4838      	ldr	r0, [pc, #224]	@ (800077c <main+0x154>)
 800069a:	f002 fb65 	bl	8002d68 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800069e:	4838      	ldr	r0, [pc, #224]	@ (8000780 <main+0x158>)
 80006a0:	f002 f8da 	bl	8002858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80006a4:	213c      	movs	r1, #60	@ 0x3c
 80006a6:	4836      	ldr	r0, [pc, #216]	@ (8000780 <main+0x158>)
 80006a8:	f002 fb5e 	bl	8002d68 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b2:	4834      	ldr	r0, [pc, #208]	@ (8000784 <main+0x15c>)
 80006b4:	f001 f888 	bl	80017c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006be:	4831      	ldr	r0, [pc, #196]	@ (8000784 <main+0x15c>)
 80006c0:	f001 f882 	bl	80017c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ca:	482e      	ldr	r0, [pc, #184]	@ (8000784 <main+0x15c>)
 80006cc:	f001 f87c 	bl	80017c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2180      	movs	r1, #128	@ 0x80
 80006d4:	482b      	ldr	r0, [pc, #172]	@ (8000784 <main+0x15c>)
 80006d6:	f001 f877 	bl	80017c8 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fdec 	bl	80012b8 <HAL_Delay>
#if (TEST == 1)
    // test encoder
    // read_current_velocity(encoders);

    // test motor
    HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2108      	movs	r1, #8
 80006e4:	4827      	ldr	r0, [pc, #156]	@ (8000784 <main+0x15c>)
 80006e6:	f001 f86f 	bl	80017c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2110      	movs	r1, #16
 80006ee:	4825      	ldr	r0, [pc, #148]	@ (8000784 <main+0x15c>)
 80006f0:	f001 f86a 	bl	80017c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fe:	f001 f863 	bl	80017c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070c:	f001 f85c 	bl	80017c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2140      	movs	r1, #64	@ 0x40
 8000714:	481b      	ldr	r0, [pc, #108]	@ (8000784 <main+0x15c>)
 8000716:	f001 f857 	bl	80017c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000720:	4818      	ldr	r0, [pc, #96]	@ (8000784 <main+0x15c>)
 8000722:	f001 f851 	bl	80017c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000730:	f001 f84a 	bl	80017c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073e:	f001 f843 	bl	80017c8 <HAL_GPIO_WritePin>
    TIM2->CCR3 = 65535 / 2;
 8000742:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000746:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800074a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = 65535 / 2;
 800074c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000750:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000754:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3->CCR1 = 65535 / 2;
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <main+0x160>)
 8000758:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800075c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR4 = 65535 / 2;
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <main+0x160>)
 8000760:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000764:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_Delay(1);
 8000766:	bf00      	nop
 8000768:	e7b7      	b.n	80006da <main+0xb2>
 800076a:	bf00      	nop
 800076c:	20000074 	.word	0x20000074
 8000770:	200000c0 	.word	0x200000c0
 8000774:	20000028 	.word	0x20000028
 8000778:	2000010c 	.word	0x2000010c
 800077c:	20000158 	.word	0x20000158
 8000780:	200001a4 	.word	0x200001a4
 8000784:	48001000 	.word	0x48001000
 8000788:	40000400 	.word	0x40000400

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	@ 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	2238      	movs	r2, #56	@ 0x38
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 ffae 	bl	80046fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007b2:	f001 f821 	bl	80017f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2340      	movs	r3, #64	@ 0x40
 80007c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f8c7 	bl	8001960 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007d8:	f000 f818 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e0:	2301      	movs	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fbc5 	bl	8001f84 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000800:	f000 f804 	bl	800080c <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	@ 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <HAL_MspInit+0x44>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6613      	str	r3, [r2, #96]	@ 0x60
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_MspInit+0x44>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6593      	str	r3, [r2, #88]	@ 0x58
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800084e:	f001 f877 	bl	8001940 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <MemManage_Handler+0x4>

08000878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 fce1 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <SystemInit+0x20>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <SystemInit+0x20>)
 80008cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	@ 0x30
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2224      	movs	r2, #36	@ 0x24
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 ff02 	bl	80046fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000902:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <MX_TIM1_Init+0xac>)
 8000904:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <MX_TIM1_Init+0xb0>)
 8000906:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000908:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_TIM1_Init+0xac>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <MX_TIM1_Init+0xac>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000914:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_TIM1_Init+0xac>)
 8000916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800091a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_TIM1_Init+0xac>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_TIM1_Init+0xac>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_TIM1_Init+0xac>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800092e:	2301      	movs	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000936:	2301      	movs	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000946:	2301      	movs	r3, #1
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_TIM1_Init+0xac>)
 800095a:	f002 f95f 	bl	8002c1c <HAL_TIM_Encoder_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000964:	f7ff ff52 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_TIM1_Init+0xac>)
 800097a:	f002 ffbb 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000984:	f7ff ff42 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000028 	.word	0x20000028
 8000994:	40012c00 	.word	0x40012c00

08000998 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c4:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009d0:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009e0:	2280      	movs	r2, #128	@ 0x80
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e4:	481d      	ldr	r0, [pc, #116]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009e6:	f001 ffaf 	bl	8002948 <HAL_TIM_PWM_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f7ff ff0c 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4816      	ldr	r0, [pc, #88]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 8000a04:	f002 ff76 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a0e:	f7ff fefd 	bl	800080c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a12:	2360      	movs	r3, #96	@ 0x60
 8000a14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2208      	movs	r2, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 8000a2a:	f002 fa4b 	bl	8002ec4 <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a34:	f7ff feea 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 8000a40:	f002 fa40 	bl	8002ec4 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f7ff fedf 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4e:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 8000a50:	f000 fa7c 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	@ 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000074 	.word	0x20000074

08000a60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a84:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000a86:	4a28      	ldr	r2, [pc, #160]	@ (8000b28 <MX_TIM3_Init+0xc8>)
 8000a88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a8a:	4b26      	ldr	r3, [pc, #152]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a96:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000a98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aaa:	481e      	ldr	r0, [pc, #120]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000aac:	f001 ff4c 	bl	8002948 <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ab6:	f7ff fea9 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4816      	ldr	r0, [pc, #88]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000aca:	f002 ff13 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ad4:	f7ff fe9a 	bl	800080c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	@ 0x60
 8000ada:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	4619      	mov	r1, r3
 8000aee:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000af0:	f002 f9e8 	bl	8002ec4 <HAL_TIM_PWM_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000afa:	f7ff fe87 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	220c      	movs	r2, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000b06:	f002 f9dd 	bl	8002ec4 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b10:	f7ff fe7c 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <MX_TIM3_Init+0xc4>)
 8000b16:	f000 fa19 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000c0 	.word	0x200000c0
 8000b28:	40000400 	.word	0x40000400

08000b2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	@ 0x30
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2224      	movs	r2, #36	@ 0x24
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fdde 	bl	80046fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <MX_TIM4_Init+0xa4>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <MX_TIM4_Init+0xa8>)
 8000b4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_TIM4_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <MX_TIM4_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_TIM4_Init+0xa4>)
 8000b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_TIM4_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <MX_TIM4_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_TIM4_Init+0xa4>)
 8000b9c:	f002 f83e 	bl	8002c1c <HAL_TIM_Encoder_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000ba6:	f7ff fe31 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <MX_TIM4_Init+0xa4>)
 8000bb8:	f002 fe9c 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000bc2:	f7ff fe23 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3730      	adds	r7, #48	@ 0x30
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000010c 	.word	0x2000010c
 8000bd4:	40000800 	.word	0x40000800

08000bd8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2224      	movs	r2, #36	@ 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fd88 	bl	80046fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_TIM5_Init+0xa4>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <MX_TIM5_Init+0xa8>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_TIM5_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_TIM5_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_TIM5_Init+0xa4>)
 8000c0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_TIM5_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_TIM5_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_TIM5_Init+0xa4>)
 8000c48:	f001 ffe8 	bl	8002c1c <HAL_TIM_Encoder_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000c52:	f7ff fddb 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_TIM5_Init+0xa4>)
 8000c64:	f002 fe46 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000c6e:	f7ff fdcd 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	@ 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000158 	.word	0x20000158
 8000c80:	40000c00 	.word	0x40000c00

08000c84 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2224      	movs	r2, #36	@ 0x24
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fd32 	bl	80046fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000ca4:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <MX_TIM8_Init+0xb0>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480d      	ldr	r0, [pc, #52]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000cfa:	f001 ff8f 	bl	8002c1c <HAL_TIM_Encoder_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000d04:	f7ff fd82 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_TIM8_Init+0xac>)
 8000d1a:	f002 fdeb 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000d24:	f7ff fd72 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3730      	adds	r7, #48	@ 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200001a4 	.word	0x200001a4
 8000d34:	40013400 	.word	0x40013400

08000d38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	@ 0x40
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a5d      	ldr	r2, [pc, #372]	@ (8000ecc <HAL_TIM_Encoder_MspInit+0x194>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d128      	bne.n	8000dac <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000d60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d66:	4b5a      	ldr	r3, [pc, #360]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b57      	ldr	r3, [pc, #348]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a56      	ldr	r2, [pc, #344]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b54      	ldr	r3, [pc, #336]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	484b      	ldr	r0, [pc, #300]	@ (8000ed4 <HAL_TIM_Encoder_MspInit+0x19c>)
 8000da6:	f000 fb8d 	bl	80014c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000daa:	e08a      	b.n	8000ec2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a49      	ldr	r2, [pc, #292]	@ (8000ed8 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d129      	bne.n	8000e0a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000db6:	4b46      	ldr	r3, [pc, #280]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dba:	4a45      	ldr	r2, [pc, #276]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc2:	4b43      	ldr	r3, [pc, #268]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	623b      	str	r3, [r7, #32]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dce:	4b40      	ldr	r3, [pc, #256]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000de6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4836      	ldr	r0, [pc, #216]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x1a4>)
 8000e04:	f000 fb5e 	bl	80014c4 <HAL_GPIO_Init>
}
 8000e08:	e05b      	b.n	8000ec2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a34      	ldr	r2, [pc, #208]	@ (8000ee0 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d129      	bne.n	8000e68 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e30:	4a27      	ldr	r2, [pc, #156]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e38:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e44:	2303      	movs	r3, #3
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e54:	2302      	movs	r3, #2
 8000e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e62:	f000 fb2f 	bl	80014c4 <HAL_GPIO_Init>
}
 8000e66:	e02c      	b.n	8000ec2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee4 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d127      	bne.n	8000ec2 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e76:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	23c0      	movs	r3, #192	@ 0xc0
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_TIM_Encoder_MspInit+0x19c>)
 8000ebe:	f000 fb01 	bl	80014c4 <HAL_GPIO_Init>
}
 8000ec2:	bf00      	nop
 8000ec4:	3740      	adds	r7, #64	@ 0x40
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40012c00 	.word	0x40012c00
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	40000800 	.word	0x40000800
 8000edc:	48000c00 	.word	0x48000c00
 8000ee0:	40000c00 	.word	0x40000c00
 8000ee4:	40013400 	.word	0x40013400

08000ee8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef8:	d10c      	bne.n	8000f14 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_TIM_PWM_MspInit+0x5c>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efe:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f12:	e010      	b.n	8000f36 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <HAL_TIM_PWM_MspInit+0x60>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10b      	bne.n	8000f36 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f22:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40000400 	.word	0x40000400

08000f4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f6c:	d139      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a2e      	ldr	r2, [pc, #184]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	4b29      	ldr	r3, [pc, #164]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a28      	ldr	r2, [pc, #160]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_Pin;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RL_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbc:	f000 fa82 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_Pin;
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4815      	ldr	r0, [pc, #84]	@ (8001030 <HAL_TIM_MspPostInit+0xe4>)
 8000fdc:	f000 fa72 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fe0:	e020      	b.n	8001024 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a13      	ldr	r2, [pc, #76]	@ (8001034 <HAL_TIM_MspPostInit+0xe8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d11b      	bne.n	8001024 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_TIM_MspPostInit+0xe0>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FR_PWM_Pin|FL_PWM_Pin;
 8001004:	2324      	movs	r3, #36	@ 0x24
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001014:	2302      	movs	r3, #2
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <HAL_TIM_MspPostInit+0xec>)
 8001020:	f000 fa50 	bl	80014c4 <HAL_GPIO_Init>
}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	@ 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	48000c00 	.word	0x48000c00
 8001034:	40000400 	.word	0x40000400
 8001038:	48001000 	.word	0x48001000

0800103c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <MX_USART1_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001086:	f002 fccb 	bl	8003a20 <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f7ff fbbc 	bl	800080c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 8001098:	f003 fa66 	bl	8004568 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f7ff fbb3 	bl	800080c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 80010aa:	f003 fa9b 	bl	80045e4 <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f7ff fbaa 	bl	800080c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	@ (80010cc <MX_USART1_UART_Init+0x90>)
 80010ba:	f003 fa1c 	bl	80044f6 <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f7ff fba2 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001f0 	.word	0x200001f0
 80010d0:	40013800 	.word	0x40013800

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b09e      	sub	sp, #120	@ 0x78
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	2254      	movs	r2, #84	@ 0x54
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fb01 	bl	80046fc <memset>
  if(uartHandle->Instance==USART1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001178 <HAL_UART_MspInit+0xa4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d135      	bne.n	8001170 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001104:	2301      	movs	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f953 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff fb76 	bl	800080c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <HAL_UART_MspInit+0xa8>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001124:	4a15      	ldr	r2, [pc, #84]	@ (800117c <HAL_UART_MspInit+0xa8>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112a:	6613      	str	r3, [r2, #96]	@ 0x60
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <HAL_UART_MspInit+0xa8>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <HAL_UART_MspInit+0xa8>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <HAL_UART_MspInit+0xa8>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001144:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <HAL_UART_MspInit+0xa8>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001150:	2330      	movs	r3, #48	@ 0x30
 8001152:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001160:	2307      	movs	r3, #7
 8001162:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <HAL_UART_MspInit+0xac>)
 800116c:	f000 f9aa 	bl	80014c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3778      	adds	r7, #120	@ 0x78
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40013800 	.word	0x40013800
 800117c:	40021000 	.word	0x40021000
 8001180:	48000800 	.word	0x48000800

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001186:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001188:	f7ff fb9a 	bl	80008c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	@ (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	@ (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f003 faab 	bl	800470c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff fa37 	bl	8000628 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   r0, =_estack
 80011bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011c8:	080047bc 	.word	0x080047bc
  ldr r2, =_sbss
 80011cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011d0:	20000288 	.word	0x20000288

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>

080011d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f93d 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 f80e 	bl	8001208 <HAL_InitTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e001      	b.n	80011fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f8:	f7ff fb0e 	bl	8000818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fc:	79fb      	ldrb	r3, [r7, #7]

}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <HAL_InitTick+0x68>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d022      	beq.n	8001262 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <HAL_InitTick+0x6c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_InitTick+0x68>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001228:	fbb1 f3f3 	udiv	r3, r1, r3
 800122c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f93a 	bl	80014aa <HAL_SYSTICK_Config>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10f      	bne.n	800125c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	d809      	bhi.n	8001256 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001242:	2200      	movs	r2, #0
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800124a:	f000 f914 	bl	8001476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <HAL_InitTick+0x70>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e007      	b.n	8001266 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e004      	b.n	8001266 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e001      	b.n	8001266 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000008 	.word	0x20000008
 8001274:	20000000 	.word	0x20000000
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_IncTick+0x1c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_IncTick+0x20>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4413      	add	r3, r2
 800128a:	4a03      	ldr	r2, [pc, #12]	@ (8001298 <HAL_IncTick+0x1c>)
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	20000284 	.word	0x20000284
 800129c:	20000008 	.word	0x20000008

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000284 	.word	0x20000284

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012d0:	d004      	beq.n	80012dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_Delay+0x40>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012dc:	bf00      	nop
 80012de:	f7ff ffdf 	bl	80012a0 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d8f7      	bhi.n	80012de <HAL_Delay+0x26>
  {
  }
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000008 	.word	0x20000008

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	@ (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	@ (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	@ (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff47 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff5e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff90 	bl	80013b4 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5f 	bl	8001360 <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffb2 	bl	800141c <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014d2:	e15a      	b.n	800178a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2101      	movs	r1, #1
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 814c 	beq.w	8001784 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d005      	beq.n	8001504 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001500:	2b02      	cmp	r3, #2
 8001502:	d130      	bne.n	8001566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800153a:	2201      	movs	r2, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f003 0201 	and.w	r2, r3, #1
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b03      	cmp	r3, #3
 8001570:	d017      	beq.n	80015a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d123      	bne.n	80015f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	08da      	lsrs	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3208      	adds	r2, #8
 80015b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	6939      	ldr	r1, [r7, #16]
 80015f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0203 	and.w	r2, r3, #3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80a6 	beq.w	8001784 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001638:	4b5b      	ldr	r3, [pc, #364]	@ (80017a8 <HAL_GPIO_Init+0x2e4>)
 800163a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163c:	4a5a      	ldr	r2, [pc, #360]	@ (80017a8 <HAL_GPIO_Init+0x2e4>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6613      	str	r3, [r2, #96]	@ 0x60
 8001644:	4b58      	ldr	r3, [pc, #352]	@ (80017a8 <HAL_GPIO_Init+0x2e4>)
 8001646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001650:	4a56      	ldr	r2, [pc, #344]	@ (80017ac <HAL_GPIO_Init+0x2e8>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800167a:	d01f      	beq.n	80016bc <HAL_GPIO_Init+0x1f8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a4c      	ldr	r2, [pc, #304]	@ (80017b0 <HAL_GPIO_Init+0x2ec>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d019      	beq.n	80016b8 <HAL_GPIO_Init+0x1f4>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a4b      	ldr	r2, [pc, #300]	@ (80017b4 <HAL_GPIO_Init+0x2f0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d013      	beq.n	80016b4 <HAL_GPIO_Init+0x1f0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a4a      	ldr	r2, [pc, #296]	@ (80017b8 <HAL_GPIO_Init+0x2f4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00d      	beq.n	80016b0 <HAL_GPIO_Init+0x1ec>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a49      	ldr	r2, [pc, #292]	@ (80017bc <HAL_GPIO_Init+0x2f8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_Init+0x1e8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a48      	ldr	r2, [pc, #288]	@ (80017c0 <HAL_GPIO_Init+0x2fc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_GPIO_Init+0x1e4>
 80016a4:	2305      	movs	r3, #5
 80016a6:	e00a      	b.n	80016be <HAL_GPIO_Init+0x1fa>
 80016a8:	2306      	movs	r3, #6
 80016aa:	e008      	b.n	80016be <HAL_GPIO_Init+0x1fa>
 80016ac:	2304      	movs	r3, #4
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x1fa>
 80016b0:	2303      	movs	r3, #3
 80016b2:	e004      	b.n	80016be <HAL_GPIO_Init+0x1fa>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x1fa>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_GPIO_Init+0x1fa>
 80016bc:	2300      	movs	r3, #0
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	f002 0203 	and.w	r2, r2, #3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4093      	lsls	r3, r2
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ce:	4937      	ldr	r1, [pc, #220]	@ (80017ac <HAL_GPIO_Init+0x2e8>)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016dc:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001700:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001706:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800172a:	4a26      	ldr	r2, [pc, #152]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001730:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800175a:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800177e:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <HAL_GPIO_Init+0x300>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	f47f ae9d 	bne.w	80014d4 <HAL_GPIO_Init+0x10>
  }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	48000400 	.word	0x48000400
 80017b4:	48000800 	.word	0x48000800
 80017b8:	48000c00 	.word	0x48000c00
 80017bc:	48001000 	.word	0x48001000
 80017c0:	48001400 	.word	0x48001400
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d141      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001806:	4b4b      	ldr	r3, [pc, #300]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800180e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001812:	d131      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001814:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800181a:	4a46      	ldr	r2, [pc, #280]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001820:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001824:	4b43      	ldr	r3, [pc, #268]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800182c:	4a41      	ldr	r2, [pc, #260]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001832:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001834:	4b40      	ldr	r3, [pc, #256]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2232      	movs	r2, #50	@ 0x32
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	4a3f      	ldr	r2, [pc, #252]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	0c9b      	lsrs	r3, r3, #18
 8001846:	3301      	adds	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184a:	e002      	b.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3b01      	subs	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001852:	4b38      	ldr	r3, [pc, #224]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800185e:	d102      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f2      	bne.n	800184c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001866:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001872:	d158      	bne.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e057      	b.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001878:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800187e:	4a2d      	ldr	r2, [pc, #180]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001888:	e04d      	b.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001890:	d141      	bne.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001892:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800189a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800189e:	d131      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a0:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b0:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2232      	movs	r2, #50	@ 0x32
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9b      	lsrs	r3, r3, #18
 80018d2:	3301      	adds	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d6:	e002      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3b01      	subs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ea:	d102      	bne.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f2      	bne.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fe:	d112      	bne.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e011      	b.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001914:	e007      	b.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001920:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001924:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40007000 	.word	0x40007000
 8001938:	20000000 	.word	0x20000000
 800193c:	431bde83 	.word	0x431bde83

08001940 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194e:	6093      	str	r3, [r2, #8]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40007000 	.word	0x40007000

08001960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e2fe      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d075      	beq.n	8001a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197e:	4b97      	ldr	r3, [pc, #604]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001988:	4b94      	ldr	r3, [pc, #592]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d102      	bne.n	800199e <HAL_RCC_OscConfig+0x3e>
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_OscConfig+0x44>
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d10b      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b8d      	ldr	r3, [pc, #564]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05b      	beq.n	8001a68 <HAL_RCC_OscConfig+0x108>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d157      	bne.n	8001a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e2d9      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x74>
 80019c6:	4b85      	ldr	r3, [pc, #532]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a84      	ldr	r2, [pc, #528]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e01d      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x98>
 80019de:	4b7f      	ldr	r3, [pc, #508]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a7e      	ldr	r2, [pc, #504]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b7c      	ldr	r3, [pc, #496]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7b      	ldr	r2, [pc, #492]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019f8:	4b78      	ldr	r3, [pc, #480]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a77      	ldr	r2, [pc, #476]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b75      	ldr	r3, [pc, #468]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a74      	ldr	r2, [pc, #464]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fc42 	bl	80012a0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fc3e 	bl	80012a0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e29e      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a32:	4b6a      	ldr	r3, [pc, #424]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0xc0>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fc2e 	bl	80012a0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fc2a 	bl	80012a0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e28a      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5a:	4b60      	ldr	r3, [pc, #384]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0xe8>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d075      	beq.n	8001b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a80:	4b56      	ldr	r3, [pc, #344]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_OscConfig+0x136>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d002      	beq.n	8001a9c <HAL_RCC_OscConfig+0x13c>
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d11f      	bne.n	8001adc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x154>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e25d      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b49      	ldr	r3, [pc, #292]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	4946      	ldr	r1, [pc, #280]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ac8:	4b45      	ldr	r3, [pc, #276]	@ (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fb9b 	bl	8001208 <HAL_InitTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d043      	beq.n	8001b60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e249      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d023      	beq.n	8001b2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a3c      	ldr	r2, [pc, #240]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fbd6 	bl	80012a0 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fbd2 	bl	80012a0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e232      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0a:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	061b      	lsls	r3, r3, #24
 8001b24:	492d      	ldr	r1, [pc, #180]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
 8001b2a:	e01a      	b.n	8001b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2a      	ldr	r2, [pc, #168]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fbb2 	bl	80012a0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff fbae 	bl	80012a0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e20e      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b52:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1e0>
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d041      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7c:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff fb8b 	bl	80012a0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fb87 	bl	80012a0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e1e7      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0ef      	beq.n	8001b8e <HAL_RCC_OscConfig+0x22e>
 8001bae:	e020      	b.n	8001bf2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb6:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fb6e 	bl	80012a0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	e00d      	b.n	8001be4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fb6a 	bl	80012a0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d906      	bls.n	8001be4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1ca      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be4:	4b8c      	ldr	r3, [pc, #560]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ea      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80a6 	beq.w	8001d4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c04:	4b84      	ldr	r3, [pc, #528]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2b4>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x2b6>
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00d      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c26:	4b7c      	ldr	r3, [pc, #496]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	4b79      	ldr	r3, [pc, #484]	@ (8001e1c <HAL_RCC_OscConfig+0x4bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c42:	4b76      	ldr	r3, [pc, #472]	@ (8001e1c <HAL_RCC_OscConfig+0x4bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a75      	ldr	r2, [pc, #468]	@ (8001e1c <HAL_RCC_OscConfig+0x4bc>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fb27 	bl	80012a0 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff fb23 	bl	80012a0 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e183      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	4b6c      	ldr	r3, [pc, #432]	@ (8001e1c <HAL_RCC_OscConfig+0x4bc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_RCC_OscConfig+0x32e>
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c82:	4a65      	ldr	r2, [pc, #404]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c8c:	e024      	b.n	8001cd8 <HAL_RCC_OscConfig+0x378>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d110      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x358>
 8001c96:	4b60      	ldr	r3, [pc, #384]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cac:	4a5a      	ldr	r2, [pc, #360]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cb6:	e00f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x378>
 8001cb8:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cbe:	4a56      	ldr	r2, [pc, #344]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cc8:	4b53      	ldr	r3, [pc, #332]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cce:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d016      	beq.n	8001d0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fade 	bl	80012a0 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fada 	bl	80012a0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e138      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfe:	4b46      	ldr	r3, [pc, #280]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ed      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x388>
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fac7 	bl	80012a0 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff fac3 	bl	80012a0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e121      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1ed      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d3a:	7ffb      	ldrb	r3, [r7, #31]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b35      	ldr	r3, [pc, #212]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	4a34      	ldr	r2, [pc, #208]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d03c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d60:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d66:	4a2c      	ldr	r2, [pc, #176]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fa96 	bl	80012a0 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d78:	f7ff fa92 	bl	80012a0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e0f2      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d8a:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ef      	beq.n	8001d78 <HAL_RCC_OscConfig+0x418>
 8001d98:	e01b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001da0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff fa79 	bl	80012a0 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db2:	f7ff fa75 	bl	80012a0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0d5      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ef      	bne.n	8001db2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80c9 	beq.w	8001f6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	f000 8083 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d15e      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fa4f 	bl	80012a0 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	e00c      	b.n	8001e20 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff fa4b 	bl	80012a0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d905      	bls.n	8001e20 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0ab      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e20:	4b55      	ldr	r3, [pc, #340]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ec      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2c:	4b52      	ldr	r3, [pc, #328]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	4b52      	ldr	r3, [pc, #328]	@ (8001f7c <HAL_RCC_OscConfig+0x61c>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6a11      	ldr	r1, [r2, #32]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e3c:	3a01      	subs	r2, #1
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	4311      	orrs	r1, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e46:	0212      	lsls	r2, r2, #8
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e4e:	0852      	lsrs	r2, r2, #1
 8001e50:	3a01      	subs	r2, #1
 8001e52:	0552      	lsls	r2, r2, #21
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e5a:	0852      	lsrs	r2, r2, #1
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	0652      	lsls	r2, r2, #25
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e66:	06d2      	lsls	r2, r2, #27
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	4943      	ldr	r1, [pc, #268]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e70:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a40      	ldr	r2, [pc, #256]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a3d      	ldr	r2, [pc, #244]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff fa0a 	bl	80012a0 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff fa06 	bl	80012a0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e066      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x530>
 8001eae:	e05e      	b.n	8001f6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a30      	ldr	r2, [pc, #192]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f9f0 	bl	80012a0 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff f9ec 	bl	80012a0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e04c      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed6:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ee2:	4b25      	ldr	r3, [pc, #148]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4924      	ldr	r1, [pc, #144]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001ee8:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_RCC_OscConfig+0x620>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f78 <HAL_RCC_OscConfig+0x618>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	019f800c 	.word	0x019f800c
 8001f80:	feeefffc 	.word	0xfeeefffc

08001f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e11e      	b.n	80021da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b91      	ldr	r3, [pc, #580]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b8e      	ldr	r3, [pc, #568]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 020f 	bic.w	r2, r3, #15
 8001fb2:	498c      	ldr	r1, [pc, #560]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b8a      	ldr	r3, [pc, #552]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e106      	b.n	80021da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d073      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d129      	bne.n	8002034 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe0:	4b81      	ldr	r3, [pc, #516]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0f4      	b.n	80021da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ff0:	f000 f99e 	bl	8002330 <RCC_GetSysClockFreqFromPLLSource>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4a7c      	ldr	r2, [pc, #496]	@ (80021ec <HAL_RCC_ClockConfig+0x268>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d93f      	bls.n	800207e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002012:	2b00      	cmp	r3, #0
 8002014:	d033      	beq.n	800207e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12f      	bne.n	800207e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800201e:	4b72      	ldr	r3, [pc, #456]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002026:	4a70      	ldr	r2, [pc, #448]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800202c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e024      	b.n	800207e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d107      	bne.n	800204c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203c:	4b6a      	ldr	r3, [pc, #424]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0c6      	b.n	80021da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0be      	b.n	80021da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800205c:	f000 f8ce 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 8002060:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4a61      	ldr	r2, [pc, #388]	@ (80021ec <HAL_RCC_ClockConfig+0x268>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d909      	bls.n	800207e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800206a:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002072:	4a5d      	ldr	r2, [pc, #372]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002078:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800207e:	4b5a      	ldr	r3, [pc, #360]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4957      	ldr	r1, [pc, #348]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002090:	f7ff f906 	bl	80012a0 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7ff f902 	bl	80012a0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e095      	b.n	80021da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	4b4e      	ldr	r3, [pc, #312]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 020c 	and.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1eb      	bne.n	8002098 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d023      	beq.n	8002114 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d8:	4b43      	ldr	r3, [pc, #268]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a42      	ldr	r2, [pc, #264]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 80020de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020f0:	4b3d      	ldr	r3, [pc, #244]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020f8:	4a3b      	ldr	r2, [pc, #236]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b39      	ldr	r3, [pc, #228]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4936      	ldr	r1, [pc, #216]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
 8002112:	e008      	b.n	8002126 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b80      	cmp	r3, #128	@ 0x80
 8002118:	d105      	bne.n	8002126 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800211a:	4b33      	ldr	r3, [pc, #204]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4a32      	ldr	r2, [pc, #200]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002120:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002124:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002126:	4b2f      	ldr	r3, [pc, #188]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d21d      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002134:	4b2b      	ldr	r3, [pc, #172]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 020f 	bic.w	r2, r3, #15
 800213c:	4929      	ldr	r1, [pc, #164]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002144:	f7ff f8ac 	bl	80012a0 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7ff f8a8 	bl	80012a0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e03b      	b.n	80021da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d1ed      	bne.n	800214c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4917      	ldr	r1, [pc, #92]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490f      	ldr	r1, [pc, #60]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ae:	f000 f825 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490c      	ldr	r1, [pc, #48]	@ (80021f0 <HAL_RCC_ClockConfig+0x26c>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_RCC_ClockConfig+0x270>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_RCC_ClockConfig+0x274>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f818 	bl	8001208 <HAL_InitTick>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	04c4b400 	.word	0x04c4b400
 80021f0:	0800476c 	.word	0x0800476c
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002202:	4b2c      	ldr	r3, [pc, #176]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b04      	cmp	r3, #4
 800220c:	d102      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800220e:	4b2a      	ldr	r3, [pc, #168]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	e047      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002214:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d102      	bne.n	8002226 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002220:	4b26      	ldr	r3, [pc, #152]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	e03e      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002226:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d136      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002232:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800223c:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3301      	adds	r3, #1
 8002248:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d10c      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002250:	4a1a      	ldr	r2, [pc, #104]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	4a16      	ldr	r2, [pc, #88]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225a:	68d2      	ldr	r2, [r2, #12]
 800225c:	0a12      	lsrs	r2, r2, #8
 800225e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
      break;
 8002268:	e00c      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800226a:	4a13      	ldr	r2, [pc, #76]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002274:	68d2      	ldr	r2, [r2, #12]
 8002276:	0a12      	lsrs	r2, r2, #8
 8002278:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
      break;
 8002282:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0e5b      	lsrs	r3, r3, #25
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	3301      	adds	r3, #1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e001      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022a4:	693b      	ldr	r3, [r7, #16]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	00f42400 	.word	0x00f42400
 80022bc:	007a1200 	.word	0x007a1200

080022c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022dc:	f7ff fff0 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4904      	ldr	r1, [pc, #16]	@ (8002300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	0800477c 	.word	0x0800477c

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002308:	f7ff ffda 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0adb      	lsrs	r3, r3, #11
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4904      	ldr	r1, [pc, #16]	@ (800232c <HAL_RCC_GetPCLK2Freq+0x28>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	0800477c 	.word	0x0800477c

08002330 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002336:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002340:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3301      	adds	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d10c      	bne.n	800236e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002354:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800235e:	68d2      	ldr	r2, [r2, #12]
 8002360:	0a12      	lsrs	r2, r2, #8
 8002362:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
    break;
 800236c:	e00c      	b.n	8002388 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800236e:	4a12      	ldr	r2, [pc, #72]	@ (80023b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	4a0e      	ldr	r2, [pc, #56]	@ (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	0a12      	lsrs	r2, r2, #8
 800237c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
    break;
 8002386:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002388:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0e5b      	lsrs	r3, r3, #25
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	3301      	adds	r3, #1
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000
 80023b4:	007a1200 	.word	0x007a1200
 80023b8:	00f42400 	.word	0x00f42400

080023bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023c4:	2300      	movs	r3, #0
 80023c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c8:	2300      	movs	r3, #0
 80023ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8098 	beq.w	800250a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b43      	ldr	r3, [pc, #268]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b40      	ldr	r3, [pc, #256]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	4a3f      	ldr	r2, [pc, #252]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002406:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a39      	ldr	r2, [pc, #228]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002410:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002412:	f7fe ff45 	bl	80012a0 <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002418:	e009      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241a:	f7fe ff41 	bl	80012a0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d902      	bls.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	74fb      	strb	r3, [r7, #19]
        break;
 800242c:	e005      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800242e:	4b30      	ldr	r3, [pc, #192]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0ef      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d159      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002440:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800244a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d01e      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	d019      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800245c:	4b23      	ldr	r3, [pc, #140]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002466:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246e:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002488:	4a18      	ldr	r2, [pc, #96]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe ff01 	bl	80012a0 <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a0:	e00b      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fefd 	bl	80012a0 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d902      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	74fb      	strb	r3, [r7, #19]
            break;
 80024b8:	e006      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ec      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10b      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024dc:	4903      	ldr	r1, [pc, #12]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024e4:	e008      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	74bb      	strb	r3, [r7, #18]
 80024ea:	e005      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f8:	7c7b      	ldrb	r3, [r7, #17]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4ba7      	ldr	r3, [pc, #668]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	4aa6      	ldr	r2, [pc, #664]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002516:	4ba1      	ldr	r3, [pc, #644]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251c:	f023 0203 	bic.w	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	499d      	ldr	r1, [pc, #628]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002538:	4b98      	ldr	r3, [pc, #608]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f023 020c 	bic.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4995      	ldr	r1, [pc, #596]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800255a:	4b90      	ldr	r3, [pc, #576]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002560:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	498c      	ldr	r1, [pc, #560]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800257c:	4b87      	ldr	r3, [pc, #540]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	4984      	ldr	r1, [pc, #528]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800259e:	4b7f      	ldr	r3, [pc, #508]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	497b      	ldr	r1, [pc, #492]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c0:	4b76      	ldr	r3, [pc, #472]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4973      	ldr	r1, [pc, #460]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e2:	4b6e      	ldr	r3, [pc, #440]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	496a      	ldr	r1, [pc, #424]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002604:	4b65      	ldr	r3, [pc, #404]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4962      	ldr	r1, [pc, #392]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002626:	4b5d      	ldr	r3, [pc, #372]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	4959      	ldr	r1, [pc, #356]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002648:	4b54      	ldr	r3, [pc, #336]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	4951      	ldr	r1, [pc, #324]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800266a:	4b4c      	ldr	r3, [pc, #304]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002670:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	4948      	ldr	r1, [pc, #288]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d015      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800268c:	4b43      	ldr	r3, [pc, #268]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4940      	ldr	r1, [pc, #256]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026aa:	d105      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ac:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a3a      	ldr	r2, [pc, #232]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d015      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026c4:	4b35      	ldr	r3, [pc, #212]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d2:	4932      	ldr	r1, [pc, #200]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026e2:	d105      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e4:	4b2d      	ldr	r3, [pc, #180]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a2c      	ldr	r2, [pc, #176]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026fc:	4b27      	ldr	r3, [pc, #156]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270a:	4924      	ldr	r1, [pc, #144]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800271a:	d105      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800271c:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a1e      	ldr	r2, [pc, #120]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002726:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d015      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002734:	4b19      	ldr	r3, [pc, #100]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002742:	4916      	ldr	r1, [pc, #88]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002752:	d105      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4a10      	ldr	r2, [pc, #64]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d019      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800276c:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	4908      	ldr	r1, [pc, #32]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800278a:	d109      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a02      	ldr	r2, [pc, #8]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002796:	60d3      	str	r3, [r2, #12]
 8002798:	e002      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027ac:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	4926      	ldr	r1, [pc, #152]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027ca:	d105      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027cc:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a20      	ldr	r2, [pc, #128]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d015      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f2:	4918      	ldr	r1, [pc, #96]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002802:	d105      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d015      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800281c:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800281e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002822:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282a:	490a      	ldr	r1, [pc, #40]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002836:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800283a:	d105      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002848:	7cbb      	ldrb	r3, [r7, #18]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000

08002858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d001      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e054      	b.n	800291a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a26      	ldr	r2, [pc, #152]	@ (8002928 <HAL_TIM_Base_Start_IT+0xd0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d022      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289a:	d01d      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a22      	ldr	r2, [pc, #136]	@ (800292c <HAL_TIM_Base_Start_IT+0xd4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d018      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_TIM_Base_Start_IT+0xd8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <HAL_TIM_Base_Start_IT+0xdc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00e      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1e      	ldr	r2, [pc, #120]	@ (8002938 <HAL_TIM_Base_Start_IT+0xe0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <HAL_TIM_Base_Start_IT+0xe4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <HAL_TIM_Base_Start_IT+0xe8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d115      	bne.n	8002904 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_TIM_Base_Start_IT+0xec>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d015      	beq.n	8002916 <HAL_TIM_Base_Start_IT+0xbe>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f0:	d011      	beq.n	8002916 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	e008      	b.n	8002916 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e000      	b.n	8002918 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800
 8002934:	40000c00 	.word	0x40000c00
 8002938:	40013400 	.word	0x40013400
 800293c:	40014000 	.word	0x40014000
 8002940:	40015000 	.word	0x40015000
 8002944:	00010007 	.word	0x00010007

08002948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e049      	b.n	80029ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe faba 	bl	8000ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f000 fbb0 	bl	80030ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_TIM_PWM_Start+0x24>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e03c      	b.n	8002a96 <HAL_TIM_PWM_Start+0x9e>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d109      	bne.n	8002a36 <HAL_TIM_PWM_Start+0x3e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	bf14      	ite	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	2300      	moveq	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	e02f      	b.n	8002a96 <HAL_TIM_PWM_Start+0x9e>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d109      	bne.n	8002a50 <HAL_TIM_PWM_Start+0x58>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e022      	b.n	8002a96 <HAL_TIM_PWM_Start+0x9e>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d109      	bne.n	8002a6a <HAL_TIM_PWM_Start+0x72>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	e015      	b.n	8002a96 <HAL_TIM_PWM_Start+0x9e>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d109      	bne.n	8002a84 <HAL_TIM_PWM_Start+0x8c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e008      	b.n	8002a96 <HAL_TIM_PWM_Start+0x9e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0a6      	b.n	8002bec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <HAL_TIM_PWM_Start+0xb6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aac:	e023      	b.n	8002af6 <HAL_TIM_PWM_Start+0xfe>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d104      	bne.n	8002abe <HAL_TIM_PWM_Start+0xc6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002abc:	e01b      	b.n	8002af6 <HAL_TIM_PWM_Start+0xfe>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Start+0xd6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002acc:	e013      	b.n	8002af6 <HAL_TIM_PWM_Start+0xfe>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_PWM_Start+0xe6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002adc:	e00b      	b.n	8002af6 <HAL_TIM_PWM_Start+0xfe>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Start+0xf6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aec:	e003      	b.n	8002af6 <HAL_TIM_PWM_Start+0xfe>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fed2 	bl	80038a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf4 <HAL_TIM_PWM_Start+0x1fc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <HAL_TIM_PWM_Start+0x148>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a39      	ldr	r2, [pc, #228]	@ (8002bf8 <HAL_TIM_PWM_Start+0x200>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <HAL_TIM_PWM_Start+0x148>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a37      	ldr	r2, [pc, #220]	@ (8002bfc <HAL_TIM_PWM_Start+0x204>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_TIM_PWM_Start+0x148>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a36      	ldr	r2, [pc, #216]	@ (8002c00 <HAL_TIM_PWM_Start+0x208>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_TIM_PWM_Start+0x148>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a34      	ldr	r2, [pc, #208]	@ (8002c04 <HAL_TIM_PWM_Start+0x20c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_TIM_PWM_Start+0x148>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a33      	ldr	r2, [pc, #204]	@ (8002c08 <HAL_TIM_PWM_Start+0x210>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIM_PWM_Start+0x14c>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_TIM_PWM_Start+0x14e>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <HAL_TIM_PWM_Start+0x1fc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d022      	beq.n	8002baa <HAL_TIM_PWM_Start+0x1b2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6c:	d01d      	beq.n	8002baa <HAL_TIM_PWM_Start+0x1b2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a26      	ldr	r2, [pc, #152]	@ (8002c0c <HAL_TIM_PWM_Start+0x214>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d018      	beq.n	8002baa <HAL_TIM_PWM_Start+0x1b2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a24      	ldr	r2, [pc, #144]	@ (8002c10 <HAL_TIM_PWM_Start+0x218>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_TIM_PWM_Start+0x1b2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a23      	ldr	r2, [pc, #140]	@ (8002c14 <HAL_TIM_PWM_Start+0x21c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00e      	beq.n	8002baa <HAL_TIM_PWM_Start+0x1b2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a19      	ldr	r2, [pc, #100]	@ (8002bf8 <HAL_TIM_PWM_Start+0x200>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d009      	beq.n	8002baa <HAL_TIM_PWM_Start+0x1b2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <HAL_TIM_PWM_Start+0x204>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_TIM_PWM_Start+0x1b2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a18      	ldr	r2, [pc, #96]	@ (8002c08 <HAL_TIM_PWM_Start+0x210>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d115      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <HAL_TIM_PWM_Start+0x220>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d015      	beq.n	8002be8 <HAL_TIM_PWM_Start+0x1f0>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc2:	d011      	beq.n	8002be8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	e008      	b.n	8002be8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e000      	b.n	8002bea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40013400 	.word	0x40013400
 8002bfc:	40014000 	.word	0x40014000
 8002c00:	40014400 	.word	0x40014400
 8002c04:	40014800 	.word	0x40014800
 8002c08:	40015000 	.word	0x40015000
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40000800 	.word	0x40000800
 8002c14:	40000c00 	.word	0x40000c00
 8002c18:	00010007 	.word	0x00010007

08002c1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e097      	b.n	8002d60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fe f877 	bl	8000d38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002c60:	f023 0307 	bic.w	r3, r3, #7
 8002c64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f000 fa3b 	bl	80030ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002cbc:	f023 030c 	bic.w	r3, r3, #12
 8002cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	011a      	lsls	r2, r3, #4
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	031b      	lsls	r3, r3, #12
 8002cec:	4313      	orrs	r3, r2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d110      	bne.n	8002dba <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d9e:	7b7b      	ldrb	r3, [r7, #13]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d001      	beq.n	8002da8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e089      	b.n	8002ebc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db8:	e031      	b.n	8002e1e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d110      	bne.n	8002de2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dc0:	7bbb      	ldrb	r3, [r7, #14]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dc6:	7b3b      	ldrb	r3, [r7, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e075      	b.n	8002ebc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002de0:	e01d      	b.n	8002e1e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d108      	bne.n	8002dfa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dee:	7b7b      	ldrb	r3, [r7, #13]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d102      	bne.n	8002dfa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e05e      	b.n	8002ebc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_TIM_Encoder_Start_IT+0xc4>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d010      	beq.n	8002e4c <HAL_TIM_Encoder_Start_IT+0xe4>
 8002e2a:	e01f      	b.n	8002e6c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fd37 	bl	80038a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0202 	orr.w	r2, r2, #2
 8002e48:	60da      	str	r2, [r3, #12]
      break;
 8002e4a:	e02e      	b.n	8002eaa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	2104      	movs	r1, #4
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fd27 	bl	80038a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0204 	orr.w	r2, r2, #4
 8002e68:	60da      	str	r2, [r3, #12]
      break;
 8002e6a:	e01e      	b.n	8002eaa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2201      	movs	r2, #1
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fd17 	bl	80038a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2104      	movs	r1, #4
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fd10 	bl	80038a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0202 	orr.w	r2, r2, #2
 8002e96:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0204 	orr.w	r2, r2, #4
 8002ea6:	60da      	str	r2, [r3, #12]
      break;
 8002ea8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0ff      	b.n	80030e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b14      	cmp	r3, #20
 8002eee:	f200 80f0 	bhi.w	80030d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f4d 	.word	0x08002f4d
 8002efc:	080030d3 	.word	0x080030d3
 8002f00:	080030d3 	.word	0x080030d3
 8002f04:	080030d3 	.word	0x080030d3
 8002f08:	08002f8d 	.word	0x08002f8d
 8002f0c:	080030d3 	.word	0x080030d3
 8002f10:	080030d3 	.word	0x080030d3
 8002f14:	080030d3 	.word	0x080030d3
 8002f18:	08002fcf 	.word	0x08002fcf
 8002f1c:	080030d3 	.word	0x080030d3
 8002f20:	080030d3 	.word	0x080030d3
 8002f24:	080030d3 	.word	0x080030d3
 8002f28:	0800300f 	.word	0x0800300f
 8002f2c:	080030d3 	.word	0x080030d3
 8002f30:	080030d3 	.word	0x080030d3
 8002f34:	080030d3 	.word	0x080030d3
 8002f38:	08003051 	.word	0x08003051
 8002f3c:	080030d3 	.word	0x080030d3
 8002f40:	080030d3 	.word	0x080030d3
 8002f44:	080030d3 	.word	0x080030d3
 8002f48:	08003091 	.word	0x08003091
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f97e 	bl	8003254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0208 	orr.w	r2, r2, #8
 8002f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0204 	bic.w	r2, r2, #4
 8002f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6999      	ldr	r1, [r3, #24]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	619a      	str	r2, [r3, #24]
      break;
 8002f8a:	e0a5      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f9f8 	bl	8003388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6999      	ldr	r1, [r3, #24]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	021a      	lsls	r2, r3, #8
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	619a      	str	r2, [r3, #24]
      break;
 8002fcc:	e084      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fa6b 	bl	80034b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0208 	orr.w	r2, r2, #8
 8002fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0204 	bic.w	r2, r2, #4
 8002ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69d9      	ldr	r1, [r3, #28]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	61da      	str	r2, [r3, #28]
      break;
 800300c:	e064      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fadd 	bl	80035d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69d9      	ldr	r1, [r3, #28]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	021a      	lsls	r2, r3, #8
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	61da      	str	r2, [r3, #28]
      break;
 800304e:	e043      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fb50 	bl	80036fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800308e:	e023      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fb9a 	bl	80037d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	021a      	lsls	r2, r3, #8
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80030d0:	e002      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	75fb      	strb	r3, [r7, #23]
      break;
 80030d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop

080030ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003230 <TIM_Base_SetConfig+0x144>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d017      	beq.n	8003134 <TIM_Base_SetConfig+0x48>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310a:	d013      	beq.n	8003134 <TIM_Base_SetConfig+0x48>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a49      	ldr	r2, [pc, #292]	@ (8003234 <TIM_Base_SetConfig+0x148>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00f      	beq.n	8003134 <TIM_Base_SetConfig+0x48>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a48      	ldr	r2, [pc, #288]	@ (8003238 <TIM_Base_SetConfig+0x14c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00b      	beq.n	8003134 <TIM_Base_SetConfig+0x48>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a47      	ldr	r2, [pc, #284]	@ (800323c <TIM_Base_SetConfig+0x150>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d007      	beq.n	8003134 <TIM_Base_SetConfig+0x48>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a46      	ldr	r2, [pc, #280]	@ (8003240 <TIM_Base_SetConfig+0x154>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0x48>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a45      	ldr	r2, [pc, #276]	@ (8003244 <TIM_Base_SetConfig+0x158>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d108      	bne.n	8003146 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a39      	ldr	r2, [pc, #228]	@ (8003230 <TIM_Base_SetConfig+0x144>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d023      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003154:	d01f      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a36      	ldr	r2, [pc, #216]	@ (8003234 <TIM_Base_SetConfig+0x148>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01b      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a35      	ldr	r2, [pc, #212]	@ (8003238 <TIM_Base_SetConfig+0x14c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d017      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a34      	ldr	r2, [pc, #208]	@ (800323c <TIM_Base_SetConfig+0x150>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a33      	ldr	r2, [pc, #204]	@ (8003240 <TIM_Base_SetConfig+0x154>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a33      	ldr	r2, [pc, #204]	@ (8003248 <TIM_Base_SetConfig+0x15c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a32      	ldr	r2, [pc, #200]	@ (800324c <TIM_Base_SetConfig+0x160>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a31      	ldr	r2, [pc, #196]	@ (8003250 <TIM_Base_SetConfig+0x164>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0xaa>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2c      	ldr	r2, [pc, #176]	@ (8003244 <TIM_Base_SetConfig+0x158>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a18      	ldr	r2, [pc, #96]	@ (8003230 <TIM_Base_SetConfig+0x144>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <TIM_Base_SetConfig+0x110>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003240 <TIM_Base_SetConfig+0x154>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00f      	beq.n	80031fc <TIM_Base_SetConfig+0x110>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1a      	ldr	r2, [pc, #104]	@ (8003248 <TIM_Base_SetConfig+0x15c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00b      	beq.n	80031fc <TIM_Base_SetConfig+0x110>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a19      	ldr	r2, [pc, #100]	@ (800324c <TIM_Base_SetConfig+0x160>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <TIM_Base_SetConfig+0x110>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <TIM_Base_SetConfig+0x164>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0x110>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a13      	ldr	r2, [pc, #76]	@ (8003244 <TIM_Base_SetConfig+0x158>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d103      	bne.n	8003204 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]
  }
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800
 800323c:	40000c00 	.word	0x40000c00
 8003240:	40013400 	.word	0x40013400
 8003244:	40015000 	.word	0x40015000
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800

08003254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f023 0201 	bic.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 0302 	bic.w	r3, r3, #2
 80032a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a30      	ldr	r2, [pc, #192]	@ (8003370 <TIM_OC1_SetConfig+0x11c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <TIM_OC1_SetConfig+0x88>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003374 <TIM_OC1_SetConfig+0x120>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00f      	beq.n	80032dc <TIM_OC1_SetConfig+0x88>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a2e      	ldr	r2, [pc, #184]	@ (8003378 <TIM_OC1_SetConfig+0x124>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00b      	beq.n	80032dc <TIM_OC1_SetConfig+0x88>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2d      	ldr	r2, [pc, #180]	@ (800337c <TIM_OC1_SetConfig+0x128>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <TIM_OC1_SetConfig+0x88>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003380 <TIM_OC1_SetConfig+0x12c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_OC1_SetConfig+0x88>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003384 <TIM_OC1_SetConfig+0x130>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d10c      	bne.n	80032f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0308 	bic.w	r3, r3, #8
 80032e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <TIM_OC1_SetConfig+0x11c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <TIM_OC1_SetConfig+0xd2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <TIM_OC1_SetConfig+0x120>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00f      	beq.n	8003326 <TIM_OC1_SetConfig+0xd2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1b      	ldr	r2, [pc, #108]	@ (8003378 <TIM_OC1_SetConfig+0x124>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00b      	beq.n	8003326 <TIM_OC1_SetConfig+0xd2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1a      	ldr	r2, [pc, #104]	@ (800337c <TIM_OC1_SetConfig+0x128>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <TIM_OC1_SetConfig+0xd2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a19      	ldr	r2, [pc, #100]	@ (8003380 <TIM_OC1_SetConfig+0x12c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_OC1_SetConfig+0xd2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a18      	ldr	r2, [pc, #96]	@ (8003384 <TIM_OC1_SetConfig+0x130>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d111      	bne.n	800334a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800332c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	621a      	str	r2, [r3, #32]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40012c00 	.word	0x40012c00
 8003374:	40013400 	.word	0x40013400
 8003378:	40014000 	.word	0x40014000
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800
 8003384:	40015000 	.word	0x40015000

08003388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f023 0210 	bic.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0320 	bic.w	r3, r3, #32
 80033d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003498 <TIM_OC2_SetConfig+0x110>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_OC2_SetConfig+0x74>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <TIM_OC2_SetConfig+0x114>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_OC2_SetConfig+0x74>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a2a      	ldr	r2, [pc, #168]	@ (80034a0 <TIM_OC2_SetConfig+0x118>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d10d      	bne.n	8003418 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003416:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a1f      	ldr	r2, [pc, #124]	@ (8003498 <TIM_OC2_SetConfig+0x110>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <TIM_OC2_SetConfig+0xc0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <TIM_OC2_SetConfig+0x114>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00f      	beq.n	8003448 <TIM_OC2_SetConfig+0xc0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a1e      	ldr	r2, [pc, #120]	@ (80034a4 <TIM_OC2_SetConfig+0x11c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00b      	beq.n	8003448 <TIM_OC2_SetConfig+0xc0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <TIM_OC2_SetConfig+0x120>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_OC2_SetConfig+0xc0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1c      	ldr	r2, [pc, #112]	@ (80034ac <TIM_OC2_SetConfig+0x124>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_OC2_SetConfig+0xc0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a17      	ldr	r2, [pc, #92]	@ (80034a0 <TIM_OC2_SetConfig+0x118>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d113      	bne.n	8003470 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800344e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40013400 	.word	0x40013400
 80034a0:	40015000 	.word	0x40015000
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800

080034b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a2b      	ldr	r2, [pc, #172]	@ (80035bc <TIM_OC3_SetConfig+0x10c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_OC3_SetConfig+0x72>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2a      	ldr	r2, [pc, #168]	@ (80035c0 <TIM_OC3_SetConfig+0x110>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_OC3_SetConfig+0x72>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <TIM_OC3_SetConfig+0x114>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10d      	bne.n	800353e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800353c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1e      	ldr	r2, [pc, #120]	@ (80035bc <TIM_OC3_SetConfig+0x10c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <TIM_OC3_SetConfig+0xbe>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <TIM_OC3_SetConfig+0x110>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00f      	beq.n	800356e <TIM_OC3_SetConfig+0xbe>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1d      	ldr	r2, [pc, #116]	@ (80035c8 <TIM_OC3_SetConfig+0x118>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00b      	beq.n	800356e <TIM_OC3_SetConfig+0xbe>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1c      	ldr	r2, [pc, #112]	@ (80035cc <TIM_OC3_SetConfig+0x11c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <TIM_OC3_SetConfig+0xbe>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1b      	ldr	r2, [pc, #108]	@ (80035d0 <TIM_OC3_SetConfig+0x120>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_OC3_SetConfig+0xbe>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a16      	ldr	r2, [pc, #88]	@ (80035c4 <TIM_OC3_SetConfig+0x114>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d113      	bne.n	8003596 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40013400 	.word	0x40013400
 80035c4:	40015000 	.word	0x40015000
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800

080035d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800360e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	031b      	lsls	r3, r3, #12
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a2c      	ldr	r2, [pc, #176]	@ (80036e4 <TIM_OC4_SetConfig+0x110>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_OC4_SetConfig+0x74>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2b      	ldr	r2, [pc, #172]	@ (80036e8 <TIM_OC4_SetConfig+0x114>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_OC4_SetConfig+0x74>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a2a      	ldr	r2, [pc, #168]	@ (80036ec <TIM_OC4_SetConfig+0x118>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10d      	bne.n	8003664 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800364e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	031b      	lsls	r3, r3, #12
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1f      	ldr	r2, [pc, #124]	@ (80036e4 <TIM_OC4_SetConfig+0x110>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <TIM_OC4_SetConfig+0xc0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <TIM_OC4_SetConfig+0x114>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00f      	beq.n	8003694 <TIM_OC4_SetConfig+0xc0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a1e      	ldr	r2, [pc, #120]	@ (80036f0 <TIM_OC4_SetConfig+0x11c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00b      	beq.n	8003694 <TIM_OC4_SetConfig+0xc0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a1d      	ldr	r2, [pc, #116]	@ (80036f4 <TIM_OC4_SetConfig+0x120>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_OC4_SetConfig+0xc0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <TIM_OC4_SetConfig+0x124>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_OC4_SetConfig+0xc0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a17      	ldr	r2, [pc, #92]	@ (80036ec <TIM_OC4_SetConfig+0x118>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d113      	bne.n	80036bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800369a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	019b      	lsls	r3, r3, #6
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40013400 	.word	0x40013400
 80036ec:	40015000 	.word	0x40015000
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800

080036fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003740:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <TIM_OC5_SetConfig+0xbc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <TIM_OC5_SetConfig+0x82>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <TIM_OC5_SetConfig+0xc0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00f      	beq.n	800377e <TIM_OC5_SetConfig+0x82>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <TIM_OC5_SetConfig+0xc4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00b      	beq.n	800377e <TIM_OC5_SetConfig+0x82>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a16      	ldr	r2, [pc, #88]	@ (80037c4 <TIM_OC5_SetConfig+0xc8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <TIM_OC5_SetConfig+0x82>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <TIM_OC5_SetConfig+0xcc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_OC5_SetConfig+0x82>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a14      	ldr	r2, [pc, #80]	@ (80037cc <TIM_OC5_SetConfig+0xd0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d109      	bne.n	8003792 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	621a      	str	r2, [r3, #32]
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40013400 	.word	0x40013400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800
 80037cc:	40015000 	.word	0x40015000

080037d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	051b      	lsls	r3, r3, #20
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1a      	ldr	r2, [pc, #104]	@ (8003890 <TIM_OC6_SetConfig+0xc0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <TIM_OC6_SetConfig+0x84>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a19      	ldr	r2, [pc, #100]	@ (8003894 <TIM_OC6_SetConfig+0xc4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00f      	beq.n	8003854 <TIM_OC6_SetConfig+0x84>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a18      	ldr	r2, [pc, #96]	@ (8003898 <TIM_OC6_SetConfig+0xc8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00b      	beq.n	8003854 <TIM_OC6_SetConfig+0x84>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a17      	ldr	r2, [pc, #92]	@ (800389c <TIM_OC6_SetConfig+0xcc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_OC6_SetConfig+0x84>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a16      	ldr	r2, [pc, #88]	@ (80038a0 <TIM_OC6_SetConfig+0xd0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_OC6_SetConfig+0x84>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a15      	ldr	r2, [pc, #84]	@ (80038a4 <TIM_OC6_SetConfig+0xd4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d109      	bne.n	8003868 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	029b      	lsls	r3, r3, #10
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40013400 	.word	0x40013400
 8003898:	40014000 	.word	0x40014000
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800
 80038a4:	40015000 	.word	0x40015000

080038a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2201      	movs	r2, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	401a      	ands	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003908:	2302      	movs	r3, #2
 800390a:	e074      	b.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a34      	ldr	r2, [pc, #208]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a33      	ldr	r2, [pc, #204]	@ (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a31      	ldr	r2, [pc, #196]	@ (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003950:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a21      	ldr	r2, [pc, #132]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d022      	beq.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398c:	d01d      	beq.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1f      	ldr	r2, [pc, #124]	@ (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d018      	beq.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00e      	beq.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a15      	ldr	r2, [pc, #84]	@ (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d009      	beq.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a18      	ldr	r2, [pc, #96]	@ (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d004      	beq.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a11      	ldr	r2, [pc, #68]	@ (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10c      	bne.n	80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40013400 	.word	0x40013400
 8003a0c:	40015000 	.word	0x40015000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40014000 	.word	0x40014000

08003a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e042      	b.n	8003ab8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd fb45 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2224      	movs	r2, #36	@ 0x24
 8003a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fb24 	bl	80040b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f825 	bl	8003ac0 <UART_SetConfig>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e01b      	b.n	8003ab8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fba3 	bl	80041fc <UART_CheckIdleState>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac4:	b08c      	sub	sp, #48	@ 0x30
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4baa      	ldr	r3, [pc, #680]	@ (8003d98 <UART_SetConfig+0x2d8>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a9f      	ldr	r2, [pc, #636]	@ (8003d9c <UART_SetConfig+0x2dc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003b36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4a:	f023 010f 	bic.w	r1, r3, #15
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a90      	ldr	r2, [pc, #576]	@ (8003da0 <UART_SetConfig+0x2e0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d125      	bne.n	8003bb0 <UART_SetConfig+0xf0>
 8003b64:	4b8f      	ldr	r3, [pc, #572]	@ (8003da4 <UART_SetConfig+0x2e4>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d81a      	bhi.n	8003ba8 <UART_SetConfig+0xe8>
 8003b72:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <UART_SetConfig+0xb8>)
 8003b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b78:	08003b89 	.word	0x08003b89
 8003b7c:	08003b99 	.word	0x08003b99
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003ba1 	.word	0x08003ba1
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8e:	e116      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003b90:	2302      	movs	r3, #2
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b96:	e112      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9e:	e10e      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ba6:	e10a      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bae:	e106      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8003da8 <UART_SetConfig+0x2e8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d138      	bne.n	8003c2c <UART_SetConfig+0x16c>
 8003bba:	4b7a      	ldr	r3, [pc, #488]	@ (8003da4 <UART_SetConfig+0x2e4>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d82d      	bhi.n	8003c24 <UART_SetConfig+0x164>
 8003bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <UART_SetConfig+0x110>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003c05 	.word	0x08003c05
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c25 	.word	0x08003c25
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c0d 	.word	0x08003c0d
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c1d 	.word	0x08003c1d
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0a:	e0d8      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c12:	e0d4      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c1a:	e0d0      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c22:	e0cc      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c2a:	e0c8      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5e      	ldr	r2, [pc, #376]	@ (8003dac <UART_SetConfig+0x2ec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d125      	bne.n	8003c82 <UART_SetConfig+0x1c2>
 8003c36:	4b5b      	ldr	r3, [pc, #364]	@ (8003da4 <UART_SetConfig+0x2e4>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c40:	2b30      	cmp	r3, #48	@ 0x30
 8003c42:	d016      	beq.n	8003c72 <UART_SetConfig+0x1b2>
 8003c44:	2b30      	cmp	r3, #48	@ 0x30
 8003c46:	d818      	bhi.n	8003c7a <UART_SetConfig+0x1ba>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d00a      	beq.n	8003c62 <UART_SetConfig+0x1a2>
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d814      	bhi.n	8003c7a <UART_SetConfig+0x1ba>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <UART_SetConfig+0x19a>
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d008      	beq.n	8003c6a <UART_SetConfig+0x1aa>
 8003c58:	e00f      	b.n	8003c7a <UART_SetConfig+0x1ba>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c60:	e0ad      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c62:	2302      	movs	r3, #2
 8003c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c68:	e0a9      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c70:	e0a5      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c72:	2308      	movs	r3, #8
 8003c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c78:	e0a1      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c7a:	2310      	movs	r3, #16
 8003c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c80:	e09d      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a4a      	ldr	r2, [pc, #296]	@ (8003db0 <UART_SetConfig+0x2f0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d125      	bne.n	8003cd8 <UART_SetConfig+0x218>
 8003c8c:	4b45      	ldr	r3, [pc, #276]	@ (8003da4 <UART_SetConfig+0x2e4>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c98:	d016      	beq.n	8003cc8 <UART_SetConfig+0x208>
 8003c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c9c:	d818      	bhi.n	8003cd0 <UART_SetConfig+0x210>
 8003c9e:	2b80      	cmp	r3, #128	@ 0x80
 8003ca0:	d00a      	beq.n	8003cb8 <UART_SetConfig+0x1f8>
 8003ca2:	2b80      	cmp	r3, #128	@ 0x80
 8003ca4:	d814      	bhi.n	8003cd0 <UART_SetConfig+0x210>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <UART_SetConfig+0x1f0>
 8003caa:	2b40      	cmp	r3, #64	@ 0x40
 8003cac:	d008      	beq.n	8003cc0 <UART_SetConfig+0x200>
 8003cae:	e00f      	b.n	8003cd0 <UART_SetConfig+0x210>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cb6:	e082      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cbe:	e07e      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc6:	e07a      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003cc8:	2308      	movs	r3, #8
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cce:	e076      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cd6:	e072      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a35      	ldr	r2, [pc, #212]	@ (8003db4 <UART_SetConfig+0x2f4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d12a      	bne.n	8003d38 <UART_SetConfig+0x278>
 8003ce2:	4b30      	ldr	r3, [pc, #192]	@ (8003da4 <UART_SetConfig+0x2e4>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf0:	d01a      	beq.n	8003d28 <UART_SetConfig+0x268>
 8003cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf6:	d81b      	bhi.n	8003d30 <UART_SetConfig+0x270>
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfc:	d00c      	beq.n	8003d18 <UART_SetConfig+0x258>
 8003cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d02:	d815      	bhi.n	8003d30 <UART_SetConfig+0x270>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <UART_SetConfig+0x250>
 8003d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d0c:	d008      	beq.n	8003d20 <UART_SetConfig+0x260>
 8003d0e:	e00f      	b.n	8003d30 <UART_SetConfig+0x270>
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d16:	e052      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d1e:	e04e      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d20:	2304      	movs	r3, #4
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d26:	e04a      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d28:	2308      	movs	r3, #8
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d2e:	e046      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d30:	2310      	movs	r3, #16
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d36:	e042      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a17      	ldr	r2, [pc, #92]	@ (8003d9c <UART_SetConfig+0x2dc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d13a      	bne.n	8003db8 <UART_SetConfig+0x2f8>
 8003d42:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <UART_SetConfig+0x2e4>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d50:	d01a      	beq.n	8003d88 <UART_SetConfig+0x2c8>
 8003d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d56:	d81b      	bhi.n	8003d90 <UART_SetConfig+0x2d0>
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d5c:	d00c      	beq.n	8003d78 <UART_SetConfig+0x2b8>
 8003d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d62:	d815      	bhi.n	8003d90 <UART_SetConfig+0x2d0>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <UART_SetConfig+0x2b0>
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6c:	d008      	beq.n	8003d80 <UART_SetConfig+0x2c0>
 8003d6e:	e00f      	b.n	8003d90 <UART_SetConfig+0x2d0>
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d76:	e022      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d7e:	e01e      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d80:	2304      	movs	r3, #4
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d86:	e01a      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d88:	2308      	movs	r3, #8
 8003d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d8e:	e016      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d90:	2310      	movs	r3, #16
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d96:	e012      	b.n	8003dbe <UART_SetConfig+0x2fe>
 8003d98:	cfff69f3 	.word	0xcfff69f3
 8003d9c:	40008000 	.word	0x40008000
 8003da0:	40013800 	.word	0x40013800
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40004400 	.word	0x40004400
 8003dac:	40004800 	.word	0x40004800
 8003db0:	40004c00 	.word	0x40004c00
 8003db4:	40005000 	.word	0x40005000
 8003db8:	2310      	movs	r3, #16
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4aae      	ldr	r2, [pc, #696]	@ (800407c <UART_SetConfig+0x5bc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f040 8097 	bne.w	8003ef8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d823      	bhi.n	8003e1a <UART_SetConfig+0x35a>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <UART_SetConfig+0x318>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e1b 	.word	0x08003e1b
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e1b 	.word	0x08003e1b
 8003de8:	08003e0b 	.word	0x08003e0b
 8003dec:	08003e1b 	.word	0x08003e1b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e1b 	.word	0x08003e1b
 8003df8:	08003e13 	.word	0x08003e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f7fe fa6c 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8003e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e02:	e010      	b.n	8003e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e04:	4b9e      	ldr	r3, [pc, #632]	@ (8004080 <UART_SetConfig+0x5c0>)
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e08:	e00d      	b.n	8003e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0a:	f7fe f9f7 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 8003e0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e10:	e009      	b.n	8003e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e18:	e005      	b.n	8003e26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8130 	beq.w	800408e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	4a94      	ldr	r2, [pc, #592]	@ (8004084 <UART_SetConfig+0x5c4>)
 8003e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d305      	bcc.n	8003e5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d903      	bls.n	8003e66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e64:	e113      	b.n	800408e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	2200      	movs	r2, #0
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	60fa      	str	r2, [r7, #12]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	4a84      	ldr	r2, [pc, #528]	@ (8004084 <UART_SetConfig+0x5c4>)
 8003e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e88:	f7fc f9c6 	bl	8000218 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	020b      	lsls	r3, r1, #8
 8003e9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ea2:	0202      	lsls	r2, r0, #8
 8003ea4:	6979      	ldr	r1, [r7, #20]
 8003ea6:	6849      	ldr	r1, [r1, #4]
 8003ea8:	0849      	lsrs	r1, r1, #1
 8003eaa:	2000      	movs	r0, #0
 8003eac:	460c      	mov	r4, r1
 8003eae:	4605      	mov	r5, r0
 8003eb0:	eb12 0804 	adds.w	r8, r2, r4
 8003eb4:	eb43 0905 	adc.w	r9, r3, r5
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	469a      	mov	sl, r3
 8003ec0:	4693      	mov	fp, r2
 8003ec2:	4652      	mov	r2, sl
 8003ec4:	465b      	mov	r3, fp
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	4649      	mov	r1, r9
 8003eca:	f7fc f9a5 	bl	8000218 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003edc:	d308      	bcc.n	8003ef0 <UART_SetConfig+0x430>
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ee4:	d204      	bcs.n	8003ef0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	e0ce      	b.n	800408e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ef6:	e0ca      	b.n	800408e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f00:	d166      	bne.n	8003fd0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d827      	bhi.n	8003f5a <UART_SetConfig+0x49a>
 8003f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <UART_SetConfig+0x450>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	08003f3d 	.word	0x08003f3d
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f5b 	.word	0x08003f5b
 8003f20:	08003f4b 	.word	0x08003f4b
 8003f24:	08003f5b 	.word	0x08003f5b
 8003f28:	08003f5b 	.word	0x08003f5b
 8003f2c:	08003f5b 	.word	0x08003f5b
 8003f30:	08003f53 	.word	0x08003f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7fe f9d0 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8003f38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f3a:	e014      	b.n	8003f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f3c:	f7fe f9e2 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8003f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f42:	e010      	b.n	8003f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f44:	4b4e      	ldr	r3, [pc, #312]	@ (8004080 <UART_SetConfig+0x5c0>)
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f48:	e00d      	b.n	8003f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4a:	f7fe f957 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 8003f4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f50:	e009      	b.n	8003f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f58:	e005      	b.n	8003f66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8090 	beq.w	800408e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	4a44      	ldr	r2, [pc, #272]	@ (8004084 <UART_SetConfig+0x5c4>)
 8003f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f80:	005a      	lsls	r2, r3, #1
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	441a      	add	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	d916      	bls.n	8003fc8 <UART_SetConfig+0x508>
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa0:	d212      	bcs.n	8003fc8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f023 030f 	bic.w	r3, r3, #15
 8003faa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	8bfb      	ldrh	r3, [r7, #30]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	8bfa      	ldrh	r2, [r7, #30]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	e062      	b.n	800408e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fce:	e05e      	b.n	800408e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d828      	bhi.n	800402a <UART_SetConfig+0x56a>
 8003fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <UART_SetConfig+0x520>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	0800401b 	.word	0x0800401b
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	0800402b 	.word	0x0800402b
 8004000:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe f968 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8004008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800400a:	e014      	b.n	8004036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe f97a 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8004010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004012:	e010      	b.n	8004036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b1a      	ldr	r3, [pc, #104]	@ (8004080 <UART_SetConfig+0x5c0>)
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004018:	e00d      	b.n	8004036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7fe f8ef 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 800401e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004020:	e009      	b.n	8004036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004028:	e005      	b.n	8004036 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004034:	bf00      	nop
    }

    if (pclk != 0U)
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	2b00      	cmp	r3, #0
 800403a:	d028      	beq.n	800408e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	4a10      	ldr	r2, [pc, #64]	@ (8004084 <UART_SetConfig+0x5c4>)
 8004042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004046:	461a      	mov	r2, r3
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	fbb3 f2f2 	udiv	r2, r3, r2
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	441a      	add	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	d910      	bls.n	8004088 <UART_SetConfig+0x5c8>
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800406c:	d20c      	bcs.n	8004088 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	b29a      	uxth	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	e009      	b.n	800408e <UART_SetConfig+0x5ce>
 800407a:	bf00      	nop
 800407c:	40008000 	.word	0x40008000
 8004080:	00f42400 	.word	0x00f42400
 8004084:	08004784 	.word	0x08004784
      }
      else
      {
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2201      	movs	r2, #1
 8004092:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2201      	movs	r2, #1
 800409a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2200      	movs	r2, #0
 80040a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2200      	movs	r2, #0
 80040a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80040aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3730      	adds	r7, #48	@ 0x30
 80040b2:	46bd      	mov	sp, r7
 80040b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080040b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b6:	d10a      	bne.n	80041ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b098      	sub	sp, #96	@ 0x60
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800420c:	f7fd f848 	bl	80012a0 <HAL_GetTick>
 8004210:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d12f      	bne.n	8004280 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004228:	2200      	movs	r2, #0
 800422a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f88e 	bl	8004350 <UART_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d022      	beq.n	8004280 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800424e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004258:	647b      	str	r3, [r7, #68]	@ 0x44
 800425a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800425e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e6      	bne.n	800423a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e063      	b.n	8004348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d149      	bne.n	8004322 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004296:	2200      	movs	r2, #0
 8004298:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f857 	bl	8004350 <UART_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d03c      	beq.n	8004322 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	623b      	str	r3, [r7, #32]
   return(result);
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e6      	bne.n	80042a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3308      	adds	r3, #8
 80042e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042fa:	61fa      	str	r2, [r7, #28]
 80042fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	69b9      	ldr	r1, [r7, #24]
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	617b      	str	r3, [r7, #20]
   return(result);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e012      	b.n	8004348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3758      	adds	r7, #88	@ 0x58
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004360:	e04f      	b.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004368:	d04b      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436a:	f7fc ff99 	bl	80012a0 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <UART_WaitOnFlagUntilTimeout+0x30>
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e04e      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d037      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b80      	cmp	r3, #128	@ 0x80
 8004396:	d034      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b40      	cmp	r3, #64	@ 0x40
 800439c:	d031      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d110      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2208      	movs	r2, #8
 80043b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f838 	bl	800442a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2208      	movs	r2, #8
 80043be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e029      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043dc:	d111      	bne.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f81e 	bl	800442a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e00f      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	bf0c      	ite	eq
 8004412:	2301      	moveq	r3, #1
 8004414:	2300      	movne	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	429a      	cmp	r2, r3
 800441e:	d0a0      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800442a:	b480      	push	{r7}
 800442c:	b095      	sub	sp, #84	@ 0x54
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004450:	643b      	str	r3, [r7, #64]	@ 0x40
 8004452:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800445e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e6      	bne.n	8004432 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3308      	adds	r3, #8
 800446a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	61fb      	str	r3, [r7, #28]
   return(result);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3308      	adds	r3, #8
 8004486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800448a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800448e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e3      	bne.n	8004464 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d118      	bne.n	80044d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f023 0310 	bic.w	r3, r3, #16
 80044b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	613b      	str	r3, [r7, #16]
   return(result);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e6      	bne.n	80044a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044ea:	bf00      	nop
 80044ec:	3754      	adds	r7, #84	@ 0x54
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_UARTEx_DisableFifoMode+0x16>
 8004508:	2302      	movs	r3, #2
 800450a:	e027      	b.n	800455c <HAL_UARTEx_DisableFifoMode+0x66>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	@ 0x24
 8004518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800453a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800457c:	2302      	movs	r3, #2
 800457e:	e02d      	b.n	80045dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	@ 0x24
 800458c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f84f 	bl	8004660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e02d      	b.n	8004658 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	@ 0x24
 8004608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f811 	bl	8004660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800466c:	2b00      	cmp	r3, #0
 800466e:	d108      	bne.n	8004682 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004680:	e031      	b.n	80046e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004682:	2308      	movs	r3, #8
 8004684:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004686:	2308      	movs	r3, #8
 8004688:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	0e5b      	lsrs	r3, r3, #25
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	0f5b      	lsrs	r3, r3, #29
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046aa:	7bbb      	ldrb	r3, [r7, #14]
 80046ac:	7b3a      	ldrb	r2, [r7, #12]
 80046ae:	4911      	ldr	r1, [pc, #68]	@ (80046f4 <UARTEx_SetNbDataToProcess+0x94>)
 80046b0:	5c8a      	ldrb	r2, [r1, r2]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80046b6:	7b3a      	ldrb	r2, [r7, #12]
 80046b8:	490f      	ldr	r1, [pc, #60]	@ (80046f8 <UARTEx_SetNbDataToProcess+0x98>)
 80046ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	7b7a      	ldrb	r2, [r7, #13]
 80046cc:	4909      	ldr	r1, [pc, #36]	@ (80046f4 <UARTEx_SetNbDataToProcess+0x94>)
 80046ce:	5c8a      	ldrb	r2, [r1, r2]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046d4:	7b7a      	ldrb	r2, [r7, #13]
 80046d6:	4908      	ldr	r1, [pc, #32]	@ (80046f8 <UARTEx_SetNbDataToProcess+0x98>)
 80046d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046da:	fb93 f3f2 	sdiv	r3, r3, r2
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	0800479c 	.word	0x0800479c
 80046f8:	080047a4 	.word	0x080047a4

080046fc <memset>:
 80046fc:	4402      	add	r2, r0
 80046fe:	4603      	mov	r3, r0
 8004700:	4293      	cmp	r3, r2
 8004702:	d100      	bne.n	8004706 <memset+0xa>
 8004704:	4770      	bx	lr
 8004706:	f803 1b01 	strb.w	r1, [r3], #1
 800470a:	e7f9      	b.n	8004700 <memset+0x4>

0800470c <__libc_init_array>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4d0d      	ldr	r5, [pc, #52]	@ (8004744 <__libc_init_array+0x38>)
 8004710:	4c0d      	ldr	r4, [pc, #52]	@ (8004748 <__libc_init_array+0x3c>)
 8004712:	1b64      	subs	r4, r4, r5
 8004714:	10a4      	asrs	r4, r4, #2
 8004716:	2600      	movs	r6, #0
 8004718:	42a6      	cmp	r6, r4
 800471a:	d109      	bne.n	8004730 <__libc_init_array+0x24>
 800471c:	4d0b      	ldr	r5, [pc, #44]	@ (800474c <__libc_init_array+0x40>)
 800471e:	4c0c      	ldr	r4, [pc, #48]	@ (8004750 <__libc_init_array+0x44>)
 8004720:	f000 f818 	bl	8004754 <_init>
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	2600      	movs	r6, #0
 800472a:	42a6      	cmp	r6, r4
 800472c:	d105      	bne.n	800473a <__libc_init_array+0x2e>
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	f855 3b04 	ldr.w	r3, [r5], #4
 8004734:	4798      	blx	r3
 8004736:	3601      	adds	r6, #1
 8004738:	e7ee      	b.n	8004718 <__libc_init_array+0xc>
 800473a:	f855 3b04 	ldr.w	r3, [r5], #4
 800473e:	4798      	blx	r3
 8004740:	3601      	adds	r6, #1
 8004742:	e7f2      	b.n	800472a <__libc_init_array+0x1e>
 8004744:	080047b4 	.word	0x080047b4
 8004748:	080047b4 	.word	0x080047b4
 800474c:	080047b4 	.word	0x080047b4
 8004750:	080047b8 	.word	0x080047b8

08004754 <_init>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr

08004760 <_fini>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr
