
tommy_fork_lift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000426c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004444  08004444  00005444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004484  08004484  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004484  08004484  00005484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800448c  0800448c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800448c  0800448c  0000548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004490  08004490  00005490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004494  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  080044a0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080044a0  000061ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a7b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002495  00000000  00000000  00017ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00019f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c77  00000000  00000000  0001af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a53  00000000  00000000  0001bbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013246  00000000  00000000  0003c612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8016  00000000  00000000  0004f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012786e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  001278b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0012bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800442c 	.word	0x0800442c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800442c 	.word	0x0800442c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b3f      	ldr	r3, [pc, #252]	@ (800061c <MX_GPIO_Init+0x114>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a3e      	ldr	r2, [pc, #248]	@ (800061c <MX_GPIO_Init+0x114>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b3c      	ldr	r3, [pc, #240]	@ (800061c <MX_GPIO_Init+0x114>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b39      	ldr	r3, [pc, #228]	@ (800061c <MX_GPIO_Init+0x114>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a38      	ldr	r2, [pc, #224]	@ (800061c <MX_GPIO_Init+0x114>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b36      	ldr	r3, [pc, #216]	@ (800061c <MX_GPIO_Init+0x114>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b33      	ldr	r3, [pc, #204]	@ (800061c <MX_GPIO_Init+0x114>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a32      	ldr	r2, [pc, #200]	@ (800061c <MX_GPIO_Init+0x114>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b30      	ldr	r3, [pc, #192]	@ (800061c <MX_GPIO_Init+0x114>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b2d      	ldr	r3, [pc, #180]	@ (800061c <MX_GPIO_Init+0x114>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a2c      	ldr	r2, [pc, #176]	@ (800061c <MX_GPIO_Init+0x114>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b2a      	ldr	r3, [pc, #168]	@ (800061c <MX_GPIO_Init+0x114>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b27      	ldr	r3, [pc, #156]	@ (800061c <MX_GPIO_Init+0x114>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a26      	ldr	r2, [pc, #152]	@ (800061c <MX_GPIO_Init+0x114>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b24      	ldr	r3, [pc, #144]	@ (800061c <MX_GPIO_Init+0x114>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4821      	ldr	r0, [pc, #132]	@ (8000620 <MX_GPIO_Init+0x118>)
 800059c:	f000 ff44 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005aa:	f000 ff3d 	bl	8001428 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b4:	481b      	ldr	r0, [pc, #108]	@ (8000624 <MX_GPIO_Init+0x11c>)
 80005b6:	f000 ff37 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 80005ba:	2308      	movs	r3, #8
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	4813      	ldr	r0, [pc, #76]	@ (8000620 <MX_GPIO_Init+0x118>)
 80005d2:	f000 fda7 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80005d6:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80005da:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f2:	f000 fd97 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 80005f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000604:	2303      	movs	r3, #3
 8000606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_GPIO_Init+0x11c>)
 8000610:	f000 fd88 	bl	8001124 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	@ 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	48000800 	.word	0x48000800
 8000624:	48000c00 	.word	0x48000c00

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fc25 	bl	8000e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f882 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff ff68 	bl	8000508 <MX_GPIO_Init>
  MX_UART4_Init();
 8000638:	f000 fac6 	bl	8000bc8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800063c:	f000 fb10 	bl	8000c60 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000640:	f000 f930 	bl	80008a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000644:	f000 f9b0 	bl	80009a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	4836      	ldr	r0, [pc, #216]	@ (8000724 <main+0xfc>)
 800064c:	f001 ffec 	bl	8002628 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000650:	2104      	movs	r1, #4
 8000652:	4834      	ldr	r0, [pc, #208]	@ (8000724 <main+0xfc>)
 8000654:	f001 ffe8 	bl	8002628 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	4833      	ldr	r0, [pc, #204]	@ (8000728 <main+0x100>)
 800065c:	f001 ffe4 	bl	8002628 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000660:	2104      	movs	r1, #4
 8000662:	4831      	ldr	r0, [pc, #196]	@ (8000728 <main+0x100>)
 8000664:	f001 ffe0 	bl	8002628 <HAL_TIM_PWM_Start>
    //     break;
    //   default:
    //     test_stage = 0;
    //     break;
    // }
    HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2140      	movs	r1, #64	@ 0x40
 800066c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000670:	f000 feda 	bl	8001428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067c:	f000 fed4 	bl	8001428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2108      	movs	r1, #8
 8000684:	4829      	ldr	r0, [pc, #164]	@ (800072c <main+0x104>)
 8000686:	f000 fecf 	bl	8001428 <HAL_GPIO_WritePin>
    TIM2->CCR1 = 16800;
 800068a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800068e:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8000692:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2120      	movs	r1, #32
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f000 fec4 	bl	8001428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f000 febe 	bl	8001428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2108      	movs	r1, #8
 80006b0:	481e      	ldr	r0, [pc, #120]	@ (800072c <main+0x104>)
 80006b2:	f000 feb9 	bl	8001428 <HAL_GPIO_WritePin>
    TIM2->CCR2 = 16800;
 80006b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ba:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80006be:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ca:	f000 fead 	bl	8001428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d8:	f000 fea6 	bl	8001428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006e2:	4813      	ldr	r0, [pc, #76]	@ (8000730 <main+0x108>)
 80006e4:	f000 fea0 	bl	8001428 <HAL_GPIO_WritePin>
    TIM3->CCR1 = 16800;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <main+0x10c>)
 80006ea:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80006ee:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f000 fe95 	bl	8001428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000708:	f000 fe8e 	bl	8001428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <main+0x108>)
 8000714:	f000 fe88 	bl	8001428 <HAL_GPIO_WritePin>
    TIM3->CCR2 = 16800;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <main+0x10c>)
 800071a:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 800071e:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_SET);
 8000720:	bf00      	nop
 8000722:	e7a1      	b.n	8000668 <main+0x40>
 8000724:	20000028 	.word	0x20000028
 8000728:	20000074 	.word	0x20000074
 800072c:	48000800 	.word	0x48000800
 8000730:	48000c00 	.word	0x48000c00
 8000734:	40000400 	.word	0x40000400

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	2238      	movs	r2, #56	@ 0x38
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fe44 	bl	80043d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fe7c 	bl	8001458 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000768:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	2303      	movs	r3, #3
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000776:	2355      	movs	r3, #85	@ 0x55
 8000778:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	4618      	mov	r0, r3
 800078c:	f000 ff18 	bl	80015c0 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000796:	f000 f818 	bl	80007ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2303      	movs	r3, #3
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2104      	movs	r1, #4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fa16 	bl	8001be4 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007be:	f000 f804 	bl	80007ca <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ce:	b672      	cpsid	i
}
 80007d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e2:	4a0e      	ldr	r2, [pc, #56]	@ (800081c <HAL_MspInit+0x44>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x44>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6593      	str	r3, [r2, #88]	@ 0x58
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800080e:	f000 fec7 	bl	80015a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <NMI_Handler+0x4>

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <UsageFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000876:	f000 fb53 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08e      	sub	sp, #56	@ 0x38
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d6:	4b33      	ldr	r3, [pc, #204]	@ (80009a4 <MX_TIM2_Init+0x100>)
 80008d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80008de:	4b31      	ldr	r3, [pc, #196]	@ (80009a4 <MX_TIM2_Init+0x100>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <MX_TIM2_Init+0x100>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 80008ea:	4b2e      	ldr	r3, [pc, #184]	@ (80009a4 <MX_TIM2_Init+0x100>)
 80008ec:	f244 129f 	movw	r2, #16799	@ 0x419f
 80008f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b2c      	ldr	r3, [pc, #176]	@ (80009a4 <MX_TIM2_Init+0x100>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f8:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <MX_TIM2_Init+0x100>)
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008fe:	4829      	ldr	r0, [pc, #164]	@ (80009a4 <MX_TIM2_Init+0x100>)
 8000900:	f001 fdda 	bl	80024b8 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800090a:	f7ff ff5e 	bl	80007ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000918:	4619      	mov	r1, r3
 800091a:	4822      	ldr	r0, [pc, #136]	@ (80009a4 <MX_TIM2_Init+0x100>)
 800091c:	f002 f8aa 	bl	8002a74 <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000926:	f7ff ff50 	bl	80007ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800092a:	481e      	ldr	r0, [pc, #120]	@ (80009a4 <MX_TIM2_Init+0x100>)
 800092c:	f001 fe1b 	bl	8002566 <HAL_TIM_PWM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000936:	f7ff ff48 	bl	80007ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4816      	ldr	r0, [pc, #88]	@ (80009a4 <MX_TIM2_Init+0x100>)
 800094a:	f002 fe3f 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000954:	f7ff ff39 	bl	80007ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000958:	2360      	movs	r3, #96	@ 0x60
 800095a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <MX_TIM2_Init+0x100>)
 8000970:	f001 ff6c 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800097a:	f7ff ff26 	bl	80007ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	2204      	movs	r2, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <MX_TIM2_Init+0x100>)
 8000986:	f001 ff61 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000990:	f7ff ff1b 	bl	80007ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000994:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <MX_TIM2_Init+0x100>)
 8000996:	f000 f8bb 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 800099a:	bf00      	nop
 800099c:	3738      	adds	r7, #56	@ 0x38
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028

080009a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	@ 0x38
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
 80009d6:	615a      	str	r2, [r3, #20]
 80009d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009da:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 80009dc:	4a32      	ldr	r2, [pc, #200]	@ (8000aa8 <MX_TIM3_Init+0x100>)
 80009de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80009e0:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16800;
 80009ec:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 80009ee:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80009f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a00:	4828      	ldr	r0, [pc, #160]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 8000a02:	f001 fd59 	bl	80024b8 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a0c:	f7ff fedd 	bl	80007ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4821      	ldr	r0, [pc, #132]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 8000a1e:	f002 f829 	bl	8002a74 <HAL_TIM_ConfigClockSource>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a28:	f7ff fecf 	bl	80007ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a2c:	481d      	ldr	r0, [pc, #116]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 8000a2e:	f001 fd9a 	bl	8002566 <HAL_TIM_PWM_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a38:	f7ff fec7 	bl	80007ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4816      	ldr	r0, [pc, #88]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 8000a4c:	f002 fdbe 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a56:	f7ff feb8 	bl	80007ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5a:	2360      	movs	r3, #96	@ 0x60
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 8000a72:	f001 feeb 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a7c:	f7ff fea5 	bl	80007ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	2204      	movs	r2, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 8000a88:	f001 fee0 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000a92:	f7ff fe9a 	bl	80007ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <MX_TIM3_Init+0xfc>)
 8000a98:	f000 f83a 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 8000a9c:	bf00      	nop
 8000a9e:	3738      	adds	r7, #56	@ 0x38
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000074 	.word	0x20000074
 8000aa8:	40000400 	.word	0x40000400

08000aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000abc:	d10c      	bne.n	8000ad8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a11      	ldr	r2, [pc, #68]	@ (8000b08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <HAL_TIM_Base_MspInit+0x5c>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ad6:	e010      	b.n	8000afa <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0b      	ldr	r2, [pc, #44]	@ (8000b0c <HAL_TIM_Base_MspInit+0x60>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10b      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae6:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_TIM_Base_MspInit+0x5c>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40000400 	.word	0x40000400

08000b10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b30:	d11c      	bne.n	8000b6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <HAL_TIM_MspPostInit+0xa8>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a20      	ldr	r2, [pc, #128]	@ (8000bb8 <HAL_TIM_MspPostInit+0xa8>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <HAL_TIM_MspPostInit+0xa8>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b4a:	2318      	movs	r3, #24
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4815      	ldr	r0, [pc, #84]	@ (8000bbc <HAL_TIM_MspPostInit+0xac>)
 8000b66:	f000 fadd 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b6a:	e020      	b.n	8000bae <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a13      	ldr	r2, [pc, #76]	@ (8000bc0 <HAL_TIM_MspPostInit+0xb0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d11b      	bne.n	8000bae <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_TIM_MspPostInit+0xa8>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <HAL_TIM_MspPostInit+0xa8>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <HAL_TIM_MspPostInit+0xa8>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <HAL_TIM_MspPostInit+0xb4>)
 8000baa:	f000 fabb 	bl	8001124 <HAL_GPIO_Init>
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	48001000 	.word	0x48001000

08000bc8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000bce:	4a23      	ldr	r2, [pc, #140]	@ (8000c5c <MX_UART4_Init+0x94>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c04:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c10:	4811      	ldr	r0, [pc, #68]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000c12:	f002 fd71 	bl	80036f8 <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f7ff fdd5 	bl	80007ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000c24:	f003 fb0c 	bl	8004240 <HAL_UARTEx_SetTxFifoThreshold>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c2e:	f7ff fdcc 	bl	80007ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4808      	ldr	r0, [pc, #32]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000c36:	f003 fb41 	bl	80042bc <HAL_UARTEx_SetRxFifoThreshold>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c40:	f7ff fdc3 	bl	80007ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <MX_UART4_Init+0x90>)
 8000c46:	f003 fac2 	bl	80041ce <HAL_UARTEx_DisableFifoMode>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f7ff fdbb 	bl	80007ca <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000c0 	.word	0x200000c0
 8000c5c:	40004c00 	.word	0x40004c00

08000c60 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c66:	4a23      	ldr	r2, [pc, #140]	@ (8000cf4 <MX_USART1_UART_Init+0x94>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca8:	4811      	ldr	r0, [pc, #68]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000caa:	f002 fd25 	bl	80036f8 <HAL_UART_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cb4:	f7ff fd89 	bl	80007ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000cbc:	f003 fac0 	bl	8004240 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cc6:	f7ff fd80 	bl	80007ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4808      	ldr	r0, [pc, #32]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000cce:	f003 faf5 	bl	80042bc <HAL_UARTEx_SetRxFifoThreshold>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd8:	f7ff fd77 	bl	80007ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_USART1_UART_Init+0x90>)
 8000cde:	f003 fa76 	bl	80041ce <HAL_UARTEx_DisableFifoMode>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce8:	f7ff fd6f 	bl	80007ca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000154 	.word	0x20000154
 8000cf4:	40013800 	.word	0x40013800

08000cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0a0      	sub	sp, #128	@ 0x80
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	2254      	movs	r2, #84	@ 0x54
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 fb5b 	bl	80043d4 <memset>
  if(uartHandle->Instance==UART4)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a3d      	ldr	r2, [pc, #244]	@ (8000e18 <HAL_UART_MspInit+0x120>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d137      	bne.n	8000d98 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 f971 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d40:	f7ff fd43 	bl	80007ca <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d44:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	4a34      	ldr	r2, [pc, #208]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000d4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d50:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	4a2e      	ldr	r2, [pc, #184]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d68:	4b2c      	ldr	r3, [pc, #176]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d74:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000d86:	2305      	movs	r3, #5
 8000d88:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <HAL_UART_MspInit+0x128>)
 8000d92:	f000 f9c7 	bl	8001124 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d96:	e03a      	b.n	8000e0e <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <HAL_UART_MspInit+0x12c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d135      	bne.n	8000e0e <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 f934 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000dba:	f7ff fd06 	bl	80007ca <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc2:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	4a10      	ldr	r2, [pc, #64]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_UART_MspInit+0x124>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dee:	2330      	movs	r3, #48	@ 0x30
 8000df0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <HAL_UART_MspInit+0x128>)
 8000e0a:	f000 f98b 	bl	8001124 <HAL_GPIO_Init>
}
 8000e0e:	bf00      	nop
 8000e10:	3780      	adds	r7, #128	@ 0x80
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004c00 	.word	0x40004c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000800 	.word	0x48000800
 8000e24:	40013800 	.word	0x40013800

08000e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff fd28 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f003 fac5 	bl	80043e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5a:	f7ff fbe5 	bl	8000628 <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e6c:	08004494 	.word	0x08004494
  ldr r2, =_sbss
 8000e70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e74:	200001ec 	.word	0x200001ec

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>

08000e7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f91b 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f80e 	bl	8000eac <HAL_InitTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	e001      	b.n	8000ea0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9c:	f7ff fc9c 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_InitTick+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d022      	beq.n	8000f06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <HAL_InitTick+0x6c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_InitTick+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f918 	bl	800110a <HAL_SYSTICK_Config>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10f      	bne.n	8000f00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	d809      	bhi.n	8000efa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eee:	f000 f8f2 	bl	80010d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_InitTick+0x70>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e007      	b.n	8000f0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e004      	b.n	8000f0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e001      	b.n	8000f0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a03      	ldr	r2, [pc, #12]	@ (8000f3c <HAL_IncTick+0x1c>)
 8000f30:	6013      	str	r3, [r2, #0]
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200001e8 	.word	0x200001e8
 8000f40:	20000008 	.word	0x20000008

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200001e8 	.word	0x200001e8

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	@ (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	@ (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	@ 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff47 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff5e 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff90 	bl	8001014 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5f 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffb2 	bl	800107c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001132:	e15a      	b.n	80013ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 814c 	beq.w	80013e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 0201 	and.w	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d017      	beq.n	8001202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d123      	bne.n	8001256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	6939      	ldr	r1, [r7, #16]
 8001252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0203 	and.w	r2, r3, #3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 80a6 	beq.w	80013e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	4b5b      	ldr	r3, [pc, #364]	@ (8001408 <HAL_GPIO_Init+0x2e4>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129c:	4a5a      	ldr	r2, [pc, #360]	@ (8001408 <HAL_GPIO_Init+0x2e4>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a4:	4b58      	ldr	r3, [pc, #352]	@ (8001408 <HAL_GPIO_Init+0x2e4>)
 80012a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b0:	4a56      	ldr	r2, [pc, #344]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012da:	d01f      	beq.n	800131c <HAL_GPIO_Init+0x1f8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4c      	ldr	r2, [pc, #304]	@ (8001410 <HAL_GPIO_Init+0x2ec>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d019      	beq.n	8001318 <HAL_GPIO_Init+0x1f4>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001414 <HAL_GPIO_Init+0x2f0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d013      	beq.n	8001314 <HAL_GPIO_Init+0x1f0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001418 <HAL_GPIO_Init+0x2f4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d00d      	beq.n	8001310 <HAL_GPIO_Init+0x1ec>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a49      	ldr	r2, [pc, #292]	@ (800141c <HAL_GPIO_Init+0x2f8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d007      	beq.n	800130c <HAL_GPIO_Init+0x1e8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a48      	ldr	r2, [pc, #288]	@ (8001420 <HAL_GPIO_Init+0x2fc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d101      	bne.n	8001308 <HAL_GPIO_Init+0x1e4>
 8001304:	2305      	movs	r3, #5
 8001306:	e00a      	b.n	800131e <HAL_GPIO_Init+0x1fa>
 8001308:	2306      	movs	r3, #6
 800130a:	e008      	b.n	800131e <HAL_GPIO_Init+0x1fa>
 800130c:	2304      	movs	r3, #4
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x1fa>
 8001310:	2303      	movs	r3, #3
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x1fa>
 8001314:	2302      	movs	r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x1fa>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x1fa>
 800131c:	2300      	movs	r3, #0
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132e:	4937      	ldr	r1, [pc, #220]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133c:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <HAL_GPIO_Init+0x300>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001360:	4a30      	ldr	r2, [pc, #192]	@ (8001424 <HAL_GPIO_Init+0x300>)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001366:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <HAL_GPIO_Init+0x300>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138a:	4a26      	ldr	r2, [pc, #152]	@ (8001424 <HAL_GPIO_Init+0x300>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <HAL_GPIO_Init+0x300>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001424 <HAL_GPIO_Init+0x300>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <HAL_GPIO_Init+0x300>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013de:	4a11      	ldr	r2, [pc, #68]	@ (8001424 <HAL_GPIO_Init+0x300>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f47f ae9d 	bne.w	8001134 <HAL_GPIO_Init+0x10>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000
 8001410:	48000400 	.word	0x48000400
 8001414:	48000800 	.word	0x48000800
 8001418:	48000c00 	.word	0x48000c00
 800141c:	48001000 	.word	0x48001000
 8001420:	48001400 	.word	0x48001400
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001444:	e002      	b.n	800144c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d141      	bne.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001466:	4b4b      	ldr	r3, [pc, #300]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800146e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001472:	d131      	bne.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001474:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800147a:	4a46      	ldr	r2, [pc, #280]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800148c:	4a41      	ldr	r2, [pc, #260]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001494:	4b40      	ldr	r3, [pc, #256]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2232      	movs	r2, #50	@ 0x32
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	4a3f      	ldr	r2, [pc, #252]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	3301      	adds	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014aa:	e002      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b2:	4b38      	ldr	r3, [pc, #224]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014be:	d102      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f2      	bne.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c6:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d2:	d158      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e057      	b.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014de:	4a2d      	ldr	r2, [pc, #180]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014e8:	e04d      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014f0:	d141      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f2:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fe:	d131      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001500:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001506:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001518:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800151e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2232      	movs	r2, #50	@ 0x32
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001536:	e002      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3b01      	subs	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154a:	d102      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f2      	bne.n	8001538 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800155e:	d112      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e011      	b.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001574:	e007      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001576:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800157e:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001584:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40007000 	.word	0x40007000
 8001598:	20000000 	.word	0x20000000
 800159c:	431bde83 	.word	0x431bde83

080015a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ae:	6093      	str	r3, [r2, #8]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40007000 	.word	0x40007000

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e2fe      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d075      	beq.n	80016ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015de:	4b97      	ldr	r3, [pc, #604]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e8:	4b94      	ldr	r3, [pc, #592]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_OscConfig+0x3e>
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d002      	beq.n	8001604 <HAL_RCC_OscConfig+0x44>
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b08      	cmp	r3, #8
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	4b8d      	ldr	r3, [pc, #564]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d05b      	beq.n	80016c8 <HAL_RCC_OscConfig+0x108>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d157      	bne.n	80016c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e2d9      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x74>
 8001626:	4b85      	ldr	r3, [pc, #532]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a84      	ldr	r2, [pc, #528]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e01d      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x98>
 800163e:	4b7f      	ldr	r3, [pc, #508]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7e      	ldr	r2, [pc, #504]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b7c      	ldr	r3, [pc, #496]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7b      	ldr	r2, [pc, #492]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001658:	4b78      	ldr	r3, [pc, #480]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a77      	ldr	r2, [pc, #476]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b75      	ldr	r3, [pc, #468]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a74      	ldr	r2, [pc, #464]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800166e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fc64 	bl	8000f44 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fc60 	bl	8000f44 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	@ 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e29e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001692:	4b6a      	ldr	r3, [pc, #424]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xc0>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fc50 	bl	8000f44 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fc4c 	bl	8000f44 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	@ 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e28a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	4b60      	ldr	r3, [pc, #384]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0xe8>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d075      	beq.n	80017c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4b56      	ldr	r3, [pc, #344]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d102      	bne.n	80016f6 <HAL_RCC_OscConfig+0x136>
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_OscConfig+0x13c>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d11f      	bne.n	800173c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	4b4f      	ldr	r3, [pc, #316]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x154>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e25d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b49      	ldr	r3, [pc, #292]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	4946      	ldr	r1, [pc, #280]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001728:	4b45      	ldr	r3, [pc, #276]	@ (8001840 <HAL_RCC_OscConfig+0x280>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fbbd 	bl	8000eac <HAL_InitTick>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d043      	beq.n	80017c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e249      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d023      	beq.n	800178c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b3d      	ldr	r3, [pc, #244]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3c      	ldr	r2, [pc, #240]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fbf8 	bl	8000f44 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fbf4 	bl	8000f44 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e232      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	061b      	lsls	r3, r3, #24
 8001784:	492d      	ldr	r1, [pc, #180]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
 800178a:	e01a      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178c:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001792:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fbd4 	bl	8000f44 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fbd0 	bl	8000f44 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e20e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1e0>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d041      	beq.n	8001852 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01c      	beq.n	8001810 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017dc:	4a17      	ldr	r2, [pc, #92]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff fbad 	bl	8000f44 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fba9 	bl	8000f44 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e1e7      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0ef      	beq.n	80017ee <HAL_RCC_OscConfig+0x22e>
 800180e:	e020      	b.n	8001852 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001816:	4a09      	ldr	r2, [pc, #36]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fb90 	bl	8000f44 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001826:	e00d      	b.n	8001844 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fb8c 	bl	8000f44 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d906      	bls.n	8001844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e1ca      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	4b8c      	ldr	r3, [pc, #560]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ea      	bne.n	8001828 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80a6 	beq.w	80019ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001864:	4b84      	ldr	r3, [pc, #528]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x2b4>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_RCC_OscConfig+0x2b6>
 8001874:	2300      	movs	r3, #0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00d      	beq.n	8001896 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b7c      	ldr	r3, [pc, #496]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001892:	2301      	movs	r3, #1
 8001894:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001896:	4b79      	ldr	r3, [pc, #484]	@ (8001a7c <HAL_RCC_OscConfig+0x4bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a2:	4b76      	ldr	r3, [pc, #472]	@ (8001a7c <HAL_RCC_OscConfig+0x4bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a75      	ldr	r2, [pc, #468]	@ (8001a7c <HAL_RCC_OscConfig+0x4bc>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fb49 	bl	8000f44 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff fb45 	bl	8000f44 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e183      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a7c <HAL_RCC_OscConfig+0x4bc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d108      	bne.n	80018ee <HAL_RCC_OscConfig+0x32e>
 80018dc:	4b66      	ldr	r3, [pc, #408]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e2:	4a65      	ldr	r2, [pc, #404]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ec:	e024      	b.n	8001938 <HAL_RCC_OscConfig+0x378>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d110      	bne.n	8001918 <HAL_RCC_OscConfig+0x358>
 80018f6:	4b60      	ldr	r3, [pc, #384]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001906:	4b5c      	ldr	r3, [pc, #368]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190c:	4a5a      	ldr	r2, [pc, #360]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001916:	e00f      	b.n	8001938 <HAL_RCC_OscConfig+0x378>
 8001918:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191e:	4a56      	ldr	r2, [pc, #344]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192e:	4a52      	ldr	r2, [pc, #328]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d016      	beq.n	800196e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fb00 	bl	8000f44 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff fafc 	bl	8000f44 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e138      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195e:	4b46      	ldr	r3, [pc, #280]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ed      	beq.n	8001948 <HAL_RCC_OscConfig+0x388>
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff fae9 	bl	8000f44 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff fae5 	bl	8000f44 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e121      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800198c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ed      	bne.n	8001976 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800199a:	7ffb      	ldrb	r3, [r7, #31]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	4a34      	ldr	r2, [pc, #208]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01c      	beq.n	80019fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fab8 	bl	8000f44 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d8:	f7ff fab4 	bl	8000f44 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0f2      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x418>
 80019f8:	e01b      	b.n	8001a32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fa9b 	bl	8000f44 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a12:	f7ff fa97 	bl	8000f44 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0d5      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a24:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1ef      	bne.n	8001a12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80c9 	beq.w	8001bce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b0c      	cmp	r3, #12
 8001a46:	f000 8083 	beq.w	8001b50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d15e      	bne.n	8001b10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fa71 	bl	8000f44 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	e00c      	b.n	8001a80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fa6d 	bl	8000f44 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d905      	bls.n	8001a80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0ab      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ec      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4b52      	ldr	r3, [pc, #328]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <HAL_RCC_OscConfig+0x61c>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6a11      	ldr	r1, [r2, #32]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001aa6:	0212      	lsls	r2, r2, #8
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001aae:	0852      	lsrs	r2, r2, #1
 8001ab0:	3a01      	subs	r2, #1
 8001ab2:	0552      	lsls	r2, r2, #21
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001aba:	0852      	lsrs	r2, r2, #1
 8001abc:	3a01      	subs	r2, #1
 8001abe:	0652      	lsls	r2, r2, #25
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ac6:	06d2      	lsls	r2, r2, #27
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	4943      	ldr	r1, [pc, #268]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a40      	ldr	r2, [pc, #256]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001adc:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a3d      	ldr	r2, [pc, #244]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa2c 	bl	8000f44 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff fa28 	bl	8000f44 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e066      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x530>
 8001b0e:	e05e      	b.n	8001bce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a30      	ldr	r2, [pc, #192]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fa12 	bl	8000f44 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff fa0e 	bl	8000f44 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b42:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	4924      	ldr	r1, [pc, #144]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b48:	4b25      	ldr	r3, [pc, #148]	@ (8001be0 <HAL_RCC_OscConfig+0x620>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60cb      	str	r3, [r1, #12]
 8001b4e:	e03e      	b.n	8001bce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e039      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d12c      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d123      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d11b      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d113      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	019f800c 	.word	0x019f800c
 8001be0:	feeefffc 	.word	0xfeeefffc

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e11e      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b91      	ldr	r3, [pc, #580]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d910      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 020f 	bic.w	r2, r3, #15
 8001c12:	498c      	ldr	r1, [pc, #560]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e106      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d073      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d129      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c40:	4b81      	ldr	r3, [pc, #516]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0f4      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c50:	f000 f99e 	bl	8001f90 <RCC_GetSysClockFreqFromPLLSource>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4a7c      	ldr	r2, [pc, #496]	@ (8001e4c <HAL_RCC_ClockConfig+0x268>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d93f      	bls.n	8001cde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d033      	beq.n	8001cde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12f      	bne.n	8001cde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c7e:	4b72      	ldr	r3, [pc, #456]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c86:	4a70      	ldr	r2, [pc, #448]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e024      	b.n	8001cde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0c6      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cac:	4b66      	ldr	r3, [pc, #408]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0be      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cbc:	f000 f8ce 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4a61      	ldr	r2, [pc, #388]	@ (8001e4c <HAL_RCC_ClockConfig+0x268>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d909      	bls.n	8001cde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cca:	4b5f      	ldr	r3, [pc, #380]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b5a      	ldr	r3, [pc, #360]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4957      	ldr	r1, [pc, #348]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f928 	bl	8000f44 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f924 	bl	8000f44 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e095      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d023      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d38:	4b43      	ldr	r3, [pc, #268]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a42      	ldr	r2, [pc, #264]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d50:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d58:	4a3b      	ldr	r2, [pc, #236]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b39      	ldr	r3, [pc, #228]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4936      	ldr	r1, [pc, #216]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b80      	cmp	r3, #128	@ 0x80
 8001d78:	d105      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d7a:	4b33      	ldr	r3, [pc, #204]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4a32      	ldr	r2, [pc, #200]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d86:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d21d      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 020f 	bic.w	r2, r3, #15
 8001d9c:	4929      	ldr	r1, [pc, #164]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001da4:	f7ff f8ce 	bl	8000f44 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7ff f8ca 	bl	8000f44 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e03b      	b.n	8001e3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1ed      	bne.n	8001dac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4917      	ldr	r1, [pc, #92]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	490f      	ldr	r1, [pc, #60]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0e:	f000 f825 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <HAL_RCC_ClockConfig+0x26c>)
 8001e20:	5ccb      	ldrb	r3, [r1, r3]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_RCC_ClockConfig+0x274>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f83a 	bl	8000eac <HAL_InitTick>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	04c4b400 	.word	0x04c4b400
 8001e50:	08004444 	.word	0x08004444
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e62:	4b2c      	ldr	r3, [pc, #176]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e047      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e74:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e80:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e03e      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e86:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d136      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	4a16      	ldr	r2, [pc, #88]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eba:	68d2      	ldr	r2, [r2, #12]
 8001ebc:	0a12      	lsrs	r2, r2, #8
 8001ebe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
      break;
 8001ec8:	e00c      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eca:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4a10      	ldr	r2, [pc, #64]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed4:	68d2      	ldr	r2, [r2, #12]
 8001ed6:	0a12      	lsrs	r2, r2, #8
 8001ed8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
      break;
 8001ee2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0e5b      	lsrs	r3, r3, #25
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	e001      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f04:	693b      	ldr	r3, [r7, #16]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	00f42400 	.word	0x00f42400
 8001f1c:	007a1200 	.word	0x007a1200

08001f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f3c:	f7ff fff0 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4904      	ldr	r1, [pc, #16]	@ (8001f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08004454 	.word	0x08004454

08001f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f68:	f7ff ffda 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0adb      	lsrs	r3, r3, #11
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4904      	ldr	r1, [pc, #16]	@ (8001f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08004454 	.word	0x08004454

08001f90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f96:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3301      	adds	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d10c      	bne.n	8001fce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fb4:	4a17      	ldr	r2, [pc, #92]	@ (8002014 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	4a14      	ldr	r2, [pc, #80]	@ (8002010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fbe:	68d2      	ldr	r2, [r2, #12]
 8001fc0:	0a12      	lsrs	r2, r2, #8
 8001fc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
    break;
 8001fcc:	e00c      	b.n	8001fe8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd8:	68d2      	ldr	r2, [r2, #12]
 8001fda:	0a12      	lsrs	r2, r2, #8
 8001fdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    break;
 8001fe6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0e5b      	lsrs	r3, r3, #25
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002002:	687b      	ldr	r3, [r7, #4]
}
 8002004:	4618      	mov	r0, r3
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000
 8002014:	007a1200 	.word	0x007a1200
 8002018:	00f42400 	.word	0x00f42400

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002024:	2300      	movs	r3, #0
 8002026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002028:	2300      	movs	r3, #0
 800202a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8098 	beq.w	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203e:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10d      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b40      	ldr	r3, [pc, #256]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204e:	4a3f      	ldr	r2, [pc, #252]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002054:	6593      	str	r3, [r2, #88]	@ 0x58
 8002056:	4b3d      	ldr	r3, [pc, #244]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002066:	4b3a      	ldr	r3, [pc, #232]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a39      	ldr	r2, [pc, #228]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002070:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002072:	f7fe ff67 	bl	8000f44 <HAL_GetTick>
 8002076:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002078:	e009      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7fe ff63 	bl	8000f44 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d902      	bls.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	74fb      	strb	r3, [r7, #19]
        break;
 800208c:	e005      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800208e:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ef      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d159      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020a0:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01e      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d019      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020bc:	4b23      	ldr	r3, [pc, #140]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c8:	4b20      	ldr	r3, [pc, #128]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ce:	4a1f      	ldr	r2, [pc, #124]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d8:	4b1c      	ldr	r3, [pc, #112]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e8:	4a18      	ldr	r2, [pc, #96]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7fe ff23 	bl	8000f44 <HAL_GetTick>
 80020fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002100:	e00b      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe ff1f 	bl	8000f44 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d902      	bls.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	74fb      	strb	r3, [r7, #19]
            break;
 8002118:	e006      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ec      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10b      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213c:	4903      	ldr	r1, [pc, #12]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002144:	e008      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002146:	7cfb      	ldrb	r3, [r7, #19]
 8002148:	74bb      	strb	r3, [r7, #18]
 800214a:	e005      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002158:	7c7b      	ldrb	r3, [r7, #17]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4ba7      	ldr	r3, [pc, #668]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	4aa6      	ldr	r2, [pc, #664]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002176:	4ba1      	ldr	r3, [pc, #644]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217c:	f023 0203 	bic.w	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	499d      	ldr	r1, [pc, #628]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002198:	4b98      	ldr	r3, [pc, #608]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219e:	f023 020c 	bic.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4995      	ldr	r1, [pc, #596]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ba:	4b90      	ldr	r3, [pc, #576]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	498c      	ldr	r1, [pc, #560]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021dc:	4b87      	ldr	r3, [pc, #540]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	4984      	ldr	r1, [pc, #528]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021fe:	4b7f      	ldr	r3, [pc, #508]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	497b      	ldr	r1, [pc, #492]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002220:	4b76      	ldr	r3, [pc, #472]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	4973      	ldr	r1, [pc, #460]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002242:	4b6e      	ldr	r3, [pc, #440]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	496a      	ldr	r1, [pc, #424]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002264:	4b65      	ldr	r3, [pc, #404]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4962      	ldr	r1, [pc, #392]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002286:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	4959      	ldr	r1, [pc, #356]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022a8:	4b54      	ldr	r3, [pc, #336]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b6:	4951      	ldr	r1, [pc, #324]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ca:	4b4c      	ldr	r3, [pc, #304]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	4948      	ldr	r1, [pc, #288]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022ec:	4b43      	ldr	r3, [pc, #268]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4940      	ldr	r1, [pc, #256]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800230a:	d105      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230c:	4b3b      	ldr	r3, [pc, #236]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a3a      	ldr	r2, [pc, #232]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002316:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002320:	2b00      	cmp	r3, #0
 8002322:	d015      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002324:	4b35      	ldr	r3, [pc, #212]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002332:	4932      	ldr	r1, [pc, #200]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002342:	d105      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a2c      	ldr	r2, [pc, #176]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800234e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800235c:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236a:	4924      	ldr	r1, [pc, #144]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002376:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800237a:	d105      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237c:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a1e      	ldr	r2, [pc, #120]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002386:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a2:	4916      	ldr	r1, [pc, #88]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023b2:	d105      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d019      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	4908      	ldr	r1, [pc, #32]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ea:	d109      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a02      	ldr	r2, [pc, #8]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f6:	60d3      	str	r3, [r2, #12]
 80023f8:	e002      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	4926      	ldr	r1, [pc, #152]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a20      	ldr	r2, [pc, #128]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002436:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	4918      	ldr	r1, [pc, #96]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002462:	d105      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800247e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	490a      	ldr	r1, [pc, #40]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800249a:	d105      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e049      	b.n	800255e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fae4 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fbc8 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e049      	b.n	800260c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f841 	bl	8002614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f000 fb71 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_TIM_PWM_Start+0x24>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e03c      	b.n	80026c6 <HAL_TIM_PWM_Start+0x9e>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d109      	bne.n	8002666 <HAL_TIM_PWM_Start+0x3e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	e02f      	b.n	80026c6 <HAL_TIM_PWM_Start+0x9e>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d109      	bne.n	8002680 <HAL_TIM_PWM_Start+0x58>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e022      	b.n	80026c6 <HAL_TIM_PWM_Start+0x9e>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d109      	bne.n	800269a <HAL_TIM_PWM_Start+0x72>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	e015      	b.n	80026c6 <HAL_TIM_PWM_Start+0x9e>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b10      	cmp	r3, #16
 800269e:	d109      	bne.n	80026b4 <HAL_TIM_PWM_Start+0x8c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e008      	b.n	80026c6 <HAL_TIM_PWM_Start+0x9e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0a6      	b.n	800281c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <HAL_TIM_PWM_Start+0xb6>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026dc:	e023      	b.n	8002726 <HAL_TIM_PWM_Start+0xfe>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d104      	bne.n	80026ee <HAL_TIM_PWM_Start+0xc6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026ec:	e01b      	b.n	8002726 <HAL_TIM_PWM_Start+0xfe>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d104      	bne.n	80026fe <HAL_TIM_PWM_Start+0xd6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026fc:	e013      	b.n	8002726 <HAL_TIM_PWM_Start+0xfe>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b0c      	cmp	r3, #12
 8002702:	d104      	bne.n	800270e <HAL_TIM_PWM_Start+0xe6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800270c:	e00b      	b.n	8002726 <HAL_TIM_PWM_Start+0xfe>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b10      	cmp	r3, #16
 8002712:	d104      	bne.n	800271e <HAL_TIM_PWM_Start+0xf6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800271c:	e003      	b.n	8002726 <HAL_TIM_PWM_Start+0xfe>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2201      	movs	r2, #1
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 ff26 	bl	8003580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3a      	ldr	r2, [pc, #232]	@ (8002824 <HAL_TIM_PWM_Start+0x1fc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_TIM_PWM_Start+0x148>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a39      	ldr	r2, [pc, #228]	@ (8002828 <HAL_TIM_PWM_Start+0x200>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_TIM_PWM_Start+0x148>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a37      	ldr	r2, [pc, #220]	@ (800282c <HAL_TIM_PWM_Start+0x204>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_TIM_PWM_Start+0x148>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a36      	ldr	r2, [pc, #216]	@ (8002830 <HAL_TIM_PWM_Start+0x208>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_TIM_PWM_Start+0x148>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <HAL_TIM_PWM_Start+0x20c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_TIM_PWM_Start+0x148>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a33      	ldr	r2, [pc, #204]	@ (8002838 <HAL_TIM_PWM_Start+0x210>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d101      	bne.n	8002774 <HAL_TIM_PWM_Start+0x14c>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_TIM_PWM_Start+0x14e>
 8002774:	2300      	movs	r3, #0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <HAL_TIM_PWM_Start+0x1fc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d022      	beq.n	80027da <HAL_TIM_PWM_Start+0x1b2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279c:	d01d      	beq.n	80027da <HAL_TIM_PWM_Start+0x1b2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a26      	ldr	r2, [pc, #152]	@ (800283c <HAL_TIM_PWM_Start+0x214>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d018      	beq.n	80027da <HAL_TIM_PWM_Start+0x1b2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a24      	ldr	r2, [pc, #144]	@ (8002840 <HAL_TIM_PWM_Start+0x218>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_TIM_PWM_Start+0x1b2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a23      	ldr	r2, [pc, #140]	@ (8002844 <HAL_TIM_PWM_Start+0x21c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00e      	beq.n	80027da <HAL_TIM_PWM_Start+0x1b2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <HAL_TIM_PWM_Start+0x200>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d009      	beq.n	80027da <HAL_TIM_PWM_Start+0x1b2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a18      	ldr	r2, [pc, #96]	@ (800282c <HAL_TIM_PWM_Start+0x204>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_TIM_PWM_Start+0x1b2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a18      	ldr	r2, [pc, #96]	@ (8002838 <HAL_TIM_PWM_Start+0x210>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d115      	bne.n	8002806 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <HAL_TIM_PWM_Start+0x220>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b06      	cmp	r3, #6
 80027ea:	d015      	beq.n	8002818 <HAL_TIM_PWM_Start+0x1f0>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f2:	d011      	beq.n	8002818 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002804:	e008      	b.n	8002818 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e000      	b.n	800281a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002818:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40013400 	.word	0x40013400
 800282c:	40014000 	.word	0x40014000
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800
 8002838:	40015000 	.word	0x40015000
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800
 8002844:	40000c00 	.word	0x40000c00
 8002848:	00010007 	.word	0x00010007

0800284c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002866:	2302      	movs	r3, #2
 8002868:	e0ff      	b.n	8002a6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b14      	cmp	r3, #20
 8002876:	f200 80f0 	bhi.w	8002a5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800287a:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	080028d5 	.word	0x080028d5
 8002884:	08002a5b 	.word	0x08002a5b
 8002888:	08002a5b 	.word	0x08002a5b
 800288c:	08002a5b 	.word	0x08002a5b
 8002890:	08002915 	.word	0x08002915
 8002894:	08002a5b 	.word	0x08002a5b
 8002898:	08002a5b 	.word	0x08002a5b
 800289c:	08002a5b 	.word	0x08002a5b
 80028a0:	08002957 	.word	0x08002957
 80028a4:	08002a5b 	.word	0x08002a5b
 80028a8:	08002a5b 	.word	0x08002a5b
 80028ac:	08002a5b 	.word	0x08002a5b
 80028b0:	08002997 	.word	0x08002997
 80028b4:	08002a5b 	.word	0x08002a5b
 80028b8:	08002a5b 	.word	0x08002a5b
 80028bc:	08002a5b 	.word	0x08002a5b
 80028c0:	080029d9 	.word	0x080029d9
 80028c4:	08002a5b 	.word	0x08002a5b
 80028c8:	08002a5b 	.word	0x08002a5b
 80028cc:	08002a5b 	.word	0x08002a5b
 80028d0:	08002a19 	.word	0x08002a19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fa8a 	bl	8002df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0208 	orr.w	r2, r2, #8
 80028ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6999      	ldr	r1, [r3, #24]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	619a      	str	r2, [r3, #24]
      break;
 8002912:	e0a5      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fb04 	bl	8002f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800292e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6999      	ldr	r1, [r3, #24]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	619a      	str	r2, [r3, #24]
      break;
 8002954:	e084      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fb77 	bl	8003050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0208 	orr.w	r2, r2, #8
 8002970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0204 	bic.w	r2, r2, #4
 8002980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69d9      	ldr	r1, [r3, #28]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	61da      	str	r2, [r3, #28]
      break;
 8002994:	e064      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fbe9 	bl	8003174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69d9      	ldr	r1, [r3, #28]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	61da      	str	r2, [r3, #28]
      break;
 80029d6:	e043      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fc5c 	bl	800329c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a16:	e023      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fca6 	bl	8003370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	021a      	lsls	r2, r3, #8
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a58:	e002      	b.n	8002a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop

08002a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIM_ConfigClockSource+0x1c>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e0ee      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x1fa>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002aae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8002c78 <HAL_TIM_ConfigClockSource+0x204>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	f000 80b9 	beq.w	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002ad0:	4a69      	ldr	r2, [pc, #420]	@ (8002c78 <HAL_TIM_ConfigClockSource+0x204>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f200 80be 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ad8:	4a68      	ldr	r2, [pc, #416]	@ (8002c7c <HAL_TIM_ConfigClockSource+0x208>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	f000 80b1 	beq.w	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002ae0:	4a66      	ldr	r2, [pc, #408]	@ (8002c7c <HAL_TIM_ConfigClockSource+0x208>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f200 80b6 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ae8:	4a65      	ldr	r2, [pc, #404]	@ (8002c80 <HAL_TIM_ConfigClockSource+0x20c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	f000 80a9 	beq.w	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002af0:	4a63      	ldr	r2, [pc, #396]	@ (8002c80 <HAL_TIM_ConfigClockSource+0x20c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	f200 80ae 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002af8:	4a62      	ldr	r2, [pc, #392]	@ (8002c84 <HAL_TIM_ConfigClockSource+0x210>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	f000 80a1 	beq.w	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b00:	4a60      	ldr	r2, [pc, #384]	@ (8002c84 <HAL_TIM_ConfigClockSource+0x210>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	f200 80a6 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b08:	4a5f      	ldr	r2, [pc, #380]	@ (8002c88 <HAL_TIM_ConfigClockSource+0x214>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	f000 8099 	beq.w	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b10:	4a5d      	ldr	r2, [pc, #372]	@ (8002c88 <HAL_TIM_ConfigClockSource+0x214>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	f200 809e 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002b1c:	f000 8091 	beq.w	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002b24:	f200 8096 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b2c:	f000 8089 	beq.w	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b34:	f200 808e 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b3c:	d03e      	beq.n	8002bbc <HAL_TIM_ConfigClockSource+0x148>
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b42:	f200 8087 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b4a:	f000 8086 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x1e6>
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b52:	d87f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b54:	2b70      	cmp	r3, #112	@ 0x70
 8002b56:	d01a      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x11a>
 8002b58:	2b70      	cmp	r3, #112	@ 0x70
 8002b5a:	d87b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b5c:	2b60      	cmp	r3, #96	@ 0x60
 8002b5e:	d050      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x18e>
 8002b60:	2b60      	cmp	r3, #96	@ 0x60
 8002b62:	d877      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b64:	2b50      	cmp	r3, #80	@ 0x50
 8002b66:	d03c      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x16e>
 8002b68:	2b50      	cmp	r3, #80	@ 0x50
 8002b6a:	d873      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b6c:	2b40      	cmp	r3, #64	@ 0x40
 8002b6e:	d058      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b70:	2b40      	cmp	r3, #64	@ 0x40
 8002b72:	d86f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b74:	2b30      	cmp	r3, #48	@ 0x30
 8002b76:	d064      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b78:	2b30      	cmp	r3, #48	@ 0x30
 8002b7a:	d86b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d060      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d867      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05c      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d05a      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8002b8c:	e062      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b9e:	f000 fccf 	bl	8003540 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	609a      	str	r2, [r3, #8]
      break;
 8002bba:	e04f      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bcc:	f000 fcb8 	bl	8003540 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bde:	609a      	str	r2, [r3, #8]
      break;
 8002be0:	e03c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 fc2a 	bl	8003448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2150      	movs	r1, #80	@ 0x50
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fc83 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8002c00:	e02c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f000 fc49 	bl	80034a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2160      	movs	r1, #96	@ 0x60
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fc73 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8002c20:	e01c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f000 fc0a 	bl	8003448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2140      	movs	r1, #64	@ 0x40
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fc63 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8002c40:	e00c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f000 fc5a 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8002c52:	e003      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e000      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8002c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	00100070 	.word	0x00100070
 8002c7c:	00100050 	.word	0x00100050
 8002c80:	00100040 	.word	0x00100040
 8002c84:	00100030 	.word	0x00100030
 8002c88:	00100020 	.word	0x00100020

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002dd0 <TIM_Base_SetConfig+0x144>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d017      	beq.n	8002cd4 <TIM_Base_SetConfig+0x48>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002caa:	d013      	beq.n	8002cd4 <TIM_Base_SetConfig+0x48>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a49      	ldr	r2, [pc, #292]	@ (8002dd4 <TIM_Base_SetConfig+0x148>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00f      	beq.n	8002cd4 <TIM_Base_SetConfig+0x48>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a48      	ldr	r2, [pc, #288]	@ (8002dd8 <TIM_Base_SetConfig+0x14c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00b      	beq.n	8002cd4 <TIM_Base_SetConfig+0x48>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a47      	ldr	r2, [pc, #284]	@ (8002ddc <TIM_Base_SetConfig+0x150>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <TIM_Base_SetConfig+0x48>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a46      	ldr	r2, [pc, #280]	@ (8002de0 <TIM_Base_SetConfig+0x154>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0x48>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a45      	ldr	r2, [pc, #276]	@ (8002de4 <TIM_Base_SetConfig+0x158>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a39      	ldr	r2, [pc, #228]	@ (8002dd0 <TIM_Base_SetConfig+0x144>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d023      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf4:	d01f      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a36      	ldr	r2, [pc, #216]	@ (8002dd4 <TIM_Base_SetConfig+0x148>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01b      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a35      	ldr	r2, [pc, #212]	@ (8002dd8 <TIM_Base_SetConfig+0x14c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d017      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a34      	ldr	r2, [pc, #208]	@ (8002ddc <TIM_Base_SetConfig+0x150>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a33      	ldr	r2, [pc, #204]	@ (8002de0 <TIM_Base_SetConfig+0x154>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00f      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a33      	ldr	r2, [pc, #204]	@ (8002de8 <TIM_Base_SetConfig+0x15c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a32      	ldr	r2, [pc, #200]	@ (8002dec <TIM_Base_SetConfig+0x160>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d007      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a31      	ldr	r2, [pc, #196]	@ (8002df0 <TIM_Base_SetConfig+0x164>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d003      	beq.n	8002d36 <TIM_Base_SetConfig+0xaa>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2c      	ldr	r2, [pc, #176]	@ (8002de4 <TIM_Base_SetConfig+0x158>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d108      	bne.n	8002d48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	@ (8002dd0 <TIM_Base_SetConfig+0x144>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <TIM_Base_SetConfig+0x110>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a1a      	ldr	r2, [pc, #104]	@ (8002de0 <TIM_Base_SetConfig+0x154>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00f      	beq.n	8002d9c <TIM_Base_SetConfig+0x110>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002de8 <TIM_Base_SetConfig+0x15c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <TIM_Base_SetConfig+0x110>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a19      	ldr	r2, [pc, #100]	@ (8002dec <TIM_Base_SetConfig+0x160>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_Base_SetConfig+0x110>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <TIM_Base_SetConfig+0x164>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0x110>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a13      	ldr	r2, [pc, #76]	@ (8002de4 <TIM_Base_SetConfig+0x158>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d103      	bne.n	8002da4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40013400 	.word	0x40013400
 8002de4:	40015000 	.word	0x40015000
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40014400 	.word	0x40014400
 8002df0:	40014800 	.word	0x40014800

08002df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f023 0201 	bic.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f023 0302 	bic.w	r3, r3, #2
 8002e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a30      	ldr	r2, [pc, #192]	@ (8002f10 <TIM_OC1_SetConfig+0x11c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <TIM_OC1_SetConfig+0x88>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a2f      	ldr	r2, [pc, #188]	@ (8002f14 <TIM_OC1_SetConfig+0x120>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00f      	beq.n	8002e7c <TIM_OC1_SetConfig+0x88>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f18 <TIM_OC1_SetConfig+0x124>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00b      	beq.n	8002e7c <TIM_OC1_SetConfig+0x88>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a2d      	ldr	r2, [pc, #180]	@ (8002f1c <TIM_OC1_SetConfig+0x128>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <TIM_OC1_SetConfig+0x88>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f20 <TIM_OC1_SetConfig+0x12c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <TIM_OC1_SetConfig+0x88>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a2b      	ldr	r2, [pc, #172]	@ (8002f24 <TIM_OC1_SetConfig+0x130>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10c      	bne.n	8002e96 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0308 	bic.w	r3, r3, #8
 8002e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <TIM_OC1_SetConfig+0x11c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <TIM_OC1_SetConfig+0xd2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <TIM_OC1_SetConfig+0x120>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00f      	beq.n	8002ec6 <TIM_OC1_SetConfig+0xd2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f18 <TIM_OC1_SetConfig+0x124>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <TIM_OC1_SetConfig+0xd2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f1c <TIM_OC1_SetConfig+0x128>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <TIM_OC1_SetConfig+0xd2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <TIM_OC1_SetConfig+0x12c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_OC1_SetConfig+0xd2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	@ (8002f24 <TIM_OC1_SetConfig+0x130>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	621a      	str	r2, [r3, #32]
}
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40013400 	.word	0x40013400
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800
 8002f24:	40015000 	.word	0x40015000

08002f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 0210 	bic.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0320 	bic.w	r3, r3, #32
 8002f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a2c      	ldr	r2, [pc, #176]	@ (8003038 <TIM_OC2_SetConfig+0x110>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_OC2_SetConfig+0x74>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800303c <TIM_OC2_SetConfig+0x114>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_OC2_SetConfig+0x74>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a2a      	ldr	r2, [pc, #168]	@ (8003040 <TIM_OC2_SetConfig+0x118>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d10d      	bne.n	8002fb8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <TIM_OC2_SetConfig+0x110>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d013      	beq.n	8002fe8 <TIM_OC2_SetConfig+0xc0>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <TIM_OC2_SetConfig+0x114>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00f      	beq.n	8002fe8 <TIM_OC2_SetConfig+0xc0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a1e      	ldr	r2, [pc, #120]	@ (8003044 <TIM_OC2_SetConfig+0x11c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_OC2_SetConfig+0xc0>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <TIM_OC2_SetConfig+0x120>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <TIM_OC2_SetConfig+0xc0>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a1c      	ldr	r2, [pc, #112]	@ (800304c <TIM_OC2_SetConfig+0x124>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_OC2_SetConfig+0xc0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a17      	ldr	r2, [pc, #92]	@ (8003040 <TIM_OC2_SetConfig+0x118>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d113      	bne.n	8003010 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40013400 	.word	0x40013400
 8003040:	40015000 	.word	0x40015000
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800

08003050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800309c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2b      	ldr	r2, [pc, #172]	@ (800315c <TIM_OC3_SetConfig+0x10c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_OC3_SetConfig+0x72>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003160 <TIM_OC3_SetConfig+0x110>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_OC3_SetConfig+0x72>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a29      	ldr	r2, [pc, #164]	@ (8003164 <TIM_OC3_SetConfig+0x114>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10d      	bne.n	80030de <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <TIM_OC3_SetConfig+0x10c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <TIM_OC3_SetConfig+0xbe>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003160 <TIM_OC3_SetConfig+0x110>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00f      	beq.n	800310e <TIM_OC3_SetConfig+0xbe>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <TIM_OC3_SetConfig+0x118>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00b      	beq.n	800310e <TIM_OC3_SetConfig+0xbe>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <TIM_OC3_SetConfig+0x11c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <TIM_OC3_SetConfig+0xbe>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <TIM_OC3_SetConfig+0x120>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d003      	beq.n	800310e <TIM_OC3_SetConfig+0xbe>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a16      	ldr	r2, [pc, #88]	@ (8003164 <TIM_OC3_SetConfig+0x114>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d113      	bne.n	8003136 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800311c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	621a      	str	r2, [r3, #32]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40013400 	.word	0x40013400
 8003164:	40015000 	.word	0x40015000
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	031b      	lsls	r3, r3, #12
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <TIM_OC4_SetConfig+0x110>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <TIM_OC4_SetConfig+0x74>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a2b      	ldr	r2, [pc, #172]	@ (8003288 <TIM_OC4_SetConfig+0x114>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_OC4_SetConfig+0x74>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2a      	ldr	r2, [pc, #168]	@ (800328c <TIM_OC4_SetConfig+0x118>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d10d      	bne.n	8003204 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80031ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	031b      	lsls	r3, r3, #12
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a1f      	ldr	r2, [pc, #124]	@ (8003284 <TIM_OC4_SetConfig+0x110>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <TIM_OC4_SetConfig+0xc0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a1e      	ldr	r2, [pc, #120]	@ (8003288 <TIM_OC4_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00f      	beq.n	8003234 <TIM_OC4_SetConfig+0xc0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a1e      	ldr	r2, [pc, #120]	@ (8003290 <TIM_OC4_SetConfig+0x11c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_OC4_SetConfig+0xc0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a1d      	ldr	r2, [pc, #116]	@ (8003294 <TIM_OC4_SetConfig+0x120>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_OC4_SetConfig+0xc0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <TIM_OC4_SetConfig+0x124>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_OC4_SetConfig+0xc0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a17      	ldr	r2, [pc, #92]	@ (800328c <TIM_OC4_SetConfig+0x118>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d113      	bne.n	800325c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800323a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003242:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	019b      	lsls	r3, r3, #6
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40013400 	.word	0x40013400
 800328c:	40015000 	.word	0x40015000
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800

0800329c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80032e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a19      	ldr	r2, [pc, #100]	@ (8003358 <TIM_OC5_SetConfig+0xbc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_OC5_SetConfig+0x82>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a18      	ldr	r2, [pc, #96]	@ (800335c <TIM_OC5_SetConfig+0xc0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_OC5_SetConfig+0x82>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a17      	ldr	r2, [pc, #92]	@ (8003360 <TIM_OC5_SetConfig+0xc4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_OC5_SetConfig+0x82>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a16      	ldr	r2, [pc, #88]	@ (8003364 <TIM_OC5_SetConfig+0xc8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_OC5_SetConfig+0x82>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <TIM_OC5_SetConfig+0xcc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_OC5_SetConfig+0x82>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a14      	ldr	r2, [pc, #80]	@ (800336c <TIM_OC5_SetConfig+0xd0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d109      	bne.n	8003332 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003324:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	621a      	str	r2, [r3, #32]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40013400 	.word	0x40013400
 8003360:	40014000 	.word	0x40014000
 8003364:	40014400 	.word	0x40014400
 8003368:	40014800 	.word	0x40014800
 800336c:	40015000 	.word	0x40015000

08003370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	051b      	lsls	r3, r3, #20
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003430 <TIM_OC6_SetConfig+0xc0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <TIM_OC6_SetConfig+0x84>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a19      	ldr	r2, [pc, #100]	@ (8003434 <TIM_OC6_SetConfig+0xc4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00f      	beq.n	80033f4 <TIM_OC6_SetConfig+0x84>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a18      	ldr	r2, [pc, #96]	@ (8003438 <TIM_OC6_SetConfig+0xc8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_OC6_SetConfig+0x84>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a17      	ldr	r2, [pc, #92]	@ (800343c <TIM_OC6_SetConfig+0xcc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_OC6_SetConfig+0x84>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <TIM_OC6_SetConfig+0xd0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_OC6_SetConfig+0x84>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <TIM_OC6_SetConfig+0xd4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d109      	bne.n	8003408 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40013400 	.word	0x40013400
 8003438:	40014000 	.word	0x40014000
 800343c:	40014400 	.word	0x40014400
 8003440:	40014800 	.word	0x40014800
 8003444:	40015000 	.word	0x40015000

08003448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f023 0201 	bic.w	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f023 030a 	bic.w	r3, r3, #10
 8003484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b087      	sub	sp, #28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f023 0210 	bic.w	r2, r3, #16
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	031b      	lsls	r3, r3, #12
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800351c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	f043 0307 	orr.w	r3, r3, #7
 800352c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800355a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	021a      	lsls	r2, r3, #8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	431a      	orrs	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2201      	movs	r2, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e074      	b.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a34      	ldr	r2, [pc, #208]	@ (80036dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a33      	ldr	r2, [pc, #204]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a31      	ldr	r2, [pc, #196]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d108      	bne.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003628:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800363a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a21      	ldr	r2, [pc, #132]	@ (80036dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003664:	d01d      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1f      	ldr	r2, [pc, #124]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1c      	ldr	r2, [pc, #112]	@ (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a15      	ldr	r2, [pc, #84]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a11      	ldr	r2, [pc, #68]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40013400 	.word	0x40013400
 80036e4:	40015000 	.word	0x40015000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40014000 	.word	0x40014000

080036f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e042      	b.n	8003790 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fd faeb 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2224      	movs	r2, #36	@ 0x24
 8003726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fb24 	bl	8003d90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f825 	bl	8003798 <UART_SetConfig>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e01b      	b.n	8003790 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fba3 	bl	8003ed4 <UART_CheckIdleState>
 800378e:	4603      	mov	r3, r0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b08c      	sub	sp, #48	@ 0x30
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	4313      	orrs	r3, r2
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4baa      	ldr	r3, [pc, #680]	@ (8003a70 <UART_SetConfig+0x2d8>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a9f      	ldr	r2, [pc, #636]	@ (8003a74 <UART_SetConfig+0x2dc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003800:	4313      	orrs	r3, r2
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800380e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003818:	430b      	orrs	r3, r1
 800381a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	f023 010f 	bic.w	r1, r3, #15
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a90      	ldr	r2, [pc, #576]	@ (8003a78 <UART_SetConfig+0x2e0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d125      	bne.n	8003888 <UART_SetConfig+0xf0>
 800383c:	4b8f      	ldr	r3, [pc, #572]	@ (8003a7c <UART_SetConfig+0x2e4>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d81a      	bhi.n	8003880 <UART_SetConfig+0xe8>
 800384a:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <UART_SetConfig+0xb8>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003861 	.word	0x08003861
 8003854:	08003871 	.word	0x08003871
 8003858:	08003869 	.word	0x08003869
 800385c:	08003879 	.word	0x08003879
 8003860:	2301      	movs	r3, #1
 8003862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003866:	e116      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003868:	2302      	movs	r3, #2
 800386a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386e:	e112      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003870:	2304      	movs	r3, #4
 8003872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003876:	e10e      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003878:	2308      	movs	r3, #8
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387e:	e10a      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003880:	2310      	movs	r3, #16
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003886:	e106      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7c      	ldr	r2, [pc, #496]	@ (8003a80 <UART_SetConfig+0x2e8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d138      	bne.n	8003904 <UART_SetConfig+0x16c>
 8003892:	4b7a      	ldr	r3, [pc, #488]	@ (8003a7c <UART_SetConfig+0x2e4>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d82d      	bhi.n	80038fc <UART_SetConfig+0x164>
 80038a0:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <UART_SetConfig+0x110>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080038fd 	.word	0x080038fd
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	080038fd 	.word	0x080038fd
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038fd 	.word	0x080038fd
 80038c4:	080038fd 	.word	0x080038fd
 80038c8:	080038e5 	.word	0x080038e5
 80038cc:	080038fd 	.word	0x080038fd
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	080038fd 	.word	0x080038fd
 80038d8:	080038f5 	.word	0x080038f5
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e2:	e0d8      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80038e4:	2302      	movs	r3, #2
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ea:	e0d4      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80038ec:	2304      	movs	r3, #4
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f2:	e0d0      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80038f4:	2308      	movs	r3, #8
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038fa:	e0cc      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80038fc:	2310      	movs	r3, #16
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003902:	e0c8      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5e      	ldr	r2, [pc, #376]	@ (8003a84 <UART_SetConfig+0x2ec>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d125      	bne.n	800395a <UART_SetConfig+0x1c2>
 800390e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a7c <UART_SetConfig+0x2e4>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003914:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003918:	2b30      	cmp	r3, #48	@ 0x30
 800391a:	d016      	beq.n	800394a <UART_SetConfig+0x1b2>
 800391c:	2b30      	cmp	r3, #48	@ 0x30
 800391e:	d818      	bhi.n	8003952 <UART_SetConfig+0x1ba>
 8003920:	2b20      	cmp	r3, #32
 8003922:	d00a      	beq.n	800393a <UART_SetConfig+0x1a2>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d814      	bhi.n	8003952 <UART_SetConfig+0x1ba>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <UART_SetConfig+0x19a>
 800392c:	2b10      	cmp	r3, #16
 800392e:	d008      	beq.n	8003942 <UART_SetConfig+0x1aa>
 8003930:	e00f      	b.n	8003952 <UART_SetConfig+0x1ba>
 8003932:	2300      	movs	r3, #0
 8003934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003938:	e0ad      	b.n	8003a96 <UART_SetConfig+0x2fe>
 800393a:	2302      	movs	r3, #2
 800393c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003940:	e0a9      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003942:	2304      	movs	r3, #4
 8003944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003948:	e0a5      	b.n	8003a96 <UART_SetConfig+0x2fe>
 800394a:	2308      	movs	r3, #8
 800394c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003950:	e0a1      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003952:	2310      	movs	r3, #16
 8003954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003958:	e09d      	b.n	8003a96 <UART_SetConfig+0x2fe>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a88 <UART_SetConfig+0x2f0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d125      	bne.n	80039b0 <UART_SetConfig+0x218>
 8003964:	4b45      	ldr	r3, [pc, #276]	@ (8003a7c <UART_SetConfig+0x2e4>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800396e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003970:	d016      	beq.n	80039a0 <UART_SetConfig+0x208>
 8003972:	2bc0      	cmp	r3, #192	@ 0xc0
 8003974:	d818      	bhi.n	80039a8 <UART_SetConfig+0x210>
 8003976:	2b80      	cmp	r3, #128	@ 0x80
 8003978:	d00a      	beq.n	8003990 <UART_SetConfig+0x1f8>
 800397a:	2b80      	cmp	r3, #128	@ 0x80
 800397c:	d814      	bhi.n	80039a8 <UART_SetConfig+0x210>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <UART_SetConfig+0x1f0>
 8003982:	2b40      	cmp	r3, #64	@ 0x40
 8003984:	d008      	beq.n	8003998 <UART_SetConfig+0x200>
 8003986:	e00f      	b.n	80039a8 <UART_SetConfig+0x210>
 8003988:	2300      	movs	r3, #0
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398e:	e082      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003990:	2302      	movs	r3, #2
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003996:	e07e      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003998:	2304      	movs	r3, #4
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800399e:	e07a      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80039a0:	2308      	movs	r3, #8
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039a6:	e076      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80039a8:	2310      	movs	r3, #16
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ae:	e072      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a35      	ldr	r2, [pc, #212]	@ (8003a8c <UART_SetConfig+0x2f4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d12a      	bne.n	8003a10 <UART_SetConfig+0x278>
 80039ba:	4b30      	ldr	r3, [pc, #192]	@ (8003a7c <UART_SetConfig+0x2e4>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039c8:	d01a      	beq.n	8003a00 <UART_SetConfig+0x268>
 80039ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039ce:	d81b      	bhi.n	8003a08 <UART_SetConfig+0x270>
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d4:	d00c      	beq.n	80039f0 <UART_SetConfig+0x258>
 80039d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039da:	d815      	bhi.n	8003a08 <UART_SetConfig+0x270>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <UART_SetConfig+0x250>
 80039e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e4:	d008      	beq.n	80039f8 <UART_SetConfig+0x260>
 80039e6:	e00f      	b.n	8003a08 <UART_SetConfig+0x270>
 80039e8:	2300      	movs	r3, #0
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ee:	e052      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80039f0:	2302      	movs	r3, #2
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f6:	e04e      	b.n	8003a96 <UART_SetConfig+0x2fe>
 80039f8:	2304      	movs	r3, #4
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039fe:	e04a      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003a00:	2308      	movs	r3, #8
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a06:	e046      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a0e:	e042      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a17      	ldr	r2, [pc, #92]	@ (8003a74 <UART_SetConfig+0x2dc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d13a      	bne.n	8003a90 <UART_SetConfig+0x2f8>
 8003a1a:	4b18      	ldr	r3, [pc, #96]	@ (8003a7c <UART_SetConfig+0x2e4>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a28:	d01a      	beq.n	8003a60 <UART_SetConfig+0x2c8>
 8003a2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a2e:	d81b      	bhi.n	8003a68 <UART_SetConfig+0x2d0>
 8003a30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a34:	d00c      	beq.n	8003a50 <UART_SetConfig+0x2b8>
 8003a36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a3a:	d815      	bhi.n	8003a68 <UART_SetConfig+0x2d0>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <UART_SetConfig+0x2b0>
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a44:	d008      	beq.n	8003a58 <UART_SetConfig+0x2c0>
 8003a46:	e00f      	b.n	8003a68 <UART_SetConfig+0x2d0>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4e:	e022      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e01e      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e01a      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003a60:	2308      	movs	r3, #8
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e016      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e012      	b.n	8003a96 <UART_SetConfig+0x2fe>
 8003a70:	cfff69f3 	.word	0xcfff69f3
 8003a74:	40008000 	.word	0x40008000
 8003a78:	40013800 	.word	0x40013800
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40004400 	.word	0x40004400
 8003a84:	40004800 	.word	0x40004800
 8003a88:	40004c00 	.word	0x40004c00
 8003a8c:	40005000 	.word	0x40005000
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4aae      	ldr	r2, [pc, #696]	@ (8003d54 <UART_SetConfig+0x5bc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	f040 8097 	bne.w	8003bd0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d823      	bhi.n	8003af2 <UART_SetConfig+0x35a>
 8003aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <UART_SetConfig+0x318>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003af3 	.word	0x08003af3
 8003ab8:	08003add 	.word	0x08003add
 8003abc:	08003af3 	.word	0x08003af3
 8003ac0:	08003ae3 	.word	0x08003ae3
 8003ac4:	08003af3 	.word	0x08003af3
 8003ac8:	08003af3 	.word	0x08003af3
 8003acc:	08003af3 	.word	0x08003af3
 8003ad0:	08003aeb 	.word	0x08003aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad4:	f7fe fa30 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8003ad8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ada:	e010      	b.n	8003afe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003adc:	4b9e      	ldr	r3, [pc, #632]	@ (8003d58 <UART_SetConfig+0x5c0>)
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ae0:	e00d      	b.n	8003afe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae2:	f7fe f9bb 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8003ae6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ae8:	e009      	b.n	8003afe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003af0:	e005      	b.n	8003afe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003afc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8130 	beq.w	8003d66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	4a94      	ldr	r2, [pc, #592]	@ (8003d5c <UART_SetConfig+0x5c4>)
 8003b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d305      	bcc.n	8003b36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d903      	bls.n	8003b3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b3c:	e113      	b.n	8003d66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	2200      	movs	r2, #0
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	60fa      	str	r2, [r7, #12]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	4a84      	ldr	r2, [pc, #528]	@ (8003d5c <UART_SetConfig+0x5c4>)
 8003b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2200      	movs	r2, #0
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b60:	f7fc fb5a 	bl	8000218 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	020b      	lsls	r3, r1, #8
 8003b76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b7a:	0202      	lsls	r2, r0, #8
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	6849      	ldr	r1, [r1, #4]
 8003b80:	0849      	lsrs	r1, r1, #1
 8003b82:	2000      	movs	r0, #0
 8003b84:	460c      	mov	r4, r1
 8003b86:	4605      	mov	r5, r0
 8003b88:	eb12 0804 	adds.w	r8, r2, r4
 8003b8c:	eb43 0905 	adc.w	r9, r3, r5
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	469a      	mov	sl, r3
 8003b98:	4693      	mov	fp, r2
 8003b9a:	4652      	mov	r2, sl
 8003b9c:	465b      	mov	r3, fp
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	f7fc fb39 	bl	8000218 <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4613      	mov	r3, r2
 8003bac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb4:	d308      	bcc.n	8003bc8 <UART_SetConfig+0x430>
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bbc:	d204      	bcs.n	8003bc8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	e0ce      	b.n	8003d66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003bce:	e0ca      	b.n	8003d66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bd8:	d166      	bne.n	8003ca8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003bda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d827      	bhi.n	8003c32 <UART_SetConfig+0x49a>
 8003be2:	a201      	add	r2, pc, #4	@ (adr r2, 8003be8 <UART_SetConfig+0x450>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c0d 	.word	0x08003c0d
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	08003c1d 	.word	0x08003c1d
 8003bf4:	08003c33 	.word	0x08003c33
 8003bf8:	08003c23 	.word	0x08003c23
 8003bfc:	08003c33 	.word	0x08003c33
 8003c00:	08003c33 	.word	0x08003c33
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f7fe f994 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8003c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c12:	e014      	b.n	8003c3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c14:	f7fe f9a6 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
 8003c18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c1a:	e010      	b.n	8003c3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b4e      	ldr	r3, [pc, #312]	@ (8003d58 <UART_SetConfig+0x5c0>)
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c20:	e00d      	b.n	8003c3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7fe f91b 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8003c26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c28:	e009      	b.n	8003c3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c30:	e005      	b.n	8003c3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8090 	beq.w	8003d66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	4a44      	ldr	r2, [pc, #272]	@ (8003d5c <UART_SetConfig+0x5c4>)
 8003c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c50:	461a      	mov	r2, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c58:	005a      	lsls	r2, r3, #1
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	441a      	add	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d916      	bls.n	8003ca0 <UART_SetConfig+0x508>
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d212      	bcs.n	8003ca0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f023 030f 	bic.w	r3, r3, #15
 8003c82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	8bfb      	ldrh	r3, [r7, #30]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	8bfa      	ldrh	r2, [r7, #30]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e062      	b.n	8003d66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ca6:	e05e      	b.n	8003d66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d828      	bhi.n	8003d02 <UART_SetConfig+0x56a>
 8003cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb8 <UART_SetConfig+0x520>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003cdd 	.word	0x08003cdd
 8003cbc:	08003ce5 	.word	0x08003ce5
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	08003d03 	.word	0x08003d03
 8003cc8:	08003cf3 	.word	0x08003cf3
 8003ccc:	08003d03 	.word	0x08003d03
 8003cd0:	08003d03 	.word	0x08003d03
 8003cd4:	08003d03 	.word	0x08003d03
 8003cd8:	08003cfb 	.word	0x08003cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cdc:	f7fe f92c 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8003ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ce2:	e014      	b.n	8003d0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ce4:	f7fe f93e 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
 8003ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cea:	e010      	b.n	8003d0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cec:	4b1a      	ldr	r3, [pc, #104]	@ (8003d58 <UART_SetConfig+0x5c0>)
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cf0:	e00d      	b.n	8003d0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf2:	f7fe f8b3 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8003cf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cf8:	e009      	b.n	8003d0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d00:	e005      	b.n	8003d0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d028      	beq.n	8003d66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	4a10      	ldr	r2, [pc, #64]	@ (8003d5c <UART_SetConfig+0x5c4>)
 8003d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	441a      	add	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d910      	bls.n	8003d60 <UART_SetConfig+0x5c8>
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d44:	d20c      	bcs.n	8003d60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	e009      	b.n	8003d66 <UART_SetConfig+0x5ce>
 8003d52:	bf00      	nop
 8003d54:	40008000 	.word	0x40008000
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	0800445c 	.word	0x0800445c
      }
      else
      {
        ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003d82:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3730      	adds	r7, #48	@ 0x30
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e8e:	d10a      	bne.n	8003ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b098      	sub	sp, #96	@ 0x60
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ee4:	f7fd f82e 	bl	8000f44 <HAL_GetTick>
 8003ee8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d12f      	bne.n	8003f58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ef8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f00:	2200      	movs	r2, #0
 8003f02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f88e 	bl	8004028 <UART_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d022      	beq.n	8003f58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e6      	bne.n	8003f12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e063      	b.n	8004020 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d149      	bne.n	8003ffa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f857 	bl	8004028 <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03c      	beq.n	8003ffa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e6      	bne.n	8003f80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd2:	61fa      	str	r2, [r7, #28]
 8003fd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	617b      	str	r3, [r7, #20]
   return(result);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e5      	bne.n	8003fb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e012      	b.n	8004020 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3758      	adds	r7, #88	@ 0x58
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004038:	e04f      	b.n	80040da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004040:	d04b      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fc ff7f 	bl	8000f44 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <UART_WaitOnFlagUntilTimeout+0x30>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e04e      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d037      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0xb2>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b80      	cmp	r3, #128	@ 0x80
 800406e:	d034      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b40      	cmp	r3, #64	@ 0x40
 8004074:	d031      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b08      	cmp	r3, #8
 8004082:	d110      	bne.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2208      	movs	r2, #8
 800408a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f838 	bl	8004102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2208      	movs	r2, #8
 8004096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e029      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040b4:	d111      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f81e 	bl	8004102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e00f      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4013      	ands	r3, r2
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d0a0      	beq.n	800403a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004102:	b480      	push	{r7}
 8004104:	b095      	sub	sp, #84	@ 0x54
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800411e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004128:	643b      	str	r3, [r7, #64]	@ 0x40
 800412a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800412e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e6      	bne.n	800410a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3308      	adds	r3, #8
 8004142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	61fb      	str	r3, [r7, #28]
   return(result);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3308      	adds	r3, #8
 800415e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004160:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e3      	bne.n	800413c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d118      	bne.n	80041ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	60bb      	str	r3, [r7, #8]
   return(result);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f023 0310 	bic.w	r3, r3, #16
 8004190:	647b      	str	r3, [r7, #68]	@ 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6979      	ldr	r1, [r7, #20]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	613b      	str	r3, [r7, #16]
   return(result);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e6      	bne.n	800417c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80041c2:	bf00      	nop
 80041c4:	3754      	adds	r7, #84	@ 0x54
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e027      	b.n	8004234 <HAL_UARTEx_DisableFifoMode+0x66>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2224      	movs	r2, #36	@ 0x24
 80041f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004212:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004254:	2302      	movs	r3, #2
 8004256:	e02d      	b.n	80042b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	@ 0x24
 8004264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f84f 	bl	8004338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e02d      	b.n	8004330 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	@ 0x24
 80042e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f811 	bl	8004338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004358:	e031      	b.n	80043be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800435a:	2308      	movs	r3, #8
 800435c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800435e:	2308      	movs	r3, #8
 8004360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	0e5b      	lsrs	r3, r3, #25
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	0f5b      	lsrs	r3, r3, #29
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004382:	7bbb      	ldrb	r3, [r7, #14]
 8004384:	7b3a      	ldrb	r2, [r7, #12]
 8004386:	4911      	ldr	r1, [pc, #68]	@ (80043cc <UARTEx_SetNbDataToProcess+0x94>)
 8004388:	5c8a      	ldrb	r2, [r1, r2]
 800438a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800438e:	7b3a      	ldrb	r2, [r7, #12]
 8004390:	490f      	ldr	r1, [pc, #60]	@ (80043d0 <UARTEx_SetNbDataToProcess+0x98>)
 8004392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004394:	fb93 f3f2 	sdiv	r3, r3, r2
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	7b7a      	ldrb	r2, [r7, #13]
 80043a4:	4909      	ldr	r1, [pc, #36]	@ (80043cc <UARTEx_SetNbDataToProcess+0x94>)
 80043a6:	5c8a      	ldrb	r2, [r1, r2]
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043ac:	7b7a      	ldrb	r2, [r7, #13]
 80043ae:	4908      	ldr	r1, [pc, #32]	@ (80043d0 <UARTEx_SetNbDataToProcess+0x98>)
 80043b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	08004474 	.word	0x08004474
 80043d0:	0800447c 	.word	0x0800447c

080043d4 <memset>:
 80043d4:	4402      	add	r2, r0
 80043d6:	4603      	mov	r3, r0
 80043d8:	4293      	cmp	r3, r2
 80043da:	d100      	bne.n	80043de <memset+0xa>
 80043dc:	4770      	bx	lr
 80043de:	f803 1b01 	strb.w	r1, [r3], #1
 80043e2:	e7f9      	b.n	80043d8 <memset+0x4>

080043e4 <__libc_init_array>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4d0d      	ldr	r5, [pc, #52]	@ (800441c <__libc_init_array+0x38>)
 80043e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004420 <__libc_init_array+0x3c>)
 80043ea:	1b64      	subs	r4, r4, r5
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	2600      	movs	r6, #0
 80043f0:	42a6      	cmp	r6, r4
 80043f2:	d109      	bne.n	8004408 <__libc_init_array+0x24>
 80043f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004424 <__libc_init_array+0x40>)
 80043f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004428 <__libc_init_array+0x44>)
 80043f8:	f000 f818 	bl	800442c <_init>
 80043fc:	1b64      	subs	r4, r4, r5
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	2600      	movs	r6, #0
 8004402:	42a6      	cmp	r6, r4
 8004404:	d105      	bne.n	8004412 <__libc_init_array+0x2e>
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	f855 3b04 	ldr.w	r3, [r5], #4
 800440c:	4798      	blx	r3
 800440e:	3601      	adds	r6, #1
 8004410:	e7ee      	b.n	80043f0 <__libc_init_array+0xc>
 8004412:	f855 3b04 	ldr.w	r3, [r5], #4
 8004416:	4798      	blx	r3
 8004418:	3601      	adds	r6, #1
 800441a:	e7f2      	b.n	8004402 <__libc_init_array+0x1e>
 800441c:	0800448c 	.word	0x0800448c
 8004420:	0800448c 	.word	0x0800448c
 8004424:	0800448c 	.word	0x0800448c
 8004428:	08004490 	.word	0x08004490

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
