
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08009598  08009598  0000a598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d8  080097d8  0000b0a0  2**0
                  CONTENTS
  4 .ARM          00000008  080097d8  080097d8  0000a7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097e0  080097e0  0000b0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097e0  080097e0  0000a7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097e4  080097e4  0000a7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080097e8  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  200000a0  08009888  0000b0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08009888  0000b548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144f7  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5c  00000000  00000000  0001f5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00022428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dda  00000000  00000000  00023628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005579  00000000  00000000  00024402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b3a  00000000  00000000  0002997b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc28c  00000000  00000000  000404b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c741  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d8  00000000  00000000  0011c784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00121e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800957c 	.word	0x0800957c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	0800957c 	.word	0x0800957c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b098      	sub	sp, #96	@ 0x60
 8000fcc:	af08      	add	r7, sp, #32
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <parse_controller_data+0x16>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 8000fde:	4887      	ldr	r0, [pc, #540]	@ (80011fc <parse_controller_data+0x234>)
 8000fe0:	f006 ffc8 	bl	8007f74 <puts>
    return 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e105      	b.n	80011f4 <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 8000fe8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000fec:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	9306      	str	r3, [sp, #24]
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	9305      	str	r3, [sp, #20]
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	9304      	str	r3, [sp, #16]
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	460b      	mov	r3, r1
 800101c:	4978      	ldr	r1, [pc, #480]	@ (8001200 <parse_controller_data+0x238>)
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f006 fd9a 	bl	8007b58 <siscanf>
 8001024:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 8001026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001028:	2b09      	cmp	r3, #9
 800102a:	d004      	beq.n	8001036 <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 800102c:	4875      	ldr	r0, [pc, #468]	@ (8001204 <parse_controller_data+0x23c>)
 800102e:	f006 ffa1 	bl	8007f74 <puts>
    return 2;
 8001032:	2302      	movs	r3, #2
 8001034:	e0de      	b.n	80011f4 <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 8001036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2da      	uxtb	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 800104a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2da      	uxtb	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 800105e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	b2da      	uxtb	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 8001072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2da      	uxtb	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 8001086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2da      	uxtb	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 800109a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 80010ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 80010c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 80010d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf14      	ite	ne
 80010e0:	2301      	movne	r3, #1
 80010e2:	2300      	moveq	r3, #0
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 80010ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf14      	ite	ne
 80010f4:	2301      	movne	r3, #1
 80010f6:	2300      	moveq	r3, #0
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 80010fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf14      	ite	ne
 8001108:	2301      	movne	r3, #1
 800110a:	2300      	moveq	r3, #0
 800110c:	b2da      	uxtb	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 8001112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2da      	uxtb	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 8001126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2da      	uxtb	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 800113a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 800114e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001152:	220a      	movs	r2, #10
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f006 fe8e 	bl	8007e78 <strtol>
 800115c:	4603      	mov	r3, r0
 800115e:	b25a      	sxtb	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 8001164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001168:	220a      	movs	r2, #10
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f006 fe83 	bl	8007e78 <strtol>
 8001172:	4603      	mov	r3, r0
 8001174:	b25a      	sxtb	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	220a      	movs	r2, #10
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f006 fe78 	bl	8007e78 <strtol>
 8001188:	4603      	mov	r3, r0
 800118a:	b25a      	sxtb	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	220a      	movs	r2, #10
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f006 fe6d 	bl	8007e78 <strtol>
 800119e:	4603      	mov	r3, r0
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	761a      	strb	r2, [r3, #24]

  return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3740      	adds	r7, #64	@ 0x40
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08009598 	.word	0x08009598
 8001200:	080095b8 	.word	0x080095b8
 8001204:	080095e0 	.word	0x080095e0

08001208 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b4a      	ldr	r3, [pc, #296]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a49      	ldr	r2, [pc, #292]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b47      	ldr	r3, [pc, #284]	@ (8001348 <MX_GPIO_Init+0x140>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b44      	ldr	r3, [pc, #272]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a43      	ldr	r2, [pc, #268]	@ (8001348 <MX_GPIO_Init+0x140>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124e:	4b3e      	ldr	r3, [pc, #248]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a3d      	ldr	r2, [pc, #244]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <MX_GPIO_Init+0x140>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a37      	ldr	r2, [pc, #220]	@ (8001348 <MX_GPIO_Init+0x140>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b35      	ldr	r3, [pc, #212]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a31      	ldr	r2, [pc, #196]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <MX_GPIO_Init+0x140>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2108      	movs	r1, #8
 800129a:	482c      	ldr	r0, [pc, #176]	@ (800134c <MX_GPIO_Init+0x144>)
 800129c:	f003 f962 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012aa:	f003 f95b 	bl	8004564 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80012b4:	4826      	ldr	r0, [pc, #152]	@ (8001350 <MX_GPIO_Init+0x148>)
 80012b6:	f003 f955 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012c0:	4824      	ldr	r0, [pc, #144]	@ (8001354 <MX_GPIO_Init+0x14c>)
 80012c2:	f003 f94f 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 80012c6:	2308      	movs	r3, #8
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	481b      	ldr	r0, [pc, #108]	@ (800134c <MX_GPIO_Init+0x144>)
 80012de:	f002 ffbf 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80012e2:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80012e6:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f002 ffaf 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8001302:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_GPIO_Init+0x148>)
 800131c:	f002 ffa0 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 8001320:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <MX_GPIO_Init+0x14c>)
 800133a:	f002 ff91 	bl	8004260 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	48000800 	.word	0x48000800
 8001350:	48001000 	.word	0x48001000
 8001354:	48000c00 	.word	0x48000c00

08001358 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b098      	sub	sp, #96	@ 0x60
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135e:	f002 fe08 	bl	8003f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001362:	f000 f9d9 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f7ff ff4f 	bl	8001208 <MX_GPIO_Init>
  MX_TIM1_Init();
 800136a:	f002 f8df 	bl	800352c <MX_TIM1_Init>
  MX_TIM3_Init();
 800136e:	f002 f9ad 	bl	80036cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001372:	f002 fa39 	bl	80037e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001376:	f002 fa8d 	bl	8003894 <MX_TIM5_Init>
  MX_TIM8_Init();
 800137a:	f002 fae1 	bl	8003940 <MX_TIM8_Init>
  MX_TIM2_Init();
 800137e:	f002 f92f 	bl	80035e0 <MX_TIM2_Init>
  MX_UART4_Init();
 8001382:	f002 fc9d 	bl	8003cc0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001386:	f002 fce7 	bl	8003d58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800138a:	2100      	movs	r1, #0
 800138c:	48bd      	ldr	r0, [pc, #756]	@ (8001684 <main+0x32c>)
 800138e:	f004 fa63 	bl	8005858 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001392:	2104      	movs	r1, #4
 8001394:	48bb      	ldr	r0, [pc, #748]	@ (8001684 <main+0x32c>)
 8001396:	f004 fa5f 	bl	8005858 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800139a:	210c      	movs	r1, #12
 800139c:	48b9      	ldr	r0, [pc, #740]	@ (8001684 <main+0x32c>)
 800139e:	f004 fa5b 	bl	8005858 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80013a2:	210c      	movs	r1, #12
 80013a4:	48b8      	ldr	r0, [pc, #736]	@ (8001688 <main+0x330>)
 80013a6:	f004 fa57 	bl	8005858 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80013aa:	48b8      	ldr	r0, [pc, #736]	@ (800168c <main+0x334>)
 80013ac:	f004 f97a 	bl	80056a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80013b0:	213c      	movs	r1, #60	@ 0x3c
 80013b2:	48b6      	ldr	r0, [pc, #728]	@ (800168c <main+0x334>)
 80013b4:	f004 fc08 	bl	8005bc8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80013b8:	48b5      	ldr	r0, [pc, #724]	@ (8001690 <main+0x338>)
 80013ba:	f004 f973 	bl	80056a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80013be:	213c      	movs	r1, #60	@ 0x3c
 80013c0:	48b3      	ldr	r0, [pc, #716]	@ (8001690 <main+0x338>)
 80013c2:	f004 fc01 	bl	8005bc8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80013c6:	48b3      	ldr	r0, [pc, #716]	@ (8001694 <main+0x33c>)
 80013c8:	f004 f96c 	bl	80056a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80013cc:	213c      	movs	r1, #60	@ 0x3c
 80013ce:	48b1      	ldr	r0, [pc, #708]	@ (8001694 <main+0x33c>)
 80013d0:	f004 fbfa 	bl	8005bc8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80013d4:	48b0      	ldr	r0, [pc, #704]	@ (8001698 <main+0x340>)
 80013d6:	f004 f965 	bl	80056a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80013da:	213c      	movs	r1, #60	@ 0x3c
 80013dc:	48ae      	ldr	r0, [pc, #696]	@ (8001698 <main+0x340>)
 80013de:	f004 fbf3 	bl	8005bc8 <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2108      	movs	r1, #8
 80013e6:	48ad      	ldr	r0, [pc, #692]	@ (800169c <main+0x344>)
 80013e8:	f003 f8bc 	bl	8004564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013f2:	48ab      	ldr	r0, [pc, #684]	@ (80016a0 <main+0x348>)
 80013f4:	f003 f8b6 	bl	8004564 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013fe:	48a9      	ldr	r0, [pc, #676]	@ (80016a4 <main+0x34c>)
 8001400:	f003 f8b0 	bl	8004564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800140a:	48a6      	ldr	r0, [pc, #664]	@ (80016a4 <main+0x34c>)
 800140c:	f003 f8aa 	bl	8004564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001416:	48a3      	ldr	r0, [pc, #652]	@ (80016a4 <main+0x34c>)
 8001418:	f003 f8a4 	bl	8004564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2180      	movs	r1, #128	@ 0x80
 8001420:	48a0      	ldr	r0, [pc, #640]	@ (80016a4 <main+0x34c>)
 8001422:	f003 f89f 	bl	8004564 <HAL_GPIO_WritePin>

  servo_reset_all();
 8001426:	f001 ff57 	bl	80032d8 <servo_reset_all>
  HAL_Delay(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800142e:	f002 fe11 	bl	8004054 <HAL_Delay>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2180      	movs	r1, #128	@ 0x80
 8001436:	489b      	ldr	r0, [pc, #620]	@ (80016a4 <main+0x34c>)
 8001438:	f003 f894 	bl	8004564 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f002 fe09 	bl	8004054 <HAL_Delay>
#if (TEST == 0)
    HAL_UART_Receive(&huart1, controller_buffer, sizeof(controller_buffer), 0xFFFF);
 8001442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001446:	2229      	movs	r2, #41	@ 0x29
 8001448:	4997      	ldr	r1, [pc, #604]	@ (80016a8 <main+0x350>)
 800144a:	4898      	ldr	r0, [pc, #608]	@ (80016ac <main+0x354>)
 800144c:	f005 fc9e 	bl	8006d8c <HAL_UART_Receive>
    parse_controller_data(controller_buffer, &controller_state);
 8001450:	4997      	ldr	r1, [pc, #604]	@ (80016b0 <main+0x358>)
 8001452:	4895      	ldr	r0, [pc, #596]	@ (80016a8 <main+0x350>)
 8001454:	f7ff fdb8 	bl	8000fc8 <parse_controller_data>
    if (controller_state.options_button) {  // turn on/off the robot
 8001458:	4b95      	ldr	r3, [pc, #596]	@ (80016b0 <main+0x358>)
 800145a:	7e1b      	ldrb	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d019      	beq.n	8001494 <main+0x13c>
      turn_on = !turn_on;
 8001460:	4b94      	ldr	r3, [pc, #592]	@ (80016b4 <main+0x35c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf14      	ite	ne
 8001468:	2301      	movne	r3, #1
 800146a:	2300      	moveq	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b8e      	ldr	r3, [pc, #568]	@ (80016b4 <main+0x35c>)
 800147c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800147e:	4b8d      	ldr	r3, [pc, #564]	@ (80016b4 <main+0x35c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800148e:	4885      	ldr	r0, [pc, #532]	@ (80016a4 <main+0x34c>)
 8001490:	f003 f868 	bl	8004564 <HAL_GPIO_WritePin>
    }

    if (turn_on) {
 8001494:	4b87      	ldr	r3, [pc, #540]	@ (80016b4 <main+0x35c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0cf      	beq.n	800143c <main+0xe4>
      float rotation_vel = (controller_state.l2_pressure / 1024.0 + controller_state.r2_pressure / -1024.0) * 100.0;
 800149c:	4b84      	ldr	r3, [pc, #528]	@ (80016b0 <main+0x358>)
 800149e:	8a5b      	ldrh	r3, [r3, #18]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f867 	bl	8000574 <__aeabi_i2d>
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b83      	ldr	r3, [pc, #524]	@ (80016b8 <main+0x360>)
 80014ac:	f7ff f9f6 	bl	800089c <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4614      	mov	r4, r2
 80014b6:	461d      	mov	r5, r3
 80014b8:	4b7d      	ldr	r3, [pc, #500]	@ (80016b0 <main+0x358>)
 80014ba:	8a9b      	ldrh	r3, [r3, #20]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f859 	bl	8000574 <__aeabi_i2d>
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b7d      	ldr	r3, [pc, #500]	@ (80016bc <main+0x364>)
 80014c8:	f7ff f9e8 	bl	800089c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe ff02 	bl	80002dc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4b76      	ldr	r3, [pc, #472]	@ (80016c0 <main+0x368>)
 80014e6:	f7ff f8af 	bl	8000648 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fba1 	bl	8000c38 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	65fb      	str	r3, [r7, #92]	@ 0x5c

      if (controller_state.ps_button) {  // auto, line following
 80014fa:	4b6d      	ldr	r3, [pc, #436]	@ (80016b0 <main+0x358>)
 80014fc:	7d9b      	ldrb	r3, [r3, #22]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8103 	bne.w	800170a <main+0x3b2>
      //   else if (controller_state.r1)
      //     target_vel.z_vel = ROBOT_MAX_Z_VELOCITY * -0.5;
      //   movement_control(target_vel);
      // }

      if (controller_state.r1) {
 8001504:	4b6a      	ldr	r3, [pc, #424]	@ (80016b0 <main+0x358>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d016      	beq.n	800153a <main+0x1e2>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * 0.35};
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	653b      	str	r3, [r7, #80]	@ 0x50
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	657b      	str	r3, [r7, #84]	@ 0x54
 8001518:	4b6a      	ldr	r3, [pc, #424]	@ (80016c4 <main+0x36c>)
 800151a:	65bb      	str	r3, [r7, #88]	@ 0x58
        movement_control(target_vel);
 800151c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001520:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001524:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	f001 fc58 	bl	8002de8 <movement_control>
 8001538:	e090      	b.n	800165c <main+0x304>
      } else if (controller_state.l1) {
 800153a:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <main+0x358>)
 800153c:	78db      	ldrb	r3, [r3, #3]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d016      	beq.n	8001570 <main+0x218>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * -0.35};
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800154e:	4b5e      	ldr	r3, [pc, #376]	@ (80016c8 <main+0x370>)
 8001550:	64fb      	str	r3, [r7, #76]	@ 0x4c
        movement_control(target_vel);
 8001552:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001556:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800155a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800155e:	eeb0 0a66 	vmov.f32	s0, s13
 8001562:	eef0 0a47 	vmov.f32	s1, s14
 8001566:	eeb0 1a67 	vmov.f32	s2, s15
 800156a:	f001 fc3d 	bl	8002de8 <movement_control>
 800156e:	e075      	b.n	800165c <main+0x304>
      } else if (controller_state.up) {
 8001570:	4b4f      	ldr	r3, [pc, #316]	@ (80016b0 <main+0x358>)
 8001572:	7a9b      	ldrb	r3, [r3, #10]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d016      	beq.n	80015a6 <main+0x24e>
        BaseVelocity target_vel = {0,
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800157e:	4b53      	ldr	r3, [pc, #332]	@ (80016cc <main+0x374>)
 8001580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	643b      	str	r3, [r7, #64]	@ 0x40
                                   ROBOT_MAX_Y_VELOCITY * 0.5,
                                   0};
        movement_control(target_vel);
 8001588:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800158c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001590:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001594:	eeb0 0a66 	vmov.f32	s0, s13
 8001598:	eef0 0a47 	vmov.f32	s1, s14
 800159c:	eeb0 1a67 	vmov.f32	s2, s15
 80015a0:	f001 fc22 	bl	8002de8 <movement_control>
 80015a4:	e05a      	b.n	800165c <main+0x304>
      } else if (controller_state.down) {
 80015a6:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <main+0x358>)
 80015a8:	7adb      	ldrb	r3, [r3, #11]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d016      	beq.n	80015dc <main+0x284>
        BaseVelocity target_vel = {0,
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b4:	4b46      	ldr	r3, [pc, #280]	@ (80016d0 <main+0x378>)
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	@ 0x34
                                   ROBOT_MAX_Y_VELOCITY * -0.5,
                                   0};
        movement_control(target_vel);
 80015be:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80015c2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80015c6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015ca:	eeb0 0a66 	vmov.f32	s0, s13
 80015ce:	eef0 0a47 	vmov.f32	s1, s14
 80015d2:	eeb0 1a67 	vmov.f32	s2, s15
 80015d6:	f001 fc07 	bl	8002de8 <movement_control>
 80015da:	e03f      	b.n	800165c <main+0x304>
      } else if (controller_state.left) {
 80015dc:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <main+0x358>)
 80015de:	7b1b      	ldrb	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d016      	beq.n	8001612 <main+0x2ba>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * -0.5,
 80015e4:	4b3a      	ldr	r3, [pc, #232]	@ (80016d0 <main+0x378>)
 80015e6:	623b      	str	r3, [r7, #32]
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
                                   0,
                                   0};
        movement_control(target_vel);
 80015f4:	edd7 6a08 	vldr	s13, [r7, #32]
 80015f8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015fc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001600:	eeb0 0a66 	vmov.f32	s0, s13
 8001604:	eef0 0a47 	vmov.f32	s1, s14
 8001608:	eeb0 1a67 	vmov.f32	s2, s15
 800160c:	f001 fbec 	bl	8002de8 <movement_control>
 8001610:	e024      	b.n	800165c <main+0x304>
      } else if (controller_state.right) {
 8001612:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <main+0x358>)
 8001614:	7b5b      	ldrb	r3, [r3, #13]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d016      	beq.n	8001648 <main+0x2f0>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * 0.5,
 800161a:	4b2c      	ldr	r3, [pc, #176]	@ (80016cc <main+0x374>)
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
                                   0,
                                   0};
        movement_control(target_vel);
 800162a:	edd7 6a05 	vldr	s13, [r7, #20]
 800162e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001632:	edd7 7a07 	vldr	s15, [r7, #28]
 8001636:	eeb0 0a66 	vmov.f32	s0, s13
 800163a:	eef0 0a47 	vmov.f32	s1, s14
 800163e:	eeb0 1a67 	vmov.f32	s2, s15
 8001642:	f001 fbd1 	bl	8002de8 <movement_control>
 8001646:	e009      	b.n	800165c <main+0x304>
      } else {
        WheelPWM target_pwm = {0, 0, 0, 0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
        wheels_control(target_pwm);
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001658:	f000 fd42 	bl	80020e0 <wheels_control>
      }

      if (controller_state.triangle) {
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <main+0x358>)
 800165e:	7a1b      	ldrb	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <main+0x31e>
        catch_move_down();
 8001664:	f000 f8a8 	bl	80017b8 <catch_move_down>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800166e:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <main+0x34c>)
 8001670:	f002 ff78 	bl	8004564 <HAL_GPIO_WritePin>
 8001674:	e03a      	b.n	80016ec <main+0x394>
      } else if (controller_state.cross)
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <main+0x358>)
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d02a      	beq.n	80016d4 <main+0x37c>
        catch_move_up();
 800167e:	f000 f8c3 	bl	8001808 <catch_move_up>
 8001682:	e033      	b.n	80016ec <main+0x394>
 8001684:	200001a0 	.word	0x200001a0
 8001688:	20000154 	.word	0x20000154
 800168c:	20000108 	.word	0x20000108
 8001690:	200001ec 	.word	0x200001ec
 8001694:	20000238 	.word	0x20000238
 8001698:	20000284 	.word	0x20000284
 800169c:	48000800 	.word	0x48000800
 80016a0:	48000c00 	.word	0x48000c00
 80016a4:	48001000 	.word	0x48001000
 80016a8:	200000bc 	.word	0x200000bc
 80016ac:	20000364 	.word	0x20000364
 80016b0:	200000e8 	.word	0x200000e8
 80016b4:	20000103 	.word	0x20000103
 80016b8:	40900000 	.word	0x40900000
 80016bc:	c0900000 	.word	0xc0900000
 80016c0:	40590000 	.word	0x40590000
 80016c4:	3ff5d14e 	.word	0x3ff5d14e
 80016c8:	bff5d14e 	.word	0xbff5d14e
 80016cc:	401942c4 	.word	0x401942c4
 80016d0:	c01942c4 	.word	0xc01942c4
      else if (controller_state.share_button) {
 80016d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <main+0x3b8>)
 80016d6:	7ddb      	ldrb	r3, [r3, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <main+0x394>
        catch_reset();
 80016dc:	f000 f8bc 	bl	8001858 <catch_reset>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016e6:	480b      	ldr	r0, [pc, #44]	@ (8001714 <main+0x3bc>)
 80016e8:	f002 ff3c 	bl	8004564 <HAL_GPIO_WritePin>
      }

      if (controller_state.circle)
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <main+0x3b8>)
 80016ee:	79db      	ldrb	r3, [r3, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <main+0x3a2>
        container_move_down();
 80016f4:	f000 f8bc 	bl	8001870 <container_move_down>
 80016f8:	e6a0      	b.n	800143c <main+0xe4>
      else if (controller_state.square)
 80016fa:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <main+0x3b8>)
 80016fc:	7a5b      	ldrb	r3, [r3, #9]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f43f ae9c 	beq.w	800143c <main+0xe4>
        container_reset();
 8001704:	f000 f8e2 	bl	80018cc <container_reset>
 8001708:	e698      	b.n	800143c <main+0xe4>
        continue;
 800170a:	bf00      	nop
    HAL_Delay(1);
 800170c:	e696      	b.n	800143c <main+0xe4>
 800170e:	bf00      	nop
 8001710:	200000e8 	.word	0x200000e8
 8001714:	48001000 	.word	0x48001000

08001718 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	@ 0x50
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0318 	add.w	r3, r7, #24
 8001722:	2238      	movs	r2, #56	@ 0x38
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f006 fc2c 	bl	8007f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800173a:	2000      	movs	r0, #0
 800173c:	f002 ff2a 	bl	8004594 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001740:	2301      	movs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001748:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174e:	2303      	movs	r3, #3
 8001750:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001752:	2302      	movs	r3, #2
 8001754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001756:	2355      	movs	r3, #85	@ 0x55
 8001758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800175a:	2302      	movs	r3, #2
 800175c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800175e:	2302      	movs	r3, #2
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001762:	2302      	movs	r3, #2
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001766:	f107 0318 	add.w	r3, r7, #24
 800176a:	4618      	mov	r0, r3
 800176c:	f002 ffc6 	bl	80046fc <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x62>
    Error_Handler();
 8001776:	f000 f818 	bl	80017aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800177a:	230f      	movs	r3, #15
 800177c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2303      	movs	r3, #3
 8001780:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2104      	movs	r1, #4
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fac4 	bl	8004d20 <HAL_RCC_ClockConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x8a>
    Error_Handler();
 800179e:	f000 f804 	bl	80017aa <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3750      	adds	r7, #80	@ 0x50
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ae:	b672      	cpsid	i
}
 80017b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80017b2:	bf00      	nop
 80017b4:	e7fd      	b.n	80017b2 <Error_Handler+0x8>
	...

080017b8 <catch_move_down>:
#include "mech.h"

Direction_Encoder direction_encoder = FRONT_BACK;

void catch_move_down(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), SERVO_ID5_MAX_POS, SHORTEST_TIME_ROTATE(5, 90));
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <catch_move_down+0x44>)
 80017be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80017c2:	3b5a      	subs	r3, #90	@ 0x5a
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bfb8      	it	lt
 80017c8:	425b      	neglt	r3, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fed2 	bl	8000574 <__aeabi_i2d>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <catch_move_down+0x48>)
 80017d6:	f7fe ff37 	bl	8000648 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fa09 	bl	8000bf8 <__aeabi_d2uiz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	f240 317a 	movw	r1, #890	@ 0x37a
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <catch_move_down+0x4c>)
 80017f2:	f001 fb95 	bl	8002f20 <servo_move>
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000
 8001800:	40080000 	.word	0x40080000
 8001804:	20000018 	.word	0x20000018

08001808 <catch_move_up>:

void catch_move_up(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), SERVO_ID5_MIN_POS, SHORTEST_TIME_ROTATE(5, 100));
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <catch_move_up+0x44>)
 800180e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001812:	3b64      	subs	r3, #100	@ 0x64
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfb8      	it	lt
 8001818:	425b      	neglt	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe feaa 	bl	8000574 <__aeabi_i2d>
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <catch_move_up+0x48>)
 8001826:	f7fe ff0f 	bl	8000648 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f9e1 	bl	8000bf8 <__aeabi_d2uiz>
 8001836:	4603      	mov	r3, r0
 8001838:	b29b      	uxth	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	f240 119f 	movw	r1, #415	@ 0x19f
 8001840:	4804      	ldr	r0, [pc, #16]	@ (8001854 <catch_move_up+0x4c>)
 8001842:	f001 fb6d 	bl	8002f20 <servo_move>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000
 8001850:	40080000 	.word	0x40080000
 8001854:	20000018 	.word	0x20000018

08001858 <catch_reset>:

void catch_reset(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), INITIAL_POS, 180);
 800185c:	22b4      	movs	r2, #180	@ 0xb4
 800185e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001862:	4802      	ldr	r0, [pc, #8]	@ (800186c <catch_reset+0x14>)
 8001864:	f001 fb5c 	bl	8002f20 <servo_move>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000018 	.word	0x20000018

08001870 <container_move_down>:

void container_move_down(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  if (servos[4].current_pos != SERVO_ID5_MIN_POS)
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <container_move_down+0x50>)
 8001876:	8b5b      	ldrh	r3, [r3, #26]
 8001878:	f240 129f 	movw	r2, #415	@ 0x19f
 800187c:	4293      	cmp	r3, r2
 800187e:	d01c      	beq.n	80018ba <container_move_down+0x4a>
    servo_move(&(servos[5]), SERVO_ID6_MIN_POS, SHORTEST_TIME_ROTATE(6, 30));
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <container_move_down+0x50>)
 8001882:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001886:	3b1e      	subs	r3, #30
 8001888:	2b00      	cmp	r3, #0
 800188a:	bfb8      	it	lt
 800188c:	425b      	neglt	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe70 	bl	8000574 <__aeabi_i2d>
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <container_move_down+0x54>)
 800189a:	f7fe fed5 	bl	8000648 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f9a7 	bl	8000bf8 <__aeabi_d2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <container_move_down+0x58>)
 80018b6:	f001 fb33 	bl	8002f20 <servo_move>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000
 80018c4:	40080000 	.word	0x40080000
 80018c8:	2000001e 	.word	0x2000001e

080018cc <container_reset>:

void container_reset(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  if (servos[4].current_pos != SERVO_ID5_MIN_POS)
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <container_reset+0x50>)
 80018d2:	8b5b      	ldrh	r3, [r3, #26]
 80018d4:	f240 129f 	movw	r2, #415	@ 0x19f
 80018d8:	4293      	cmp	r3, r2
 80018da:	d01c      	beq.n	8001916 <container_reset+0x4a>
    servo_move(&(servos[5]), INITIAL_POS, SHORTEST_TIME_ROTATE(6, 30));
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <container_reset+0x50>)
 80018de:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80018e2:	3b1e      	subs	r3, #30
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bfb8      	it	lt
 80018e8:	425b      	neglt	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe42 	bl	8000574 <__aeabi_i2d>
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <container_reset+0x54>)
 80018f6:	f7fe fea7 	bl	8000648 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f979 	bl	8000bf8 <__aeabi_d2uiz>
 8001906:	4603      	mov	r3, r0
 8001908:	b29b      	uxth	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001910:	4804      	ldr	r0, [pc, #16]	@ (8001924 <container_reset+0x58>)
 8001912:	f001 fb05 	bl	8002f20 <servo_move>
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000
 8001920:	40080000 	.word	0x40080000
 8001924:	2000001e 	.word	0x2000001e

08001928 <base2wheel>:
#include "movement.h"

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b094      	sub	sp, #80	@ 0x50
 800192c:	af00      	add	r7, sp, #0
 800192e:	eef0 6a40 	vmov.f32	s13, s0
 8001932:	eeb0 7a60 	vmov.f32	s14, s1
 8001936:	eef0 7a41 	vmov.f32	s15, s2
 800193a:	edc7 6a05 	vstr	s13, [r7, #20]
 800193e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001942:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = 0, front_right = 0, rear_left = 0, rear_right = 0;
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	@ 0x44
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (base_vel.z_vel == 0) {
 800195e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001962:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	f040 809d 	bne.w	8001aa8 <base2wheel+0x180>
    front_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 800196e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001972:	edd7 7a05 	vldr	s15, [r7, #20]
 8001976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197a:	edd7 6a06 	vldr	s13, [r7, #24]
 800197e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198a:	ee17 0a90 	vmov	r0, s15
 800198e:	f7fe fe03 	bl	8000598 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	ec43 2b10 	vmov	d0, r2, r3
 800199a:	f007 fb47 	bl	800902c <sqrt>
 800199e:	ec51 0b10 	vmov	r0, r1, d0
 80019a2:	a38b      	add	r3, pc, #556	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe ff78 	bl	800089c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f940 	bl	8000c38 <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 80019bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c8:	edd7 6a06 	vldr	s13, [r7, #24]
 80019cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	ee17 0a90 	vmov	r0, s15
 80019dc:	f7fe fddc 	bl	8000598 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ec43 2b10 	vmov	d0, r2, r3
 80019e8:	f007 fb20 	bl	800902c <sqrt>
 80019ec:	ec51 0b10 	vmov	r0, r1, d0
 80019f0:	a377      	add	r3, pc, #476	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe ff51 	bl	800089c <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f919 	bl	8000c38 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001a0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a26:	ee17 0a90 	vmov	r0, s15
 8001a2a:	f7fe fdb5 	bl	8000598 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	ec43 2b10 	vmov	d0, r2, r3
 8001a36:	f007 faf9 	bl	800902c <sqrt>
 8001a3a:	ec51 0b10 	vmov	r0, r1, d0
 8001a3e:	a364      	add	r3, pc, #400	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe ff2a 	bl	800089c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f8f2 	bl	8000c38 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001a58:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a68:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	ee17 0a90 	vmov	r0, s15
 8001a78:	f7fe fd8e 	bl	8000598 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	ec43 2b10 	vmov	d0, r2, r3
 8001a84:	f007 fad2 	bl	800902c <sqrt>
 8001a88:	ec51 0b10 	vmov	r0, r1, d0
 8001a8c:	a350      	add	r3, pc, #320	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe ff03 	bl	800089c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f8cb 	bl	8000c38 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001aa6:	e04d      	b.n	8001b44 <base2wheel+0x21c>
  } else {
    front_left = base_vel.z_vel / RADIUS_WHEEL;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd74 	bl	8000598 <__aeabi_f2d>
 8001ab0:	a347      	add	r3, pc, #284	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fef1 	bl	800089c <__aeabi_ddiv>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f8b9 	bl	8000c38 <__aeabi_d2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = -base_vel.z_vel / RADIUS_WHEEL;
 8001aca:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ace:	eef1 7a67 	vneg.f32	s15, s15
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd5e 	bl	8000598 <__aeabi_f2d>
 8001adc:	a33c      	add	r3, pc, #240	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fedb 	bl	800089c <__aeabi_ddiv>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff f8a3 	bl	8000c38 <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = base_vel.z_vel / RADIUS_WHEEL;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd4d 	bl	8000598 <__aeabi_f2d>
 8001afe:	a334      	add	r3, pc, #208	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe feca 	bl	800089c <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f892 	bl	8000c38 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = -base_vel.z_vel / RADIUS_WHEEL;
 8001b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b1c:	eef1 7a67 	vneg.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd37 	bl	8000598 <__aeabi_f2d>
 8001b2a:	a329      	add	r3, pc, #164	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe feb4 	bl	800089c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f87c 	bl	8000c38 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  if (base_vel.x_vel < 0 || base_vel.y_vel < 0) {
 8001b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	d406      	bmi.n	8001b60 <base2wheel+0x238>
 8001b52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	d517      	bpl.n	8001b90 <base2wheel+0x268>
    front_left = -front_left;
 8001b60:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001b64:	eef1 7a67 	vneg.f32	s15, s15
 8001b68:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    front_right = -front_right;
 8001b6c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b70:	eef1 7a67 	vneg.f32	s15, s15
 8001b74:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    rear_left = -rear_left;
 8001b78:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b7c:	eef1 7a67 	vneg.f32	s15, s15
 8001b80:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    rear_right = -rear_right;
 8001b84:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b88:	eef1 7a67 	vneg.f32	s15, s15
 8001b8c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  }
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8001b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b92:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ba2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ba8:	ee06 0a10 	vmov	s12, r0
 8001bac:	ee06 1a90 	vmov	s13, r1
 8001bb0:	ee07 2a10 	vmov	s14, r2
 8001bb4:	ee07 3a90 	vmov	s15, r3
}
 8001bb8:	eeb0 0a46 	vmov.f32	s0, s12
 8001bbc:	eef0 0a66 	vmov.f32	s1, s13
 8001bc0:	eeb0 1a47 	vmov.f32	s2, s14
 8001bc4:	eef0 1a67 	vmov.f32	s3, s15
 8001bc8:	3750      	adds	r7, #80	@ 0x50
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	020c49ba 	.word	0x020c49ba
 8001bd4:	3f96872b 	.word	0x3f96872b

08001bd8 <wheel2pwm>:
  // float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  // float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  // return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b08e      	sub	sp, #56	@ 0x38
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6178      	str	r0, [r7, #20]
 8001be0:	eeb0 6a40 	vmov.f32	s12, s0
 8001be4:	eef0 6a60 	vmov.f32	s13, s1
 8001be8:	eeb0 7a41 	vmov.f32	s14, s2
 8001bec:	eef0 7a61 	vmov.f32	s15, s3
 8001bf0:	ed87 6a01 	vstr	s12, [r7, #4]
 8001bf4:	edc7 6a02 	vstr	s13, [r7, #8]
 8001bf8:	ed87 7a03 	vstr	s14, [r7, #12]
 8001bfc:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcc8 	bl	8000598 <__aeabi_f2d>
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b92      	ldr	r3, [pc, #584]	@ (8001e58 <wheel2pwm+0x280>)
 8001c0e:	f7fe fd1b 	bl	8000648 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	a38b      	add	r3, pc, #556	@ (adr r3, 8001e48 <wheel2pwm+0x270>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fe3c 	bl	800089c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	a388      	add	r3, pc, #544	@ (adr r3, 8001e50 <wheel2pwm+0x278>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fe33 	bl	800089c <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b86      	ldr	r3, [pc, #536]	@ (8001e5c <wheel2pwm+0x284>)
 8001c44:	f7fe fd00 	bl	8000648 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	461d      	mov	r5, r3
 8001c50:	4b83      	ldr	r3, [pc, #524]	@ (8001e60 <wheel2pwm+0x288>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc7d 	bl	8000554 <__aeabi_ui2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4629      	mov	r1, r5
 8001c62:	f7fe fcf1 	bl	8000648 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b7a      	ldr	r3, [pc, #488]	@ (8001e5c <wheel2pwm+0x284>)
 8001c74:	f7fe fe12 	bl	800089c <__aeabi_ddiv>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7fe ff92 	bl	8000ba8 <__aeabi_d2iz>
 8001c84:	4603      	mov	r3, r0
 8001c86:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc84 	bl	8000598 <__aeabi_f2d>
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b70      	ldr	r3, [pc, #448]	@ (8001e58 <wheel2pwm+0x280>)
 8001c96:	f7fe fcd7 	bl	8000648 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	a369      	add	r3, pc, #420	@ (adr r3, 8001e48 <wheel2pwm+0x270>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fdf8 	bl	800089c <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	a366      	add	r3, pc, #408	@ (adr r3, 8001e50 <wheel2pwm+0x278>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fdef 	bl	800089c <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	4b64      	ldr	r3, [pc, #400]	@ (8001e5c <wheel2pwm+0x284>)
 8001ccc:	f7fe fcbc 	bl	8000648 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	461d      	mov	r5, r3
 8001cd8:	4b61      	ldr	r3, [pc, #388]	@ (8001e60 <wheel2pwm+0x288>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc39 	bl	8000554 <__aeabi_ui2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe fcad 	bl	8000648 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b58      	ldr	r3, [pc, #352]	@ (8001e5c <wheel2pwm+0x284>)
 8001cfc:	f7fe fdce 	bl	800089c <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff4e 	bl	8000ba8 <__aeabi_d2iz>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc40 	bl	8000598 <__aeabi_f2d>
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <wheel2pwm+0x280>)
 8001d1e:	f7fe fc93 	bl	8000648 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	a347      	add	r3, pc, #284	@ (adr r3, 8001e48 <wheel2pwm+0x270>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fdb4 	bl	800089c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	a344      	add	r3, pc, #272	@ (adr r3, 8001e50 <wheel2pwm+0x278>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fdab 	bl	800089c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b42      	ldr	r3, [pc, #264]	@ (8001e5c <wheel2pwm+0x284>)
 8001d54:	f7fe fc78 	bl	8000648 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbf4 	bl	8000554 <__aeabi_ui2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	f7fe fc68 	bl	8000648 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <wheel2pwm+0x284>)
 8001d86:	f7fe fd89 	bl	800089c <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe ff09 	bl	8000ba8 <__aeabi_d2iz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbfb 	bl	8000598 <__aeabi_f2d>
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e58 <wheel2pwm+0x280>)
 8001da8:	f7fe fc4e 	bl	8000648 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	a324      	add	r3, pc, #144	@ (adr r3, 8001e48 <wheel2pwm+0x270>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fd6f 	bl	800089c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	a322      	add	r3, pc, #136	@ (adr r3, 8001e50 <wheel2pwm+0x278>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fd66 	bl	800089c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <wheel2pwm+0x284>)
 8001dde:	f7fe fc33 	bl	8000648 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4614      	mov	r4, r2
 8001de8:	461d      	mov	r5, r3
 8001dea:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <wheel2pwm+0x288>)
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbb0 	bl	8000554 <__aeabi_ui2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4620      	mov	r0, r4
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	f7fe fc24 	bl	8000648 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <wheel2pwm+0x284>)
 8001e0e:	f7fe fd45 	bl	800089c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe fec5 	bl	8000ba8 <__aeabi_d2iz>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e38:	60da      	str	r2, [r3, #12]
}
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	3738      	adds	r7, #56	@ 0x38
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bdb0      	pop	{r4, r5, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	f3af 8000 	nop.w
 8001e48:	54442d18 	.word	0x54442d18
 8001e4c:	401921fb 	.word	0x401921fb
 8001e50:	980a206e 	.word	0x980a206e
 8001e54:	40a733a9 	.word	0x40a733a9
 8001e58:	404e0000 	.word	0x404e0000
 8001e5c:	40590000 	.word	0x40590000
 8001e60:	40000400 	.word	0x40000400

08001e64 <wheel_control>:

void wheel_control(Wheel wheel, int speed) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8001e76:	4293      	cmp	r3, r2
 8001e78:	dd03      	ble.n	8001e82 <wheel_control+0x1e>
    speed = 16800;
 8001e7a:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	e005      	b.n	8001e8e <wheel_control+0x2a>
  else if (speed < -16800)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4a94      	ldr	r2, [pc, #592]	@ (80020d8 <wheel_control+0x274>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	da01      	bge.n	8001e8e <wheel_control+0x2a>
    speed = -16800;
 8001e8a:	4b93      	ldr	r3, [pc, #588]	@ (80020d8 <wheel_control+0x274>)
 8001e8c:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	f200 80e8 	bhi.w	8002066 <wheel_control+0x202>
 8001e96:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <wheel_control+0x38>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001f15 	.word	0x08001f15
 8001ea4:	08001f89 	.word	0x08001f89
 8001ea8:	08001ff3 	.word	0x08001ff3
    case FRONT_LEFT:
      if (speed > 0) {
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	dd0c      	ble.n	8001ecc <wheel_control+0x68>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eba:	f002 fb53 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec6:	f002 fb4d 	bl	8004564 <HAL_GPIO_WritePin>
 8001eca:	e01b      	b.n	8001f04 <wheel_control+0xa0>
      } else if (speed < 0) {
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da0c      	bge.n	8001eec <wheel_control+0x88>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eda:	f002 fb43 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee6:	f002 fb3d 	bl	8004564 <HAL_GPIO_WritePin>
 8001eea:	e00b      	b.n	8001f04 <wheel_control+0xa0>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2120      	movs	r1, #32
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f002 fb36 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2110      	movs	r1, #16
 8001efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f00:	f002 fb30 	bl	8004564 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f0a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f0e:	4b73      	ldr	r3, [pc, #460]	@ (80020dc <wheel_control+0x278>)
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8001f12:	e0dc      	b.n	80020ce <wheel_control+0x26a>
    case FRONT_RIGHT:
      if (speed < 0) {
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0e      	bge.n	8001f38 <wheel_control+0xd4>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f24:	f002 fb1e 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f32:	f002 fb17 	bl	8004564 <HAL_GPIO_WritePin>
 8001f36:	e01f      	b.n	8001f78 <wheel_control+0x114>
      } else if (speed > 0) {
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	dd0e      	ble.n	8001f5c <wheel_control+0xf8>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_SET);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f48:	f002 fb0c 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f56:	f002 fb05 	bl	8004564 <HAL_GPIO_WritePin>
 8001f5a:	e00d      	b.n	8001f78 <wheel_control+0x114>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f66:	f002 fafd 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f74:	f002 faf6 	bl	8004564 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f7e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f82:	4b56      	ldr	r3, [pc, #344]	@ (80020dc <wheel_control+0x278>)
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001f86:	e0a2      	b.n	80020ce <wheel_control+0x26a>
    case REAR_LEFT:
      if (speed > 0) {
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	dd0c      	ble.n	8001fa8 <wheel_control+0x144>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2140      	movs	r1, #64	@ 0x40
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f96:	f002 fae5 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa2:	f002 fadf 	bl	8004564 <HAL_GPIO_WritePin>
 8001fa6:	e01b      	b.n	8001fe0 <wheel_control+0x17c>
      } else if (speed < 0) {
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0c      	bge.n	8001fc8 <wheel_control+0x164>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2140      	movs	r1, #64	@ 0x40
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb6:	f002 fad5 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc2:	f002 facf 	bl	8004564 <HAL_GPIO_WritePin>
 8001fc6:	e00b      	b.n	8001fe0 <wheel_control+0x17c>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2140      	movs	r1, #64	@ 0x40
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd0:	f002 fac8 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fdc:	f002 fac2 	bl	8004564 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001fe6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001fea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8001ff0:	e06d      	b.n	80020ce <wheel_control+0x26a>
    case REAR_RIGHT:
      if (speed < 0) {
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da0e      	bge.n	8002016 <wheel_control+0x1b2>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002002:	f002 faaf 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800200c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002010:	f002 faa8 	bl	8004564 <HAL_GPIO_WritePin>
 8002014:	e01f      	b.n	8002056 <wheel_control+0x1f2>
      } else if (speed > 0) {
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	dd0e      	ble.n	800203a <wheel_control+0x1d6>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002026:	f002 fa9d 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002034:	f002 fa96 	bl	8004564 <HAL_GPIO_WritePin>
 8002038:	e00d      	b.n	8002056 <wheel_control+0x1f2>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002044:	f002 fa8e 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800204e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002052:	f002 fa87 	bl	8004564 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800205c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002060:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <wheel_control+0x278>)
 8002062:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8002064:	e033      	b.n	80020ce <wheel_control+0x26a>
    default:
      if (speed > 0) {
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	dd0c      	ble.n	8002086 <wheel_control+0x222>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	2120      	movs	r1, #32
 8002070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002074:	f002 fa76 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2110      	movs	r1, #16
 800207c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002080:	f002 fa70 	bl	8004564 <HAL_GPIO_WritePin>
 8002084:	e01b      	b.n	80020be <wheel_control+0x25a>
      } else if (speed < 0) {
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0c      	bge.n	80020a6 <wheel_control+0x242>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	2120      	movs	r1, #32
 8002090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002094:	f002 fa66 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	2110      	movs	r1, #16
 800209c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a0:	f002 fa60 	bl	8004564 <HAL_GPIO_WritePin>
 80020a4:	e00b      	b.n	80020be <wheel_control+0x25a>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2120      	movs	r1, #32
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ae:	f002 fa59 	bl	8004564 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2110      	movs	r1, #16
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ba:	f002 fa53 	bl	8004564 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80020c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <wheel_control+0x278>)
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80020cc:	bf00      	nop
  }
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	ffffbe60 	.word	0xffffbe60
 80020dc:	40000400 	.word	0x40000400

080020e0 <wheels_control>:

void wheels_control(WheelPWM pwm) {
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	463c      	mov	r4, r7
 80020e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff feb7 	bl	8001e64 <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7ff feb2 	bl	8001e64 <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4619      	mov	r1, r3
 8002104:	2002      	movs	r0, #2
 8002106:	f7ff fead 	bl	8001e64 <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4619      	mov	r1, r3
 800210e:	2003      	movs	r0, #3
 8002110:	f7ff fea8 	bl	8001e64 <wheel_control>
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bd90      	pop	{r4, r7, pc}
 800211c:	0000      	movs	r0, r0
	...

08002120 <rotate_motor>:

void rotate_motor(BaseVelocity base_vel) {
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	eef0 6a40 	vmov.f32	s13, s0
 800212a:	eeb0 7a60 	vmov.f32	s14, s1
 800212e:	eef0 7a41 	vmov.f32	s15, s2
 8002132:	edc7 6a01 	vstr	s13, [r7, #4]
 8002136:	ed87 7a02 	vstr	s14, [r7, #8]
 800213a:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 800213e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	d075      	beq.n	8002238 <rotate_motor+0x118>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(1, 45));
 800214c:	4bd6      	ldr	r3, [pc, #856]	@ (80024a8 <rotate_motor+0x388>)
 800214e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002152:	3b2d      	subs	r3, #45	@ 0x2d
 8002154:	2b00      	cmp	r3, #0
 8002156:	bfb8      	it	lt
 8002158:	425b      	neglt	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa0a 	bl	8000574 <__aeabi_i2d>
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	4bd1      	ldr	r3, [pc, #836]	@ (80024ac <rotate_motor+0x38c>)
 8002166:	f7fe fa6f 	bl	8000648 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fd41 	bl	8000bf8 <__aeabi_d2uiz>
 8002176:	4603      	mov	r3, r0
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 8002180:	48c9      	ldr	r0, [pc, #804]	@ (80024a8 <rotate_motor+0x388>)
 8002182:	f000 fecd 	bl	8002f20 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(2, -45));
 8002186:	4bc8      	ldr	r3, [pc, #800]	@ (80024a8 <rotate_motor+0x388>)
 8002188:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800218c:	332d      	adds	r3, #45	@ 0x2d
 800218e:	2b00      	cmp	r3, #0
 8002190:	bfb8      	it	lt
 8002192:	425b      	neglt	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9ed 	bl	8000574 <__aeabi_i2d>
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4bc3      	ldr	r3, [pc, #780]	@ (80024ac <rotate_motor+0x38c>)
 80021a0:	f7fe fa52 	bl	8000648 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fd24 	bl	8000bf8 <__aeabi_d2uiz>
 80021b0:	4603      	mov	r3, r0
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	f240 1131 	movw	r1, #305	@ 0x131
 80021ba:	48bd      	ldr	r0, [pc, #756]	@ (80024b0 <rotate_motor+0x390>)
 80021bc:	f000 feb0 	bl	8002f20 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(3, 45));
 80021c0:	4bb9      	ldr	r3, [pc, #740]	@ (80024a8 <rotate_motor+0x388>)
 80021c2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021c6:	3b2d      	subs	r3, #45	@ 0x2d
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bfb8      	it	lt
 80021cc:	425b      	neglt	r3, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9d0 	bl	8000574 <__aeabi_i2d>
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	4bb4      	ldr	r3, [pc, #720]	@ (80024ac <rotate_motor+0x38c>)
 80021da:	f7fe fa35 	bl	8000648 <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fd07 	bl	8000bf8 <__aeabi_d2uiz>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	f240 21b2 	movw	r1, #690	@ 0x2b2
 80021f4:	48af      	ldr	r0, [pc, #700]	@ (80024b4 <rotate_motor+0x394>)
 80021f6:	f000 fe93 	bl	8002f20 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(4, -45));
 80021fa:	4bab      	ldr	r3, [pc, #684]	@ (80024a8 <rotate_motor+0x388>)
 80021fc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002200:	332d      	adds	r3, #45	@ 0x2d
 8002202:	2b00      	cmp	r3, #0
 8002204:	bfb8      	it	lt
 8002206:	425b      	neglt	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f9b3 	bl	8000574 <__aeabi_i2d>
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	4ba6      	ldr	r3, [pc, #664]	@ (80024ac <rotate_motor+0x38c>)
 8002214:	f7fe fa18 	bl	8000648 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f7fe fcea 	bl	8000bf8 <__aeabi_d2uiz>
 8002224:	4603      	mov	r3, r0
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	f240 113b 	movw	r1, #315	@ 0x13b
 800222e:	48a2      	ldr	r0, [pc, #648]	@ (80024b8 <rotate_motor+0x398>)
 8002230:	f000 fe76 	bl	8002f20 <servo_move>
    return;
 8002234:	f000 bdba 	b.w	8002dac <rotate_motor+0xc8c>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f9ac 	bl	8000598 <__aeabi_f2d>
 8002240:	4604      	mov	r4, r0
 8002242:	460d      	mov	r5, r1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f9a6 	bl	8000598 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	ec43 2b11 	vmov	d1, r2, r3
 8002254:	ec45 4b10 	vmov	d0, r4, r5
 8002258:	f006 fe1e 	bl	8008e98 <atan2>
 800225c:	ec51 0b10 	vmov	r0, r1, d0
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	4b95      	ldr	r3, [pc, #596]	@ (80024bc <rotate_motor+0x39c>)
 8002266:	f7fe f9ef 	bl	8000648 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	a38b      	add	r3, pc, #556	@ (adr r3, 80024a0 <rotate_motor+0x380>)
 8002274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002278:	f7fe fb10 	bl	800089c <__aeabi_ddiv>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fcd8 	bl	8000c38 <__aeabi_d2f>
 8002288:	4603      	mov	r3, r0
 800228a:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 800228c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002290:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002298:	d17c      	bne.n	8002394 <rotate_motor+0x274>
 800229a:	edd7 7a02 	vldr	s15, [r7, #8]
 800229e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a6:	d075      	beq.n	8002394 <rotate_motor+0x274>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(1, 90));
 80022a8:	4b7f      	ldr	r3, [pc, #508]	@ (80024a8 <rotate_motor+0x388>)
 80022aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022ae:	3b5a      	subs	r3, #90	@ 0x5a
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bfb8      	it	lt
 80022b4:	425b      	neglt	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f95c 	bl	8000574 <__aeabi_i2d>
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	4b7a      	ldr	r3, [pc, #488]	@ (80024ac <rotate_motor+0x38c>)
 80022c2:	f7fe f9c1 	bl	8000648 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f7fe fc93 	bl	8000bf8 <__aeabi_d2uiz>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80022dc:	4872      	ldr	r0, [pc, #456]	@ (80024a8 <rotate_motor+0x388>)
 80022de:	f000 fe1f 	bl	8002f20 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(2, 90));
 80022e2:	4b71      	ldr	r3, [pc, #452]	@ (80024a8 <rotate_motor+0x388>)
 80022e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022e8:	3b5a      	subs	r3, #90	@ 0x5a
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bfb8      	it	lt
 80022ee:	425b      	neglt	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f93f 	bl	8000574 <__aeabi_i2d>
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4b6c      	ldr	r3, [pc, #432]	@ (80024ac <rotate_motor+0x38c>)
 80022fc:	f7fe f9a4 	bl	8000648 <__aeabi_dmul>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc76 	bl	8000bf8 <__aeabi_d2uiz>
 800230c:	4603      	mov	r3, r0
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002316:	4866      	ldr	r0, [pc, #408]	@ (80024b0 <rotate_motor+0x390>)
 8002318:	f000 fe02 	bl	8002f20 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(3, 90));
 800231c:	4b62      	ldr	r3, [pc, #392]	@ (80024a8 <rotate_motor+0x388>)
 800231e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002322:	3b5a      	subs	r3, #90	@ 0x5a
 8002324:	2b00      	cmp	r3, #0
 8002326:	bfb8      	it	lt
 8002328:	425b      	neglt	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f922 	bl	8000574 <__aeabi_i2d>
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	4b5d      	ldr	r3, [pc, #372]	@ (80024ac <rotate_motor+0x38c>)
 8002336:	f7fe f987 	bl	8000648 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fc59 	bl	8000bf8 <__aeabi_d2uiz>
 8002346:	4603      	mov	r3, r0
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002350:	4859      	ldr	r0, [pc, #356]	@ (80024b8 <rotate_motor+0x398>)
 8002352:	f000 fde5 	bl	8002f20 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(4, 90));
 8002356:	4b54      	ldr	r3, [pc, #336]	@ (80024a8 <rotate_motor+0x388>)
 8002358:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800235c:	3b5a      	subs	r3, #90	@ 0x5a
 800235e:	2b00      	cmp	r3, #0
 8002360:	bfb8      	it	lt
 8002362:	425b      	neglt	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f905 	bl	8000574 <__aeabi_i2d>
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	4b4f      	ldr	r3, [pc, #316]	@ (80024ac <rotate_motor+0x38c>)
 8002370:	f7fe f96a 	bl	8000648 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fc3c 	bl	8000bf8 <__aeabi_d2uiz>
 8002380:	4603      	mov	r3, r0
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800238a:	484a      	ldr	r0, [pc, #296]	@ (80024b4 <rotate_motor+0x394>)
 800238c:	f000 fdc8 	bl	8002f20 <servo_move>
 8002390:	f000 bd0c 	b.w	8002dac <rotate_motor+0xc8c>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 8002394:	edd7 7a01 	vldr	s15, [r7, #4]
 8002398:	eef5 7a40 	vcmp.f32	s15, #0.0
 800239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a0:	f000 8092 	beq.w	80024c8 <rotate_motor+0x3a8>
 80023a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b0:	f040 808a 	bne.w	80024c8 <rotate_motor+0x3a8>
    servo_move(&(servos[0]), SERVO_ID1_MAX_POS, SHORTEST_TIME_ROTATE(1, 90));
 80023b4:	4b3c      	ldr	r3, [pc, #240]	@ (80024a8 <rotate_motor+0x388>)
 80023b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023ba:	3b5a      	subs	r3, #90	@ 0x5a
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bfb8      	it	lt
 80023c0:	425b      	neglt	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f8d6 	bl	8000574 <__aeabi_i2d>
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	4b37      	ldr	r3, [pc, #220]	@ (80024ac <rotate_motor+0x38c>)
 80023ce:	f7fe f93b 	bl	8000648 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fc0d 	bl	8000bf8 <__aeabi_d2uiz>
 80023de:	4603      	mov	r3, r0
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 80023e8:	482f      	ldr	r0, [pc, #188]	@ (80024a8 <rotate_motor+0x388>)
 80023ea:	f000 fd99 	bl	8002f20 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(2, 90));
 80023ee:	4b2e      	ldr	r3, [pc, #184]	@ (80024a8 <rotate_motor+0x388>)
 80023f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80023f4:	3b5a      	subs	r3, #90	@ 0x5a
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bfb8      	it	lt
 80023fa:	425b      	neglt	r3, r3
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f8b9 	bl	8000574 <__aeabi_i2d>
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b29      	ldr	r3, [pc, #164]	@ (80024ac <rotate_motor+0x38c>)
 8002408:	f7fe f91e 	bl	8000648 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fbf0 	bl	8000bf8 <__aeabi_d2uiz>
 8002418:	4603      	mov	r3, r0
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 8002422:	4823      	ldr	r0, [pc, #140]	@ (80024b0 <rotate_motor+0x390>)
 8002424:	f000 fd7c 	bl	8002f20 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MAX_POS, SHORTEST_TIME_ROTATE(3, 90));
 8002428:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <rotate_motor+0x388>)
 800242a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800242e:	3b5a      	subs	r3, #90	@ 0x5a
 8002430:	2b00      	cmp	r3, #0
 8002432:	bfb8      	it	lt
 8002434:	425b      	neglt	r3, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f89c 	bl	8000574 <__aeabi_i2d>
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <rotate_motor+0x38c>)
 8002442:	f7fe f901 	bl	8000648 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	f7fe fbd3 	bl	8000bf8 <__aeabi_d2uiz>
 8002452:	4603      	mov	r3, r0
 8002454:	b29b      	uxth	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	f240 316b 	movw	r1, #875	@ 0x36b
 800245c:	4816      	ldr	r0, [pc, #88]	@ (80024b8 <rotate_motor+0x398>)
 800245e:	f000 fd5f 	bl	8002f20 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(4, 90));
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <rotate_motor+0x388>)
 8002464:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002468:	3b5a      	subs	r3, #90	@ 0x5a
 800246a:	2b00      	cmp	r3, #0
 800246c:	bfb8      	it	lt
 800246e:	425b      	neglt	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f87f 	bl	8000574 <__aeabi_i2d>
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <rotate_motor+0x38c>)
 800247c:	f7fe f8e4 	bl	8000648 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fbb6 	bl	8000bf8 <__aeabi_d2uiz>
 800248c:	4603      	mov	r3, r0
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8002496:	4807      	ldr	r0, [pc, #28]	@ (80024b4 <rotate_motor+0x394>)
 8002498:	f000 fd42 	bl	8002f20 <servo_move>
 800249c:	f000 bc86 	b.w	8002dac <rotate_motor+0xc8c>
 80024a0:	54442d18 	.word	0x54442d18
 80024a4:	400921fb 	.word	0x400921fb
 80024a8:	20000000 	.word	0x20000000
 80024ac:	40080000 	.word	0x40080000
 80024b0:	20000006 	.word	0x20000006
 80024b4:	20000012 	.word	0x20000012
 80024b8:	2000000c 	.word	0x2000000c
 80024bc:	40668000 	.word	0x40668000
 80024c0:	43340000 	.word	0x43340000
 80024c4:	42b40000 	.word	0x42b40000
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {    // quadrant 2 or 4
 80024c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	d506      	bpl.n	80024e4 <rotate_motor+0x3c4>
 80024d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e2:	dc0f      	bgt.n	8002504 <rotate_motor+0x3e4>
 80024e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	f340 822b 	ble.w	800294a <rotate_motor+0x82a>
 80024f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002500:	f140 8223 	bpl.w	800294a <rotate_motor+0x82a>
    if (angle < 0)
 8002504:	edd7 7a05 	vldr	s15, [r7, #20]
 8002508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	d507      	bpl.n	8002522 <rotate_motor+0x402>
      angle += 180;
 8002512:	edd7 7a05 	vldr	s15, [r7, #20]
 8002516:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80024c0 <rotate_motor+0x3a0>
 800251a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800251e:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 8002522:	edd7 7a05 	vldr	s15, [r7, #20]
 8002526:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80024c4 <rotate_motor+0x3a4>
 800252a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800252e:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 8002532:	edd7 7a05 	vldr	s15, [r7, #20]
 8002536:	eef1 7a67 	vneg.f32	s15, s15
 800253a:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 800253e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	dd22      	ble.n	8002592 <rotate_motor+0x472>
 800254c:	6978      	ldr	r0, [r7, #20]
 800254e:	f7fe f823 	bl	8000598 <__aeabi_f2d>
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4bcc      	ldr	r3, [pc, #816]	@ (8002888 <rotate_motor+0x768>)
 8002558:	f7fe f9a0 	bl	800089c <__aeabi_ddiv>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	4bc8      	ldr	r3, [pc, #800]	@ (800288c <rotate_motor+0x76c>)
 800256a:	f7fe f86d 	bl	8000648 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	4bc5      	ldr	r3, [pc, #788]	@ (8002890 <rotate_motor+0x770>)
 800257c:	f7fd feae 	bl	80002dc <__adddf3>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe fb36 	bl	8000bf8 <__aeabi_d2uiz>
 800258c:	4603      	mov	r3, r0
 800258e:	b29c      	uxth	r4, r3
 8002590:	e021      	b.n	80025d6 <rotate_motor+0x4b6>
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7fe f800 	bl	8000598 <__aeabi_f2d>
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4bba      	ldr	r3, [pc, #744]	@ (8002888 <rotate_motor+0x768>)
 800259e:	f7fe f97d 	bl	800089c <__aeabi_ddiv>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4bb9      	ldr	r3, [pc, #740]	@ (8002894 <rotate_motor+0x774>)
 80025b0:	f7fe f84a 	bl	8000648 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	4bb3      	ldr	r3, [pc, #716]	@ (8002890 <rotate_motor+0x770>)
 80025c2:	f7fd fe8b 	bl	80002dc <__adddf3>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fb13 	bl	8000bf8 <__aeabi_d2uiz>
 80025d2:	4603      	mov	r3, r0
 80025d4:	b29c      	uxth	r4, r3
 80025d6:	4bb0      	ldr	r3, [pc, #704]	@ (8002898 <rotate_motor+0x778>)
 80025d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025dc:	335a      	adds	r3, #90	@ 0x5a
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ea:	eddf 6aac 	vldr	s13, [pc, #688]	@ 800289c <rotate_motor+0x77c>
 80025ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fa:	ee17 3a90 	vmov	r3, s15
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bfb8      	it	lt
 8002602:	425b      	neglt	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ffb5 	bl	8000574 <__aeabi_i2d>
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	4ba4      	ldr	r3, [pc, #656]	@ (80028a0 <rotate_motor+0x780>)
 8002610:	f7fe f81a 	bl	8000648 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe faec 	bl	8000bf8 <__aeabi_d2uiz>
 8002620:	4603      	mov	r3, r0
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	4621      	mov	r1, r4
 8002628:	489b      	ldr	r0, [pc, #620]	@ (8002898 <rotate_motor+0x778>)
 800262a:	f000 fc79 	bl	8002f20 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 800262e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	dd22      	ble.n	8002682 <rotate_motor+0x562>
 800263c:	6978      	ldr	r0, [r7, #20]
 800263e:	f7fd ffab 	bl	8000598 <__aeabi_f2d>
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b90      	ldr	r3, [pc, #576]	@ (8002888 <rotate_motor+0x768>)
 8002648:	f7fe f928 	bl	800089c <__aeabi_ddiv>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	4b8c      	ldr	r3, [pc, #560]	@ (800288c <rotate_motor+0x76c>)
 800265a:	f7fd fff5 	bl	8000648 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b89      	ldr	r3, [pc, #548]	@ (8002890 <rotate_motor+0x770>)
 800266c:	f7fd fe36 	bl	80002dc <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fabe 	bl	8000bf8 <__aeabi_d2uiz>
 800267c:	4603      	mov	r3, r0
 800267e:	b29c      	uxth	r4, r3
 8002680:	e021      	b.n	80026c6 <rotate_motor+0x5a6>
 8002682:	6978      	ldr	r0, [r7, #20]
 8002684:	f7fd ff88 	bl	8000598 <__aeabi_f2d>
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	4b7e      	ldr	r3, [pc, #504]	@ (8002888 <rotate_motor+0x768>)
 800268e:	f7fe f905 	bl	800089c <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	a373      	add	r3, pc, #460	@ (adr r3, 8002868 <rotate_motor+0x748>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ffd2 	bl	8000648 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	4b77      	ldr	r3, [pc, #476]	@ (8002890 <rotate_motor+0x770>)
 80026b2:	f7fd fe13 	bl	80002dc <__adddf3>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa9b 	bl	8000bf8 <__aeabi_d2uiz>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b29c      	uxth	r4, r3
 80026c6:	4b74      	ldr	r3, [pc, #464]	@ (8002898 <rotate_motor+0x778>)
 80026c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026cc:	335a      	adds	r3, #90	@ 0x5a
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026da:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800289c <rotate_motor+0x77c>
 80026de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ea:	ee17 3a90 	vmov	r3, s15
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bfb8      	it	lt
 80026f2:	425b      	neglt	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd ff3d 	bl	8000574 <__aeabi_i2d>
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b68      	ldr	r3, [pc, #416]	@ (80028a0 <rotate_motor+0x780>)
 8002700:	f7fd ffa2 	bl	8000648 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa74 	bl	8000bf8 <__aeabi_d2uiz>
 8002710:	4603      	mov	r3, r0
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	4621      	mov	r1, r4
 8002718:	4862      	ldr	r0, [pc, #392]	@ (80028a4 <rotate_motor+0x784>)
 800271a:	f000 fc01 	bl	8002f20 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 800271e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272a:	dd22      	ble.n	8002772 <rotate_motor+0x652>
 800272c:	6978      	ldr	r0, [r7, #20]
 800272e:	f7fd ff33 	bl	8000598 <__aeabi_f2d>
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4b54      	ldr	r3, [pc, #336]	@ (8002888 <rotate_motor+0x768>)
 8002738:	f7fe f8b0 	bl	800089c <__aeabi_ddiv>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	a34a      	add	r3, pc, #296	@ (adr r3, 8002870 <rotate_motor+0x750>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fd ff7d 	bl	8000648 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4b4d      	ldr	r3, [pc, #308]	@ (8002890 <rotate_motor+0x770>)
 800275c:	f7fd fdbe 	bl	80002dc <__adddf3>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa46 	bl	8000bf8 <__aeabi_d2uiz>
 800276c:	4603      	mov	r3, r0
 800276e:	b29c      	uxth	r4, r3
 8002770:	e021      	b.n	80027b6 <rotate_motor+0x696>
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7fd ff10 	bl	8000598 <__aeabi_f2d>
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	4b42      	ldr	r3, [pc, #264]	@ (8002888 <rotate_motor+0x768>)
 800277e:	f7fe f88d 	bl	800089c <__aeabi_ddiv>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	a33b      	add	r3, pc, #236	@ (adr r3, 8002878 <rotate_motor+0x758>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd ff5a 	bl	8000648 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002890 <rotate_motor+0x770>)
 80027a2:	f7fd fd9b 	bl	80002dc <__adddf3>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f7fe fa23 	bl	8000bf8 <__aeabi_d2uiz>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b29c      	uxth	r4, r3
 80027b6:	4b38      	ldr	r3, [pc, #224]	@ (8002898 <rotate_motor+0x778>)
 80027b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80027bc:	335a      	adds	r3, #90	@ 0x5a
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80027ca:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800289c <rotate_motor+0x77c>
 80027ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027da:	ee17 3a90 	vmov	r3, s15
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bfb8      	it	lt
 80027e2:	425b      	neglt	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fec5 	bl	8000574 <__aeabi_i2d>
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <rotate_motor+0x780>)
 80027f0:	f7fd ff2a 	bl	8000648 <__aeabi_dmul>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7fe f9fc 	bl	8000bf8 <__aeabi_d2uiz>
 8002800:	4603      	mov	r3, r0
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	4621      	mov	r1, r4
 8002808:	4827      	ldr	r0, [pc, #156]	@ (80028a8 <rotate_motor+0x788>)
 800280a:	f000 fb89 	bl	8002f20 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 800280e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281a:	dd47      	ble.n	80028ac <rotate_motor+0x78c>
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7fd febb 	bl	8000598 <__aeabi_f2d>
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <rotate_motor+0x768>)
 8002828:	f7fe f838 	bl	800089c <__aeabi_ddiv>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	a312      	add	r3, pc, #72	@ (adr r3, 8002880 <rotate_motor+0x760>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd ff05 	bl	8000648 <__aeabi_dmul>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <rotate_motor+0x770>)
 800284c:	f7fd fd46 	bl	80002dc <__adddf3>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f9ce 	bl	8000bf8 <__aeabi_d2uiz>
 800285c:	4603      	mov	r3, r0
 800285e:	b29c      	uxth	r4, r3
 8002860:	e046      	b.n	80028f0 <rotate_motor+0x7d0>
 8002862:	bf00      	nop
 8002864:	f3af 8000 	nop.w
 8002868:	00000000 	.word	0x00000000
 800286c:	40786000 	.word	0x40786000
 8002870:	00000000 	.word	0x00000000
 8002874:	40777000 	.word	0x40777000
 8002878:	00000000 	.word	0x00000000
 800287c:	40772000 	.word	0x40772000
 8002880:	00000000 	.word	0x00000000
 8002884:	4077c000 	.word	0x4077c000
 8002888:	40568000 	.word	0x40568000
 800288c:	40768000 	.word	0x40768000
 8002890:	407f4000 	.word	0x407f4000
 8002894:	40790000 	.word	0x40790000
 8002898:	20000000 	.word	0x20000000
 800289c:	42b40000 	.word	0x42b40000
 80028a0:	40080000 	.word	0x40080000
 80028a4:	20000006 	.word	0x20000006
 80028a8:	2000000c 	.word	0x2000000c
 80028ac:	6978      	ldr	r0, [r7, #20]
 80028ae:	f7fd fe73 	bl	8000598 <__aeabi_f2d>
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4bd0      	ldr	r3, [pc, #832]	@ (8002bf8 <rotate_motor+0xad8>)
 80028b8:	f7fd fff0 	bl	800089c <__aeabi_ddiv>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	4bcc      	ldr	r3, [pc, #816]	@ (8002bfc <rotate_motor+0xadc>)
 80028ca:	f7fd febd 	bl	8000648 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	4bc9      	ldr	r3, [pc, #804]	@ (8002c00 <rotate_motor+0xae0>)
 80028dc:	f7fd fcfe 	bl	80002dc <__adddf3>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f986 	bl	8000bf8 <__aeabi_d2uiz>
 80028ec:	4603      	mov	r3, r0
 80028ee:	b29c      	uxth	r4, r3
 80028f0:	4bc4      	ldr	r3, [pc, #784]	@ (8002c04 <rotate_motor+0xae4>)
 80028f2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80028f6:	335a      	adds	r3, #90	@ 0x5a
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002900:	edd7 7a05 	vldr	s15, [r7, #20]
 8002904:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 8002c08 <rotate_motor+0xae8>
 8002908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002914:	ee17 3a90 	vmov	r3, s15
 8002918:	2b00      	cmp	r3, #0
 800291a:	bfb8      	it	lt
 800291c:	425b      	neglt	r3, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fe28 	bl	8000574 <__aeabi_i2d>
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	4bb8      	ldr	r3, [pc, #736]	@ (8002c0c <rotate_motor+0xaec>)
 800292a:	f7fd fe8d 	bl	8000648 <__aeabi_dmul>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f7fe f95f 	bl	8000bf8 <__aeabi_d2uiz>
 800293a:	4603      	mov	r3, r0
 800293c:	b29b      	uxth	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	4621      	mov	r1, r4
 8002942:	48b3      	ldr	r0, [pc, #716]	@ (8002c10 <rotate_motor+0xaf0>)
 8002944:	f000 faec 	bl	8002f20 <servo_move>
 8002948:	e230      	b.n	8002dac <rotate_motor+0xc8c>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {    // quadrant 1 or 3
 800294a:	edd7 7a01 	vldr	s15, [r7, #4]
 800294e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002956:	d506      	bpl.n	8002966 <rotate_motor+0x846>
 8002958:	edd7 7a02 	vldr	s15, [r7, #8]
 800295c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	d40f      	bmi.n	8002986 <rotate_motor+0x866>
 8002966:	edd7 7a01 	vldr	s15, [r7, #4]
 800296a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	f340 821b 	ble.w	8002dac <rotate_motor+0xc8c>
 8002976:	edd7 7a02 	vldr	s15, [r7, #8]
 800297a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002982:	f340 8213 	ble.w	8002dac <rotate_motor+0xc8c>
    if (angle < 0)
 8002986:	edd7 7a05 	vldr	s15, [r7, #20]
 800298a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	d507      	bpl.n	80029a4 <rotate_motor+0x884>
      angle += 180;
 8002994:	edd7 7a05 	vldr	s15, [r7, #20]
 8002998:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002c14 <rotate_motor+0xaf4>
 800299c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029a0:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 80029a4:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8002c08 <rotate_motor+0xae8>
 80029a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80029ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b0:	edc7 7a05 	vstr	s15, [r7, #20]
    
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 80029b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c0:	dd22      	ble.n	8002a08 <rotate_motor+0x8e8>
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7fd fde8 	bl	8000598 <__aeabi_f2d>
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	4b8a      	ldr	r3, [pc, #552]	@ (8002bf8 <rotate_motor+0xad8>)
 80029ce:	f7fd ff65 	bl	800089c <__aeabi_ddiv>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	4b87      	ldr	r3, [pc, #540]	@ (8002bfc <rotate_motor+0xadc>)
 80029e0:	f7fd fe32 	bl	8000648 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	4b83      	ldr	r3, [pc, #524]	@ (8002c00 <rotate_motor+0xae0>)
 80029f2:	f7fd fc73 	bl	80002dc <__adddf3>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f7fe f8fb 	bl	8000bf8 <__aeabi_d2uiz>
 8002a02:	4603      	mov	r3, r0
 8002a04:	b29c      	uxth	r4, r3
 8002a06:	e021      	b.n	8002a4c <rotate_motor+0x92c>
 8002a08:	6978      	ldr	r0, [r7, #20]
 8002a0a:	f7fd fdc5 	bl	8000598 <__aeabi_f2d>
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	4b79      	ldr	r3, [pc, #484]	@ (8002bf8 <rotate_motor+0xad8>)
 8002a14:	f7fd ff42 	bl	800089c <__aeabi_ddiv>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	4b7c      	ldr	r3, [pc, #496]	@ (8002c18 <rotate_motor+0xaf8>)
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	4b72      	ldr	r3, [pc, #456]	@ (8002c00 <rotate_motor+0xae0>)
 8002a38:	f7fd fc50 	bl	80002dc <__adddf3>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7fe f8d8 	bl	8000bf8 <__aeabi_d2uiz>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	b29c      	uxth	r4, r3
 8002a4c:	4b6d      	ldr	r3, [pc, #436]	@ (8002c04 <rotate_motor+0xae4>)
 8002a4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a52:	335a      	adds	r3, #90	@ 0x5a
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a60:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002c08 <rotate_motor+0xae8>
 8002a64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a70:	ee17 3a90 	vmov	r3, s15
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bfb8      	it	lt
 8002a78:	425b      	neglt	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd7a 	bl	8000574 <__aeabi_i2d>
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	4b61      	ldr	r3, [pc, #388]	@ (8002c0c <rotate_motor+0xaec>)
 8002a86:	f7fd fddf 	bl	8000648 <__aeabi_dmul>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fe f8b1 	bl	8000bf8 <__aeabi_d2uiz>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	4859      	ldr	r0, [pc, #356]	@ (8002c04 <rotate_motor+0xae4>)
 8002aa0:	f000 fa3e 	bl	8002f20 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8002aa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab0:	dd22      	ble.n	8002af8 <rotate_motor+0x9d8>
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7fd fd70 	bl	8000598 <__aeabi_f2d>
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf8 <rotate_motor+0xad8>)
 8002abe:	f7fd feed 	bl	800089c <__aeabi_ddiv>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	4b4b      	ldr	r3, [pc, #300]	@ (8002bfc <rotate_motor+0xadc>)
 8002ad0:	f7fd fdba 	bl	8000648 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <rotate_motor+0xae0>)
 8002ae2:	f7fd fbfb 	bl	80002dc <__adddf3>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fe f883 	bl	8000bf8 <__aeabi_d2uiz>
 8002af2:	4603      	mov	r3, r0
 8002af4:	b29c      	uxth	r4, r3
 8002af6:	e021      	b.n	8002b3c <rotate_motor+0xa1c>
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f7fd fd4d 	bl	8000598 <__aeabi_f2d>
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf8 <rotate_motor+0xad8>)
 8002b04:	f7fd feca 	bl	800089c <__aeabi_ddiv>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	a335      	add	r3, pc, #212	@ (adr r3, 8002be8 <rotate_motor+0xac8>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd fd97 	bl	8000648 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	4b36      	ldr	r3, [pc, #216]	@ (8002c00 <rotate_motor+0xae0>)
 8002b28:	f7fd fbd8 	bl	80002dc <__adddf3>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fe f860 	bl	8000bf8 <__aeabi_d2uiz>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b29c      	uxth	r4, r3
 8002b3c:	4b31      	ldr	r3, [pc, #196]	@ (8002c04 <rotate_motor+0xae4>)
 8002b3e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002b42:	335a      	adds	r3, #90	@ 0x5a
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b50:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002c08 <rotate_motor+0xae8>
 8002b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b60:	ee17 3a90 	vmov	r3, s15
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bfb8      	it	lt
 8002b68:	425b      	neglt	r3, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fd02 	bl	8000574 <__aeabi_i2d>
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <rotate_motor+0xaec>)
 8002b76:	f7fd fd67 	bl	8000648 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fe f839 	bl	8000bf8 <__aeabi_d2uiz>
 8002b86:	4603      	mov	r3, r0
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	4823      	ldr	r0, [pc, #140]	@ (8002c1c <rotate_motor+0xafc>)
 8002b90:	f000 f9c6 	bl	8002f20 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 8002b94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	dd3e      	ble.n	8002c20 <rotate_motor+0xb00>
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7fd fcf8 	bl	8000598 <__aeabi_f2d>
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <rotate_motor+0xad8>)
 8002bae:	f7fd fe75 	bl	800089c <__aeabi_ddiv>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	a30d      	add	r3, pc, #52	@ (adr r3, 8002bf0 <rotate_motor+0xad0>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f7fd fd42 	bl	8000648 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <rotate_motor+0xae0>)
 8002bd2:	f7fd fb83 	bl	80002dc <__adddf3>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f7fe f80b 	bl	8000bf8 <__aeabi_d2uiz>
 8002be2:	4603      	mov	r3, r0
 8002be4:	b29c      	uxth	r4, r3
 8002be6:	e03d      	b.n	8002c64 <rotate_motor+0xb44>
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40786000 	.word	0x40786000
 8002bf0:	00000000 	.word	0x00000000
 8002bf4:	40777000 	.word	0x40777000
 8002bf8:	40568000 	.word	0x40568000
 8002bfc:	40768000 	.word	0x40768000
 8002c00:	407f4000 	.word	0x407f4000
 8002c04:	20000000 	.word	0x20000000
 8002c08:	42b40000 	.word	0x42b40000
 8002c0c:	40080000 	.word	0x40080000
 8002c10:	20000012 	.word	0x20000012
 8002c14:	43340000 	.word	0x43340000
 8002c18:	40790000 	.word	0x40790000
 8002c1c:	20000006 	.word	0x20000006
 8002c20:	6978      	ldr	r0, [r7, #20]
 8002c22:	f7fd fcb9 	bl	8000598 <__aeabi_f2d>
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	4b67      	ldr	r3, [pc, #412]	@ (8002dc8 <rotate_motor+0xca8>)
 8002c2c:	f7fd fe36 	bl	800089c <__aeabi_ddiv>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	a35f      	add	r3, pc, #380	@ (adr r3, 8002db8 <rotate_motor+0xc98>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f7fd fd03 	bl	8000648 <__aeabi_dmul>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dcc <rotate_motor+0xcac>)
 8002c50:	f7fd fb44 	bl	80002dc <__adddf3>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fd ffcc 	bl	8000bf8 <__aeabi_d2uiz>
 8002c60:	4603      	mov	r3, r0
 8002c62:	b29c      	uxth	r4, r3
 8002c64:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd0 <rotate_motor+0xcb0>)
 8002c66:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002c6a:	335a      	adds	r3, #90	@ 0x5a
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c78:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8002dd4 <rotate_motor+0xcb4>
 8002c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c88:	ee17 3a90 	vmov	r3, s15
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bfb8      	it	lt
 8002c90:	425b      	neglt	r3, r3
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc6e 	bl	8000574 <__aeabi_i2d>
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd8 <rotate_motor+0xcb8>)
 8002c9e:	f7fd fcd3 	bl	8000648 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ffa5 	bl	8000bf8 <__aeabi_d2uiz>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4849      	ldr	r0, [pc, #292]	@ (8002ddc <rotate_motor+0xcbc>)
 8002cb8:	f000 f932 	bl	8002f20 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	dd22      	ble.n	8002d10 <rotate_motor+0xbf0>
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7fd fc64 	bl	8000598 <__aeabi_f2d>
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <rotate_motor+0xca8>)
 8002cd6:	f7fd fde1 	bl	800089c <__aeabi_ddiv>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	a337      	add	r3, pc, #220	@ (adr r3, 8002dc0 <rotate_motor+0xca0>)
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f7fd fcae 	bl	8000648 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <rotate_motor+0xcac>)
 8002cfa:	f7fd faef 	bl	80002dc <__adddf3>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f7fd ff77 	bl	8000bf8 <__aeabi_d2uiz>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	b29c      	uxth	r4, r3
 8002d0e:	e021      	b.n	8002d54 <rotate_motor+0xc34>
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f7fd fc41 	bl	8000598 <__aeabi_f2d>
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <rotate_motor+0xca8>)
 8002d1c:	f7fd fdbe 	bl	800089c <__aeabi_ddiv>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002de0 <rotate_motor+0xcc0>)
 8002d2e:	f7fd fc8b 	bl	8000648 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <rotate_motor+0xcac>)
 8002d40:	f7fd facc 	bl	80002dc <__adddf3>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f7fd ff54 	bl	8000bf8 <__aeabi_d2uiz>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b29c      	uxth	r4, r3
 8002d54:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <rotate_motor+0xcb0>)
 8002d56:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002d5a:	335a      	adds	r3, #90	@ 0x5a
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d68:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002dd4 <rotate_motor+0xcb4>
 8002d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d78:	ee17 3a90 	vmov	r3, s15
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bfb8      	it	lt
 8002d80:	425b      	neglt	r3, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fbf6 	bl	8000574 <__aeabi_i2d>
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <rotate_motor+0xcb8>)
 8002d8e:	f7fd fc5b 	bl	8000648 <__aeabi_dmul>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd ff2d 	bl	8000bf8 <__aeabi_d2uiz>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	4621      	mov	r1, r4
 8002da6:	480f      	ldr	r0, [pc, #60]	@ (8002de4 <rotate_motor+0xcc4>)
 8002da8:	f000 f8ba 	bl	8002f20 <servo_move>
  }
}
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	f3af 8000 	nop.w
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	40772000 	.word	0x40772000
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	4077c000 	.word	0x4077c000
 8002dc8:	40568000 	.word	0x40568000
 8002dcc:	407f4000 	.word	0x407f4000
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	42b40000 	.word	0x42b40000
 8002dd8:	40080000 	.word	0x40080000
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	40768000 	.word	0x40768000
 8002de4:	20000012 	.word	0x20000012

08002de8 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	@ 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	eef0 6a40 	vmov.f32	s13, s0
 8002df2:	eeb0 7a60 	vmov.f32	s14, s1
 8002df6:	eef0 7a41 	vmov.f32	s15, s2
 8002dfa:	edc7 6a01 	vstr	s13, [r7, #4]
 8002dfe:	ed87 7a02 	vstr	s14, [r7, #8]
 8002e02:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.x_vel != 0 && direction_encoder != LEFT_RIGHT || base_vel.y_vel != 0 && direction_encoder != FRONT_BACK) {
 8002e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	d003      	beq.n	8002e1c <movement_control+0x34>
 8002e14:	4b41      	ldr	r3, [pc, #260]	@ (8002f1c <movement_control+0x134>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d10a      	bne.n	8002e32 <movement_control+0x4a>
 8002e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d01f      	beq.n	8002e6a <movement_control+0x82>
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f1c <movement_control+0x134>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01b      	beq.n	8002e6a <movement_control+0x82>
    rotate_motor(base_vel);
 8002e32:	edd7 6a01 	vldr	s13, [r7, #4]
 8002e36:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e3e:	eeb0 0a66 	vmov.f32	s0, s13
 8002e42:	eef0 0a47 	vmov.f32	s1, s14
 8002e46:	eeb0 1a67 	vmov.f32	s2, s15
 8002e4a:	f7ff f969 	bl	8002120 <rotate_motor>
    direction_encoder = base_vel.x_vel != 0 ? LEFT_RIGHT : FRONT_BACK;
 8002e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <movement_control+0x134>)
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e01b      	b.n	8002ea2 <movement_control+0xba>
  } else if (base_vel.z_vel != 0 && direction_encoder != ROTATE) {
 8002e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	d014      	beq.n	8002ea2 <movement_control+0xba>
 8002e78:	4b28      	ldr	r3, [pc, #160]	@ (8002f1c <movement_control+0x134>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d010      	beq.n	8002ea2 <movement_control+0xba>
    rotate_motor(base_vel);
 8002e80:	edd7 6a01 	vldr	s13, [r7, #4]
 8002e84:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e8c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e90:	eef0 0a47 	vmov.f32	s1, s14
 8002e94:	eeb0 1a67 	vmov.f32	s2, s15
 8002e98:	f7ff f942 	bl	8002120 <rotate_motor>
    direction_encoder = ROTATE;
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <movement_control+0x134>)
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
  }


  WheelVelocity target_vel = base2wheel(base_vel);
 8002ea2:	edd7 6a01 	vldr	s13, [r7, #4]
 8002ea6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eae:	eeb0 0a66 	vmov.f32	s0, s13
 8002eb2:	eef0 0a47 	vmov.f32	s1, s14
 8002eb6:	eeb0 1a67 	vmov.f32	s2, s15
 8002eba:	f7fe fd35 	bl	8001928 <base2wheel>
 8002ebe:	eeb0 6a40 	vmov.f32	s12, s0
 8002ec2:	eef0 6a60 	vmov.f32	s13, s1
 8002ec6:	eeb0 7a41 	vmov.f32	s14, s2
 8002eca:	eef0 7a61 	vmov.f32	s15, s3
 8002ece:	ed87 6a08 	vstr	s12, [r7, #32]
 8002ed2:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002ed6:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8002eda:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  WheelPWM target_pwm = wheel2pwm(target_vel);
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	ed97 6a08 	vldr	s12, [r7, #32]
 8002ee6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002eea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002eee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ef2:	eeb0 0a46 	vmov.f32	s0, s12
 8002ef6:	eef0 0a66 	vmov.f32	s1, s13
 8002efa:	eeb0 1a47 	vmov.f32	s2, s14
 8002efe:	eef0 1a67 	vmov.f32	s3, s15
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fe68 	bl	8001bd8 <wheel2pwm>
  wheels_control(target_pwm);
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f0e:	f7ff f8e7 	bl	80020e0 <wheels_control>
}
 8002f12:	bf00      	nop
 8002f14:	3730      	adds	r7, #48	@ 0x30
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000102 	.word	0x20000102

08002f20 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8002f30:	2355      	movs	r3, #85	@ 0x55
 8002f32:	737b      	strb	r3, [r7, #13]
 8002f34:	7b7b      	ldrb	r3, [r7, #13]
 8002f36:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8002f40:	2301      	movs	r3, #1
 8002f42:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 8002f44:	883b      	ldrh	r3, [r7, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 8002f4a:	883b      	ldrh	r3, [r7, #0]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 8002f6a:	f107 010c 	add.w	r1, r7, #12
 8002f6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f72:	220a      	movs	r2, #10
 8002f74:	48cc      	ldr	r0, [pc, #816]	@ (80032a8 <servo_move+0x388>)
 8002f76:	f003 fe7b 	bl	8006c70 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	887a      	ldrh	r2, [r7, #2]
 8002f7e:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	f200 81a0 	bhi.w	80032cc <servo_move+0x3ac>
 8002f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f94 <servo_move+0x74>)
 8002f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f92:	bf00      	nop
 8002f94:	08002fad 	.word	0x08002fad
 8002f98:	0800302d 	.word	0x0800302d
 8002f9c:	080030ad 	.word	0x080030ad
 8002fa0:	0800312d 	.word	0x0800312d
 8002fa4:	080031ad 	.word	0x080031ad
 8002fa8:	0800322d 	.word	0x0800322d
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002fb2:	d91c      	bls.n	8002fee <servo_move+0xce>
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fada 	bl	8000574 <__aeabi_i2d>
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80032ac <servo_move+0x38c>)
 8002fc6:	f7fd fb3f 	bl	8000648 <__aeabi_dmul>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	4bb6      	ldr	r3, [pc, #728]	@ (80032b0 <servo_move+0x390>)
 8002fd8:	f7fd fc60 	bl	800089c <__aeabi_ddiv>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fd fde0 	bl	8000ba8 <__aeabi_d2iz>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	b21b      	sxth	r3, r3
 8002fec:	e01b      	b.n	8003026 <servo_move+0x106>
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fabd 	bl	8000574 <__aeabi_i2d>
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	4bad      	ldr	r3, [pc, #692]	@ (80032b4 <servo_move+0x394>)
 8003000:	f7fd fb22 	bl	8000648 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	4ba9      	ldr	r3, [pc, #676]	@ (80032b8 <servo_move+0x398>)
 8003012:	f7fd fc43 	bl	800089c <__aeabi_ddiv>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fdc3 	bl	8000ba8 <__aeabi_d2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	b21b      	sxth	r3, r3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	8093      	strh	r3, [r2, #4]
      break;
 800302a:	e150      	b.n	80032ce <servo_move+0x3ae>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003032:	d91c      	bls.n	800306e <servo_move+0x14e>
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa9a 	bl	8000574 <__aeabi_i2d>
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	4b99      	ldr	r3, [pc, #612]	@ (80032ac <servo_move+0x38c>)
 8003046:	f7fd faff 	bl	8000648 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	4b96      	ldr	r3, [pc, #600]	@ (80032b0 <servo_move+0x390>)
 8003058:	f7fd fc20 	bl	800089c <__aeabi_ddiv>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fda0 	bl	8000ba8 <__aeabi_d2iz>
 8003068:	4603      	mov	r3, r0
 800306a:	b21b      	sxth	r3, r3
 800306c:	e01b      	b.n	80030a6 <servo_move+0x186>
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa7d 	bl	8000574 <__aeabi_i2d>
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	4b8d      	ldr	r3, [pc, #564]	@ (80032b4 <servo_move+0x394>)
 8003080:	f7fd fae2 	bl	8000648 <__aeabi_dmul>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	a37a      	add	r3, pc, #488	@ (adr r3, 8003278 <servo_move+0x358>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fc03 	bl	800089c <__aeabi_ddiv>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fd83 	bl	8000ba8 <__aeabi_d2iz>
 80030a2:	4603      	mov	r3, r0
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	8093      	strh	r3, [r2, #4]
      break;
 80030aa:	e110      	b.n	80032ce <servo_move+0x3ae>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80030b2:	d91c      	bls.n	80030ee <servo_move+0x1ce>
 80030b4:	887b      	ldrh	r3, [r7, #2]
 80030b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa5a 	bl	8000574 <__aeabi_i2d>
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	4b79      	ldr	r3, [pc, #484]	@ (80032ac <servo_move+0x38c>)
 80030c6:	f7fd fabf 	bl	8000648 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8003280 <servo_move+0x360>)
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f7fd fbe0 	bl	800089c <__aeabi_ddiv>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7fd fd60 	bl	8000ba8 <__aeabi_d2iz>
 80030e8:	4603      	mov	r3, r0
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	e01b      	b.n	8003126 <servo_move+0x206>
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fa3d 	bl	8000574 <__aeabi_i2d>
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	4b6d      	ldr	r3, [pc, #436]	@ (80032b4 <servo_move+0x394>)
 8003100:	f7fd faa2 	bl	8000648 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	a35e      	add	r3, pc, #376	@ (adr r3, 8003288 <servo_move+0x368>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fbc3 	bl	800089c <__aeabi_ddiv>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f7fd fd43 	bl	8000ba8 <__aeabi_d2iz>
 8003122:	4603      	mov	r3, r0
 8003124:	b21b      	sxth	r3, r3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	8093      	strh	r3, [r2, #4]
      break;
 800312a:	e0d0      	b.n	80032ce <servo_move+0x3ae>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003132:	d91c      	bls.n	800316e <servo_move+0x24e>
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fa1a 	bl	8000574 <__aeabi_i2d>
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <servo_move+0x38c>)
 8003146:	f7fd fa7f 	bl	8000648 <__aeabi_dmul>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	a34f      	add	r3, pc, #316	@ (adr r3, 8003290 <servo_move+0x370>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f7fd fba0 	bl	800089c <__aeabi_ddiv>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f7fd fd20 	bl	8000ba8 <__aeabi_d2iz>
 8003168:	4603      	mov	r3, r0
 800316a:	b21b      	sxth	r3, r3
 800316c:	e01b      	b.n	80031a6 <servo_move+0x286>
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f9fd 	bl	8000574 <__aeabi_i2d>
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	4b4d      	ldr	r3, [pc, #308]	@ (80032b4 <servo_move+0x394>)
 8003180:	f7fd fa62 	bl	8000648 <__aeabi_dmul>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	4b4a      	ldr	r3, [pc, #296]	@ (80032bc <servo_move+0x39c>)
 8003192:	f7fd fb83 	bl	800089c <__aeabi_ddiv>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fd03 	bl	8000ba8 <__aeabi_d2iz>
 80031a2:	4603      	mov	r3, r0
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	8093      	strh	r3, [r2, #4]
      break;
 80031aa:	e090      	b.n	80032ce <servo_move+0x3ae>
    case 5:
      target_servo->current_degree = SERVO_ID5_POS_TO_ANGLE(target_pos);
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031b2:	d91c      	bls.n	80031ee <servo_move+0x2ce>
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f9da 	bl	8000574 <__aeabi_i2d>
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	4b39      	ldr	r3, [pc, #228]	@ (80032ac <servo_move+0x38c>)
 80031c6:	f7fd fa3f 	bl	8000648 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	a331      	add	r3, pc, #196	@ (adr r3, 8003298 <servo_move+0x378>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd fb60 	bl	800089c <__aeabi_ddiv>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fce0 	bl	8000ba8 <__aeabi_d2iz>
 80031e8:	4603      	mov	r3, r0
 80031ea:	b21b      	sxth	r3, r3
 80031ec:	e01b      	b.n	8003226 <servo_move+0x306>
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f9bd 	bl	8000574 <__aeabi_i2d>
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	4b30      	ldr	r3, [pc, #192]	@ (80032c0 <servo_move+0x3a0>)
 8003200:	f7fd fa22 	bl	8000648 <__aeabi_dmul>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	a324      	add	r3, pc, #144	@ (adr r3, 80032a0 <servo_move+0x380>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f7fd fb43 	bl	800089c <__aeabi_ddiv>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f7fd fcc3 	bl	8000ba8 <__aeabi_d2iz>
 8003222:	4603      	mov	r3, r0
 8003224:	b21b      	sxth	r3, r3
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	8093      	strh	r3, [r2, #4]
      break;
 800322a:	e050      	b.n	80032ce <servo_move+0x3ae>
    case 6:
      target_servo->current_degree = SERVO_ID6_POS_TO_ANGLE(target_pos);
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003232:	d81c      	bhi.n	800326e <servo_move+0x34e>
 8003234:	887b      	ldrh	r3, [r7, #2]
 8003236:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f99a 	bl	8000574 <__aeabi_i2d>
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	4b1f      	ldr	r3, [pc, #124]	@ (80032c4 <servo_move+0x3a4>)
 8003246:	f7fd f9ff 	bl	8000648 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	4b1c      	ldr	r3, [pc, #112]	@ (80032c8 <servo_move+0x3a8>)
 8003258:	f7fd fb20 	bl	800089c <__aeabi_ddiv>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	f7fd fca0 	bl	8000ba8 <__aeabi_d2iz>
 8003268:	4603      	mov	r3, r0
 800326a:	b21a      	sxth	r2, r3
 800326c:	e000      	b.n	8003270 <servo_move+0x350>
 800326e:	2200      	movs	r2, #0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	809a      	strh	r2, [r3, #4]
      break;
 8003274:	e02b      	b.n	80032ce <servo_move+0x3ae>
 8003276:	bf00      	nop
 8003278:	00000000 	.word	0x00000000
 800327c:	c0786000 	.word	0xc0786000
 8003280:	00000000 	.word	0x00000000
 8003284:	40777000 	.word	0x40777000
 8003288:	00000000 	.word	0x00000000
 800328c:	c0772000 	.word	0xc0772000
 8003290:	00000000 	.word	0x00000000
 8003294:	4077c000 	.word	0x4077c000
 8003298:	00000000 	.word	0x00000000
 800329c:	40786000 	.word	0x40786000
 80032a0:	00000000 	.word	0x00000000
 80032a4:	c0554000 	.word	0xc0554000
 80032a8:	200002d0 	.word	0x200002d0
 80032ac:	40568000 	.word	0x40568000
 80032b0:	40768000 	.word	0x40768000
 80032b4:	c0568000 	.word	0xc0568000
 80032b8:	c0790000 	.word	0xc0790000
 80032bc:	c0768000 	.word	0xc0768000
 80032c0:	c0240000 	.word	0xc0240000
 80032c4:	c03e0000 	.word	0xc03e0000
 80032c8:	c05e0000 	.word	0xc05e0000
    default:
      break;
 80032cc:	bf00      	nop
  }
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop

080032d8 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	e010      	b.n	8003306 <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003318 <servo_reset_all+0x40>)
 80032f0:	4413      	add	r3, r2
 80032f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80032f6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fe10 	bl	8002f20 <servo_move>
  for (int i = 0; i < 6; i++)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3301      	adds	r3, #1
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b05      	cmp	r3, #5
 800330a:	ddeb      	ble.n	80032e4 <servo_reset_all+0xc>
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000000 	.word	0x20000000

0800331c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	4b0f      	ldr	r3, [pc, #60]	@ (8003360 <HAL_MspInit+0x44>)
 8003324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003326:	4a0e      	ldr	r2, [pc, #56]	@ (8003360 <HAL_MspInit+0x44>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6613      	str	r3, [r2, #96]	@ 0x60
 800332e:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <HAL_MspInit+0x44>)
 8003330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_MspInit+0x44>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <HAL_MspInit+0x44>)
 8003340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	@ 0x58
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_MspInit+0x44>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003352:	f001 f9c3 	bl	80046dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000

08003364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <NMI_Handler+0x4>

0800336c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003370:	bf00      	nop
 8003372:	e7fd      	b.n	8003370 <HardFault_Handler+0x4>

08003374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <MemManage_Handler+0x4>

0800337c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <BusFault_Handler+0x4>

08003384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003388:	bf00      	nop
 800338a:	e7fd      	b.n	8003388 <UsageFault_Handler+0x4>

0800338c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ba:	f000 fe2d 	bl	8004018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e00a      	b.n	80033ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033d4:	f3af 8000 	nop.w
 80033d8:	4601      	mov	r1, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	60ba      	str	r2, [r7, #8]
 80033e0:	b2ca      	uxtb	r2, r1
 80033e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3301      	adds	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	dbf0      	blt.n	80033d4 <_read+0x12>
  }

  return len;
 80033f2:	687b      	ldr	r3, [r7, #4]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e009      	b.n	8003422 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	60ba      	str	r2, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3301      	adds	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	dbf1      	blt.n	800340e <_write+0x12>
  }
  return len;
 800342a:	687b      	ldr	r3, [r7, #4]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_close>:

int _close(int file)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800343c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800345c:	605a      	str	r2, [r3, #4]
  return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <_isatty>:

int _isatty(int file)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003474:	2301      	movs	r3, #1
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a4:	4a14      	ldr	r2, [pc, #80]	@ (80034f8 <_sbrk+0x5c>)
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <_sbrk+0x60>)
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b0:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b8:	4b11      	ldr	r3, [pc, #68]	@ (8003500 <_sbrk+0x64>)
 80034ba:	4a12      	ldr	r2, [pc, #72]	@ (8003504 <_sbrk+0x68>)
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <_sbrk+0x64>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d207      	bcs.n	80034dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034cc:	f004 fda8 	bl	8008020 <__errno>
 80034d0:	4603      	mov	r3, r0
 80034d2:	220c      	movs	r2, #12
 80034d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034da:	e009      	b.n	80034f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034dc:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <_sbrk+0x64>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034e2:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <_sbrk+0x64>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	4a05      	ldr	r2, [pc, #20]	@ (8003500 <_sbrk+0x64>)
 80034ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20020000 	.word	0x20020000
 80034fc:	00000400 	.word	0x00000400
 8003500:	20000104 	.word	0x20000104
 8003504:	20000548 	.word	0x20000548

08003508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <SystemInit+0x20>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003512:	4a05      	ldr	r2, [pc, #20]	@ (8003528 <SystemInit+0x20>)
 8003514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	@ 0x30
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	2224      	movs	r2, #36	@ 0x24
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fd22 	bl	8007f84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003540:	463b      	mov	r3, r7
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800354a:	4b23      	ldr	r3, [pc, #140]	@ (80035d8 <MX_TIM1_Init+0xac>)
 800354c:	4a23      	ldr	r2, [pc, #140]	@ (80035dc <MX_TIM1_Init+0xb0>)
 800354e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003550:	4b21      	ldr	r3, [pc, #132]	@ (80035d8 <MX_TIM1_Init+0xac>)
 8003552:	2200      	movs	r2, #0
 8003554:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003556:	4b20      	ldr	r3, [pc, #128]	@ (80035d8 <MX_TIM1_Init+0xac>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800355c:	4b1e      	ldr	r3, [pc, #120]	@ (80035d8 <MX_TIM1_Init+0xac>)
 800355e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003564:	4b1c      	ldr	r3, [pc, #112]	@ (80035d8 <MX_TIM1_Init+0xac>)
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800356a:	4b1b      	ldr	r3, [pc, #108]	@ (80035d8 <MX_TIM1_Init+0xac>)
 800356c:	2200      	movs	r2, #0
 800356e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <MX_TIM1_Init+0xac>)
 8003572:	2280      	movs	r2, #128	@ 0x80
 8003574:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003576:	2303      	movs	r3, #3
 8003578:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800357e:	2301      	movs	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003586:	230a      	movs	r3, #10
 8003588:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800358a:	2300      	movs	r3, #0
 800358c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800358e:	2301      	movs	r3, #1
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003592:	2300      	movs	r3, #0
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003596:	230a      	movs	r3, #10
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	4619      	mov	r1, r3
 80035a0:	480d      	ldr	r0, [pc, #52]	@ (80035d8 <MX_TIM1_Init+0xac>)
 80035a2:	f002 fa6b 	bl	8005a7c <HAL_TIM_Encoder_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80035ac:	f7fe f8fd 	bl	80017aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b0:	2300      	movs	r3, #0
 80035b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035bc:	463b      	mov	r3, r7
 80035be:	4619      	mov	r1, r3
 80035c0:	4805      	ldr	r0, [pc, #20]	@ (80035d8 <MX_TIM1_Init+0xac>)
 80035c2:	f003 fa6f 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80035cc:	f7fe f8ed 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80035d0:	bf00      	nop
 80035d2:	3730      	adds	r7, #48	@ 0x30
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000108 	.word	0x20000108
 80035dc:	40012c00 	.word	0x40012c00

080035e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08e      	sub	sp, #56	@ 0x38
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f4:	f107 031c 	add.w	r3, r7, #28
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003600:	463b      	mov	r3, r7
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	611a      	str	r2, [r3, #16]
 800360e:	615a      	str	r2, [r3, #20]
 8003610:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003612:	4b2d      	ldr	r3, [pc, #180]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 8003614:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003618:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800361a:	4b2b      	ldr	r3, [pc, #172]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 800361c:	2200      	movs	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003620:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8003626:	4b28      	ldr	r3, [pc, #160]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 8003628:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 800362c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362e:	4b26      	ldr	r3, [pc, #152]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 8003630:	2200      	movs	r2, #0
 8003632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003634:	4b24      	ldr	r3, [pc, #144]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 8003636:	2280      	movs	r2, #128	@ 0x80
 8003638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800363a:	4823      	ldr	r0, [pc, #140]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 800363c:	f001 ffda 	bl	80055f4 <HAL_TIM_Base_Init>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003646:	f7fe f8b0 	bl	80017aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800364a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003650:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003654:	4619      	mov	r1, r3
 8003656:	481c      	ldr	r0, [pc, #112]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 8003658:	f002 fc78 	bl	8005f4c <HAL_TIM_ConfigClockSource>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003662:	f7fe f8a2 	bl	80017aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003666:	4818      	ldr	r0, [pc, #96]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 8003668:	f002 f894 	bl	8005794 <HAL_TIM_PWM_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003672:	f7fe f89a 	bl	80017aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800367e:	f107 031c 	add.w	r3, r7, #28
 8003682:	4619      	mov	r1, r3
 8003684:	4810      	ldr	r0, [pc, #64]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 8003686:	f003 fa0d 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003690:	f7fe f88b 	bl	80017aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003694:	2360      	movs	r3, #96	@ 0x60
 8003696:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036a4:	463b      	mov	r3, r7
 80036a6:	220c      	movs	r2, #12
 80036a8:	4619      	mov	r1, r3
 80036aa:	4807      	ldr	r0, [pc, #28]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 80036ac:	f002 fb3a 	bl	8005d24 <HAL_TIM_PWM_ConfigChannel>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80036b6:	f7fe f878 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80036ba:	4803      	ldr	r0, [pc, #12]	@ (80036c8 <MX_TIM2_Init+0xe8>)
 80036bc:	f000 faa4 	bl	8003c08 <HAL_TIM_MspPostInit>

}
 80036c0:	bf00      	nop
 80036c2:	3738      	adds	r7, #56	@ 0x38
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000154 	.word	0x20000154

080036cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	@ 0x38
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e0:	f107 031c 	add.w	r3, r7, #28
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036ec:	463b      	mov	r3, r7
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	60da      	str	r2, [r3, #12]
 80036f8:	611a      	str	r2, [r3, #16]
 80036fa:	615a      	str	r2, [r3, #20]
 80036fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036fe:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003700:	4a38      	ldr	r2, [pc, #224]	@ (80037e4 <MX_TIM3_Init+0x118>)
 8003702:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8003704:	4b36      	ldr	r3, [pc, #216]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003706:	2200      	movs	r2, #0
 8003708:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800370a:	4b35      	ldr	r3, [pc, #212]	@ (80037e0 <MX_TIM3_Init+0x114>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8003710:	4b33      	ldr	r3, [pc, #204]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003712:	f244 129f 	movw	r2, #16799	@ 0x419f
 8003716:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003718:	4b31      	ldr	r3, [pc, #196]	@ (80037e0 <MX_TIM3_Init+0x114>)
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800371e:	4b30      	ldr	r3, [pc, #192]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003720:	2280      	movs	r2, #128	@ 0x80
 8003722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003724:	482e      	ldr	r0, [pc, #184]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003726:	f001 ff65 	bl	80055f4 <HAL_TIM_Base_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003730:	f7fe f83b 	bl	80017aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003738:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800373a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800373e:	4619      	mov	r1, r3
 8003740:	4827      	ldr	r0, [pc, #156]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003742:	f002 fc03 	bl	8005f4c <HAL_TIM_ConfigClockSource>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800374c:	f7fe f82d 	bl	80017aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003750:	4823      	ldr	r0, [pc, #140]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003752:	f002 f81f 	bl	8005794 <HAL_TIM_PWM_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800375c:	f7fe f825 	bl	80017aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003768:	f107 031c 	add.w	r3, r7, #28
 800376c:	4619      	mov	r1, r3
 800376e:	481c      	ldr	r0, [pc, #112]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003770:	f003 f998 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800377a:	f7fe f816 	bl	80017aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800377e:	2360      	movs	r3, #96	@ 0x60
 8003780:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800378e:	463b      	mov	r3, r7
 8003790:	2200      	movs	r2, #0
 8003792:	4619      	mov	r1, r3
 8003794:	4812      	ldr	r0, [pc, #72]	@ (80037e0 <MX_TIM3_Init+0x114>)
 8003796:	f002 fac5 	bl	8005d24 <HAL_TIM_PWM_ConfigChannel>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80037a0:	f7fe f803 	bl	80017aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037a4:	463b      	mov	r3, r7
 80037a6:	2204      	movs	r2, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	480d      	ldr	r0, [pc, #52]	@ (80037e0 <MX_TIM3_Init+0x114>)
 80037ac:	f002 faba 	bl	8005d24 <HAL_TIM_PWM_ConfigChannel>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80037b6:	f7fd fff8 	bl	80017aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037ba:	463b      	mov	r3, r7
 80037bc:	220c      	movs	r2, #12
 80037be:	4619      	mov	r1, r3
 80037c0:	4807      	ldr	r0, [pc, #28]	@ (80037e0 <MX_TIM3_Init+0x114>)
 80037c2:	f002 faaf 	bl	8005d24 <HAL_TIM_PWM_ConfigChannel>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80037cc:	f7fd ffed 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80037d0:	4803      	ldr	r0, [pc, #12]	@ (80037e0 <MX_TIM3_Init+0x114>)
 80037d2:	f000 fa19 	bl	8003c08 <HAL_TIM_MspPostInit>

}
 80037d6:	bf00      	nop
 80037d8:	3738      	adds	r7, #56	@ 0x38
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200001a0 	.word	0x200001a0
 80037e4:	40000400 	.word	0x40000400

080037e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	@ 0x30
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	2224      	movs	r2, #36	@ 0x24
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 fbc4 	bl	8007f84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fc:	463b      	mov	r3, r7
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003806:	4b21      	ldr	r3, [pc, #132]	@ (800388c <MX_TIM4_Init+0xa4>)
 8003808:	4a21      	ldr	r2, [pc, #132]	@ (8003890 <MX_TIM4_Init+0xa8>)
 800380a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800380c:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <MX_TIM4_Init+0xa4>)
 800380e:	2200      	movs	r2, #0
 8003810:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003812:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <MX_TIM4_Init+0xa4>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003818:	4b1c      	ldr	r3, [pc, #112]	@ (800388c <MX_TIM4_Init+0xa4>)
 800381a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800381e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003820:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <MX_TIM4_Init+0xa4>)
 8003822:	2200      	movs	r2, #0
 8003824:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003826:	4b19      	ldr	r3, [pc, #100]	@ (800388c <MX_TIM4_Init+0xa4>)
 8003828:	2280      	movs	r2, #128	@ 0x80
 800382a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800382c:	2303      	movs	r3, #3
 800382e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003834:	2301      	movs	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800383c:	230a      	movs	r3, #10
 800383e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003840:	2300      	movs	r3, #0
 8003842:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003844:	2301      	movs	r3, #1
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003848:	2300      	movs	r3, #0
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800384c:	230a      	movs	r3, #10
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003850:	f107 030c 	add.w	r3, r7, #12
 8003854:	4619      	mov	r1, r3
 8003856:	480d      	ldr	r0, [pc, #52]	@ (800388c <MX_TIM4_Init+0xa4>)
 8003858:	f002 f910 	bl	8005a7c <HAL_TIM_Encoder_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003862:	f7fd ffa2 	bl	80017aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800386e:	463b      	mov	r3, r7
 8003870:	4619      	mov	r1, r3
 8003872:	4806      	ldr	r0, [pc, #24]	@ (800388c <MX_TIM4_Init+0xa4>)
 8003874:	f003 f916 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800387e:	f7fd ff94 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003882:	bf00      	nop
 8003884:	3730      	adds	r7, #48	@ 0x30
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200001ec 	.word	0x200001ec
 8003890:	40000800 	.word	0x40000800

08003894 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08c      	sub	sp, #48	@ 0x30
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800389a:	f107 030c 	add.w	r3, r7, #12
 800389e:	2224      	movs	r2, #36	@ 0x24
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f004 fb6e 	bl	8007f84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a8:	463b      	mov	r3, r7
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038b2:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <MX_TIM5_Init+0xa4>)
 80038b4:	4a21      	ldr	r2, [pc, #132]	@ (800393c <MX_TIM5_Init+0xa8>)
 80038b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80038b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <MX_TIM5_Init+0xa4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <MX_TIM5_Init+0xa4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80038c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003938 <MX_TIM5_Init+0xa4>)
 80038c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <MX_TIM5_Init+0xa4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038d2:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <MX_TIM5_Init+0xa4>)
 80038d4:	2280      	movs	r2, #128	@ 0x80
 80038d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038d8:	2303      	movs	r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80038e8:	230a      	movs	r3, #10
 80038ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038ec:	2300      	movs	r3, #0
 80038ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038f0:	2301      	movs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80038f8:	230a      	movs	r3, #10
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80038fc:	f107 030c 	add.w	r3, r7, #12
 8003900:	4619      	mov	r1, r3
 8003902:	480d      	ldr	r0, [pc, #52]	@ (8003938 <MX_TIM5_Init+0xa4>)
 8003904:	f002 f8ba 	bl	8005a7c <HAL_TIM_Encoder_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800390e:	f7fd ff4c 	bl	80017aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800391a:	463b      	mov	r3, r7
 800391c:	4619      	mov	r1, r3
 800391e:	4806      	ldr	r0, [pc, #24]	@ (8003938 <MX_TIM5_Init+0xa4>)
 8003920:	f003 f8c0 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800392a:	f7fd ff3e 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	3730      	adds	r7, #48	@ 0x30
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000238 	.word	0x20000238
 800393c:	40000c00 	.word	0x40000c00

08003940 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	@ 0x30
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003946:	f107 030c 	add.w	r3, r7, #12
 800394a:	2224      	movs	r2, #36	@ 0x24
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f004 fb18 	bl	8007f84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003954:	463b      	mov	r3, r7
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800395e:	4b23      	ldr	r3, [pc, #140]	@ (80039ec <MX_TIM8_Init+0xac>)
 8003960:	4a23      	ldr	r2, [pc, #140]	@ (80039f0 <MX_TIM8_Init+0xb0>)
 8003962:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003964:	4b21      	ldr	r3, [pc, #132]	@ (80039ec <MX_TIM8_Init+0xac>)
 8003966:	2200      	movs	r2, #0
 8003968:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396a:	4b20      	ldr	r3, [pc, #128]	@ (80039ec <MX_TIM8_Init+0xac>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003970:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <MX_TIM8_Init+0xac>)
 8003972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003976:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003978:	4b1c      	ldr	r3, [pc, #112]	@ (80039ec <MX_TIM8_Init+0xac>)
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800397e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <MX_TIM8_Init+0xac>)
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003984:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <MX_TIM8_Init+0xac>)
 8003986:	2280      	movs	r2, #128	@ 0x80
 8003988:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800398a:	2303      	movs	r3, #3
 800398c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003992:	2301      	movs	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800399a:	230a      	movs	r3, #10
 800399c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039a2:	2301      	movs	r3, #1
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039a6:	2300      	movs	r3, #0
 80039a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80039aa:	230a      	movs	r3, #10
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	4619      	mov	r1, r3
 80039b4:	480d      	ldr	r0, [pc, #52]	@ (80039ec <MX_TIM8_Init+0xac>)
 80039b6:	f002 f861 	bl	8005a7c <HAL_TIM_Encoder_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80039c0:	f7fd fef3 	bl	80017aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039d0:	463b      	mov	r3, r7
 80039d2:	4619      	mov	r1, r3
 80039d4:	4805      	ldr	r0, [pc, #20]	@ (80039ec <MX_TIM8_Init+0xac>)
 80039d6:	f003 f865 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80039e0:	f7fd fee3 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	3730      	adds	r7, #48	@ 0x30
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000284 	.word	0x20000284
 80039f0:	40013400 	.word	0x40013400

080039f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b090      	sub	sp, #64	@ 0x40
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5d      	ldr	r2, [pc, #372]	@ (8003b88 <HAL_TIM_Encoder_MspInit+0x194>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d128      	bne.n	8003a68 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a16:	4b5d      	ldr	r3, [pc, #372]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a22:	4b5a      	ldr	r3, [pc, #360]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2e:	4b57      	ldr	r3, [pc, #348]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	4a56      	ldr	r2, [pc, #344]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a3a:	4b54      	ldr	r3, [pc, #336]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a46:	2303      	movs	r3, #3
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003a56:	2302      	movs	r3, #2
 8003a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a5e:	4619      	mov	r1, r3
 8003a60:	484b      	ldr	r0, [pc, #300]	@ (8003b90 <HAL_TIM_Encoder_MspInit+0x19c>)
 8003a62:	f000 fbfd 	bl	8004260 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003a66:	e08a      	b.n	8003b7e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a49      	ldr	r2, [pc, #292]	@ (8003b94 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d129      	bne.n	8003ac6 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a72:	4b46      	ldr	r3, [pc, #280]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a76:	4a45      	ldr	r2, [pc, #276]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a7e:	4b43      	ldr	r3, [pc, #268]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a8a:	4b40      	ldr	r3, [pc, #256]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a96:	4b3d      	ldr	r3, [pc, #244]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003aa2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003abc:	4619      	mov	r1, r3
 8003abe:	4836      	ldr	r0, [pc, #216]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8003ac0:	f000 fbce 	bl	8004260 <HAL_GPIO_Init>
}
 8003ac4:	e05b      	b.n	8003b7e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a34      	ldr	r2, [pc, #208]	@ (8003b9c <HAL_TIM_Encoder_MspInit+0x1a8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d129      	bne.n	8003b24 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003ad6:	f043 0308 	orr.w	r3, r3, #8
 8003ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae8:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aec:	4a27      	ldr	r2, [pc, #156]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b00:	2303      	movs	r3, #3
 8003b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b10:	2302      	movs	r3, #2
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b1e:	f000 fb9f 	bl	8004260 <HAL_GPIO_Init>
}
 8003b22:	e02c      	b.n	8003b7e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d127      	bne.n	8003b7e <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b2e:	4b17      	ldr	r3, [pc, #92]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b32:	4a16      	ldr	r2, [pc, #88]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003b34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b38:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b3a:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b46:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4a:	4a10      	ldr	r2, [pc, #64]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b52:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x198>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b5e:	23c0      	movs	r3, #192	@ 0xc0
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003b6e:	2304      	movs	r3, #4
 8003b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b76:	4619      	mov	r1, r3
 8003b78:	4805      	ldr	r0, [pc, #20]	@ (8003b90 <HAL_TIM_Encoder_MspInit+0x19c>)
 8003b7a:	f000 fb71 	bl	8004260 <HAL_GPIO_Init>
}
 8003b7e:	bf00      	nop
 8003b80:	3740      	adds	r7, #64	@ 0x40
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	48000800 	.word	0x48000800
 8003b94:	40000800 	.word	0x40000800
 8003b98:	48000c00 	.word	0x48000c00
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40013400 	.word	0x40013400

08003ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bb6:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <HAL_TIM_Base_MspInit+0x5c>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	4a11      	ldr	r2, [pc, #68]	@ (8003c00 <HAL_TIM_Base_MspInit+0x5c>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <HAL_TIM_Base_MspInit+0x5c>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003bce:	e010      	b.n	8003bf2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003c04 <HAL_TIM_Base_MspInit+0x60>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <HAL_TIM_Base_MspInit+0x5c>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	4a08      	ldr	r2, [pc, #32]	@ (8003c00 <HAL_TIM_Base_MspInit+0x5c>)
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_TIM_Base_MspInit+0x5c>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40000400 	.word	0x40000400

08003c08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	@ 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c10:	f107 0314 	add.w	r3, r7, #20
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c28:	d11c      	bne.n	8003c64 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c2a:	4b21      	ldr	r3, [pc, #132]	@ (8003cb0 <HAL_TIM_MspPostInit+0xa8>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2e:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <HAL_TIM_MspPostInit+0xa8>)
 8003c30:	f043 0308 	orr.w	r3, r3, #8
 8003c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c36:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <HAL_TIM_MspPostInit+0xa8>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c42:	2340      	movs	r3, #64	@ 0x40
 8003c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003c52:	2302      	movs	r3, #2
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4815      	ldr	r0, [pc, #84]	@ (8003cb4 <HAL_TIM_MspPostInit+0xac>)
 8003c5e:	f000 faff 	bl	8004260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c62:	e020      	b.n	8003ca6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a13      	ldr	r2, [pc, #76]	@ (8003cb8 <HAL_TIM_MspPostInit+0xb0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d11b      	bne.n	8003ca6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c6e:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <HAL_TIM_MspPostInit+0xa8>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	4a0f      	ldr	r2, [pc, #60]	@ (8003cb0 <HAL_TIM_MspPostInit+0xa8>)
 8003c74:	f043 0310 	orr.w	r3, r3, #16
 8003c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <HAL_TIM_MspPostInit+0xa8>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003c86:	232c      	movs	r3, #44	@ 0x2c
 8003c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c96:	2302      	movs	r3, #2
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4806      	ldr	r0, [pc, #24]	@ (8003cbc <HAL_TIM_MspPostInit+0xb4>)
 8003ca2:	f000 fadd 	bl	8004260 <HAL_GPIO_Init>
}
 8003ca6:	bf00      	nop
 8003ca8:	3728      	adds	r7, #40	@ 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	48000c00 	.word	0x48000c00
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	48001000 	.word	0x48001000

08003cc0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003cc4:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003cc6:	4a23      	ldr	r2, [pc, #140]	@ (8003d54 <MX_UART4_Init+0x94>)
 8003cc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003cca:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003ccc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003cd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003cde:	4b1c      	ldr	r3, [pc, #112]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003ce6:	220c      	movs	r2, #12
 8003ce8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cea:	4b19      	ldr	r3, [pc, #100]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cf0:	4b17      	ldr	r3, [pc, #92]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cf6:	4b16      	ldr	r3, [pc, #88]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cfc:	4b14      	ldr	r3, [pc, #80]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d02:	4b13      	ldr	r3, [pc, #76]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003d08:	4811      	ldr	r0, [pc, #68]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003d0a:	f002 ff61 	bl	8006bd0 <HAL_UART_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003d14:	f7fd fd49 	bl	80017aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d18:	2100      	movs	r1, #0
 8003d1a:	480d      	ldr	r0, [pc, #52]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003d1c:	f003 fe52 	bl	80079c4 <HAL_UARTEx_SetTxFifoThreshold>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003d26:	f7fd fd40 	bl	80017aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4808      	ldr	r0, [pc, #32]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003d2e:	f003 fe87 	bl	8007a40 <HAL_UARTEx_SetRxFifoThreshold>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003d38:	f7fd fd37 	bl	80017aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003d3c:	4804      	ldr	r0, [pc, #16]	@ (8003d50 <MX_UART4_Init+0x90>)
 8003d3e:	f003 fe08 	bl	8007952 <HAL_UARTEx_DisableFifoMode>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003d48:	f7fd fd2f 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200002d0 	.word	0x200002d0
 8003d54:	40004c00 	.word	0x40004c00

08003d58 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d5c:	4b22      	ldr	r3, [pc, #136]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d5e:	4a23      	ldr	r2, [pc, #140]	@ (8003dec <MX_USART1_UART_Init+0x94>)
 8003d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d62:	4b21      	ldr	r3, [pc, #132]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d70:	4b1d      	ldr	r3, [pc, #116]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d76:	4b1c      	ldr	r3, [pc, #112]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d82:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d88:	4b17      	ldr	r3, [pc, #92]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d94:	4b14      	ldr	r3, [pc, #80]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003da0:	4811      	ldr	r0, [pc, #68]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003da2:	f002 ff15 	bl	8006bd0 <HAL_UART_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003dac:	f7fd fcfd 	bl	80017aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003db0:	2100      	movs	r1, #0
 8003db2:	480d      	ldr	r0, [pc, #52]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003db4:	f003 fe06 	bl	80079c4 <HAL_UARTEx_SetTxFifoThreshold>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003dbe:	f7fd fcf4 	bl	80017aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4808      	ldr	r0, [pc, #32]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003dc6:	f003 fe3b 	bl	8007a40 <HAL_UARTEx_SetRxFifoThreshold>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003dd0:	f7fd fceb 	bl	80017aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003dd4:	4804      	ldr	r0, [pc, #16]	@ (8003de8 <MX_USART1_UART_Init+0x90>)
 8003dd6:	f003 fdbc 	bl	8007952 <HAL_UARTEx_DisableFifoMode>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003de0:	f7fd fce3 	bl	80017aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000364 	.word	0x20000364
 8003dec:	40013800 	.word	0x40013800

08003df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b0a0      	sub	sp, #128	@ 0x80
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e08:	f107 0318 	add.w	r3, r7, #24
 8003e0c:	2254      	movs	r2, #84	@ 0x54
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 f8b7 	bl	8007f84 <memset>
  if(uartHandle->Instance==UART4)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f10 <HAL_UART_MspInit+0x120>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d137      	bne.n	8003e90 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003e20:	2308      	movs	r3, #8
 8003e22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e28:	f107 0318 	add.w	r3, r7, #24
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 f993 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e38:	f7fd fcb7 	bl	80017aa <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e3c:	4b35      	ldr	r3, [pc, #212]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e40:	4a34      	ldr	r2, [pc, #208]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003e42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e48:	4b32      	ldr	r3, [pc, #200]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e54:	4b2f      	ldr	r3, [pc, #188]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e58:	4a2e      	ldr	r2, [pc, #184]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e60:	4b2c      	ldr	r3, [pc, #176]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003e70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e72:	2302      	movs	r3, #2
 8003e74:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003e7e:	2305      	movs	r3, #5
 8003e80:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e82:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003e86:	4619      	mov	r1, r3
 8003e88:	4823      	ldr	r0, [pc, #140]	@ (8003f18 <HAL_UART_MspInit+0x128>)
 8003e8a:	f000 f9e9 	bl	8004260 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e8e:	e03a      	b.n	8003f06 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a21      	ldr	r2, [pc, #132]	@ (8003f1c <HAL_UART_MspInit+0x12c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d135      	bne.n	8003f06 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ea2:	f107 0318 	add.w	r3, r7, #24
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f956 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003eb2:	f7fd fc7a 	bl	80017aa <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003eb6:	4b17      	ldr	r3, [pc, #92]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eba:	4a16      	ldr	r2, [pc, #88]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ec0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ec2:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ece:	4b11      	ldr	r3, [pc, #68]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed2:	4a10      	ldr	r2, [pc, #64]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eda:	4b0e      	ldr	r3, [pc, #56]	@ (8003f14 <HAL_UART_MspInit+0x124>)
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ee6:	2330      	movs	r3, #48	@ 0x30
 8003ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eea:	2302      	movs	r3, #2
 8003eec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ef6:	2307      	movs	r3, #7
 8003ef8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003efa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003efe:	4619      	mov	r1, r3
 8003f00:	4805      	ldr	r0, [pc, #20]	@ (8003f18 <HAL_UART_MspInit+0x128>)
 8003f02:	f000 f9ad 	bl	8004260 <HAL_GPIO_Init>
}
 8003f06:	bf00      	nop
 8003f08:	3780      	adds	r7, #128	@ 0x80
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40004c00 	.word	0x40004c00
 8003f14:	40021000 	.word	0x40021000
 8003f18:	48000800 	.word	0x48000800
 8003f1c:	40013800 	.word	0x40013800

08003f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f20:	480d      	ldr	r0, [pc, #52]	@ (8003f58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f24:	f7ff faf0 	bl	8003508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f28:	480c      	ldr	r0, [pc, #48]	@ (8003f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8003f2a:	490d      	ldr	r1, [pc, #52]	@ (8003f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f64 <LoopForever+0xe>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003f30:	e002      	b.n	8003f38 <LoopCopyDataInit>

08003f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f36:	3304      	adds	r3, #4

08003f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f3c:	d3f9      	bcc.n	8003f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f40:	4c0a      	ldr	r4, [pc, #40]	@ (8003f6c <LoopForever+0x16>)
  movs r3, #0
 8003f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f44:	e001      	b.n	8003f4a <LoopFillZerobss>

08003f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f48:	3204      	adds	r2, #4

08003f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f4c:	d3fb      	bcc.n	8003f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f4e:	f004 f86d 	bl	800802c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f52:	f7fd fa01 	bl	8001358 <main>

08003f56 <LoopForever>:

LoopForever:
    b LoopForever
 8003f56:	e7fe      	b.n	8003f56 <LoopForever>
  ldr   r0, =_estack
 8003f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f60:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003f64:	080097e8 	.word	0x080097e8
  ldr r2, =_sbss
 8003f68:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003f6c:	20000548 	.word	0x20000548

08003f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f70:	e7fe      	b.n	8003f70 <ADC1_2_IRQHandler>

08003f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	f000 f93d 	bl	80041fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f82:	200f      	movs	r0, #15
 8003f84:	f000 f80e 	bl	8003fa4 <HAL_InitTick>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	71fb      	strb	r3, [r7, #7]
 8003f92:	e001      	b.n	8003f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f94:	f7ff f9c2 	bl	800331c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f98:	79fb      	ldrb	r3, [r7, #7]

}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003fb0:	4b16      	ldr	r3, [pc, #88]	@ (800400c <HAL_InitTick+0x68>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003fb8:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <HAL_InitTick+0x6c>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b13      	ldr	r3, [pc, #76]	@ (800400c <HAL_InitTick+0x68>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f93a 	bl	8004246 <HAL_SYSTICK_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	d809      	bhi.n	8003ff2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fe6:	f000 f914 	bl	8004212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fea:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <HAL_InitTick+0x70>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e007      	b.n	8004002 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
 8003ff6:	e004      	b.n	8004002 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e001      	b.n	8004002 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	2000002c 	.word	0x2000002c
 8004010:	20000024 	.word	0x20000024
 8004014:	20000028 	.word	0x20000028

08004018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <HAL_IncTick+0x1c>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_IncTick+0x20>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4413      	add	r3, r2
 8004026:	4a03      	ldr	r2, [pc, #12]	@ (8004034 <HAL_IncTick+0x1c>)
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	200003f8 	.word	0x200003f8
 8004038:	2000002c 	.word	0x2000002c

0800403c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return uwTick;
 8004040:	4b03      	ldr	r3, [pc, #12]	@ (8004050 <HAL_GetTick+0x14>)
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	200003f8 	.word	0x200003f8

08004054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800405c:	f7ff ffee 	bl	800403c <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800406c:	d004      	beq.n	8004078 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800406e:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_Delay+0x40>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004078:	bf00      	nop
 800407a:	f7ff ffdf 	bl	800403c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	429a      	cmp	r2, r3
 8004088:	d8f7      	bhi.n	800407a <HAL_Delay+0x26>
  {
  }
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	2000002c 	.word	0x2000002c

08004098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a8:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <__NVIC_SetPriorityGrouping+0x44>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040b4:	4013      	ands	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ca:	4a04      	ldr	r2, [pc, #16]	@ (80040dc <__NVIC_SetPriorityGrouping+0x44>)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	60d3      	str	r3, [r2, #12]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	e000ed00 	.word	0xe000ed00

080040e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040e4:	4b04      	ldr	r3, [pc, #16]	@ (80040f8 <__NVIC_GetPriorityGrouping+0x18>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	f003 0307 	and.w	r3, r3, #7
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db0a      	blt.n	8004126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	490c      	ldr	r1, [pc, #48]	@ (8004148 <__NVIC_SetPriority+0x4c>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440b      	add	r3, r1
 8004120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004124:	e00a      	b.n	800413c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4908      	ldr	r1, [pc, #32]	@ (800414c <__NVIC_SetPriority+0x50>)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	3b04      	subs	r3, #4
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	440b      	add	r3, r1
 800413a:	761a      	strb	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000e100 	.word	0xe000e100
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	@ 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f1c3 0307 	rsb	r3, r3, #7
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf28      	it	cs
 800416e:	2304      	movcs	r3, #4
 8004170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3304      	adds	r3, #4
 8004176:	2b06      	cmp	r3, #6
 8004178:	d902      	bls.n	8004180 <NVIC_EncodePriority+0x30>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3b03      	subs	r3, #3
 800417e:	e000      	b.n	8004182 <NVIC_EncodePriority+0x32>
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004198:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43d9      	mvns	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a8:	4313      	orrs	r3, r2
         );
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3724      	adds	r7, #36	@ 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041c8:	d301      	bcc.n	80041ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ca:	2301      	movs	r3, #1
 80041cc:	e00f      	b.n	80041ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ce:	4a0a      	ldr	r2, [pc, #40]	@ (80041f8 <SysTick_Config+0x40>)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041d6:	210f      	movs	r1, #15
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041dc:	f7ff ff8e 	bl	80040fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041e0:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <SysTick_Config+0x40>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041e6:	4b04      	ldr	r3, [pc, #16]	@ (80041f8 <SysTick_Config+0x40>)
 80041e8:	2207      	movs	r2, #7
 80041ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	e000e010 	.word	0xe000e010

080041fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff47 	bl	8004098 <__NVIC_SetPriorityGrouping>
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	4603      	mov	r3, r0
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004220:	f7ff ff5e 	bl	80040e0 <__NVIC_GetPriorityGrouping>
 8004224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f7ff ff90 	bl	8004150 <NVIC_EncodePriority>
 8004230:	4602      	mov	r2, r0
 8004232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff5f 	bl	80040fc <__NVIC_SetPriority>
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffb2 	bl	80041b8 <SysTick_Config>
 8004254:	4603      	mov	r3, r0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800426e:	e15a      	b.n	8004526 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 814c 	beq.w	8004520 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d005      	beq.n	80042a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800429c:	2b02      	cmp	r3, #2
 800429e:	d130      	bne.n	8004302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042d6:	2201      	movs	r2, #1
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 0201 	and.w	r2, r3, #1
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b03      	cmp	r3, #3
 800430c:	d017      	beq.n	800433e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	2203      	movs	r2, #3
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d123      	bne.n	8004392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	220f      	movs	r2, #15
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	08da      	lsrs	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3208      	adds	r2, #8
 800438c:	6939      	ldr	r1, [r7, #16]
 800438e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	2203      	movs	r2, #3
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0203 	and.w	r2, r3, #3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80a6 	beq.w	8004520 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004544 <HAL_GPIO_Init+0x2e4>)
 80043d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004544 <HAL_GPIO_Init+0x2e4>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6613      	str	r3, [r2, #96]	@ 0x60
 80043e0:	4b58      	ldr	r3, [pc, #352]	@ (8004544 <HAL_GPIO_Init+0x2e4>)
 80043e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ec:	4a56      	ldr	r2, [pc, #344]	@ (8004548 <HAL_GPIO_Init+0x2e8>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	3302      	adds	r3, #2
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	220f      	movs	r2, #15
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004416:	d01f      	beq.n	8004458 <HAL_GPIO_Init+0x1f8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a4c      	ldr	r2, [pc, #304]	@ (800454c <HAL_GPIO_Init+0x2ec>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d019      	beq.n	8004454 <HAL_GPIO_Init+0x1f4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a4b      	ldr	r2, [pc, #300]	@ (8004550 <HAL_GPIO_Init+0x2f0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_GPIO_Init+0x1f0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a4a      	ldr	r2, [pc, #296]	@ (8004554 <HAL_GPIO_Init+0x2f4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00d      	beq.n	800444c <HAL_GPIO_Init+0x1ec>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a49      	ldr	r2, [pc, #292]	@ (8004558 <HAL_GPIO_Init+0x2f8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <HAL_GPIO_Init+0x1e8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a48      	ldr	r2, [pc, #288]	@ (800455c <HAL_GPIO_Init+0x2fc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_GPIO_Init+0x1e4>
 8004440:	2305      	movs	r3, #5
 8004442:	e00a      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004444:	2306      	movs	r3, #6
 8004446:	e008      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004448:	2304      	movs	r3, #4
 800444a:	e006      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 800444c:	2303      	movs	r3, #3
 800444e:	e004      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004450:	2302      	movs	r3, #2
 8004452:	e002      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004458:	2300      	movs	r3, #0
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	f002 0203 	and.w	r2, r2, #3
 8004460:	0092      	lsls	r2, r2, #2
 8004462:	4093      	lsls	r3, r2
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800446a:	4937      	ldr	r1, [pc, #220]	@ (8004548 <HAL_GPIO_Init+0x2e8>)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	3302      	adds	r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004478:	4b39      	ldr	r3, [pc, #228]	@ (8004560 <HAL_GPIO_Init+0x300>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43db      	mvns	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800449c:	4a30      	ldr	r2, [pc, #192]	@ (8004560 <HAL_GPIO_Init+0x300>)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044c6:	4a26      	ldr	r2, [pc, #152]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044cc:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800451a:	4a11      	ldr	r2, [pc, #68]	@ (8004560 <HAL_GPIO_Init+0x300>)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3301      	adds	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	f47f ae9d 	bne.w	8004270 <HAL_GPIO_Init+0x10>
  }
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40021000 	.word	0x40021000
 8004548:	40010000 	.word	0x40010000
 800454c:	48000400 	.word	0x48000400
 8004550:	48000800 	.word	0x48000800
 8004554:	48000c00 	.word	0x48000c00
 8004558:	48001000 	.word	0x48001000
 800455c:	48001400 	.word	0x48001400
 8004560:	40010400 	.word	0x40010400

08004564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	807b      	strh	r3, [r7, #2]
 8004570:	4613      	mov	r3, r2
 8004572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004574:	787b      	ldrb	r3, [r7, #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004580:	e002      	b.n	8004588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004582:	887a      	ldrh	r2, [r7, #2]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d141      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045a2:	4b4b      	ldr	r3, [pc, #300]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ae:	d131      	bne.n	8004614 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045b0:	4b47      	ldr	r3, [pc, #284]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045b6:	4a46      	ldr	r2, [pc, #280]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045c0:	4b43      	ldr	r3, [pc, #268]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045c8:	4a41      	ldr	r2, [pc, #260]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045d0:	4b40      	ldr	r3, [pc, #256]	@ (80046d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2232      	movs	r2, #50	@ 0x32
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	4a3f      	ldr	r2, [pc, #252]	@ (80046d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	0c9b      	lsrs	r3, r3, #18
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e6:	e002      	b.n	80045ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ee:	4b38      	ldr	r3, [pc, #224]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fa:	d102      	bne.n	8004602 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f2      	bne.n	80045e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004602:	4b33      	ldr	r3, [pc, #204]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460e:	d158      	bne.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e057      	b.n	80046c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004614:	4b2e      	ldr	r3, [pc, #184]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461a:	4a2d      	ldr	r2, [pc, #180]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004620:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004624:	e04d      	b.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462c:	d141      	bne.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800462e:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463a:	d131      	bne.n	80046a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800463c:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004642:	4a23      	ldr	r2, [pc, #140]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800464c:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004654:	4a1e      	ldr	r2, [pc, #120]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800465a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800465c:	4b1d      	ldr	r3, [pc, #116]	@ (80046d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2232      	movs	r2, #50	@ 0x32
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	0c9b      	lsrs	r3, r3, #18
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004672:	e002      	b.n	800467a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b01      	subs	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800467a:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004686:	d102      	bne.n	800468e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f2      	bne.n	8004674 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800468e:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469a:	d112      	bne.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e011      	b.n	80046c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046a6:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046b0:	e007      	b.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046b2:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046ba:	4a05      	ldr	r2, [pc, #20]	@ (80046d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40007000 	.word	0x40007000
 80046d4:	20000024 	.word	0x20000024
 80046d8:	431bde83 	.word	0x431bde83

080046dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a04      	ldr	r2, [pc, #16]	@ (80046f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80046e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ea:	6093      	str	r3, [r2, #8]
}
 80046ec:	bf00      	nop
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40007000 	.word	0x40007000

080046fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e2fe      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d075      	beq.n	8004806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471a:	4b97      	ldr	r3, [pc, #604]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004724:	4b94      	ldr	r3, [pc, #592]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d102      	bne.n	800473a <HAL_RCC_OscConfig+0x3e>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b03      	cmp	r3, #3
 8004738:	d002      	beq.n	8004740 <HAL_RCC_OscConfig+0x44>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d10b      	bne.n	8004758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004740:	4b8d      	ldr	r3, [pc, #564]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d05b      	beq.n	8004804 <HAL_RCC_OscConfig+0x108>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d157      	bne.n	8004804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e2d9      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004760:	d106      	bne.n	8004770 <HAL_RCC_OscConfig+0x74>
 8004762:	4b85      	ldr	r3, [pc, #532]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a84      	ldr	r2, [pc, #528]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e01d      	b.n	80047ac <HAL_RCC_OscConfig+0xb0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004778:	d10c      	bne.n	8004794 <HAL_RCC_OscConfig+0x98>
 800477a:	4b7f      	ldr	r3, [pc, #508]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7e      	ldr	r2, [pc, #504]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	4b7c      	ldr	r3, [pc, #496]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a7b      	ldr	r2, [pc, #492]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e00b      	b.n	80047ac <HAL_RCC_OscConfig+0xb0>
 8004794:	4b78      	ldr	r3, [pc, #480]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a77      	ldr	r2, [pc, #476]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800479a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4b75      	ldr	r3, [pc, #468]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a74      	ldr	r2, [pc, #464]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80047a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d013      	beq.n	80047dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7ff fc42 	bl	800403c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047bc:	f7ff fc3e 	bl	800403c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	@ 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e29e      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0xc0>
 80047da:	e014      	b.n	8004806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7ff fc2e 	bl	800403c <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e4:	f7ff fc2a 	bl	800403c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b64      	cmp	r3, #100	@ 0x64
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e28a      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047f6:	4b60      	ldr	r3, [pc, #384]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0xe8>
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d075      	beq.n	80048fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004812:	4b59      	ldr	r3, [pc, #356]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800481c:	4b56      	ldr	r3, [pc, #344]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	d102      	bne.n	8004832 <HAL_RCC_OscConfig+0x136>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d002      	beq.n	8004838 <HAL_RCC_OscConfig+0x13c>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b04      	cmp	r3, #4
 8004836:	d11f      	bne.n	8004878 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004838:	4b4f      	ldr	r3, [pc, #316]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_OscConfig+0x154>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e25d      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b49      	ldr	r3, [pc, #292]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	4946      	ldr	r1, [pc, #280]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004864:	4b45      	ldr	r3, [pc, #276]	@ (800497c <HAL_RCC_OscConfig+0x280>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fb9b 	bl	8003fa4 <HAL_InitTick>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d043      	beq.n	80048fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e249      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d023      	beq.n	80048c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004880:	4b3d      	ldr	r3, [pc, #244]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3c      	ldr	r2, [pc, #240]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800488a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7ff fbd6 	bl	800403c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004894:	f7ff fbd2 	bl	800403c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e232      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a6:	4b34      	ldr	r3, [pc, #208]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b2:	4b31      	ldr	r3, [pc, #196]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	492d      	ldr	r1, [pc, #180]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
 80048c6:	e01a      	b.n	80048fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7ff fbb2 	bl	800403c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048dc:	f7ff fbae 	bl	800403c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e20e      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ee:	4b22      	ldr	r3, [pc, #136]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1e0>
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d041      	beq.n	800498e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01c      	beq.n	800494c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004912:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004918:	4a17      	ldr	r2, [pc, #92]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7ff fb8b 	bl	800403c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492a:	f7ff fb87 	bl	800403c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e1e7      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800493c:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800493e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ef      	beq.n	800492a <HAL_RCC_OscConfig+0x22e>
 800494a:	e020      	b.n	800498e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494c:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 800494e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004952:	4a09      	ldr	r2, [pc, #36]	@ (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7ff fb6e 	bl	800403c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004962:	e00d      	b.n	8004980 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004964:	f7ff fb6a 	bl	800403c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d906      	bls.n	8004980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1ca      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
 800497c:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004980:	4b8c      	ldr	r3, [pc, #560]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1ea      	bne.n	8004964 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80a6 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800499c:	2300      	movs	r3, #0
 800499e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049a0:	4b84      	ldr	r3, [pc, #528]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_OscConfig+0x2b4>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x2b6>
 80049b0:	2300      	movs	r3, #0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	4b7f      	ldr	r3, [pc, #508]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	4a7e      	ldr	r2, [pc, #504]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049c2:	4b7c      	ldr	r3, [pc, #496]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049ce:	2301      	movs	r3, #1
 80049d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d2:	4b79      	ldr	r3, [pc, #484]	@ (8004bb8 <HAL_RCC_OscConfig+0x4bc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d118      	bne.n	8004a10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049de:	4b76      	ldr	r3, [pc, #472]	@ (8004bb8 <HAL_RCC_OscConfig+0x4bc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a75      	ldr	r2, [pc, #468]	@ (8004bb8 <HAL_RCC_OscConfig+0x4bc>)
 80049e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ea:	f7ff fb27 	bl	800403c <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f2:	f7ff fb23 	bl	800403c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e183      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a04:	4b6c      	ldr	r3, [pc, #432]	@ (8004bb8 <HAL_RCC_OscConfig+0x4bc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d108      	bne.n	8004a2a <HAL_RCC_OscConfig+0x32e>
 8004a18:	4b66      	ldr	r3, [pc, #408]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	4a65      	ldr	r2, [pc, #404]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a28:	e024      	b.n	8004a74 <HAL_RCC_OscConfig+0x378>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d110      	bne.n	8004a54 <HAL_RCC_OscConfig+0x358>
 8004a32:	4b60      	ldr	r3, [pc, #384]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a38:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a3a:	f043 0304 	orr.w	r3, r3, #4
 8004a3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a42:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a48:	4a5a      	ldr	r2, [pc, #360]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a52:	e00f      	b.n	8004a74 <HAL_RCC_OscConfig+0x378>
 8004a54:	4b57      	ldr	r3, [pc, #348]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	4a56      	ldr	r2, [pc, #344]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a64:	4b53      	ldr	r3, [pc, #332]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	4a52      	ldr	r2, [pc, #328]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d016      	beq.n	8004aaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7ff fade 	bl	800403c <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a84:	f7ff fada 	bl	800403c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e138      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9a:	4b46      	ldr	r3, [pc, #280]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0ed      	beq.n	8004a84 <HAL_RCC_OscConfig+0x388>
 8004aa8:	e015      	b.n	8004ad6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7ff fac7 	bl	800403c <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7ff fac3 	bl	800403c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e121      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1ed      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ad6:	7ffb      	ldrb	r3, [r7, #31]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004adc:	4b35      	ldr	r3, [pc, #212]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae0:	4a34      	ldr	r2, [pc, #208]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ae6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d03c      	beq.n	8004b6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01c      	beq.n	8004b36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004afc:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b02:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7ff fa96 	bl	800403c <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b14:	f7ff fa92 	bl	800403c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0f2      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b26:	4b23      	ldr	r3, [pc, #140]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ef      	beq.n	8004b14 <HAL_RCC_OscConfig+0x418>
 8004b34:	e01b      	b.n	8004b6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b36:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b46:	f7ff fa79 	bl	800403c <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b4e:	f7ff fa75 	bl	800403c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e0d5      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b60:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1ef      	bne.n	8004b4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80c9 	beq.w	8004d0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b78:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
 8004b80:	2b0c      	cmp	r3, #12
 8004b82:	f000 8083 	beq.w	8004c8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d15e      	bne.n	8004c4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a08      	ldr	r2, [pc, #32]	@ (8004bb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7ff fa4f 	bl	800403c <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba0:	e00c      	b.n	8004bbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba2:	f7ff fa4b 	bl	800403c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d905      	bls.n	8004bbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e0ab      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bbc:	4b55      	ldr	r3, [pc, #340]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ec      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bc8:	4b52      	ldr	r3, [pc, #328]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	4b52      	ldr	r3, [pc, #328]	@ (8004d18 <HAL_RCC_OscConfig+0x61c>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6a11      	ldr	r1, [r2, #32]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0112      	lsls	r2, r2, #4
 8004bdc:	4311      	orrs	r1, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004be2:	0212      	lsls	r2, r2, #8
 8004be4:	4311      	orrs	r1, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004bea:	0852      	lsrs	r2, r2, #1
 8004bec:	3a01      	subs	r2, #1
 8004bee:	0552      	lsls	r2, r2, #21
 8004bf0:	4311      	orrs	r1, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bf6:	0852      	lsrs	r2, r2, #1
 8004bf8:	3a01      	subs	r2, #1
 8004bfa:	0652      	lsls	r2, r2, #25
 8004bfc:	4311      	orrs	r1, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c02:	06d2      	lsls	r2, r2, #27
 8004c04:	430a      	orrs	r2, r1
 8004c06:	4943      	ldr	r1, [pc, #268]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0c:	4b41      	ldr	r3, [pc, #260]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a40      	ldr	r2, [pc, #256]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c18:	4b3e      	ldr	r3, [pc, #248]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7ff fa0a 	bl	800403c <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7ff fa06 	bl	800403c <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e066      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3e:	4b35      	ldr	r3, [pc, #212]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0x530>
 8004c4a:	e05e      	b.n	8004d0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4c:	4b31      	ldr	r3, [pc, #196]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a30      	ldr	r2, [pc, #192]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7ff f9f0 	bl	800403c <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7ff f9ec 	bl	800403c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e04c      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c72:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c7e:	4b25      	ldr	r3, [pc, #148]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	4924      	ldr	r1, [pc, #144]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c84:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <HAL_RCC_OscConfig+0x620>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	60cb      	str	r3, [r1, #12]
 8004c8a:	e03e      	b.n	8004d0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e039      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c98:	4b1e      	ldr	r3, [pc, #120]	@ (8004d14 <HAL_RCC_OscConfig+0x618>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 0203 	and.w	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d12c      	bne.n	8004d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d123      	bne.n	8004d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d11b      	bne.n	8004d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d113      	bne.n	8004d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	3b01      	subs	r3, #1
 8004cec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d109      	bne.n	8004d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	019f800c 	.word	0x019f800c
 8004d1c:	feeefffc 	.word	0xfeeefffc

08004d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e11e      	b.n	8004f76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d38:	4b91      	ldr	r3, [pc, #580]	@ (8004f80 <HAL_RCC_ClockConfig+0x260>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d910      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b8e      	ldr	r3, [pc, #568]	@ (8004f80 <HAL_RCC_ClockConfig+0x260>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 020f 	bic.w	r2, r3, #15
 8004d4e:	498c      	ldr	r1, [pc, #560]	@ (8004f80 <HAL_RCC_ClockConfig+0x260>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b8a      	ldr	r3, [pc, #552]	@ (8004f80 <HAL_RCC_ClockConfig+0x260>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e106      	b.n	8004f76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d073      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d129      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d7c:	4b81      	ldr	r3, [pc, #516]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0f4      	b.n	8004f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d8c:	f000 f99e 	bl	80050cc <RCC_GetSysClockFreqFromPLLSource>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4a7c      	ldr	r2, [pc, #496]	@ (8004f88 <HAL_RCC_ClockConfig+0x268>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d93f      	bls.n	8004e1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d033      	beq.n	8004e1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d12f      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dba:	4b72      	ldr	r3, [pc, #456]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc2:	4a70      	ldr	r2, [pc, #448]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dca:	2380      	movs	r3, #128	@ 0x80
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e024      	b.n	8004e1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0c6      	b.n	8004f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de8:	4b66      	ldr	r3, [pc, #408]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0be      	b.n	8004f76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004df8:	f000 f8ce 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4a61      	ldr	r2, [pc, #388]	@ (8004f88 <HAL_RCC_ClockConfig+0x268>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d909      	bls.n	8004e1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e06:	4b5f      	ldr	r3, [pc, #380]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e0e:	4a5d      	ldr	r2, [pc, #372]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f023 0203 	bic.w	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	4957      	ldr	r1, [pc, #348]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2c:	f7ff f906 	bl	800403c <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e34:	f7ff f902 	bl	800403c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e095      	b.n	8004f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 020c 	and.w	r2, r3, #12
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d1eb      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d023      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e74:	4b43      	ldr	r3, [pc, #268]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a42      	ldr	r2, [pc, #264]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e94:	4a3b      	ldr	r2, [pc, #236]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b39      	ldr	r3, [pc, #228]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4936      	ldr	r1, [pc, #216]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b80      	cmp	r3, #128	@ 0x80
 8004eb4:	d105      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004eb6:	4b33      	ldr	r3, [pc, #204]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	4a32      	ldr	r2, [pc, #200]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ec0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f80 <HAL_RCC_ClockConfig+0x260>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d21d      	bcs.n	8004f0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f80 <HAL_RCC_ClockConfig+0x260>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f023 020f 	bic.w	r2, r3, #15
 8004ed8:	4929      	ldr	r1, [pc, #164]	@ (8004f80 <HAL_RCC_ClockConfig+0x260>)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ee0:	f7ff f8ac 	bl	800403c <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee8:	f7ff f8a8 	bl	800403c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e03b      	b.n	8004f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b20      	ldr	r3, [pc, #128]	@ (8004f80 <HAL_RCC_ClockConfig+0x260>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1ed      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f18:	4b1a      	ldr	r3, [pc, #104]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4917      	ldr	r1, [pc, #92]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f36:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	490f      	ldr	r1, [pc, #60]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f4a:	f000 f825 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <HAL_RCC_ClockConfig+0x264>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	490c      	ldr	r1, [pc, #48]	@ (8004f8c <HAL_RCC_ClockConfig+0x26c>)
 8004f5c:	5ccb      	ldrb	r3, [r1, r3]
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	fa22 f303 	lsr.w	r3, r2, r3
 8004f66:	4a0a      	ldr	r2, [pc, #40]	@ (8004f90 <HAL_RCC_ClockConfig+0x270>)
 8004f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f94 <HAL_RCC_ClockConfig+0x274>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff f818 	bl	8003fa4 <HAL_InitTick>
 8004f74:	4603      	mov	r3, r0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40022000 	.word	0x40022000
 8004f84:	40021000 	.word	0x40021000
 8004f88:	04c4b400 	.word	0x04c4b400
 8004f8c:	08009608 	.word	0x08009608
 8004f90:	20000024 	.word	0x20000024
 8004f94:	20000028 	.word	0x20000028

08004f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d102      	bne.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004faa:	4b2a      	ldr	r3, [pc, #168]	@ (8005054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	e047      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d102      	bne.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fbc:	4b26      	ldr	r3, [pc, #152]	@ (8005058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	e03e      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004fc2:	4b23      	ldr	r3, [pc, #140]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d136      	bne.n	800503c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fce:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d10c      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fec:	4a1a      	ldr	r2, [pc, #104]	@ (8005058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	4a16      	ldr	r2, [pc, #88]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ff6:	68d2      	ldr	r2, [r2, #12]
 8004ff8:	0a12      	lsrs	r2, r2, #8
 8004ffa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	617b      	str	r3, [r7, #20]
      break;
 8005004:	e00c      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005006:	4a13      	ldr	r2, [pc, #76]	@ (8005054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	4a10      	ldr	r2, [pc, #64]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005010:	68d2      	ldr	r2, [r2, #12]
 8005012:	0a12      	lsrs	r2, r2, #8
 8005014:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]
      break;
 800501e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	0e5b      	lsrs	r3, r3, #25
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	3301      	adds	r3, #1
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	e001      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005040:	693b      	ldr	r3, [r7, #16]
}
 8005042:	4618      	mov	r0, r3
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	00f42400 	.word	0x00f42400
 8005058:	007a1200 	.word	0x007a1200

0800505c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005060:	4b03      	ldr	r3, [pc, #12]	@ (8005070 <HAL_RCC_GetHCLKFreq+0x14>)
 8005062:	681b      	ldr	r3, [r3, #0]
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000024 	.word	0x20000024

08005074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005078:	f7ff fff0 	bl	800505c <HAL_RCC_GetHCLKFreq>
 800507c:	4602      	mov	r2, r0
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	4904      	ldr	r1, [pc, #16]	@ (800509c <HAL_RCC_GetPCLK1Freq+0x28>)
 800508a:	5ccb      	ldrb	r3, [r1, r3]
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000
 800509c:	08009618 	.word	0x08009618

080050a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050a4:	f7ff ffda 	bl	800505c <HAL_RCC_GetHCLKFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	0adb      	lsrs	r3, r3, #11
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40021000 	.word	0x40021000
 80050c8:	08009618 	.word	0x08009618

080050cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050d2:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050dc:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d10c      	bne.n	800510a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050f0:	4a17      	ldr	r2, [pc, #92]	@ (8005150 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	4a14      	ldr	r2, [pc, #80]	@ (800514c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050fa:	68d2      	ldr	r2, [r2, #12]
 80050fc:	0a12      	lsrs	r2, r2, #8
 80050fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	617b      	str	r3, [r7, #20]
    break;
 8005108:	e00c      	b.n	8005124 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800510a:	4a12      	ldr	r2, [pc, #72]	@ (8005154 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005112:	4a0e      	ldr	r2, [pc, #56]	@ (800514c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005114:	68d2      	ldr	r2, [r2, #12]
 8005116:	0a12      	lsrs	r2, r2, #8
 8005118:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	617b      	str	r3, [r7, #20]
    break;
 8005122:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005124:	4b09      	ldr	r3, [pc, #36]	@ (800514c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	0e5b      	lsrs	r3, r3, #25
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	3301      	adds	r3, #1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800513e:	687b      	ldr	r3, [r7, #4]
}
 8005140:	4618      	mov	r0, r3
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40021000 	.word	0x40021000
 8005150:	007a1200 	.word	0x007a1200
 8005154:	00f42400 	.word	0x00f42400

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005160:	2300      	movs	r3, #0
 8005162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005164:	2300      	movs	r3, #0
 8005166:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8098 	beq.w	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517a:	4b43      	ldr	r3, [pc, #268]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	4b40      	ldr	r3, [pc, #256]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518a:	4a3f      	ldr	r2, [pc, #252]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005190:	6593      	str	r3, [r2, #88]	@ 0x58
 8005192:	4b3d      	ldr	r3, [pc, #244]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800519e:	2301      	movs	r3, #1
 80051a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a2:	4b3a      	ldr	r3, [pc, #232]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a39      	ldr	r2, [pc, #228]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ae:	f7fe ff45 	bl	800403c <HAL_GetTick>
 80051b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b4:	e009      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b6:	f7fe ff41 	bl	800403c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d902      	bls.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	74fb      	strb	r3, [r7, #19]
        break;
 80051c8:	e005      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ca:	4b30      	ldr	r3, [pc, #192]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0ef      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051d6:	7cfb      	ldrb	r3, [r7, #19]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d159      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01e      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d019      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051f8:	4b23      	ldr	r3, [pc, #140]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005204:	4b20      	ldr	r3, [pc, #128]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	4a1f      	ldr	r2, [pc, #124]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800520c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005214:	4b1c      	ldr	r3, [pc, #112]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521a:	4a1b      	ldr	r2, [pc, #108]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800521c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005224:	4a18      	ldr	r2, [pc, #96]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005236:	f7fe ff01 	bl	800403c <HAL_GetTick>
 800523a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523c:	e00b      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fe fefd 	bl	800403c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524c:	4293      	cmp	r3, r2
 800524e:	d902      	bls.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	74fb      	strb	r3, [r7, #19]
            break;
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005256:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ec      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005264:	7cfb      	ldrb	r3, [r7, #19]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800526a:	4b07      	ldr	r3, [pc, #28]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005278:	4903      	ldr	r1, [pc, #12]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005280:	e008      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	74bb      	strb	r3, [r7, #18]
 8005286:	e005      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005288:	40021000 	.word	0x40021000
 800528c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005294:	7c7b      	ldrb	r3, [r7, #17]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d105      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800529a:	4ba7      	ldr	r3, [pc, #668]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529e:	4aa6      	ldr	r2, [pc, #664]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052b2:	4ba1      	ldr	r3, [pc, #644]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b8:	f023 0203 	bic.w	r2, r3, #3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	499d      	ldr	r1, [pc, #628]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052d4:	4b98      	ldr	r3, [pc, #608]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052da:	f023 020c 	bic.w	r2, r3, #12
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	4995      	ldr	r1, [pc, #596]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052f6:	4b90      	ldr	r3, [pc, #576]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	498c      	ldr	r1, [pc, #560]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005318:	4b87      	ldr	r3, [pc, #540]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	4984      	ldr	r1, [pc, #528]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800533a:	4b7f      	ldr	r3, [pc, #508]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	497b      	ldr	r1, [pc, #492]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800535c:	4b76      	ldr	r3, [pc, #472]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005362:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	4973      	ldr	r1, [pc, #460]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800537e:	4b6e      	ldr	r3, [pc, #440]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005384:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	496a      	ldr	r1, [pc, #424]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053a0:	4b65      	ldr	r3, [pc, #404]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	4962      	ldr	r1, [pc, #392]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	4959      	ldr	r1, [pc, #356]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053e4:	4b54      	ldr	r3, [pc, #336]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053ea:	f023 0203 	bic.w	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	4951      	ldr	r1, [pc, #324]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005406:	4b4c      	ldr	r3, [pc, #304]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	4948      	ldr	r1, [pc, #288]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d015      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005428:	4b43      	ldr	r3, [pc, #268]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005436:	4940      	ldr	r1, [pc, #256]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005446:	d105      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005448:	4b3b      	ldr	r3, [pc, #236]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a3a      	ldr	r2, [pc, #232]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005452:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800545c:	2b00      	cmp	r3, #0
 800545e:	d015      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005460:	4b35      	ldr	r3, [pc, #212]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546e:	4932      	ldr	r1, [pc, #200]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800547e:	d105      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005480:	4b2d      	ldr	r3, [pc, #180]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a2c      	ldr	r2, [pc, #176]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800548a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d015      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005498:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a6:	4924      	ldr	r1, [pc, #144]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054b6:	d105      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d015      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d0:	4b19      	ldr	r3, [pc, #100]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054de:	4916      	ldr	r1, [pc, #88]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ee:	d105      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f0:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a10      	ldr	r2, [pc, #64]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d019      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005508:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	4908      	ldr	r1, [pc, #32]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005526:	d109      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005528:	4b03      	ldr	r3, [pc, #12]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	4a02      	ldr	r2, [pc, #8]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005532:	60d3      	str	r3, [r2, #12]
 8005534:	e002      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005548:	4b29      	ldr	r3, [pc, #164]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005556:	4926      	ldr	r1, [pc, #152]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005566:	d105      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005568:	4b21      	ldr	r3, [pc, #132]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a20      	ldr	r2, [pc, #128]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800556e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005572:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d015      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005580:	4b1b      	ldr	r3, [pc, #108]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005586:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558e:	4918      	ldr	r1, [pc, #96]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559e:	d105      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055a0:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4a12      	ldr	r2, [pc, #72]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d015      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055b8:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c6:	490a      	ldr	r1, [pc, #40]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055d6:	d105      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d8:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000

080055f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e049      	b.n	800569a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe fac2 	bl	8003ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f000 fd96 	bl	8006164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d001      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e054      	b.n	8005766 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a26      	ldr	r2, [pc, #152]	@ (8005774 <HAL_TIM_Base_Start_IT+0xd0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d022      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0x80>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e6:	d01d      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0x80>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a22      	ldr	r2, [pc, #136]	@ (8005778 <HAL_TIM_Base_Start_IT+0xd4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d018      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0x80>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a21      	ldr	r2, [pc, #132]	@ (800577c <HAL_TIM_Base_Start_IT+0xd8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d013      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0x80>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1f      	ldr	r2, [pc, #124]	@ (8005780 <HAL_TIM_Base_Start_IT+0xdc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00e      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0x80>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1e      	ldr	r2, [pc, #120]	@ (8005784 <HAL_TIM_Base_Start_IT+0xe0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d009      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0x80>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1c      	ldr	r2, [pc, #112]	@ (8005788 <HAL_TIM_Base_Start_IT+0xe4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0x80>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1b      	ldr	r2, [pc, #108]	@ (800578c <HAL_TIM_Base_Start_IT+0xe8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d115      	bne.n	8005750 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <HAL_TIM_Base_Start_IT+0xec>)
 800572c:	4013      	ands	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b06      	cmp	r3, #6
 8005734:	d015      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0xbe>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800573c:	d011      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574e:	e008      	b.n	8005762 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e000      	b.n	8005764 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40014000 	.word	0x40014000
 800578c:	40015000 	.word	0x40015000
 8005790:	00010007 	.word	0x00010007

08005794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e049      	b.n	800583a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f841 	bl	8005842 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 fcc6 	bl	8006164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <HAL_TIM_PWM_Start+0x24>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e03c      	b.n	80058f6 <HAL_TIM_PWM_Start+0x9e>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b04      	cmp	r3, #4
 8005880:	d109      	bne.n	8005896 <HAL_TIM_PWM_Start+0x3e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	e02f      	b.n	80058f6 <HAL_TIM_PWM_Start+0x9e>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d109      	bne.n	80058b0 <HAL_TIM_PWM_Start+0x58>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e022      	b.n	80058f6 <HAL_TIM_PWM_Start+0x9e>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b0c      	cmp	r3, #12
 80058b4:	d109      	bne.n	80058ca <HAL_TIM_PWM_Start+0x72>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	bf14      	ite	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	2300      	moveq	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e015      	b.n	80058f6 <HAL_TIM_PWM_Start+0x9e>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d109      	bne.n	80058e4 <HAL_TIM_PWM_Start+0x8c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	e008      	b.n	80058f6 <HAL_TIM_PWM_Start+0x9e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0a6      	b.n	8005a4c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <HAL_TIM_PWM_Start+0xb6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800590c:	e023      	b.n	8005956 <HAL_TIM_PWM_Start+0xfe>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b04      	cmp	r3, #4
 8005912:	d104      	bne.n	800591e <HAL_TIM_PWM_Start+0xc6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800591c:	e01b      	b.n	8005956 <HAL_TIM_PWM_Start+0xfe>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d104      	bne.n	800592e <HAL_TIM_PWM_Start+0xd6>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800592c:	e013      	b.n	8005956 <HAL_TIM_PWM_Start+0xfe>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b0c      	cmp	r3, #12
 8005932:	d104      	bne.n	800593e <HAL_TIM_PWM_Start+0xe6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800593c:	e00b      	b.n	8005956 <HAL_TIM_PWM_Start+0xfe>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b10      	cmp	r3, #16
 8005942:	d104      	bne.n	800594e <HAL_TIM_PWM_Start+0xf6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800594c:	e003      	b.n	8005956 <HAL_TIM_PWM_Start+0xfe>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2201      	movs	r2, #1
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f001 f87a 	bl	8006a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a3a      	ldr	r2, [pc, #232]	@ (8005a54 <HAL_TIM_PWM_Start+0x1fc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIM_PWM_Start+0x148>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a39      	ldr	r2, [pc, #228]	@ (8005a58 <HAL_TIM_PWM_Start+0x200>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_TIM_PWM_Start+0x148>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a37      	ldr	r2, [pc, #220]	@ (8005a5c <HAL_TIM_PWM_Start+0x204>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIM_PWM_Start+0x148>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a36      	ldr	r2, [pc, #216]	@ (8005a60 <HAL_TIM_PWM_Start+0x208>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_PWM_Start+0x148>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a34      	ldr	r2, [pc, #208]	@ (8005a64 <HAL_TIM_PWM_Start+0x20c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_PWM_Start+0x148>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a33      	ldr	r2, [pc, #204]	@ (8005a68 <HAL_TIM_PWM_Start+0x210>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_TIM_PWM_Start+0x14c>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <HAL_TIM_PWM_Start+0x14e>
 80059a4:	2300      	movs	r3, #0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a25      	ldr	r2, [pc, #148]	@ (8005a54 <HAL_TIM_PWM_Start+0x1fc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d022      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x1b2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059cc:	d01d      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x1b2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <HAL_TIM_PWM_Start+0x214>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d018      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x1b2>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a24      	ldr	r2, [pc, #144]	@ (8005a70 <HAL_TIM_PWM_Start+0x218>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x1b2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a23      	ldr	r2, [pc, #140]	@ (8005a74 <HAL_TIM_PWM_Start+0x21c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x1b2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a19      	ldr	r2, [pc, #100]	@ (8005a58 <HAL_TIM_PWM_Start+0x200>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x1b2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a18      	ldr	r2, [pc, #96]	@ (8005a5c <HAL_TIM_PWM_Start+0x204>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x1b2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a18      	ldr	r2, [pc, #96]	@ (8005a68 <HAL_TIM_PWM_Start+0x210>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d115      	bne.n	8005a36 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	4b19      	ldr	r3, [pc, #100]	@ (8005a78 <HAL_TIM_PWM_Start+0x220>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d015      	beq.n	8005a48 <HAL_TIM_PWM_Start+0x1f0>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a22:	d011      	beq.n	8005a48 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a34:	e008      	b.n	8005a48 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0201 	orr.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e000      	b.n	8005a4a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40013400 	.word	0x40013400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800
 8005a68:	40015000 	.word	0x40015000
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800
 8005a74:	40000c00 	.word	0x40000c00
 8005a78:	00010007 	.word	0x00010007

08005a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e097      	b.n	8005bc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fd ffa5 	bl	80039f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3304      	adds	r3, #4
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	f000 fb47 	bl	8006164 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005b1c:	f023 030c 	bic.w	r3, r3, #12
 8005b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	011a      	lsls	r2, r3, #4
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	031b      	lsls	r3, r3, #12
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005be0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005be8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d110      	bne.n	8005c1a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d102      	bne.n	8005c04 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bfe:	7b7b      	ldrb	r3, [r7, #13]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d001      	beq.n	8005c08 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e089      	b.n	8005d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c18:	e031      	b.n	8005c7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d110      	bne.n	8005c42 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d102      	bne.n	8005c2c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c26:	7b3b      	ldrb	r3, [r7, #12]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d001      	beq.n	8005c30 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e075      	b.n	8005d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c40:	e01d      	b.n	8005c7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d108      	bne.n	8005c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d105      	bne.n	8005c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c4e:	7b7b      	ldrb	r3, [r7, #13]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d102      	bne.n	8005c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c54:	7b3b      	ldrb	r3, [r7, #12]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d001      	beq.n	8005c5e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e05e      	b.n	8005d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d010      	beq.n	8005cac <HAL_TIM_Encoder_Start_IT+0xe4>
 8005c8a:	e01f      	b.n	8005ccc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2201      	movs	r2, #1
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fedf 	bl	8006a58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0202 	orr.w	r2, r2, #2
 8005ca8:	60da      	str	r2, [r3, #12]
      break;
 8005caa:	e02e      	b.n	8005d0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fecf 	bl	8006a58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0204 	orr.w	r2, r2, #4
 8005cc8:	60da      	str	r2, [r3, #12]
      break;
 8005cca:	e01e      	b.n	8005d0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 febf 	bl	8006a58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 feb8 	bl	8006a58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0202 	orr.w	r2, r2, #2
 8005cf6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0204 	orr.w	r2, r2, #4
 8005d06:	60da      	str	r2, [r3, #12]
      break;
 8005d08:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0ff      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b14      	cmp	r3, #20
 8005d4e:	f200 80f0 	bhi.w	8005f32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d52:	a201      	add	r2, pc, #4	@ (adr r2, 8005d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005f33 	.word	0x08005f33
 8005d60:	08005f33 	.word	0x08005f33
 8005d64:	08005f33 	.word	0x08005f33
 8005d68:	08005ded 	.word	0x08005ded
 8005d6c:	08005f33 	.word	0x08005f33
 8005d70:	08005f33 	.word	0x08005f33
 8005d74:	08005f33 	.word	0x08005f33
 8005d78:	08005e2f 	.word	0x08005e2f
 8005d7c:	08005f33 	.word	0x08005f33
 8005d80:	08005f33 	.word	0x08005f33
 8005d84:	08005f33 	.word	0x08005f33
 8005d88:	08005e6f 	.word	0x08005e6f
 8005d8c:	08005f33 	.word	0x08005f33
 8005d90:	08005f33 	.word	0x08005f33
 8005d94:	08005f33 	.word	0x08005f33
 8005d98:	08005eb1 	.word	0x08005eb1
 8005d9c:	08005f33 	.word	0x08005f33
 8005da0:	08005f33 	.word	0x08005f33
 8005da4:	08005f33 	.word	0x08005f33
 8005da8:	08005ef1 	.word	0x08005ef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fa8a 	bl	80062cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0208 	orr.w	r2, r2, #8
 8005dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0204 	bic.w	r2, r2, #4
 8005dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6999      	ldr	r1, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	619a      	str	r2, [r3, #24]
      break;
 8005dea:	e0a5      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fb04 	bl	8006400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6999      	ldr	r1, [r3, #24]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	021a      	lsls	r2, r3, #8
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]
      break;
 8005e2c:	e084      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fb77 	bl	8006528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0208 	orr.w	r2, r2, #8
 8005e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0204 	bic.w	r2, r2, #4
 8005e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	61da      	str	r2, [r3, #28]
      break;
 8005e6c:	e064      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fbe9 	bl	800664c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69d9      	ldr	r1, [r3, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	021a      	lsls	r2, r3, #8
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	61da      	str	r2, [r3, #28]
      break;
 8005eae:	e043      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fc5c 	bl	8006774 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0208 	orr.w	r2, r2, #8
 8005eca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005eee:	e023      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fca6 	bl	8006848 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	021a      	lsls	r2, r3, #8
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
      break;
 8005f36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop

08005f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIM_ConfigClockSource+0x1c>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e0ee      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x1fa>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8006150 <HAL_TIM_ConfigClockSource+0x204>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	f000 80b9 	beq.w	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8005fa8:	4a69      	ldr	r2, [pc, #420]	@ (8006150 <HAL_TIM_ConfigClockSource+0x204>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f200 80be 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8005fb0:	4a68      	ldr	r2, [pc, #416]	@ (8006154 <HAL_TIM_ConfigClockSource+0x208>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	f000 80b1 	beq.w	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8005fb8:	4a66      	ldr	r2, [pc, #408]	@ (8006154 <HAL_TIM_ConfigClockSource+0x208>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f200 80b6 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8005fc0:	4a65      	ldr	r2, [pc, #404]	@ (8006158 <HAL_TIM_ConfigClockSource+0x20c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	f000 80a9 	beq.w	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8005fc8:	4a63      	ldr	r2, [pc, #396]	@ (8006158 <HAL_TIM_ConfigClockSource+0x20c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	f200 80ae 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8005fd0:	4a62      	ldr	r2, [pc, #392]	@ (800615c <HAL_TIM_ConfigClockSource+0x210>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	f000 80a1 	beq.w	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8005fd8:	4a60      	ldr	r2, [pc, #384]	@ (800615c <HAL_TIM_ConfigClockSource+0x210>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f200 80a6 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8005fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8006160 <HAL_TIM_ConfigClockSource+0x214>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	f000 8099 	beq.w	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8005fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8006160 <HAL_TIM_ConfigClockSource+0x214>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	f200 809e 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8005ff0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ff4:	f000 8091 	beq.w	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8005ff8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ffc:	f200 8096 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8006000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006004:	f000 8089 	beq.w	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8006008:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800600c:	f200 808e 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8006010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006014:	d03e      	beq.n	8006094 <HAL_TIM_ConfigClockSource+0x148>
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601a:	f200 8087 	bhi.w	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006022:	f000 8086 	beq.w	8006132 <HAL_TIM_ConfigClockSource+0x1e6>
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602a:	d87f      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 800602c:	2b70      	cmp	r3, #112	@ 0x70
 800602e:	d01a      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x11a>
 8006030:	2b70      	cmp	r3, #112	@ 0x70
 8006032:	d87b      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8006034:	2b60      	cmp	r3, #96	@ 0x60
 8006036:	d050      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x18e>
 8006038:	2b60      	cmp	r3, #96	@ 0x60
 800603a:	d877      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 800603c:	2b50      	cmp	r3, #80	@ 0x50
 800603e:	d03c      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x16e>
 8006040:	2b50      	cmp	r3, #80	@ 0x50
 8006042:	d873      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8006044:	2b40      	cmp	r3, #64	@ 0x40
 8006046:	d058      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d86f      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 800604c:	2b30      	cmp	r3, #48	@ 0x30
 800604e:	d064      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8006050:	2b30      	cmp	r3, #48	@ 0x30
 8006052:	d86b      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 8006054:	2b20      	cmp	r3, #32
 8006056:	d060      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8006058:	2b20      	cmp	r3, #32
 800605a:	d867      	bhi.n	800612c <HAL_TIM_ConfigClockSource+0x1e0>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d05c      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8006060:	2b10      	cmp	r3, #16
 8006062:	d05a      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x1ce>
 8006064:	e062      	b.n	800612c <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006076:	f000 fccf 	bl	8006a18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	609a      	str	r2, [r3, #8]
      break;
 8006092:	e04f      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060a4:	f000 fcb8 	bl	8006a18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b6:	609a      	str	r2, [r3, #8]
      break;
 80060b8:	e03c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 fc2a 	bl	8006920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2150      	movs	r1, #80	@ 0x50
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fc83 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 80060d8:	e02c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060e6:	461a      	mov	r2, r3
 80060e8:	f000 fc49 	bl	800697e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2160      	movs	r1, #96	@ 0x60
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fc73 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 80060f8:	e01c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006106:	461a      	mov	r2, r3
 8006108:	f000 fc0a 	bl	8006920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2140      	movs	r1, #64	@ 0x40
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fc63 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006118:	e00c      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f000 fc5a 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 800612a:	e003      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
      break;
 8006130:	e000      	b.n	8006134 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8006132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	00100070 	.word	0x00100070
 8006154:	00100050 	.word	0x00100050
 8006158:	00100040 	.word	0x00100040
 800615c:	00100030 	.word	0x00100030
 8006160:	00100020 	.word	0x00100020

08006164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a4c      	ldr	r2, [pc, #304]	@ (80062a8 <TIM_Base_SetConfig+0x144>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d017      	beq.n	80061ac <TIM_Base_SetConfig+0x48>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006182:	d013      	beq.n	80061ac <TIM_Base_SetConfig+0x48>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a49      	ldr	r2, [pc, #292]	@ (80062ac <TIM_Base_SetConfig+0x148>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x48>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a48      	ldr	r2, [pc, #288]	@ (80062b0 <TIM_Base_SetConfig+0x14c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x48>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a47      	ldr	r2, [pc, #284]	@ (80062b4 <TIM_Base_SetConfig+0x150>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x48>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a46      	ldr	r2, [pc, #280]	@ (80062b8 <TIM_Base_SetConfig+0x154>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x48>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a45      	ldr	r2, [pc, #276]	@ (80062bc <TIM_Base_SetConfig+0x158>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a39      	ldr	r2, [pc, #228]	@ (80062a8 <TIM_Base_SetConfig+0x144>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d023      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061cc:	d01f      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a36      	ldr	r2, [pc, #216]	@ (80062ac <TIM_Base_SetConfig+0x148>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01b      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a35      	ldr	r2, [pc, #212]	@ (80062b0 <TIM_Base_SetConfig+0x14c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d017      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a34      	ldr	r2, [pc, #208]	@ (80062b4 <TIM_Base_SetConfig+0x150>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a33      	ldr	r2, [pc, #204]	@ (80062b8 <TIM_Base_SetConfig+0x154>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00f      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a33      	ldr	r2, [pc, #204]	@ (80062c0 <TIM_Base_SetConfig+0x15c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00b      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a32      	ldr	r2, [pc, #200]	@ (80062c4 <TIM_Base_SetConfig+0x160>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d007      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a31      	ldr	r2, [pc, #196]	@ (80062c8 <TIM_Base_SetConfig+0x164>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d003      	beq.n	800620e <TIM_Base_SetConfig+0xaa>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a2c      	ldr	r2, [pc, #176]	@ (80062bc <TIM_Base_SetConfig+0x158>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d108      	bne.n	8006220 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a18      	ldr	r2, [pc, #96]	@ (80062a8 <TIM_Base_SetConfig+0x144>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d013      	beq.n	8006274 <TIM_Base_SetConfig+0x110>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a1a      	ldr	r2, [pc, #104]	@ (80062b8 <TIM_Base_SetConfig+0x154>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00f      	beq.n	8006274 <TIM_Base_SetConfig+0x110>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1a      	ldr	r2, [pc, #104]	@ (80062c0 <TIM_Base_SetConfig+0x15c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00b      	beq.n	8006274 <TIM_Base_SetConfig+0x110>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a19      	ldr	r2, [pc, #100]	@ (80062c4 <TIM_Base_SetConfig+0x160>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_Base_SetConfig+0x110>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a18      	ldr	r2, [pc, #96]	@ (80062c8 <TIM_Base_SetConfig+0x164>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_Base_SetConfig+0x110>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a13      	ldr	r2, [pc, #76]	@ (80062bc <TIM_Base_SetConfig+0x158>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d103      	bne.n	800627c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b01      	cmp	r3, #1
 800628c:	d105      	bne.n	800629a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f023 0201 	bic.w	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	611a      	str	r2, [r3, #16]
  }
}
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40012c00 	.word	0x40012c00
 80062ac:	40000400 	.word	0x40000400
 80062b0:	40000800 	.word	0x40000800
 80062b4:	40000c00 	.word	0x40000c00
 80062b8:	40013400 	.word	0x40013400
 80062bc:	40015000 	.word	0x40015000
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40014400 	.word	0x40014400
 80062c8:	40014800 	.word	0x40014800

080062cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f023 0201 	bic.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f023 0302 	bic.w	r3, r3, #2
 8006318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a30      	ldr	r2, [pc, #192]	@ (80063e8 <TIM_OC1_SetConfig+0x11c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <TIM_OC1_SetConfig+0x88>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a2f      	ldr	r2, [pc, #188]	@ (80063ec <TIM_OC1_SetConfig+0x120>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00f      	beq.n	8006354 <TIM_OC1_SetConfig+0x88>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a2e      	ldr	r2, [pc, #184]	@ (80063f0 <TIM_OC1_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_OC1_SetConfig+0x88>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a2d      	ldr	r2, [pc, #180]	@ (80063f4 <TIM_OC1_SetConfig+0x128>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_OC1_SetConfig+0x88>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a2c      	ldr	r2, [pc, #176]	@ (80063f8 <TIM_OC1_SetConfig+0x12c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_OC1_SetConfig+0x88>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a2b      	ldr	r2, [pc, #172]	@ (80063fc <TIM_OC1_SetConfig+0x130>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d10c      	bne.n	800636e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 0308 	bic.w	r3, r3, #8
 800635a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0304 	bic.w	r3, r3, #4
 800636c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <TIM_OC1_SetConfig+0x11c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <TIM_OC1_SetConfig+0xd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1c      	ldr	r2, [pc, #112]	@ (80063ec <TIM_OC1_SetConfig+0x120>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00f      	beq.n	800639e <TIM_OC1_SetConfig+0xd2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1b      	ldr	r2, [pc, #108]	@ (80063f0 <TIM_OC1_SetConfig+0x124>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00b      	beq.n	800639e <TIM_OC1_SetConfig+0xd2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a1a      	ldr	r2, [pc, #104]	@ (80063f4 <TIM_OC1_SetConfig+0x128>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d007      	beq.n	800639e <TIM_OC1_SetConfig+0xd2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a19      	ldr	r2, [pc, #100]	@ (80063f8 <TIM_OC1_SetConfig+0x12c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_OC1_SetConfig+0xd2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <TIM_OC1_SetConfig+0x130>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d111      	bne.n	80063c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800
 80063fc:	40015000 	.word	0x40015000

08006400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f023 0210 	bic.w	r2, r3, #16
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800642e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0320 	bic.w	r3, r3, #32
 800644e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a2c      	ldr	r2, [pc, #176]	@ (8006510 <TIM_OC2_SetConfig+0x110>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_OC2_SetConfig+0x74>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a2b      	ldr	r2, [pc, #172]	@ (8006514 <TIM_OC2_SetConfig+0x114>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_OC2_SetConfig+0x74>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a2a      	ldr	r2, [pc, #168]	@ (8006518 <TIM_OC2_SetConfig+0x118>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d10d      	bne.n	8006490 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800647a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800648e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a1f      	ldr	r2, [pc, #124]	@ (8006510 <TIM_OC2_SetConfig+0x110>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d013      	beq.n	80064c0 <TIM_OC2_SetConfig+0xc0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a1e      	ldr	r2, [pc, #120]	@ (8006514 <TIM_OC2_SetConfig+0x114>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00f      	beq.n	80064c0 <TIM_OC2_SetConfig+0xc0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a1e      	ldr	r2, [pc, #120]	@ (800651c <TIM_OC2_SetConfig+0x11c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <TIM_OC2_SetConfig+0xc0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006520 <TIM_OC2_SetConfig+0x120>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <TIM_OC2_SetConfig+0xc0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006524 <TIM_OC2_SetConfig+0x124>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC2_SetConfig+0xc0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a17      	ldr	r2, [pc, #92]	@ (8006518 <TIM_OC2_SetConfig+0x118>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d113      	bne.n	80064e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40013400 	.word	0x40013400
 8006518:	40015000 	.word	0x40015000
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800

08006528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2b      	ldr	r2, [pc, #172]	@ (8006634 <TIM_OC3_SetConfig+0x10c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d007      	beq.n	800659a <TIM_OC3_SetConfig+0x72>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2a      	ldr	r2, [pc, #168]	@ (8006638 <TIM_OC3_SetConfig+0x110>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d003      	beq.n	800659a <TIM_OC3_SetConfig+0x72>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a29      	ldr	r2, [pc, #164]	@ (800663c <TIM_OC3_SetConfig+0x114>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d10d      	bne.n	80065b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006634 <TIM_OC3_SetConfig+0x10c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d013      	beq.n	80065e6 <TIM_OC3_SetConfig+0xbe>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006638 <TIM_OC3_SetConfig+0x110>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00f      	beq.n	80065e6 <TIM_OC3_SetConfig+0xbe>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <TIM_OC3_SetConfig+0x118>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00b      	beq.n	80065e6 <TIM_OC3_SetConfig+0xbe>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006644 <TIM_OC3_SetConfig+0x11c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d007      	beq.n	80065e6 <TIM_OC3_SetConfig+0xbe>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006648 <TIM_OC3_SetConfig+0x120>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_OC3_SetConfig+0xbe>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a16      	ldr	r2, [pc, #88]	@ (800663c <TIM_OC3_SetConfig+0x114>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d113      	bne.n	800660e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	621a      	str	r2, [r3, #32]
}
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40015000 	.word	0x40015000
 8006640:	40014000 	.word	0x40014000
 8006644:	40014400 	.word	0x40014400
 8006648:	40014800 	.word	0x40014800

0800664c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800667e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800669a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	031b      	lsls	r3, r3, #12
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a2c      	ldr	r2, [pc, #176]	@ (800675c <TIM_OC4_SetConfig+0x110>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <TIM_OC4_SetConfig+0x74>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006760 <TIM_OC4_SetConfig+0x114>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC4_SetConfig+0x74>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006764 <TIM_OC4_SetConfig+0x118>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10d      	bne.n	80066dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	031b      	lsls	r3, r3, #12
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1f      	ldr	r2, [pc, #124]	@ (800675c <TIM_OC4_SetConfig+0x110>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <TIM_OC4_SetConfig+0xc0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006760 <TIM_OC4_SetConfig+0x114>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00f      	beq.n	800670c <TIM_OC4_SetConfig+0xc0>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006768 <TIM_OC4_SetConfig+0x11c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00b      	beq.n	800670c <TIM_OC4_SetConfig+0xc0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a1d      	ldr	r2, [pc, #116]	@ (800676c <TIM_OC4_SetConfig+0x120>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d007      	beq.n	800670c <TIM_OC4_SetConfig+0xc0>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006770 <TIM_OC4_SetConfig+0x124>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_OC4_SetConfig+0xc0>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a17      	ldr	r2, [pc, #92]	@ (8006764 <TIM_OC4_SetConfig+0x118>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d113      	bne.n	8006734 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006712:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800671a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	019b      	lsls	r3, r3, #6
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	019b      	lsls	r3, r3, #6
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40013400 	.word	0x40013400
 8006764:	40015000 	.word	0x40015000
 8006768:	40014000 	.word	0x40014000
 800676c:	40014400 	.word	0x40014400
 8006770:	40014800 	.word	0x40014800

08006774 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	041b      	lsls	r3, r3, #16
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a19      	ldr	r2, [pc, #100]	@ (8006830 <TIM_OC5_SetConfig+0xbc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <TIM_OC5_SetConfig+0x82>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a18      	ldr	r2, [pc, #96]	@ (8006834 <TIM_OC5_SetConfig+0xc0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00f      	beq.n	80067f6 <TIM_OC5_SetConfig+0x82>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a17      	ldr	r2, [pc, #92]	@ (8006838 <TIM_OC5_SetConfig+0xc4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00b      	beq.n	80067f6 <TIM_OC5_SetConfig+0x82>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a16      	ldr	r2, [pc, #88]	@ (800683c <TIM_OC5_SetConfig+0xc8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d007      	beq.n	80067f6 <TIM_OC5_SetConfig+0x82>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a15      	ldr	r2, [pc, #84]	@ (8006840 <TIM_OC5_SetConfig+0xcc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_OC5_SetConfig+0x82>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a14      	ldr	r2, [pc, #80]	@ (8006844 <TIM_OC5_SetConfig+0xd0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d109      	bne.n	800680a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	621a      	str	r2, [r3, #32]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800
 8006844:	40015000 	.word	0x40015000

08006848 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800688e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	051b      	lsls	r3, r3, #20
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a1a      	ldr	r2, [pc, #104]	@ (8006908 <TIM_OC6_SetConfig+0xc0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <TIM_OC6_SetConfig+0x84>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a19      	ldr	r2, [pc, #100]	@ (800690c <TIM_OC6_SetConfig+0xc4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00f      	beq.n	80068cc <TIM_OC6_SetConfig+0x84>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a18      	ldr	r2, [pc, #96]	@ (8006910 <TIM_OC6_SetConfig+0xc8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_OC6_SetConfig+0x84>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a17      	ldr	r2, [pc, #92]	@ (8006914 <TIM_OC6_SetConfig+0xcc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_OC6_SetConfig+0x84>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <TIM_OC6_SetConfig+0xd0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC6_SetConfig+0x84>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a15      	ldr	r2, [pc, #84]	@ (800691c <TIM_OC6_SetConfig+0xd4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d109      	bne.n	80068e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	029b      	lsls	r3, r3, #10
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800
 800691c:	40015000 	.word	0x40015000

08006920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0201 	bic.w	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800694a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 030a 	bic.w	r3, r3, #10
 800695c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800697e:	b480      	push	{r7}
 8006980:	b087      	sub	sp, #28
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f023 0210 	bic.w	r2, r3, #16
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	031b      	lsls	r3, r3, #12
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f043 0307 	orr.w	r3, r3, #7
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	021a      	lsls	r2, r3, #8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	431a      	orrs	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e074      	b.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a34      	ldr	r2, [pc, #208]	@ (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d009      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a33      	ldr	r2, [pc, #204]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d004      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a31      	ldr	r2, [pc, #196]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d108      	bne.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a21      	ldr	r2, [pc, #132]	@ (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b3c:	d01d      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1f      	ldr	r2, [pc, #124]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a15      	ldr	r2, [pc, #84]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a11      	ldr	r2, [pc, #68]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d10c      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	40015000 	.word	0x40015000
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40014000 	.word	0x40014000

08006bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e042      	b.n	8006c68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7fd f8fb 	bl	8003df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2224      	movs	r2, #36	@ 0x24
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0201 	bic.w	r2, r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fc7a 	bl	8007514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f97b 	bl	8006f1c <UART_SetConfig>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e01b      	b.n	8006c68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fcf9 	bl	8007658 <UART_CheckIdleState>
 8006c66:	4603      	mov	r3, r0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08a      	sub	sp, #40	@ 0x28
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d17b      	bne.n	8006d82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_UART_Transmit+0x26>
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e074      	b.n	8006d84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2221      	movs	r2, #33	@ 0x21
 8006ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006caa:	f7fd f9c7 	bl	800403c <HAL_GetTick>
 8006cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc8:	d108      	bne.n	8006cdc <HAL_UART_Transmit+0x6c>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	e003      	b.n	8006ce4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ce4:	e030      	b.n	8006d48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2180      	movs	r1, #128	@ 0x80
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fd5b 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d005      	beq.n	8006d08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e03d      	b.n	8006d84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10b      	bne.n	8006d26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	3302      	adds	r3, #2
 8006d22:	61bb      	str	r3, [r7, #24]
 8006d24:	e007      	b.n	8006d36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	3301      	adds	r3, #1
 8006d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1c8      	bne.n	8006ce6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2140      	movs	r1, #64	@ 0x40
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fd24 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e006      	b.n	8006d84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e000      	b.n	8006d84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d82:	2302      	movs	r3, #2
  }
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3720      	adds	r7, #32
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	@ 0x28
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	f040 80b5 	bne.w	8006f12 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_UART_Receive+0x28>
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0ad      	b.n	8006f14 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2222      	movs	r2, #34	@ 0x22
 8006dc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dce:	f7fd f935 	bl	800403c <HAL_GetTick>
 8006dd2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dec:	d10e      	bne.n	8006e0c <HAL_UART_Receive+0x80>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d105      	bne.n	8006e02 <HAL_UART_Receive+0x76>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e00:	e02d      	b.n	8006e5e <HAL_UART_Receive+0xd2>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	22ff      	movs	r2, #255	@ 0xff
 8006e06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e0a:	e028      	b.n	8006e5e <HAL_UART_Receive+0xd2>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10d      	bne.n	8006e30 <HAL_UART_Receive+0xa4>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <HAL_UART_Receive+0x9a>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	22ff      	movs	r2, #255	@ 0xff
 8006e20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e24:	e01b      	b.n	8006e5e <HAL_UART_Receive+0xd2>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	227f      	movs	r2, #127	@ 0x7f
 8006e2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e2e:	e016      	b.n	8006e5e <HAL_UART_Receive+0xd2>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e38:	d10d      	bne.n	8006e56 <HAL_UART_Receive+0xca>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <HAL_UART_Receive+0xc0>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	227f      	movs	r2, #127	@ 0x7f
 8006e46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e4a:	e008      	b.n	8006e5e <HAL_UART_Receive+0xd2>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	223f      	movs	r2, #63	@ 0x3f
 8006e50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e54:	e003      	b.n	8006e5e <HAL_UART_Receive+0xd2>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e64:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6e:	d108      	bne.n	8006e82 <HAL_UART_Receive+0xf6>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	e003      	b.n	8006e8a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e8a:	e036      	b.n	8006efa <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2200      	movs	r2, #0
 8006e94:	2120      	movs	r1, #32
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fc88 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e032      	b.n	8006f14 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10c      	bne.n	8006ece <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	8a7b      	ldrh	r3, [r7, #18]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	3302      	adds	r3, #2
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	e00c      	b.n	8006ee8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	8a7b      	ldrh	r3, [r7, #18]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4013      	ands	r3, r2
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1c2      	bne.n	8006e8c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e000      	b.n	8006f14 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006f12:	2302      	movs	r3, #2
  }
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3720      	adds	r7, #32
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f20:	b08c      	sub	sp, #48	@ 0x30
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4baa      	ldr	r3, [pc, #680]	@ (80071f4 <UART_SetConfig+0x2d8>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	6812      	ldr	r2, [r2, #0]
 8006f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a9f      	ldr	r2, [pc, #636]	@ (80071f8 <UART_SetConfig+0x2dc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f84:	4313      	orrs	r3, r2
 8006f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	f023 010f 	bic.w	r1, r3, #15
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a90      	ldr	r2, [pc, #576]	@ (80071fc <UART_SetConfig+0x2e0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d125      	bne.n	800700c <UART_SetConfig+0xf0>
 8006fc0:	4b8f      	ldr	r3, [pc, #572]	@ (8007200 <UART_SetConfig+0x2e4>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d81a      	bhi.n	8007004 <UART_SetConfig+0xe8>
 8006fce:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd4 <UART_SetConfig+0xb8>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006fe5 	.word	0x08006fe5
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	08006fed 	.word	0x08006fed
 8006fe0:	08006ffd 	.word	0x08006ffd
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e116      	b.n	800721a <UART_SetConfig+0x2fe>
 8006fec:	2302      	movs	r3, #2
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e112      	b.n	800721a <UART_SetConfig+0x2fe>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffa:	e10e      	b.n	800721a <UART_SetConfig+0x2fe>
 8006ffc:	2308      	movs	r3, #8
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007002:	e10a      	b.n	800721a <UART_SetConfig+0x2fe>
 8007004:	2310      	movs	r3, #16
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700a:	e106      	b.n	800721a <UART_SetConfig+0x2fe>
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a7c      	ldr	r2, [pc, #496]	@ (8007204 <UART_SetConfig+0x2e8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d138      	bne.n	8007088 <UART_SetConfig+0x16c>
 8007016:	4b7a      	ldr	r3, [pc, #488]	@ (8007200 <UART_SetConfig+0x2e4>)
 8007018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701c:	f003 030c 	and.w	r3, r3, #12
 8007020:	2b0c      	cmp	r3, #12
 8007022:	d82d      	bhi.n	8007080 <UART_SetConfig+0x164>
 8007024:	a201      	add	r2, pc, #4	@ (adr r2, 800702c <UART_SetConfig+0x110>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	08007061 	.word	0x08007061
 8007030:	08007081 	.word	0x08007081
 8007034:	08007081 	.word	0x08007081
 8007038:	08007081 	.word	0x08007081
 800703c:	08007071 	.word	0x08007071
 8007040:	08007081 	.word	0x08007081
 8007044:	08007081 	.word	0x08007081
 8007048:	08007081 	.word	0x08007081
 800704c:	08007069 	.word	0x08007069
 8007050:	08007081 	.word	0x08007081
 8007054:	08007081 	.word	0x08007081
 8007058:	08007081 	.word	0x08007081
 800705c:	08007079 	.word	0x08007079
 8007060:	2300      	movs	r3, #0
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007066:	e0d8      	b.n	800721a <UART_SetConfig+0x2fe>
 8007068:	2302      	movs	r3, #2
 800706a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706e:	e0d4      	b.n	800721a <UART_SetConfig+0x2fe>
 8007070:	2304      	movs	r3, #4
 8007072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007076:	e0d0      	b.n	800721a <UART_SetConfig+0x2fe>
 8007078:	2308      	movs	r3, #8
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707e:	e0cc      	b.n	800721a <UART_SetConfig+0x2fe>
 8007080:	2310      	movs	r3, #16
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007086:	e0c8      	b.n	800721a <UART_SetConfig+0x2fe>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a5e      	ldr	r2, [pc, #376]	@ (8007208 <UART_SetConfig+0x2ec>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d125      	bne.n	80070de <UART_SetConfig+0x1c2>
 8007092:	4b5b      	ldr	r3, [pc, #364]	@ (8007200 <UART_SetConfig+0x2e4>)
 8007094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007098:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800709c:	2b30      	cmp	r3, #48	@ 0x30
 800709e:	d016      	beq.n	80070ce <UART_SetConfig+0x1b2>
 80070a0:	2b30      	cmp	r3, #48	@ 0x30
 80070a2:	d818      	bhi.n	80070d6 <UART_SetConfig+0x1ba>
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d00a      	beq.n	80070be <UART_SetConfig+0x1a2>
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d814      	bhi.n	80070d6 <UART_SetConfig+0x1ba>
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <UART_SetConfig+0x19a>
 80070b0:	2b10      	cmp	r3, #16
 80070b2:	d008      	beq.n	80070c6 <UART_SetConfig+0x1aa>
 80070b4:	e00f      	b.n	80070d6 <UART_SetConfig+0x1ba>
 80070b6:	2300      	movs	r3, #0
 80070b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070bc:	e0ad      	b.n	800721a <UART_SetConfig+0x2fe>
 80070be:	2302      	movs	r3, #2
 80070c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c4:	e0a9      	b.n	800721a <UART_SetConfig+0x2fe>
 80070c6:	2304      	movs	r3, #4
 80070c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070cc:	e0a5      	b.n	800721a <UART_SetConfig+0x2fe>
 80070ce:	2308      	movs	r3, #8
 80070d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d4:	e0a1      	b.n	800721a <UART_SetConfig+0x2fe>
 80070d6:	2310      	movs	r3, #16
 80070d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070dc:	e09d      	b.n	800721a <UART_SetConfig+0x2fe>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4a      	ldr	r2, [pc, #296]	@ (800720c <UART_SetConfig+0x2f0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d125      	bne.n	8007134 <UART_SetConfig+0x218>
 80070e8:	4b45      	ldr	r3, [pc, #276]	@ (8007200 <UART_SetConfig+0x2e4>)
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80070f4:	d016      	beq.n	8007124 <UART_SetConfig+0x208>
 80070f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80070f8:	d818      	bhi.n	800712c <UART_SetConfig+0x210>
 80070fa:	2b80      	cmp	r3, #128	@ 0x80
 80070fc:	d00a      	beq.n	8007114 <UART_SetConfig+0x1f8>
 80070fe:	2b80      	cmp	r3, #128	@ 0x80
 8007100:	d814      	bhi.n	800712c <UART_SetConfig+0x210>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <UART_SetConfig+0x1f0>
 8007106:	2b40      	cmp	r3, #64	@ 0x40
 8007108:	d008      	beq.n	800711c <UART_SetConfig+0x200>
 800710a:	e00f      	b.n	800712c <UART_SetConfig+0x210>
 800710c:	2300      	movs	r3, #0
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007112:	e082      	b.n	800721a <UART_SetConfig+0x2fe>
 8007114:	2302      	movs	r3, #2
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711a:	e07e      	b.n	800721a <UART_SetConfig+0x2fe>
 800711c:	2304      	movs	r3, #4
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007122:	e07a      	b.n	800721a <UART_SetConfig+0x2fe>
 8007124:	2308      	movs	r3, #8
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712a:	e076      	b.n	800721a <UART_SetConfig+0x2fe>
 800712c:	2310      	movs	r3, #16
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007132:	e072      	b.n	800721a <UART_SetConfig+0x2fe>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a35      	ldr	r2, [pc, #212]	@ (8007210 <UART_SetConfig+0x2f4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d12a      	bne.n	8007194 <UART_SetConfig+0x278>
 800713e:	4b30      	ldr	r3, [pc, #192]	@ (8007200 <UART_SetConfig+0x2e4>)
 8007140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800714c:	d01a      	beq.n	8007184 <UART_SetConfig+0x268>
 800714e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007152:	d81b      	bhi.n	800718c <UART_SetConfig+0x270>
 8007154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007158:	d00c      	beq.n	8007174 <UART_SetConfig+0x258>
 800715a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800715e:	d815      	bhi.n	800718c <UART_SetConfig+0x270>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <UART_SetConfig+0x250>
 8007164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007168:	d008      	beq.n	800717c <UART_SetConfig+0x260>
 800716a:	e00f      	b.n	800718c <UART_SetConfig+0x270>
 800716c:	2300      	movs	r3, #0
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007172:	e052      	b.n	800721a <UART_SetConfig+0x2fe>
 8007174:	2302      	movs	r3, #2
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717a:	e04e      	b.n	800721a <UART_SetConfig+0x2fe>
 800717c:	2304      	movs	r3, #4
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e04a      	b.n	800721a <UART_SetConfig+0x2fe>
 8007184:	2308      	movs	r3, #8
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e046      	b.n	800721a <UART_SetConfig+0x2fe>
 800718c:	2310      	movs	r3, #16
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e042      	b.n	800721a <UART_SetConfig+0x2fe>
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a17      	ldr	r2, [pc, #92]	@ (80071f8 <UART_SetConfig+0x2dc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d13a      	bne.n	8007214 <UART_SetConfig+0x2f8>
 800719e:	4b18      	ldr	r3, [pc, #96]	@ (8007200 <UART_SetConfig+0x2e4>)
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071ac:	d01a      	beq.n	80071e4 <UART_SetConfig+0x2c8>
 80071ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071b2:	d81b      	bhi.n	80071ec <UART_SetConfig+0x2d0>
 80071b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071b8:	d00c      	beq.n	80071d4 <UART_SetConfig+0x2b8>
 80071ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071be:	d815      	bhi.n	80071ec <UART_SetConfig+0x2d0>
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <UART_SetConfig+0x2b0>
 80071c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071c8:	d008      	beq.n	80071dc <UART_SetConfig+0x2c0>
 80071ca:	e00f      	b.n	80071ec <UART_SetConfig+0x2d0>
 80071cc:	2300      	movs	r3, #0
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d2:	e022      	b.n	800721a <UART_SetConfig+0x2fe>
 80071d4:	2302      	movs	r3, #2
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071da:	e01e      	b.n	800721a <UART_SetConfig+0x2fe>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e01a      	b.n	800721a <UART_SetConfig+0x2fe>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e016      	b.n	800721a <UART_SetConfig+0x2fe>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f2:	e012      	b.n	800721a <UART_SetConfig+0x2fe>
 80071f4:	cfff69f3 	.word	0xcfff69f3
 80071f8:	40008000 	.word	0x40008000
 80071fc:	40013800 	.word	0x40013800
 8007200:	40021000 	.word	0x40021000
 8007204:	40004400 	.word	0x40004400
 8007208:	40004800 	.word	0x40004800
 800720c:	40004c00 	.word	0x40004c00
 8007210:	40005000 	.word	0x40005000
 8007214:	2310      	movs	r3, #16
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4aae      	ldr	r2, [pc, #696]	@ (80074d8 <UART_SetConfig+0x5bc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	f040 8097 	bne.w	8007354 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800722a:	2b08      	cmp	r3, #8
 800722c:	d823      	bhi.n	8007276 <UART_SetConfig+0x35a>
 800722e:	a201      	add	r2, pc, #4	@ (adr r2, 8007234 <UART_SetConfig+0x318>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007259 	.word	0x08007259
 8007238:	08007277 	.word	0x08007277
 800723c:	08007261 	.word	0x08007261
 8007240:	08007277 	.word	0x08007277
 8007244:	08007267 	.word	0x08007267
 8007248:	08007277 	.word	0x08007277
 800724c:	08007277 	.word	0x08007277
 8007250:	08007277 	.word	0x08007277
 8007254:	0800726f 	.word	0x0800726f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007258:	f7fd ff0c 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 800725c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800725e:	e010      	b.n	8007282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007260:	4b9e      	ldr	r3, [pc, #632]	@ (80074dc <UART_SetConfig+0x5c0>)
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007264:	e00d      	b.n	8007282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007266:	f7fd fe97 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 800726a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007274:	e005      	b.n	8007282 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8130 	beq.w	80074ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728e:	4a94      	ldr	r2, [pc, #592]	@ (80074e0 <UART_SetConfig+0x5c4>)
 8007290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007294:	461a      	mov	r2, r3
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	fbb3 f3f2 	udiv	r3, r3, r2
 800729c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4413      	add	r3, r2
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d305      	bcc.n	80072ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d903      	bls.n	80072c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072c0:	e113      	b.n	80074ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	2200      	movs	r2, #0
 80072c6:	60bb      	str	r3, [r7, #8]
 80072c8:	60fa      	str	r2, [r7, #12]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	4a84      	ldr	r2, [pc, #528]	@ (80074e0 <UART_SetConfig+0x5c4>)
 80072d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2200      	movs	r2, #0
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072e4:	f7f9 fcf8 	bl	8000cd8 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4610      	mov	r0, r2
 80072ee:	4619      	mov	r1, r3
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	020b      	lsls	r3, r1, #8
 80072fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072fe:	0202      	lsls	r2, r0, #8
 8007300:	6979      	ldr	r1, [r7, #20]
 8007302:	6849      	ldr	r1, [r1, #4]
 8007304:	0849      	lsrs	r1, r1, #1
 8007306:	2000      	movs	r0, #0
 8007308:	460c      	mov	r4, r1
 800730a:	4605      	mov	r5, r0
 800730c:	eb12 0804 	adds.w	r8, r2, r4
 8007310:	eb43 0905 	adc.w	r9, r3, r5
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	469a      	mov	sl, r3
 800731c:	4693      	mov	fp, r2
 800731e:	4652      	mov	r2, sl
 8007320:	465b      	mov	r3, fp
 8007322:	4640      	mov	r0, r8
 8007324:	4649      	mov	r1, r9
 8007326:	f7f9 fcd7 	bl	8000cd8 <__aeabi_uldivmod>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4613      	mov	r3, r2
 8007330:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007338:	d308      	bcc.n	800734c <UART_SetConfig+0x430>
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007340:	d204      	bcs.n	800734c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a3a      	ldr	r2, [r7, #32]
 8007348:	60da      	str	r2, [r3, #12]
 800734a:	e0ce      	b.n	80074ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007352:	e0ca      	b.n	80074ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800735c:	d166      	bne.n	800742c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800735e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007362:	2b08      	cmp	r3, #8
 8007364:	d827      	bhi.n	80073b6 <UART_SetConfig+0x49a>
 8007366:	a201      	add	r2, pc, #4	@ (adr r2, 800736c <UART_SetConfig+0x450>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	08007391 	.word	0x08007391
 8007370:	08007399 	.word	0x08007399
 8007374:	080073a1 	.word	0x080073a1
 8007378:	080073b7 	.word	0x080073b7
 800737c:	080073a7 	.word	0x080073a7
 8007380:	080073b7 	.word	0x080073b7
 8007384:	080073b7 	.word	0x080073b7
 8007388:	080073b7 	.word	0x080073b7
 800738c:	080073af 	.word	0x080073af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007390:	f7fd fe70 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8007394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007396:	e014      	b.n	80073c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007398:	f7fd fe82 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 800739c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800739e:	e010      	b.n	80073c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073a0:	4b4e      	ldr	r3, [pc, #312]	@ (80074dc <UART_SetConfig+0x5c0>)
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073a4:	e00d      	b.n	80073c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073a6:	f7fd fdf7 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 80073aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ac:	e009      	b.n	80073c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073b4:	e005      	b.n	80073c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8090 	beq.w	80074ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ce:	4a44      	ldr	r2, [pc, #272]	@ (80074e0 <UART_SetConfig+0x5c4>)
 80073d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d4:	461a      	mov	r2, r3
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073dc:	005a      	lsls	r2, r3, #1
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	441a      	add	r2, r3
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	2b0f      	cmp	r3, #15
 80073f4:	d916      	bls.n	8007424 <UART_SetConfig+0x508>
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073fc:	d212      	bcs.n	8007424 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f023 030f 	bic.w	r3, r3, #15
 8007406:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	b29b      	uxth	r3, r3
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	b29a      	uxth	r2, r3
 8007414:	8bfb      	ldrh	r3, [r7, #30]
 8007416:	4313      	orrs	r3, r2
 8007418:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	8bfa      	ldrh	r2, [r7, #30]
 8007420:	60da      	str	r2, [r3, #12]
 8007422:	e062      	b.n	80074ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800742a:	e05e      	b.n	80074ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800742c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007430:	2b08      	cmp	r3, #8
 8007432:	d828      	bhi.n	8007486 <UART_SetConfig+0x56a>
 8007434:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <UART_SetConfig+0x520>)
 8007436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743a:	bf00      	nop
 800743c:	08007461 	.word	0x08007461
 8007440:	08007469 	.word	0x08007469
 8007444:	08007471 	.word	0x08007471
 8007448:	08007487 	.word	0x08007487
 800744c:	08007477 	.word	0x08007477
 8007450:	08007487 	.word	0x08007487
 8007454:	08007487 	.word	0x08007487
 8007458:	08007487 	.word	0x08007487
 800745c:	0800747f 	.word	0x0800747f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007460:	f7fd fe08 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8007464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007466:	e014      	b.n	8007492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007468:	f7fd fe1a 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 800746c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800746e:	e010      	b.n	8007492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007470:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <UART_SetConfig+0x5c0>)
 8007472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007474:	e00d      	b.n	8007492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007476:	f7fd fd8f 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 800747a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800747c:	e009      	b.n	8007492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007484:	e005      	b.n	8007492 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007490:	bf00      	nop
    }

    if (pclk != 0U)
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d028      	beq.n	80074ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749c:	4a10      	ldr	r2, [pc, #64]	@ (80074e0 <UART_SetConfig+0x5c4>)
 800749e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a2:	461a      	mov	r2, r3
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	085b      	lsrs	r3, r3, #1
 80074b0:	441a      	add	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	2b0f      	cmp	r3, #15
 80074c0:	d910      	bls.n	80074e4 <UART_SetConfig+0x5c8>
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074c8:	d20c      	bcs.n	80074e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60da      	str	r2, [r3, #12]
 80074d4:	e009      	b.n	80074ea <UART_SetConfig+0x5ce>
 80074d6:	bf00      	nop
 80074d8:	40008000 	.word	0x40008000
 80074dc:	00f42400 	.word	0x00f42400
 80074e0:	08009620 	.word	0x08009620
      }
      else
      {
        ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2200      	movs	r2, #0
 80074fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2200      	movs	r2, #0
 8007504:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007506:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800750a:	4618      	mov	r0, r3
 800750c:	3730      	adds	r7, #48	@ 0x30
 800750e:	46bd      	mov	sp, r7
 8007510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01a      	beq.n	800762a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800760e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007612:	d10a      	bne.n	800762a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	605a      	str	r2, [r3, #4]
  }
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b098      	sub	sp, #96	@ 0x60
 800765c:	af02      	add	r7, sp, #8
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007668:	f7fc fce8 	bl	800403c <HAL_GetTick>
 800766c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0308 	and.w	r3, r3, #8
 8007678:	2b08      	cmp	r3, #8
 800767a:	d12f      	bne.n	80076dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007684:	2200      	movs	r2, #0
 8007686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f88e 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d022      	beq.n	80076dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e6      	bne.n	8007696 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e063      	b.n	80077a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0304 	and.w	r3, r3, #4
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d149      	bne.n	800777e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f2:	2200      	movs	r2, #0
 80076f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f857 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d03c      	beq.n	800777e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	623b      	str	r3, [r7, #32]
   return(result);
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007722:	633b      	str	r3, [r7, #48]	@ 0x30
 8007724:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e6      	bne.n	8007704 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3308      	adds	r3, #8
 800773c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	60fb      	str	r3, [r7, #12]
   return(result);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f023 0301 	bic.w	r3, r3, #1
 800774c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3308      	adds	r3, #8
 8007754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007756:	61fa      	str	r2, [r7, #28]
 8007758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	69b9      	ldr	r1, [r7, #24]
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	617b      	str	r3, [r7, #20]
   return(result);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e5      	bne.n	8007736 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e012      	b.n	80077a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3758      	adds	r7, #88	@ 0x58
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	4613      	mov	r3, r2
 80077ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077bc:	e04f      	b.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077c4:	d04b      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c6:	f7fc fc39 	bl	800403c <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <UART_WaitOnFlagUntilTimeout+0x30>
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e04e      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d037      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b80      	cmp	r3, #128	@ 0x80
 80077f2:	d034      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b40      	cmp	r3, #64	@ 0x40
 80077f8:	d031      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b08      	cmp	r3, #8
 8007806:	d110      	bne.n	800782a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2208      	movs	r2, #8
 800780e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f838 	bl	8007886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2208      	movs	r2, #8
 800781a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e029      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007838:	d111      	bne.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f81e 	bl	8007886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2220      	movs	r2, #32
 800784e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e00f      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69da      	ldr	r2, [r3, #28]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4013      	ands	r3, r2
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	429a      	cmp	r2, r3
 800786c:	bf0c      	ite	eq
 800786e:	2301      	moveq	r3, #1
 8007870:	2300      	movne	r3, #0
 8007872:	b2db      	uxtb	r3, r3
 8007874:	461a      	mov	r2, r3
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	429a      	cmp	r2, r3
 800787a:	d0a0      	beq.n	80077be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007886:	b480      	push	{r7}
 8007888:	b095      	sub	sp, #84	@ 0x54
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e6      	bne.n	800788e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078d6:	f023 0301 	bic.w	r3, r3, #1
 80078da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e3      	bne.n	80078c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d118      	bne.n	8007932 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	60bb      	str	r3, [r7, #8]
   return(result);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f023 0310 	bic.w	r3, r3, #16
 8007914:	647b      	str	r3, [r7, #68]	@ 0x44
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800791e:	61bb      	str	r3, [r7, #24]
 8007920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6979      	ldr	r1, [r7, #20]
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	613b      	str	r3, [r7, #16]
   return(result);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e6      	bne.n	8007900 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007946:	bf00      	nop
 8007948:	3754      	adds	r7, #84	@ 0x54
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_UARTEx_DisableFifoMode+0x16>
 8007964:	2302      	movs	r3, #2
 8007966:	e027      	b.n	80079b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2224      	movs	r2, #36	@ 0x24
 8007974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007996:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079d8:	2302      	movs	r3, #2
 80079da:	e02d      	b.n	8007a38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2224      	movs	r2, #36	@ 0x24
 80079e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f84f 	bl	8007abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e02d      	b.n	8007ab4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2224      	movs	r2, #36	@ 0x24
 8007a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f811 	bl	8007abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d108      	bne.n	8007ade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007adc:	e031      	b.n	8007b42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ade:	2308      	movs	r3, #8
 8007ae0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	0e5b      	lsrs	r3, r3, #25
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	0f5b      	lsrs	r3, r3, #29
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	7b3a      	ldrb	r2, [r7, #12]
 8007b0a:	4911      	ldr	r1, [pc, #68]	@ (8007b50 <UARTEx_SetNbDataToProcess+0x94>)
 8007b0c:	5c8a      	ldrb	r2, [r1, r2]
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b12:	7b3a      	ldrb	r2, [r7, #12]
 8007b14:	490f      	ldr	r1, [pc, #60]	@ (8007b54 <UARTEx_SetNbDataToProcess+0x98>)
 8007b16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	7b7a      	ldrb	r2, [r7, #13]
 8007b28:	4909      	ldr	r1, [pc, #36]	@ (8007b50 <UARTEx_SetNbDataToProcess+0x94>)
 8007b2a:	5c8a      	ldrb	r2, [r1, r2]
 8007b2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b30:	7b7a      	ldrb	r2, [r7, #13]
 8007b32:	4908      	ldr	r1, [pc, #32]	@ (8007b54 <UARTEx_SetNbDataToProcess+0x98>)
 8007b34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	08009638 	.word	0x08009638
 8007b54:	08009640 	.word	0x08009640

08007b58 <siscanf>:
 8007b58:	b40e      	push	{r1, r2, r3}
 8007b5a:	b530      	push	{r4, r5, lr}
 8007b5c:	b09c      	sub	sp, #112	@ 0x70
 8007b5e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007b60:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007b64:	f854 5b04 	ldr.w	r5, [r4], #4
 8007b68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007b6c:	9002      	str	r0, [sp, #8]
 8007b6e:	9006      	str	r0, [sp, #24]
 8007b70:	f7f8 fb56 	bl	8000220 <strlen>
 8007b74:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba4 <siscanf+0x4c>)
 8007b76:	9003      	str	r0, [sp, #12]
 8007b78:	9007      	str	r0, [sp, #28]
 8007b7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b7c:	480a      	ldr	r0, [pc, #40]	@ (8007ba8 <siscanf+0x50>)
 8007b7e:	9401      	str	r4, [sp, #4]
 8007b80:	2300      	movs	r3, #0
 8007b82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b84:	9314      	str	r3, [sp, #80]	@ 0x50
 8007b86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4623      	mov	r3, r4
 8007b92:	a902      	add	r1, sp, #8
 8007b94:	6800      	ldr	r0, [r0, #0]
 8007b96:	f000 fb13 	bl	80081c0 <__ssvfiscanf_r>
 8007b9a:	b01c      	add	sp, #112	@ 0x70
 8007b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba0:	b003      	add	sp, #12
 8007ba2:	4770      	bx	lr
 8007ba4:	08007bcf 	.word	0x08007bcf
 8007ba8:	2000003c 	.word	0x2000003c

08007bac <__sread>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	f000 fa10 	bl	8007fd8 <_read_r>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	bfab      	itete	ge
 8007bbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc0:	181b      	addge	r3, r3, r0
 8007bc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bc6:	bfac      	ite	ge
 8007bc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bca:	81a3      	strhlt	r3, [r4, #12]
 8007bcc:	bd10      	pop	{r4, pc}

08007bce <__seofread>:
 8007bce:	2000      	movs	r0, #0
 8007bd0:	4770      	bx	lr

08007bd2 <__swrite>:
 8007bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	898b      	ldrh	r3, [r1, #12]
 8007bda:	05db      	lsls	r3, r3, #23
 8007bdc:	4605      	mov	r5, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	4616      	mov	r6, r2
 8007be2:	d505      	bpl.n	8007bf0 <__swrite+0x1e>
 8007be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be8:	2302      	movs	r3, #2
 8007bea:	2200      	movs	r2, #0
 8007bec:	f000 f9e2 	bl	8007fb4 <_lseek_r>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	463b      	mov	r3, r7
 8007c00:	4628      	mov	r0, r5
 8007c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	f000 b9f9 	b.w	8007ffc <_write_r>

08007c0a <__sseek>:
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c12:	f000 f9cf 	bl	8007fb4 <_lseek_r>
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	bf15      	itete	ne
 8007c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c26:	81a3      	strheq	r3, [r4, #12]
 8007c28:	bf18      	it	ne
 8007c2a:	81a3      	strhne	r3, [r4, #12]
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <__sclose>:
 8007c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c32:	f000 b9af 	b.w	8007f94 <_close_r>
	...

08007c38 <std>:
 8007c38:	2300      	movs	r3, #0
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c46:	6083      	str	r3, [r0, #8]
 8007c48:	8181      	strh	r1, [r0, #12]
 8007c4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c4c:	81c2      	strh	r2, [r0, #14]
 8007c4e:	6183      	str	r3, [r0, #24]
 8007c50:	4619      	mov	r1, r3
 8007c52:	2208      	movs	r2, #8
 8007c54:	305c      	adds	r0, #92	@ 0x5c
 8007c56:	f000 f995 	bl	8007f84 <memset>
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c90 <std+0x58>)
 8007c5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c94 <std+0x5c>)
 8007c60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <std+0x60>)
 8007c64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <std+0x64>)
 8007c68:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca0 <std+0x68>)
 8007c6c:	6224      	str	r4, [r4, #32]
 8007c6e:	429c      	cmp	r4, r3
 8007c70:	d006      	beq.n	8007c80 <std+0x48>
 8007c72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c76:	4294      	cmp	r4, r2
 8007c78:	d002      	beq.n	8007c80 <std+0x48>
 8007c7a:	33d0      	adds	r3, #208	@ 0xd0
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	d105      	bne.n	8007c8c <std+0x54>
 8007c80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f000 b9f4 	b.w	8008074 <__retarget_lock_init_recursive>
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	08007bad 	.word	0x08007bad
 8007c94:	08007bd3 	.word	0x08007bd3
 8007c98:	08007c0b 	.word	0x08007c0b
 8007c9c:	08007c2f 	.word	0x08007c2f
 8007ca0:	200003fc 	.word	0x200003fc

08007ca4 <stdio_exit_handler>:
 8007ca4:	4a02      	ldr	r2, [pc, #8]	@ (8007cb0 <stdio_exit_handler+0xc>)
 8007ca6:	4903      	ldr	r1, [pc, #12]	@ (8007cb4 <stdio_exit_handler+0x10>)
 8007ca8:	4803      	ldr	r0, [pc, #12]	@ (8007cb8 <stdio_exit_handler+0x14>)
 8007caa:	f000 b8ef 	b.w	8007e8c <_fwalk_sglue>
 8007cae:	bf00      	nop
 8007cb0:	20000030 	.word	0x20000030
 8007cb4:	08008a05 	.word	0x08008a05
 8007cb8:	20000040 	.word	0x20000040

08007cbc <cleanup_stdio>:
 8007cbc:	6841      	ldr	r1, [r0, #4]
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf0 <cleanup_stdio+0x34>)
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	d001      	beq.n	8007ccc <cleanup_stdio+0x10>
 8007cc8:	f000 fe9c 	bl	8008a04 <_fflush_r>
 8007ccc:	68a1      	ldr	r1, [r4, #8]
 8007cce:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <cleanup_stdio+0x38>)
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <cleanup_stdio+0x1e>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fe95 	bl	8008a04 <_fflush_r>
 8007cda:	68e1      	ldr	r1, [r4, #12]
 8007cdc:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <cleanup_stdio+0x3c>)
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d004      	beq.n	8007cec <cleanup_stdio+0x30>
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f000 be8c 	b.w	8008a04 <_fflush_r>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	200003fc 	.word	0x200003fc
 8007cf4:	20000464 	.word	0x20000464
 8007cf8:	200004cc 	.word	0x200004cc

08007cfc <global_stdio_init.part.0>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007d2c <global_stdio_init.part.0+0x30>)
 8007d00:	4c0b      	ldr	r4, [pc, #44]	@ (8007d30 <global_stdio_init.part.0+0x34>)
 8007d02:	4a0c      	ldr	r2, [pc, #48]	@ (8007d34 <global_stdio_init.part.0+0x38>)
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	4620      	mov	r0, r4
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	f7ff ff94 	bl	8007c38 <std>
 8007d10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d14:	2201      	movs	r2, #1
 8007d16:	2109      	movs	r1, #9
 8007d18:	f7ff ff8e 	bl	8007c38 <std>
 8007d1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d20:	2202      	movs	r2, #2
 8007d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d26:	2112      	movs	r1, #18
 8007d28:	f7ff bf86 	b.w	8007c38 <std>
 8007d2c:	20000534 	.word	0x20000534
 8007d30:	200003fc 	.word	0x200003fc
 8007d34:	08007ca5 	.word	0x08007ca5

08007d38 <__sfp_lock_acquire>:
 8007d38:	4801      	ldr	r0, [pc, #4]	@ (8007d40 <__sfp_lock_acquire+0x8>)
 8007d3a:	f000 b99c 	b.w	8008076 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	2000053d 	.word	0x2000053d

08007d44 <__sfp_lock_release>:
 8007d44:	4801      	ldr	r0, [pc, #4]	@ (8007d4c <__sfp_lock_release+0x8>)
 8007d46:	f000 b997 	b.w	8008078 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	2000053d 	.word	0x2000053d

08007d50 <__sinit>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	4604      	mov	r4, r0
 8007d54:	f7ff fff0 	bl	8007d38 <__sfp_lock_acquire>
 8007d58:	6a23      	ldr	r3, [r4, #32]
 8007d5a:	b11b      	cbz	r3, 8007d64 <__sinit+0x14>
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f7ff bff0 	b.w	8007d44 <__sfp_lock_release>
 8007d64:	4b04      	ldr	r3, [pc, #16]	@ (8007d78 <__sinit+0x28>)
 8007d66:	6223      	str	r3, [r4, #32]
 8007d68:	4b04      	ldr	r3, [pc, #16]	@ (8007d7c <__sinit+0x2c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f5      	bne.n	8007d5c <__sinit+0xc>
 8007d70:	f7ff ffc4 	bl	8007cfc <global_stdio_init.part.0>
 8007d74:	e7f2      	b.n	8007d5c <__sinit+0xc>
 8007d76:	bf00      	nop
 8007d78:	08007cbd 	.word	0x08007cbd
 8007d7c:	20000534 	.word	0x20000534

08007d80 <_strtol_l.constprop.0>:
 8007d80:	2b24      	cmp	r3, #36	@ 0x24
 8007d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d86:	4686      	mov	lr, r0
 8007d88:	4690      	mov	r8, r2
 8007d8a:	d801      	bhi.n	8007d90 <_strtol_l.constprop.0+0x10>
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d106      	bne.n	8007d9e <_strtol_l.constprop.0+0x1e>
 8007d90:	f000 f946 	bl	8008020 <__errno>
 8007d94:	2316      	movs	r3, #22
 8007d96:	6003      	str	r3, [r0, #0]
 8007d98:	2000      	movs	r0, #0
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	4834      	ldr	r0, [pc, #208]	@ (8007e70 <_strtol_l.constprop.0+0xf0>)
 8007da0:	460d      	mov	r5, r1
 8007da2:	462a      	mov	r2, r5
 8007da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007da8:	5d06      	ldrb	r6, [r0, r4]
 8007daa:	f016 0608 	ands.w	r6, r6, #8
 8007dae:	d1f8      	bne.n	8007da2 <_strtol_l.constprop.0+0x22>
 8007db0:	2c2d      	cmp	r4, #45	@ 0x2d
 8007db2:	d12d      	bne.n	8007e10 <_strtol_l.constprop.0+0x90>
 8007db4:	782c      	ldrb	r4, [r5, #0]
 8007db6:	2601      	movs	r6, #1
 8007db8:	1c95      	adds	r5, r2, #2
 8007dba:	f033 0210 	bics.w	r2, r3, #16
 8007dbe:	d109      	bne.n	8007dd4 <_strtol_l.constprop.0+0x54>
 8007dc0:	2c30      	cmp	r4, #48	@ 0x30
 8007dc2:	d12a      	bne.n	8007e1a <_strtol_l.constprop.0+0x9a>
 8007dc4:	782a      	ldrb	r2, [r5, #0]
 8007dc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007dca:	2a58      	cmp	r2, #88	@ 0x58
 8007dcc:	d125      	bne.n	8007e1a <_strtol_l.constprop.0+0x9a>
 8007dce:	786c      	ldrb	r4, [r5, #1]
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	3502      	adds	r5, #2
 8007dd4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007dd8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007ddc:	2200      	movs	r2, #0
 8007dde:	fbbc f9f3 	udiv	r9, ip, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	fb03 ca19 	mls	sl, r3, r9, ip
 8007de8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007dec:	2f09      	cmp	r7, #9
 8007dee:	d81b      	bhi.n	8007e28 <_strtol_l.constprop.0+0xa8>
 8007df0:	463c      	mov	r4, r7
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	dd27      	ble.n	8007e46 <_strtol_l.constprop.0+0xc6>
 8007df6:	1c57      	adds	r7, r2, #1
 8007df8:	d007      	beq.n	8007e0a <_strtol_l.constprop.0+0x8a>
 8007dfa:	4581      	cmp	r9, r0
 8007dfc:	d320      	bcc.n	8007e40 <_strtol_l.constprop.0+0xc0>
 8007dfe:	d101      	bne.n	8007e04 <_strtol_l.constprop.0+0x84>
 8007e00:	45a2      	cmp	sl, r4
 8007e02:	db1d      	blt.n	8007e40 <_strtol_l.constprop.0+0xc0>
 8007e04:	fb00 4003 	mla	r0, r0, r3, r4
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e0e:	e7eb      	b.n	8007de8 <_strtol_l.constprop.0+0x68>
 8007e10:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e12:	bf04      	itt	eq
 8007e14:	782c      	ldrbeq	r4, [r5, #0]
 8007e16:	1c95      	addeq	r5, r2, #2
 8007e18:	e7cf      	b.n	8007dba <_strtol_l.constprop.0+0x3a>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1da      	bne.n	8007dd4 <_strtol_l.constprop.0+0x54>
 8007e1e:	2c30      	cmp	r4, #48	@ 0x30
 8007e20:	bf0c      	ite	eq
 8007e22:	2308      	moveq	r3, #8
 8007e24:	230a      	movne	r3, #10
 8007e26:	e7d5      	b.n	8007dd4 <_strtol_l.constprop.0+0x54>
 8007e28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e2c:	2f19      	cmp	r7, #25
 8007e2e:	d801      	bhi.n	8007e34 <_strtol_l.constprop.0+0xb4>
 8007e30:	3c37      	subs	r4, #55	@ 0x37
 8007e32:	e7de      	b.n	8007df2 <_strtol_l.constprop.0+0x72>
 8007e34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007e38:	2f19      	cmp	r7, #25
 8007e3a:	d804      	bhi.n	8007e46 <_strtol_l.constprop.0+0xc6>
 8007e3c:	3c57      	subs	r4, #87	@ 0x57
 8007e3e:	e7d8      	b.n	8007df2 <_strtol_l.constprop.0+0x72>
 8007e40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e44:	e7e1      	b.n	8007e0a <_strtol_l.constprop.0+0x8a>
 8007e46:	1c53      	adds	r3, r2, #1
 8007e48:	d108      	bne.n	8007e5c <_strtol_l.constprop.0+0xdc>
 8007e4a:	2322      	movs	r3, #34	@ 0x22
 8007e4c:	f8ce 3000 	str.w	r3, [lr]
 8007e50:	4660      	mov	r0, ip
 8007e52:	f1b8 0f00 	cmp.w	r8, #0
 8007e56:	d0a0      	beq.n	8007d9a <_strtol_l.constprop.0+0x1a>
 8007e58:	1e69      	subs	r1, r5, #1
 8007e5a:	e006      	b.n	8007e6a <_strtol_l.constprop.0+0xea>
 8007e5c:	b106      	cbz	r6, 8007e60 <_strtol_l.constprop.0+0xe0>
 8007e5e:	4240      	negs	r0, r0
 8007e60:	f1b8 0f00 	cmp.w	r8, #0
 8007e64:	d099      	beq.n	8007d9a <_strtol_l.constprop.0+0x1a>
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	d1f6      	bne.n	8007e58 <_strtol_l.constprop.0+0xd8>
 8007e6a:	f8c8 1000 	str.w	r1, [r8]
 8007e6e:	e794      	b.n	8007d9a <_strtol_l.constprop.0+0x1a>
 8007e70:	08009649 	.word	0x08009649

08007e74 <_strtol_r>:
 8007e74:	f7ff bf84 	b.w	8007d80 <_strtol_l.constprop.0>

08007e78 <strtol>:
 8007e78:	4613      	mov	r3, r2
 8007e7a:	460a      	mov	r2, r1
 8007e7c:	4601      	mov	r1, r0
 8007e7e:	4802      	ldr	r0, [pc, #8]	@ (8007e88 <strtol+0x10>)
 8007e80:	6800      	ldr	r0, [r0, #0]
 8007e82:	f7ff bf7d 	b.w	8007d80 <_strtol_l.constprop.0>
 8007e86:	bf00      	nop
 8007e88:	2000003c 	.word	0x2000003c

08007e8c <_fwalk_sglue>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	4607      	mov	r7, r0
 8007e92:	4688      	mov	r8, r1
 8007e94:	4614      	mov	r4, r2
 8007e96:	2600      	movs	r6, #0
 8007e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8007ea0:	d505      	bpl.n	8007eae <_fwalk_sglue+0x22>
 8007ea2:	6824      	ldr	r4, [r4, #0]
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	d1f7      	bne.n	8007e98 <_fwalk_sglue+0xc>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d907      	bls.n	8007ec4 <_fwalk_sglue+0x38>
 8007eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	d003      	beq.n	8007ec4 <_fwalk_sglue+0x38>
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	47c0      	blx	r8
 8007ec2:	4306      	orrs	r6, r0
 8007ec4:	3568      	adds	r5, #104	@ 0x68
 8007ec6:	e7e9      	b.n	8007e9c <_fwalk_sglue+0x10>

08007ec8 <_puts_r>:
 8007ec8:	6a03      	ldr	r3, [r0, #32]
 8007eca:	b570      	push	{r4, r5, r6, lr}
 8007ecc:	6884      	ldr	r4, [r0, #8]
 8007ece:	4605      	mov	r5, r0
 8007ed0:	460e      	mov	r6, r1
 8007ed2:	b90b      	cbnz	r3, 8007ed8 <_puts_r+0x10>
 8007ed4:	f7ff ff3c 	bl	8007d50 <__sinit>
 8007ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eda:	07db      	lsls	r3, r3, #31
 8007edc:	d405      	bmi.n	8007eea <_puts_r+0x22>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	0598      	lsls	r0, r3, #22
 8007ee2:	d402      	bmi.n	8007eea <_puts_r+0x22>
 8007ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ee6:	f000 f8c6 	bl	8008076 <__retarget_lock_acquire_recursive>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	0719      	lsls	r1, r3, #28
 8007eee:	d502      	bpl.n	8007ef6 <_puts_r+0x2e>
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d135      	bne.n	8007f62 <_puts_r+0x9a>
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 fecd 	bl	8008c98 <__swsetup_r>
 8007efe:	b380      	cbz	r0, 8007f62 <_puts_r+0x9a>
 8007f00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007f04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f06:	07da      	lsls	r2, r3, #31
 8007f08:	d405      	bmi.n	8007f16 <_puts_r+0x4e>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	059b      	lsls	r3, r3, #22
 8007f0e:	d402      	bmi.n	8007f16 <_puts_r+0x4e>
 8007f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f12:	f000 f8b1 	bl	8008078 <__retarget_lock_release_recursive>
 8007f16:	4628      	mov	r0, r5
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da04      	bge.n	8007f28 <_puts_r+0x60>
 8007f1e:	69a2      	ldr	r2, [r4, #24]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	dc17      	bgt.n	8007f54 <_puts_r+0x8c>
 8007f24:	290a      	cmp	r1, #10
 8007f26:	d015      	beq.n	8007f54 <_puts_r+0x8c>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	6022      	str	r2, [r4, #0]
 8007f2e:	7019      	strb	r1, [r3, #0]
 8007f30:	68a3      	ldr	r3, [r4, #8]
 8007f32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f36:	3b01      	subs	r3, #1
 8007f38:	60a3      	str	r3, [r4, #8]
 8007f3a:	2900      	cmp	r1, #0
 8007f3c:	d1ed      	bne.n	8007f1a <_puts_r+0x52>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da11      	bge.n	8007f66 <_puts_r+0x9e>
 8007f42:	4622      	mov	r2, r4
 8007f44:	210a      	movs	r1, #10
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 fe68 	bl	8008c1c <__swbuf_r>
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d0d7      	beq.n	8007f00 <_puts_r+0x38>
 8007f50:	250a      	movs	r5, #10
 8007f52:	e7d7      	b.n	8007f04 <_puts_r+0x3c>
 8007f54:	4622      	mov	r2, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 fe60 	bl	8008c1c <__swbuf_r>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d1e7      	bne.n	8007f30 <_puts_r+0x68>
 8007f60:	e7ce      	b.n	8007f00 <_puts_r+0x38>
 8007f62:	3e01      	subs	r6, #1
 8007f64:	e7e4      	b.n	8007f30 <_puts_r+0x68>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e7ee      	b.n	8007f50 <_puts_r+0x88>
	...

08007f74 <puts>:
 8007f74:	4b02      	ldr	r3, [pc, #8]	@ (8007f80 <puts+0xc>)
 8007f76:	4601      	mov	r1, r0
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	f7ff bfa5 	b.w	8007ec8 <_puts_r>
 8007f7e:	bf00      	nop
 8007f80:	2000003c 	.word	0x2000003c

08007f84 <memset>:
 8007f84:	4402      	add	r2, r0
 8007f86:	4603      	mov	r3, r0
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d100      	bne.n	8007f8e <memset+0xa>
 8007f8c:	4770      	bx	lr
 8007f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f92:	e7f9      	b.n	8007f88 <memset+0x4>

08007f94 <_close_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d06      	ldr	r5, [pc, #24]	@ (8007fb0 <_close_r+0x1c>)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	602b      	str	r3, [r5, #0]
 8007fa0:	f7fb fa48 	bl	8003434 <_close>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d102      	bne.n	8007fae <_close_r+0x1a>
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	b103      	cbz	r3, 8007fae <_close_r+0x1a>
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
 8007fb0:	20000538 	.word	0x20000538

08007fb4 <_lseek_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	@ (8007fd4 <_lseek_r+0x20>)
 8007fb8:	4604      	mov	r4, r0
 8007fba:	4608      	mov	r0, r1
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	602a      	str	r2, [r5, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f7fb fa5d 	bl	8003482 <_lseek>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_lseek_r+0x1e>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_lseek_r+0x1e>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20000538 	.word	0x20000538

08007fd8 <_read_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	@ (8007ff8 <_read_r+0x20>)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4608      	mov	r0, r1
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7fb f9eb 	bl	80033c2 <_read>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_read_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_read_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	20000538 	.word	0x20000538

08007ffc <_write_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	@ (800801c <_write_r+0x20>)
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	2200      	movs	r2, #0
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7fb f9f6 	bl	80033fc <_write>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_write_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_write_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20000538 	.word	0x20000538

08008020 <__errno>:
 8008020:	4b01      	ldr	r3, [pc, #4]	@ (8008028 <__errno+0x8>)
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	2000003c 	.word	0x2000003c

0800802c <__libc_init_array>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	4d0d      	ldr	r5, [pc, #52]	@ (8008064 <__libc_init_array+0x38>)
 8008030:	4c0d      	ldr	r4, [pc, #52]	@ (8008068 <__libc_init_array+0x3c>)
 8008032:	1b64      	subs	r4, r4, r5
 8008034:	10a4      	asrs	r4, r4, #2
 8008036:	2600      	movs	r6, #0
 8008038:	42a6      	cmp	r6, r4
 800803a:	d109      	bne.n	8008050 <__libc_init_array+0x24>
 800803c:	4d0b      	ldr	r5, [pc, #44]	@ (800806c <__libc_init_array+0x40>)
 800803e:	4c0c      	ldr	r4, [pc, #48]	@ (8008070 <__libc_init_array+0x44>)
 8008040:	f001 fa9c 	bl	800957c <_init>
 8008044:	1b64      	subs	r4, r4, r5
 8008046:	10a4      	asrs	r4, r4, #2
 8008048:	2600      	movs	r6, #0
 800804a:	42a6      	cmp	r6, r4
 800804c:	d105      	bne.n	800805a <__libc_init_array+0x2e>
 800804e:	bd70      	pop	{r4, r5, r6, pc}
 8008050:	f855 3b04 	ldr.w	r3, [r5], #4
 8008054:	4798      	blx	r3
 8008056:	3601      	adds	r6, #1
 8008058:	e7ee      	b.n	8008038 <__libc_init_array+0xc>
 800805a:	f855 3b04 	ldr.w	r3, [r5], #4
 800805e:	4798      	blx	r3
 8008060:	3601      	adds	r6, #1
 8008062:	e7f2      	b.n	800804a <__libc_init_array+0x1e>
 8008064:	080097e0 	.word	0x080097e0
 8008068:	080097e0 	.word	0x080097e0
 800806c:	080097e0 	.word	0x080097e0
 8008070:	080097e4 	.word	0x080097e4

08008074 <__retarget_lock_init_recursive>:
 8008074:	4770      	bx	lr

08008076 <__retarget_lock_acquire_recursive>:
 8008076:	4770      	bx	lr

08008078 <__retarget_lock_release_recursive>:
 8008078:	4770      	bx	lr
	...

0800807c <_free_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4605      	mov	r5, r0
 8008080:	2900      	cmp	r1, #0
 8008082:	d041      	beq.n	8008108 <_free_r+0x8c>
 8008084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008088:	1f0c      	subs	r4, r1, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	bfb8      	it	lt
 800808e:	18e4      	addlt	r4, r4, r3
 8008090:	f000 fce0 	bl	8008a54 <__malloc_lock>
 8008094:	4a1d      	ldr	r2, [pc, #116]	@ (800810c <_free_r+0x90>)
 8008096:	6813      	ldr	r3, [r2, #0]
 8008098:	b933      	cbnz	r3, 80080a8 <_free_r+0x2c>
 800809a:	6063      	str	r3, [r4, #4]
 800809c:	6014      	str	r4, [r2, #0]
 800809e:	4628      	mov	r0, r5
 80080a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080a4:	f000 bcdc 	b.w	8008a60 <__malloc_unlock>
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	d908      	bls.n	80080be <_free_r+0x42>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	1821      	adds	r1, r4, r0
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf01      	itttt	eq
 80080b4:	6819      	ldreq	r1, [r3, #0]
 80080b6:	685b      	ldreq	r3, [r3, #4]
 80080b8:	1809      	addeq	r1, r1, r0
 80080ba:	6021      	streq	r1, [r4, #0]
 80080bc:	e7ed      	b.n	800809a <_free_r+0x1e>
 80080be:	461a      	mov	r2, r3
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	b10b      	cbz	r3, 80080c8 <_free_r+0x4c>
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	d9fa      	bls.n	80080be <_free_r+0x42>
 80080c8:	6811      	ldr	r1, [r2, #0]
 80080ca:	1850      	adds	r0, r2, r1
 80080cc:	42a0      	cmp	r0, r4
 80080ce:	d10b      	bne.n	80080e8 <_free_r+0x6c>
 80080d0:	6820      	ldr	r0, [r4, #0]
 80080d2:	4401      	add	r1, r0
 80080d4:	1850      	adds	r0, r2, r1
 80080d6:	4283      	cmp	r3, r0
 80080d8:	6011      	str	r1, [r2, #0]
 80080da:	d1e0      	bne.n	800809e <_free_r+0x22>
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	6053      	str	r3, [r2, #4]
 80080e2:	4408      	add	r0, r1
 80080e4:	6010      	str	r0, [r2, #0]
 80080e6:	e7da      	b.n	800809e <_free_r+0x22>
 80080e8:	d902      	bls.n	80080f0 <_free_r+0x74>
 80080ea:	230c      	movs	r3, #12
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	e7d6      	b.n	800809e <_free_r+0x22>
 80080f0:	6820      	ldr	r0, [r4, #0]
 80080f2:	1821      	adds	r1, r4, r0
 80080f4:	428b      	cmp	r3, r1
 80080f6:	bf04      	itt	eq
 80080f8:	6819      	ldreq	r1, [r3, #0]
 80080fa:	685b      	ldreq	r3, [r3, #4]
 80080fc:	6063      	str	r3, [r4, #4]
 80080fe:	bf04      	itt	eq
 8008100:	1809      	addeq	r1, r1, r0
 8008102:	6021      	streq	r1, [r4, #0]
 8008104:	6054      	str	r4, [r2, #4]
 8008106:	e7ca      	b.n	800809e <_free_r+0x22>
 8008108:	bd38      	pop	{r3, r4, r5, pc}
 800810a:	bf00      	nop
 800810c:	20000544 	.word	0x20000544

08008110 <_sungetc_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	1c4b      	adds	r3, r1, #1
 8008114:	4614      	mov	r4, r2
 8008116:	d103      	bne.n	8008120 <_sungetc_r+0x10>
 8008118:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800811c:	4628      	mov	r0, r5
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	8993      	ldrh	r3, [r2, #12]
 8008122:	f023 0320 	bic.w	r3, r3, #32
 8008126:	8193      	strh	r3, [r2, #12]
 8008128:	6853      	ldr	r3, [r2, #4]
 800812a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800812c:	b2cd      	uxtb	r5, r1
 800812e:	b18a      	cbz	r2, 8008154 <_sungetc_r+0x44>
 8008130:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008132:	429a      	cmp	r2, r3
 8008134:	dd08      	ble.n	8008148 <_sungetc_r+0x38>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	1e5a      	subs	r2, r3, #1
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	3301      	adds	r3, #1
 8008144:	6063      	str	r3, [r4, #4]
 8008146:	e7e9      	b.n	800811c <_sungetc_r+0xc>
 8008148:	4621      	mov	r1, r4
 800814a:	f000 fc8f 	bl	8008a6c <__submore>
 800814e:	2800      	cmp	r0, #0
 8008150:	d0f1      	beq.n	8008136 <_sungetc_r+0x26>
 8008152:	e7e1      	b.n	8008118 <_sungetc_r+0x8>
 8008154:	6921      	ldr	r1, [r4, #16]
 8008156:	6822      	ldr	r2, [r4, #0]
 8008158:	b141      	cbz	r1, 800816c <_sungetc_r+0x5c>
 800815a:	4291      	cmp	r1, r2
 800815c:	d206      	bcs.n	800816c <_sungetc_r+0x5c>
 800815e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008162:	42a9      	cmp	r1, r5
 8008164:	d102      	bne.n	800816c <_sungetc_r+0x5c>
 8008166:	3a01      	subs	r2, #1
 8008168:	6022      	str	r2, [r4, #0]
 800816a:	e7ea      	b.n	8008142 <_sungetc_r+0x32>
 800816c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008170:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008174:	6363      	str	r3, [r4, #52]	@ 0x34
 8008176:	2303      	movs	r3, #3
 8008178:	63a3      	str	r3, [r4, #56]	@ 0x38
 800817a:	4623      	mov	r3, r4
 800817c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	2301      	movs	r3, #1
 8008184:	e7de      	b.n	8008144 <_sungetc_r+0x34>

08008186 <__ssrefill_r>:
 8008186:	b510      	push	{r4, lr}
 8008188:	460c      	mov	r4, r1
 800818a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800818c:	b169      	cbz	r1, 80081aa <__ssrefill_r+0x24>
 800818e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008192:	4299      	cmp	r1, r3
 8008194:	d001      	beq.n	800819a <__ssrefill_r+0x14>
 8008196:	f7ff ff71 	bl	800807c <_free_r>
 800819a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800819c:	6063      	str	r3, [r4, #4]
 800819e:	2000      	movs	r0, #0
 80081a0:	6360      	str	r0, [r4, #52]	@ 0x34
 80081a2:	b113      	cbz	r3, 80081aa <__ssrefill_r+0x24>
 80081a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	bd10      	pop	{r4, pc}
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	2300      	movs	r3, #0
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f043 0320 	orr.w	r3, r3, #32
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081be:	e7f3      	b.n	80081a8 <__ssrefill_r+0x22>

080081c0 <__ssvfiscanf_r>:
 80081c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80081ca:	2100      	movs	r1, #0
 80081cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80081d0:	49a5      	ldr	r1, [pc, #660]	@ (8008468 <__ssvfiscanf_r+0x2a8>)
 80081d2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80081d4:	f10d 0804 	add.w	r8, sp, #4
 80081d8:	49a4      	ldr	r1, [pc, #656]	@ (800846c <__ssvfiscanf_r+0x2ac>)
 80081da:	4fa5      	ldr	r7, [pc, #660]	@ (8008470 <__ssvfiscanf_r+0x2b0>)
 80081dc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80081e0:	4606      	mov	r6, r0
 80081e2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	7813      	ldrb	r3, [r2, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8158 	beq.w	800849e <__ssvfiscanf_r+0x2de>
 80081ee:	5cf9      	ldrb	r1, [r7, r3]
 80081f0:	f011 0108 	ands.w	r1, r1, #8
 80081f4:	f102 0501 	add.w	r5, r2, #1
 80081f8:	d019      	beq.n	800822e <__ssvfiscanf_r+0x6e>
 80081fa:	6863      	ldr	r3, [r4, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dd0f      	ble.n	8008220 <__ssvfiscanf_r+0x60>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	781a      	ldrb	r2, [r3, #0]
 8008204:	5cba      	ldrb	r2, [r7, r2]
 8008206:	0712      	lsls	r2, r2, #28
 8008208:	d401      	bmi.n	800820e <__ssvfiscanf_r+0x4e>
 800820a:	462a      	mov	r2, r5
 800820c:	e7eb      	b.n	80081e6 <__ssvfiscanf_r+0x26>
 800820e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008210:	3201      	adds	r2, #1
 8008212:	9245      	str	r2, [sp, #276]	@ 0x114
 8008214:	6862      	ldr	r2, [r4, #4]
 8008216:	3301      	adds	r3, #1
 8008218:	3a01      	subs	r2, #1
 800821a:	6062      	str	r2, [r4, #4]
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	e7ec      	b.n	80081fa <__ssvfiscanf_r+0x3a>
 8008220:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008222:	4621      	mov	r1, r4
 8008224:	4630      	mov	r0, r6
 8008226:	4798      	blx	r3
 8008228:	2800      	cmp	r0, #0
 800822a:	d0e9      	beq.n	8008200 <__ssvfiscanf_r+0x40>
 800822c:	e7ed      	b.n	800820a <__ssvfiscanf_r+0x4a>
 800822e:	2b25      	cmp	r3, #37	@ 0x25
 8008230:	d012      	beq.n	8008258 <__ssvfiscanf_r+0x98>
 8008232:	4699      	mov	r9, r3
 8008234:	6863      	ldr	r3, [r4, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f340 8093 	ble.w	8008362 <__ssvfiscanf_r+0x1a2>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	7813      	ldrb	r3, [r2, #0]
 8008240:	454b      	cmp	r3, r9
 8008242:	f040 812c 	bne.w	800849e <__ssvfiscanf_r+0x2de>
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	3b01      	subs	r3, #1
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800824e:	3201      	adds	r2, #1
 8008250:	3301      	adds	r3, #1
 8008252:	6022      	str	r2, [r4, #0]
 8008254:	9345      	str	r3, [sp, #276]	@ 0x114
 8008256:	e7d8      	b.n	800820a <__ssvfiscanf_r+0x4a>
 8008258:	9141      	str	r1, [sp, #260]	@ 0x104
 800825a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800825c:	7853      	ldrb	r3, [r2, #1]
 800825e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008260:	bf02      	ittt	eq
 8008262:	2310      	moveq	r3, #16
 8008264:	1c95      	addeq	r5, r2, #2
 8008266:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008268:	220a      	movs	r2, #10
 800826a:	46a9      	mov	r9, r5
 800826c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008270:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008274:	2b09      	cmp	r3, #9
 8008276:	d91e      	bls.n	80082b6 <__ssvfiscanf_r+0xf6>
 8008278:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008474 <__ssvfiscanf_r+0x2b4>
 800827c:	2203      	movs	r2, #3
 800827e:	4650      	mov	r0, sl
 8008280:	f7f7 ffd6 	bl	8000230 <memchr>
 8008284:	b138      	cbz	r0, 8008296 <__ssvfiscanf_r+0xd6>
 8008286:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008288:	eba0 000a 	sub.w	r0, r0, sl
 800828c:	2301      	movs	r3, #1
 800828e:	4083      	lsls	r3, r0
 8008290:	4313      	orrs	r3, r2
 8008292:	9341      	str	r3, [sp, #260]	@ 0x104
 8008294:	464d      	mov	r5, r9
 8008296:	f815 3b01 	ldrb.w	r3, [r5], #1
 800829a:	2b78      	cmp	r3, #120	@ 0x78
 800829c:	d806      	bhi.n	80082ac <__ssvfiscanf_r+0xec>
 800829e:	2b57      	cmp	r3, #87	@ 0x57
 80082a0:	d810      	bhi.n	80082c4 <__ssvfiscanf_r+0x104>
 80082a2:	2b25      	cmp	r3, #37	@ 0x25
 80082a4:	d0c5      	beq.n	8008232 <__ssvfiscanf_r+0x72>
 80082a6:	d857      	bhi.n	8008358 <__ssvfiscanf_r+0x198>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d065      	beq.n	8008378 <__ssvfiscanf_r+0x1b8>
 80082ac:	2303      	movs	r3, #3
 80082ae:	9347      	str	r3, [sp, #284]	@ 0x11c
 80082b0:	230a      	movs	r3, #10
 80082b2:	9342      	str	r3, [sp, #264]	@ 0x108
 80082b4:	e078      	b.n	80083a8 <__ssvfiscanf_r+0x1e8>
 80082b6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80082b8:	fb02 1103 	mla	r1, r2, r3, r1
 80082bc:	3930      	subs	r1, #48	@ 0x30
 80082be:	9143      	str	r1, [sp, #268]	@ 0x10c
 80082c0:	464d      	mov	r5, r9
 80082c2:	e7d2      	b.n	800826a <__ssvfiscanf_r+0xaa>
 80082c4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80082c8:	2a20      	cmp	r2, #32
 80082ca:	d8ef      	bhi.n	80082ac <__ssvfiscanf_r+0xec>
 80082cc:	a101      	add	r1, pc, #4	@ (adr r1, 80082d4 <__ssvfiscanf_r+0x114>)
 80082ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80082d2:	bf00      	nop
 80082d4:	08008387 	.word	0x08008387
 80082d8:	080082ad 	.word	0x080082ad
 80082dc:	080082ad 	.word	0x080082ad
 80082e0:	080083e1 	.word	0x080083e1
 80082e4:	080082ad 	.word	0x080082ad
 80082e8:	080082ad 	.word	0x080082ad
 80082ec:	080082ad 	.word	0x080082ad
 80082f0:	080082ad 	.word	0x080082ad
 80082f4:	080082ad 	.word	0x080082ad
 80082f8:	080082ad 	.word	0x080082ad
 80082fc:	080082ad 	.word	0x080082ad
 8008300:	080083f7 	.word	0x080083f7
 8008304:	080083dd 	.word	0x080083dd
 8008308:	0800835f 	.word	0x0800835f
 800830c:	0800835f 	.word	0x0800835f
 8008310:	0800835f 	.word	0x0800835f
 8008314:	080082ad 	.word	0x080082ad
 8008318:	08008399 	.word	0x08008399
 800831c:	080082ad 	.word	0x080082ad
 8008320:	080082ad 	.word	0x080082ad
 8008324:	080082ad 	.word	0x080082ad
 8008328:	080082ad 	.word	0x080082ad
 800832c:	08008407 	.word	0x08008407
 8008330:	080083a1 	.word	0x080083a1
 8008334:	0800837f 	.word	0x0800837f
 8008338:	080082ad 	.word	0x080082ad
 800833c:	080082ad 	.word	0x080082ad
 8008340:	08008403 	.word	0x08008403
 8008344:	080082ad 	.word	0x080082ad
 8008348:	080083dd 	.word	0x080083dd
 800834c:	080082ad 	.word	0x080082ad
 8008350:	080082ad 	.word	0x080082ad
 8008354:	08008387 	.word	0x08008387
 8008358:	3b45      	subs	r3, #69	@ 0x45
 800835a:	2b02      	cmp	r3, #2
 800835c:	d8a6      	bhi.n	80082ac <__ssvfiscanf_r+0xec>
 800835e:	2305      	movs	r3, #5
 8008360:	e021      	b.n	80083a6 <__ssvfiscanf_r+0x1e6>
 8008362:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008364:	4621      	mov	r1, r4
 8008366:	4630      	mov	r0, r6
 8008368:	4798      	blx	r3
 800836a:	2800      	cmp	r0, #0
 800836c:	f43f af66 	beq.w	800823c <__ssvfiscanf_r+0x7c>
 8008370:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008372:	2800      	cmp	r0, #0
 8008374:	f040 808b 	bne.w	800848e <__ssvfiscanf_r+0x2ce>
 8008378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800837c:	e08b      	b.n	8008496 <__ssvfiscanf_r+0x2d6>
 800837e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008380:	f042 0220 	orr.w	r2, r2, #32
 8008384:	9241      	str	r2, [sp, #260]	@ 0x104
 8008386:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800838c:	9241      	str	r2, [sp, #260]	@ 0x104
 800838e:	2210      	movs	r2, #16
 8008390:	2b6e      	cmp	r3, #110	@ 0x6e
 8008392:	9242      	str	r2, [sp, #264]	@ 0x108
 8008394:	d902      	bls.n	800839c <__ssvfiscanf_r+0x1dc>
 8008396:	e005      	b.n	80083a4 <__ssvfiscanf_r+0x1e4>
 8008398:	2300      	movs	r3, #0
 800839a:	9342      	str	r3, [sp, #264]	@ 0x108
 800839c:	2303      	movs	r3, #3
 800839e:	e002      	b.n	80083a6 <__ssvfiscanf_r+0x1e6>
 80083a0:	2308      	movs	r3, #8
 80083a2:	9342      	str	r3, [sp, #264]	@ 0x108
 80083a4:	2304      	movs	r3, #4
 80083a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80083a8:	6863      	ldr	r3, [r4, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dd39      	ble.n	8008422 <__ssvfiscanf_r+0x262>
 80083ae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80083b0:	0659      	lsls	r1, r3, #25
 80083b2:	d404      	bmi.n	80083be <__ssvfiscanf_r+0x1fe>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	781a      	ldrb	r2, [r3, #0]
 80083b8:	5cba      	ldrb	r2, [r7, r2]
 80083ba:	0712      	lsls	r2, r2, #28
 80083bc:	d438      	bmi.n	8008430 <__ssvfiscanf_r+0x270>
 80083be:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	dc47      	bgt.n	8008454 <__ssvfiscanf_r+0x294>
 80083c4:	466b      	mov	r3, sp
 80083c6:	4622      	mov	r2, r4
 80083c8:	a941      	add	r1, sp, #260	@ 0x104
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 f90e 	bl	80085ec <_scanf_chars>
 80083d0:	2801      	cmp	r0, #1
 80083d2:	d064      	beq.n	800849e <__ssvfiscanf_r+0x2de>
 80083d4:	2802      	cmp	r0, #2
 80083d6:	f47f af18 	bne.w	800820a <__ssvfiscanf_r+0x4a>
 80083da:	e7c9      	b.n	8008370 <__ssvfiscanf_r+0x1b0>
 80083dc:	220a      	movs	r2, #10
 80083de:	e7d7      	b.n	8008390 <__ssvfiscanf_r+0x1d0>
 80083e0:	4629      	mov	r1, r5
 80083e2:	4640      	mov	r0, r8
 80083e4:	f000 fa50 	bl	8008888 <__sccl>
 80083e8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80083ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ee:	9341      	str	r3, [sp, #260]	@ 0x104
 80083f0:	4605      	mov	r5, r0
 80083f2:	2301      	movs	r3, #1
 80083f4:	e7d7      	b.n	80083a6 <__ssvfiscanf_r+0x1e6>
 80083f6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80083f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fc:	9341      	str	r3, [sp, #260]	@ 0x104
 80083fe:	2300      	movs	r3, #0
 8008400:	e7d1      	b.n	80083a6 <__ssvfiscanf_r+0x1e6>
 8008402:	2302      	movs	r3, #2
 8008404:	e7cf      	b.n	80083a6 <__ssvfiscanf_r+0x1e6>
 8008406:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008408:	06c3      	lsls	r3, r0, #27
 800840a:	f53f aefe 	bmi.w	800820a <__ssvfiscanf_r+0x4a>
 800840e:	9b00      	ldr	r3, [sp, #0]
 8008410:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008412:	1d19      	adds	r1, r3, #4
 8008414:	9100      	str	r1, [sp, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	07c0      	lsls	r0, r0, #31
 800841a:	bf4c      	ite	mi
 800841c:	801a      	strhmi	r2, [r3, #0]
 800841e:	601a      	strpl	r2, [r3, #0]
 8008420:	e6f3      	b.n	800820a <__ssvfiscanf_r+0x4a>
 8008422:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008424:	4621      	mov	r1, r4
 8008426:	4630      	mov	r0, r6
 8008428:	4798      	blx	r3
 800842a:	2800      	cmp	r0, #0
 800842c:	d0bf      	beq.n	80083ae <__ssvfiscanf_r+0x1ee>
 800842e:	e79f      	b.n	8008370 <__ssvfiscanf_r+0x1b0>
 8008430:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008432:	3201      	adds	r2, #1
 8008434:	9245      	str	r2, [sp, #276]	@ 0x114
 8008436:	6862      	ldr	r2, [r4, #4]
 8008438:	3a01      	subs	r2, #1
 800843a:	2a00      	cmp	r2, #0
 800843c:	6062      	str	r2, [r4, #4]
 800843e:	dd02      	ble.n	8008446 <__ssvfiscanf_r+0x286>
 8008440:	3301      	adds	r3, #1
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	e7b6      	b.n	80083b4 <__ssvfiscanf_r+0x1f4>
 8008446:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008448:	4621      	mov	r1, r4
 800844a:	4630      	mov	r0, r6
 800844c:	4798      	blx	r3
 800844e:	2800      	cmp	r0, #0
 8008450:	d0b0      	beq.n	80083b4 <__ssvfiscanf_r+0x1f4>
 8008452:	e78d      	b.n	8008370 <__ssvfiscanf_r+0x1b0>
 8008454:	2b04      	cmp	r3, #4
 8008456:	dc0f      	bgt.n	8008478 <__ssvfiscanf_r+0x2b8>
 8008458:	466b      	mov	r3, sp
 800845a:	4622      	mov	r2, r4
 800845c:	a941      	add	r1, sp, #260	@ 0x104
 800845e:	4630      	mov	r0, r6
 8008460:	f000 f91e 	bl	80086a0 <_scanf_i>
 8008464:	e7b4      	b.n	80083d0 <__ssvfiscanf_r+0x210>
 8008466:	bf00      	nop
 8008468:	08008111 	.word	0x08008111
 800846c:	08008187 	.word	0x08008187
 8008470:	08009649 	.word	0x08009649
 8008474:	08009749 	.word	0x08009749
 8008478:	4b0a      	ldr	r3, [pc, #40]	@ (80084a4 <__ssvfiscanf_r+0x2e4>)
 800847a:	2b00      	cmp	r3, #0
 800847c:	f43f aec5 	beq.w	800820a <__ssvfiscanf_r+0x4a>
 8008480:	466b      	mov	r3, sp
 8008482:	4622      	mov	r2, r4
 8008484:	a941      	add	r1, sp, #260	@ 0x104
 8008486:	4630      	mov	r0, r6
 8008488:	f3af 8000 	nop.w
 800848c:	e7a0      	b.n	80083d0 <__ssvfiscanf_r+0x210>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	065b      	lsls	r3, r3, #25
 8008492:	f53f af71 	bmi.w	8008378 <__ssvfiscanf_r+0x1b8>
 8008496:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800849a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80084a0:	e7f9      	b.n	8008496 <__ssvfiscanf_r+0x2d6>
 80084a2:	bf00      	nop
 80084a4:	00000000 	.word	0x00000000

080084a8 <sbrk_aligned>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	4e0f      	ldr	r6, [pc, #60]	@ (80084e8 <sbrk_aligned+0x40>)
 80084ac:	460c      	mov	r4, r1
 80084ae:	6831      	ldr	r1, [r6, #0]
 80084b0:	4605      	mov	r5, r0
 80084b2:	b911      	cbnz	r1, 80084ba <sbrk_aligned+0x12>
 80084b4:	f000 fcca 	bl	8008e4c <_sbrk_r>
 80084b8:	6030      	str	r0, [r6, #0]
 80084ba:	4621      	mov	r1, r4
 80084bc:	4628      	mov	r0, r5
 80084be:	f000 fcc5 	bl	8008e4c <_sbrk_r>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d103      	bne.n	80084ce <sbrk_aligned+0x26>
 80084c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80084ca:	4620      	mov	r0, r4
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	1cc4      	adds	r4, r0, #3
 80084d0:	f024 0403 	bic.w	r4, r4, #3
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d0f8      	beq.n	80084ca <sbrk_aligned+0x22>
 80084d8:	1a21      	subs	r1, r4, r0
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 fcb6 	bl	8008e4c <_sbrk_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d1f2      	bne.n	80084ca <sbrk_aligned+0x22>
 80084e4:	e7ef      	b.n	80084c6 <sbrk_aligned+0x1e>
 80084e6:	bf00      	nop
 80084e8:	20000540 	.word	0x20000540

080084ec <_malloc_r>:
 80084ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	1ccd      	adds	r5, r1, #3
 80084f2:	f025 0503 	bic.w	r5, r5, #3
 80084f6:	3508      	adds	r5, #8
 80084f8:	2d0c      	cmp	r5, #12
 80084fa:	bf38      	it	cc
 80084fc:	250c      	movcc	r5, #12
 80084fe:	2d00      	cmp	r5, #0
 8008500:	4606      	mov	r6, r0
 8008502:	db01      	blt.n	8008508 <_malloc_r+0x1c>
 8008504:	42a9      	cmp	r1, r5
 8008506:	d904      	bls.n	8008512 <_malloc_r+0x26>
 8008508:	230c      	movs	r3, #12
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	2000      	movs	r0, #0
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085e8 <_malloc_r+0xfc>
 8008516:	f000 fa9d 	bl	8008a54 <__malloc_lock>
 800851a:	f8d8 3000 	ldr.w	r3, [r8]
 800851e:	461c      	mov	r4, r3
 8008520:	bb44      	cbnz	r4, 8008574 <_malloc_r+0x88>
 8008522:	4629      	mov	r1, r5
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff ffbf 	bl	80084a8 <sbrk_aligned>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	4604      	mov	r4, r0
 800852e:	d158      	bne.n	80085e2 <_malloc_r+0xf6>
 8008530:	f8d8 4000 	ldr.w	r4, [r8]
 8008534:	4627      	mov	r7, r4
 8008536:	2f00      	cmp	r7, #0
 8008538:	d143      	bne.n	80085c2 <_malloc_r+0xd6>
 800853a:	2c00      	cmp	r4, #0
 800853c:	d04b      	beq.n	80085d6 <_malloc_r+0xea>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	4639      	mov	r1, r7
 8008542:	4630      	mov	r0, r6
 8008544:	eb04 0903 	add.w	r9, r4, r3
 8008548:	f000 fc80 	bl	8008e4c <_sbrk_r>
 800854c:	4581      	cmp	r9, r0
 800854e:	d142      	bne.n	80085d6 <_malloc_r+0xea>
 8008550:	6821      	ldr	r1, [r4, #0]
 8008552:	1a6d      	subs	r5, r5, r1
 8008554:	4629      	mov	r1, r5
 8008556:	4630      	mov	r0, r6
 8008558:	f7ff ffa6 	bl	80084a8 <sbrk_aligned>
 800855c:	3001      	adds	r0, #1
 800855e:	d03a      	beq.n	80085d6 <_malloc_r+0xea>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	442b      	add	r3, r5
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	f8d8 3000 	ldr.w	r3, [r8]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	bb62      	cbnz	r2, 80085c8 <_malloc_r+0xdc>
 800856e:	f8c8 7000 	str.w	r7, [r8]
 8008572:	e00f      	b.n	8008594 <_malloc_r+0xa8>
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	1b52      	subs	r2, r2, r5
 8008578:	d420      	bmi.n	80085bc <_malloc_r+0xd0>
 800857a:	2a0b      	cmp	r2, #11
 800857c:	d917      	bls.n	80085ae <_malloc_r+0xc2>
 800857e:	1961      	adds	r1, r4, r5
 8008580:	42a3      	cmp	r3, r4
 8008582:	6025      	str	r5, [r4, #0]
 8008584:	bf18      	it	ne
 8008586:	6059      	strne	r1, [r3, #4]
 8008588:	6863      	ldr	r3, [r4, #4]
 800858a:	bf08      	it	eq
 800858c:	f8c8 1000 	streq.w	r1, [r8]
 8008590:	5162      	str	r2, [r4, r5]
 8008592:	604b      	str	r3, [r1, #4]
 8008594:	4630      	mov	r0, r6
 8008596:	f000 fa63 	bl	8008a60 <__malloc_unlock>
 800859a:	f104 000b 	add.w	r0, r4, #11
 800859e:	1d23      	adds	r3, r4, #4
 80085a0:	f020 0007 	bic.w	r0, r0, #7
 80085a4:	1ac2      	subs	r2, r0, r3
 80085a6:	bf1c      	itt	ne
 80085a8:	1a1b      	subne	r3, r3, r0
 80085aa:	50a3      	strne	r3, [r4, r2]
 80085ac:	e7af      	b.n	800850e <_malloc_r+0x22>
 80085ae:	6862      	ldr	r2, [r4, #4]
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	bf0c      	ite	eq
 80085b4:	f8c8 2000 	streq.w	r2, [r8]
 80085b8:	605a      	strne	r2, [r3, #4]
 80085ba:	e7eb      	b.n	8008594 <_malloc_r+0xa8>
 80085bc:	4623      	mov	r3, r4
 80085be:	6864      	ldr	r4, [r4, #4]
 80085c0:	e7ae      	b.n	8008520 <_malloc_r+0x34>
 80085c2:	463c      	mov	r4, r7
 80085c4:	687f      	ldr	r7, [r7, #4]
 80085c6:	e7b6      	b.n	8008536 <_malloc_r+0x4a>
 80085c8:	461a      	mov	r2, r3
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	d1fb      	bne.n	80085c8 <_malloc_r+0xdc>
 80085d0:	2300      	movs	r3, #0
 80085d2:	6053      	str	r3, [r2, #4]
 80085d4:	e7de      	b.n	8008594 <_malloc_r+0xa8>
 80085d6:	230c      	movs	r3, #12
 80085d8:	6033      	str	r3, [r6, #0]
 80085da:	4630      	mov	r0, r6
 80085dc:	f000 fa40 	bl	8008a60 <__malloc_unlock>
 80085e0:	e794      	b.n	800850c <_malloc_r+0x20>
 80085e2:	6005      	str	r5, [r0, #0]
 80085e4:	e7d6      	b.n	8008594 <_malloc_r+0xa8>
 80085e6:	bf00      	nop
 80085e8:	20000544 	.word	0x20000544

080085ec <_scanf_chars>:
 80085ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f0:	4615      	mov	r5, r2
 80085f2:	688a      	ldr	r2, [r1, #8]
 80085f4:	4680      	mov	r8, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	b932      	cbnz	r2, 8008608 <_scanf_chars+0x1c>
 80085fa:	698a      	ldr	r2, [r1, #24]
 80085fc:	2a00      	cmp	r2, #0
 80085fe:	bf14      	ite	ne
 8008600:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008604:	2201      	moveq	r2, #1
 8008606:	608a      	str	r2, [r1, #8]
 8008608:	6822      	ldr	r2, [r4, #0]
 800860a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800869c <_scanf_chars+0xb0>
 800860e:	06d1      	lsls	r1, r2, #27
 8008610:	bf5f      	itttt	pl
 8008612:	681a      	ldrpl	r2, [r3, #0]
 8008614:	1d11      	addpl	r1, r2, #4
 8008616:	6019      	strpl	r1, [r3, #0]
 8008618:	6816      	ldrpl	r6, [r2, #0]
 800861a:	2700      	movs	r7, #0
 800861c:	69a0      	ldr	r0, [r4, #24]
 800861e:	b188      	cbz	r0, 8008644 <_scanf_chars+0x58>
 8008620:	2801      	cmp	r0, #1
 8008622:	d107      	bne.n	8008634 <_scanf_chars+0x48>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	6963      	ldr	r3, [r4, #20]
 800862a:	5c9b      	ldrb	r3, [r3, r2]
 800862c:	b953      	cbnz	r3, 8008644 <_scanf_chars+0x58>
 800862e:	2f00      	cmp	r7, #0
 8008630:	d031      	beq.n	8008696 <_scanf_chars+0xaa>
 8008632:	e022      	b.n	800867a <_scanf_chars+0x8e>
 8008634:	2802      	cmp	r0, #2
 8008636:	d120      	bne.n	800867a <_scanf_chars+0x8e>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008640:	071b      	lsls	r3, r3, #28
 8008642:	d41a      	bmi.n	800867a <_scanf_chars+0x8e>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	06da      	lsls	r2, r3, #27
 8008648:	bf5e      	ittt	pl
 800864a:	682b      	ldrpl	r3, [r5, #0]
 800864c:	781b      	ldrbpl	r3, [r3, #0]
 800864e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008652:	682a      	ldr	r2, [r5, #0]
 8008654:	686b      	ldr	r3, [r5, #4]
 8008656:	3201      	adds	r2, #1
 8008658:	602a      	str	r2, [r5, #0]
 800865a:	68a2      	ldr	r2, [r4, #8]
 800865c:	3b01      	subs	r3, #1
 800865e:	3a01      	subs	r2, #1
 8008660:	606b      	str	r3, [r5, #4]
 8008662:	3701      	adds	r7, #1
 8008664:	60a2      	str	r2, [r4, #8]
 8008666:	b142      	cbz	r2, 800867a <_scanf_chars+0x8e>
 8008668:	2b00      	cmp	r3, #0
 800866a:	dcd7      	bgt.n	800861c <_scanf_chars+0x30>
 800866c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008670:	4629      	mov	r1, r5
 8008672:	4640      	mov	r0, r8
 8008674:	4798      	blx	r3
 8008676:	2800      	cmp	r0, #0
 8008678:	d0d0      	beq.n	800861c <_scanf_chars+0x30>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	f013 0310 	ands.w	r3, r3, #16
 8008680:	d105      	bne.n	800868e <_scanf_chars+0xa2>
 8008682:	68e2      	ldr	r2, [r4, #12]
 8008684:	3201      	adds	r2, #1
 8008686:	60e2      	str	r2, [r4, #12]
 8008688:	69a2      	ldr	r2, [r4, #24]
 800868a:	b102      	cbz	r2, 800868e <_scanf_chars+0xa2>
 800868c:	7033      	strb	r3, [r6, #0]
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	443b      	add	r3, r7
 8008692:	6123      	str	r3, [r4, #16]
 8008694:	2000      	movs	r0, #0
 8008696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800869a:	bf00      	nop
 800869c:	08009649 	.word	0x08009649

080086a0 <_scanf_i>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	4698      	mov	r8, r3
 80086a6:	4b74      	ldr	r3, [pc, #464]	@ (8008878 <_scanf_i+0x1d8>)
 80086a8:	460c      	mov	r4, r1
 80086aa:	4682      	mov	sl, r0
 80086ac:	4616      	mov	r6, r2
 80086ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086b2:	b087      	sub	sp, #28
 80086b4:	ab03      	add	r3, sp, #12
 80086b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80086ba:	4b70      	ldr	r3, [pc, #448]	@ (800887c <_scanf_i+0x1dc>)
 80086bc:	69a1      	ldr	r1, [r4, #24]
 80086be:	4a70      	ldr	r2, [pc, #448]	@ (8008880 <_scanf_i+0x1e0>)
 80086c0:	2903      	cmp	r1, #3
 80086c2:	bf08      	it	eq
 80086c4:	461a      	moveq	r2, r3
 80086c6:	68a3      	ldr	r3, [r4, #8]
 80086c8:	9201      	str	r2, [sp, #4]
 80086ca:	1e5a      	subs	r2, r3, #1
 80086cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80086d0:	bf88      	it	hi
 80086d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80086d6:	4627      	mov	r7, r4
 80086d8:	bf82      	ittt	hi
 80086da:	eb03 0905 	addhi.w	r9, r3, r5
 80086de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80086e2:	60a3      	strhi	r3, [r4, #8]
 80086e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80086e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80086ec:	bf98      	it	ls
 80086ee:	f04f 0900 	movls.w	r9, #0
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	463d      	mov	r5, r7
 80086f6:	f04f 0b00 	mov.w	fp, #0
 80086fa:	6831      	ldr	r1, [r6, #0]
 80086fc:	ab03      	add	r3, sp, #12
 80086fe:	7809      	ldrb	r1, [r1, #0]
 8008700:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008704:	2202      	movs	r2, #2
 8008706:	f7f7 fd93 	bl	8000230 <memchr>
 800870a:	b328      	cbz	r0, 8008758 <_scanf_i+0xb8>
 800870c:	f1bb 0f01 	cmp.w	fp, #1
 8008710:	d159      	bne.n	80087c6 <_scanf_i+0x126>
 8008712:	6862      	ldr	r2, [r4, #4]
 8008714:	b92a      	cbnz	r2, 8008722 <_scanf_i+0x82>
 8008716:	6822      	ldr	r2, [r4, #0]
 8008718:	2108      	movs	r1, #8
 800871a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800871e:	6061      	str	r1, [r4, #4]
 8008720:	6022      	str	r2, [r4, #0]
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008728:	6022      	str	r2, [r4, #0]
 800872a:	68a2      	ldr	r2, [r4, #8]
 800872c:	1e51      	subs	r1, r2, #1
 800872e:	60a1      	str	r1, [r4, #8]
 8008730:	b192      	cbz	r2, 8008758 <_scanf_i+0xb8>
 8008732:	6832      	ldr	r2, [r6, #0]
 8008734:	1c51      	adds	r1, r2, #1
 8008736:	6031      	str	r1, [r6, #0]
 8008738:	7812      	ldrb	r2, [r2, #0]
 800873a:	f805 2b01 	strb.w	r2, [r5], #1
 800873e:	6872      	ldr	r2, [r6, #4]
 8008740:	3a01      	subs	r2, #1
 8008742:	2a00      	cmp	r2, #0
 8008744:	6072      	str	r2, [r6, #4]
 8008746:	dc07      	bgt.n	8008758 <_scanf_i+0xb8>
 8008748:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800874c:	4631      	mov	r1, r6
 800874e:	4650      	mov	r0, sl
 8008750:	4790      	blx	r2
 8008752:	2800      	cmp	r0, #0
 8008754:	f040 8085 	bne.w	8008862 <_scanf_i+0x1c2>
 8008758:	f10b 0b01 	add.w	fp, fp, #1
 800875c:	f1bb 0f03 	cmp.w	fp, #3
 8008760:	d1cb      	bne.n	80086fa <_scanf_i+0x5a>
 8008762:	6863      	ldr	r3, [r4, #4]
 8008764:	b90b      	cbnz	r3, 800876a <_scanf_i+0xca>
 8008766:	230a      	movs	r3, #10
 8008768:	6063      	str	r3, [r4, #4]
 800876a:	6863      	ldr	r3, [r4, #4]
 800876c:	4945      	ldr	r1, [pc, #276]	@ (8008884 <_scanf_i+0x1e4>)
 800876e:	6960      	ldr	r0, [r4, #20]
 8008770:	1ac9      	subs	r1, r1, r3
 8008772:	f000 f889 	bl	8008888 <__sccl>
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	68a3      	ldr	r3, [r4, #8]
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d03d      	beq.n	80087fe <_scanf_i+0x15e>
 8008782:	6831      	ldr	r1, [r6, #0]
 8008784:	6960      	ldr	r0, [r4, #20]
 8008786:	f891 c000 	ldrb.w	ip, [r1]
 800878a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800878e:	2800      	cmp	r0, #0
 8008790:	d035      	beq.n	80087fe <_scanf_i+0x15e>
 8008792:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008796:	d124      	bne.n	80087e2 <_scanf_i+0x142>
 8008798:	0510      	lsls	r0, r2, #20
 800879a:	d522      	bpl.n	80087e2 <_scanf_i+0x142>
 800879c:	f10b 0b01 	add.w	fp, fp, #1
 80087a0:	f1b9 0f00 	cmp.w	r9, #0
 80087a4:	d003      	beq.n	80087ae <_scanf_i+0x10e>
 80087a6:	3301      	adds	r3, #1
 80087a8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80087ac:	60a3      	str	r3, [r4, #8]
 80087ae:	6873      	ldr	r3, [r6, #4]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	6073      	str	r3, [r6, #4]
 80087b6:	dd1b      	ble.n	80087f0 <_scanf_i+0x150>
 80087b8:	6833      	ldr	r3, [r6, #0]
 80087ba:	3301      	adds	r3, #1
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	68a3      	ldr	r3, [r4, #8]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	60a3      	str	r3, [r4, #8]
 80087c4:	e7d9      	b.n	800877a <_scanf_i+0xda>
 80087c6:	f1bb 0f02 	cmp.w	fp, #2
 80087ca:	d1ae      	bne.n	800872a <_scanf_i+0x8a>
 80087cc:	6822      	ldr	r2, [r4, #0]
 80087ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80087d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80087d6:	d1bf      	bne.n	8008758 <_scanf_i+0xb8>
 80087d8:	2110      	movs	r1, #16
 80087da:	6061      	str	r1, [r4, #4]
 80087dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087e0:	e7a2      	b.n	8008728 <_scanf_i+0x88>
 80087e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80087e6:	6022      	str	r2, [r4, #0]
 80087e8:	780b      	ldrb	r3, [r1, #0]
 80087ea:	f805 3b01 	strb.w	r3, [r5], #1
 80087ee:	e7de      	b.n	80087ae <_scanf_i+0x10e>
 80087f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80087f4:	4631      	mov	r1, r6
 80087f6:	4650      	mov	r0, sl
 80087f8:	4798      	blx	r3
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d0df      	beq.n	80087be <_scanf_i+0x11e>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	05d9      	lsls	r1, r3, #23
 8008802:	d50d      	bpl.n	8008820 <_scanf_i+0x180>
 8008804:	42bd      	cmp	r5, r7
 8008806:	d909      	bls.n	800881c <_scanf_i+0x17c>
 8008808:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800880c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008810:	4632      	mov	r2, r6
 8008812:	4650      	mov	r0, sl
 8008814:	4798      	blx	r3
 8008816:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800881a:	464d      	mov	r5, r9
 800881c:	42bd      	cmp	r5, r7
 800881e:	d028      	beq.n	8008872 <_scanf_i+0x1d2>
 8008820:	6822      	ldr	r2, [r4, #0]
 8008822:	f012 0210 	ands.w	r2, r2, #16
 8008826:	d113      	bne.n	8008850 <_scanf_i+0x1b0>
 8008828:	702a      	strb	r2, [r5, #0]
 800882a:	6863      	ldr	r3, [r4, #4]
 800882c:	9e01      	ldr	r6, [sp, #4]
 800882e:	4639      	mov	r1, r7
 8008830:	4650      	mov	r0, sl
 8008832:	47b0      	blx	r6
 8008834:	f8d8 3000 	ldr.w	r3, [r8]
 8008838:	6821      	ldr	r1, [r4, #0]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	f8c8 2000 	str.w	r2, [r8]
 8008840:	f011 0f20 	tst.w	r1, #32
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	d00f      	beq.n	8008868 <_scanf_i+0x1c8>
 8008848:	6018      	str	r0, [r3, #0]
 800884a:	68e3      	ldr	r3, [r4, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	60e3      	str	r3, [r4, #12]
 8008850:	6923      	ldr	r3, [r4, #16]
 8008852:	1bed      	subs	r5, r5, r7
 8008854:	445d      	add	r5, fp
 8008856:	442b      	add	r3, r5
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	2000      	movs	r0, #0
 800885c:	b007      	add	sp, #28
 800885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008862:	f04f 0b00 	mov.w	fp, #0
 8008866:	e7ca      	b.n	80087fe <_scanf_i+0x15e>
 8008868:	07ca      	lsls	r2, r1, #31
 800886a:	bf4c      	ite	mi
 800886c:	8018      	strhmi	r0, [r3, #0]
 800886e:	6018      	strpl	r0, [r3, #0]
 8008870:	e7eb      	b.n	800884a <_scanf_i+0x1aa>
 8008872:	2001      	movs	r0, #1
 8008874:	e7f2      	b.n	800885c <_scanf_i+0x1bc>
 8008876:	bf00      	nop
 8008878:	080095fc 	.word	0x080095fc
 800887c:	08007e75 	.word	0x08007e75
 8008880:	08008c19 	.word	0x08008c19
 8008884:	0800975d 	.word	0x0800975d

08008888 <__sccl>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	780b      	ldrb	r3, [r1, #0]
 800888c:	4604      	mov	r4, r0
 800888e:	2b5e      	cmp	r3, #94	@ 0x5e
 8008890:	bf0b      	itete	eq
 8008892:	784b      	ldrbeq	r3, [r1, #1]
 8008894:	1c4a      	addne	r2, r1, #1
 8008896:	1c8a      	addeq	r2, r1, #2
 8008898:	2100      	movne	r1, #0
 800889a:	bf08      	it	eq
 800889c:	2101      	moveq	r1, #1
 800889e:	3801      	subs	r0, #1
 80088a0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80088a4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80088a8:	42a8      	cmp	r0, r5
 80088aa:	d1fb      	bne.n	80088a4 <__sccl+0x1c>
 80088ac:	b90b      	cbnz	r3, 80088b2 <__sccl+0x2a>
 80088ae:	1e50      	subs	r0, r2, #1
 80088b0:	bd70      	pop	{r4, r5, r6, pc}
 80088b2:	f081 0101 	eor.w	r1, r1, #1
 80088b6:	54e1      	strb	r1, [r4, r3]
 80088b8:	4610      	mov	r0, r2
 80088ba:	4602      	mov	r2, r0
 80088bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80088c0:	2d2d      	cmp	r5, #45	@ 0x2d
 80088c2:	d005      	beq.n	80088d0 <__sccl+0x48>
 80088c4:	2d5d      	cmp	r5, #93	@ 0x5d
 80088c6:	d016      	beq.n	80088f6 <__sccl+0x6e>
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	d0f1      	beq.n	80088b0 <__sccl+0x28>
 80088cc:	462b      	mov	r3, r5
 80088ce:	e7f2      	b.n	80088b6 <__sccl+0x2e>
 80088d0:	7846      	ldrb	r6, [r0, #1]
 80088d2:	2e5d      	cmp	r6, #93	@ 0x5d
 80088d4:	d0fa      	beq.n	80088cc <__sccl+0x44>
 80088d6:	42b3      	cmp	r3, r6
 80088d8:	dcf8      	bgt.n	80088cc <__sccl+0x44>
 80088da:	3002      	adds	r0, #2
 80088dc:	461a      	mov	r2, r3
 80088de:	3201      	adds	r2, #1
 80088e0:	4296      	cmp	r6, r2
 80088e2:	54a1      	strb	r1, [r4, r2]
 80088e4:	dcfb      	bgt.n	80088de <__sccl+0x56>
 80088e6:	1af2      	subs	r2, r6, r3
 80088e8:	3a01      	subs	r2, #1
 80088ea:	1c5d      	adds	r5, r3, #1
 80088ec:	42b3      	cmp	r3, r6
 80088ee:	bfa8      	it	ge
 80088f0:	2200      	movge	r2, #0
 80088f2:	18ab      	adds	r3, r5, r2
 80088f4:	e7e1      	b.n	80088ba <__sccl+0x32>
 80088f6:	4610      	mov	r0, r2
 80088f8:	e7da      	b.n	80088b0 <__sccl+0x28>
	...

080088fc <__sflush_r>:
 80088fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008904:	0716      	lsls	r6, r2, #28
 8008906:	4605      	mov	r5, r0
 8008908:	460c      	mov	r4, r1
 800890a:	d454      	bmi.n	80089b6 <__sflush_r+0xba>
 800890c:	684b      	ldr	r3, [r1, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	dc02      	bgt.n	8008918 <__sflush_r+0x1c>
 8008912:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	dd48      	ble.n	80089aa <__sflush_r+0xae>
 8008918:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800891a:	2e00      	cmp	r6, #0
 800891c:	d045      	beq.n	80089aa <__sflush_r+0xae>
 800891e:	2300      	movs	r3, #0
 8008920:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008924:	682f      	ldr	r7, [r5, #0]
 8008926:	6a21      	ldr	r1, [r4, #32]
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	d030      	beq.n	800898e <__sflush_r+0x92>
 800892c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	0759      	lsls	r1, r3, #29
 8008932:	d505      	bpl.n	8008940 <__sflush_r+0x44>
 8008934:	6863      	ldr	r3, [r4, #4]
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800893a:	b10b      	cbz	r3, 8008940 <__sflush_r+0x44>
 800893c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800893e:	1ad2      	subs	r2, r2, r3
 8008940:	2300      	movs	r3, #0
 8008942:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008944:	6a21      	ldr	r1, [r4, #32]
 8008946:	4628      	mov	r0, r5
 8008948:	47b0      	blx	r6
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	d106      	bne.n	800895e <__sflush_r+0x62>
 8008950:	6829      	ldr	r1, [r5, #0]
 8008952:	291d      	cmp	r1, #29
 8008954:	d82b      	bhi.n	80089ae <__sflush_r+0xb2>
 8008956:	4a2a      	ldr	r2, [pc, #168]	@ (8008a00 <__sflush_r+0x104>)
 8008958:	410a      	asrs	r2, r1
 800895a:	07d6      	lsls	r6, r2, #31
 800895c:	d427      	bmi.n	80089ae <__sflush_r+0xb2>
 800895e:	2200      	movs	r2, #0
 8008960:	6062      	str	r2, [r4, #4]
 8008962:	04d9      	lsls	r1, r3, #19
 8008964:	6922      	ldr	r2, [r4, #16]
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	d504      	bpl.n	8008974 <__sflush_r+0x78>
 800896a:	1c42      	adds	r2, r0, #1
 800896c:	d101      	bne.n	8008972 <__sflush_r+0x76>
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	b903      	cbnz	r3, 8008974 <__sflush_r+0x78>
 8008972:	6560      	str	r0, [r4, #84]	@ 0x54
 8008974:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008976:	602f      	str	r7, [r5, #0]
 8008978:	b1b9      	cbz	r1, 80089aa <__sflush_r+0xae>
 800897a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800897e:	4299      	cmp	r1, r3
 8008980:	d002      	beq.n	8008988 <__sflush_r+0x8c>
 8008982:	4628      	mov	r0, r5
 8008984:	f7ff fb7a 	bl	800807c <_free_r>
 8008988:	2300      	movs	r3, #0
 800898a:	6363      	str	r3, [r4, #52]	@ 0x34
 800898c:	e00d      	b.n	80089aa <__sflush_r+0xae>
 800898e:	2301      	movs	r3, #1
 8008990:	4628      	mov	r0, r5
 8008992:	47b0      	blx	r6
 8008994:	4602      	mov	r2, r0
 8008996:	1c50      	adds	r0, r2, #1
 8008998:	d1c9      	bne.n	800892e <__sflush_r+0x32>
 800899a:	682b      	ldr	r3, [r5, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0c6      	beq.n	800892e <__sflush_r+0x32>
 80089a0:	2b1d      	cmp	r3, #29
 80089a2:	d001      	beq.n	80089a8 <__sflush_r+0xac>
 80089a4:	2b16      	cmp	r3, #22
 80089a6:	d11e      	bne.n	80089e6 <__sflush_r+0xea>
 80089a8:	602f      	str	r7, [r5, #0]
 80089aa:	2000      	movs	r0, #0
 80089ac:	e022      	b.n	80089f4 <__sflush_r+0xf8>
 80089ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089b2:	b21b      	sxth	r3, r3
 80089b4:	e01b      	b.n	80089ee <__sflush_r+0xf2>
 80089b6:	690f      	ldr	r7, [r1, #16]
 80089b8:	2f00      	cmp	r7, #0
 80089ba:	d0f6      	beq.n	80089aa <__sflush_r+0xae>
 80089bc:	0793      	lsls	r3, r2, #30
 80089be:	680e      	ldr	r6, [r1, #0]
 80089c0:	bf08      	it	eq
 80089c2:	694b      	ldreq	r3, [r1, #20]
 80089c4:	600f      	str	r7, [r1, #0]
 80089c6:	bf18      	it	ne
 80089c8:	2300      	movne	r3, #0
 80089ca:	eba6 0807 	sub.w	r8, r6, r7
 80089ce:	608b      	str	r3, [r1, #8]
 80089d0:	f1b8 0f00 	cmp.w	r8, #0
 80089d4:	dde9      	ble.n	80089aa <__sflush_r+0xae>
 80089d6:	6a21      	ldr	r1, [r4, #32]
 80089d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089da:	4643      	mov	r3, r8
 80089dc:	463a      	mov	r2, r7
 80089de:	4628      	mov	r0, r5
 80089e0:	47b0      	blx	r6
 80089e2:	2800      	cmp	r0, #0
 80089e4:	dc08      	bgt.n	80089f8 <__sflush_r+0xfc>
 80089e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f8:	4407      	add	r7, r0
 80089fa:	eba8 0800 	sub.w	r8, r8, r0
 80089fe:	e7e7      	b.n	80089d0 <__sflush_r+0xd4>
 8008a00:	dfbffffe 	.word	0xdfbffffe

08008a04 <_fflush_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	690b      	ldr	r3, [r1, #16]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	b913      	cbnz	r3, 8008a14 <_fflush_r+0x10>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	4628      	mov	r0, r5
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	b118      	cbz	r0, 8008a1e <_fflush_r+0x1a>
 8008a16:	6a03      	ldr	r3, [r0, #32]
 8008a18:	b90b      	cbnz	r3, 8008a1e <_fflush_r+0x1a>
 8008a1a:	f7ff f999 	bl	8007d50 <__sinit>
 8008a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0f3      	beq.n	8008a0e <_fflush_r+0xa>
 8008a26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a28:	07d0      	lsls	r0, r2, #31
 8008a2a:	d404      	bmi.n	8008a36 <_fflush_r+0x32>
 8008a2c:	0599      	lsls	r1, r3, #22
 8008a2e:	d402      	bmi.n	8008a36 <_fflush_r+0x32>
 8008a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a32:	f7ff fb20 	bl	8008076 <__retarget_lock_acquire_recursive>
 8008a36:	4628      	mov	r0, r5
 8008a38:	4621      	mov	r1, r4
 8008a3a:	f7ff ff5f 	bl	80088fc <__sflush_r>
 8008a3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a40:	07da      	lsls	r2, r3, #31
 8008a42:	4605      	mov	r5, r0
 8008a44:	d4e4      	bmi.n	8008a10 <_fflush_r+0xc>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	059b      	lsls	r3, r3, #22
 8008a4a:	d4e1      	bmi.n	8008a10 <_fflush_r+0xc>
 8008a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a4e:	f7ff fb13 	bl	8008078 <__retarget_lock_release_recursive>
 8008a52:	e7dd      	b.n	8008a10 <_fflush_r+0xc>

08008a54 <__malloc_lock>:
 8008a54:	4801      	ldr	r0, [pc, #4]	@ (8008a5c <__malloc_lock+0x8>)
 8008a56:	f7ff bb0e 	b.w	8008076 <__retarget_lock_acquire_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	2000053c 	.word	0x2000053c

08008a60 <__malloc_unlock>:
 8008a60:	4801      	ldr	r0, [pc, #4]	@ (8008a68 <__malloc_unlock+0x8>)
 8008a62:	f7ff bb09 	b.w	8008078 <__retarget_lock_release_recursive>
 8008a66:	bf00      	nop
 8008a68:	2000053c 	.word	0x2000053c

08008a6c <__submore>:
 8008a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	460c      	mov	r4, r1
 8008a72:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008a74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	d11d      	bne.n	8008ab8 <__submore+0x4c>
 8008a7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a80:	f7ff fd34 	bl	80084ec <_malloc_r>
 8008a84:	b918      	cbnz	r0, 8008a8e <__submore+0x22>
 8008a86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a92:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008a94:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008a98:	6360      	str	r0, [r4, #52]	@ 0x34
 8008a9a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008a9e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008aa2:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008aa6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008aaa:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008aae:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008ab2:	6020      	str	r0, [r4, #0]
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e7e8      	b.n	8008a8a <__submore+0x1e>
 8008ab8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008aba:	0077      	lsls	r7, r6, #1
 8008abc:	463a      	mov	r2, r7
 8008abe:	f000 f80f 	bl	8008ae0 <_realloc_r>
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d0de      	beq.n	8008a86 <__submore+0x1a>
 8008ac8:	eb00 0806 	add.w	r8, r0, r6
 8008acc:	4601      	mov	r1, r0
 8008ace:	4632      	mov	r2, r6
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	f000 f9cb 	bl	8008e6c <memcpy>
 8008ad6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008ada:	f8c4 8000 	str.w	r8, [r4]
 8008ade:	e7e9      	b.n	8008ab4 <__submore+0x48>

08008ae0 <_realloc_r>:
 8008ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4615      	mov	r5, r2
 8008ae8:	460c      	mov	r4, r1
 8008aea:	b921      	cbnz	r1, 8008af6 <_realloc_r+0x16>
 8008aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008af0:	4611      	mov	r1, r2
 8008af2:	f7ff bcfb 	b.w	80084ec <_malloc_r>
 8008af6:	b92a      	cbnz	r2, 8008b04 <_realloc_r+0x24>
 8008af8:	f7ff fac0 	bl	800807c <_free_r>
 8008afc:	2400      	movs	r4, #0
 8008afe:	4620      	mov	r0, r4
 8008b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b04:	f000 f9c0 	bl	8008e88 <_malloc_usable_size_r>
 8008b08:	4285      	cmp	r5, r0
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	d802      	bhi.n	8008b14 <_realloc_r+0x34>
 8008b0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b12:	d8f4      	bhi.n	8008afe <_realloc_r+0x1e>
 8008b14:	4629      	mov	r1, r5
 8008b16:	4640      	mov	r0, r8
 8008b18:	f7ff fce8 	bl	80084ec <_malloc_r>
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d0ec      	beq.n	8008afc <_realloc_r+0x1c>
 8008b22:	42b5      	cmp	r5, r6
 8008b24:	462a      	mov	r2, r5
 8008b26:	4621      	mov	r1, r4
 8008b28:	bf28      	it	cs
 8008b2a:	4632      	movcs	r2, r6
 8008b2c:	f000 f99e 	bl	8008e6c <memcpy>
 8008b30:	4621      	mov	r1, r4
 8008b32:	4640      	mov	r0, r8
 8008b34:	f7ff faa2 	bl	800807c <_free_r>
 8008b38:	463c      	mov	r4, r7
 8008b3a:	e7e0      	b.n	8008afe <_realloc_r+0x1e>

08008b3c <_strtoul_l.constprop.0>:
 8008b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b40:	4e34      	ldr	r6, [pc, #208]	@ (8008c14 <_strtoul_l.constprop.0+0xd8>)
 8008b42:	4686      	mov	lr, r0
 8008b44:	460d      	mov	r5, r1
 8008b46:	4628      	mov	r0, r5
 8008b48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b4c:	5d37      	ldrb	r7, [r6, r4]
 8008b4e:	f017 0708 	ands.w	r7, r7, #8
 8008b52:	d1f8      	bne.n	8008b46 <_strtoul_l.constprop.0+0xa>
 8008b54:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b56:	d12f      	bne.n	8008bb8 <_strtoul_l.constprop.0+0x7c>
 8008b58:	782c      	ldrb	r4, [r5, #0]
 8008b5a:	2701      	movs	r7, #1
 8008b5c:	1c85      	adds	r5, r0, #2
 8008b5e:	f033 0010 	bics.w	r0, r3, #16
 8008b62:	d109      	bne.n	8008b78 <_strtoul_l.constprop.0+0x3c>
 8008b64:	2c30      	cmp	r4, #48	@ 0x30
 8008b66:	d12c      	bne.n	8008bc2 <_strtoul_l.constprop.0+0x86>
 8008b68:	7828      	ldrb	r0, [r5, #0]
 8008b6a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008b6e:	2858      	cmp	r0, #88	@ 0x58
 8008b70:	d127      	bne.n	8008bc2 <_strtoul_l.constprop.0+0x86>
 8008b72:	786c      	ldrb	r4, [r5, #1]
 8008b74:	2310      	movs	r3, #16
 8008b76:	3502      	adds	r5, #2
 8008b78:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	fbb8 f8f3 	udiv	r8, r8, r3
 8008b82:	fb03 f908 	mul.w	r9, r3, r8
 8008b86:	ea6f 0909 	mvn.w	r9, r9
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008b90:	f1bc 0f09 	cmp.w	ip, #9
 8008b94:	d81c      	bhi.n	8008bd0 <_strtoul_l.constprop.0+0x94>
 8008b96:	4664      	mov	r4, ip
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	dd2a      	ble.n	8008bf2 <_strtoul_l.constprop.0+0xb6>
 8008b9c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8008ba0:	d007      	beq.n	8008bb2 <_strtoul_l.constprop.0+0x76>
 8008ba2:	4580      	cmp	r8, r0
 8008ba4:	d322      	bcc.n	8008bec <_strtoul_l.constprop.0+0xb0>
 8008ba6:	d101      	bne.n	8008bac <_strtoul_l.constprop.0+0x70>
 8008ba8:	45a1      	cmp	r9, r4
 8008baa:	db1f      	blt.n	8008bec <_strtoul_l.constprop.0+0xb0>
 8008bac:	fb00 4003 	mla	r0, r0, r3, r4
 8008bb0:	2601      	movs	r6, #1
 8008bb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bb6:	e7e9      	b.n	8008b8c <_strtoul_l.constprop.0+0x50>
 8008bb8:	2c2b      	cmp	r4, #43	@ 0x2b
 8008bba:	bf04      	itt	eq
 8008bbc:	782c      	ldrbeq	r4, [r5, #0]
 8008bbe:	1c85      	addeq	r5, r0, #2
 8008bc0:	e7cd      	b.n	8008b5e <_strtoul_l.constprop.0+0x22>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1d8      	bne.n	8008b78 <_strtoul_l.constprop.0+0x3c>
 8008bc6:	2c30      	cmp	r4, #48	@ 0x30
 8008bc8:	bf0c      	ite	eq
 8008bca:	2308      	moveq	r3, #8
 8008bcc:	230a      	movne	r3, #10
 8008bce:	e7d3      	b.n	8008b78 <_strtoul_l.constprop.0+0x3c>
 8008bd0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008bd4:	f1bc 0f19 	cmp.w	ip, #25
 8008bd8:	d801      	bhi.n	8008bde <_strtoul_l.constprop.0+0xa2>
 8008bda:	3c37      	subs	r4, #55	@ 0x37
 8008bdc:	e7dc      	b.n	8008b98 <_strtoul_l.constprop.0+0x5c>
 8008bde:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008be2:	f1bc 0f19 	cmp.w	ip, #25
 8008be6:	d804      	bhi.n	8008bf2 <_strtoul_l.constprop.0+0xb6>
 8008be8:	3c57      	subs	r4, #87	@ 0x57
 8008bea:	e7d5      	b.n	8008b98 <_strtoul_l.constprop.0+0x5c>
 8008bec:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8008bf0:	e7df      	b.n	8008bb2 <_strtoul_l.constprop.0+0x76>
 8008bf2:	1c73      	adds	r3, r6, #1
 8008bf4:	d106      	bne.n	8008c04 <_strtoul_l.constprop.0+0xc8>
 8008bf6:	2322      	movs	r3, #34	@ 0x22
 8008bf8:	f8ce 3000 	str.w	r3, [lr]
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	b932      	cbnz	r2, 8008c0e <_strtoul_l.constprop.0+0xd2>
 8008c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c04:	b107      	cbz	r7, 8008c08 <_strtoul_l.constprop.0+0xcc>
 8008c06:	4240      	negs	r0, r0
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	d0f9      	beq.n	8008c00 <_strtoul_l.constprop.0+0xc4>
 8008c0c:	b106      	cbz	r6, 8008c10 <_strtoul_l.constprop.0+0xd4>
 8008c0e:	1e69      	subs	r1, r5, #1
 8008c10:	6011      	str	r1, [r2, #0]
 8008c12:	e7f5      	b.n	8008c00 <_strtoul_l.constprop.0+0xc4>
 8008c14:	08009649 	.word	0x08009649

08008c18 <_strtoul_r>:
 8008c18:	f7ff bf90 	b.w	8008b3c <_strtoul_l.constprop.0>

08008c1c <__swbuf_r>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	460e      	mov	r6, r1
 8008c20:	4614      	mov	r4, r2
 8008c22:	4605      	mov	r5, r0
 8008c24:	b118      	cbz	r0, 8008c2e <__swbuf_r+0x12>
 8008c26:	6a03      	ldr	r3, [r0, #32]
 8008c28:	b90b      	cbnz	r3, 8008c2e <__swbuf_r+0x12>
 8008c2a:	f7ff f891 	bl	8007d50 <__sinit>
 8008c2e:	69a3      	ldr	r3, [r4, #24]
 8008c30:	60a3      	str	r3, [r4, #8]
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	071a      	lsls	r2, r3, #28
 8008c36:	d501      	bpl.n	8008c3c <__swbuf_r+0x20>
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	b943      	cbnz	r3, 8008c4e <__swbuf_r+0x32>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f82a 	bl	8008c98 <__swsetup_r>
 8008c44:	b118      	cbz	r0, 8008c4e <__swbuf_r+0x32>
 8008c46:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	6922      	ldr	r2, [r4, #16]
 8008c52:	1a98      	subs	r0, r3, r2
 8008c54:	6963      	ldr	r3, [r4, #20]
 8008c56:	b2f6      	uxtb	r6, r6
 8008c58:	4283      	cmp	r3, r0
 8008c5a:	4637      	mov	r7, r6
 8008c5c:	dc05      	bgt.n	8008c6a <__swbuf_r+0x4e>
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7ff fecf 	bl	8008a04 <_fflush_r>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d1ed      	bne.n	8008c46 <__swbuf_r+0x2a>
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	60a3      	str	r3, [r4, #8]
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	701e      	strb	r6, [r3, #0]
 8008c78:	6962      	ldr	r2, [r4, #20]
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d004      	beq.n	8008c8a <__swbuf_r+0x6e>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	07db      	lsls	r3, r3, #31
 8008c84:	d5e1      	bpl.n	8008c4a <__swbuf_r+0x2e>
 8008c86:	2e0a      	cmp	r6, #10
 8008c88:	d1df      	bne.n	8008c4a <__swbuf_r+0x2e>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f7ff feb9 	bl	8008a04 <_fflush_r>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d0d9      	beq.n	8008c4a <__swbuf_r+0x2e>
 8008c96:	e7d6      	b.n	8008c46 <__swbuf_r+0x2a>

08008c98 <__swsetup_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4b29      	ldr	r3, [pc, #164]	@ (8008d40 <__swsetup_r+0xa8>)
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	b118      	cbz	r0, 8008cac <__swsetup_r+0x14>
 8008ca4:	6a03      	ldr	r3, [r0, #32]
 8008ca6:	b90b      	cbnz	r3, 8008cac <__swsetup_r+0x14>
 8008ca8:	f7ff f852 	bl	8007d50 <__sinit>
 8008cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb0:	0719      	lsls	r1, r3, #28
 8008cb2:	d422      	bmi.n	8008cfa <__swsetup_r+0x62>
 8008cb4:	06da      	lsls	r2, r3, #27
 8008cb6:	d407      	bmi.n	8008cc8 <__swsetup_r+0x30>
 8008cb8:	2209      	movs	r2, #9
 8008cba:	602a      	str	r2, [r5, #0]
 8008cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cc6:	e033      	b.n	8008d30 <__swsetup_r+0x98>
 8008cc8:	0758      	lsls	r0, r3, #29
 8008cca:	d512      	bpl.n	8008cf2 <__swsetup_r+0x5a>
 8008ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cce:	b141      	cbz	r1, 8008ce2 <__swsetup_r+0x4a>
 8008cd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cd4:	4299      	cmp	r1, r3
 8008cd6:	d002      	beq.n	8008cde <__swsetup_r+0x46>
 8008cd8:	4628      	mov	r0, r5
 8008cda:	f7ff f9cf 	bl	800807c <_free_r>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	2300      	movs	r3, #0
 8008cec:	6063      	str	r3, [r4, #4]
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f043 0308 	orr.w	r3, r3, #8
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	b94b      	cbnz	r3, 8008d12 <__swsetup_r+0x7a>
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d08:	d003      	beq.n	8008d12 <__swsetup_r+0x7a>
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f000 f83f 	bl	8008d90 <__smakebuf_r>
 8008d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d16:	f013 0201 	ands.w	r2, r3, #1
 8008d1a:	d00a      	beq.n	8008d32 <__swsetup_r+0x9a>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	60a2      	str	r2, [r4, #8]
 8008d20:	6962      	ldr	r2, [r4, #20]
 8008d22:	4252      	negs	r2, r2
 8008d24:	61a2      	str	r2, [r4, #24]
 8008d26:	6922      	ldr	r2, [r4, #16]
 8008d28:	b942      	cbnz	r2, 8008d3c <__swsetup_r+0xa4>
 8008d2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d2e:	d1c5      	bne.n	8008cbc <__swsetup_r+0x24>
 8008d30:	bd38      	pop	{r3, r4, r5, pc}
 8008d32:	0799      	lsls	r1, r3, #30
 8008d34:	bf58      	it	pl
 8008d36:	6962      	ldrpl	r2, [r4, #20]
 8008d38:	60a2      	str	r2, [r4, #8]
 8008d3a:	e7f4      	b.n	8008d26 <__swsetup_r+0x8e>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e7f7      	b.n	8008d30 <__swsetup_r+0x98>
 8008d40:	2000003c 	.word	0x2000003c

08008d44 <__swhatbuf_r>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	460c      	mov	r4, r1
 8008d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	b096      	sub	sp, #88	@ 0x58
 8008d50:	4615      	mov	r5, r2
 8008d52:	461e      	mov	r6, r3
 8008d54:	da0d      	bge.n	8008d72 <__swhatbuf_r+0x2e>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d5c:	f04f 0100 	mov.w	r1, #0
 8008d60:	bf14      	ite	ne
 8008d62:	2340      	movne	r3, #64	@ 0x40
 8008d64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d68:	2000      	movs	r0, #0
 8008d6a:	6031      	str	r1, [r6, #0]
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	b016      	add	sp, #88	@ 0x58
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
 8008d72:	466a      	mov	r2, sp
 8008d74:	f000 f848 	bl	8008e08 <_fstat_r>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	dbec      	blt.n	8008d56 <__swhatbuf_r+0x12>
 8008d7c:	9901      	ldr	r1, [sp, #4]
 8008d7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d86:	4259      	negs	r1, r3
 8008d88:	4159      	adcs	r1, r3
 8008d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d8e:	e7eb      	b.n	8008d68 <__swhatbuf_r+0x24>

08008d90 <__smakebuf_r>:
 8008d90:	898b      	ldrh	r3, [r1, #12]
 8008d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d94:	079d      	lsls	r5, r3, #30
 8008d96:	4606      	mov	r6, r0
 8008d98:	460c      	mov	r4, r1
 8008d9a:	d507      	bpl.n	8008dac <__smakebuf_r+0x1c>
 8008d9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	6123      	str	r3, [r4, #16]
 8008da4:	2301      	movs	r3, #1
 8008da6:	6163      	str	r3, [r4, #20]
 8008da8:	b003      	add	sp, #12
 8008daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dac:	ab01      	add	r3, sp, #4
 8008dae:	466a      	mov	r2, sp
 8008db0:	f7ff ffc8 	bl	8008d44 <__swhatbuf_r>
 8008db4:	9f00      	ldr	r7, [sp, #0]
 8008db6:	4605      	mov	r5, r0
 8008db8:	4639      	mov	r1, r7
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7ff fb96 	bl	80084ec <_malloc_r>
 8008dc0:	b948      	cbnz	r0, 8008dd6 <__smakebuf_r+0x46>
 8008dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc6:	059a      	lsls	r2, r3, #22
 8008dc8:	d4ee      	bmi.n	8008da8 <__smakebuf_r+0x18>
 8008dca:	f023 0303 	bic.w	r3, r3, #3
 8008dce:	f043 0302 	orr.w	r3, r3, #2
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	e7e2      	b.n	8008d9c <__smakebuf_r+0xc>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	6020      	str	r0, [r4, #0]
 8008dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	9b01      	ldr	r3, [sp, #4]
 8008de2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008de6:	b15b      	cbz	r3, 8008e00 <__smakebuf_r+0x70>
 8008de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dec:	4630      	mov	r0, r6
 8008dee:	f000 f81d 	bl	8008e2c <_isatty_r>
 8008df2:	b128      	cbz	r0, 8008e00 <__smakebuf_r+0x70>
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	431d      	orrs	r5, r3
 8008e04:	81a5      	strh	r5, [r4, #12]
 8008e06:	e7cf      	b.n	8008da8 <__smakebuf_r+0x18>

08008e08 <_fstat_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d07      	ldr	r5, [pc, #28]	@ (8008e28 <_fstat_r+0x20>)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	4611      	mov	r1, r2
 8008e14:	602b      	str	r3, [r5, #0]
 8008e16:	f7fa fb19 	bl	800344c <_fstat>
 8008e1a:	1c43      	adds	r3, r0, #1
 8008e1c:	d102      	bne.n	8008e24 <_fstat_r+0x1c>
 8008e1e:	682b      	ldr	r3, [r5, #0]
 8008e20:	b103      	cbz	r3, 8008e24 <_fstat_r+0x1c>
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	bd38      	pop	{r3, r4, r5, pc}
 8008e26:	bf00      	nop
 8008e28:	20000538 	.word	0x20000538

08008e2c <_isatty_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d06      	ldr	r5, [pc, #24]	@ (8008e48 <_isatty_r+0x1c>)
 8008e30:	2300      	movs	r3, #0
 8008e32:	4604      	mov	r4, r0
 8008e34:	4608      	mov	r0, r1
 8008e36:	602b      	str	r3, [r5, #0]
 8008e38:	f7fa fb18 	bl	800346c <_isatty>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_isatty_r+0x1a>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_isatty_r+0x1a>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	20000538 	.word	0x20000538

08008e4c <_sbrk_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4d06      	ldr	r5, [pc, #24]	@ (8008e68 <_sbrk_r+0x1c>)
 8008e50:	2300      	movs	r3, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	602b      	str	r3, [r5, #0]
 8008e58:	f7fa fb20 	bl	800349c <_sbrk>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_sbrk_r+0x1a>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_sbrk_r+0x1a>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20000538 	.word	0x20000538

08008e6c <memcpy>:
 8008e6c:	440a      	add	r2, r1
 8008e6e:	4291      	cmp	r1, r2
 8008e70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e74:	d100      	bne.n	8008e78 <memcpy+0xc>
 8008e76:	4770      	bx	lr
 8008e78:	b510      	push	{r4, lr}
 8008e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e82:	4291      	cmp	r1, r2
 8008e84:	d1f9      	bne.n	8008e7a <memcpy+0xe>
 8008e86:	bd10      	pop	{r4, pc}

08008e88 <_malloc_usable_size_r>:
 8008e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e8c:	1f18      	subs	r0, r3, #4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bfbc      	itt	lt
 8008e92:	580b      	ldrlt	r3, [r1, r0]
 8008e94:	18c0      	addlt	r0, r0, r3
 8008e96:	4770      	bx	lr

08008e98 <atan2>:
 8008e98:	f000 b802 	b.w	8008ea0 <__ieee754_atan2>
 8008e9c:	0000      	movs	r0, r0
	...

08008ea0 <__ieee754_atan2>:
 8008ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea4:	ec57 6b11 	vmov	r6, r7, d1
 8008ea8:	4273      	negs	r3, r6
 8008eaa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009028 <__ieee754_atan2+0x188>
 8008eae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008eb2:	4333      	orrs	r3, r6
 8008eb4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008eb8:	4543      	cmp	r3, r8
 8008eba:	ec51 0b10 	vmov	r0, r1, d0
 8008ebe:	4635      	mov	r5, r6
 8008ec0:	d809      	bhi.n	8008ed6 <__ieee754_atan2+0x36>
 8008ec2:	4244      	negs	r4, r0
 8008ec4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ec8:	4304      	orrs	r4, r0
 8008eca:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008ece:	4544      	cmp	r4, r8
 8008ed0:	468e      	mov	lr, r1
 8008ed2:	4681      	mov	r9, r0
 8008ed4:	d907      	bls.n	8008ee6 <__ieee754_atan2+0x46>
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	463b      	mov	r3, r7
 8008eda:	f7f7 f9ff 	bl	80002dc <__adddf3>
 8008ede:	ec41 0b10 	vmov	d0, r0, r1
 8008ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008eea:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008eee:	4334      	orrs	r4, r6
 8008ef0:	d103      	bne.n	8008efa <__ieee754_atan2+0x5a>
 8008ef2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef6:	f000 b8c7 	b.w	8009088 <atan>
 8008efa:	17bc      	asrs	r4, r7, #30
 8008efc:	f004 0402 	and.w	r4, r4, #2
 8008f00:	ea53 0909 	orrs.w	r9, r3, r9
 8008f04:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008f08:	d107      	bne.n	8008f1a <__ieee754_atan2+0x7a>
 8008f0a:	2c02      	cmp	r4, #2
 8008f0c:	d05f      	beq.n	8008fce <__ieee754_atan2+0x12e>
 8008f0e:	2c03      	cmp	r4, #3
 8008f10:	d1e5      	bne.n	8008ede <__ieee754_atan2+0x3e>
 8008f12:	a141      	add	r1, pc, #260	@ (adr r1, 8009018 <__ieee754_atan2+0x178>)
 8008f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f18:	e7e1      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008f1a:	4315      	orrs	r5, r2
 8008f1c:	d106      	bne.n	8008f2c <__ieee754_atan2+0x8c>
 8008f1e:	f1be 0f00 	cmp.w	lr, #0
 8008f22:	da5f      	bge.n	8008fe4 <__ieee754_atan2+0x144>
 8008f24:	a13e      	add	r1, pc, #248	@ (adr r1, 8009020 <__ieee754_atan2+0x180>)
 8008f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f2a:	e7d8      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008f2c:	4542      	cmp	r2, r8
 8008f2e:	d10f      	bne.n	8008f50 <__ieee754_atan2+0xb0>
 8008f30:	4293      	cmp	r3, r2
 8008f32:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8008f36:	d107      	bne.n	8008f48 <__ieee754_atan2+0xa8>
 8008f38:	2c02      	cmp	r4, #2
 8008f3a:	d84c      	bhi.n	8008fd6 <__ieee754_atan2+0x136>
 8008f3c:	4b34      	ldr	r3, [pc, #208]	@ (8009010 <__ieee754_atan2+0x170>)
 8008f3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f46:	e7ca      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008f48:	2c02      	cmp	r4, #2
 8008f4a:	d848      	bhi.n	8008fde <__ieee754_atan2+0x13e>
 8008f4c:	4b31      	ldr	r3, [pc, #196]	@ (8009014 <__ieee754_atan2+0x174>)
 8008f4e:	e7f6      	b.n	8008f3e <__ieee754_atan2+0x9e>
 8008f50:	4543      	cmp	r3, r8
 8008f52:	d0e4      	beq.n	8008f1e <__ieee754_atan2+0x7e>
 8008f54:	1a9b      	subs	r3, r3, r2
 8008f56:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008f5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f5e:	da1e      	bge.n	8008f9e <__ieee754_atan2+0xfe>
 8008f60:	2f00      	cmp	r7, #0
 8008f62:	da01      	bge.n	8008f68 <__ieee754_atan2+0xc8>
 8008f64:	323c      	adds	r2, #60	@ 0x3c
 8008f66:	db1e      	blt.n	8008fa6 <__ieee754_atan2+0x106>
 8008f68:	4632      	mov	r2, r6
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	f7f7 fc96 	bl	800089c <__aeabi_ddiv>
 8008f70:	ec41 0b10 	vmov	d0, r0, r1
 8008f74:	f000 fa20 	bl	80093b8 <fabs>
 8008f78:	f000 f886 	bl	8009088 <atan>
 8008f7c:	ec51 0b10 	vmov	r0, r1, d0
 8008f80:	2c01      	cmp	r4, #1
 8008f82:	d013      	beq.n	8008fac <__ieee754_atan2+0x10c>
 8008f84:	2c02      	cmp	r4, #2
 8008f86:	d015      	beq.n	8008fb4 <__ieee754_atan2+0x114>
 8008f88:	2c00      	cmp	r4, #0
 8008f8a:	d0a8      	beq.n	8008ede <__ieee754_atan2+0x3e>
 8008f8c:	a318      	add	r3, pc, #96	@ (adr r3, 8008ff0 <__ieee754_atan2+0x150>)
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	f7f7 f9a1 	bl	80002d8 <__aeabi_dsub>
 8008f96:	a318      	add	r3, pc, #96	@ (adr r3, 8008ff8 <__ieee754_atan2+0x158>)
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	e014      	b.n	8008fc8 <__ieee754_atan2+0x128>
 8008f9e:	a118      	add	r1, pc, #96	@ (adr r1, 8009000 <__ieee754_atan2+0x160>)
 8008fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa4:	e7ec      	b.n	8008f80 <__ieee754_atan2+0xe0>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	e7e9      	b.n	8008f80 <__ieee754_atan2+0xe0>
 8008fac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	e794      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008fb4:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ff0 <__ieee754_atan2+0x150>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f7f7 f98d 	bl	80002d8 <__aeabi_dsub>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	a10d      	add	r1, pc, #52	@ (adr r1, 8008ff8 <__ieee754_atan2+0x158>)
 8008fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc8:	f7f7 f986 	bl	80002d8 <__aeabi_dsub>
 8008fcc:	e787      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008fce:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ff8 <__ieee754_atan2+0x158>)
 8008fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd4:	e783      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008fd6:	a10c      	add	r1, pc, #48	@ (adr r1, 8009008 <__ieee754_atan2+0x168>)
 8008fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fdc:	e77f      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008fde:	2000      	movs	r0, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	e77c      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008fe4:	a106      	add	r1, pc, #24	@ (adr r1, 8009000 <__ieee754_atan2+0x160>)
 8008fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fea:	e778      	b.n	8008ede <__ieee754_atan2+0x3e>
 8008fec:	f3af 8000 	nop.w
 8008ff0:	33145c07 	.word	0x33145c07
 8008ff4:	3ca1a626 	.word	0x3ca1a626
 8008ff8:	54442d18 	.word	0x54442d18
 8008ffc:	400921fb 	.word	0x400921fb
 8009000:	54442d18 	.word	0x54442d18
 8009004:	3ff921fb 	.word	0x3ff921fb
 8009008:	54442d18 	.word	0x54442d18
 800900c:	3fe921fb 	.word	0x3fe921fb
 8009010:	08009780 	.word	0x08009780
 8009014:	08009768 	.word	0x08009768
 8009018:	54442d18 	.word	0x54442d18
 800901c:	c00921fb 	.word	0xc00921fb
 8009020:	54442d18 	.word	0x54442d18
 8009024:	bff921fb 	.word	0xbff921fb
 8009028:	7ff00000 	.word	0x7ff00000

0800902c <sqrt>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	ed2d 8b02 	vpush	{d8}
 8009032:	ec55 4b10 	vmov	r4, r5, d0
 8009036:	f000 f9c7 	bl	80093c8 <__ieee754_sqrt>
 800903a:	4622      	mov	r2, r4
 800903c:	462b      	mov	r3, r5
 800903e:	4620      	mov	r0, r4
 8009040:	4629      	mov	r1, r5
 8009042:	eeb0 8a40 	vmov.f32	s16, s0
 8009046:	eef0 8a60 	vmov.f32	s17, s1
 800904a:	f7f7 fd97 	bl	8000b7c <__aeabi_dcmpun>
 800904e:	b990      	cbnz	r0, 8009076 <sqrt+0x4a>
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 fd68 	bl	8000b2c <__aeabi_dcmplt>
 800905c:	b158      	cbz	r0, 8009076 <sqrt+0x4a>
 800905e:	f7fe ffdf 	bl	8008020 <__errno>
 8009062:	2321      	movs	r3, #33	@ 0x21
 8009064:	6003      	str	r3, [r0, #0]
 8009066:	2200      	movs	r2, #0
 8009068:	2300      	movs	r3, #0
 800906a:	4610      	mov	r0, r2
 800906c:	4619      	mov	r1, r3
 800906e:	f7f7 fc15 	bl	800089c <__aeabi_ddiv>
 8009072:	ec41 0b18 	vmov	d8, r0, r1
 8009076:	eeb0 0a48 	vmov.f32	s0, s16
 800907a:	eef0 0a68 	vmov.f32	s1, s17
 800907e:	ecbd 8b02 	vpop	{d8}
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	0000      	movs	r0, r0
	...

08009088 <atan>:
 8009088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	ec55 4b10 	vmov	r4, r5, d0
 8009090:	4bbf      	ldr	r3, [pc, #764]	@ (8009390 <atan+0x308>)
 8009092:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009096:	429e      	cmp	r6, r3
 8009098:	46ab      	mov	fp, r5
 800909a:	d918      	bls.n	80090ce <atan+0x46>
 800909c:	4bbd      	ldr	r3, [pc, #756]	@ (8009394 <atan+0x30c>)
 800909e:	429e      	cmp	r6, r3
 80090a0:	d801      	bhi.n	80090a6 <atan+0x1e>
 80090a2:	d109      	bne.n	80090b8 <atan+0x30>
 80090a4:	b144      	cbz	r4, 80090b8 <atan+0x30>
 80090a6:	4622      	mov	r2, r4
 80090a8:	462b      	mov	r3, r5
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	f7f7 f915 	bl	80002dc <__adddf3>
 80090b2:	4604      	mov	r4, r0
 80090b4:	460d      	mov	r5, r1
 80090b6:	e006      	b.n	80090c6 <atan+0x3e>
 80090b8:	f1bb 0f00 	cmp.w	fp, #0
 80090bc:	f340 812b 	ble.w	8009316 <atan+0x28e>
 80090c0:	a597      	add	r5, pc, #604	@ (adr r5, 8009320 <atan+0x298>)
 80090c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090c6:	ec45 4b10 	vmov	d0, r4, r5
 80090ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	4bb2      	ldr	r3, [pc, #712]	@ (8009398 <atan+0x310>)
 80090d0:	429e      	cmp	r6, r3
 80090d2:	d813      	bhi.n	80090fc <atan+0x74>
 80090d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80090d8:	429e      	cmp	r6, r3
 80090da:	d80c      	bhi.n	80090f6 <atan+0x6e>
 80090dc:	a392      	add	r3, pc, #584	@ (adr r3, 8009328 <atan+0x2a0>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	4620      	mov	r0, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	f7f7 f8f9 	bl	80002dc <__adddf3>
 80090ea:	4bac      	ldr	r3, [pc, #688]	@ (800939c <atan+0x314>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	f7f7 fd3b 	bl	8000b68 <__aeabi_dcmpgt>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d1e7      	bne.n	80090c6 <atan+0x3e>
 80090f6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80090fa:	e029      	b.n	8009150 <atan+0xc8>
 80090fc:	f000 f95c 	bl	80093b8 <fabs>
 8009100:	4ba7      	ldr	r3, [pc, #668]	@ (80093a0 <atan+0x318>)
 8009102:	429e      	cmp	r6, r3
 8009104:	ec55 4b10 	vmov	r4, r5, d0
 8009108:	f200 80bc 	bhi.w	8009284 <atan+0x1fc>
 800910c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009110:	429e      	cmp	r6, r3
 8009112:	f200 809e 	bhi.w	8009252 <atan+0x1ca>
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 f8dd 	bl	80002dc <__adddf3>
 8009122:	4b9e      	ldr	r3, [pc, #632]	@ (800939c <atan+0x314>)
 8009124:	2200      	movs	r2, #0
 8009126:	f7f7 f8d7 	bl	80002d8 <__aeabi_dsub>
 800912a:	2200      	movs	r2, #0
 800912c:	4606      	mov	r6, r0
 800912e:	460f      	mov	r7, r1
 8009130:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 f8d0 	bl	80002dc <__adddf3>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4630      	mov	r0, r6
 8009142:	4639      	mov	r1, r7
 8009144:	f7f7 fbaa 	bl	800089c <__aeabi_ddiv>
 8009148:	f04f 0a00 	mov.w	sl, #0
 800914c:	4604      	mov	r4, r0
 800914e:	460d      	mov	r5, r1
 8009150:	4622      	mov	r2, r4
 8009152:	462b      	mov	r3, r5
 8009154:	4620      	mov	r0, r4
 8009156:	4629      	mov	r1, r5
 8009158:	f7f7 fa76 	bl	8000648 <__aeabi_dmul>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4680      	mov	r8, r0
 8009162:	4689      	mov	r9, r1
 8009164:	f7f7 fa70 	bl	8000648 <__aeabi_dmul>
 8009168:	a371      	add	r3, pc, #452	@ (adr r3, 8009330 <atan+0x2a8>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	4606      	mov	r6, r0
 8009170:	460f      	mov	r7, r1
 8009172:	f7f7 fa69 	bl	8000648 <__aeabi_dmul>
 8009176:	a370      	add	r3, pc, #448	@ (adr r3, 8009338 <atan+0x2b0>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f7f7 f8ae 	bl	80002dc <__adddf3>
 8009180:	4632      	mov	r2, r6
 8009182:	463b      	mov	r3, r7
 8009184:	f7f7 fa60 	bl	8000648 <__aeabi_dmul>
 8009188:	a36d      	add	r3, pc, #436	@ (adr r3, 8009340 <atan+0x2b8>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f7 f8a5 	bl	80002dc <__adddf3>
 8009192:	4632      	mov	r2, r6
 8009194:	463b      	mov	r3, r7
 8009196:	f7f7 fa57 	bl	8000648 <__aeabi_dmul>
 800919a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009348 <atan+0x2c0>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f7f7 f89c 	bl	80002dc <__adddf3>
 80091a4:	4632      	mov	r2, r6
 80091a6:	463b      	mov	r3, r7
 80091a8:	f7f7 fa4e 	bl	8000648 <__aeabi_dmul>
 80091ac:	a368      	add	r3, pc, #416	@ (adr r3, 8009350 <atan+0x2c8>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f7f7 f893 	bl	80002dc <__adddf3>
 80091b6:	4632      	mov	r2, r6
 80091b8:	463b      	mov	r3, r7
 80091ba:	f7f7 fa45 	bl	8000648 <__aeabi_dmul>
 80091be:	a366      	add	r3, pc, #408	@ (adr r3, 8009358 <atan+0x2d0>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 f88a 	bl	80002dc <__adddf3>
 80091c8:	4642      	mov	r2, r8
 80091ca:	464b      	mov	r3, r9
 80091cc:	f7f7 fa3c 	bl	8000648 <__aeabi_dmul>
 80091d0:	a363      	add	r3, pc, #396	@ (adr r3, 8009360 <atan+0x2d8>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	4680      	mov	r8, r0
 80091d8:	4689      	mov	r9, r1
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 fa33 	bl	8000648 <__aeabi_dmul>
 80091e2:	a361      	add	r3, pc, #388	@ (adr r3, 8009368 <atan+0x2e0>)
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f7f7 f876 	bl	80002d8 <__aeabi_dsub>
 80091ec:	4632      	mov	r2, r6
 80091ee:	463b      	mov	r3, r7
 80091f0:	f7f7 fa2a 	bl	8000648 <__aeabi_dmul>
 80091f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009370 <atan+0x2e8>)
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f7 f86d 	bl	80002d8 <__aeabi_dsub>
 80091fe:	4632      	mov	r2, r6
 8009200:	463b      	mov	r3, r7
 8009202:	f7f7 fa21 	bl	8000648 <__aeabi_dmul>
 8009206:	a35c      	add	r3, pc, #368	@ (adr r3, 8009378 <atan+0x2f0>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f7f7 f864 	bl	80002d8 <__aeabi_dsub>
 8009210:	4632      	mov	r2, r6
 8009212:	463b      	mov	r3, r7
 8009214:	f7f7 fa18 	bl	8000648 <__aeabi_dmul>
 8009218:	a359      	add	r3, pc, #356	@ (adr r3, 8009380 <atan+0x2f8>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f7 f85b 	bl	80002d8 <__aeabi_dsub>
 8009222:	4632      	mov	r2, r6
 8009224:	463b      	mov	r3, r7
 8009226:	f7f7 fa0f 	bl	8000648 <__aeabi_dmul>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f7 f853 	bl	80002dc <__adddf3>
 8009236:	4622      	mov	r2, r4
 8009238:	462b      	mov	r3, r5
 800923a:	f7f7 fa05 	bl	8000648 <__aeabi_dmul>
 800923e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	d148      	bne.n	80092da <atan+0x252>
 8009248:	4620      	mov	r0, r4
 800924a:	4629      	mov	r1, r5
 800924c:	f7f7 f844 	bl	80002d8 <__aeabi_dsub>
 8009250:	e72f      	b.n	80090b2 <atan+0x2a>
 8009252:	4b52      	ldr	r3, [pc, #328]	@ (800939c <atan+0x314>)
 8009254:	2200      	movs	r2, #0
 8009256:	4620      	mov	r0, r4
 8009258:	4629      	mov	r1, r5
 800925a:	f7f7 f83d 	bl	80002d8 <__aeabi_dsub>
 800925e:	4b4f      	ldr	r3, [pc, #316]	@ (800939c <atan+0x314>)
 8009260:	4606      	mov	r6, r0
 8009262:	460f      	mov	r7, r1
 8009264:	2200      	movs	r2, #0
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	f7f7 f837 	bl	80002dc <__adddf3>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4630      	mov	r0, r6
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 fb11 	bl	800089c <__aeabi_ddiv>
 800927a:	f04f 0a01 	mov.w	sl, #1
 800927e:	4604      	mov	r4, r0
 8009280:	460d      	mov	r5, r1
 8009282:	e765      	b.n	8009150 <atan+0xc8>
 8009284:	4b47      	ldr	r3, [pc, #284]	@ (80093a4 <atan+0x31c>)
 8009286:	429e      	cmp	r6, r3
 8009288:	d21c      	bcs.n	80092c4 <atan+0x23c>
 800928a:	4b47      	ldr	r3, [pc, #284]	@ (80093a8 <atan+0x320>)
 800928c:	2200      	movs	r2, #0
 800928e:	4620      	mov	r0, r4
 8009290:	4629      	mov	r1, r5
 8009292:	f7f7 f821 	bl	80002d8 <__aeabi_dsub>
 8009296:	4b44      	ldr	r3, [pc, #272]	@ (80093a8 <atan+0x320>)
 8009298:	4606      	mov	r6, r0
 800929a:	460f      	mov	r7, r1
 800929c:	2200      	movs	r2, #0
 800929e:	4620      	mov	r0, r4
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7f7 f9d1 	bl	8000648 <__aeabi_dmul>
 80092a6:	4b3d      	ldr	r3, [pc, #244]	@ (800939c <atan+0x314>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	f7f7 f817 	bl	80002dc <__adddf3>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4630      	mov	r0, r6
 80092b4:	4639      	mov	r1, r7
 80092b6:	f7f7 faf1 	bl	800089c <__aeabi_ddiv>
 80092ba:	f04f 0a02 	mov.w	sl, #2
 80092be:	4604      	mov	r4, r0
 80092c0:	460d      	mov	r5, r1
 80092c2:	e745      	b.n	8009150 <atan+0xc8>
 80092c4:	4622      	mov	r2, r4
 80092c6:	462b      	mov	r3, r5
 80092c8:	4938      	ldr	r1, [pc, #224]	@ (80093ac <atan+0x324>)
 80092ca:	2000      	movs	r0, #0
 80092cc:	f7f7 fae6 	bl	800089c <__aeabi_ddiv>
 80092d0:	f04f 0a03 	mov.w	sl, #3
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	e73a      	b.n	8009150 <atan+0xc8>
 80092da:	4b35      	ldr	r3, [pc, #212]	@ (80093b0 <atan+0x328>)
 80092dc:	4e35      	ldr	r6, [pc, #212]	@ (80093b4 <atan+0x32c>)
 80092de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f6 fff7 	bl	80002d8 <__aeabi_dsub>
 80092ea:	4622      	mov	r2, r4
 80092ec:	462b      	mov	r3, r5
 80092ee:	f7f6 fff3 	bl	80002d8 <__aeabi_dsub>
 80092f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80092fe:	f7f6 ffeb 	bl	80002d8 <__aeabi_dsub>
 8009302:	f1bb 0f00 	cmp.w	fp, #0
 8009306:	4604      	mov	r4, r0
 8009308:	460d      	mov	r5, r1
 800930a:	f6bf aedc 	bge.w	80090c6 <atan+0x3e>
 800930e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009312:	461d      	mov	r5, r3
 8009314:	e6d7      	b.n	80090c6 <atan+0x3e>
 8009316:	a51c      	add	r5, pc, #112	@ (adr r5, 8009388 <atan+0x300>)
 8009318:	e9d5 4500 	ldrd	r4, r5, [r5]
 800931c:	e6d3      	b.n	80090c6 <atan+0x3e>
 800931e:	bf00      	nop
 8009320:	54442d18 	.word	0x54442d18
 8009324:	3ff921fb 	.word	0x3ff921fb
 8009328:	8800759c 	.word	0x8800759c
 800932c:	7e37e43c 	.word	0x7e37e43c
 8009330:	e322da11 	.word	0xe322da11
 8009334:	3f90ad3a 	.word	0x3f90ad3a
 8009338:	24760deb 	.word	0x24760deb
 800933c:	3fa97b4b 	.word	0x3fa97b4b
 8009340:	a0d03d51 	.word	0xa0d03d51
 8009344:	3fb10d66 	.word	0x3fb10d66
 8009348:	c54c206e 	.word	0xc54c206e
 800934c:	3fb745cd 	.word	0x3fb745cd
 8009350:	920083ff 	.word	0x920083ff
 8009354:	3fc24924 	.word	0x3fc24924
 8009358:	5555550d 	.word	0x5555550d
 800935c:	3fd55555 	.word	0x3fd55555
 8009360:	2c6a6c2f 	.word	0x2c6a6c2f
 8009364:	bfa2b444 	.word	0xbfa2b444
 8009368:	52defd9a 	.word	0x52defd9a
 800936c:	3fadde2d 	.word	0x3fadde2d
 8009370:	af749a6d 	.word	0xaf749a6d
 8009374:	3fb3b0f2 	.word	0x3fb3b0f2
 8009378:	fe231671 	.word	0xfe231671
 800937c:	3fbc71c6 	.word	0x3fbc71c6
 8009380:	9998ebc4 	.word	0x9998ebc4
 8009384:	3fc99999 	.word	0x3fc99999
 8009388:	54442d18 	.word	0x54442d18
 800938c:	bff921fb 	.word	0xbff921fb
 8009390:	440fffff 	.word	0x440fffff
 8009394:	7ff00000 	.word	0x7ff00000
 8009398:	3fdbffff 	.word	0x3fdbffff
 800939c:	3ff00000 	.word	0x3ff00000
 80093a0:	3ff2ffff 	.word	0x3ff2ffff
 80093a4:	40038000 	.word	0x40038000
 80093a8:	3ff80000 	.word	0x3ff80000
 80093ac:	bff00000 	.word	0xbff00000
 80093b0:	08009798 	.word	0x08009798
 80093b4:	080097b8 	.word	0x080097b8

080093b8 <fabs>:
 80093b8:	ec51 0b10 	vmov	r0, r1, d0
 80093bc:	4602      	mov	r2, r0
 80093be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80093c2:	ec43 2b10 	vmov	d0, r2, r3
 80093c6:	4770      	bx	lr

080093c8 <__ieee754_sqrt>:
 80093c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	4a68      	ldr	r2, [pc, #416]	@ (8009570 <__ieee754_sqrt+0x1a8>)
 80093ce:	ec55 4b10 	vmov	r4, r5, d0
 80093d2:	43aa      	bics	r2, r5
 80093d4:	462b      	mov	r3, r5
 80093d6:	4621      	mov	r1, r4
 80093d8:	d110      	bne.n	80093fc <__ieee754_sqrt+0x34>
 80093da:	4622      	mov	r2, r4
 80093dc:	4620      	mov	r0, r4
 80093de:	4629      	mov	r1, r5
 80093e0:	f7f7 f932 	bl	8000648 <__aeabi_dmul>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4620      	mov	r0, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f6 ff76 	bl	80002dc <__adddf3>
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	ec45 4b10 	vmov	d0, r4, r5
 80093f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	2d00      	cmp	r5, #0
 80093fe:	dc0e      	bgt.n	800941e <__ieee754_sqrt+0x56>
 8009400:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009404:	4322      	orrs	r2, r4
 8009406:	d0f5      	beq.n	80093f4 <__ieee754_sqrt+0x2c>
 8009408:	b19d      	cbz	r5, 8009432 <__ieee754_sqrt+0x6a>
 800940a:	4622      	mov	r2, r4
 800940c:	4620      	mov	r0, r4
 800940e:	4629      	mov	r1, r5
 8009410:	f7f6 ff62 	bl	80002d8 <__aeabi_dsub>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	f7f7 fa40 	bl	800089c <__aeabi_ddiv>
 800941c:	e7e8      	b.n	80093f0 <__ieee754_sqrt+0x28>
 800941e:	152a      	asrs	r2, r5, #20
 8009420:	d115      	bne.n	800944e <__ieee754_sqrt+0x86>
 8009422:	2000      	movs	r0, #0
 8009424:	e009      	b.n	800943a <__ieee754_sqrt+0x72>
 8009426:	0acb      	lsrs	r3, r1, #11
 8009428:	3a15      	subs	r2, #21
 800942a:	0549      	lsls	r1, r1, #21
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0fa      	beq.n	8009426 <__ieee754_sqrt+0x5e>
 8009430:	e7f7      	b.n	8009422 <__ieee754_sqrt+0x5a>
 8009432:	462a      	mov	r2, r5
 8009434:	e7fa      	b.n	800942c <__ieee754_sqrt+0x64>
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	3001      	adds	r0, #1
 800943a:	02dc      	lsls	r4, r3, #11
 800943c:	d5fb      	bpl.n	8009436 <__ieee754_sqrt+0x6e>
 800943e:	1e44      	subs	r4, r0, #1
 8009440:	1b12      	subs	r2, r2, r4
 8009442:	f1c0 0420 	rsb	r4, r0, #32
 8009446:	fa21 f404 	lsr.w	r4, r1, r4
 800944a:	4323      	orrs	r3, r4
 800944c:	4081      	lsls	r1, r0
 800944e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009452:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800945a:	07d2      	lsls	r2, r2, #31
 800945c:	bf5c      	itt	pl
 800945e:	005b      	lslpl	r3, r3, #1
 8009460:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009468:	bf58      	it	pl
 800946a:	0049      	lslpl	r1, r1, #1
 800946c:	2600      	movs	r6, #0
 800946e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009472:	106d      	asrs	r5, r5, #1
 8009474:	0049      	lsls	r1, r1, #1
 8009476:	2016      	movs	r0, #22
 8009478:	4632      	mov	r2, r6
 800947a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800947e:	1917      	adds	r7, r2, r4
 8009480:	429f      	cmp	r7, r3
 8009482:	bfde      	ittt	le
 8009484:	193a      	addle	r2, r7, r4
 8009486:	1bdb      	suble	r3, r3, r7
 8009488:	1936      	addle	r6, r6, r4
 800948a:	0fcf      	lsrs	r7, r1, #31
 800948c:	3801      	subs	r0, #1
 800948e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009492:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009496:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800949a:	d1f0      	bne.n	800947e <__ieee754_sqrt+0xb6>
 800949c:	4604      	mov	r4, r0
 800949e:	2720      	movs	r7, #32
 80094a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80094a4:	429a      	cmp	r2, r3
 80094a6:	eb00 0e0c 	add.w	lr, r0, ip
 80094aa:	db02      	blt.n	80094b2 <__ieee754_sqrt+0xea>
 80094ac:	d113      	bne.n	80094d6 <__ieee754_sqrt+0x10e>
 80094ae:	458e      	cmp	lr, r1
 80094b0:	d811      	bhi.n	80094d6 <__ieee754_sqrt+0x10e>
 80094b2:	f1be 0f00 	cmp.w	lr, #0
 80094b6:	eb0e 000c 	add.w	r0, lr, ip
 80094ba:	da42      	bge.n	8009542 <__ieee754_sqrt+0x17a>
 80094bc:	2800      	cmp	r0, #0
 80094be:	db40      	blt.n	8009542 <__ieee754_sqrt+0x17a>
 80094c0:	f102 0801 	add.w	r8, r2, #1
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	458e      	cmp	lr, r1
 80094c8:	bf88      	it	hi
 80094ca:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80094ce:	eba1 010e 	sub.w	r1, r1, lr
 80094d2:	4464      	add	r4, ip
 80094d4:	4642      	mov	r2, r8
 80094d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80094da:	3f01      	subs	r7, #1
 80094dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80094e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80094e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80094e8:	d1dc      	bne.n	80094a4 <__ieee754_sqrt+0xdc>
 80094ea:	4319      	orrs	r1, r3
 80094ec:	d01b      	beq.n	8009526 <__ieee754_sqrt+0x15e>
 80094ee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009574 <__ieee754_sqrt+0x1ac>
 80094f2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009578 <__ieee754_sqrt+0x1b0>
 80094f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80094fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80094fe:	f7f6 feeb 	bl	80002d8 <__aeabi_dsub>
 8009502:	e9da 8900 	ldrd	r8, r9, [sl]
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4640      	mov	r0, r8
 800950c:	4649      	mov	r1, r9
 800950e:	f7f7 fb17 	bl	8000b40 <__aeabi_dcmple>
 8009512:	b140      	cbz	r0, 8009526 <__ieee754_sqrt+0x15e>
 8009514:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8009518:	e9da 0100 	ldrd	r0, r1, [sl]
 800951c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009520:	d111      	bne.n	8009546 <__ieee754_sqrt+0x17e>
 8009522:	3601      	adds	r6, #1
 8009524:	463c      	mov	r4, r7
 8009526:	1072      	asrs	r2, r6, #1
 8009528:	0863      	lsrs	r3, r4, #1
 800952a:	07f1      	lsls	r1, r6, #31
 800952c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009530:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009534:	bf48      	it	mi
 8009536:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800953a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800953e:	4618      	mov	r0, r3
 8009540:	e756      	b.n	80093f0 <__ieee754_sqrt+0x28>
 8009542:	4690      	mov	r8, r2
 8009544:	e7be      	b.n	80094c4 <__ieee754_sqrt+0xfc>
 8009546:	f7f6 fec9 	bl	80002dc <__adddf3>
 800954a:	e9da 8900 	ldrd	r8, r9, [sl]
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4640      	mov	r0, r8
 8009554:	4649      	mov	r1, r9
 8009556:	f7f7 fae9 	bl	8000b2c <__aeabi_dcmplt>
 800955a:	b120      	cbz	r0, 8009566 <__ieee754_sqrt+0x19e>
 800955c:	1ca0      	adds	r0, r4, #2
 800955e:	bf08      	it	eq
 8009560:	3601      	addeq	r6, #1
 8009562:	3402      	adds	r4, #2
 8009564:	e7df      	b.n	8009526 <__ieee754_sqrt+0x15e>
 8009566:	1c63      	adds	r3, r4, #1
 8009568:	f023 0401 	bic.w	r4, r3, #1
 800956c:	e7db      	b.n	8009526 <__ieee754_sqrt+0x15e>
 800956e:	bf00      	nop
 8009570:	7ff00000 	.word	0x7ff00000
 8009574:	20000098 	.word	0x20000098
 8009578:	20000090 	.word	0x20000090

0800957c <_init>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr

08009588 <_fini>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr
