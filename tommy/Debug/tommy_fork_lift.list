
tommy_fork_lift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004c74  08004c74  00005c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb4  08004cb4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cb4  08004cb4  00005cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cbc  08004cbc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cbc  08004cbc  00005cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cc0  08004cc0  00005cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004cc4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000000c  08004cd0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08004cd0  00006370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015929  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af7  00000000  00000000  0001b965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0001e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1f  00000000  00000000  0001f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b57  00000000  00000000  000206bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001837d  00000000  00000000  00023216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc543  00000000  00000000  0003b593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b8  00000000  00000000  00117b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0011ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004c5c 	.word	0x08004c5c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004c5c 	.word	0x08004c5c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b50      	ldr	r3, [pc, #320]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a4f      	ldr	r2, [pc, #316]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b4d      	ldr	r3, [pc, #308]	@ (8000660 <MX_GPIO_Init+0x158>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b4a      	ldr	r3, [pc, #296]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a49      	ldr	r2, [pc, #292]	@ (8000660 <MX_GPIO_Init+0x158>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b47      	ldr	r3, [pc, #284]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b44      	ldr	r3, [pc, #272]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a43      	ldr	r2, [pc, #268]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b41      	ldr	r3, [pc, #260]	@ (8000660 <MX_GPIO_Init+0x158>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a3d      	ldr	r2, [pc, #244]	@ (8000660 <MX_GPIO_Init+0x158>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b3b      	ldr	r3, [pc, #236]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b38      	ldr	r3, [pc, #224]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a37      	ldr	r2, [pc, #220]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b35      	ldr	r3, [pc, #212]	@ (8000660 <MX_GPIO_Init+0x158>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b32      	ldr	r3, [pc, #200]	@ (8000660 <MX_GPIO_Init+0x158>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a31      	ldr	r2, [pc, #196]	@ (8000660 <MX_GPIO_Init+0x158>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <MX_GPIO_Init+0x158>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2108      	movs	r1, #8
 80005b2:	482c      	ldr	r0, [pc, #176]	@ (8000664 <MX_GPIO_Init+0x15c>)
 80005b4:	f001 fa5a 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80005be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c2:	f001 fa53 	bl	8001a6c <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80005cc:	4826      	ldr	r0, [pc, #152]	@ (8000668 <MX_GPIO_Init+0x160>)
 80005ce:	f001 fa4d 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d8:	4824      	ldr	r0, [pc, #144]	@ (800066c <MX_GPIO_Init+0x164>)
 80005da:	f001 fa47 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 80005de:	2308      	movs	r3, #8
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	481b      	ldr	r0, [pc, #108]	@ (8000664 <MX_GPIO_Init+0x15c>)
 80005f6:	f001 f8b7 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80005fa:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80005fe:	61fb      	str	r3, [r7, #28]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000616:	f001 f8a7 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 800061a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	480d      	ldr	r0, [pc, #52]	@ (8000668 <MX_GPIO_Init+0x160>)
 8000634:	f001 f898 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 8000638:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000646:	2303      	movs	r3, #3
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	4806      	ldr	r0, [pc, #24]	@ (800066c <MX_GPIO_Init+0x164>)
 8000652:	f001 f889 	bl	8001768 <HAL_GPIO_Init>

}
 8000656:	bf00      	nop
 8000658:	3730      	adds	r7, #48	@ 0x30
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000
 8000664:	48000800 	.word	0x48000800
 8000668:	48001000 	.word	0x48001000
 800066c:	48000c00 	.word	0x48000c00

08000670 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_I2C1_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <MX_I2C1_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_I2C1_Init+0x74>)
 800067c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <MX_I2C1_Init+0x7c>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_I2C1_Init+0x74>)
 8000688:	2201      	movs	r2, #1
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006aa:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006ac:	f001 f9f6 	bl	8001a9c <HAL_I2C_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006b6:	f000 f96e 	bl	8000996 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ba:	2100      	movs	r1, #0
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006be:	f001 fa88 	bl	8001bd2 <HAL_I2CEx_ConfigAnalogFilter>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c8:	f000 f965 	bl	8000996 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_I2C1_Init+0x74>)
 80006d0:	f001 faca 	bl	8001c68 <HAL_I2CEx_ConfigDigitalFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 f95c 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40005400 	.word	0x40005400
 80006ec:	40b285c2 	.word	0x40b285c2

080006f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0a0      	sub	sp, #128	@ 0x80
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	2254      	movs	r2, #84	@ 0x54
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f004 fa77 	bl	8004c04 <memset>
  if(i2cHandle->Instance==I2C1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a2d      	ldr	r2, [pc, #180]	@ (80007d0 <HAL_I2C_MspInit+0xe0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d153      	bne.n	80007c8 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000720:	2340      	movs	r3, #64	@ 0x40
 8000722:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000724:	2300      	movs	r3, #0
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	4618      	mov	r0, r3
 800072e:	f002 f8c9 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000738:	f000 f92d 	bl	8000996 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 800073e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000740:	4a24      	ldr	r2, [pc, #144]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000758:	4a1e      	ldr	r2, [pc, #120]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800076c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000770:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000772:	2312      	movs	r3, #18
 8000774:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800077e:	2304      	movs	r3, #4
 8000780:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000786:	4619      	mov	r1, r3
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f000 ffec 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000790:	2380      	movs	r3, #128	@ 0x80
 8000792:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000794:	2312      	movs	r3, #18
 8000796:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a0:	2304      	movs	r3, #4
 80007a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007a8:	4619      	mov	r1, r3
 80007aa:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <HAL_I2C_MspInit+0xe8>)
 80007ac:	f000 ffdc 	bl	8001768 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 80007b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b4:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 80007b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <HAL_I2C_MspInit+0xe4>)
 80007be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c8:	bf00      	nop
 80007ca:	3780      	adds	r7, #128	@ 0x80
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40005400 	.word	0x40005400
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000400 	.word	0x48000400

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fe4b 	bl	800147a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f88e 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff fe8e 	bl	8000508 <MX_GPIO_Init>
  MX_UART4_Init();
 80007ec:	f000 fcec 	bl	80011c8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80007f0:	f000 fd36 	bl	8001260 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80007f4:	f000 f9fa 	bl	8000bec <MX_TIM3_Init>
  MX_TIM1_Init();
 80007f8:	f000 f93a 	bl	8000a70 <MX_TIM1_Init>
  MX_TIM8_Init();
 80007fc:	f000 fb08 	bl	8000e10 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000800:	f000 fa5a 	bl	8000cb8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000804:	f000 faae 	bl	8000d64 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000808:	f7ff ff32 	bl	8000670 <MX_I2C1_Init>
  MX_TIM2_Init();
 800080c:	f000 f98a 	bl	8000b24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000810:	2100      	movs	r1, #0
 8000812:	4832      	ldr	r0, [pc, #200]	@ (80008dc <main+0x100>)
 8000814:	f002 fb74 	bl	8002f00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000818:	210c      	movs	r1, #12
 800081a:	4830      	ldr	r0, [pc, #192]	@ (80008dc <main+0x100>)
 800081c:	f002 fb70 	bl	8002f00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000820:	2108      	movs	r1, #8
 8000822:	482f      	ldr	r0, [pc, #188]	@ (80008e0 <main+0x104>)
 8000824:	f002 fb6c 	bl	8002f00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000828:	210c      	movs	r1, #12
 800082a:	482d      	ldr	r0, [pc, #180]	@ (80008e0 <main+0x104>)
 800082c:	f002 fb68 	bl	8002f00 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000830:	482c      	ldr	r0, [pc, #176]	@ (80008e4 <main+0x108>)
 8000832:	f002 fa95 	bl	8002d60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000836:	213c      	movs	r1, #60	@ 0x3c
 8000838:	482a      	ldr	r0, [pc, #168]	@ (80008e4 <main+0x108>)
 800083a:	f002 fd19 	bl	8003270 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800083e:	482a      	ldr	r0, [pc, #168]	@ (80008e8 <main+0x10c>)
 8000840:	f002 fa8e 	bl	8002d60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000844:	213c      	movs	r1, #60	@ 0x3c
 8000846:	4828      	ldr	r0, [pc, #160]	@ (80008e8 <main+0x10c>)
 8000848:	f002 fd12 	bl	8003270 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800084c:	4827      	ldr	r0, [pc, #156]	@ (80008ec <main+0x110>)
 800084e:	f002 fa87 	bl	8002d60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000852:	213c      	movs	r1, #60	@ 0x3c
 8000854:	4825      	ldr	r0, [pc, #148]	@ (80008ec <main+0x110>)
 8000856:	f002 fd0b 	bl	8003270 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800085a:	4825      	ldr	r0, [pc, #148]	@ (80008f0 <main+0x114>)
 800085c:	f002 fa80 	bl	8002d60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000860:	213c      	movs	r1, #60	@ 0x3c
 8000862:	4823      	ldr	r0, [pc, #140]	@ (80008f0 <main+0x114>)
 8000864:	f002 fd04 	bl	8003270 <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2108      	movs	r1, #8
 800086c:	4821      	ldr	r0, [pc, #132]	@ (80008f4 <main+0x118>)
 800086e:	f001 f8fd 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000878:	481f      	ldr	r0, [pc, #124]	@ (80008f8 <main+0x11c>)
 800087a:	f001 f8f7 	bl	8001a6c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000884:	481d      	ldr	r0, [pc, #116]	@ (80008fc <main+0x120>)
 8000886:	f001 f8f1 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	481a      	ldr	r0, [pc, #104]	@ (80008fc <main+0x120>)
 8000892:	f001 f8eb 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800089c:	4817      	ldr	r0, [pc, #92]	@ (80008fc <main+0x120>)
 800089e:	f001 f8e5 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	4815      	ldr	r0, [pc, #84]	@ (80008fc <main+0x120>)
 80008a8:	f001 f8e0 	bl	8001a6c <HAL_GPIO_WritePin>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if (TEST)
    HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fe55 	bl	800155c <HAL_Delay>
    TIM3->CCR4 = 16800/2;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <main+0x124>)
 80008b4:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80008b8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3->CCR1 = 16800/2;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <main+0x124>)
 80008bc:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR4 = 16800/2;
 80008c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c6:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80008ca:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2->CCR3 = 16800/2;
 80008cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d0:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80008d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_Delay(1);
 80008d6:	bf00      	nop
 80008d8:	e7e8      	b.n	80008ac <main+0xd0>
 80008da:	bf00      	nop
 80008dc:	20000114 	.word	0x20000114
 80008e0:	200000c8 	.word	0x200000c8
 80008e4:	2000007c 	.word	0x2000007c
 80008e8:	20000160 	.word	0x20000160
 80008ec:	200001ac 	.word	0x200001ac
 80008f0:	200001f8 	.word	0x200001f8
 80008f4:	48000800 	.word	0x48000800
 80008f8:	48000c00 	.word	0x48000c00
 80008fc:	48001000 	.word	0x48001000
 8000900:	40000400 	.word	0x40000400

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	@ 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	2238      	movs	r2, #56	@ 0x38
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f004 f976 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000926:	2000      	movs	r0, #0
 8000928:	f001 f9ea 	bl	8001d00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000934:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	2303      	movs	r3, #3
 800093c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000942:	2355      	movs	r3, #85	@ 0x55
 8000944:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fa86 	bl	8001e68 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000962:	f000 f818 	bl	8000996 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2303      	movs	r3, #3
 800096c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2104      	movs	r1, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fd84 	bl	800248c <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800098a:	f000 f804 	bl	8000996 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	@ 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099a:	b672      	cpsid	i
}
 800099c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009da:	f001 fa35 	bl	8001e48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 fd6d 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	@ 0x30
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2224      	movs	r2, #36	@ 0x24
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 f8c0 	bl	8004c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000a90:	4a23      	ldr	r2, [pc, #140]	@ (8000b20 <MX_TIM1_Init+0xb0>)
 8000a92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a94:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000aa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aa6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aba:	2303      	movs	r3, #3
 8000abc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000aca:	230a      	movs	r3, #10
 8000acc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000ada:	230a      	movs	r3, #10
 8000adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000ae6:	f002 fb1d 	bl	8003124 <HAL_TIM_Encoder_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000af0:	f7ff ff51 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_TIM1_Init+0xac>)
 8000b06:	f003 f979 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b10:	f7ff ff41 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	@ 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000007c 	.word	0x2000007c
 8000b20:	40012c00 	.word	0x40012c00

08000b24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000b4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000b5e:	f244 129f 	movw	r2, #16799	@ 0x419f
 8000b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b70:	481d      	ldr	r0, [pc, #116]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000b72:	f002 f96d 	bl	8002e50 <HAL_TIM_PWM_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b7c:	f7ff ff0b 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4816      	ldr	r0, [pc, #88]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000b90:	f003 f934 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b9a:	f7ff fefc 	bl	8000996 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9e:	2360      	movs	r3, #96	@ 0x60
 8000ba0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000bb6:	f002 fc09 	bl	80033cc <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000bc0:	f7ff fee9 	bl	8000996 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000bcc:	f002 fbfe 	bl	80033cc <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000bd6:	f7ff fede 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bda:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <MX_TIM2_Init+0xc4>)
 8000bdc:	f000 fa7c 	bl	80010d8 <HAL_TIM_MspPostInit>

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	@ 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000c8 	.word	0x200000c8

08000bec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c12:	4a28      	ldr	r2, [pc, #160]	@ (8000cb4 <MX_TIM3_Init+0xc8>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000c16:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8000c22:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c24:	f244 129f 	movw	r2, #16799	@ 0x419f
 8000c28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c32:	2280      	movs	r2, #128	@ 0x80
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c36:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c38:	f002 f90a 	bl	8002e50 <HAL_TIM_PWM_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c42:	f7ff fea8 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4816      	ldr	r0, [pc, #88]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c56:	f003 f8d1 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c60:	f7ff fe99 	bl	8000996 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c64:	2360      	movs	r3, #96	@ 0x60
 8000c66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c7c:	f002 fba6 	bl	80033cc <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c86:	f7ff fe86 	bl	8000996 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	220c      	movs	r2, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000c92:	f002 fb9b 	bl	80033cc <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c9c:	f7ff fe7b 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca0:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <MX_TIM3_Init+0xc4>)
 8000ca2:	f000 fa19 	bl	80010d8 <HAL_TIM_MspPostInit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000114 	.word	0x20000114
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	@ 0x30
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2224      	movs	r2, #36	@ 0x24
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 ff9c 	bl	8004c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <MX_TIM4_Init+0xa4>)
 8000cd8:	4a21      	ldr	r2, [pc, #132]	@ (8000d60 <MX_TIM4_Init+0xa8>)
 8000cda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <MX_TIM4_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <MX_TIM4_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <MX_TIM4_Init+0xa4>)
 8000cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_TIM4_Init+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <MX_TIM4_Init+0xa4>)
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d14:	2301      	movs	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <MX_TIM4_Init+0xa4>)
 8000d28:	f002 f9fc 	bl	8003124 <HAL_TIM_Encoder_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d32:	f7ff fe30 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <MX_TIM4_Init+0xa4>)
 8000d44:	f003 f85a 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d4e:	f7ff fe22 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3730      	adds	r7, #48	@ 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000160 	.word	0x20000160
 8000d60:	40000800 	.word	0x40000800

08000d64 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	@ 0x30
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2224      	movs	r2, #36	@ 0x24
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 ff46 	bl	8004c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <MX_TIM5_Init+0xa4>)
 8000d84:	4a21      	ldr	r2, [pc, #132]	@ (8000e0c <MX_TIM5_Init+0xa8>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_TIM5_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <MX_TIM5_Init+0xa4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_TIM5_Init+0xa4>)
 8000d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_TIM5_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_TIM5_Init+0xa4>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000da8:	2303      	movs	r3, #3
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000db8:	230a      	movs	r3, #10
 8000dba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000dc8:	230a      	movs	r3, #10
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <MX_TIM5_Init+0xa4>)
 8000dd4:	f002 f9a6 	bl	8003124 <HAL_TIM_Encoder_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000dde:	f7ff fdda 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <MX_TIM5_Init+0xa4>)
 8000df0:	f003 f804 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000dfa:	f7ff fdcc 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3730      	adds	r7, #48	@ 0x30
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200001ac 	.word	0x200001ac
 8000e0c:	40000c00 	.word	0x40000c00

08000e10 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	@ 0x30
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2224      	movs	r2, #36	@ 0x24
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fef0 	bl	8004c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000e30:	4a23      	ldr	r2, [pc, #140]	@ (8000ec0 <MX_TIM8_Init+0xb0>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e34:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000e42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e46:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e62:	2301      	movs	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e72:	2301      	movs	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000e86:	f002 f94d 	bl	8003124 <HAL_TIM_Encoder_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000e90:	f7ff fd81 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_TIM8_Init+0xac>)
 8000ea6:	f002 ffa9 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000eb0:	f7ff fd71 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3730      	adds	r7, #48	@ 0x30
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200001f8 	.word	0x200001f8
 8000ec0:	40013400 	.word	0x40013400

08000ec4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b090      	sub	sp, #64	@ 0x40
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8001058 <HAL_TIM_Encoder_MspInit+0x194>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d128      	bne.n	8000f38 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eea:	4a5c      	ldr	r2, [pc, #368]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000eec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ef0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b57      	ldr	r3, [pc, #348]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a56      	ldr	r2, [pc, #344]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b54      	ldr	r3, [pc, #336]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f16:	2303      	movs	r3, #3
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f26:	2302      	movs	r3, #2
 8000f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	484b      	ldr	r0, [pc, #300]	@ (8001060 <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f32:	f000 fc19 	bl	8001768 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000f36:	e08a      	b.n	800104e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a49      	ldr	r2, [pc, #292]	@ (8001064 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d129      	bne.n	8000f96 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f42:	4b46      	ldr	r3, [pc, #280]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	4a45      	ldr	r2, [pc, #276]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4e:	4b43      	ldr	r3, [pc, #268]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	4b40      	ldr	r3, [pc, #256]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f72:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4836      	ldr	r0, [pc, #216]	@ (8001068 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8000f90:	f000 fbea 	bl	8001768 <HAL_GPIO_Init>
}
 8000f94:	e05b      	b.n	800104e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a34      	ldr	r2, [pc, #208]	@ (800106c <HAL_TIM_Encoder_MspInit+0x1a8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d129      	bne.n	8000ff4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fac:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f000 fbbb 	bl	8001768 <HAL_GPIO_Init>
}
 8000ff2:	e02c      	b.n	800104e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8001070 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d127      	bne.n	800104e <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	4a16      	ldr	r2, [pc, #88]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8001004:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001008:	6613      	str	r3, [r2, #96]	@ 0x60
 800100a:	4b14      	ldr	r3, [pc, #80]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a10      	ldr	r2, [pc, #64]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <HAL_TIM_Encoder_MspInit+0x198>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800102e:	23c0      	movs	r3, #192	@ 0xc0
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800103e:	2304      	movs	r3, #4
 8001040:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <HAL_TIM_Encoder_MspInit+0x19c>)
 800104a:	f000 fb8d 	bl	8001768 <HAL_GPIO_Init>
}
 800104e:	bf00      	nop
 8001050:	3740      	adds	r7, #64	@ 0x40
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012c00 	.word	0x40012c00
 800105c:	40021000 	.word	0x40021000
 8001060:	48000800 	.word	0x48000800
 8001064:	40000800 	.word	0x40000800
 8001068:	48000c00 	.word	0x48000c00
 800106c:	40000c00 	.word	0x40000c00
 8001070:	40013400 	.word	0x40013400

08001074 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001084:	d10c      	bne.n	80010a0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108a:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <HAL_TIM_PWM_MspInit+0x5c>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6593      	str	r3, [r2, #88]	@ 0x58
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800109e:	e010      	b.n	80010c2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_TIM_PWM_MspInit+0x60>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10b      	bne.n	80010c2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40000400 	.word	0x40000400

080010d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010f8:	d139      	bne.n	800116e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a2e      	ldr	r2, [pc, #184]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b29      	ldr	r3, [pc, #164]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a28      	ldr	r2, [pc, #160]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800112a:	2308      	movs	r3, #8
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800113a:	2301      	movs	r3, #1
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001148:	f000 fb0e 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800115c:	2302      	movs	r3, #2
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4815      	ldr	r0, [pc, #84]	@ (80011bc <HAL_TIM_MspPostInit+0xe4>)
 8001168:	f000 fafe 	bl	8001768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800116c:	e020      	b.n	80011b0 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <HAL_TIM_MspPostInit+0xe8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d11b      	bne.n	80011b0 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8001190:	2324      	movs	r3, #36	@ 0x24
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011a0:	2302      	movs	r3, #2
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <HAL_TIM_MspPostInit+0xec>)
 80011ac:	f000 fadc 	bl	8001768 <HAL_GPIO_Init>
}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	40000400 	.word	0x40000400
 80011c4:	48001000 	.word	0x48001000

080011c8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011cc:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <MX_UART4_Init+0x90>)
 80011ce:	4a23      	ldr	r2, [pc, #140]	@ (800125c <MX_UART4_Init+0x94>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011d2:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <MX_UART4_Init+0x90>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <MX_UART4_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <MX_UART4_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <MX_UART4_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <MX_UART4_Init+0x90>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <MX_UART4_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <MX_UART4_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <MX_UART4_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_UART4_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <MX_UART4_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001210:	4811      	ldr	r0, [pc, #68]	@ (8001258 <MX_UART4_Init+0x90>)
 8001212:	f002 fe89 	bl	8003f28 <HAL_UART_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800121c:	f7ff fbbb 	bl	8000996 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	480d      	ldr	r0, [pc, #52]	@ (8001258 <MX_UART4_Init+0x90>)
 8001224:	f003 fc24 	bl	8004a70 <HAL_UARTEx_SetTxFifoThreshold>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800122e:	f7ff fbb2 	bl	8000996 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4808      	ldr	r0, [pc, #32]	@ (8001258 <MX_UART4_Init+0x90>)
 8001236:	f003 fc59 	bl	8004aec <HAL_UARTEx_SetRxFifoThreshold>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001240:	f7ff fba9 	bl	8000996 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	@ (8001258 <MX_UART4_Init+0x90>)
 8001246:	f003 fbda 	bl	80049fe <HAL_UARTEx_DisableFifoMode>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001250:	f7ff fba1 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000244 	.word	0x20000244
 800125c:	40004c00 	.word	0x40004c00

08001260 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 8001266:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <MX_USART1_UART_Init+0x94>)
 8001268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012a8:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 80012aa:	f002 fe3d 	bl	8003f28 <HAL_UART_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012b4:	f7ff fb6f 	bl	8000996 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 80012bc:	f003 fbd8 	bl	8004a70 <HAL_UARTEx_SetTxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012c6:	f7ff fb66 	bl	8000996 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4808      	ldr	r0, [pc, #32]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 80012ce:	f003 fc0d 	bl	8004aec <HAL_UARTEx_SetRxFifoThreshold>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f7ff fb5d 	bl	8000996 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_USART1_UART_Init+0x90>)
 80012de:	f003 fb8e 	bl	80049fe <HAL_UARTEx_DisableFifoMode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f7ff fb55 	bl	8000996 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002d8 	.word	0x200002d8
 80012f4:	40013800 	.word	0x40013800

080012f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0a0      	sub	sp, #128	@ 0x80
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2254      	movs	r2, #84	@ 0x54
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fc73 	bl	8004c04 <memset>
  if(uartHandle->Instance==UART4)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a3d      	ldr	r2, [pc, #244]	@ (8001418 <HAL_UART_MspInit+0x120>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d137      	bne.n	8001398 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001328:	2308      	movs	r3, #8
 800132a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	4618      	mov	r0, r3
 8001336:	f001 fac5 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001340:	f7ff fb29 	bl	8000996 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001344:	4b35      	ldr	r3, [pc, #212]	@ (800141c <HAL_UART_MspInit+0x124>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001348:	4a34      	ldr	r2, [pc, #208]	@ (800141c <HAL_UART_MspInit+0x124>)
 800134a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800134e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001350:	4b32      	ldr	r3, [pc, #200]	@ (800141c <HAL_UART_MspInit+0x124>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001354:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <HAL_UART_MspInit+0x124>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001360:	4a2e      	ldr	r2, [pc, #184]	@ (800141c <HAL_UART_MspInit+0x124>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001368:	4b2c      	ldr	r3, [pc, #176]	@ (800141c <HAL_UART_MspInit+0x124>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001374:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001378:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001386:	2305      	movs	r3, #5
 8001388:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800138e:	4619      	mov	r1, r3
 8001390:	4823      	ldr	r0, [pc, #140]	@ (8001420 <HAL_UART_MspInit+0x128>)
 8001392:	f000 f9e9 	bl	8001768 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001396:	e03a      	b.n	800140e <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <HAL_UART_MspInit+0x12c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d135      	bne.n	800140e <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fa88 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80013ba:	f7ff faec 	bl	8000996 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <HAL_UART_MspInit+0x124>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	4a16      	ldr	r2, [pc, #88]	@ (800141c <HAL_UART_MspInit+0x124>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_UART_MspInit+0x124>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_UART_MspInit+0x124>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <HAL_UART_MspInit+0x124>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <HAL_UART_MspInit+0x124>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013ee:	2330      	movs	r3, #48	@ 0x30
 80013f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013fe:	2307      	movs	r3, #7
 8001400:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <HAL_UART_MspInit+0x128>)
 800140a:	f000 f9ad 	bl	8001768 <HAL_GPIO_Init>
}
 800140e:	bf00      	nop
 8001410:	3780      	adds	r7, #128	@ 0x80
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004c00 	.word	0x40004c00
 800141c:	40021000 	.word	0x40021000
 8001420:	48000800 	.word	0x48000800
 8001424:	40013800 	.word	0x40013800

08001428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001428:	480d      	ldr	r0, [pc, #52]	@ (8001460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800142c:	f7ff fb0e 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <LoopForever+0x6>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	@ (8001468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <LoopForever+0xe>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	@ (8001474 <LoopForever+0x16>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f003 fbdd 	bl	8004c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145a:	f7ff f9bf 	bl	80007dc <main>

0800145e <LoopForever>:

LoopForever:
    b LoopForever
 800145e:	e7fe      	b.n	800145e <LoopForever>
  ldr   r0, =_estack
 8001460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800146c:	08004cc4 	.word	0x08004cc4
  ldr r2, =_sbss
 8001470:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001474:	20000370 	.word	0x20000370

08001478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_2_IRQHandler>

0800147a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f93d 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148a:	200f      	movs	r0, #15
 800148c:	f000 f80e 	bl	80014ac <HAL_InitTick>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	e001      	b.n	80014a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800149c:	f7ff fa82 	bl	80009a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a0:	79fb      	ldrb	r3, [r7, #7]

}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_InitTick+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d022      	beq.n	8001506 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_InitTick+0x6c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <HAL_InitTick+0x68>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f93a 	bl	800174e <HAL_SYSTICK_Config>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10f      	bne.n	8001500 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d809      	bhi.n	80014fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e6:	2200      	movs	r2, #0
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ee:	f000 f914 	bl	800171a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_InitTick+0x70>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e007      	b.n	800150a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e004      	b.n	800150a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e001      	b.n	800150a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000008 	.word	0x20000008
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_IncTick+0x1c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_IncTick+0x20>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	4a03      	ldr	r2, [pc, #12]	@ (800153c <HAL_IncTick+0x1c>)
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	2000036c 	.word	0x2000036c
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	2000036c 	.word	0x2000036c

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001574:	d004      	beq.n	8001580 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_Delay+0x40>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001580:	bf00      	nop
 8001582:	f7ff ffdf 	bl	8001544 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	429a      	cmp	r2, r3
 8001590:	d8f7      	bhi.n	8001582 <HAL_Delay+0x26>
  {
  }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000008 	.word	0x20000008

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	@ (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	@ (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	@ 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff47 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff5e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff90 	bl	8001658 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5f 	bl	8001604 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffb2 	bl	80016c0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001776:	e15a      	b.n	8001a2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	4013      	ands	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 814c 	beq.w	8001a28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d005      	beq.n	80017a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d130      	bne.n	800180a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017de:	2201      	movs	r2, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	f003 0201 	and.w	r2, r3, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b03      	cmp	r3, #3
 8001814:	d017      	beq.n	8001846 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d123      	bne.n	800189a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	08da      	lsrs	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	6939      	ldr	r1, [r7, #16]
 8001896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0203 	and.w	r2, r3, #3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80a6 	beq.w	8001a28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018dc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a4c <HAL_GPIO_Init+0x2e4>)
 80018de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e0:	4a5a      	ldr	r2, [pc, #360]	@ (8001a4c <HAL_GPIO_Init+0x2e4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80018e8:	4b58      	ldr	r3, [pc, #352]	@ (8001a4c <HAL_GPIO_Init+0x2e4>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f4:	4a56      	ldr	r2, [pc, #344]	@ (8001a50 <HAL_GPIO_Init+0x2e8>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800191e:	d01f      	beq.n	8001960 <HAL_GPIO_Init+0x1f8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a4c      	ldr	r2, [pc, #304]	@ (8001a54 <HAL_GPIO_Init+0x2ec>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d019      	beq.n	800195c <HAL_GPIO_Init+0x1f4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a4b      	ldr	r2, [pc, #300]	@ (8001a58 <HAL_GPIO_Init+0x2f0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d013      	beq.n	8001958 <HAL_GPIO_Init+0x1f0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a4a      	ldr	r2, [pc, #296]	@ (8001a5c <HAL_GPIO_Init+0x2f4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00d      	beq.n	8001954 <HAL_GPIO_Init+0x1ec>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a49      	ldr	r2, [pc, #292]	@ (8001a60 <HAL_GPIO_Init+0x2f8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d007      	beq.n	8001950 <HAL_GPIO_Init+0x1e8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a48      	ldr	r2, [pc, #288]	@ (8001a64 <HAL_GPIO_Init+0x2fc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_GPIO_Init+0x1e4>
 8001948:	2305      	movs	r3, #5
 800194a:	e00a      	b.n	8001962 <HAL_GPIO_Init+0x1fa>
 800194c:	2306      	movs	r3, #6
 800194e:	e008      	b.n	8001962 <HAL_GPIO_Init+0x1fa>
 8001950:	2304      	movs	r3, #4
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x1fa>
 8001954:	2303      	movs	r3, #3
 8001956:	e004      	b.n	8001962 <HAL_GPIO_Init+0x1fa>
 8001958:	2302      	movs	r3, #2
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x1fa>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_GPIO_Init+0x1fa>
 8001960:	2300      	movs	r3, #0
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001972:	4937      	ldr	r1, [pc, #220]	@ (8001a50 <HAL_GPIO_Init+0x2e8>)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <HAL_GPIO_Init+0x300>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a4:	4a30      	ldr	r2, [pc, #192]	@ (8001a68 <HAL_GPIO_Init+0x300>)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <HAL_GPIO_Init+0x300>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ce:	4a26      	ldr	r2, [pc, #152]	@ (8001a68 <HAL_GPIO_Init+0x300>)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <HAL_GPIO_Init+0x300>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a68 <HAL_GPIO_Init+0x300>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <HAL_GPIO_Init+0x300>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a22:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <HAL_GPIO_Init+0x300>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f47f ae9d 	bne.w	8001778 <HAL_GPIO_Init+0x10>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000
 8001a54:	48000400 	.word	0x48000400
 8001a58:	48000800 	.word	0x48000800
 8001a5c:	48000c00 	.word	0x48000c00
 8001a60:	48001000 	.word	0x48001000
 8001a64:	48001400 	.word	0x48001400
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e08d      	b.n	8001bca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fe14 	bl	80006f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2224      	movs	r2, #36	@ 0x24
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001aec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001afc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e006      	b.n	8001b24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d108      	bne.n	8001b3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	e007      	b.n	8001b4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69d9      	ldr	r1, [r3, #28]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	d138      	bne.n	8001c5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e032      	b.n	8001c5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2224      	movs	r2, #36	@ 0x24
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
  }
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	d139      	bne.n	8001cf2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e033      	b.n	8001cf4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	@ 0x24
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
  }
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d141      	bne.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d1a:	d131      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d1c:	4b47      	ldr	r3, [pc, #284]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d22:	4a46      	ldr	r2, [pc, #280]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2c:	4b43      	ldr	r3, [pc, #268]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d34:	4a41      	ldr	r2, [pc, #260]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d3c:	4b40      	ldr	r3, [pc, #256]	@ (8001e40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2232      	movs	r2, #50	@ 0x32
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4a3f      	ldr	r2, [pc, #252]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	0c9b      	lsrs	r3, r3, #18
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d52:	e002      	b.n	8001d5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d5a:	4b38      	ldr	r3, [pc, #224]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d66:	d102      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f2      	bne.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d6e:	4b33      	ldr	r3, [pc, #204]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d7a:	d158      	bne.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e057      	b.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d80:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d86:	4a2d      	ldr	r2, [pc, #180]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d90:	e04d      	b.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d98:	d141      	bne.n	8001e1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d9a:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da6:	d131      	bne.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001da8:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dae:	4a23      	ldr	r2, [pc, #140]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2232      	movs	r2, #50	@ 0x32
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	0c9b      	lsrs	r3, r3, #18
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dde:	e002      	b.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001df2:	d102      	bne.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f2      	bne.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e06:	d112      	bne.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e011      	b.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e1c:	e007      	b.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e26:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	20000000 	.word	0x20000000
 8001e44:	431bde83 	.word	0x431bde83

08001e48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e56:	6093      	str	r3, [r2, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40007000 	.word	0x40007000

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e2fe      	b.n	8002478 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d075      	beq.n	8001f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b97      	ldr	r3, [pc, #604]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4b94      	ldr	r3, [pc, #592]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	d102      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3e>
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d002      	beq.n	8001eac <HAL_RCC_OscConfig+0x44>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	4b8d      	ldr	r3, [pc, #564]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d05b      	beq.n	8001f70 <HAL_RCC_OscConfig+0x108>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d157      	bne.n	8001f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e2d9      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_OscConfig+0x74>
 8001ece:	4b85      	ldr	r3, [pc, #532]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a84      	ldr	r2, [pc, #528]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x98>
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7e      	ldr	r2, [pc, #504]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7b      	ldr	r2, [pc, #492]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001f00:	4b78      	ldr	r3, [pc, #480]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a77      	ldr	r2, [pc, #476]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b75      	ldr	r3, [pc, #468]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a74      	ldr	r2, [pc, #464]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff fb10 	bl	8001544 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff fb0c 	bl	8001544 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	@ 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e29e      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xc0>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff fafc 	bl	8001544 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff faf8 	bl	8001544 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	@ 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e28a      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f62:	4b60      	ldr	r3, [pc, #384]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0xe8>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d075      	beq.n	800206a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4b59      	ldr	r3, [pc, #356]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f88:	4b56      	ldr	r3, [pc, #344]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b0c      	cmp	r3, #12
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_OscConfig+0x136>
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x13c>
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d11f      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_OscConfig+0x154>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e25d      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b49      	ldr	r3, [pc, #292]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	4946      	ldr	r1, [pc, #280]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fd0:	4b45      	ldr	r3, [pc, #276]	@ (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fa69 	bl	80014ac <HAL_InitTick>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d043      	beq.n	8002068 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e249      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d023      	beq.n	8002034 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b3d      	ldr	r3, [pc, #244]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff faa4 	bl	8001544 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff faa0 	bl	8001544 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e232      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002012:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	061b      	lsls	r3, r3, #24
 800202c:	492d      	ldr	r1, [pc, #180]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
 8002032:	e01a      	b.n	800206a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002034:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2a      	ldr	r2, [pc, #168]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 800203a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fa80 	bl	8001544 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff fa7c 	bl	8001544 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e20e      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800205a:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1e0>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d041      	beq.n	80020fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8002080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002084:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff fa59 	bl	8001544 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff fa55 	bl	8001544 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1e7      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ef      	beq.n	8002096 <HAL_RCC_OscConfig+0x22e>
 80020b6:	e020      	b.n	80020fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020be:	4a09      	ldr	r2, [pc, #36]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fa3c 	bl	8001544 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ce:	e00d      	b.n	80020ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff fa38 	bl	8001544 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d906      	bls.n	80020ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1ca      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ea      	bne.n	80020d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80a6 	beq.w	8002254 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800210c:	4b84      	ldr	r3, [pc, #528]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x2b4>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x2b6>
 800211c:	2300      	movs	r3, #0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b7f      	ldr	r3, [pc, #508]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	4a7e      	ldr	r2, [pc, #504]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212c:	6593      	str	r3, [r2, #88]	@ 0x58
 800212e:	4b7c      	ldr	r3, [pc, #496]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213e:	4b79      	ldr	r3, [pc, #484]	@ (8002324 <HAL_RCC_OscConfig+0x4bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800214a:	4b76      	ldr	r3, [pc, #472]	@ (8002324 <HAL_RCC_OscConfig+0x4bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a75      	ldr	r2, [pc, #468]	@ (8002324 <HAL_RCC_OscConfig+0x4bc>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff f9f5 	bl	8001544 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff f9f1 	bl	8001544 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e183      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002170:	4b6c      	ldr	r3, [pc, #432]	@ (8002324 <HAL_RCC_OscConfig+0x4bc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d108      	bne.n	8002196 <HAL_RCC_OscConfig+0x32e>
 8002184:	4b66      	ldr	r3, [pc, #408]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a65      	ldr	r2, [pc, #404]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002194:	e024      	b.n	80021e0 <HAL_RCC_OscConfig+0x378>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d110      	bne.n	80021c0 <HAL_RCC_OscConfig+0x358>
 800219e:	4b60      	ldr	r3, [pc, #384]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021be:	e00f      	b.n	80021e0 <HAL_RCC_OscConfig+0x378>
 80021c0:	4b57      	ldr	r3, [pc, #348]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c6:	4a56      	ldr	r2, [pc, #344]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d0:	4b53      	ldr	r3, [pc, #332]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d6:	4a52      	ldr	r2, [pc, #328]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d016      	beq.n	8002216 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7ff f9ac 	bl	8001544 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7ff f9a8 	bl	8001544 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e138      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002206:	4b46      	ldr	r3, [pc, #280]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ed      	beq.n	80021f0 <HAL_RCC_OscConfig+0x388>
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7ff f995 	bl	8001544 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7ff f991 	bl	8001544 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e121      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002234:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ed      	bne.n	800221e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002242:	7ffb      	ldrb	r3, [r7, #31]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	4a34      	ldr	r2, [pc, #208]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002252:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d03c      	beq.n	80022da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01c      	beq.n	80022a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002268:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 800226a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800226e:	4a2c      	ldr	r2, [pc, #176]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7ff f964 	bl	8001544 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002280:	f7ff f960 	bl	8001544 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0f2      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002294:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0ef      	beq.n	8002280 <HAL_RCC_OscConfig+0x418>
 80022a0:	e01b      	b.n	80022da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7ff f947 	bl	8001544 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ba:	f7ff f943 	bl	8001544 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0d5      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022cc:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80022ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1ef      	bne.n	80022ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80c9 	beq.w	8002476 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	f000 8083 	beq.w	80023f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d15e      	bne.n	80023b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <HAL_RCC_OscConfig+0x4b8>)
 8002300:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7ff f91d 	bl	8001544 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	e00c      	b.n	8002328 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7ff f919 	bl	8001544 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d905      	bls.n	8002328 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0ab      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002328:	4b55      	ldr	r3, [pc, #340]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ec      	bne.n	800230e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002334:	4b52      	ldr	r3, [pc, #328]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	4b52      	ldr	r3, [pc, #328]	@ (8002484 <HAL_RCC_OscConfig+0x61c>)
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6a11      	ldr	r1, [r2, #32]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002344:	3a01      	subs	r2, #1
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	4311      	orrs	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800234e:	0212      	lsls	r2, r2, #8
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002356:	0852      	lsrs	r2, r2, #1
 8002358:	3a01      	subs	r2, #1
 800235a:	0552      	lsls	r2, r2, #21
 800235c:	4311      	orrs	r1, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002362:	0852      	lsrs	r2, r2, #1
 8002364:	3a01      	subs	r2, #1
 8002366:	0652      	lsls	r2, r2, #25
 8002368:	4311      	orrs	r1, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800236e:	06d2      	lsls	r2, r2, #27
 8002370:	430a      	orrs	r2, r1
 8002372:	4943      	ldr	r1, [pc, #268]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 8002374:	4313      	orrs	r3, r2
 8002376:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a40      	ldr	r2, [pc, #256]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002384:	4b3e      	ldr	r3, [pc, #248]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a3d      	ldr	r2, [pc, #244]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff f8d8 	bl	8001544 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff f8d4 	bl	8001544 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e066      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023aa:	4b35      	ldr	r3, [pc, #212]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x530>
 80023b6:	e05e      	b.n	8002476 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b8:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a30      	ldr	r2, [pc, #192]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 80023be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7ff f8be 	bl	8001544 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff f8ba 	bl	8001544 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e04c      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023de:	4b28      	ldr	r3, [pc, #160]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023ea:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	4924      	ldr	r1, [pc, #144]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 80023f0:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_RCC_OscConfig+0x620>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	60cb      	str	r3, [r1, #12]
 80023f6:	e03e      	b.n	8002476 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e039      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002404:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <HAL_RCC_OscConfig+0x618>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0203 	and.w	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d12c      	bne.n	8002472 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	3b01      	subs	r3, #1
 8002424:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d123      	bne.n	8002472 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d11b      	bne.n	8002472 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d113      	bne.n	8002472 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	3b01      	subs	r3, #1
 8002458:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d109      	bne.n	8002472 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002468:	085b      	lsrs	r3, r3, #1
 800246a:	3b01      	subs	r3, #1
 800246c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	019f800c 	.word	0x019f800c
 8002488:	feeefffc 	.word	0xfeeefffc

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e11e      	b.n	80026e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b91      	ldr	r3, [pc, #580]	@ (80026ec <HAL_RCC_ClockConfig+0x260>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b8e      	ldr	r3, [pc, #568]	@ (80026ec <HAL_RCC_ClockConfig+0x260>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	498c      	ldr	r1, [pc, #560]	@ (80026ec <HAL_RCC_ClockConfig+0x260>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b8a      	ldr	r3, [pc, #552]	@ (80026ec <HAL_RCC_ClockConfig+0x260>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e106      	b.n	80026e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d073      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d129      	bne.n	800253c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e8:	4b81      	ldr	r3, [pc, #516]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0f4      	b.n	80026e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024f8:	f000 f99e 	bl	8002838 <RCC_GetSysClockFreqFromPLLSource>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4a7c      	ldr	r2, [pc, #496]	@ (80026f4 <HAL_RCC_ClockConfig+0x268>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d93f      	bls.n	8002586 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002506:	4b7a      	ldr	r3, [pc, #488]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d033      	beq.n	8002586 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d12f      	bne.n	8002586 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002526:	4b72      	ldr	r3, [pc, #456]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800252e:	4a70      	ldr	r2, [pc, #448]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002534:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e024      	b.n	8002586 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d107      	bne.n	8002554 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002544:	4b6a      	ldr	r3, [pc, #424]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0c6      	b.n	80026e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002554:	4b66      	ldr	r3, [pc, #408]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0be      	b.n	80026e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002564:	f000 f8ce 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8002568:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4a61      	ldr	r2, [pc, #388]	@ (80026f4 <HAL_RCC_ClockConfig+0x268>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d909      	bls.n	8002586 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002572:	4b5f      	ldr	r3, [pc, #380]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800257a:	4a5d      	ldr	r2, [pc, #372]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 800257c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002580:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b5a      	ldr	r3, [pc, #360]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4957      	ldr	r1, [pc, #348]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002598:	f7fe ffd4 	bl	8001544 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe ffd0 	bl	8001544 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e095      	b.n	80026e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b4e      	ldr	r3, [pc, #312]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d023      	beq.n	800261c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a42      	ldr	r2, [pc, #264]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 80025e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025f8:	4b3d      	ldr	r3, [pc, #244]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002600:	4a3b      	ldr	r2, [pc, #236]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002602:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002606:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b39      	ldr	r3, [pc, #228]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4936      	ldr	r1, [pc, #216]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
 800261a:	e008      	b.n	800262e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b80      	cmp	r3, #128	@ 0x80
 8002620:	d105      	bne.n	800262e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002622:	4b33      	ldr	r3, [pc, #204]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4a32      	ldr	r2, [pc, #200]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002628:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800262c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262e:	4b2f      	ldr	r3, [pc, #188]	@ (80026ec <HAL_RCC_ClockConfig+0x260>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d21d      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263c:	4b2b      	ldr	r3, [pc, #172]	@ (80026ec <HAL_RCC_ClockConfig+0x260>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 020f 	bic.w	r2, r3, #15
 8002644:	4929      	ldr	r1, [pc, #164]	@ (80026ec <HAL_RCC_ClockConfig+0x260>)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800264c:	f7fe ff7a 	bl	8001544 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe ff76 	bl	8001544 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e03b      	b.n	80026e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_RCC_ClockConfig+0x260>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d1ed      	bne.n	8002654 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4917      	ldr	r1, [pc, #92]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a2:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490f      	ldr	r1, [pc, #60]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b6:	f000 f825 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <HAL_RCC_ClockConfig+0x264>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490c      	ldr	r1, [pc, #48]	@ (80026f8 <HAL_RCC_ClockConfig+0x26c>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <HAL_RCC_ClockConfig+0x270>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_RCC_ClockConfig+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fee6 	bl	80014ac <HAL_InitTick>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	04c4b400 	.word	0x04c4b400
 80026f8:	08004c74 	.word	0x08004c74
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800270a:	4b2c      	ldr	r3, [pc, #176]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d102      	bne.n	800271c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002716:	4b2a      	ldr	r3, [pc, #168]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	e047      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	d102      	bne.n	800272e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002728:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e03e      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800272e:	4b23      	ldr	r3, [pc, #140]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d136      	bne.n	80027a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273a:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3301      	adds	r3, #1
 8002750:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d10c      	bne.n	8002772 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002758:	4a1a      	ldr	r2, [pc, #104]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	4a16      	ldr	r2, [pc, #88]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002762:	68d2      	ldr	r2, [r2, #12]
 8002764:	0a12      	lsrs	r2, r2, #8
 8002766:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
      break;
 8002770:	e00c      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002772:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4a10      	ldr	r2, [pc, #64]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	0a12      	lsrs	r2, r2, #8
 8002780:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
      break;
 800278a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0e5b      	lsrs	r3, r3, #25
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	e001      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027ac:	693b      	ldr	r3, [r7, #16]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	00f42400 	.word	0x00f42400
 80027c4:	007a1200 	.word	0x007a1200

080027c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027e4:	f7ff fff0 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4904      	ldr	r1, [pc, #16]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08004c84 	.word	0x08004c84

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002810:	f7ff ffda 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0adb      	lsrs	r3, r3, #11
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4904      	ldr	r1, [pc, #16]	@ (8002834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08004c84 	.word	0x08004c84

08002838 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800283e:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3301      	adds	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d10c      	bne.n	8002876 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800285c:	4a17      	ldr	r2, [pc, #92]	@ (80028bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	4a14      	ldr	r2, [pc, #80]	@ (80028b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002866:	68d2      	ldr	r2, [r2, #12]
 8002868:	0a12      	lsrs	r2, r2, #8
 800286a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	617b      	str	r3, [r7, #20]
    break;
 8002874:	e00c      	b.n	8002890 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002876:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002880:	68d2      	ldr	r2, [r2, #12]
 8002882:	0a12      	lsrs	r2, r2, #8
 8002884:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
    break;
 800288e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002890:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0e5b      	lsrs	r3, r3, #25
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	3301      	adds	r3, #1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028aa:	687b      	ldr	r3, [r7, #4]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40021000 	.word	0x40021000
 80028bc:	007a1200 	.word	0x007a1200
 80028c0:	00f42400 	.word	0x00f42400

080028c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028cc:	2300      	movs	r3, #0
 80028ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d0:	2300      	movs	r3, #0
 80028d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8098 	beq.w	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e6:	4b43      	ldr	r3, [pc, #268]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	4b40      	ldr	r3, [pc, #256]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	4a3f      	ldr	r2, [pc, #252]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fe:	4b3d      	ldr	r3, [pc, #244]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2301      	movs	r3, #1
 800290c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800290e:	4b3a      	ldr	r3, [pc, #232]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a39      	ldr	r2, [pc, #228]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800291a:	f7fe fe13 	bl	8001544 <HAL_GetTick>
 800291e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002920:	e009      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe fe0f 	bl	8001544 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d902      	bls.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	74fb      	strb	r3, [r7, #19]
        break;
 8002934:	e005      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002936:	4b30      	ldr	r3, [pc, #192]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ef      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d159      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002948:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002952:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01e      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	d019      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002964:	4b23      	ldr	r3, [pc, #140]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002970:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002976:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002980:	4b1c      	ldr	r3, [pc, #112]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	4a1b      	ldr	r2, [pc, #108]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002990:	4a18      	ldr	r2, [pc, #96]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe fdcf 	bl	8001544 <HAL_GetTick>
 80029a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a8:	e00b      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fdcb 	bl	8001544 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d902      	bls.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	74fb      	strb	r3, [r7, #19]
            break;
 80029c0:	e006      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ec      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e4:	4903      	ldr	r1, [pc, #12]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029ec:	e008      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	74bb      	strb	r3, [r7, #18]
 80029f2:	e005      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a00:	7c7b      	ldrb	r3, [r7, #17]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	4ba7      	ldr	r3, [pc, #668]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0a:	4aa6      	ldr	r2, [pc, #664]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1e:	4ba1      	ldr	r3, [pc, #644]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a24:	f023 0203 	bic.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	499d      	ldr	r1, [pc, #628]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a40:	4b98      	ldr	r3, [pc, #608]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	f023 020c 	bic.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4995      	ldr	r1, [pc, #596]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a62:	4b90      	ldr	r3, [pc, #576]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	498c      	ldr	r1, [pc, #560]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a84:	4b87      	ldr	r3, [pc, #540]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	4984      	ldr	r1, [pc, #528]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	497b      	ldr	r1, [pc, #492]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac8:	4b76      	ldr	r3, [pc, #472]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4973      	ldr	r1, [pc, #460]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aea:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	496a      	ldr	r1, [pc, #424]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b0c:	4b65      	ldr	r3, [pc, #404]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4962      	ldr	r1, [pc, #392]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	4959      	ldr	r1, [pc, #356]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b50:	4b54      	ldr	r3, [pc, #336]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5e:	4951      	ldr	r1, [pc, #324]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	4948      	ldr	r1, [pc, #288]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b94:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	4940      	ldr	r1, [pc, #256]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bbe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d015      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bda:	4932      	ldr	r1, [pc, #200]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c04:	4b27      	ldr	r3, [pc, #156]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	4924      	ldr	r1, [pc, #144]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c22:	d105      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d015      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4a:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a10      	ldr	r2, [pc, #64]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4908      	ldr	r1, [pc, #32]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c92:	d109      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c94:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a02      	ldr	r2, [pc, #8]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c9e:	60d3      	str	r3, [r2, #12]
 8002ca0:	e002      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d015      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cb4:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	4926      	ldr	r1, [pc, #152]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cd4:	4b21      	ldr	r3, [pc, #132]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a20      	ldr	r2, [pc, #128]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d015      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cfa:	4918      	ldr	r1, [pc, #96]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d0c:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a12      	ldr	r2, [pc, #72]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d24:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	490a      	ldr	r1, [pc, #40]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d42:	d105      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d50:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d001      	beq.n	8002d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e054      	b.n	8002e22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a26      	ldr	r2, [pc, #152]	@ (8002e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d022      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x80>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002da2:	d01d      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x80>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a22      	ldr	r2, [pc, #136]	@ (8002e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x80>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a21      	ldr	r2, [pc, #132]	@ (8002e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x80>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x80>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <HAL_TIM_Base_Start_IT+0xe0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x80>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e44 <HAL_TIM_Base_Start_IT+0xe4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x80>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1b      	ldr	r2, [pc, #108]	@ (8002e48 <HAL_TIM_Base_Start_IT+0xe8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d115      	bne.n	8002e0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b19      	ldr	r3, [pc, #100]	@ (8002e4c <HAL_TIM_Base_Start_IT+0xec>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d015      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0xbe>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df8:	d011      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	e008      	b.n	8002e1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e000      	b.n	8002e20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40000c00 	.word	0x40000c00
 8002e40:	40013400 	.word	0x40013400
 8002e44:	40014000 	.word	0x40014000
 8002e48:	40015000 	.word	0x40015000
 8002e4c:	00010007 	.word	0x00010007

08002e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e049      	b.n	8002ef6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe f8fc 	bl	8001074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f000 fbb0 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_TIM_PWM_Start+0x24>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e03c      	b.n	8002f9e <HAL_TIM_PWM_Start+0x9e>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d109      	bne.n	8002f3e <HAL_TIM_PWM_Start+0x3e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	e02f      	b.n	8002f9e <HAL_TIM_PWM_Start+0x9e>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d109      	bne.n	8002f58 <HAL_TIM_PWM_Start+0x58>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e022      	b.n	8002f9e <HAL_TIM_PWM_Start+0x9e>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d109      	bne.n	8002f72 <HAL_TIM_PWM_Start+0x72>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e015      	b.n	8002f9e <HAL_TIM_PWM_Start+0x9e>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d109      	bne.n	8002f8c <HAL_TIM_PWM_Start+0x8c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e008      	b.n	8002f9e <HAL_TIM_PWM_Start+0x9e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0a6      	b.n	80030f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Start+0xb6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fb4:	e023      	b.n	8002ffe <HAL_TIM_PWM_Start+0xfe>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0xc6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc4:	e01b      	b.n	8002ffe <HAL_TIM_PWM_Start+0xfe>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d104      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0xd6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd4:	e013      	b.n	8002ffe <HAL_TIM_PWM_Start+0xfe>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	d104      	bne.n	8002fe6 <HAL_TIM_PWM_Start+0xe6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fe4:	e00b      	b.n	8002ffe <HAL_TIM_PWM_Start+0xfe>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0xf6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ff4:	e003      	b.n	8002ffe <HAL_TIM_PWM_Start+0xfe>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2201      	movs	r2, #1
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fed2 	bl	8003db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3a      	ldr	r2, [pc, #232]	@ (80030fc <HAL_TIM_PWM_Start+0x1fc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d018      	beq.n	8003048 <HAL_TIM_PWM_Start+0x148>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a39      	ldr	r2, [pc, #228]	@ (8003100 <HAL_TIM_PWM_Start+0x200>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <HAL_TIM_PWM_Start+0x148>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a37      	ldr	r2, [pc, #220]	@ (8003104 <HAL_TIM_PWM_Start+0x204>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00e      	beq.n	8003048 <HAL_TIM_PWM_Start+0x148>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a36      	ldr	r2, [pc, #216]	@ (8003108 <HAL_TIM_PWM_Start+0x208>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_TIM_PWM_Start+0x148>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a34      	ldr	r2, [pc, #208]	@ (800310c <HAL_TIM_PWM_Start+0x20c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_TIM_PWM_Start+0x148>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a33      	ldr	r2, [pc, #204]	@ (8003110 <HAL_TIM_PWM_Start+0x210>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_TIM_PWM_Start+0x14c>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_TIM_PWM_Start+0x14e>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a25      	ldr	r2, [pc, #148]	@ (80030fc <HAL_TIM_PWM_Start+0x1fc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x1b2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003074:	d01d      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x1b2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a26      	ldr	r2, [pc, #152]	@ (8003114 <HAL_TIM_PWM_Start+0x214>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x1b2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a24      	ldr	r2, [pc, #144]	@ (8003118 <HAL_TIM_PWM_Start+0x218>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x1b2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a23      	ldr	r2, [pc, #140]	@ (800311c <HAL_TIM_PWM_Start+0x21c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x1b2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a19      	ldr	r2, [pc, #100]	@ (8003100 <HAL_TIM_PWM_Start+0x200>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x1b2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a18      	ldr	r2, [pc, #96]	@ (8003104 <HAL_TIM_PWM_Start+0x204>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x1b2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <HAL_TIM_PWM_Start+0x210>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d115      	bne.n	80030de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <HAL_TIM_PWM_Start+0x220>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b06      	cmp	r3, #6
 80030c2:	d015      	beq.n	80030f0 <HAL_TIM_PWM_Start+0x1f0>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ca:	d011      	beq.n	80030f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030dc:	e008      	b.n	80030f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e000      	b.n	80030f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40013400 	.word	0x40013400
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	40015000 	.word	0x40015000
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00
 8003120:	00010007 	.word	0x00010007

08003124 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e097      	b.n	8003268 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7fd feb9 	bl	8000ec4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003168:	f023 0307 	bic.w	r3, r3, #7
 800316c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f000 fa3b 	bl	80035f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	4313      	orrs	r3, r2
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80031c4:	f023 030c 	bic.w	r3, r3, #12
 80031c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	4313      	orrs	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	011a      	lsls	r2, r3, #4
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	031b      	lsls	r3, r3, #12
 80031f4:	4313      	orrs	r3, r2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800320a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	4313      	orrs	r3, r2
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003280:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003288:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003290:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003298:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d110      	bne.n	80032c2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d102      	bne.n	80032ac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032a6:	7b7b      	ldrb	r3, [r7, #13]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d001      	beq.n	80032b0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e089      	b.n	80033c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032c0:	e031      	b.n	8003326 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d110      	bne.n	80032ea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c8:	7bbb      	ldrb	r3, [r7, #14]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032ce:	7b3b      	ldrb	r3, [r7, #12]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d001      	beq.n	80032d8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e075      	b.n	80033c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032e8:	e01d      	b.n	8003326 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d108      	bne.n	8003302 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032fc:	7b3b      	ldrb	r3, [r7, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e05e      	b.n	80033c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_TIM_Encoder_Start_IT+0xc4>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d010      	beq.n	8003354 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003332:	e01f      	b.n	8003374 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fd37 	bl	8003db0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0202 	orr.w	r2, r2, #2
 8003350:	60da      	str	r2, [r3, #12]
      break;
 8003352:	e02e      	b.n	80033b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	2104      	movs	r1, #4
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fd27 	bl	8003db0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0204 	orr.w	r2, r2, #4
 8003370:	60da      	str	r2, [r3, #12]
      break;
 8003372:	e01e      	b.n	80033b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2201      	movs	r2, #1
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fd17 	bl	8003db0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2201      	movs	r2, #1
 8003388:	2104      	movs	r1, #4
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fd10 	bl	8003db0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0202 	orr.w	r2, r2, #2
 800339e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0204 	orr.w	r2, r2, #4
 80033ae:	60da      	str	r2, [r3, #12]
      break;
 80033b0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0ff      	b.n	80035ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b14      	cmp	r3, #20
 80033f6:	f200 80f0 	bhi.w	80035da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003455 	.word	0x08003455
 8003404:	080035db 	.word	0x080035db
 8003408:	080035db 	.word	0x080035db
 800340c:	080035db 	.word	0x080035db
 8003410:	08003495 	.word	0x08003495
 8003414:	080035db 	.word	0x080035db
 8003418:	080035db 	.word	0x080035db
 800341c:	080035db 	.word	0x080035db
 8003420:	080034d7 	.word	0x080034d7
 8003424:	080035db 	.word	0x080035db
 8003428:	080035db 	.word	0x080035db
 800342c:	080035db 	.word	0x080035db
 8003430:	08003517 	.word	0x08003517
 8003434:	080035db 	.word	0x080035db
 8003438:	080035db 	.word	0x080035db
 800343c:	080035db 	.word	0x080035db
 8003440:	08003559 	.word	0x08003559
 8003444:	080035db 	.word	0x080035db
 8003448:	080035db 	.word	0x080035db
 800344c:	080035db 	.word	0x080035db
 8003450:	08003599 	.word	0x08003599
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f97e 	bl	800375c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0208 	orr.w	r2, r2, #8
 800346e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6999      	ldr	r1, [r3, #24]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	619a      	str	r2, [r3, #24]
      break;
 8003492:	e0a5      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f9f8 	bl	8003890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6999      	ldr	r1, [r3, #24]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	021a      	lsls	r2, r3, #8
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	619a      	str	r2, [r3, #24]
      break;
 80034d4:	e084      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fa6b 	bl	80039b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0208 	orr.w	r2, r2, #8
 80034f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0204 	bic.w	r2, r2, #4
 8003500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	61da      	str	r2, [r3, #28]
      break;
 8003514:	e064      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fadd 	bl	8003adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69d9      	ldr	r1, [r3, #28]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	021a      	lsls	r2, r3, #8
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	61da      	str	r2, [r3, #28]
      break;
 8003556:	e043      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fb50 	bl	8003c04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0208 	orr.w	r2, r2, #8
 8003572:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0204 	bic.w	r2, r2, #4
 8003582:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003596:	e023      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fb9a 	bl	8003cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80035d8:	e002      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
      break;
 80035de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a4c      	ldr	r2, [pc, #304]	@ (8003738 <TIM_Base_SetConfig+0x144>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d017      	beq.n	800363c <TIM_Base_SetConfig+0x48>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003612:	d013      	beq.n	800363c <TIM_Base_SetConfig+0x48>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a49      	ldr	r2, [pc, #292]	@ (800373c <TIM_Base_SetConfig+0x148>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00f      	beq.n	800363c <TIM_Base_SetConfig+0x48>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a48      	ldr	r2, [pc, #288]	@ (8003740 <TIM_Base_SetConfig+0x14c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <TIM_Base_SetConfig+0x48>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a47      	ldr	r2, [pc, #284]	@ (8003744 <TIM_Base_SetConfig+0x150>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <TIM_Base_SetConfig+0x48>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a46      	ldr	r2, [pc, #280]	@ (8003748 <TIM_Base_SetConfig+0x154>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_Base_SetConfig+0x48>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a45      	ldr	r2, [pc, #276]	@ (800374c <TIM_Base_SetConfig+0x158>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d108      	bne.n	800364e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a39      	ldr	r2, [pc, #228]	@ (8003738 <TIM_Base_SetConfig+0x144>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d023      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d01f      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a36      	ldr	r2, [pc, #216]	@ (800373c <TIM_Base_SetConfig+0x148>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01b      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a35      	ldr	r2, [pc, #212]	@ (8003740 <TIM_Base_SetConfig+0x14c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d017      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <TIM_Base_SetConfig+0x150>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a33      	ldr	r2, [pc, #204]	@ (8003748 <TIM_Base_SetConfig+0x154>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a33      	ldr	r2, [pc, #204]	@ (8003750 <TIM_Base_SetConfig+0x15c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00b      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <TIM_Base_SetConfig+0x160>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a31      	ldr	r2, [pc, #196]	@ (8003758 <TIM_Base_SetConfig+0x164>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <TIM_Base_SetConfig+0xaa>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2c      	ldr	r2, [pc, #176]	@ (800374c <TIM_Base_SetConfig+0x158>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a18      	ldr	r2, [pc, #96]	@ (8003738 <TIM_Base_SetConfig+0x144>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <TIM_Base_SetConfig+0x110>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a1a      	ldr	r2, [pc, #104]	@ (8003748 <TIM_Base_SetConfig+0x154>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00f      	beq.n	8003704 <TIM_Base_SetConfig+0x110>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003750 <TIM_Base_SetConfig+0x15c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00b      	beq.n	8003704 <TIM_Base_SetConfig+0x110>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <TIM_Base_SetConfig+0x160>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_Base_SetConfig+0x110>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a18      	ldr	r2, [pc, #96]	@ (8003758 <TIM_Base_SetConfig+0x164>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0x110>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a13      	ldr	r2, [pc, #76]	@ (800374c <TIM_Base_SetConfig+0x158>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f023 0201 	bic.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	611a      	str	r2, [r3, #16]
  }
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800
 8003744:	40000c00 	.word	0x40000c00
 8003748:	40013400 	.word	0x40013400
 800374c:	40015000 	.word	0x40015000
 8003750:	40014000 	.word	0x40014000
 8003754:	40014400 	.word	0x40014400
 8003758:	40014800 	.word	0x40014800

0800375c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f023 0201 	bic.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f023 0302 	bic.w	r3, r3, #2
 80037a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a30      	ldr	r2, [pc, #192]	@ (8003878 <TIM_OC1_SetConfig+0x11c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <TIM_OC1_SetConfig+0x88>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a2f      	ldr	r2, [pc, #188]	@ (800387c <TIM_OC1_SetConfig+0x120>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00f      	beq.n	80037e4 <TIM_OC1_SetConfig+0x88>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003880 <TIM_OC1_SetConfig+0x124>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <TIM_OC1_SetConfig+0x88>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003884 <TIM_OC1_SetConfig+0x128>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <TIM_OC1_SetConfig+0x88>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003888 <TIM_OC1_SetConfig+0x12c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC1_SetConfig+0x88>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a2b      	ldr	r2, [pc, #172]	@ (800388c <TIM_OC1_SetConfig+0x130>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d10c      	bne.n	80037fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f023 0308 	bic.w	r3, r3, #8
 80037ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 0304 	bic.w	r3, r3, #4
 80037fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1d      	ldr	r2, [pc, #116]	@ (8003878 <TIM_OC1_SetConfig+0x11c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <TIM_OC1_SetConfig+0xd2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <TIM_OC1_SetConfig+0x120>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00f      	beq.n	800382e <TIM_OC1_SetConfig+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <TIM_OC1_SetConfig+0x124>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00b      	beq.n	800382e <TIM_OC1_SetConfig+0xd2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a1a      	ldr	r2, [pc, #104]	@ (8003884 <TIM_OC1_SetConfig+0x128>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <TIM_OC1_SetConfig+0xd2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a19      	ldr	r2, [pc, #100]	@ (8003888 <TIM_OC1_SetConfig+0x12c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_OC1_SetConfig+0xd2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a18      	ldr	r2, [pc, #96]	@ (800388c <TIM_OC1_SetConfig+0x130>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d111      	bne.n	8003852 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800383c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40013400 	.word	0x40013400
 8003880:	40014000 	.word	0x40014000
 8003884:	40014400 	.word	0x40014400
 8003888:	40014800 	.word	0x40014800
 800388c:	40015000 	.word	0x40015000

08003890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 0210 	bic.w	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0320 	bic.w	r3, r3, #32
 80038de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a2c      	ldr	r2, [pc, #176]	@ (80039a0 <TIM_OC2_SetConfig+0x110>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <TIM_OC2_SetConfig+0x74>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a2b      	ldr	r2, [pc, #172]	@ (80039a4 <TIM_OC2_SetConfig+0x114>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_OC2_SetConfig+0x74>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a2a      	ldr	r2, [pc, #168]	@ (80039a8 <TIM_OC2_SetConfig+0x118>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d10d      	bne.n	8003920 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800390a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800391e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a1f      	ldr	r2, [pc, #124]	@ (80039a0 <TIM_OC2_SetConfig+0x110>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <TIM_OC2_SetConfig+0xc0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1e      	ldr	r2, [pc, #120]	@ (80039a4 <TIM_OC2_SetConfig+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00f      	beq.n	8003950 <TIM_OC2_SetConfig+0xc0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a1e      	ldr	r2, [pc, #120]	@ (80039ac <TIM_OC2_SetConfig+0x11c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_OC2_SetConfig+0xc0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <TIM_OC2_SetConfig+0x120>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_OC2_SetConfig+0xc0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1c      	ldr	r2, [pc, #112]	@ (80039b4 <TIM_OC2_SetConfig+0x124>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_OC2_SetConfig+0xc0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <TIM_OC2_SetConfig+0x118>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d113      	bne.n	8003978 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800395e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40013400 	.word	0x40013400
 80039a8:	40015000 	.word	0x40015000
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800

080039b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <TIM_OC3_SetConfig+0x10c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <TIM_OC3_SetConfig+0x72>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac8 <TIM_OC3_SetConfig+0x110>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_OC3_SetConfig+0x72>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a29      	ldr	r2, [pc, #164]	@ (8003acc <TIM_OC3_SetConfig+0x114>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac4 <TIM_OC3_SetConfig+0x10c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <TIM_OC3_SetConfig+0xbe>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <TIM_OC3_SetConfig+0x110>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00f      	beq.n	8003a76 <TIM_OC3_SetConfig+0xbe>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <TIM_OC3_SetConfig+0x118>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00b      	beq.n	8003a76 <TIM_OC3_SetConfig+0xbe>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad4 <TIM_OC3_SetConfig+0x11c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <TIM_OC3_SetConfig+0xbe>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad8 <TIM_OC3_SetConfig+0x120>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_OC3_SetConfig+0xbe>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a16      	ldr	r2, [pc, #88]	@ (8003acc <TIM_OC3_SetConfig+0x114>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d113      	bne.n	8003a9e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	621a      	str	r2, [r3, #32]
}
 8003ab8:	bf00      	nop
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40013400 	.word	0x40013400
 8003acc:	40015000 	.word	0x40015000
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800

08003adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	031b      	lsls	r3, r3, #12
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <TIM_OC4_SetConfig+0x110>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_OC4_SetConfig+0x74>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <TIM_OC4_SetConfig+0x114>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_OC4_SetConfig+0x74>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf4 <TIM_OC4_SetConfig+0x118>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10d      	bne.n	8003b6c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	031b      	lsls	r3, r3, #12
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bec <TIM_OC4_SetConfig+0x110>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <TIM_OC4_SetConfig+0xc0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf0 <TIM_OC4_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00f      	beq.n	8003b9c <TIM_OC4_SetConfig+0xc0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf8 <TIM_OC4_SetConfig+0x11c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_OC4_SetConfig+0xc0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <TIM_OC4_SetConfig+0x120>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_OC4_SetConfig+0xc0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <TIM_OC4_SetConfig+0x124>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC4_SetConfig+0xc0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a17      	ldr	r2, [pc, #92]	@ (8003bf4 <TIM_OC4_SetConfig+0x118>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d113      	bne.n	8003bc4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ba2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003baa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	019b      	lsls	r3, r3, #6
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40013400 	.word	0x40013400
 8003bf4:	40015000 	.word	0x40015000
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800

08003c04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a19      	ldr	r2, [pc, #100]	@ (8003cc0 <TIM_OC5_SetConfig+0xbc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <TIM_OC5_SetConfig+0x82>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <TIM_OC5_SetConfig+0xc0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <TIM_OC5_SetConfig+0x82>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <TIM_OC5_SetConfig+0xc4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_OC5_SetConfig+0x82>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <TIM_OC5_SetConfig+0xc8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_OC5_SetConfig+0x82>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a15      	ldr	r2, [pc, #84]	@ (8003cd0 <TIM_OC5_SetConfig+0xcc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_OC5_SetConfig+0x82>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a14      	ldr	r2, [pc, #80]	@ (8003cd4 <TIM_OC5_SetConfig+0xd0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d109      	bne.n	8003c9a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40013400 	.word	0x40013400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	40015000 	.word	0x40015000

08003cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	051b      	lsls	r3, r3, #20
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d98 <TIM_OC6_SetConfig+0xc0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <TIM_OC6_SetConfig+0x84>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a19      	ldr	r2, [pc, #100]	@ (8003d9c <TIM_OC6_SetConfig+0xc4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00f      	beq.n	8003d5c <TIM_OC6_SetConfig+0x84>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <TIM_OC6_SetConfig+0xc8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <TIM_OC6_SetConfig+0x84>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a17      	ldr	r2, [pc, #92]	@ (8003da4 <TIM_OC6_SetConfig+0xcc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <TIM_OC6_SetConfig+0x84>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a16      	ldr	r2, [pc, #88]	@ (8003da8 <TIM_OC6_SetConfig+0xd0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_OC6_SetConfig+0x84>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a15      	ldr	r2, [pc, #84]	@ (8003dac <TIM_OC6_SetConfig+0xd4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d109      	bne.n	8003d70 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	029b      	lsls	r3, r3, #10
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40013400 	.word	0x40013400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40014400 	.word	0x40014400
 8003da8:	40014800 	.word	0x40014800
 8003dac:	40015000 	.word	0x40015000

08003db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1a      	ldr	r2, [r3, #32]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e074      	b.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a34      	ldr	r2, [pc, #208]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a33      	ldr	r2, [pc, #204]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a31      	ldr	r2, [pc, #196]	@ (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d108      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a21      	ldr	r2, [pc, #132]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e94:	d01d      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a15      	ldr	r2, [pc, #84]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10c      	bne.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	40015000 	.word	0x40015000
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40014000 	.word	0x40014000

08003f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e042      	b.n	8003fc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fd f9d3 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2224      	movs	r2, #36	@ 0x24
 8003f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fb24 	bl	80045c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f825 	bl	8003fc8 <UART_SetConfig>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e01b      	b.n	8003fc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fba3 	bl	8004704 <UART_CheckIdleState>
 8003fbe:	4603      	mov	r3, r0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b08c      	sub	sp, #48	@ 0x30
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4baa      	ldr	r3, [pc, #680]	@ (80042a0 <UART_SetConfig+0x2d8>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004000:	430b      	orrs	r3, r1
 8004002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a9f      	ldr	r2, [pc, #636]	@ (80042a4 <UART_SetConfig+0x2dc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004030:	4313      	orrs	r3, r2
 8004032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800403e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004048:	430b      	orrs	r3, r1
 800404a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	f023 010f 	bic.w	r1, r3, #15
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a90      	ldr	r2, [pc, #576]	@ (80042a8 <UART_SetConfig+0x2e0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d125      	bne.n	80040b8 <UART_SetConfig+0xf0>
 800406c:	4b8f      	ldr	r3, [pc, #572]	@ (80042ac <UART_SetConfig+0x2e4>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b03      	cmp	r3, #3
 8004078:	d81a      	bhi.n	80040b0 <UART_SetConfig+0xe8>
 800407a:	a201      	add	r2, pc, #4	@ (adr r2, 8004080 <UART_SetConfig+0xb8>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	08004091 	.word	0x08004091
 8004084:	080040a1 	.word	0x080040a1
 8004088:	08004099 	.word	0x08004099
 800408c:	080040a9 	.word	0x080040a9
 8004090:	2301      	movs	r3, #1
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004096:	e116      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004098:	2302      	movs	r3, #2
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800409e:	e112      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80040a0:	2304      	movs	r3, #4
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a6:	e10e      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80040a8:	2308      	movs	r3, #8
 80040aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ae:	e10a      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80040b0:	2310      	movs	r3, #16
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b6:	e106      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a7c      	ldr	r2, [pc, #496]	@ (80042b0 <UART_SetConfig+0x2e8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d138      	bne.n	8004134 <UART_SetConfig+0x16c>
 80040c2:	4b7a      	ldr	r3, [pc, #488]	@ (80042ac <UART_SetConfig+0x2e4>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	2b0c      	cmp	r3, #12
 80040ce:	d82d      	bhi.n	800412c <UART_SetConfig+0x164>
 80040d0:	a201      	add	r2, pc, #4	@ (adr r2, 80040d8 <UART_SetConfig+0x110>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	0800412d 	.word	0x0800412d
 80040e0:	0800412d 	.word	0x0800412d
 80040e4:	0800412d 	.word	0x0800412d
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	0800412d 	.word	0x0800412d
 80040f0:	0800412d 	.word	0x0800412d
 80040f4:	0800412d 	.word	0x0800412d
 80040f8:	08004115 	.word	0x08004115
 80040fc:	0800412d 	.word	0x0800412d
 8004100:	0800412d 	.word	0x0800412d
 8004104:	0800412d 	.word	0x0800412d
 8004108:	08004125 	.word	0x08004125
 800410c:	2300      	movs	r3, #0
 800410e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004112:	e0d8      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004114:	2302      	movs	r3, #2
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411a:	e0d4      	b.n	80042c6 <UART_SetConfig+0x2fe>
 800411c:	2304      	movs	r3, #4
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004122:	e0d0      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004124:	2308      	movs	r3, #8
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800412a:	e0cc      	b.n	80042c6 <UART_SetConfig+0x2fe>
 800412c:	2310      	movs	r3, #16
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004132:	e0c8      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a5e      	ldr	r2, [pc, #376]	@ (80042b4 <UART_SetConfig+0x2ec>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d125      	bne.n	800418a <UART_SetConfig+0x1c2>
 800413e:	4b5b      	ldr	r3, [pc, #364]	@ (80042ac <UART_SetConfig+0x2e4>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004144:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004148:	2b30      	cmp	r3, #48	@ 0x30
 800414a:	d016      	beq.n	800417a <UART_SetConfig+0x1b2>
 800414c:	2b30      	cmp	r3, #48	@ 0x30
 800414e:	d818      	bhi.n	8004182 <UART_SetConfig+0x1ba>
 8004150:	2b20      	cmp	r3, #32
 8004152:	d00a      	beq.n	800416a <UART_SetConfig+0x1a2>
 8004154:	2b20      	cmp	r3, #32
 8004156:	d814      	bhi.n	8004182 <UART_SetConfig+0x1ba>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <UART_SetConfig+0x19a>
 800415c:	2b10      	cmp	r3, #16
 800415e:	d008      	beq.n	8004172 <UART_SetConfig+0x1aa>
 8004160:	e00f      	b.n	8004182 <UART_SetConfig+0x1ba>
 8004162:	2300      	movs	r3, #0
 8004164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004168:	e0ad      	b.n	80042c6 <UART_SetConfig+0x2fe>
 800416a:	2302      	movs	r3, #2
 800416c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004170:	e0a9      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004172:	2304      	movs	r3, #4
 8004174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004178:	e0a5      	b.n	80042c6 <UART_SetConfig+0x2fe>
 800417a:	2308      	movs	r3, #8
 800417c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004180:	e0a1      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004182:	2310      	movs	r3, #16
 8004184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004188:	e09d      	b.n	80042c6 <UART_SetConfig+0x2fe>
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a4a      	ldr	r2, [pc, #296]	@ (80042b8 <UART_SetConfig+0x2f0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d125      	bne.n	80041e0 <UART_SetConfig+0x218>
 8004194:	4b45      	ldr	r3, [pc, #276]	@ (80042ac <UART_SetConfig+0x2e4>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800419e:	2bc0      	cmp	r3, #192	@ 0xc0
 80041a0:	d016      	beq.n	80041d0 <UART_SetConfig+0x208>
 80041a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80041a4:	d818      	bhi.n	80041d8 <UART_SetConfig+0x210>
 80041a6:	2b80      	cmp	r3, #128	@ 0x80
 80041a8:	d00a      	beq.n	80041c0 <UART_SetConfig+0x1f8>
 80041aa:	2b80      	cmp	r3, #128	@ 0x80
 80041ac:	d814      	bhi.n	80041d8 <UART_SetConfig+0x210>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <UART_SetConfig+0x1f0>
 80041b2:	2b40      	cmp	r3, #64	@ 0x40
 80041b4:	d008      	beq.n	80041c8 <UART_SetConfig+0x200>
 80041b6:	e00f      	b.n	80041d8 <UART_SetConfig+0x210>
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041be:	e082      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80041c0:	2302      	movs	r3, #2
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c6:	e07e      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80041c8:	2304      	movs	r3, #4
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ce:	e07a      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80041d0:	2308      	movs	r3, #8
 80041d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d6:	e076      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041de:	e072      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a35      	ldr	r2, [pc, #212]	@ (80042bc <UART_SetConfig+0x2f4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d12a      	bne.n	8004240 <UART_SetConfig+0x278>
 80041ea:	4b30      	ldr	r3, [pc, #192]	@ (80042ac <UART_SetConfig+0x2e4>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041f8:	d01a      	beq.n	8004230 <UART_SetConfig+0x268>
 80041fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041fe:	d81b      	bhi.n	8004238 <UART_SetConfig+0x270>
 8004200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004204:	d00c      	beq.n	8004220 <UART_SetConfig+0x258>
 8004206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420a:	d815      	bhi.n	8004238 <UART_SetConfig+0x270>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <UART_SetConfig+0x250>
 8004210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004214:	d008      	beq.n	8004228 <UART_SetConfig+0x260>
 8004216:	e00f      	b.n	8004238 <UART_SetConfig+0x270>
 8004218:	2300      	movs	r3, #0
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800421e:	e052      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004220:	2302      	movs	r3, #2
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004226:	e04e      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004228:	2304      	movs	r3, #4
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422e:	e04a      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004230:	2308      	movs	r3, #8
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004236:	e046      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004238:	2310      	movs	r3, #16
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423e:	e042      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a17      	ldr	r2, [pc, #92]	@ (80042a4 <UART_SetConfig+0x2dc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d13a      	bne.n	80042c0 <UART_SetConfig+0x2f8>
 800424a:	4b18      	ldr	r3, [pc, #96]	@ (80042ac <UART_SetConfig+0x2e4>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004254:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004258:	d01a      	beq.n	8004290 <UART_SetConfig+0x2c8>
 800425a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800425e:	d81b      	bhi.n	8004298 <UART_SetConfig+0x2d0>
 8004260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004264:	d00c      	beq.n	8004280 <UART_SetConfig+0x2b8>
 8004266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800426a:	d815      	bhi.n	8004298 <UART_SetConfig+0x2d0>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <UART_SetConfig+0x2b0>
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004274:	d008      	beq.n	8004288 <UART_SetConfig+0x2c0>
 8004276:	e00f      	b.n	8004298 <UART_SetConfig+0x2d0>
 8004278:	2300      	movs	r3, #0
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800427e:	e022      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004280:	2302      	movs	r3, #2
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004286:	e01e      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004288:	2304      	movs	r3, #4
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428e:	e01a      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004290:	2308      	movs	r3, #8
 8004292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004296:	e016      	b.n	80042c6 <UART_SetConfig+0x2fe>
 8004298:	2310      	movs	r3, #16
 800429a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800429e:	e012      	b.n	80042c6 <UART_SetConfig+0x2fe>
 80042a0:	cfff69f3 	.word	0xcfff69f3
 80042a4:	40008000 	.word	0x40008000
 80042a8:	40013800 	.word	0x40013800
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40004400 	.word	0x40004400
 80042b4:	40004800 	.word	0x40004800
 80042b8:	40004c00 	.word	0x40004c00
 80042bc:	40005000 	.word	0x40005000
 80042c0:	2310      	movs	r3, #16
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4aae      	ldr	r2, [pc, #696]	@ (8004584 <UART_SetConfig+0x5bc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	f040 8097 	bne.w	8004400 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d823      	bhi.n	8004322 <UART_SetConfig+0x35a>
 80042da:	a201      	add	r2, pc, #4	@ (adr r2, 80042e0 <UART_SetConfig+0x318>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004305 	.word	0x08004305
 80042e4:	08004323 	.word	0x08004323
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004323 	.word	0x08004323
 80042f0:	08004313 	.word	0x08004313
 80042f4:	08004323 	.word	0x08004323
 80042f8:	08004323 	.word	0x08004323
 80042fc:	08004323 	.word	0x08004323
 8004300:	0800431b 	.word	0x0800431b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe fa6c 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8004308:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800430a:	e010      	b.n	800432e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800430c:	4b9e      	ldr	r3, [pc, #632]	@ (8004588 <UART_SetConfig+0x5c0>)
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004310:	e00d      	b.n	800432e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004312:	f7fe f9f7 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8004316:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004318:	e009      	b.n	800432e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004320:	e005      	b.n	800432e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800432c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8130 	beq.w	8004596 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	4a94      	ldr	r2, [pc, #592]	@ (800458c <UART_SetConfig+0x5c4>)
 800433c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004340:	461a      	mov	r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	fbb3 f3f2 	udiv	r3, r3, r2
 8004348:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4413      	add	r3, r2
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	429a      	cmp	r2, r3
 8004358:	d305      	bcc.n	8004366 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	429a      	cmp	r2, r3
 8004364:	d903      	bls.n	800436e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800436c:	e113      	b.n	8004596 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	2200      	movs	r2, #0
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	60fa      	str	r2, [r7, #12]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	4a84      	ldr	r2, [pc, #528]	@ (800458c <UART_SetConfig+0x5c4>)
 800437c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004380:	b29b      	uxth	r3, r3
 8004382:	2200      	movs	r2, #0
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004390:	f7fb ff42 	bl	8000218 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	020b      	lsls	r3, r1, #8
 80043a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043aa:	0202      	lsls	r2, r0, #8
 80043ac:	6979      	ldr	r1, [r7, #20]
 80043ae:	6849      	ldr	r1, [r1, #4]
 80043b0:	0849      	lsrs	r1, r1, #1
 80043b2:	2000      	movs	r0, #0
 80043b4:	460c      	mov	r4, r1
 80043b6:	4605      	mov	r5, r0
 80043b8:	eb12 0804 	adds.w	r8, r2, r4
 80043bc:	eb43 0905 	adc.w	r9, r3, r5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	469a      	mov	sl, r3
 80043c8:	4693      	mov	fp, r2
 80043ca:	4652      	mov	r2, sl
 80043cc:	465b      	mov	r3, fp
 80043ce:	4640      	mov	r0, r8
 80043d0:	4649      	mov	r1, r9
 80043d2:	f7fb ff21 	bl	8000218 <__aeabi_uldivmod>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4613      	mov	r3, r2
 80043dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e4:	d308      	bcc.n	80043f8 <UART_SetConfig+0x430>
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ec:	d204      	bcs.n	80043f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	e0ce      	b.n	8004596 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043fe:	e0ca      	b.n	8004596 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004408:	d166      	bne.n	80044d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800440a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800440e:	2b08      	cmp	r3, #8
 8004410:	d827      	bhi.n	8004462 <UART_SetConfig+0x49a>
 8004412:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <UART_SetConfig+0x450>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	0800443d 	.word	0x0800443d
 800441c:	08004445 	.word	0x08004445
 8004420:	0800444d 	.word	0x0800444d
 8004424:	08004463 	.word	0x08004463
 8004428:	08004453 	.word	0x08004453
 800442c:	08004463 	.word	0x08004463
 8004430:	08004463 	.word	0x08004463
 8004434:	08004463 	.word	0x08004463
 8004438:	0800445b 	.word	0x0800445b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800443c:	f7fe f9d0 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8004440:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004442:	e014      	b.n	800446e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004444:	f7fe f9e2 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8004448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800444a:	e010      	b.n	800446e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800444c:	4b4e      	ldr	r3, [pc, #312]	@ (8004588 <UART_SetConfig+0x5c0>)
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004450:	e00d      	b.n	800446e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004452:	f7fe f957 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8004456:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004458:	e009      	b.n	800446e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004460:	e005      	b.n	800446e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800446c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8090 	beq.w	8004596 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	4a44      	ldr	r2, [pc, #272]	@ (800458c <UART_SetConfig+0x5c4>)
 800447c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004480:	461a      	mov	r2, r3
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	fbb3 f3f2 	udiv	r3, r3, r2
 8004488:	005a      	lsls	r2, r3, #1
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	441a      	add	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	fbb2 f3f3 	udiv	r3, r2, r3
 800449a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b0f      	cmp	r3, #15
 80044a0:	d916      	bls.n	80044d0 <UART_SetConfig+0x508>
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a8:	d212      	bcs.n	80044d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f023 030f 	bic.w	r3, r3, #15
 80044b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	085b      	lsrs	r3, r3, #1
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	b29a      	uxth	r2, r3
 80044c0:	8bfb      	ldrh	r3, [r7, #30]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	8bfa      	ldrh	r2, [r7, #30]
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	e062      	b.n	8004596 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80044d6:	e05e      	b.n	8004596 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d828      	bhi.n	8004532 <UART_SetConfig+0x56a>
 80044e0:	a201      	add	r2, pc, #4	@ (adr r2, 80044e8 <UART_SetConfig+0x520>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	08004515 	.word	0x08004515
 80044f0:	0800451d 	.word	0x0800451d
 80044f4:	08004533 	.word	0x08004533
 80044f8:	08004523 	.word	0x08004523
 80044fc:	08004533 	.word	0x08004533
 8004500:	08004533 	.word	0x08004533
 8004504:	08004533 	.word	0x08004533
 8004508:	0800452b 	.word	0x0800452b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800450c:	f7fe f968 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8004510:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004512:	e014      	b.n	800453e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004514:	f7fe f97a 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8004518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800451a:	e010      	b.n	800453e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800451c:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <UART_SetConfig+0x5c0>)
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004520:	e00d      	b.n	800453e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004522:	f7fe f8ef 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8004526:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004528:	e009      	b.n	800453e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004530:	e005      	b.n	800453e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800453c:	bf00      	nop
    }

    if (pclk != 0U)
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d028      	beq.n	8004596 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	4a10      	ldr	r2, [pc, #64]	@ (800458c <UART_SetConfig+0x5c4>)
 800454a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800454e:	461a      	mov	r2, r3
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	fbb3 f2f2 	udiv	r2, r3, r2
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	441a      	add	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	d910      	bls.n	8004590 <UART_SetConfig+0x5c8>
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004574:	d20c      	bcs.n	8004590 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	b29a      	uxth	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60da      	str	r2, [r3, #12]
 8004580:	e009      	b.n	8004596 <UART_SetConfig+0x5ce>
 8004582:	bf00      	nop
 8004584:	40008000 	.word	0x40008000
 8004588:	00f42400 	.word	0x00f42400
 800458c:	08004c8c 	.word	0x08004c8c
      }
      else
      {
        ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2201      	movs	r2, #1
 800459a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2200      	movs	r2, #0
 80045b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80045b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3730      	adds	r7, #48	@ 0x30
 80045ba:	46bd      	mov	sp, r7
 80045bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080045c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01a      	beq.n	80046d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046be:	d10a      	bne.n	80046d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b098      	sub	sp, #96	@ 0x60
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004714:	f7fc ff16 	bl	8001544 <HAL_GetTick>
 8004718:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d12f      	bne.n	8004788 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004728:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f88e 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d022      	beq.n	8004788 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004756:	653b      	str	r3, [r7, #80]	@ 0x50
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004760:	647b      	str	r3, [r7, #68]	@ 0x44
 8004762:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800476e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e6      	bne.n	8004742 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e063      	b.n	8004850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b04      	cmp	r3, #4
 8004794:	d149      	bne.n	800482a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004796:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479e:	2200      	movs	r2, #0
 80047a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f857 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d03c      	beq.n	800482a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	623b      	str	r3, [r7, #32]
   return(result);
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80047d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e6      	bne.n	80047b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3308      	adds	r3, #8
 80047e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3308      	adds	r3, #8
 8004800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004802:	61fa      	str	r2, [r7, #28]
 8004804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	69b9      	ldr	r1, [r7, #24]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	617b      	str	r3, [r7, #20]
   return(result);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e5      	bne.n	80047e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e012      	b.n	8004850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3758      	adds	r7, #88	@ 0x58
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004868:	e04f      	b.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004870:	d04b      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fc fe67 	bl	8001544 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <UART_WaitOnFlagUntilTimeout+0x30>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e04e      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d037      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b80      	cmp	r3, #128	@ 0x80
 800489e:	d034      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	d031      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d110      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f838 	bl	8004932 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2208      	movs	r2, #8
 80048c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e029      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e4:	d111      	bne.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f81e 	bl	8004932 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e00f      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	429a      	cmp	r2, r3
 8004926:	d0a0      	beq.n	800486a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004932:	b480      	push	{r7}
 8004934:	b095      	sub	sp, #84	@ 0x54
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800494e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004958:	643b      	str	r3, [r7, #64]	@ 0x40
 800495a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800495e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e6      	bne.n	800493a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	61fb      	str	r3, [r7, #28]
   return(result);
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3308      	adds	r3, #8
 800498e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004990:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e3      	bne.n	800496c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d118      	bne.n	80049de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f023 0310 	bic.w	r3, r3, #16
 80049c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	613b      	str	r3, [r7, #16]
   return(result);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049f2:	bf00      	nop
 80049f4:	3754      	adds	r7, #84	@ 0x54
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e027      	b.n	8004a64 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	@ 0x24
 8004a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e02d      	b.n	8004ae4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	@ 0x24
 8004a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f84f 	bl	8004b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e02d      	b.n	8004b60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2224      	movs	r2, #36	@ 0x24
 8004b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f811 	bl	8004b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d108      	bne.n	8004b8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b88:	e031      	b.n	8004bee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b8e:	2308      	movs	r3, #8
 8004b90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	0e5b      	lsrs	r3, r3, #25
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	0f5b      	lsrs	r3, r3, #29
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bb2:	7bbb      	ldrb	r3, [r7, #14]
 8004bb4:	7b3a      	ldrb	r2, [r7, #12]
 8004bb6:	4911      	ldr	r1, [pc, #68]	@ (8004bfc <UARTEx_SetNbDataToProcess+0x94>)
 8004bb8:	5c8a      	ldrb	r2, [r1, r2]
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bbe:	7b3a      	ldrb	r2, [r7, #12]
 8004bc0:	490f      	ldr	r1, [pc, #60]	@ (8004c00 <UARTEx_SetNbDataToProcess+0x98>)
 8004bc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	7b7a      	ldrb	r2, [r7, #13]
 8004bd4:	4909      	ldr	r1, [pc, #36]	@ (8004bfc <UARTEx_SetNbDataToProcess+0x94>)
 8004bd6:	5c8a      	ldrb	r2, [r1, r2]
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bdc:	7b7a      	ldrb	r2, [r7, #13]
 8004bde:	4908      	ldr	r1, [pc, #32]	@ (8004c00 <UARTEx_SetNbDataToProcess+0x98>)
 8004be0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004be2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	08004ca4 	.word	0x08004ca4
 8004c00:	08004cac 	.word	0x08004cac

08004c04 <memset>:
 8004c04:	4402      	add	r2, r0
 8004c06:	4603      	mov	r3, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <__libc_init_array>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	4d0d      	ldr	r5, [pc, #52]	@ (8004c4c <__libc_init_array+0x38>)
 8004c18:	4c0d      	ldr	r4, [pc, #52]	@ (8004c50 <__libc_init_array+0x3c>)
 8004c1a:	1b64      	subs	r4, r4, r5
 8004c1c:	10a4      	asrs	r4, r4, #2
 8004c1e:	2600      	movs	r6, #0
 8004c20:	42a6      	cmp	r6, r4
 8004c22:	d109      	bne.n	8004c38 <__libc_init_array+0x24>
 8004c24:	4d0b      	ldr	r5, [pc, #44]	@ (8004c54 <__libc_init_array+0x40>)
 8004c26:	4c0c      	ldr	r4, [pc, #48]	@ (8004c58 <__libc_init_array+0x44>)
 8004c28:	f000 f818 	bl	8004c5c <_init>
 8004c2c:	1b64      	subs	r4, r4, r5
 8004c2e:	10a4      	asrs	r4, r4, #2
 8004c30:	2600      	movs	r6, #0
 8004c32:	42a6      	cmp	r6, r4
 8004c34:	d105      	bne.n	8004c42 <__libc_init_array+0x2e>
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3c:	4798      	blx	r3
 8004c3e:	3601      	adds	r6, #1
 8004c40:	e7ee      	b.n	8004c20 <__libc_init_array+0xc>
 8004c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c46:	4798      	blx	r3
 8004c48:	3601      	adds	r6, #1
 8004c4a:	e7f2      	b.n	8004c32 <__libc_init_array+0x1e>
 8004c4c:	08004cbc 	.word	0x08004cbc
 8004c50:	08004cbc 	.word	0x08004cbc
 8004c54:	08004cbc 	.word	0x08004cbc
 8004c58:	08004cc0 	.word	0x08004cc0

08004c5c <_init>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr

08004c68 <_fini>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr
