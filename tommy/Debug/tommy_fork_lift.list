
tommy_fork_lift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c20  08007c20  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c20  08007c20  00008c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c28  08007c28  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c28  08007c28  00008c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c2c  08007c2c  00008c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007c30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000070  08007ca0  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08007ca0  0000948c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b77  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5b  00000000  00000000  0001cc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9e  00000000  00000000  00020b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b8f  00000000  00000000  000218c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016741  00000000  00000000  00044455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db8b6  00000000  00000000  0005ab96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013644c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005358  00000000  00000000  00136490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0013b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a38 	.word	0x08007a38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007a38 	.word	0x08007a38

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b70:	f000 b96a 	b.w	8000e48 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	460c      	mov	r4, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14e      	bne.n	8000c36 <__udivmoddi4+0xaa>
 8000b98:	4694      	mov	ip, r2
 8000b9a:	458c      	cmp	ip, r1
 8000b9c:	4686      	mov	lr, r0
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	d962      	bls.n	8000c6a <__udivmoddi4+0xde>
 8000ba4:	b14a      	cbz	r2, 8000bba <__udivmoddi4+0x2e>
 8000ba6:	f1c2 0320 	rsb	r3, r2, #32
 8000baa:	4091      	lsls	r1, r2
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb4:	4319      	orrs	r1, r3
 8000bb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bbe:	fa1f f68c 	uxth.w	r6, ip
 8000bc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bca:	fb07 1114 	mls	r1, r7, r4, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb04 f106 	mul.w	r1, r4, r6
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000be2:	f080 8112 	bcs.w	8000e0a <__udivmoddi4+0x27e>
 8000be6:	4299      	cmp	r1, r3
 8000be8:	f240 810f 	bls.w	8000e0a <__udivmoddi4+0x27e>
 8000bec:	3c02      	subs	r4, #2
 8000bee:	4463      	add	r3, ip
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb00 f606 	mul.w	r6, r0, r6
 8000c06:	429e      	cmp	r6, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x94>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c12:	f080 80fc 	bcs.w	8000e0e <__udivmoddi4+0x282>
 8000c16:	429e      	cmp	r6, r3
 8000c18:	f240 80f9 	bls.w	8000e0e <__udivmoddi4+0x282>
 8000c1c:	4463      	add	r3, ip
 8000c1e:	3802      	subs	r0, #2
 8000c20:	1b9b      	subs	r3, r3, r6
 8000c22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c26:	2100      	movs	r1, #0
 8000c28:	b11d      	cbz	r5, 8000c32 <__udivmoddi4+0xa6>
 8000c2a:	40d3      	lsrs	r3, r2
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d905      	bls.n	8000c46 <__udivmoddi4+0xba>
 8000c3a:	b10d      	cbz	r5, 8000c40 <__udivmoddi4+0xb4>
 8000c3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c40:	2100      	movs	r1, #0
 8000c42:	4608      	mov	r0, r1
 8000c44:	e7f5      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000c46:	fab3 f183 	clz	r1, r3
 8000c4a:	2900      	cmp	r1, #0
 8000c4c:	d146      	bne.n	8000cdc <__udivmoddi4+0x150>
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xcc>
 8000c52:	4290      	cmp	r0, r2
 8000c54:	f0c0 80f0 	bcc.w	8000e38 <__udivmoddi4+0x2ac>
 8000c58:	1a86      	subs	r6, r0, r2
 8000c5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	2d00      	cmp	r5, #0
 8000c62:	d0e6      	beq.n	8000c32 <__udivmoddi4+0xa6>
 8000c64:	e9c5 6300 	strd	r6, r3, [r5]
 8000c68:	e7e3      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x204>
 8000c70:	eba1 040c 	sub.w	r4, r1, ip
 8000c74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c78:	fa1f f78c 	uxth.w	r7, ip
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb08 4416 	mls	r4, r8, r6, r4
 8000c8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8e:	fb07 f006 	mul.w	r0, r7, r6
 8000c92:	4298      	cmp	r0, r3
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x11c>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x11a>
 8000ca0:	4298      	cmp	r0, r3
 8000ca2:	f200 80cd 	bhi.w	8000e40 <__udivmoddi4+0x2b4>
 8000ca6:	4626      	mov	r6, r4
 8000ca8:	1a1c      	subs	r4, r3, r0
 8000caa:	fa1f f38e 	uxth.w	r3, lr
 8000cae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb00 f707 	mul.w	r7, r0, r7
 8000cbe:	429f      	cmp	r7, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x148>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x146>
 8000ccc:	429f      	cmp	r7, r3
 8000cce:	f200 80b0 	bhi.w	8000e32 <__udivmoddi4+0x2a6>
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	1bdb      	subs	r3, r3, r7
 8000cd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0x9c>
 8000cdc:	f1c1 0620 	rsb	r6, r1, #32
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cec:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf0:	ea43 030c 	orr.w	r3, r3, ip
 8000cf4:	40f4      	lsrs	r4, r6
 8000cf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cfa:	0c38      	lsrs	r0, r7, #16
 8000cfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d00:	fbb4 fef0 	udiv	lr, r4, r0
 8000d04:	fa1f fc87 	uxth.w	ip, r7
 8000d08:	fb00 441e 	mls	r4, r0, lr, r4
 8000d0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d10:	fb0e f90c 	mul.w	r9, lr, ip
 8000d14:	45a1      	cmp	r9, r4
 8000d16:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1a:	d90a      	bls.n	8000d32 <__udivmoddi4+0x1a6>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d22:	f080 8084 	bcs.w	8000e2e <__udivmoddi4+0x2a2>
 8000d26:	45a1      	cmp	r9, r4
 8000d28:	f240 8081 	bls.w	8000e2e <__udivmoddi4+0x2a2>
 8000d2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d30:	443c      	add	r4, r7
 8000d32:	eba4 0409 	sub.w	r4, r4, r9
 8000d36:	fa1f f983 	uxth.w	r9, r3
 8000d3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x1d2>
 8000d4e:	193c      	adds	r4, r7, r4
 8000d50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d54:	d267      	bcs.n	8000e26 <__udivmoddi4+0x29a>
 8000d56:	45a4      	cmp	ip, r4
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0x29a>
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d62:	fba0 9302 	umull	r9, r3, r0, r2
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	46ce      	mov	lr, r9
 8000d6e:	469c      	mov	ip, r3
 8000d70:	d351      	bcc.n	8000e16 <__udivmoddi4+0x28a>
 8000d72:	d04e      	beq.n	8000e12 <__udivmoddi4+0x286>
 8000d74:	b155      	cbz	r5, 8000d8c <__udivmoddi4+0x200>
 8000d76:	ebb8 030e 	subs.w	r3, r8, lr
 8000d7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d82:	40cb      	lsrs	r3, r1
 8000d84:	431e      	orrs	r6, r3
 8000d86:	40cc      	lsrs	r4, r1
 8000d88:	e9c5 6400 	strd	r6, r4, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e750      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f103 	lsr.w	r1, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000da0:	4094      	lsls	r4, r2
 8000da2:	430c      	orrs	r4, r1
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dac:	fa1f f78c 	uxth.w	r7, ip
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3110 	mls	r1, r8, r0, r3
 8000db8:	0c23      	lsrs	r3, r4, #16
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb00 f107 	mul.w	r1, r0, r7
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x24c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dce:	d22c      	bcs.n	8000e2a <__udivmoddi4+0x29e>
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d92a      	bls.n	8000e2a <__udivmoddi4+0x29e>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de0:	fb08 3311 	mls	r3, r8, r1, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb01 f307 	mul.w	r3, r1, r7
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x276>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000df8:	d213      	bcs.n	8000e22 <__udivmoddi4+0x296>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d911      	bls.n	8000e22 <__udivmoddi4+0x296>
 8000dfe:	3902      	subs	r1, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	1ae4      	subs	r4, r4, r3
 8000e04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e08:	e739      	b.n	8000c7e <__udivmoddi4+0xf2>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	e6f0      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e706      	b.n	8000c20 <__udivmoddi4+0x94>
 8000e12:	45c8      	cmp	r8, r9
 8000e14:	d2ae      	bcs.n	8000d74 <__udivmoddi4+0x1e8>
 8000e16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1e:	3801      	subs	r0, #1
 8000e20:	e7a8      	b.n	8000d74 <__udivmoddi4+0x1e8>
 8000e22:	4631      	mov	r1, r6
 8000e24:	e7ed      	b.n	8000e02 <__udivmoddi4+0x276>
 8000e26:	4603      	mov	r3, r0
 8000e28:	e799      	b.n	8000d5e <__udivmoddi4+0x1d2>
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	e7d4      	b.n	8000dd8 <__udivmoddi4+0x24c>
 8000e2e:	46d6      	mov	lr, sl
 8000e30:	e77f      	b.n	8000d32 <__udivmoddi4+0x1a6>
 8000e32:	4463      	add	r3, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e74d      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e70f      	b.n	8000c60 <__udivmoddi4+0xd4>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	e730      	b.n	8000ca8 <__udivmoddi4+0x11c>
 8000e46:	bf00      	nop

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <follow_auto_path>:

bool prev_auto_path_switch = false;

AutoPathSelection auto_path_selection = LEFT_PATH;

void follow_auto_path(AutoPathSelection auto_path_selection) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b092      	sub	sp, #72	@ 0x48
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  switch (auto_path_selection) {
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d057      	beq.n	8000f0c <follow_auto_path+0xc0>
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	f300 808a 	bgt.w	8000f76 <follow_auto_path+0x12a>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <follow_auto_path+0x20>
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d035      	beq.n	8000ed6 <follow_auto_path+0x8a>
 8000e6a:	e084      	b.n	8000f76 <follow_auto_path+0x12a>
    case LEFT_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_X_VELOCITY * 0.75, 0};
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e72:	4b5a      	ldr	r3, [pc, #360]	@ (8000fdc <follow_auto_path+0x190>)
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e76:	f04f 0300 	mov.w	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 8000e7c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8000e80:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000e84:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000e88:	eeb0 0a66 	vmov.f32	s0, s13
 8000e8c:	eef0 0a47 	vmov.f32	s1, s14
 8000e90:	eeb0 1a67 	vmov.f32	s2, s15
 8000e94:	f001 fb24 	bl	80024e0 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_1);
 8000e98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e9c:	f002 f942 	bl	8003124 <HAL_Delay>
      target_vel.x_vel = -ROBOT_MAX_Y_VELOCITY * 0.75;
 8000ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe0 <follow_auto_path+0x194>)
 8000ea2:	633b      	str	r3, [r7, #48]	@ 0x30
      target_vel.y_vel = 0;
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      target_vel.z_vel = 0;
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 8000eb0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8000eb4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000eb8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ebc:	eeb0 0a66 	vmov.f32	s0, s13
 8000ec0:	eef0 0a47 	vmov.f32	s1, s14
 8000ec4:	eeb0 1a67 	vmov.f32	s2, s15
 8000ec8:	f001 fb0a 	bl	80024e0 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_2);
 8000ecc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed0:	f002 f928 	bl	8003124 <HAL_Delay>
      break;
 8000ed4:	e067      	b.n	8000fa6 <follow_auto_path+0x15a>
    }
    case MID_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_X_VELOCITY * 0.75, 0};
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000edc:	4b3f      	ldr	r3, [pc, #252]	@ (8000fdc <follow_auto_path+0x190>)
 8000ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      movement_control(target_vel);
 8000ee6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000eea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000eee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ef2:	eeb0 0a66 	vmov.f32	s0, s13
 8000ef6:	eef0 0a47 	vmov.f32	s1, s14
 8000efa:	eeb0 1a67 	vmov.f32	s2, s15
 8000efe:	f001 faef 	bl	80024e0 <movement_control>
      HAL_Delay(MID_PATH_TIME_1);
 8000f02:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f06:	f002 f90d 	bl	8003124 <HAL_Delay>
      break;
 8000f0a:	e04c      	b.n	8000fa6 <follow_auto_path+0x15a>
    }
    case RIGHT_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_X_VELOCITY * 0.75, 0};
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <follow_auto_path+0x190>)
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 8000f1c:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f20:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f24:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f28:	eeb0 0a66 	vmov.f32	s0, s13
 8000f2c:	eef0 0a47 	vmov.f32	s1, s14
 8000f30:	eeb0 1a67 	vmov.f32	s2, s15
 8000f34:	f001 fad4 	bl	80024e0 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_1);
 8000f38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f3c:	f002 f8f2 	bl	8003124 <HAL_Delay>
      target_vel.x_vel = ROBOT_MAX_Y_VELOCITY * 0.75;
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <follow_auto_path+0x190>)
 8000f42:	61bb      	str	r3, [r7, #24]
      target_vel.y_vel = 0;
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
      target_vel.z_vel = 0;
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 8000f50:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f54:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f58:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f5c:	eeb0 0a66 	vmov.f32	s0, s13
 8000f60:	eef0 0a47 	vmov.f32	s1, s14
 8000f64:	eeb0 1a67 	vmov.f32	s2, s15
 8000f68:	f001 faba 	bl	80024e0 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_2);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f70:	f002 f8d8 	bl	8003124 <HAL_Delay>
      break;
 8000f74:	e017      	b.n	8000fa6 <follow_auto_path+0x15a>
    }
    default: {
      BaseVelocity target_vel = {0, 0, 0};
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
      movement_control(target_vel);
 8000f88:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f94:	eeb0 0a66 	vmov.f32	s0, s13
 8000f98:	eef0 0a47 	vmov.f32	s1, s14
 8000f9c:	eeb0 1a67 	vmov.f32	s2, s15
 8000fa0:	f001 fa9e 	bl	80024e0 <movement_control>
      break;
 8000fa4:	bf00      	nop
    }
  }
  BaseVelocity target_vel = {0, 0, 0};
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	647b      	str	r3, [r7, #68]	@ 0x44
  movement_control(target_vel);
 8000fb8:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8000fbc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000fc0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000fc4:	eeb0 0a66 	vmov.f32	s0, s13
 8000fc8:	eef0 0a47 	vmov.f32	s1, s14
 8000fcc:	eeb0 1a67 	vmov.f32	s2, s15
 8000fd0:	f001 fa86 	bl	80024e0 <movement_control>
 8000fd4:	bf00      	nop
 8000fd6:	3748      	adds	r7, #72	@ 0x48
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	400f47ae 	.word	0x400f47ae
 8000fe0:	c00f47ae 	.word	0xc00f47ae

08000fe4 <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b098      	sub	sp, #96	@ 0x60
 8000fe8:	af08      	add	r7, sp, #32
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <parse_controller_data+0x16>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 8000ffa:	4887      	ldr	r0, [pc, #540]	@ (8001218 <parse_controller_data+0x234>)
 8000ffc:	f005 fd8a 	bl	8006b14 <puts>
    return 1;
 8001000:	2301      	movs	r3, #1
 8001002:	e105      	b.n	8001210 <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 8001004:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001008:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	9306      	str	r3, [sp, #24]
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	9305      	str	r3, [sp, #20]
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	9304      	str	r3, [sp, #16]
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	9303      	str	r3, [sp, #12]
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	460b      	mov	r3, r1
 8001038:	4978      	ldr	r1, [pc, #480]	@ (800121c <parse_controller_data+0x238>)
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f005 fb5c 	bl	80066f8 <siscanf>
 8001040:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 8001042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001044:	2b09      	cmp	r3, #9
 8001046:	d004      	beq.n	8001052 <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 8001048:	4875      	ldr	r0, [pc, #468]	@ (8001220 <parse_controller_data+0x23c>)
 800104a:	f005 fd63 	bl	8006b14 <puts>
    return 2;
 800104e:	2302      	movs	r3, #2
 8001050:	e0de      	b.n	8001210 <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 8001052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	b2da      	uxtb	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 8001066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf14      	ite	ne
 8001070:	2301      	movne	r3, #1
 8001072:	2300      	moveq	r3, #0
 8001074:	b2da      	uxtb	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 800107a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2da      	uxtb	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 800108e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2da      	uxtb	r2, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 80010a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 80010b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	bf14      	ite	ne
 80010c0:	2301      	movne	r3, #1
 80010c2:	2300      	moveq	r3, #0
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 80010ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	bf14      	ite	ne
 80010d4:	2301      	movne	r3, #1
 80010d6:	2300      	moveq	r3, #0
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 80010de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf14      	ite	ne
 80010e8:	2301      	movne	r3, #1
 80010ea:	2300      	moveq	r3, #0
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 80010f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2da      	uxtb	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 8001106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf14      	ite	ne
 8001110:	2301      	movne	r3, #1
 8001112:	2300      	moveq	r3, #0
 8001114:	b2da      	uxtb	r2, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 800111a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2da      	uxtb	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 800112e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf14      	ite	ne
 8001138:	2301      	movne	r3, #1
 800113a:	2300      	moveq	r3, #0
 800113c:	b2da      	uxtb	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 8001142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf14      	ite	ne
 800114c:	2301      	movne	r3, #1
 800114e:	2300      	moveq	r3, #0
 8001150:	b2da      	uxtb	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 8001156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf14      	ite	ne
 8001160:	2301      	movne	r3, #1
 8001162:	2300      	moveq	r3, #0
 8001164:	b2da      	uxtb	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 800116a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116e:	220a      	movs	r2, #10
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fc50 	bl	8006a18 <strtol>
 8001178:	4603      	mov	r3, r0
 800117a:	b25a      	sxtb	r2, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 8001180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001184:	220a      	movs	r2, #10
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f005 fc45 	bl	8006a18 <strtol>
 800118e:	4603      	mov	r3, r0
 8001190:	b25a      	sxtb	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	220a      	movs	r2, #10
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 fc3a 	bl	8006a18 <strtol>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b25a      	sxtb	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	220a      	movs	r2, #10
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 fc2f 	bl	8006a18 <strtol>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf14      	ite	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	2300      	moveq	r3, #0
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf14      	ite	ne
 80011f0:	2301      	movne	r3, #1
 80011f2:	2300      	moveq	r3, #0
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf14      	ite	ne
 8001204:	2301      	movne	r3, #1
 8001206:	2300      	moveq	r3, #0
 8001208:	b2da      	uxtb	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	761a      	strb	r2, [r3, #24]

  return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3740      	adds	r7, #64	@ 0x40
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	08007a50 	.word	0x08007a50
 800121c:	08007a70 	.word	0x08007a70
 8001220:	08007a98 	.word	0x08007a98

08001224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	@ 0x30
 8001228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123a:	4b5a      	ldr	r3, [pc, #360]	@ (80013a4 <MX_GPIO_Init+0x180>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a59      	ldr	r2, [pc, #356]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b54      	ldr	r3, [pc, #336]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a53      	ldr	r2, [pc, #332]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b51      	ldr	r3, [pc, #324]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	4b4e      	ldr	r3, [pc, #312]	@ (80013a4 <MX_GPIO_Init+0x180>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a4d      	ldr	r2, [pc, #308]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b4b      	ldr	r3, [pc, #300]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b48      	ldr	r3, [pc, #288]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a47      	ldr	r2, [pc, #284]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b45      	ldr	r3, [pc, #276]	@ (80013a4 <MX_GPIO_Init+0x180>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b42      	ldr	r3, [pc, #264]	@ (80013a4 <MX_GPIO_Init+0x180>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4a41      	ldr	r2, [pc, #260]	@ (80013a4 <MX_GPIO_Init+0x180>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4b3f      	ldr	r3, [pc, #252]	@ (80013a4 <MX_GPIO_Init+0x180>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	4b3c      	ldr	r3, [pc, #240]	@ (80013a4 <MX_GPIO_Init+0x180>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4a3b      	ldr	r2, [pc, #236]	@ (80013a4 <MX_GPIO_Init+0x180>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4b39      	ldr	r3, [pc, #228]	@ (80013a4 <MX_GPIO_Init+0x180>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, D_IN1_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 80012ca:	2200      	movs	r2, #0
 80012cc:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 80012d0:	4835      	ldr	r0, [pc, #212]	@ (80013a8 <MX_GPIO_Init+0x184>)
 80012d2:	f002 f9af 	bl	8003634 <HAL_GPIO_WritePin>
                          |LED1_Pin|A_IN1_Pin|A_IN2_Pin|B_IN2_Pin
                          |LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LINEAR_ACT_2_1_Pin|LINEAR_ACT_1_2_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80012dc:	4833      	ldr	r0, [pc, #204]	@ (80013ac <MX_GPIO_Init+0x188>)
 80012de:	f002 f9a9 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B_IN1_Pin|C_IN1_Pin|C_IN2_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 4124 	mov.w	r1, #41984	@ 0xa400
 80012e8:	4831      	ldr	r0, [pc, #196]	@ (80013b0 <MX_GPIO_Init+0x18c>)
 80012ea:	f002 f9a3 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D_IN2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80012f4:	482f      	ldr	r0, [pc, #188]	@ (80013b4 <MX_GPIO_Init+0x190>)
 80012f6:	f002 f99d 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001300:	482d      	ldr	r0, [pc, #180]	@ (80013b8 <MX_GPIO_Init+0x194>)
 8001302:	f002 f997 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D_IN1_Pin LED4_Pin LED3_Pin LED2_Pin
                           LED1_Pin A_IN1_Pin A_IN2_Pin B_IN2_Pin
                           LINEAR_ACT_2_2_Pin */
  GPIO_InitStruct.Pin = D_IN1_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8001306:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800130a:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin|A_IN1_Pin|A_IN2_Pin|B_IN2_Pin
                          |LINEAR_ACT_2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4822      	ldr	r0, [pc, #136]	@ (80013a8 <MX_GPIO_Init+0x184>)
 8001320:	f002 f806 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINEAR_ACT_2_1_Pin LINEAR_ACT_1_2_Pin */
  GPIO_InitStruct.Pin = LINEAR_ACT_2_1_Pin|LINEAR_ACT_1_2_Pin;
 8001324:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	481b      	ldr	r0, [pc, #108]	@ (80013ac <MX_GPIO_Init+0x188>)
 800133e:	f001 fff7 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin C_IN1_Pin C_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|C_IN1_Pin|C_IN2_Pin;
 8001342:	f44f 4324 	mov.w	r3, #41984	@ 0xa400
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4815      	ldr	r0, [pc, #84]	@ (80013b0 <MX_GPIO_Init+0x18c>)
 800135c:	f001 ffe8 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin PD9 PD10 */
  GPIO_InitStruct.Pin = D_IN2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8001360:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <MX_GPIO_Init+0x190>)
 800137a:	f001 ffd9 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINEAR_ACT_1_1_Pin */
  GPIO_InitStruct.Pin = LINEAR_ACT_1_1_Pin;
 800137e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LINEAR_ACT_1_1_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4808      	ldr	r0, [pc, #32]	@ (80013b8 <MX_GPIO_Init+0x194>)
 8001398:	f001 ffca 	bl	8003330 <HAL_GPIO_Init>

}
 800139c:	bf00      	nop
 800139e:	3730      	adds	r7, #48	@ 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48001000 	.word	0x48001000
 80013ac:	48001400 	.word	0x48001400
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48000c00 	.word	0x48000c00
 80013b8:	48000800 	.word	0x48000800
 80013bc:	00000000 	.word	0x00000000

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b09a      	sub	sp, #104	@ 0x68
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c6:	f001 fe3c 	bl	8003042 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ca:	f000 fc1d 	bl	8001c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ce:	f7ff ff29 	bl	8001224 <MX_GPIO_Init>
  MX_TIM3_Init();
 80013d2:	f001 fa8d 	bl	80028f0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80013d6:	f001 f9d7 	bl	8002788 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013da:	f001 fa2f 	bl	800283c <MX_TIM2_Init>
  MX_TIM4_Init();
 80013de:	f001 faf7 	bl	80029d0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80013e2:	f001 fb4b 	bl	8002a7c <MX_TIM5_Init>
  MX_TIM8_Init();
 80013e6:	f001 fb9f 	bl	8002b28 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80013ea:	f001 fd5d 	bl	8002ea8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013ee:	2108      	movs	r1, #8
 80013f0:	4895      	ldr	r0, [pc, #596]	@ (8001648 <main+0x288>)
 80013f2:	f003 fa37 	bl	8004864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013f6:	2100      	movs	r1, #0
 80013f8:	4894      	ldr	r0, [pc, #592]	@ (800164c <main+0x28c>)
 80013fa:	f003 fa33 	bl	8004864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013fe:	2104      	movs	r1, #4
 8001400:	4892      	ldr	r0, [pc, #584]	@ (800164c <main+0x28c>)
 8001402:	f003 fa2f 	bl	8004864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001406:	210c      	movs	r1, #12
 8001408:	4890      	ldr	r0, [pc, #576]	@ (800164c <main+0x28c>)
 800140a:	f003 fa2b 	bl	8004864 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 800140e:	4890      	ldr	r0, [pc, #576]	@ (8001650 <main+0x290>)
 8001410:	f003 f958 	bl	80046c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001414:	213c      	movs	r1, #60	@ 0x3c
 8001416:	488e      	ldr	r0, [pc, #568]	@ (8001650 <main+0x290>)
 8001418:	f003 fbdc 	bl	8004bd4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800141c:	488d      	ldr	r0, [pc, #564]	@ (8001654 <main+0x294>)
 800141e:	f003 f951 	bl	80046c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001422:	213c      	movs	r1, #60	@ 0x3c
 8001424:	488b      	ldr	r0, [pc, #556]	@ (8001654 <main+0x294>)
 8001426:	f003 fbd5 	bl	8004bd4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800142a:	488b      	ldr	r0, [pc, #556]	@ (8001658 <main+0x298>)
 800142c:	f003 f94a 	bl	80046c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001430:	213c      	movs	r1, #60	@ 0x3c
 8001432:	4889      	ldr	r0, [pc, #548]	@ (8001658 <main+0x298>)
 8001434:	f003 fbce 	bl	8004bd4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8001438:	4888      	ldr	r0, [pc, #544]	@ (800165c <main+0x29c>)
 800143a:	f003 f943 	bl	80046c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800143e:	213c      	movs	r1, #60	@ 0x3c
 8001440:	4886      	ldr	r0, [pc, #536]	@ (800165c <main+0x29c>)
 8001442:	f003 fbc7 	bl	8004bd4 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800144c:	4884      	ldr	r0, [pc, #528]	@ (8001660 <main+0x2a0>)
 800144e:	f002 f8f1 	bl	8003634 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001458:	4881      	ldr	r0, [pc, #516]	@ (8001660 <main+0x2a0>)
 800145a:	f002 f8eb 	bl	8003634 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001464:	487e      	ldr	r0, [pc, #504]	@ (8001660 <main+0x2a0>)
 8001466:	f002 f8e5 	bl	8003634 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2180      	movs	r1, #128	@ 0x80
 800146e:	487c      	ldr	r0, [pc, #496]	@ (8001660 <main+0x2a0>)
 8001470:	f002 f8e0 	bl	8003634 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f001 fe55 	bl	8003124 <HAL_Delay>
#if (TEST == 0)
    HAL_UART_Receive(&huart1, controller_buffer, sizeof(controller_buffer), 0xFFFF);
 800147a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800147e:	2229      	movs	r2, #41	@ 0x29
 8001480:	4978      	ldr	r1, [pc, #480]	@ (8001664 <main+0x2a4>)
 8001482:	4879      	ldr	r0, [pc, #484]	@ (8001668 <main+0x2a8>)
 8001484:	f004 fa52 	bl	800592c <HAL_UART_Receive>
    parse_controller_data(controller_buffer, &controller_state);
 8001488:	4978      	ldr	r1, [pc, #480]	@ (800166c <main+0x2ac>)
 800148a:	4876      	ldr	r0, [pc, #472]	@ (8001664 <main+0x2a4>)
 800148c:	f7ff fdaa 	bl	8000fe4 <parse_controller_data>

    if (controller_state.options_button && !prev_turn_on) {  // turn on/off the robot
 8001490:	4b76      	ldr	r3, [pc, #472]	@ (800166c <main+0x2ac>)
 8001492:	7e1b      	ldrb	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <main+0x11a>
 8001498:	4b75      	ldr	r3, [pc, #468]	@ (8001670 <main+0x2b0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d019      	beq.n	80014da <main+0x11a>
      turn_on = !turn_on;
 80014a6:	4b73      	ldr	r3, [pc, #460]	@ (8001674 <main+0x2b4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2301      	movne	r3, #1
 80014b0:	2300      	moveq	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f083 0301 	eor.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001674 <main+0x2b4>)
 80014c2:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80014c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001674 <main+0x2b4>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	f083 0301 	eor.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014d4:	4862      	ldr	r0, [pc, #392]	@ (8001660 <main+0x2a0>)
 80014d6:	f002 f8ad 	bl	8003634 <HAL_GPIO_WritePin>
    }
    prev_turn_on = controller_state.options_button;
 80014da:	4b64      	ldr	r3, [pc, #400]	@ (800166c <main+0x2ac>)
 80014dc:	7e1a      	ldrb	r2, [r3, #24]
 80014de:	4b64      	ldr	r3, [pc, #400]	@ (8001670 <main+0x2b0>)
 80014e0:	701a      	strb	r2, [r3, #0]

    if (turn_on) {
 80014e2:	4b64      	ldr	r3, [pc, #400]	@ (8001674 <main+0x2b4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0c4      	beq.n	8001474 <main+0xb4>
      if (auto_path_selection == LEFT_PATH) {
 80014ea:	4b63      	ldr	r3, [pc, #396]	@ (8001678 <main+0x2b8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10b      	bne.n	800150a <main+0x14a>
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014f8:	4859      	ldr	r0, [pc, #356]	@ (8001660 <main+0x2a0>)
 80014fa:	f002 f89b 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	4857      	ldr	r0, [pc, #348]	@ (8001660 <main+0x2a0>)
 8001504:	f002 f896 	bl	8003634 <HAL_GPIO_WritePin>
 8001508:	e01e      	b.n	8001548 <main+0x188>
      } else if (auto_path_selection == MID_PATH) {
 800150a:	4b5b      	ldr	r3, [pc, #364]	@ (8001678 <main+0x2b8>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d10b      	bne.n	800152a <main+0x16a>
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001518:	4851      	ldr	r0, [pc, #324]	@ (8001660 <main+0x2a0>)
 800151a:	f002 f88b 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	2180      	movs	r1, #128	@ 0x80
 8001522:	484f      	ldr	r0, [pc, #316]	@ (8001660 <main+0x2a0>)
 8001524:	f002 f886 	bl	8003634 <HAL_GPIO_WritePin>
 8001528:	e00e      	b.n	8001548 <main+0x188>
      } else if (auto_path_selection == RIGHT_PATH) {
 800152a:	4b53      	ldr	r3, [pc, #332]	@ (8001678 <main+0x2b8>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d10a      	bne.n	8001548 <main+0x188>
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001538:	4849      	ldr	r0, [pc, #292]	@ (8001660 <main+0x2a0>)
 800153a:	f002 f87b 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2180      	movs	r1, #128	@ 0x80
 8001542:	4847      	ldr	r0, [pc, #284]	@ (8001660 <main+0x2a0>)
 8001544:	f002 f876 	bl	8003634 <HAL_GPIO_WritePin>
      }

      float rotation_vel = (controller_state.l2_pressure / 1024.0 + controller_state.r2_pressure / -1024.0) * 100.0;
 8001548:	4b48      	ldr	r3, [pc, #288]	@ (800166c <main+0x2ac>)
 800154a:	8a5b      	ldrh	r3, [r3, #18]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f811 	bl	8000574 <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b49      	ldr	r3, [pc, #292]	@ (800167c <main+0x2bc>)
 8001558:	f7ff f9a0 	bl	800089c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4614      	mov	r4, r2
 8001562:	461d      	mov	r5, r3
 8001564:	4b41      	ldr	r3, [pc, #260]	@ (800166c <main+0x2ac>)
 8001566:	8a9b      	ldrh	r3, [r3, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f803 	bl	8000574 <__aeabi_i2d>
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <main+0x2c0>)
 8001574:	f7ff f992 	bl	800089c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe feac 	bl	80002dc <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b3c      	ldr	r3, [pc, #240]	@ (8001684 <main+0x2c4>)
 8001592:	f7ff f859 	bl	8000648 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff fa8d 	bl	8000abc <__aeabi_d2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	667b      	str	r3, [r7, #100]	@ 0x64

      if (controller_state.ps_button && !prev_auto_path_enable) {  // auto, line following
 80015a6:	4b31      	ldr	r3, [pc, #196]	@ (800166c <main+0x2ac>)
 80015a8:	7d9b      	ldrb	r3, [r3, #22]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d01e      	beq.n	80015ec <main+0x22c>
 80015ae:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <main+0x2c8>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	f083 0301 	eor.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d017      	beq.n	80015ec <main+0x22c>
        auto_path_enable = !auto_path_enable;
 80015bc:	4b33      	ldr	r3, [pc, #204]	@ (800168c <main+0x2cc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <main+0x2cc>)
 80015d8:	701a      	strb	r2, [r3, #0]
        if (auto_path_enable)
 80015da:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <main+0x2cc>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <main+0x22c>
          follow_auto_path(auto_path_selection);
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <main+0x2b8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fc30 	bl	8000e4c <follow_auto_path>
      }
      prev_auto_path_enable = controller_state.ps_button;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <main+0x2ac>)
 80015ee:	7d9a      	ldrb	r2, [r3, #22]
 80015f0:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <main+0x2c8>)
 80015f2:	701a      	strb	r2, [r3, #0]

      if (controller_state.share_button && !prev_auto_path_switch) {
 80015f4:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <main+0x2ac>)
 80015f6:	7ddb      	ldrb	r3, [r3, #23]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d054      	beq.n	80016a6 <main+0x2e6>
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <main+0x2d0>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	f083 0301 	eor.w	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d04d      	beq.n	80016a6 <main+0x2e6>
        auto_path_switch = !auto_path_switch;
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <main+0x2d4>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf14      	ite	ne
 8001612:	2301      	movne	r3, #1
 8001614:	2300      	moveq	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f083 0301 	eor.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <main+0x2d4>)
 8001626:	701a      	strb	r2, [r3, #0]
        if (auto_path_selection == LEFT_PATH)
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <main+0x2b8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <main+0x278>
          auto_path_selection = MID_PATH;
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <main+0x2b8>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e036      	b.n	80016a6 <main+0x2e6>
        else if (auto_path_selection == MID_PATH)
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <main+0x2b8>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d12b      	bne.n	8001698 <main+0x2d8>
          auto_path_selection = RIGHT_PATH;
 8001640:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <main+0x2b8>)
 8001642:	2202      	movs	r2, #2
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e02e      	b.n	80016a6 <main+0x2e6>
 8001648:	2000012c 	.word	0x2000012c
 800164c:	20000178 	.word	0x20000178
 8001650:	200000e0 	.word	0x200000e0
 8001654:	200001c4 	.word	0x200001c4
 8001658:	20000210 	.word	0x20000210
 800165c:	2000025c 	.word	0x2000025c
 8001660:	48001000 	.word	0x48001000
 8001664:	20000094 	.word	0x20000094
 8001668:	200002a8 	.word	0x200002a8
 800166c:	200000c0 	.word	0x200000c0
 8001670:	200000db 	.word	0x200000db
 8001674:	200000da 	.word	0x200000da
 8001678:	20000090 	.word	0x20000090
 800167c:	40900000 	.word	0x40900000
 8001680:	c0900000 	.word	0xc0900000
 8001684:	40590000 	.word	0x40590000
 8001688:	2000008d 	.word	0x2000008d
 800168c:	2000008c 	.word	0x2000008c
 8001690:	2000008f 	.word	0x2000008f
 8001694:	2000008e 	.word	0x2000008e
        else if (auto_path_selection == RIGHT_PATH)
 8001698:	4b99      	ldr	r3, [pc, #612]	@ (8001900 <main+0x540>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d102      	bne.n	80016a6 <main+0x2e6>
          auto_path_selection = LEFT_PATH;
 80016a0:	4b97      	ldr	r3, [pc, #604]	@ (8001900 <main+0x540>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
      }  // auto, choose path, toggle left / right / straight forward
      prev_auto_path_switch = controller_state.share_button;
 80016a6:	4b97      	ldr	r3, [pc, #604]	@ (8001904 <main+0x544>)
 80016a8:	7dda      	ldrb	r2, [r3, #23]
 80016aa:	4b97      	ldr	r3, [pc, #604]	@ (8001908 <main+0x548>)
 80016ac:	701a      	strb	r2, [r3, #0]

      if (controller_state.left && !controller_state.right && !controller_state.up && !controller_state.down) {
 80016ae:	4b95      	ldr	r3, [pc, #596]	@ (8001904 <main+0x544>)
 80016b0:	7b1b      	ldrb	r3, [r3, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d02b      	beq.n	800170e <main+0x34e>
 80016b6:	4b93      	ldr	r3, [pc, #588]	@ (8001904 <main+0x544>)
 80016b8:	7b5b      	ldrb	r3, [r3, #13]
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d024      	beq.n	800170e <main+0x34e>
 80016c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001904 <main+0x544>)
 80016c6:	7a9b      	ldrb	r3, [r3, #10]
 80016c8:	f083 0301 	eor.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d01d      	beq.n	800170e <main+0x34e>
 80016d2:	4b8c      	ldr	r3, [pc, #560]	@ (8001904 <main+0x544>)
 80016d4:	7adb      	ldrb	r3, [r3, #11]
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d016      	beq.n	800170e <main+0x34e>
        BaseVelocity target_vel = {0, ROBOT_MAX_X_VELOCITY * 0.25, 0};  // move to the left
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016e6:	4b89      	ldr	r3, [pc, #548]	@ (800190c <main+0x54c>)
 80016e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	663b      	str	r3, [r7, #96]	@ 0x60
        movement_control(target_vel);
 80016f0:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80016f4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80016f8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80016fc:	eeb0 0a66 	vmov.f32	s0, s13
 8001700:	eef0 0a47 	vmov.f32	s1, s14
 8001704:	eeb0 1a67 	vmov.f32	s2, s15
 8001708:	f000 feea 	bl	80024e0 <movement_control>
      if (controller_state.left && !controller_state.right && !controller_state.up && !controller_state.down) {
 800170c:	e235      	b.n	8001b7a <main+0x7ba>
      } else if (!controller_state.left && controller_state.right && !controller_state.up && !controller_state.down) {
 800170e:	4b7d      	ldr	r3, [pc, #500]	@ (8001904 <main+0x544>)
 8001710:	7b1b      	ldrb	r3, [r3, #12]
 8001712:	f083 0301 	eor.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d028      	beq.n	800176e <main+0x3ae>
 800171c:	4b79      	ldr	r3, [pc, #484]	@ (8001904 <main+0x544>)
 800171e:	7b5b      	ldrb	r3, [r3, #13]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d024      	beq.n	800176e <main+0x3ae>
 8001724:	4b77      	ldr	r3, [pc, #476]	@ (8001904 <main+0x544>)
 8001726:	7a9b      	ldrb	r3, [r3, #10]
 8001728:	f083 0301 	eor.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01d      	beq.n	800176e <main+0x3ae>
 8001732:	4b74      	ldr	r3, [pc, #464]	@ (8001904 <main+0x544>)
 8001734:	7adb      	ldrb	r3, [r3, #11]
 8001736:	f083 0301 	eor.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d016      	beq.n	800176e <main+0x3ae>
        BaseVelocity target_vel = {0, -ROBOT_MAX_X_VELOCITY * 0.25, 0};  // move to the right
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001746:	4b72      	ldr	r3, [pc, #456]	@ (8001910 <main+0x550>)
 8001748:	653b      	str	r3, [r7, #80]	@ 0x50
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	657b      	str	r3, [r7, #84]	@ 0x54
        movement_control(target_vel);
 8001750:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001754:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001758:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800175c:	eeb0 0a66 	vmov.f32	s0, s13
 8001760:	eef0 0a47 	vmov.f32	s1, s14
 8001764:	eeb0 1a67 	vmov.f32	s2, s15
 8001768:	f000 feba 	bl	80024e0 <movement_control>
      } else if (!controller_state.left && controller_state.right && !controller_state.up && !controller_state.down) {
 800176c:	e205      	b.n	8001b7a <main+0x7ba>
      } else if (!controller_state.left && !controller_state.right && controller_state.up && !controller_state.down) {
 800176e:	4b65      	ldr	r3, [pc, #404]	@ (8001904 <main+0x544>)
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	f083 0301 	eor.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d028      	beq.n	80017ce <main+0x40e>
 800177c:	4b61      	ldr	r3, [pc, #388]	@ (8001904 <main+0x544>)
 800177e:	7b5b      	ldrb	r3, [r3, #13]
 8001780:	f083 0301 	eor.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d021      	beq.n	80017ce <main+0x40e>
 800178a:	4b5e      	ldr	r3, [pc, #376]	@ (8001904 <main+0x544>)
 800178c:	7a9b      	ldrb	r3, [r3, #10]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01d      	beq.n	80017ce <main+0x40e>
 8001792:	4b5c      	ldr	r3, [pc, #368]	@ (8001904 <main+0x544>)
 8001794:	7adb      	ldrb	r3, [r3, #11]
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d016      	beq.n	80017ce <main+0x40e>
        BaseVelocity target_vel = {ROBOT_MAX_Y_VELOCITY * 0.25, 0, 0};  // move forward
 80017a0:	4b5a      	ldr	r3, [pc, #360]	@ (800190c <main+0x54c>)
 80017a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	64bb      	str	r3, [r7, #72]	@ 0x48
        movement_control(target_vel);
 80017b0:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80017b4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80017b8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80017bc:	eeb0 0a66 	vmov.f32	s0, s13
 80017c0:	eef0 0a47 	vmov.f32	s1, s14
 80017c4:	eeb0 1a67 	vmov.f32	s2, s15
 80017c8:	f000 fe8a 	bl	80024e0 <movement_control>
      } else if (!controller_state.left && !controller_state.right && controller_state.up && !controller_state.down) {
 80017cc:	e1d5      	b.n	8001b7a <main+0x7ba>
      } else if (!controller_state.left && !controller_state.right && !controller_state.up && controller_state.down) {
 80017ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001904 <main+0x544>)
 80017d0:	7b1b      	ldrb	r3, [r3, #12]
 80017d2:	f083 0301 	eor.w	r3, r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d028      	beq.n	800182e <main+0x46e>
 80017dc:	4b49      	ldr	r3, [pc, #292]	@ (8001904 <main+0x544>)
 80017de:	7b5b      	ldrb	r3, [r3, #13]
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d021      	beq.n	800182e <main+0x46e>
 80017ea:	4b46      	ldr	r3, [pc, #280]	@ (8001904 <main+0x544>)
 80017ec:	7a9b      	ldrb	r3, [r3, #10]
 80017ee:	f083 0301 	eor.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01a      	beq.n	800182e <main+0x46e>
 80017f8:	4b42      	ldr	r3, [pc, #264]	@ (8001904 <main+0x544>)
 80017fa:	7adb      	ldrb	r3, [r3, #11]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d016      	beq.n	800182e <main+0x46e>
        BaseVelocity target_vel = {-ROBOT_MAX_Y_VELOCITY * 0.25, 0, 0};  // move backward
 8001800:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <main+0x550>)
 8001802:	637b      	str	r3, [r7, #52]	@ 0x34
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	63bb      	str	r3, [r7, #56]	@ 0x38
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        movement_control(target_vel);
 8001810:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001814:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001818:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800181c:	eeb0 0a66 	vmov.f32	s0, s13
 8001820:	eef0 0a47 	vmov.f32	s1, s14
 8001824:	eeb0 1a67 	vmov.f32	s2, s15
 8001828:	f000 fe5a 	bl	80024e0 <movement_control>
      } else if (!controller_state.left && !controller_state.right && !controller_state.up && controller_state.down) {
 800182c:	e1a5      	b.n	8001b7a <main+0x7ba>
      } else if (controller_state.l_stick_x == 0 && controller_state.l_stick_y == 0 && rotation_vel != 0 && !controller_state.r1 && !controller_state.l1) {  // rotate
 800182e:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <main+0x544>)
 8001830:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d171      	bne.n	800191c <main+0x55c>
 8001838:	4b32      	ldr	r3, [pc, #200]	@ (8001904 <main+0x544>)
 800183a:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d16c      	bne.n	800191c <main+0x55c>
 8001842:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001846:	eef5 7a40 	vcmp.f32	s15, #0.0
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	d065      	beq.n	800191c <main+0x55c>
 8001850:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <main+0x544>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	f083 0301 	eor.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d05e      	beq.n	800191c <main+0x55c>
 800185e:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <main+0x544>)
 8001860:	78db      	ldrb	r3, [r3, #3]
 8001862:	f083 0301 	eor.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d057      	beq.n	800191c <main+0x55c>
        BaseVelocity target_vel = {0, 0, rotation_vel / 100.0 * ROBOT_MAX_Z_VELOCITY * 0.5};
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001878:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800187a:	f7fe fe8d 	bl	8000598 <__aeabi_f2d>
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <main+0x554>)
 8001884:	f7ff f80a 	bl	800089c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	a317      	add	r3, pc, #92	@ (adr r3, 80018f0 <main+0x530>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fed7 	bl	8000648 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	a315      	add	r3, pc, #84	@ (adr r3, 80018f8 <main+0x538>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe fece 	bl	8000648 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <main+0x558>)
 80018ba:	f7fe fec5 	bl	8000648 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f8f9 	bl	8000abc <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	633b      	str	r3, [r7, #48]	@ 0x30
        movement_control(target_vel);
 80018ce:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80018d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80018d6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80018da:	eeb0 0a66 	vmov.f32	s0, s13
 80018de:	eef0 0a47 	vmov.f32	s1, s14
 80018e2:	eeb0 1a67 	vmov.f32	s2, s15
 80018e6:	f000 fdfb 	bl	80024e0 <movement_control>
      } else if (controller_state.l_stick_x == 0 && controller_state.l_stick_y == 0 && rotation_vel != 0 && !controller_state.r1 && !controller_state.l1) {  // rotate
 80018ea:	e146      	b.n	8001b7a <main+0x7ba>
 80018ec:	f3af 8000 	nop.w
 80018f0:	3d70a3d7 	.word	0x3d70a3d7
 80018f4:	4052070a 	.word	0x4052070a
 80018f8:	9999999a 	.word	0x9999999a
 80018fc:	3fc99999 	.word	0x3fc99999
 8001900:	20000090 	.word	0x20000090
 8001904:	200000c0 	.word	0x200000c0
 8001908:	2000008f 	.word	0x2000008f
 800190c:	3f3f0a3d 	.word	0x3f3f0a3d
 8001910:	bf3f0a3d 	.word	0xbf3f0a3d
 8001914:	40590000 	.word	0x40590000
 8001918:	3fe00000 	.word	0x3fe00000
      } else if (controller_state.r_stick_x == 0 && controller_state.r_stick_y == 0 && !controller_state.r1 && !controller_state.l1) {  // move fastly
 800191c:	4bb4      	ldr	r3, [pc, #720]	@ (8001bf0 <main+0x830>)
 800191e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 8081 	bne.w	8001a2a <main+0x66a>
 8001928:	4bb1      	ldr	r3, [pc, #708]	@ (8001bf0 <main+0x830>)
 800192a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d17b      	bne.n	8001a2a <main+0x66a>
 8001932:	4baf      	ldr	r3, [pc, #700]	@ (8001bf0 <main+0x830>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f083 0301 	eor.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d074      	beq.n	8001a2a <main+0x66a>
 8001940:	4bab      	ldr	r3, [pc, #684]	@ (8001bf0 <main+0x830>)
 8001942:	78db      	ldrb	r3, [r3, #3]
 8001944:	f083 0301 	eor.w	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d06d      	beq.n	8001a2a <main+0x66a>
        BaseVelocity target_vel = {controller_state.l_stick_y / 100.0 * ROBOT_MAX_Y_VELOCITY * 0.65,
 800194e:	4ba8      	ldr	r3, [pc, #672]	@ (8001bf0 <main+0x830>)
 8001950:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe0d 	bl	8000574 <__aeabi_i2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4ba5      	ldr	r3, [pc, #660]	@ (8001bf4 <main+0x834>)
 8001960:	f7fe ff9c 	bl	800089c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	a39a      	add	r3, pc, #616	@ (adr r3, 8001bd8 <main+0x818>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fe69 	bl	8000648 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	a398      	add	r3, pc, #608	@ (adr r3, 8001be0 <main+0x820>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe60 	bl	8000648 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	a395      	add	r3, pc, #596	@ (adr r3, 8001be8 <main+0x828>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fe57 	bl	8000648 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff f88b 	bl	8000abc <__aeabi_d2f>
 80019a6:	4603      	mov	r3, r0
 80019a8:	61fb      	str	r3, [r7, #28]
                                   controller_state.l_stick_x / 100.0 * ROBOT_MAX_X_VELOCITY * 0.65,
 80019aa:	4b91      	ldr	r3, [pc, #580]	@ (8001bf0 <main+0x830>)
 80019ac:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fddf 	bl	8000574 <__aeabi_i2d>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b8e      	ldr	r3, [pc, #568]	@ (8001bf4 <main+0x834>)
 80019bc:	f7fe ff6e 	bl	800089c <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	a383      	add	r3, pc, #524	@ (adr r3, 8001bd8 <main+0x818>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7fe fe3b 	bl	8000648 <__aeabi_dmul>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	a381      	add	r3, pc, #516	@ (adr r3, 8001be0 <main+0x820>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fe32 	bl	8000648 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	a37e      	add	r3, pc, #504	@ (adr r3, 8001be8 <main+0x828>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fe29 	bl	8000648 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f85d 	bl	8000abc <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
        BaseVelocity target_vel = {controller_state.l_stick_y / 100.0 * ROBOT_MAX_Y_VELOCITY * 0.65,
 8001a04:	623b      	str	r3, [r7, #32]
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
                                   0};
        movement_control(target_vel);
 8001a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a10:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a18:	eeb0 0a66 	vmov.f32	s0, s13
 8001a1c:	eef0 0a47 	vmov.f32	s1, s14
 8001a20:	eeb0 1a67 	vmov.f32	s2, s15
 8001a24:	f000 fd5c 	bl	80024e0 <movement_control>
      } else if (controller_state.r_stick_x == 0 && controller_state.r_stick_y == 0 && !controller_state.r1 && !controller_state.l1) {  // move fastly
 8001a28:	e0a7      	b.n	8001b7a <main+0x7ba>
      } else if (!controller_state.r1 && !controller_state.l1) {  // move slowly
 8001a2a:	4b71      	ldr	r3, [pc, #452]	@ (8001bf0 <main+0x830>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	f083 0301 	eor.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d074      	beq.n	8001b22 <main+0x762>
 8001a38:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf0 <main+0x830>)
 8001a3a:	78db      	ldrb	r3, [r3, #3]
 8001a3c:	f083 0301 	eor.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d06d      	beq.n	8001b22 <main+0x762>
        BaseVelocity target_vel = {controller_state.r_stick_y / 100.0 * ROBOT_MAX_Y_VELOCITY * 0.4,
 8001a46:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf0 <main+0x830>)
 8001a48:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd91 	bl	8000574 <__aeabi_i2d>
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b67      	ldr	r3, [pc, #412]	@ (8001bf4 <main+0x834>)
 8001a58:	f7fe ff20 	bl	800089c <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	a35c      	add	r3, pc, #368	@ (adr r3, 8001bd8 <main+0x818>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fded 	bl	8000648 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	a35a      	add	r3, pc, #360	@ (adr r3, 8001be0 <main+0x820>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fde4 	bl	8000648 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	a355      	add	r3, pc, #340	@ (adr r3, 8001be0 <main+0x820>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fddb 	bl	8000648 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f80f 	bl	8000abc <__aeabi_d2f>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	613b      	str	r3, [r7, #16]
                                   controller_state.r_stick_x / 100.0 * ROBOT_MAX_X_VELOCITY * 0.4,
 8001aa2:	4b53      	ldr	r3, [pc, #332]	@ (8001bf0 <main+0x830>)
 8001aa4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd63 	bl	8000574 <__aeabi_i2d>
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b50      	ldr	r3, [pc, #320]	@ (8001bf4 <main+0x834>)
 8001ab4:	f7fe fef2 	bl	800089c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	a345      	add	r3, pc, #276	@ (adr r3, 8001bd8 <main+0x818>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fdbf 	bl	8000648 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	a343      	add	r3, pc, #268	@ (adr r3, 8001be0 <main+0x820>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fdb6 	bl	8000648 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	a33e      	add	r3, pc, #248	@ (adr r3, 8001be0 <main+0x820>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fdad 	bl	8000648 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7fe ffe1 	bl	8000abc <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
        BaseVelocity target_vel = {controller_state.r_stick_y / 100.0 * ROBOT_MAX_Y_VELOCITY * 0.4,
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
                                   0};
        movement_control(target_vel);
 8001b04:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b08:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b10:	eeb0 0a66 	vmov.f32	s0, s13
 8001b14:	eef0 0a47 	vmov.f32	s1, s14
 8001b18:	eeb0 1a67 	vmov.f32	s2, s15
 8001b1c:	f000 fce0 	bl	80024e0 <movement_control>
      } else if (!controller_state.r1 && !controller_state.l1) {  // move slowly
 8001b20:	e02b      	b.n	8001b7a <main+0x7ba>
      } else if (controller_state.l1 || controller_state.r1) {  // rotate slowly
 8001b22:	4b33      	ldr	r3, [pc, #204]	@ (8001bf0 <main+0x830>)
 8001b24:	78db      	ldrb	r3, [r3, #3]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <main+0x772>
 8001b2a:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <main+0x830>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d023      	beq.n	8001b7a <main+0x7ba>
        BaseVelocity target_vel = {0, 0, 0};
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
        if (controller_state.l1)
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <main+0x830>)
 8001b46:	78db      	ldrb	r3, [r3, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <main+0x792>
          target_vel.z_vel = ROBOT_MAX_Z_VELOCITY * 0.25;
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf8 <main+0x838>)
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e005      	b.n	8001b5e <main+0x79e>
        else if (controller_state.r1)
 8001b52:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <main+0x830>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <main+0x79e>
          target_vel.z_vel = ROBOT_MAX_Z_VELOCITY * -0.25;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <main+0x83c>)
 8001b5c:	60fb      	str	r3, [r7, #12]
        movement_control(target_vel);
 8001b5e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b62:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b66:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b6a:	eeb0 0a66 	vmov.f32	s0, s13
 8001b6e:	eef0 0a47 	vmov.f32	s1, s14
 8001b72:	eeb0 1a67 	vmov.f32	s2, s15
 8001b76:	f000 fcb3 	bl	80024e0 <movement_control>
      }

      if (controller_state.triangle) 
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <main+0x830>)
 8001b7c:	7a1b      	ldrb	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <main+0x7cc>
        linear_actuator_operation(&(linear_actuator[1]), LINEAR_ACUATOR_RETRACT);
 8001b82:	2101      	movs	r1, #1
 8001b84:	481e      	ldr	r0, [pc, #120]	@ (8001c00 <main+0x840>)
 8001b86:	f000 f885 	bl	8001c94 <linear_actuator_operation>
 8001b8a:	e00c      	b.n	8001ba6 <main+0x7e6>
      else if (controller_state.cross)
 8001b8c:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <main+0x830>)
 8001b8e:	799b      	ldrb	r3, [r3, #6]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <main+0x7de>
        linear_actuator_operation(&(linear_actuator[1]), LINEAR_ACUATOR_EXTEND);
 8001b94:	2100      	movs	r1, #0
 8001b96:	481a      	ldr	r0, [pc, #104]	@ (8001c00 <main+0x840>)
 8001b98:	f000 f87c 	bl	8001c94 <linear_actuator_operation>
 8001b9c:	e003      	b.n	8001ba6 <main+0x7e6>
      else 
        linear_actuator_operation(&(linear_actuator[1]), LINEAR_ACUATOR_IDLE);
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4817      	ldr	r0, [pc, #92]	@ (8001c00 <main+0x840>)
 8001ba2:	f000 f877 	bl	8001c94 <linear_actuator_operation>

      if (controller_state.square) 
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <main+0x830>)
 8001ba8:	7a5b      	ldrb	r3, [r3, #9]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <main+0x7f8>
        linear_actuator_operation(&(linear_actuator[0]), LINEAR_ACUATOR_RETRACT);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <main+0x844>)
 8001bb2:	f000 f86f 	bl	8001c94 <linear_actuator_operation>
 8001bb6:	e45d      	b.n	8001474 <main+0xb4>
      else if (controller_state.circle)
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <main+0x830>)
 8001bba:	79db      	ldrb	r3, [r3, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <main+0x80a>
        linear_actuator_operation(&(linear_actuator[0]), LINEAR_ACUATOR_EXTEND);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4810      	ldr	r0, [pc, #64]	@ (8001c04 <main+0x844>)
 8001bc4:	f000 f866 	bl	8001c94 <linear_actuator_operation>
 8001bc8:	e454      	b.n	8001474 <main+0xb4>
      else 
        linear_actuator_operation(&(linear_actuator[0]), LINEAR_ACUATOR_IDLE);
 8001bca:	2102      	movs	r1, #2
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <main+0x844>)
 8001bce:	f000 f861 	bl	8001c94 <linear_actuator_operation>
    HAL_Delay(1);
 8001bd2:	e44f      	b.n	8001474 <main+0xb4>
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	9999999a 	.word	0x9999999a
 8001bdc:	401dd999 	.word	0x401dd999
 8001be0:	9999999a 	.word	0x9999999a
 8001be4:	3fd99999 	.word	0x3fd99999
 8001be8:	cccccccd 	.word	0xcccccccd
 8001bec:	3fe4cccc 	.word	0x3fe4cccc
 8001bf0:	200000c0 	.word	0x200000c0
 8001bf4:	40590000 	.word	0x40590000
 8001bf8:	4066c083 	.word	0x4066c083
 8001bfc:	c066c083 	.word	0xc066c083
 8001c00:	20000004 	.word	0x20000004
 8001c04:	20000000 	.word	0x20000000

08001c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b094      	sub	sp, #80	@ 0x50
 8001c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	2238      	movs	r2, #56	@ 0x38
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 ff84 	bl	8006b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c2e:	f001 fd19 	bl	8003664 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c3c:	2340      	movs	r3, #64	@ 0x40
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fdbf 	bl	80037cc <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001c54:	f000 f818 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c58:	230f      	movs	r3, #15
 8001c5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 f8bd 	bl	8003df0 <HAL_RCC_ClockConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001c7c:	f000 f804 	bl	8001c88 <Error_Handler>
  }
}
 8001c80:	bf00      	nop
 8001c82:	3750      	adds	r7, #80	@ 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <Error_Handler+0x8>

08001c94 <linear_actuator_operation>:
#include "mech.h"

LinearActuator linear_actuator[2] = {{.id = 0},
                                     {.id = 1}};

void linear_actuator_operation(LinearActuator *actuator, LinearActuatorOperation operation) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
  switch (operation) {
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d048      	beq.n	8001d38 <linear_actuator_operation+0xa4>
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	dc67      	bgt.n	8001d7a <linear_actuator_operation+0xe6>
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <linear_actuator_operation+0x20>
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d021      	beq.n	8001cf6 <linear_actuator_operation+0x62>
 8001cb2:	e062      	b.n	8001d7a <linear_actuator_operation+0xe6>
    case LINEAR_ACUATOR_EXTEND:
      if (actuator->id == 0) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10b      	bne.n	8001cd4 <linear_actuator_operation+0x40>
        HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cc2:	4844      	ldr	r0, [pc, #272]	@ (8001dd4 <linear_actuator_operation+0x140>)
 8001cc4:	f001 fcb6 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LINEAR_ACT_1_2_GPIO_Port, LINEAR_ACT_1_2_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2104      	movs	r1, #4
 8001ccc:	4842      	ldr	r0, [pc, #264]	@ (8001dd8 <linear_actuator_operation+0x144>)
 8001cce:	f001 fcb1 	bl	8003634 <HAL_GPIO_WritePin>
      } else if (actuator->id == 1) {
        HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);
      }
      break;
 8001cd2:	e073      	b.n	8001dbc <linear_actuator_operation+0x128>
      } else if (actuator->id == 1) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d16f      	bne.n	8001dbc <linear_actuator_operation+0x128>
        HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ce2:	483d      	ldr	r0, [pc, #244]	@ (8001dd8 <linear_actuator_operation+0x144>)
 8001ce4:	f001 fca6 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cee:	483b      	ldr	r0, [pc, #236]	@ (8001ddc <linear_actuator_operation+0x148>)
 8001cf0:	f001 fca0 	bl	8003634 <HAL_GPIO_WritePin>
      break;
 8001cf4:	e062      	b.n	8001dbc <linear_actuator_operation+0x128>
    case LINEAR_ACUATOR_RETRACT:
      if (actuator->id == 0) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <linear_actuator_operation+0x82>
        HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d04:	4833      	ldr	r0, [pc, #204]	@ (8001dd4 <linear_actuator_operation+0x140>)
 8001d06:	f001 fc95 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LINEAR_ACT_1_2_GPIO_Port, LINEAR_ACT_1_2_Pin, GPIO_PIN_SET);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	4832      	ldr	r0, [pc, #200]	@ (8001dd8 <linear_actuator_operation+0x144>)
 8001d10:	f001 fc90 	bl	8003634 <HAL_GPIO_WritePin>
      } else if (actuator->id == 1) {
        HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_SET);
      }
      break;
 8001d14:	e054      	b.n	8001dc0 <linear_actuator_operation+0x12c>
      } else if (actuator->id == 1) {
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d150      	bne.n	8001dc0 <linear_actuator_operation+0x12c>
        HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d24:	482c      	ldr	r0, [pc, #176]	@ (8001dd8 <linear_actuator_operation+0x144>)
 8001d26:	f001 fc85 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d30:	482a      	ldr	r0, [pc, #168]	@ (8001ddc <linear_actuator_operation+0x148>)
 8001d32:	f001 fc7f 	bl	8003634 <HAL_GPIO_WritePin>
      break;
 8001d36:	e043      	b.n	8001dc0 <linear_actuator_operation+0x12c>
    case LINEAR_ACUATOR_IDLE:
      if (actuator->id == 0) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10b      	bne.n	8001d58 <linear_actuator_operation+0xc4>
        HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d46:	4823      	ldr	r0, [pc, #140]	@ (8001dd4 <linear_actuator_operation+0x140>)
 8001d48:	f001 fc74 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LINEAR_ACT_1_2_GPIO_Port, LINEAR_ACT_1_2_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4821      	ldr	r0, [pc, #132]	@ (8001dd8 <linear_actuator_operation+0x144>)
 8001d52:	f001 fc6f 	bl	8003634 <HAL_GPIO_WritePin>
      } else if (actuator->id == 1) {
        HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);
      }
      break;
 8001d56:	e035      	b.n	8001dc4 <linear_actuator_operation+0x130>
      } else if (actuator->id == 1) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d131      	bne.n	8001dc4 <linear_actuator_operation+0x130>
        HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d66:	481c      	ldr	r0, [pc, #112]	@ (8001dd8 <linear_actuator_operation+0x144>)
 8001d68:	f001 fc64 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d72:	481a      	ldr	r0, [pc, #104]	@ (8001ddc <linear_actuator_operation+0x148>)
 8001d74:	f001 fc5e 	bl	8003634 <HAL_GPIO_WritePin>
      break;
 8001d78:	e024      	b.n	8001dc4 <linear_actuator_operation+0x130>
    default:
      if (actuator->id == 0) {
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <linear_actuator_operation+0x106>
        HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d88:	4812      	ldr	r0, [pc, #72]	@ (8001dd4 <linear_actuator_operation+0x140>)
 8001d8a:	f001 fc53 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LINEAR_ACT_1_2_GPIO_Port, LINEAR_ACT_1_2_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2104      	movs	r1, #4
 8001d92:	4811      	ldr	r0, [pc, #68]	@ (8001dd8 <linear_actuator_operation+0x144>)
 8001d94:	f001 fc4e 	bl	8003634 <HAL_GPIO_WritePin>
      } else if (actuator->id == 1) {
        HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);
      }
      break;
 8001d98:	e016      	b.n	8001dc8 <linear_actuator_operation+0x134>
      } else if (actuator->id == 1) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d112      	bne.n	8001dc8 <linear_actuator_operation+0x134>
        HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001da8:	480b      	ldr	r0, [pc, #44]	@ (8001dd8 <linear_actuator_operation+0x144>)
 8001daa:	f001 fc43 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001db4:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <linear_actuator_operation+0x148>)
 8001db6:	f001 fc3d 	bl	8003634 <HAL_GPIO_WritePin>
      break;
 8001dba:	e005      	b.n	8001dc8 <linear_actuator_operation+0x134>
      break;
 8001dbc:	bf00      	nop
 8001dbe:	e004      	b.n	8001dca <linear_actuator_operation+0x136>
      break;
 8001dc0:	bf00      	nop
 8001dc2:	e002      	b.n	8001dca <linear_actuator_operation+0x136>
      break;
 8001dc4:	bf00      	nop
 8001dc6:	e000      	b.n	8001dca <linear_actuator_operation+0x136>
      break;
 8001dc8:	bf00      	nop
  }
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	48000800 	.word	0x48000800
 8001dd8:	48001400 	.word	0x48001400
 8001ddc:	48001000 	.word	0x48001000

08001de0 <base2wheel>:
#include "movement.h"

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b094      	sub	sp, #80	@ 0x50
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	eef0 6a40 	vmov.f32	s13, s0
 8001dea:	eeb0 7a60 	vmov.f32	s14, s1
 8001dee:	eef0 7a41 	vmov.f32	s15, s2
 8001df2:	edc7 6a05 	vstr	s13, [r7, #20]
 8001df6:	ed87 7a06 	vstr	s14, [r7, #24]
 8001dfa:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = (base_vel.x_vel - base_vel.y_vel - (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y) * base_vel.z_vel) / RADIUS_WHEEL;
 8001dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	ee17 0a90 	vmov	r0, s15
 8001e0e:	f7fe fbc3 	bl	8000598 <__aeabi_f2d>
 8001e12:	4604      	mov	r4, r0
 8001e14:	460d      	mov	r5, r1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbbd 	bl	8000598 <__aeabi_f2d>
 8001e1e:	a360      	add	r3, pc, #384	@ (adr r3, 8001fa0 <base2wheel+0x1c0>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fc10 	bl	8000648 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe fa52 	bl	80002d8 <__aeabi_dsub>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	a35a      	add	r3, pc, #360	@ (adr r3, 8001fa8 <base2wheel+0x1c8>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fd2b 	bl	800089c <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f7fe fe35 	bl	8000abc <__aeabi_d2f>
 8001e52:	4603      	mov	r3, r0
 8001e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float front_right = (base_vel.x_vel + base_vel.y_vel + (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y) * base_vel.z_vel) / RADIUS_WHEEL;
 8001e56:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e62:	ee17 0a90 	vmov	r0, s15
 8001e66:	f7fe fb97 	bl	8000598 <__aeabi_f2d>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	460d      	mov	r5, r1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb91 	bl	8000598 <__aeabi_f2d>
 8001e76:	a34a      	add	r3, pc, #296	@ (adr r3, 8001fa0 <base2wheel+0x1c0>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	f7fe fbe4 	bl	8000648 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4620      	mov	r0, r4
 8001e86:	4629      	mov	r1, r5
 8001e88:	f7fe fa28 	bl	80002dc <__adddf3>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	a344      	add	r3, pc, #272	@ (adr r3, 8001fa8 <base2wheel+0x1c8>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fcff 	bl	800089c <__aeabi_ddiv>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7fe fe09 	bl	8000abc <__aeabi_d2f>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	64bb      	str	r3, [r7, #72]	@ 0x48
  float rear_left = (base_vel.x_vel + base_vel.y_vel - (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y) * base_vel.z_vel) / RADIUS_WHEEL;
 8001eae:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eba:	ee17 0a90 	vmov	r0, s15
 8001ebe:	f7fe fb6b 	bl	8000598 <__aeabi_f2d>
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	460d      	mov	r5, r1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb65 	bl	8000598 <__aeabi_f2d>
 8001ece:	a334      	add	r3, pc, #208	@ (adr r3, 8001fa0 <base2wheel+0x1c0>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fbb8 	bl	8000648 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4620      	mov	r0, r4
 8001ede:	4629      	mov	r1, r5
 8001ee0:	f7fe f9fa 	bl	80002d8 <__aeabi_dsub>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	a32e      	add	r3, pc, #184	@ (adr r3, 8001fa8 <base2wheel+0x1c8>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe fcd3 	bl	800089c <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fddd 	bl	8000abc <__aeabi_d2f>
 8001f02:	4603      	mov	r3, r0
 8001f04:	647b      	str	r3, [r7, #68]	@ 0x44
  float rear_right = (base_vel.x_vel - base_vel.y_vel + (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y) * base_vel.z_vel) / RADIUS_WHEEL;
 8001f06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f12:	ee17 0a90 	vmov	r0, s15
 8001f16:	f7fe fb3f 	bl	8000598 <__aeabi_f2d>
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	460d      	mov	r5, r1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fb39 	bl	8000598 <__aeabi_f2d>
 8001f26:	a31e      	add	r3, pc, #120	@ (adr r3, 8001fa0 <base2wheel+0x1c0>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe fb8c 	bl	8000648 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4620      	mov	r0, r4
 8001f36:	4629      	mov	r1, r5
 8001f38:	f7fe f9d0 	bl	80002dc <__adddf3>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	a318      	add	r3, pc, #96	@ (adr r3, 8001fa8 <base2wheel+0x1c8>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe fca7 	bl	800089c <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe fdb1 	bl	8000abc <__aeabi_d2f>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	643b      	str	r3, [r7, #64]	@ 0x40
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8001f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001f72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f76:	ee06 0a10 	vmov	s12, r0
 8001f7a:	ee06 1a90 	vmov	s13, r1
 8001f7e:	ee07 2a10 	vmov	s14, r2
 8001f82:	ee07 3a90 	vmov	s15, r3
}
 8001f86:	eeb0 0a46 	vmov.f32	s0, s12
 8001f8a:	eef0 0a66 	vmov.f32	s1, s13
 8001f8e:	eeb0 1a47 	vmov.f32	s2, s14
 8001f92:	eef0 1a67 	vmov.f32	s3, s15
 8001f96:	3750      	adds	r7, #80	@ 0x50
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	b22d0e56 	.word	0xb22d0e56
 8001fa4:	3fc7ef9d 	.word	0x3fc7ef9d
 8001fa8:	33333333 	.word	0x33333333
 8001fac:	3fa33333 	.word	0x3fa33333

08001fb0 <wheel2pwm>:
  float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b08e      	sub	sp, #56	@ 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6178      	str	r0, [r7, #20]
 8001fb8:	eeb0 6a40 	vmov.f32	s12, s0
 8001fbc:	eef0 6a60 	vmov.f32	s13, s1
 8001fc0:	eeb0 7a41 	vmov.f32	s14, s2
 8001fc4:	eef0 7a61 	vmov.f32	s15, s3
 8001fc8:	ed87 6a01 	vstr	s12, [r7, #4]
 8001fcc:	edc7 6a02 	vstr	s13, [r7, #8]
 8001fd0:	ed87 7a03 	vstr	s14, [r7, #12]
 8001fd4:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fadc 	bl	8000598 <__aeabi_f2d>
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b92      	ldr	r3, [pc, #584]	@ (8002230 <wheel2pwm+0x280>)
 8001fe6:	f7fe fb2f 	bl	8000648 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	a38b      	add	r3, pc, #556	@ (adr r3, 8002220 <wheel2pwm+0x270>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe fc50 	bl	800089c <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	a388      	add	r3, pc, #544	@ (adr r3, 8002228 <wheel2pwm+0x278>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fc47 	bl	800089c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b86      	ldr	r3, [pc, #536]	@ (8002234 <wheel2pwm+0x284>)
 800201c:	f7fe fb14 	bl	8000648 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4614      	mov	r4, r2
 8002026:	461d      	mov	r5, r3
 8002028:	4b83      	ldr	r3, [pc, #524]	@ (8002238 <wheel2pwm+0x288>)
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa91 	bl	8000554 <__aeabi_ui2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4620      	mov	r0, r4
 8002038:	4629      	mov	r1, r5
 800203a:	f7fe fb05 	bl	8000648 <__aeabi_dmul>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	4b7a      	ldr	r3, [pc, #488]	@ (8002234 <wheel2pwm+0x284>)
 800204c:	f7fe fc26 	bl	800089c <__aeabi_ddiv>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f7fe fd08 	bl	8000a6c <__aeabi_d2iz>
 800205c:	4603      	mov	r3, r0
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa98 	bl	8000598 <__aeabi_f2d>
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b70      	ldr	r3, [pc, #448]	@ (8002230 <wheel2pwm+0x280>)
 800206e:	f7fe faeb 	bl	8000648 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	a369      	add	r3, pc, #420	@ (adr r3, 8002220 <wheel2pwm+0x270>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fc0c 	bl	800089c <__aeabi_ddiv>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	a366      	add	r3, pc, #408	@ (adr r3, 8002228 <wheel2pwm+0x278>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	f7fe fc03 	bl	800089c <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	4b64      	ldr	r3, [pc, #400]	@ (8002234 <wheel2pwm+0x284>)
 80020a4:	f7fe fad0 	bl	8000648 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	4b61      	ldr	r3, [pc, #388]	@ (8002238 <wheel2pwm+0x288>)
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa4d 	bl	8000554 <__aeabi_ui2d>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe fac1 	bl	8000648 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	4b58      	ldr	r3, [pc, #352]	@ (8002234 <wheel2pwm+0x284>)
 80020d4:	f7fe fbe2 	bl	800089c <__aeabi_ddiv>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fcc4 	bl	8000a6c <__aeabi_d2iz>
 80020e4:	4603      	mov	r3, r0
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fa54 	bl	8000598 <__aeabi_f2d>
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002230 <wheel2pwm+0x280>)
 80020f6:	f7fe faa7 	bl	8000648 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	a347      	add	r3, pc, #284	@ (adr r3, 8002220 <wheel2pwm+0x270>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fbc8 	bl	800089c <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	a344      	add	r3, pc, #272	@ (adr r3, 8002228 <wheel2pwm+0x278>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	f7fe fbbf 	bl	800089c <__aeabi_ddiv>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <wheel2pwm+0x284>)
 800212c:	f7fe fa8c 	bl	8000648 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4614      	mov	r4, r2
 8002136:	461d      	mov	r5, r3
 8002138:	4b3f      	ldr	r3, [pc, #252]	@ (8002238 <wheel2pwm+0x288>)
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fa09 	bl	8000554 <__aeabi_ui2d>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4620      	mov	r0, r4
 8002148:	4629      	mov	r1, r5
 800214a:	f7fe fa7d 	bl	8000648 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <wheel2pwm+0x284>)
 800215c:	f7fe fb9e 	bl	800089c <__aeabi_ddiv>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fc80 	bl	8000a6c <__aeabi_d2iz>
 800216c:	4603      	mov	r3, r0
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fa10 	bl	8000598 <__aeabi_f2d>
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <wheel2pwm+0x280>)
 800217e:	f7fe fa63 	bl	8000648 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	a325      	add	r3, pc, #148	@ (adr r3, 8002220 <wheel2pwm+0x270>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe fb84 	bl	800089c <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	a322      	add	r3, pc, #136	@ (adr r3, 8002228 <wheel2pwm+0x278>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	f7fe fb7b 	bl	800089c <__aeabi_ddiv>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <wheel2pwm+0x284>)
 80021b4:	f7fe fa48 	bl	8000648 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	461d      	mov	r5, r3
 80021c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f9c4 	bl	8000554 <__aeabi_ui2d>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe fa38 	bl	8000648 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <wheel2pwm+0x284>)
 80021e6:	f7fe fb59 	bl	800089c <__aeabi_ddiv>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7fe fc3b 	bl	8000a6c <__aeabi_d2iz>
 80021f6:	4603      	mov	r3, r0
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002210:	60da      	str	r2, [r3, #12]
}
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	3738      	adds	r7, #56	@ 0x38
 8002216:	46bd      	mov	sp, r7
 8002218:	bdb0      	pop	{r4, r5, r7, pc}
 800221a:	bf00      	nop
 800221c:	f3af 8000 	nop.w
 8002220:	54442d18 	.word	0x54442d18
 8002224:	401921fb 	.word	0x401921fb
 8002228:	7604ba60 	.word	0x7604ba60
 800222c:	409db13d 	.word	0x409db13d
 8002230:	404e0000 	.word	0x404e0000
 8002234:	40590000 	.word	0x40590000
 8002238:	40000400 	.word	0x40000400

0800223c <wheel_control>:

void wheel_control(MecanumWheel wheel, int speed) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if (speed > 65535)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800224e:	db03      	blt.n	8002258 <wheel_control+0x1c>
    speed = 65535;
 8002250:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	e005      	b.n	8002264 <wheel_control+0x28>
  else if (speed < -65535)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800225e:	dc01      	bgt.n	8002264 <wheel_control+0x28>
    speed = -65535;
 8002260:	4b8b      	ldr	r3, [pc, #556]	@ (8002490 <wheel_control+0x254>)
 8002262:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b03      	cmp	r3, #3
 8002268:	f200 80da 	bhi.w	8002420 <wheel_control+0x1e4>
 800226c:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <wheel_control+0x38>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	08002285 	.word	0x08002285
 8002278:	080022ed 	.word	0x080022ed
 800227c:	08002355 	.word	0x08002355
 8002280:	080023b7 	.word	0x080023b7
    case FRONT_LEFT:
      if (speed > 0) {
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	dd0c      	ble.n	80022a4 <wheel_control+0x68>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002290:	4880      	ldr	r0, [pc, #512]	@ (8002494 <wheel_control+0x258>)
 8002292:	f001 f9cf 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800229c:	487d      	ldr	r0, [pc, #500]	@ (8002494 <wheel_control+0x258>)
 800229e:	f001 f9c9 	bl	8003634 <HAL_GPIO_WritePin>
 80022a2:	e01b      	b.n	80022dc <wheel_control+0xa0>
      } else if (speed < 0) {
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da0c      	bge.n	80022c4 <wheel_control+0x88>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022b0:	4878      	ldr	r0, [pc, #480]	@ (8002494 <wheel_control+0x258>)
 80022b2:	f001 f9bf 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022bc:	4875      	ldr	r0, [pc, #468]	@ (8002494 <wheel_control+0x258>)
 80022be:	f001 f9b9 	bl	8003634 <HAL_GPIO_WritePin>
 80022c2:	e00b      	b.n	80022dc <wheel_control+0xa0>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ca:	4872      	ldr	r0, [pc, #456]	@ (8002494 <wheel_control+0x258>)
 80022cc:	f001 f9b2 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022d6:	486f      	ldr	r0, [pc, #444]	@ (8002494 <wheel_control+0x258>)
 80022d8:	f001 f9ac 	bl	8003634 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80022e2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80022e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002498 <wheel_control+0x25c>)
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80022ea:	e0cd      	b.n	8002488 <wheel_control+0x24c>
    case FRONT_RIGHT:
      if (speed < 0) {
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da0c      	bge.n	800230c <wheel_control+0xd0>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022f8:	4866      	ldr	r0, [pc, #408]	@ (8002494 <wheel_control+0x258>)
 80022fa:	f001 f99b 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002304:	4865      	ldr	r0, [pc, #404]	@ (800249c <wheel_control+0x260>)
 8002306:	f001 f995 	bl	8003634 <HAL_GPIO_WritePin>
 800230a:	e01b      	b.n	8002344 <wheel_control+0x108>
      } else if (speed > 0) {
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	dd0c      	ble.n	800232c <wheel_control+0xf0>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002318:	485e      	ldr	r0, [pc, #376]	@ (8002494 <wheel_control+0x258>)
 800231a:	f001 f98b 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_SET);
 800231e:	2201      	movs	r2, #1
 8002320:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002324:	485d      	ldr	r0, [pc, #372]	@ (800249c <wheel_control+0x260>)
 8002326:	f001 f985 	bl	8003634 <HAL_GPIO_WritePin>
 800232a:	e00b      	b.n	8002344 <wheel_control+0x108>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002332:	4858      	ldr	r0, [pc, #352]	@ (8002494 <wheel_control+0x258>)
 8002334:	f001 f97e 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800233e:	4857      	ldr	r0, [pc, #348]	@ (800249c <wheel_control+0x260>)
 8002340:	f001 f978 	bl	8003634 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800234a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800234e:	4b52      	ldr	r3, [pc, #328]	@ (8002498 <wheel_control+0x25c>)
 8002350:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8002352:	e099      	b.n	8002488 <wheel_control+0x24c>
    case REAR_LEFT:
      if (speed < 0) {
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	da0b      	bge.n	8002372 <wheel_control+0x136>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	2140      	movs	r1, #64	@ 0x40
 800235e:	484f      	ldr	r0, [pc, #316]	@ (800249c <wheel_control+0x260>)
 8002360:	f001 f968 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800236a:	484d      	ldr	r0, [pc, #308]	@ (80024a0 <wheel_control+0x264>)
 800236c:	f001 f962 	bl	8003634 <HAL_GPIO_WritePin>
 8002370:	e019      	b.n	80023a6 <wheel_control+0x16a>
      } else if (speed > 0) {
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	dd0b      	ble.n	8002390 <wheel_control+0x154>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	2140      	movs	r1, #64	@ 0x40
 800237c:	4847      	ldr	r0, [pc, #284]	@ (800249c <wheel_control+0x260>)
 800237e:	f001 f959 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002388:	4845      	ldr	r0, [pc, #276]	@ (80024a0 <wheel_control+0x264>)
 800238a:	f001 f953 	bl	8003634 <HAL_GPIO_WritePin>
 800238e:	e00a      	b.n	80023a6 <wheel_control+0x16a>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	2140      	movs	r1, #64	@ 0x40
 8002394:	4841      	ldr	r0, [pc, #260]	@ (800249c <wheel_control+0x260>)
 8002396:	f001 f94d 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023a0:	483f      	ldr	r0, [pc, #252]	@ (80024a0 <wheel_control+0x264>)
 80023a2:	f001 f947 	bl	8003634 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80023ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <wheel_control+0x25c>)
 80023b2:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 80023b4:	e068      	b.n	8002488 <wheel_control+0x24c>
    case REAR_RIGHT:
      if (speed < 0) {
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da0c      	bge.n	80023d6 <wheel_control+0x19a>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023c2:	4836      	ldr	r0, [pc, #216]	@ (800249c <wheel_control+0x260>)
 80023c4:	f001 f936 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 80023c8:	2200      	movs	r2, #0
 80023ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023ce:	4833      	ldr	r0, [pc, #204]	@ (800249c <wheel_control+0x260>)
 80023d0:	f001 f930 	bl	8003634 <HAL_GPIO_WritePin>
 80023d4:	e01b      	b.n	800240e <wheel_control+0x1d2>
      } else if (speed > 0) {
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	dd0c      	ble.n	80023f6 <wheel_control+0x1ba>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023e2:	482e      	ldr	r0, [pc, #184]	@ (800249c <wheel_control+0x260>)
 80023e4:	f001 f926 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023ee:	482b      	ldr	r0, [pc, #172]	@ (800249c <wheel_control+0x260>)
 80023f0:	f001 f920 	bl	8003634 <HAL_GPIO_WritePin>
 80023f4:	e00b      	b.n	800240e <wheel_control+0x1d2>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 80023f6:	2200      	movs	r2, #0
 80023f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023fc:	4827      	ldr	r0, [pc, #156]	@ (800249c <wheel_control+0x260>)
 80023fe:	f001 f919 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002408:	4824      	ldr	r0, [pc, #144]	@ (800249c <wheel_control+0x260>)
 800240a:	f001 f913 	bl	8003634 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002414:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800241c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800241e:	e033      	b.n	8002488 <wheel_control+0x24c>
    default:
      if (speed < 0) {
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da0c      	bge.n	8002440 <wheel_control+0x204>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800242c:	4819      	ldr	r0, [pc, #100]	@ (8002494 <wheel_control+0x258>)
 800242e:	f001 f901 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002438:	4816      	ldr	r0, [pc, #88]	@ (8002494 <wheel_control+0x258>)
 800243a:	f001 f8fb 	bl	8003634 <HAL_GPIO_WritePin>
 800243e:	e01b      	b.n	8002478 <wheel_control+0x23c>
      } else if (speed > 0) {
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	dd0c      	ble.n	8002460 <wheel_control+0x224>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800244c:	4811      	ldr	r0, [pc, #68]	@ (8002494 <wheel_control+0x258>)
 800244e:	f001 f8f1 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002458:	480e      	ldr	r0, [pc, #56]	@ (8002494 <wheel_control+0x258>)
 800245a:	f001 f8eb 	bl	8003634 <HAL_GPIO_WritePin>
 800245e:	e00b      	b.n	8002478 <wheel_control+0x23c>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002466:	480b      	ldr	r0, [pc, #44]	@ (8002494 <wheel_control+0x258>)
 8002468:	f001 f8e4 	bl	8003634 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002472:	4808      	ldr	r0, [pc, #32]	@ (8002494 <wheel_control+0x258>)
 8002474:	f001 f8de 	bl	8003634 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800247e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002482:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <wheel_control+0x25c>)
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002486:	bf00      	nop
  }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	ffff0001 	.word	0xffff0001
 8002494:	48000400 	.word	0x48000400
 8002498:	40000400 	.word	0x40000400
 800249c:	48001000 	.word	0x48001000
 80024a0:	48000c00 	.word	0x48000c00

080024a4 <wheels_control>:

void wheels_control(WheelPWM pwm) {
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	463c      	mov	r4, r7
 80024ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7ff fec1 	bl	800223c <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4619      	mov	r1, r3
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff febc 	bl	800223c <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4619      	mov	r1, r3
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7ff feb7 	bl	800223c <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4619      	mov	r1, r3
 80024d2:	2003      	movs	r0, #3
 80024d4:	f7ff feb2 	bl	800223c <wheel_control>
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	@ 0x30
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	eef0 6a40 	vmov.f32	s13, s0
 80024ea:	eeb0 7a60 	vmov.f32	s14, s1
 80024ee:	eef0 7a41 	vmov.f32	s15, s2
 80024f2:	edc7 6a01 	vstr	s13, [r7, #4]
 80024f6:	ed87 7a02 	vstr	s14, [r7, #8]
 80024fa:	edc7 7a03 	vstr	s15, [r7, #12]
  WheelVelocity target_vel = base2wheel(base_vel);
 80024fe:	edd7 6a01 	vldr	s13, [r7, #4]
 8002502:	ed97 7a02 	vldr	s14, [r7, #8]
 8002506:	edd7 7a03 	vldr	s15, [r7, #12]
 800250a:	eeb0 0a66 	vmov.f32	s0, s13
 800250e:	eef0 0a47 	vmov.f32	s1, s14
 8002512:	eeb0 1a67 	vmov.f32	s2, s15
 8002516:	f7ff fc63 	bl	8001de0 <base2wheel>
 800251a:	eeb0 6a40 	vmov.f32	s12, s0
 800251e:	eef0 6a60 	vmov.f32	s13, s1
 8002522:	eeb0 7a41 	vmov.f32	s14, s2
 8002526:	eef0 7a61 	vmov.f32	s15, s3
 800252a:	ed87 6a08 	vstr	s12, [r7, #32]
 800252e:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002532:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8002536:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
#if (PID_MODE == 1)
  WheelVelocity current_vel = read_current_velocity(encoders);
  WheelVelocity result_vel = pid_system(target_vel, current_vel);
  WheelPWM target_pwm = wheel2pwm(result_vel);
#else
  WheelPWM target_pwm = wheel2pwm(target_vel);
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	ed97 6a08 	vldr	s12, [r7, #32]
 8002542:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002546:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800254a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800254e:	eeb0 0a46 	vmov.f32	s0, s12
 8002552:	eef0 0a66 	vmov.f32	s1, s13
 8002556:	eeb0 1a47 	vmov.f32	s2, s14
 800255a:	eef0 1a67 	vmov.f32	s3, s15
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fd26 	bl	8001fb0 <wheel2pwm>
#endif
  wheels_control(target_pwm);
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800256a:	f7ff ff9b 	bl	80024a4 <wheels_control>
}
 800256e:	bf00      	nop
 8002570:	3730      	adds	r7, #48	@ 0x30
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_MspInit+0x44>)
 8002580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002582:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <HAL_MspInit+0x44>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6613      	str	r3, [r2, #96]	@ 0x60
 800258a:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <HAL_MspInit+0x44>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_MspInit+0x44>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	4a08      	ldr	r2, [pc, #32]	@ (80025bc <HAL_MspInit+0x44>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_MspInit+0x44>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025ae:	f001 f8fd 	bl	80037ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <NMI_Handler+0x4>

080025c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <HardFault_Handler+0x4>

080025d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <MemManage_Handler+0x4>

080025d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002616:	f000 fd67 	bl	80030e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}

0800261e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e00a      	b.n	8002646 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002630:	f3af 8000 	nop.w
 8002634:	4601      	mov	r1, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	60ba      	str	r2, [r7, #8]
 800263c:	b2ca      	uxtb	r2, r1
 800263e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	dbf0      	blt.n	8002630 <_read+0x12>
  }

  return len;
 800264e:	687b      	ldr	r3, [r7, #4]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e009      	b.n	800267e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	60ba      	str	r2, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	dbf1      	blt.n	800266a <_write+0x12>
  }
  return len;
 8002686:	687b      	ldr	r3, [r7, #4]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_close>:

int _close(int file)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b8:	605a      	str	r2, [r3, #4]
  return 0;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_isatty>:

int _isatty(int file)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <_sbrk+0x5c>)
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <_sbrk+0x60>)
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <_sbrk+0x64>)
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <_sbrk+0x68>)
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	d207      	bcs.n	8002738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002728:	f004 fa4a 	bl	8006bc0 <__errno>
 800272c:	4603      	mov	r3, r0
 800272e:	220c      	movs	r2, #12
 8002730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002736:	e009      	b.n	800274c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	4a05      	ldr	r2, [pc, #20]	@ (800275c <_sbrk+0x64>)
 8002748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20020000 	.word	0x20020000
 8002758:	00000400 	.word	0x00000400
 800275c:	200000dc 	.word	0x200000dc
 8002760:	20000490 	.word	0x20000490

08002764 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <SystemInit+0x20>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	4a05      	ldr	r2, [pc, #20]	@ (8002784 <SystemInit+0x20>)
 8002770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	@ 0x30
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800278e:	f107 030c 	add.w	r3, r7, #12
 8002792:	2224      	movs	r2, #36	@ 0x24
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f004 f9c4 	bl	8006b24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279c:	463b      	mov	r3, r7
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027a6:	4b23      	ldr	r3, [pc, #140]	@ (8002834 <MX_TIM1_Init+0xac>)
 80027a8:	4a23      	ldr	r2, [pc, #140]	@ (8002838 <MX_TIM1_Init+0xb0>)
 80027aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ac:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <MX_TIM1_Init+0xac>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <MX_TIM1_Init+0xac>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <MX_TIM1_Init+0xac>)
 80027ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <MX_TIM1_Init+0xac>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <MX_TIM1_Init+0xac>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027cc:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <MX_TIM1_Init+0xac>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027da:	2301      	movs	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027ea:	2301      	movs	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80027f6:	f107 030c 	add.w	r3, r7, #12
 80027fa:	4619      	mov	r1, r3
 80027fc:	480d      	ldr	r0, [pc, #52]	@ (8002834 <MX_TIM1_Init+0xac>)
 80027fe:	f002 f943 	bl	8004a88 <HAL_TIM_Encoder_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002808:	f7ff fa3e 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002818:	463b      	mov	r3, r7
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	@ (8002834 <MX_TIM1_Init+0xac>)
 800281e:	f002 ff9f 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002828:	f7ff fa2e 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	3730      	adds	r7, #48	@ 0x30
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200000e0 	.word	0x200000e0
 8002838:	40012c00 	.word	0x40012c00

0800283c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	@ 0x28
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284e:	463b      	mov	r3, r7
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
 800285c:	615a      	str	r2, [r3, #20]
 800285e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002860:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <MX_TIM2_Init+0xb0>)
 8002862:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002868:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <MX_TIM2_Init+0xb0>)
 800286a:	2200      	movs	r2, #0
 800286c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286e:	4b1f      	ldr	r3, [pc, #124]	@ (80028ec <MX_TIM2_Init+0xb0>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002874:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <MX_TIM2_Init+0xb0>)
 8002876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800287a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <MX_TIM2_Init+0xb0>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002882:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <MX_TIM2_Init+0xb0>)
 8002884:	2280      	movs	r2, #128	@ 0x80
 8002886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002888:	4818      	ldr	r0, [pc, #96]	@ (80028ec <MX_TIM2_Init+0xb0>)
 800288a:	f001 ff93 	bl	80047b4 <HAL_TIM_PWM_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002894:	f7ff f9f8 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	4619      	mov	r1, r3
 80028a6:	4811      	ldr	r0, [pc, #68]	@ (80028ec <MX_TIM2_Init+0xb0>)
 80028a8:	f002 ff5a 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80028b2:	f7ff f9e9 	bl	8001c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b6:	2360      	movs	r3, #96	@ 0x60
 80028b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028c6:	463b      	mov	r3, r7
 80028c8:	2208      	movs	r2, #8
 80028ca:	4619      	mov	r1, r3
 80028cc:	4807      	ldr	r0, [pc, #28]	@ (80028ec <MX_TIM2_Init+0xb0>)
 80028ce:	f002 fa2f 	bl	8004d30 <HAL_TIM_PWM_ConfigChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80028d8:	f7ff f9d6 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028dc:	4803      	ldr	r0, [pc, #12]	@ (80028ec <MX_TIM2_Init+0xb0>)
 80028de:	f000 fa87 	bl	8002df0 <HAL_TIM_MspPostInit>

}
 80028e2:	bf00      	nop
 80028e4:	3728      	adds	r7, #40	@ 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000012c 	.word	0x2000012c

080028f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	@ 0x28
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002902:	463b      	mov	r3, r7
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
 8002910:	615a      	str	r2, [r3, #20]
 8002912:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002914:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 8002916:	4a2d      	ldr	r2, [pc, #180]	@ (80029cc <MX_TIM3_Init+0xdc>)
 8002918:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800291a:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002920:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002926:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 8002928:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800292c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292e:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002934:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 8002936:	2280      	movs	r2, #128	@ 0x80
 8002938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800293a:	4823      	ldr	r0, [pc, #140]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 800293c:	f001 ff3a 	bl	80047b4 <HAL_TIM_PWM_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002946:	f7ff f99f 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	481b      	ldr	r0, [pc, #108]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 800295a:	f002 ff01 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002964:	f7ff f990 	bl	8001c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002968:	2360      	movs	r3, #96	@ 0x60
 800296a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002978:	463b      	mov	r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	4619      	mov	r1, r3
 800297e:	4812      	ldr	r0, [pc, #72]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 8002980:	f002 f9d6 	bl	8004d30 <HAL_TIM_PWM_ConfigChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800298a:	f7ff f97d 	bl	8001c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800298e:	463b      	mov	r3, r7
 8002990:	2204      	movs	r2, #4
 8002992:	4619      	mov	r1, r3
 8002994:	480c      	ldr	r0, [pc, #48]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 8002996:	f002 f9cb 	bl	8004d30 <HAL_TIM_PWM_ConfigChannel>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80029a0:	f7ff f972 	bl	8001c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029a4:	463b      	mov	r3, r7
 80029a6:	220c      	movs	r2, #12
 80029a8:	4619      	mov	r1, r3
 80029aa:	4807      	ldr	r0, [pc, #28]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 80029ac:	f002 f9c0 	bl	8004d30 <HAL_TIM_PWM_ConfigChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80029b6:	f7ff f967 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029ba:	4803      	ldr	r0, [pc, #12]	@ (80029c8 <MX_TIM3_Init+0xd8>)
 80029bc:	f000 fa18 	bl	8002df0 <HAL_TIM_MspPostInit>

}
 80029c0:	bf00      	nop
 80029c2:	3728      	adds	r7, #40	@ 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000178 	.word	0x20000178
 80029cc:	40000400 	.word	0x40000400

080029d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	@ 0x30
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	2224      	movs	r2, #36	@ 0x24
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 f8a0 	bl	8006b24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e4:	463b      	mov	r3, r7
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029ee:	4b21      	ldr	r3, [pc, #132]	@ (8002a74 <MX_TIM4_Init+0xa4>)
 80029f0:	4a21      	ldr	r2, [pc, #132]	@ (8002a78 <MX_TIM4_Init+0xa8>)
 80029f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <MX_TIM4_Init+0xa4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <MX_TIM4_Init+0xa4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a00:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <MX_TIM4_Init+0xa4>)
 8002a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <MX_TIM4_Init+0xa4>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <MX_TIM4_Init+0xa4>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a14:	2301      	movs	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480d      	ldr	r0, [pc, #52]	@ (8002a74 <MX_TIM4_Init+0xa4>)
 8002a40:	f002 f822 	bl	8004a88 <HAL_TIM_Encoder_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002a4a:	f7ff f91d 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a56:	463b      	mov	r3, r7
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4806      	ldr	r0, [pc, #24]	@ (8002a74 <MX_TIM4_Init+0xa4>)
 8002a5c:	f002 fe80 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002a66:	f7ff f90f 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	3730      	adds	r7, #48	@ 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200001c4 	.word	0x200001c4
 8002a78:	40000800 	.word	0x40000800

08002a7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	@ 0x30
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a82:	f107 030c 	add.w	r3, r7, #12
 8002a86:	2224      	movs	r2, #36	@ 0x24
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 f84a 	bl	8006b24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a90:	463b      	mov	r3, r7
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a9a:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <MX_TIM5_Init+0xa4>)
 8002a9c:	4a21      	ldr	r2, [pc, #132]	@ (8002b24 <MX_TIM5_Init+0xa8>)
 8002a9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <MX_TIM5_Init+0xa4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <MX_TIM5_Init+0xa4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002aac:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <MX_TIM5_Init+0xa4>)
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ab2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <MX_TIM5_Init+0xa4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aba:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <MX_TIM5_Init+0xa4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480d      	ldr	r0, [pc, #52]	@ (8002b20 <MX_TIM5_Init+0xa4>)
 8002aec:	f001 ffcc 	bl	8004a88 <HAL_TIM_Encoder_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002af6:	f7ff f8c7 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b02:	463b      	mov	r3, r7
 8002b04:	4619      	mov	r1, r3
 8002b06:	4806      	ldr	r0, [pc, #24]	@ (8002b20 <MX_TIM5_Init+0xa4>)
 8002b08:	f002 fe2a 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002b12:	f7ff f8b9 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	3730      	adds	r7, #48	@ 0x30
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000210 	.word	0x20000210
 8002b24:	40000c00 	.word	0x40000c00

08002b28 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	@ 0x30
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	2224      	movs	r2, #36	@ 0x24
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 fff4 	bl	8006b24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b46:	4b23      	ldr	r3, [pc, #140]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002b48:	4a23      	ldr	r2, [pc, #140]	@ (8002bd8 <MX_TIM8_Init+0xb0>)
 8002b4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b4c:	4b21      	ldr	r3, [pc, #132]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b52:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002b58:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002b5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b60:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b66:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002b96:	f107 030c 	add.w	r3, r7, #12
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	480d      	ldr	r0, [pc, #52]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002b9e:	f001 ff73 	bl	8004a88 <HAL_TIM_Encoder_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002ba8:	f7ff f86e 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bac:	2300      	movs	r3, #0
 8002bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002bb8:	463b      	mov	r3, r7
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4805      	ldr	r0, [pc, #20]	@ (8002bd4 <MX_TIM8_Init+0xac>)
 8002bbe:	f002 fdcf 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002bc8:	f7ff f85e 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002bcc:	bf00      	nop
 8002bce:	3730      	adds	r7, #48	@ 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	2000025c 	.word	0x2000025c
 8002bd8:	40013400 	.word	0x40013400

08002bdc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b090      	sub	sp, #64	@ 0x40
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d70 <HAL_TIM_Encoder_MspInit+0x194>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d128      	bne.n	8002c50 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c02:	4a5c      	ldr	r2, [pc, #368]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	4b57      	ldr	r3, [pc, #348]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	4a56      	ldr	r2, [pc, #344]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c22:	4b54      	ldr	r3, [pc, #336]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c46:	4619      	mov	r1, r3
 8002c48:	484b      	ldr	r0, [pc, #300]	@ (8002d78 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002c4a:	f000 fb71 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002c4e:	e08a      	b.n	8002d66 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a49      	ldr	r2, [pc, #292]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d129      	bne.n	8002cae <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c5a:	4b46      	ldr	r3, [pc, #280]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5e:	4a45      	ldr	r2, [pc, #276]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c66:	4b43      	ldr	r3, [pc, #268]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c72:	4b40      	ldr	r3, [pc, #256]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	4a3f      	ldr	r2, [pc, #252]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c78:	f043 0308 	orr.w	r3, r3, #8
 8002c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002c8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4836      	ldr	r0, [pc, #216]	@ (8002d80 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8002ca8:	f000 fb42 	bl	8003330 <HAL_GPIO_Init>
}
 8002cac:	e05b      	b.n	8002d66 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a34      	ldr	r2, [pc, #208]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d129      	bne.n	8002d0c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002cbe:	f043 0308 	orr.w	r3, r3, #8
 8002cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	4b28      	ldr	r3, [pc, #160]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd4:	4a27      	ldr	r2, [pc, #156]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cdc:	4b25      	ldr	r3, [pc, #148]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d00:	4619      	mov	r1, r3
 8002d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d06:	f000 fb13 	bl	8003330 <HAL_GPIO_Init>
}
 8002d0a:	e02c      	b.n	8002d66 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1d      	ldr	r2, [pc, #116]	@ (8002d88 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d127      	bne.n	8002d66 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d16:	4b17      	ldr	r3, [pc, #92]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1a:	4a16      	ldr	r2, [pc, #88]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002d1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d22:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	4a10      	ldr	r2, [pc, #64]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <HAL_TIM_Encoder_MspInit+0x198>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d46:	23c0      	movs	r3, #192	@ 0xc0
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002d56:	2304      	movs	r3, #4
 8002d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d62:	f000 fae5 	bl	8003330 <HAL_GPIO_Init>
}
 8002d66:	bf00      	nop
 8002d68:	3740      	adds	r7, #64	@ 0x40
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	48000800 	.word	0x48000800
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	48000c00 	.word	0x48000c00
 8002d84:	40000c00 	.word	0x40000c00
 8002d88:	40013400 	.word	0x40013400

08002d8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9e:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da2:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002daa:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002db6:	e010      	b.n	8002dda <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002dec <HAL_TIM_PWM_MspInit+0x60>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10b      	bne.n	8002dda <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40000400 	.word	0x40000400

08002df0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	@ 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e10:	d11c      	bne.n	8002e4c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e12:	4b21      	ldr	r3, [pc, #132]	@ (8002e98 <HAL_TIM_MspPostInit+0xa8>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	4a20      	ldr	r2, [pc, #128]	@ (8002e98 <HAL_TIM_MspPostInit+0xa8>)
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <HAL_TIM_MspPostInit+0xa8>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RR_PWM_Pin;
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e3e:	f107 0314 	add.w	r3, r7, #20
 8002e42:	4619      	mov	r1, r3
 8002e44:	4815      	ldr	r0, [pc, #84]	@ (8002e9c <HAL_TIM_MspPostInit+0xac>)
 8002e46:	f000 fa73 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e4a:	e020      	b.n	8002e8e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a13      	ldr	r2, [pc, #76]	@ (8002ea0 <HAL_TIM_MspPostInit+0xb0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d11b      	bne.n	8002e8e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e56:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <HAL_TIM_MspPostInit+0xa8>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e98 <HAL_TIM_MspPostInit+0xa8>)
 8002e5c:	f043 0310 	orr.w	r3, r3, #16
 8002e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <HAL_TIM_MspPostInit+0xa8>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_PWM_Pin|RL_PWM_Pin|FL_PWM_Pin;
 8002e6e:	232c      	movs	r3, #44	@ 0x2c
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	4806      	ldr	r0, [pc, #24]	@ (8002ea4 <HAL_TIM_MspPostInit+0xb4>)
 8002e8a:	f000 fa51 	bl	8003330 <HAL_GPIO_Init>
}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	@ 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	48000c00 	.word	0x48000c00
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	48001000 	.word	0x48001000

08002ea8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eac:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002eae:	4a23      	ldr	r2, [pc, #140]	@ (8002f3c <MX_USART1_UART_Init+0x94>)
 8002eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eb2:	4b21      	ldr	r3, [pc, #132]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eba:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002ece:	220c      	movs	r2, #12
 8002ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ed2:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed8:	4b17      	ldr	r3, [pc, #92]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ede:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eea:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ef0:	4811      	ldr	r0, [pc, #68]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002ef2:	f002 fccb 	bl	800588c <HAL_UART_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002efc:	f7fe fec4 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f00:	2100      	movs	r1, #0
 8002f02:	480d      	ldr	r0, [pc, #52]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002f04:	f003 fb2e 	bl	8006564 <HAL_UARTEx_SetTxFifoThreshold>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f0e:	f7fe febb 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f12:	2100      	movs	r1, #0
 8002f14:	4808      	ldr	r0, [pc, #32]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002f16:	f003 fb63 	bl	80065e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f20:	f7fe feb2 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f24:	4804      	ldr	r0, [pc, #16]	@ (8002f38 <MX_USART1_UART_Init+0x90>)
 8002f26:	f003 fae4 	bl	80064f2 <HAL_UARTEx_DisableFifoMode>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f30:	f7fe feaa 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200002a8 	.word	0x200002a8
 8002f3c:	40013800 	.word	0x40013800

08002f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b09e      	sub	sp, #120	@ 0x78
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	2254      	movs	r2, #84	@ 0x54
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fddf 	bl	8006b24 <memset>
  if(uartHandle->Instance==USART1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_UART_MspInit+0xa4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d135      	bne.n	8002fdc <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 f953 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f88:	f7fe fe7e 	bl	8001c88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f8c:	4b16      	ldr	r3, [pc, #88]	@ (8002fe8 <HAL_UART_MspInit+0xa8>)
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f90:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <HAL_UART_MspInit+0xa8>)
 8002f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f96:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f98:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <HAL_UART_MspInit+0xa8>)
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa4:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_UART_MspInit+0xa8>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_UART_MspInit+0xa8>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <HAL_UART_MspInit+0xa8>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002fbc:	2330      	movs	r3, #48	@ 0x30
 8002fbe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fcc:	2307      	movs	r3, #7
 8002fce:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4805      	ldr	r0, [pc, #20]	@ (8002fec <HAL_UART_MspInit+0xac>)
 8002fd8:	f000 f9aa 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3778      	adds	r7, #120	@ 0x78
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	48000800 	.word	0x48000800

08002ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ff0:	480d      	ldr	r0, [pc, #52]	@ (8003028 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ff2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ff4:	f7ff fbb6 	bl	8002764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff8:	480c      	ldr	r0, [pc, #48]	@ (800302c <LoopForever+0x6>)
  ldr r1, =_edata
 8002ffa:	490d      	ldr	r1, [pc, #52]	@ (8003030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8003034 <LoopForever+0xe>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003000:	e002      	b.n	8003008 <LoopCopyDataInit>

08003002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003006:	3304      	adds	r3, #4

08003008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800300c:	d3f9      	bcc.n	8003002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300e:	4a0a      	ldr	r2, [pc, #40]	@ (8003038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003010:	4c0a      	ldr	r4, [pc, #40]	@ (800303c <LoopForever+0x16>)
  movs r3, #0
 8003012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003014:	e001      	b.n	800301a <LoopFillZerobss>

08003016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003018:	3204      	adds	r2, #4

0800301a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800301c:	d3fb      	bcc.n	8003016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301e:	f003 fdd5 	bl	8006bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003022:	f7fe f9cd 	bl	80013c0 <main>

08003026 <LoopForever>:

LoopForever:
    b LoopForever
 8003026:	e7fe      	b.n	8003026 <LoopForever>
  ldr   r0, =_estack
 8003028:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800302c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003030:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003034:	08007c30 	.word	0x08007c30
  ldr r2, =_sbss
 8003038:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800303c:	2000048c 	.word	0x2000048c

08003040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003040:	e7fe      	b.n	8003040 <ADC1_2_IRQHandler>

08003042 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304c:	2003      	movs	r0, #3
 800304e:	f000 f93d 	bl	80032cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003052:	200f      	movs	r0, #15
 8003054:	f000 f80e 	bl	8003074 <HAL_InitTick>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	71fb      	strb	r3, [r7, #7]
 8003062:	e001      	b.n	8003068 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003064:	f7ff fa88 	bl	8002578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003068:	79fb      	ldrb	r3, [r7, #7]

}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003080:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <HAL_InitTick+0x68>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d022      	beq.n	80030ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003088:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <HAL_InitTick+0x6c>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <HAL_InitTick+0x68>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003094:	fbb1 f3f3 	udiv	r3, r1, r3
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f93a 	bl	8003316 <HAL_SYSTICK_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10f      	bne.n	80030c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	d809      	bhi.n	80030c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ae:	2200      	movs	r2, #0
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030b6:	f000 f914 	bl	80032e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030ba:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <HAL_InitTick+0x70>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	e007      	b.n	80030d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e004      	b.n	80030d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e001      	b.n	80030d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000010 	.word	0x20000010
 80030e0:	20000008 	.word	0x20000008
 80030e4:	2000000c 	.word	0x2000000c

080030e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_IncTick+0x1c>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_IncTick+0x20>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	4a03      	ldr	r2, [pc, #12]	@ (8003104 <HAL_IncTick+0x1c>)
 80030f8:	6013      	str	r3, [r2, #0]
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	2000033c 	.word	0x2000033c
 8003108:	20000010 	.word	0x20000010

0800310c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return uwTick;
 8003110:	4b03      	ldr	r3, [pc, #12]	@ (8003120 <HAL_GetTick+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000033c 	.word	0x2000033c

08003124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800312c:	f7ff ffee 	bl	800310c <HAL_GetTick>
 8003130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800313c:	d004      	beq.n	8003148 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800313e:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_Delay+0x40>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003148:	bf00      	nop
 800314a:	f7ff ffdf 	bl	800310c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	429a      	cmp	r2, r3
 8003158:	d8f7      	bhi.n	800314a <HAL_Delay+0x26>
  {
  }
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000010 	.word	0x20000010

08003168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003178:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003184:	4013      	ands	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319a:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	60d3      	str	r3, [r2, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <__NVIC_GetPriorityGrouping+0x18>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	f003 0307 	and.w	r3, r3, #7
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	db0a      	blt.n	80031f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	490c      	ldr	r1, [pc, #48]	@ (8003218 <__NVIC_SetPriority+0x4c>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	440b      	add	r3, r1
 80031f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f4:	e00a      	b.n	800320c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4908      	ldr	r1, [pc, #32]	@ (800321c <__NVIC_SetPriority+0x50>)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3b04      	subs	r3, #4
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	440b      	add	r3, r1
 800320a:	761a      	strb	r2, [r3, #24]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000e100 	.word	0xe000e100
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	2b04      	cmp	r3, #4
 800323c:	bf28      	it	cs
 800323e:	2304      	movcs	r3, #4
 8003240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3304      	adds	r3, #4
 8003246:	2b06      	cmp	r3, #6
 8003248:	d902      	bls.n	8003250 <NVIC_EncodePriority+0x30>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3b03      	subs	r3, #3
 800324e:	e000      	b.n	8003252 <NVIC_EncodePriority+0x32>
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003268:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43d9      	mvns	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	4313      	orrs	r3, r2
         );
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	@ 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003298:	d301      	bcc.n	800329e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329a:	2301      	movs	r3, #1
 800329c:	e00f      	b.n	80032be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800329e:	4a0a      	ldr	r2, [pc, #40]	@ (80032c8 <SysTick_Config+0x40>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032a6:	210f      	movs	r1, #15
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032ac:	f7ff ff8e 	bl	80031cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b0:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <SysTick_Config+0x40>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b6:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <SysTick_Config+0x40>)
 80032b8:	2207      	movs	r2, #7
 80032ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	e000e010 	.word	0xe000e010

080032cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ff47 	bl	8003168 <__NVIC_SetPriorityGrouping>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032f0:	f7ff ff5e 	bl	80031b0 <__NVIC_GetPriorityGrouping>
 80032f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	6978      	ldr	r0, [r7, #20]
 80032fc:	f7ff ff90 	bl	8003220 <NVIC_EncodePriority>
 8003300:	4602      	mov	r2, r0
 8003302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff5f 	bl	80031cc <__NVIC_SetPriority>
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ffb2 	bl	8003288 <SysTick_Config>
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800333e:	e15a      	b.n	80035f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 814c 	beq.w	80035f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d005      	beq.n	8003370 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800336c:	2b02      	cmp	r3, #2
 800336e:	d130      	bne.n	80033d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	2203      	movs	r2, #3
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033a6:	2201      	movs	r2, #1
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f003 0201 	and.w	r2, r3, #1
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d017      	beq.n	800340e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d123      	bne.n	8003462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	08da      	lsrs	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3208      	adds	r2, #8
 8003422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	220f      	movs	r2, #15
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	08da      	lsrs	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3208      	adds	r2, #8
 800345c:	6939      	ldr	r1, [r7, #16]
 800345e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2203      	movs	r2, #3
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0203 	and.w	r2, r3, #3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a6 	beq.w	80035f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003614 <HAL_GPIO_Init+0x2e4>)
 80034a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003614 <HAL_GPIO_Init+0x2e4>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80034b0:	4b58      	ldr	r3, [pc, #352]	@ (8003614 <HAL_GPIO_Init+0x2e4>)
 80034b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034bc:	4a56      	ldr	r2, [pc, #344]	@ (8003618 <HAL_GPIO_Init+0x2e8>)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	3302      	adds	r3, #2
 80034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	220f      	movs	r2, #15
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034e6:	d01f      	beq.n	8003528 <HAL_GPIO_Init+0x1f8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a4c      	ldr	r2, [pc, #304]	@ (800361c <HAL_GPIO_Init+0x2ec>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d019      	beq.n	8003524 <HAL_GPIO_Init+0x1f4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a4b      	ldr	r2, [pc, #300]	@ (8003620 <HAL_GPIO_Init+0x2f0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d013      	beq.n	8003520 <HAL_GPIO_Init+0x1f0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003624 <HAL_GPIO_Init+0x2f4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00d      	beq.n	800351c <HAL_GPIO_Init+0x1ec>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a49      	ldr	r2, [pc, #292]	@ (8003628 <HAL_GPIO_Init+0x2f8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <HAL_GPIO_Init+0x1e8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a48      	ldr	r2, [pc, #288]	@ (800362c <HAL_GPIO_Init+0x2fc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_GPIO_Init+0x1e4>
 8003510:	2305      	movs	r3, #5
 8003512:	e00a      	b.n	800352a <HAL_GPIO_Init+0x1fa>
 8003514:	2306      	movs	r3, #6
 8003516:	e008      	b.n	800352a <HAL_GPIO_Init+0x1fa>
 8003518:	2304      	movs	r3, #4
 800351a:	e006      	b.n	800352a <HAL_GPIO_Init+0x1fa>
 800351c:	2303      	movs	r3, #3
 800351e:	e004      	b.n	800352a <HAL_GPIO_Init+0x1fa>
 8003520:	2302      	movs	r3, #2
 8003522:	e002      	b.n	800352a <HAL_GPIO_Init+0x1fa>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_GPIO_Init+0x1fa>
 8003528:	2300      	movs	r3, #0
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	f002 0203 	and.w	r2, r2, #3
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	4093      	lsls	r3, r2
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800353a:	4937      	ldr	r1, [pc, #220]	@ (8003618 <HAL_GPIO_Init+0x2e8>)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003548:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <HAL_GPIO_Init+0x300>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800356c:	4a30      	ldr	r2, [pc, #192]	@ (8003630 <HAL_GPIO_Init+0x300>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003572:	4b2f      	ldr	r3, [pc, #188]	@ (8003630 <HAL_GPIO_Init+0x300>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003596:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <HAL_GPIO_Init+0x300>)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800359c:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_GPIO_Init+0x300>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <HAL_GPIO_Init+0x300>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003630 <HAL_GPIO_Init+0x300>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ea:	4a11      	ldr	r2, [pc, #68]	@ (8003630 <HAL_GPIO_Init+0x300>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3301      	adds	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f ae9d 	bne.w	8003340 <HAL_GPIO_Init+0x10>
  }
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40021000 	.word	0x40021000
 8003618:	40010000 	.word	0x40010000
 800361c:	48000400 	.word	0x48000400
 8003620:	48000800 	.word	0x48000800
 8003624:	48000c00 	.word	0x48000c00
 8003628:	48001000 	.word	0x48001000
 800362c:	48001400 	.word	0x48001400
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003644:	787b      	ldrb	r3, [r7, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003650:	e002      	b.n	8003658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d141      	bne.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003672:	4b4b      	ldr	r3, [pc, #300]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367e:	d131      	bne.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003680:	4b47      	ldr	r3, [pc, #284]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003686:	4a46      	ldr	r2, [pc, #280]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800368c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003690:	4b43      	ldr	r3, [pc, #268]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003698:	4a41      	ldr	r2, [pc, #260]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800369e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036a0:	4b40      	ldr	r3, [pc, #256]	@ (80037a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2232      	movs	r2, #50	@ 0x32
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	4a3f      	ldr	r2, [pc, #252]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	0c9b      	lsrs	r3, r3, #18
 80036b2:	3301      	adds	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b6:	e002      	b.n	80036be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036be:	4b38      	ldr	r3, [pc, #224]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ca:	d102      	bne.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f2      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d2:	4b33      	ldr	r3, [pc, #204]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036de:	d158      	bne.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e057      	b.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036e4:	4b2e      	ldr	r3, [pc, #184]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ea:	4a2d      	ldr	r2, [pc, #180]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036f4:	e04d      	b.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036fc:	d141      	bne.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036fe:	4b28      	ldr	r3, [pc, #160]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800370a:	d131      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800370c:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003712:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003718:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800371c:	4b20      	ldr	r3, [pc, #128]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003724:	4a1e      	ldr	r2, [pc, #120]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800372a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2232      	movs	r2, #50	@ 0x32
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	0c9b      	lsrs	r3, r3, #18
 800373e:	3301      	adds	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003742:	e002      	b.n	800374a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3b01      	subs	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800374a:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003756:	d102      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f2      	bne.n	8003744 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800376a:	d112      	bne.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e011      	b.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003776:	4a0a      	ldr	r2, [pc, #40]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003780:	e007      	b.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003782:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800378a:	4a05      	ldr	r2, [pc, #20]	@ (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003790:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40007000 	.word	0x40007000
 80037a4:	20000008 	.word	0x20000008
 80037a8:	431bde83 	.word	0x431bde83

080037ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037b0:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a04      	ldr	r2, [pc, #16]	@ (80037c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ba:	6093      	str	r3, [r2, #8]
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40007000 	.word	0x40007000

080037cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e2fe      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d075      	beq.n	80038d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ea:	4b97      	ldr	r3, [pc, #604]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f4:	4b94      	ldr	r3, [pc, #592]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d102      	bne.n	800380a <HAL_RCC_OscConfig+0x3e>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d002      	beq.n	8003810 <HAL_RCC_OscConfig+0x44>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d10b      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	4b8d      	ldr	r3, [pc, #564]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05b      	beq.n	80038d4 <HAL_RCC_OscConfig+0x108>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d157      	bne.n	80038d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e2d9      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003830:	d106      	bne.n	8003840 <HAL_RCC_OscConfig+0x74>
 8003832:	4b85      	ldr	r3, [pc, #532]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a84      	ldr	r2, [pc, #528]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e01d      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x98>
 800384a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b7c      	ldr	r3, [pc, #496]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003864:	4b78      	ldr	r3, [pc, #480]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a77      	ldr	r2, [pc, #476]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b75      	ldr	r3, [pc, #468]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a74      	ldr	r2, [pc, #464]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800387a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7ff fc42 	bl	800310c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7ff fc3e 	bl	800310c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	@ 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e29e      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800389e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0xc0>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7ff fc2e 	bl	800310c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7ff fc2a 	bl	800310c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	@ 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e28a      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038c6:	4b60      	ldr	r3, [pc, #384]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0xe8>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e2:	4b59      	ldr	r3, [pc, #356]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ec:	4b56      	ldr	r3, [pc, #344]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d102      	bne.n	8003902 <HAL_RCC_OscConfig+0x136>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d002      	beq.n	8003908 <HAL_RCC_OscConfig+0x13c>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b04      	cmp	r3, #4
 8003906:	d11f      	bne.n	8003948 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003908:	4b4f      	ldr	r3, [pc, #316]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_OscConfig+0x154>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e25d      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b49      	ldr	r3, [pc, #292]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	4946      	ldr	r1, [pc, #280]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003934:	4b45      	ldr	r3, [pc, #276]	@ (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fb9b 	bl	8003074 <HAL_InitTick>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d043      	beq.n	80039cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e249      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d023      	beq.n	8003998 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003950:	4b3d      	ldr	r3, [pc, #244]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a3c      	ldr	r2, [pc, #240]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800395a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7ff fbd6 	bl	800310c <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003964:	f7ff fbd2 	bl	800310c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e232      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003976:	4b34      	ldr	r3, [pc, #208]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b31      	ldr	r3, [pc, #196]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	492d      	ldr	r1, [pc, #180]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
 8003996:	e01a      	b.n	80039ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003998:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800399e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7ff fbb2 	bl	800310c <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ac:	f7ff fbae 	bl	800310c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e20e      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039be:	4b22      	ldr	r3, [pc, #136]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x1e0>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d041      	beq.n	8003a5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01c      	beq.n	8003a1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80039e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e8:	4a17      	ldr	r2, [pc, #92]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f2:	f7ff fb8b 	bl	800310c <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fa:	f7ff fb87 	bl	800310c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1e7      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ef      	beq.n	80039fa <HAL_RCC_OscConfig+0x22e>
 8003a1a:	e020      	b.n	8003a5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a22:	4a09      	ldr	r2, [pc, #36]	@ (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7ff fb6e 	bl	800310c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a32:	e00d      	b.n	8003a50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7ff fb6a 	bl	800310c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d906      	bls.n	8003a50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1ca      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a50:	4b8c      	ldr	r3, [pc, #560]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ea      	bne.n	8003a34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80a6 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a70:	4b84      	ldr	r3, [pc, #528]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2b4>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x2b6>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b7f      	ldr	r3, [pc, #508]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a92:	4b7c      	ldr	r3, [pc, #496]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa2:	4b79      	ldr	r3, [pc, #484]	@ (8003c88 <HAL_RCC_OscConfig+0x4bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aae:	4b76      	ldr	r3, [pc, #472]	@ (8003c88 <HAL_RCC_OscConfig+0x4bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a75      	ldr	r2, [pc, #468]	@ (8003c88 <HAL_RCC_OscConfig+0x4bc>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7ff fb27 	bl	800310c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7ff fb23 	bl	800310c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e183      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c88 <HAL_RCC_OscConfig+0x4bc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d108      	bne.n	8003afa <HAL_RCC_OscConfig+0x32e>
 8003ae8:	4b66      	ldr	r3, [pc, #408]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aee:	4a65      	ldr	r2, [pc, #404]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003af8:	e024      	b.n	8003b44 <HAL_RCC_OscConfig+0x378>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d110      	bne.n	8003b24 <HAL_RCC_OscConfig+0x358>
 8003b02:	4b60      	ldr	r3, [pc, #384]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	4a5e      	ldr	r2, [pc, #376]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b12:	4b5c      	ldr	r3, [pc, #368]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b18:	4a5a      	ldr	r2, [pc, #360]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b22:	e00f      	b.n	8003b44 <HAL_RCC_OscConfig+0x378>
 8003b24:	4b57      	ldr	r3, [pc, #348]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	4a56      	ldr	r2, [pc, #344]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b34:	4b53      	ldr	r3, [pc, #332]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3a:	4a52      	ldr	r2, [pc, #328]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d016      	beq.n	8003b7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7ff fade 	bl	800310c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7ff fada 	bl	800310c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e138      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6a:	4b46      	ldr	r3, [pc, #280]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ed      	beq.n	8003b54 <HAL_RCC_OscConfig+0x388>
 8003b78:	e015      	b.n	8003ba6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7ff fac7 	bl	800310c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7ff fac3 	bl	800310c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e121      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b98:	4b3a      	ldr	r3, [pc, #232]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ed      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bac:	4b35      	ldr	r3, [pc, #212]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb0:	4a34      	ldr	r2, [pc, #208]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d03c      	beq.n	8003c3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7ff fa96 	bl	800310c <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be4:	f7ff fa92 	bl	800310c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e0f2      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bf6:	4b23      	ldr	r3, [pc, #140]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ef      	beq.n	8003be4 <HAL_RCC_OscConfig+0x418>
 8003c04:	e01b      	b.n	8003c3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c06:	4b1f      	ldr	r3, [pc, #124]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7ff fa79 	bl	800310c <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c1e:	f7ff fa75 	bl	800310c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e0d5      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c30:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ef      	bne.n	8003c1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80c9 	beq.w	8003dda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c48:	4b0e      	ldr	r3, [pc, #56]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	f000 8083 	beq.w	8003d5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d15e      	bne.n	8003d1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a08      	ldr	r2, [pc, #32]	@ (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7ff fa4f 	bl	800310c <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c70:	e00c      	b.n	8003c8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7ff fa4b 	bl	800310c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d905      	bls.n	8003c8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e0ab      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c8c:	4b55      	ldr	r3, [pc, #340]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ec      	bne.n	8003c72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c98:	4b52      	ldr	r3, [pc, #328]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	4b52      	ldr	r3, [pc, #328]	@ (8003de8 <HAL_RCC_OscConfig+0x61c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6a11      	ldr	r1, [r2, #32]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ca8:	3a01      	subs	r2, #1
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	4311      	orrs	r1, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003cb2:	0212      	lsls	r2, r2, #8
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cba:	0852      	lsrs	r2, r2, #1
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	0552      	lsls	r2, r2, #21
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cc6:	0852      	lsrs	r2, r2, #1
 8003cc8:	3a01      	subs	r2, #1
 8003cca:	0652      	lsls	r2, r2, #25
 8003ccc:	4311      	orrs	r1, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cd2:	06d2      	lsls	r2, r2, #27
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	4943      	ldr	r1, [pc, #268]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a40      	ldr	r2, [pc, #256]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a3d      	ldr	r2, [pc, #244]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7ff fa0a 	bl	800310c <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7ff fa06 	bl	800310c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e066      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0e:	4b35      	ldr	r3, [pc, #212]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x530>
 8003d1a:	e05e      	b.n	8003dda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1c:	4b31      	ldr	r3, [pc, #196]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a30      	ldr	r2, [pc, #192]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7ff f9f0 	bl	800310c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7ff f9ec 	bl	800310c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e04c      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d42:	4b28      	ldr	r3, [pc, #160]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d4e:	4b25      	ldr	r3, [pc, #148]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	4924      	ldr	r1, [pc, #144]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d54:	4b25      	ldr	r3, [pc, #148]	@ (8003dec <HAL_RCC_OscConfig+0x620>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	60cb      	str	r3, [r1, #12]
 8003d5a:	e03e      	b.n	8003dda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e039      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d68:	4b1e      	ldr	r3, [pc, #120]	@ (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0203 	and.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d12c      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	3b01      	subs	r3, #1
 8003d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d123      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d11b      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d113      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	019f800c 	.word	0x019f800c
 8003dec:	feeefffc 	.word	0xfeeefffc

08003df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e11e      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b91      	ldr	r3, [pc, #580]	@ (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d910      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b8e      	ldr	r3, [pc, #568]	@ (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 020f 	bic.w	r2, r3, #15
 8003e1e:	498c      	ldr	r1, [pc, #560]	@ (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b8a      	ldr	r3, [pc, #552]	@ (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e106      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d073      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d129      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4c:	4b81      	ldr	r3, [pc, #516]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0f4      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e5c:	f000 f99e 	bl	800419c <RCC_GetSysClockFreqFromPLLSource>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4a7c      	ldr	r2, [pc, #496]	@ (8004058 <HAL_RCC_ClockConfig+0x268>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d93f      	bls.n	8003eea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e6a:	4b7a      	ldr	r3, [pc, #488]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d033      	beq.n	8003eea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d12f      	bne.n	8003eea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e8a:	4b72      	ldr	r3, [pc, #456]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e92:	4a70      	ldr	r2, [pc, #448]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e024      	b.n	8003eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0c6      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb8:	4b66      	ldr	r3, [pc, #408]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0be      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ec8:	f000 f8ce 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4a61      	ldr	r2, [pc, #388]	@ (8004058 <HAL_RCC_ClockConfig+0x268>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d909      	bls.n	8003eea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ede:	4a5d      	ldr	r2, [pc, #372]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b5a      	ldr	r3, [pc, #360]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4957      	ldr	r1, [pc, #348]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7ff f906 	bl	800310c <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7ff f902 	bl	800310c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e095      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d023      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f44:	4b43      	ldr	r3, [pc, #268]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a42      	ldr	r2, [pc, #264]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f64:	4a3b      	ldr	r2, [pc, #236]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4936      	ldr	r1, [pc, #216]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b80      	cmp	r3, #128	@ 0x80
 8003f84:	d105      	bne.n	8003f92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f86:	4b33      	ldr	r3, [pc, #204]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	4a32      	ldr	r2, [pc, #200]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f92:	4b2f      	ldr	r3, [pc, #188]	@ (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d21d      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 020f 	bic.w	r2, r3, #15
 8003fa8:	4929      	ldr	r1, [pc, #164]	@ (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fb0:	f7ff f8ac 	bl	800310c <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7ff f8a8 	bl	800310c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e03b      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1ed      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4917      	ldr	r1, [pc, #92]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004006:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	490f      	ldr	r1, [pc, #60]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800401a:	f000 f825 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <HAL_RCC_ClockConfig+0x264>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490c      	ldr	r1, [pc, #48]	@ (800405c <HAL_RCC_ClockConfig+0x26c>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a0a      	ldr	r2, [pc, #40]	@ (8004060 <HAL_RCC_ClockConfig+0x270>)
 8004038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800403a:	4b0a      	ldr	r3, [pc, #40]	@ (8004064 <HAL_RCC_ClockConfig+0x274>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff f818 	bl	8003074 <HAL_InitTick>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40022000 	.word	0x40022000
 8004054:	40021000 	.word	0x40021000
 8004058:	04c4b400 	.word	0x04c4b400
 800405c:	08007ac0 	.word	0x08007ac0
 8004060:	20000008 	.word	0x20000008
 8004064:	2000000c 	.word	0x2000000c

08004068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800406e:	4b2c      	ldr	r3, [pc, #176]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b04      	cmp	r3, #4
 8004078:	d102      	bne.n	8004080 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800407a:	4b2a      	ldr	r3, [pc, #168]	@ (8004124 <HAL_RCC_GetSysClockFreq+0xbc>)
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	e047      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004080:	4b27      	ldr	r3, [pc, #156]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	2b08      	cmp	r3, #8
 800408a:	d102      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800408c:	4b26      	ldr	r3, [pc, #152]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	e03e      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004092:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d136      	bne.n	800410c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800409e:	4b20      	ldr	r3, [pc, #128]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	3301      	adds	r3, #1
 80040b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d10c      	bne.n	80040d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	4a16      	ldr	r2, [pc, #88]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c6:	68d2      	ldr	r2, [r2, #12]
 80040c8:	0a12      	lsrs	r2, r2, #8
 80040ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	617b      	str	r3, [r7, #20]
      break;
 80040d4:	e00c      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040d6:	4a13      	ldr	r2, [pc, #76]	@ (8004124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	4a10      	ldr	r2, [pc, #64]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	0a12      	lsrs	r2, r2, #8
 80040e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040e8:	fb02 f303 	mul.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
      break;
 80040ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	0e5b      	lsrs	r3, r3, #25
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	3301      	adds	r3, #1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e001      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004110:	693b      	ldr	r3, [r7, #16]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200

0800412c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004130:	4b03      	ldr	r3, [pc, #12]	@ (8004140 <HAL_RCC_GetHCLKFreq+0x14>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000008 	.word	0x20000008

08004144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004148:	f7ff fff0 	bl	800412c <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4904      	ldr	r1, [pc, #16]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x28>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	08007ad0 	.word	0x08007ad0

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004174:	f7ff ffda 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0adb      	lsrs	r3, r3, #11
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4904      	ldr	r1, [pc, #16]	@ (8004198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	08007ad0 	.word	0x08007ad0

0800419c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041a2:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3301      	adds	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d10c      	bne.n	80041da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c0:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	4a14      	ldr	r2, [pc, #80]	@ (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ca:	68d2      	ldr	r2, [r2, #12]
 80041cc:	0a12      	lsrs	r2, r2, #8
 80041ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
    break;
 80041d8:	e00c      	b.n	80041f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041da:	4a12      	ldr	r2, [pc, #72]	@ (8004224 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	4a0e      	ldr	r2, [pc, #56]	@ (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	0a12      	lsrs	r2, r2, #8
 80041e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
    break;
 80041f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f4:	4b09      	ldr	r3, [pc, #36]	@ (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0e5b      	lsrs	r3, r3, #25
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800420e:	687b      	ldr	r3, [r7, #4]
}
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40021000 	.word	0x40021000
 8004220:	007a1200 	.word	0x007a1200
 8004224:	00f42400 	.word	0x00f42400

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004230:	2300      	movs	r3, #0
 8004232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004234:	2300      	movs	r3, #0
 8004236:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8098 	beq.w	8004376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424a:	4b43      	ldr	r3, [pc, #268]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b40      	ldr	r3, [pc, #256]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425a:	4a3f      	ldr	r2, [pc, #252]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	@ 0x58
 8004262:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004272:	4b3a      	ldr	r3, [pc, #232]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a39      	ldr	r2, [pc, #228]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800427c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427e:	f7fe ff45 	bl	800310c <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004284:	e009      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fe ff41 	bl	800310c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d902      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	74fb      	strb	r3, [r7, #19]
        break;
 8004298:	e005      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429a:	4b30      	ldr	r3, [pc, #192]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ef      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d159      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01e      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d019      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042c8:	4b23      	ldr	r3, [pc, #140]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d4:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042da:	4a1f      	ldr	r2, [pc, #124]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042f4:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fe ff01 	bl	800310c <HAL_GetTick>
 800430a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430c:	e00b      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe fefd 	bl	800310c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d902      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	74fb      	strb	r3, [r7, #19]
            break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ec      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433a:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004348:	4903      	ldr	r1, [pc, #12]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	74bb      	strb	r3, [r7, #18]
 8004356:	e005      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004358:	40021000 	.word	0x40021000
 800435c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004364:	7c7b      	ldrb	r3, [r7, #17]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436a:	4ba7      	ldr	r3, [pc, #668]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	4aa6      	ldr	r2, [pc, #664]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004374:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004382:	4ba1      	ldr	r3, [pc, #644]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f023 0203 	bic.w	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	499d      	ldr	r1, [pc, #628]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a4:	4b98      	ldr	r3, [pc, #608]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f023 020c 	bic.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	4995      	ldr	r1, [pc, #596]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c6:	4b90      	ldr	r3, [pc, #576]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	498c      	ldr	r1, [pc, #560]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e8:	4b87      	ldr	r3, [pc, #540]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	4984      	ldr	r1, [pc, #528]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440a:	4b7f      	ldr	r3, [pc, #508]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	497b      	ldr	r1, [pc, #492]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800442c:	4b76      	ldr	r3, [pc, #472]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	4973      	ldr	r1, [pc, #460]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444e:	4b6e      	ldr	r3, [pc, #440]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004454:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	496a      	ldr	r1, [pc, #424]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004470:	4b65      	ldr	r3, [pc, #404]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004476:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4962      	ldr	r1, [pc, #392]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004492:	4b5d      	ldr	r3, [pc, #372]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	4959      	ldr	r1, [pc, #356]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044b4:	4b54      	ldr	r3, [pc, #336]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c2:	4951      	ldr	r1, [pc, #324]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	4948      	ldr	r1, [pc, #288]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044f8:	4b43      	ldr	r3, [pc, #268]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	4940      	ldr	r1, [pc, #256]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004516:	d105      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004518:	4b3b      	ldr	r3, [pc, #236]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a3a      	ldr	r2, [pc, #232]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004522:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800452c:	2b00      	cmp	r3, #0
 800452e:	d015      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004530:	4b35      	ldr	r3, [pc, #212]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453e:	4932      	ldr	r1, [pc, #200]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800454e:	d105      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b2d      	ldr	r3, [pc, #180]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a2c      	ldr	r2, [pc, #176]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800455a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004568:	4b27      	ldr	r3, [pc, #156]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	4924      	ldr	r1, [pc, #144]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004586:	d105      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004588:	4b1f      	ldr	r3, [pc, #124]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004592:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a0:	4b19      	ldr	r3, [pc, #100]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ae:	4916      	ldr	r1, [pc, #88]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045be:	d105      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c0:	4b11      	ldr	r3, [pc, #68]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a10      	ldr	r2, [pc, #64]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d019      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	4908      	ldr	r1, [pc, #32]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045f6:	d109      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f8:	4b03      	ldr	r3, [pc, #12]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a02      	ldr	r2, [pc, #8]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004602:	60d3      	str	r3, [r2, #12]
 8004604:	e002      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004618:	4b29      	ldr	r3, [pc, #164]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	4926      	ldr	r1, [pc, #152]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004636:	d105      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004638:	4b21      	ldr	r3, [pc, #132]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a20      	ldr	r2, [pc, #128]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004642:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004650:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465e:	4918      	ldr	r1, [pc, #96]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004670:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a12      	ldr	r2, [pc, #72]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004688:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800468e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004696:	490a      	ldr	r1, [pc, #40]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a04      	ldr	r2, [pc, #16]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000

080046c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d001      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e054      	b.n	8004786 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a26      	ldr	r2, [pc, #152]	@ (8004794 <HAL_TIM_Base_Start_IT+0xd0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d022      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x80>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004706:	d01d      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x80>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a22      	ldr	r2, [pc, #136]	@ (8004798 <HAL_TIM_Base_Start_IT+0xd4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d018      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x80>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a21      	ldr	r2, [pc, #132]	@ (800479c <HAL_TIM_Base_Start_IT+0xd8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d013      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1f      	ldr	r2, [pc, #124]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00e      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x80>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1e      	ldr	r2, [pc, #120]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d009      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x80>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x80>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <HAL_TIM_Base_Start_IT+0xe8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d115      	bne.n	8004770 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <HAL_TIM_Base_Start_IT+0xec>)
 800474c:	4013      	ands	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b06      	cmp	r3, #6
 8004754:	d015      	beq.n	8004782 <HAL_TIM_Base_Start_IT+0xbe>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475c:	d011      	beq.n	8004782 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	e008      	b.n	8004782 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e000      	b.n	8004784 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004782:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40013400 	.word	0x40013400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40015000 	.word	0x40015000
 80047b0:	00010007 	.word	0x00010007

080047b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e049      	b.n	800485a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fe fad6 	bl	8002d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 fbb0 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <HAL_TIM_PWM_Start+0x24>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e03c      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d109      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x3e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	e02f      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d109      	bne.n	80048bc <HAL_TIM_PWM_Start+0x58>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e022      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	d109      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x72>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	e015      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d109      	bne.n	80048f0 <HAL_TIM_PWM_Start+0x8c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e008      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0a6      	b.n	8004a58 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0xb6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004918:	e023      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xc6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004928:	e01b      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0xd6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004938:	e013      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0xe6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004948:	e00b      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b10      	cmp	r3, #16
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start+0xf6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004958:	e003      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2201      	movs	r2, #1
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fed2 	bl	8005714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <HAL_TIM_PWM_Start+0x1fc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d018      	beq.n	80049ac <HAL_TIM_PWM_Start+0x148>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a39      	ldr	r2, [pc, #228]	@ (8004a64 <HAL_TIM_PWM_Start+0x200>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <HAL_TIM_PWM_Start+0x148>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a37      	ldr	r2, [pc, #220]	@ (8004a68 <HAL_TIM_PWM_Start+0x204>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_TIM_PWM_Start+0x148>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a36      	ldr	r2, [pc, #216]	@ (8004a6c <HAL_TIM_PWM_Start+0x208>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_TIM_PWM_Start+0x148>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a34      	ldr	r2, [pc, #208]	@ (8004a70 <HAL_TIM_PWM_Start+0x20c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_TIM_PWM_Start+0x148>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a33      	ldr	r2, [pc, #204]	@ (8004a74 <HAL_TIM_PWM_Start+0x210>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d101      	bne.n	80049b0 <HAL_TIM_PWM_Start+0x14c>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_TIM_PWM_Start+0x14e>
 80049b0:	2300      	movs	r3, #0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a25      	ldr	r2, [pc, #148]	@ (8004a60 <HAL_TIM_PWM_Start+0x1fc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d022      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1b2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d8:	d01d      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1b2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a26      	ldr	r2, [pc, #152]	@ (8004a78 <HAL_TIM_PWM_Start+0x214>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d018      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1b2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a24      	ldr	r2, [pc, #144]	@ (8004a7c <HAL_TIM_PWM_Start+0x218>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1b2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a23      	ldr	r2, [pc, #140]	@ (8004a80 <HAL_TIM_PWM_Start+0x21c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00e      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1b2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a19      	ldr	r2, [pc, #100]	@ (8004a64 <HAL_TIM_PWM_Start+0x200>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d009      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1b2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a18      	ldr	r2, [pc, #96]	@ (8004a68 <HAL_TIM_PWM_Start+0x204>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x1b2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a18      	ldr	r2, [pc, #96]	@ (8004a74 <HAL_TIM_PWM_Start+0x210>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d115      	bne.n	8004a42 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	4b19      	ldr	r3, [pc, #100]	@ (8004a84 <HAL_TIM_PWM_Start+0x220>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b06      	cmp	r3, #6
 8004a26:	d015      	beq.n	8004a54 <HAL_TIM_PWM_Start+0x1f0>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2e:	d011      	beq.n	8004a54 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a40:	e008      	b.n	8004a54 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e000      	b.n	8004a56 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800
 8004a74:	40015000 	.word	0x40015000
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	00010007 	.word	0x00010007

08004a88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e097      	b.n	8004bcc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fe f893 	bl	8002bdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004acc:	f023 0307 	bic.w	r3, r3, #7
 8004ad0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f000 fa3b 	bl	8004f58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b28:	f023 030c 	bic.w	r3, r3, #12
 8004b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	4313      	orrs	r3, r2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	011a      	lsls	r2, r3, #4
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	031b      	lsls	r3, r3, #12
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004be4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bf4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bfc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d110      	bne.n	8004c26 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d102      	bne.n	8004c10 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c0a:	7b7b      	ldrb	r3, [r7, #13]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d001      	beq.n	8004c14 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e089      	b.n	8004d28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c24:	e031      	b.n	8004c8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d110      	bne.n	8004c4e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c2c:	7bbb      	ldrb	r3, [r7, #14]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d102      	bne.n	8004c38 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c32:	7b3b      	ldrb	r3, [r7, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e075      	b.n	8004d28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c4c:	e01d      	b.n	8004c8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d108      	bne.n	8004c66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c54:	7bbb      	ldrb	r3, [r7, #14]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c5a:	7b7b      	ldrb	r3, [r7, #13]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d102      	bne.n	8004c66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c60:	7b3b      	ldrb	r3, [r7, #12]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d001      	beq.n	8004c6a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e05e      	b.n	8004d28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d010      	beq.n	8004cb8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004c96:	e01f      	b.n	8004cd8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fd37 	bl	8005714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0202 	orr.w	r2, r2, #2
 8004cb4:	60da      	str	r2, [r3, #12]
      break;
 8004cb6:	e02e      	b.n	8004d16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fd27 	bl	8005714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0204 	orr.w	r2, r2, #4
 8004cd4:	60da      	str	r2, [r3, #12]
      break;
 8004cd6:	e01e      	b.n	8004d16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fd17 	bl	8005714 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	2104      	movs	r1, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fd10 	bl	8005714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0202 	orr.w	r2, r2, #2
 8004d02:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0204 	orr.w	r2, r2, #4
 8004d12:	60da      	str	r2, [r3, #12]
      break;
 8004d14:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e0ff      	b.n	8004f4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b14      	cmp	r3, #20
 8004d5a:	f200 80f0 	bhi.w	8004f3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004f3f 	.word	0x08004f3f
 8004d6c:	08004f3f 	.word	0x08004f3f
 8004d70:	08004f3f 	.word	0x08004f3f
 8004d74:	08004df9 	.word	0x08004df9
 8004d78:	08004f3f 	.word	0x08004f3f
 8004d7c:	08004f3f 	.word	0x08004f3f
 8004d80:	08004f3f 	.word	0x08004f3f
 8004d84:	08004e3b 	.word	0x08004e3b
 8004d88:	08004f3f 	.word	0x08004f3f
 8004d8c:	08004f3f 	.word	0x08004f3f
 8004d90:	08004f3f 	.word	0x08004f3f
 8004d94:	08004e7b 	.word	0x08004e7b
 8004d98:	08004f3f 	.word	0x08004f3f
 8004d9c:	08004f3f 	.word	0x08004f3f
 8004da0:	08004f3f 	.word	0x08004f3f
 8004da4:	08004ebd 	.word	0x08004ebd
 8004da8:	08004f3f 	.word	0x08004f3f
 8004dac:	08004f3f 	.word	0x08004f3f
 8004db0:	08004f3f 	.word	0x08004f3f
 8004db4:	08004efd 	.word	0x08004efd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f97e 	bl	80050c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0208 	orr.w	r2, r2, #8
 8004dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0204 	bic.w	r2, r2, #4
 8004de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	619a      	str	r2, [r3, #24]
      break;
 8004df6:	e0a5      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f9f8 	bl	80051f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6999      	ldr	r1, [r3, #24]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	021a      	lsls	r2, r3, #8
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	619a      	str	r2, [r3, #24]
      break;
 8004e38:	e084      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fa6b 	bl	800531c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0208 	orr.w	r2, r2, #8
 8004e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0204 	bic.w	r2, r2, #4
 8004e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69d9      	ldr	r1, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	61da      	str	r2, [r3, #28]
      break;
 8004e78:	e064      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fadd 	bl	8005440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69d9      	ldr	r1, [r3, #28]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	021a      	lsls	r2, r3, #8
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	61da      	str	r2, [r3, #28]
      break;
 8004eba:	e043      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fb50 	bl	8005568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0208 	orr.w	r2, r2, #8
 8004ed6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0204 	bic.w	r2, r2, #4
 8004ee6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004efa:	e023      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fb9a 	bl	800563c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f26:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	021a      	lsls	r2, r3, #8
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004f3c:	e002      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
      break;
 8004f42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop

08004f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800509c <TIM_Base_SetConfig+0x144>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d017      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f76:	d013      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a49      	ldr	r2, [pc, #292]	@ (80050a0 <TIM_Base_SetConfig+0x148>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a48      	ldr	r2, [pc, #288]	@ (80050a4 <TIM_Base_SetConfig+0x14c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a47      	ldr	r2, [pc, #284]	@ (80050a8 <TIM_Base_SetConfig+0x150>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a46      	ldr	r2, [pc, #280]	@ (80050ac <TIM_Base_SetConfig+0x154>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0x48>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a45      	ldr	r2, [pc, #276]	@ (80050b0 <TIM_Base_SetConfig+0x158>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a39      	ldr	r2, [pc, #228]	@ (800509c <TIM_Base_SetConfig+0x144>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d023      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc0:	d01f      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a36      	ldr	r2, [pc, #216]	@ (80050a0 <TIM_Base_SetConfig+0x148>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01b      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a35      	ldr	r2, [pc, #212]	@ (80050a4 <TIM_Base_SetConfig+0x14c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d017      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a34      	ldr	r2, [pc, #208]	@ (80050a8 <TIM_Base_SetConfig+0x150>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a33      	ldr	r2, [pc, #204]	@ (80050ac <TIM_Base_SetConfig+0x154>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00f      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a33      	ldr	r2, [pc, #204]	@ (80050b4 <TIM_Base_SetConfig+0x15c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a32      	ldr	r2, [pc, #200]	@ (80050b8 <TIM_Base_SetConfig+0x160>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a31      	ldr	r2, [pc, #196]	@ (80050bc <TIM_Base_SetConfig+0x164>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_Base_SetConfig+0xaa>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80050b0 <TIM_Base_SetConfig+0x158>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d108      	bne.n	8005014 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <TIM_Base_SetConfig+0x144>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a1a      	ldr	r2, [pc, #104]	@ (80050ac <TIM_Base_SetConfig+0x154>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1a      	ldr	r2, [pc, #104]	@ (80050b4 <TIM_Base_SetConfig+0x15c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <TIM_Base_SetConfig+0x160>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <TIM_Base_SetConfig+0x164>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x110>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <TIM_Base_SetConfig+0x158>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d103      	bne.n	8005070 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d105      	bne.n	800508e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]
  }
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40015000 	.word	0x40015000
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 0201 	bic.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 0302 	bic.w	r3, r3, #2
 800510c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a30      	ldr	r2, [pc, #192]	@ (80051dc <TIM_OC1_SetConfig+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2f      	ldr	r2, [pc, #188]	@ (80051e0 <TIM_OC1_SetConfig+0x120>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00f      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2e      	ldr	r2, [pc, #184]	@ (80051e4 <TIM_OC1_SetConfig+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2d      	ldr	r2, [pc, #180]	@ (80051e8 <TIM_OC1_SetConfig+0x128>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a2c      	ldr	r2, [pc, #176]	@ (80051ec <TIM_OC1_SetConfig+0x12c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC1_SetConfig+0x88>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a2b      	ldr	r2, [pc, #172]	@ (80051f0 <TIM_OC1_SetConfig+0x130>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10c      	bne.n	8005162 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0308 	bic.w	r3, r3, #8
 800514e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1d      	ldr	r2, [pc, #116]	@ (80051dc <TIM_OC1_SetConfig+0x11c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1c      	ldr	r2, [pc, #112]	@ (80051e0 <TIM_OC1_SetConfig+0x120>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00f      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1b      	ldr	r2, [pc, #108]	@ (80051e4 <TIM_OC1_SetConfig+0x124>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00b      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1a      	ldr	r2, [pc, #104]	@ (80051e8 <TIM_OC1_SetConfig+0x128>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <TIM_OC1_SetConfig+0x12c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d003      	beq.n	8005192 <TIM_OC1_SetConfig+0xd2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a18      	ldr	r2, [pc, #96]	@ (80051f0 <TIM_OC1_SetConfig+0x130>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d111      	bne.n	80051b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800
 80051f0:	40015000 	.word	0x40015000

080051f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f023 0210 	bic.w	r2, r3, #16
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800522e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0320 	bic.w	r3, r3, #32
 8005242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a2c      	ldr	r2, [pc, #176]	@ (8005304 <TIM_OC2_SetConfig+0x110>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_OC2_SetConfig+0x74>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a2b      	ldr	r2, [pc, #172]	@ (8005308 <TIM_OC2_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC2_SetConfig+0x74>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a2a      	ldr	r2, [pc, #168]	@ (800530c <TIM_OC2_SetConfig+0x118>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d10d      	bne.n	8005284 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005282:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1f      	ldr	r2, [pc, #124]	@ (8005304 <TIM_OC2_SetConfig+0x110>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a1e      	ldr	r2, [pc, #120]	@ (8005308 <TIM_OC2_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00f      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1e      	ldr	r2, [pc, #120]	@ (8005310 <TIM_OC2_SetConfig+0x11c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1d      	ldr	r2, [pc, #116]	@ (8005314 <TIM_OC2_SetConfig+0x120>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005318 <TIM_OC2_SetConfig+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_OC2_SetConfig+0xc0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a17      	ldr	r2, [pc, #92]	@ (800530c <TIM_OC2_SetConfig+0x118>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d113      	bne.n	80052dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40013400 	.word	0x40013400
 800530c:	40015000 	.word	0x40015000
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800

0800531c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2b      	ldr	r2, [pc, #172]	@ (8005428 <TIM_OC3_SetConfig+0x10c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d007      	beq.n	800538e <TIM_OC3_SetConfig+0x72>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2a      	ldr	r2, [pc, #168]	@ (800542c <TIM_OC3_SetConfig+0x110>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <TIM_OC3_SetConfig+0x72>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a29      	ldr	r2, [pc, #164]	@ (8005430 <TIM_OC3_SetConfig+0x114>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10d      	bne.n	80053aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005428 <TIM_OC3_SetConfig+0x10c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	@ (800542c <TIM_OC3_SetConfig+0x110>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005434 <TIM_OC3_SetConfig+0x118>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005438 <TIM_OC3_SetConfig+0x11c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <TIM_OC3_SetConfig+0x120>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_OC3_SetConfig+0xbe>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a16      	ldr	r2, [pc, #88]	@ (8005430 <TIM_OC3_SetConfig+0x114>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d113      	bne.n	8005402 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	621a      	str	r2, [r3, #32]
}
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40013400 	.word	0x40013400
 8005430:	40015000 	.word	0x40015000
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800

08005440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800547a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800548e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	031b      	lsls	r3, r3, #12
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2c      	ldr	r2, [pc, #176]	@ (8005550 <TIM_OC4_SetConfig+0x110>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_OC4_SetConfig+0x74>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005554 <TIM_OC4_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC4_SetConfig+0x74>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005558 <TIM_OC4_SetConfig+0x118>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10d      	bne.n	80054d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	031b      	lsls	r3, r3, #12
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005550 <TIM_OC4_SetConfig+0x110>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a1e      	ldr	r2, [pc, #120]	@ (8005554 <TIM_OC4_SetConfig+0x114>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00f      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a1e      	ldr	r2, [pc, #120]	@ (800555c <TIM_OC4_SetConfig+0x11c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005560 <TIM_OC4_SetConfig+0x120>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <TIM_OC4_SetConfig+0x124>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC4_SetConfig+0xc0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a17      	ldr	r2, [pc, #92]	@ (8005558 <TIM_OC4_SetConfig+0x118>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d113      	bne.n	8005528 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005506:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800550e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40013400 	.word	0x40013400
 8005558:	40015000 	.word	0x40015000
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800

08005568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80055ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a19      	ldr	r2, [pc, #100]	@ (8005624 <TIM_OC5_SetConfig+0xbc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <TIM_OC5_SetConfig+0xc0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00f      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a17      	ldr	r2, [pc, #92]	@ (800562c <TIM_OC5_SetConfig+0xc4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <TIM_OC5_SetConfig+0xc8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <TIM_OC5_SetConfig+0xcc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC5_SetConfig+0x82>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a14      	ldr	r2, [pc, #80]	@ (8005638 <TIM_OC5_SetConfig+0xd0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d109      	bne.n	80055fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	621a      	str	r2, [r3, #32]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800
 8005638:	40015000 	.word	0x40015000

0800563c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800566a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	051b      	lsls	r3, r3, #20
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a1a      	ldr	r2, [pc, #104]	@ (80056fc <TIM_OC6_SetConfig+0xc0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a19      	ldr	r2, [pc, #100]	@ (8005700 <TIM_OC6_SetConfig+0xc4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a18      	ldr	r2, [pc, #96]	@ (8005704 <TIM_OC6_SetConfig+0xc8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a17      	ldr	r2, [pc, #92]	@ (8005708 <TIM_OC6_SetConfig+0xcc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a16      	ldr	r2, [pc, #88]	@ (800570c <TIM_OC6_SetConfig+0xd0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC6_SetConfig+0x84>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a15      	ldr	r2, [pc, #84]	@ (8005710 <TIM_OC6_SetConfig+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d109      	bne.n	80056d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40012c00 	.word	0x40012c00
 8005700:	40013400 	.word	0x40013400
 8005704:	40014000 	.word	0x40014000
 8005708:	40014400 	.word	0x40014400
 800570c:	40014800 	.word	0x40014800
 8005710:	40015000 	.word	0x40015000

08005714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2201      	movs	r2, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1a      	ldr	r2, [r3, #32]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	43db      	mvns	r3, r3
 8005736:	401a      	ands	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	431a      	orrs	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e074      	b.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a34      	ldr	r2, [pc, #208]	@ (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a33      	ldr	r2, [pc, #204]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a31      	ldr	r2, [pc, #196]	@ (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d108      	bne.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80057bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a21      	ldr	r2, [pc, #132]	@ (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d01d      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1f      	ldr	r2, [pc, #124]	@ (800587c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1c      	ldr	r2, [pc, #112]	@ (8005884 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a15      	ldr	r2, [pc, #84]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a18      	ldr	r2, [pc, #96]	@ (8005888 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a11      	ldr	r2, [pc, #68]	@ (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10c      	bne.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800583c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4313      	orrs	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40013400 	.word	0x40013400
 8005878:	40015000 	.word	0x40015000
 800587c:	40000400 	.word	0x40000400
 8005880:	40000800 	.word	0x40000800
 8005884:	40000c00 	.word	0x40000c00
 8005888:	40014000 	.word	0x40014000

0800588c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e042      	b.n	8005924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fd fb45 	bl	8002f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2224      	movs	r2, #36	@ 0x24
 80058ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fbec 	bl	80060b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8ed 	bl	8005abc <UART_SetConfig>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e01b      	b.n	8005924 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800590a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fc6b 	bl	80061f8 <UART_CheckIdleState>
 8005922:	4603      	mov	r3, r0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08a      	sub	sp, #40	@ 0x28
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4613      	mov	r3, r2
 800593a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005942:	2b20      	cmp	r3, #32
 8005944:	f040 80b5 	bne.w	8005ab2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_UART_Receive+0x28>
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0ad      	b.n	8005ab4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2222      	movs	r2, #34	@ 0x22
 8005964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800596e:	f7fd fbcd 	bl	800310c <HAL_GetTick>
 8005972:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598c:	d10e      	bne.n	80059ac <HAL_UART_Receive+0x80>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d105      	bne.n	80059a2 <HAL_UART_Receive+0x76>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800599c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80059a0:	e02d      	b.n	80059fe <HAL_UART_Receive+0xd2>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	22ff      	movs	r2, #255	@ 0xff
 80059a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80059aa:	e028      	b.n	80059fe <HAL_UART_Receive+0xd2>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10d      	bne.n	80059d0 <HAL_UART_Receive+0xa4>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <HAL_UART_Receive+0x9a>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	22ff      	movs	r2, #255	@ 0xff
 80059c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80059c4:	e01b      	b.n	80059fe <HAL_UART_Receive+0xd2>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	227f      	movs	r2, #127	@ 0x7f
 80059ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80059ce:	e016      	b.n	80059fe <HAL_UART_Receive+0xd2>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d8:	d10d      	bne.n	80059f6 <HAL_UART_Receive+0xca>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_UART_Receive+0xc0>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	227f      	movs	r2, #127	@ 0x7f
 80059e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80059ea:	e008      	b.n	80059fe <HAL_UART_Receive+0xd2>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	223f      	movs	r2, #63	@ 0x3f
 80059f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80059f4:	e003      	b.n	80059fe <HAL_UART_Receive+0xd2>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a04:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0e:	d108      	bne.n	8005a22 <HAL_UART_Receive+0xf6>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	e003      	b.n	8005a2a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a2a:	e036      	b.n	8005a9a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2200      	movs	r2, #0
 8005a34:	2120      	movs	r1, #32
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fc88 	bl	800634c <UART_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e032      	b.n	8005ab4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10c      	bne.n	8005a6e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	8a7b      	ldrh	r3, [r7, #18]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e00c      	b.n	8005a88 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	8a7b      	ldrh	r3, [r7, #18]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3301      	adds	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1c2      	bne.n	8005a2c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e000      	b.n	8005ab4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac0:	b08c      	sub	sp, #48	@ 0x30
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4baa      	ldr	r3, [pc, #680]	@ (8005d94 <UART_SetConfig+0x2d8>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a9f      	ldr	r2, [pc, #636]	@ (8005d98 <UART_SetConfig+0x2dc>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d004      	beq.n	8005b28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b24:	4313      	orrs	r3, r2
 8005b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005b32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b46:	f023 010f 	bic.w	r1, r3, #15
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a90      	ldr	r2, [pc, #576]	@ (8005d9c <UART_SetConfig+0x2e0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d125      	bne.n	8005bac <UART_SetConfig+0xf0>
 8005b60:	4b8f      	ldr	r3, [pc, #572]	@ (8005da0 <UART_SetConfig+0x2e4>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d81a      	bhi.n	8005ba4 <UART_SetConfig+0xe8>
 8005b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <UART_SetConfig+0xb8>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b85 	.word	0x08005b85
 8005b78:	08005b95 	.word	0x08005b95
 8005b7c:	08005b8d 	.word	0x08005b8d
 8005b80:	08005b9d 	.word	0x08005b9d
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8a:	e116      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b92:	e112      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005b94:	2304      	movs	r3, #4
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b9a:	e10e      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ba2:	e10a      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005baa:	e106      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a7c      	ldr	r2, [pc, #496]	@ (8005da4 <UART_SetConfig+0x2e8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d138      	bne.n	8005c28 <UART_SetConfig+0x16c>
 8005bb6:	4b7a      	ldr	r3, [pc, #488]	@ (8005da0 <UART_SetConfig+0x2e4>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	f003 030c 	and.w	r3, r3, #12
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	d82d      	bhi.n	8005c20 <UART_SetConfig+0x164>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <UART_SetConfig+0x110>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c01 	.word	0x08005c01
 8005bd0:	08005c21 	.word	0x08005c21
 8005bd4:	08005c21 	.word	0x08005c21
 8005bd8:	08005c21 	.word	0x08005c21
 8005bdc:	08005c11 	.word	0x08005c11
 8005be0:	08005c21 	.word	0x08005c21
 8005be4:	08005c21 	.word	0x08005c21
 8005be8:	08005c21 	.word	0x08005c21
 8005bec:	08005c09 	.word	0x08005c09
 8005bf0:	08005c21 	.word	0x08005c21
 8005bf4:	08005c21 	.word	0x08005c21
 8005bf8:	08005c21 	.word	0x08005c21
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c06:	e0d8      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c0e:	e0d4      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c10:	2304      	movs	r3, #4
 8005c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c16:	e0d0      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c18:	2308      	movs	r3, #8
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c1e:	e0cc      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c20:	2310      	movs	r3, #16
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c26:	e0c8      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5e      	ldr	r2, [pc, #376]	@ (8005da8 <UART_SetConfig+0x2ec>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d125      	bne.n	8005c7e <UART_SetConfig+0x1c2>
 8005c32:	4b5b      	ldr	r3, [pc, #364]	@ (8005da0 <UART_SetConfig+0x2e4>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c3c:	2b30      	cmp	r3, #48	@ 0x30
 8005c3e:	d016      	beq.n	8005c6e <UART_SetConfig+0x1b2>
 8005c40:	2b30      	cmp	r3, #48	@ 0x30
 8005c42:	d818      	bhi.n	8005c76 <UART_SetConfig+0x1ba>
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d00a      	beq.n	8005c5e <UART_SetConfig+0x1a2>
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d814      	bhi.n	8005c76 <UART_SetConfig+0x1ba>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <UART_SetConfig+0x19a>
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	d008      	beq.n	8005c66 <UART_SetConfig+0x1aa>
 8005c54:	e00f      	b.n	8005c76 <UART_SetConfig+0x1ba>
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5c:	e0ad      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c64:	e0a9      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c66:	2304      	movs	r3, #4
 8005c68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c6c:	e0a5      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c6e:	2308      	movs	r3, #8
 8005c70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c74:	e0a1      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c76:	2310      	movs	r3, #16
 8005c78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c7c:	e09d      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a4a      	ldr	r2, [pc, #296]	@ (8005dac <UART_SetConfig+0x2f0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d125      	bne.n	8005cd4 <UART_SetConfig+0x218>
 8005c88:	4b45      	ldr	r3, [pc, #276]	@ (8005da0 <UART_SetConfig+0x2e4>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c92:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c94:	d016      	beq.n	8005cc4 <UART_SetConfig+0x208>
 8005c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c98:	d818      	bhi.n	8005ccc <UART_SetConfig+0x210>
 8005c9a:	2b80      	cmp	r3, #128	@ 0x80
 8005c9c:	d00a      	beq.n	8005cb4 <UART_SetConfig+0x1f8>
 8005c9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ca0:	d814      	bhi.n	8005ccc <UART_SetConfig+0x210>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <UART_SetConfig+0x1f0>
 8005ca6:	2b40      	cmp	r3, #64	@ 0x40
 8005ca8:	d008      	beq.n	8005cbc <UART_SetConfig+0x200>
 8005caa:	e00f      	b.n	8005ccc <UART_SetConfig+0x210>
 8005cac:	2300      	movs	r3, #0
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cb2:	e082      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cba:	e07e      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cc2:	e07a      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cca:	e076      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd2:	e072      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a35      	ldr	r2, [pc, #212]	@ (8005db0 <UART_SetConfig+0x2f4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d12a      	bne.n	8005d34 <UART_SetConfig+0x278>
 8005cde:	4b30      	ldr	r3, [pc, #192]	@ (8005da0 <UART_SetConfig+0x2e4>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cec:	d01a      	beq.n	8005d24 <UART_SetConfig+0x268>
 8005cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cf2:	d81b      	bhi.n	8005d2c <UART_SetConfig+0x270>
 8005cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cf8:	d00c      	beq.n	8005d14 <UART_SetConfig+0x258>
 8005cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cfe:	d815      	bhi.n	8005d2c <UART_SetConfig+0x270>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <UART_SetConfig+0x250>
 8005d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d08:	d008      	beq.n	8005d1c <UART_SetConfig+0x260>
 8005d0a:	e00f      	b.n	8005d2c <UART_SetConfig+0x270>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d12:	e052      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d14:	2302      	movs	r3, #2
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d1a:	e04e      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d22:	e04a      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d24:	2308      	movs	r3, #8
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d2a:	e046      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d32:	e042      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <UART_SetConfig+0x2dc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d13a      	bne.n	8005db4 <UART_SetConfig+0x2f8>
 8005d3e:	4b18      	ldr	r3, [pc, #96]	@ (8005da0 <UART_SetConfig+0x2e4>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d4c:	d01a      	beq.n	8005d84 <UART_SetConfig+0x2c8>
 8005d4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d52:	d81b      	bhi.n	8005d8c <UART_SetConfig+0x2d0>
 8005d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d58:	d00c      	beq.n	8005d74 <UART_SetConfig+0x2b8>
 8005d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d5e:	d815      	bhi.n	8005d8c <UART_SetConfig+0x2d0>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <UART_SetConfig+0x2b0>
 8005d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d68:	d008      	beq.n	8005d7c <UART_SetConfig+0x2c0>
 8005d6a:	e00f      	b.n	8005d8c <UART_SetConfig+0x2d0>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d72:	e022      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d74:	2302      	movs	r3, #2
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7a:	e01e      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d82:	e01a      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d84:	2308      	movs	r3, #8
 8005d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d8a:	e016      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d92:	e012      	b.n	8005dba <UART_SetConfig+0x2fe>
 8005d94:	cfff69f3 	.word	0xcfff69f3
 8005d98:	40008000 	.word	0x40008000
 8005d9c:	40013800 	.word	0x40013800
 8005da0:	40021000 	.word	0x40021000
 8005da4:	40004400 	.word	0x40004400
 8005da8:	40004800 	.word	0x40004800
 8005dac:	40004c00 	.word	0x40004c00
 8005db0:	40005000 	.word	0x40005000
 8005db4:	2310      	movs	r3, #16
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4aae      	ldr	r2, [pc, #696]	@ (8006078 <UART_SetConfig+0x5bc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	f040 8097 	bne.w	8005ef4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d823      	bhi.n	8005e16 <UART_SetConfig+0x35a>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0x318>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005e17 	.word	0x08005e17
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e17 	.word	0x08005e17
 8005de4:	08005e07 	.word	0x08005e07
 8005de8:	08005e17 	.word	0x08005e17
 8005dec:	08005e17 	.word	0x08005e17
 8005df0:	08005e17 	.word	0x08005e17
 8005df4:	08005e0f 	.word	0x08005e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df8:	f7fe f9a4 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8005dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dfe:	e010      	b.n	8005e22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e00:	4b9e      	ldr	r3, [pc, #632]	@ (800607c <UART_SetConfig+0x5c0>)
 8005e02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e04:	e00d      	b.n	8005e22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e06:	f7fe f92f 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8005e0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e0c:	e009      	b.n	8005e22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e14:	e005      	b.n	8005e22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8130 	beq.w	800608a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	4a94      	ldr	r2, [pc, #592]	@ (8006080 <UART_SetConfig+0x5c4>)
 8005e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d305      	bcc.n	8005e5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d903      	bls.n	8005e62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e60:	e113      	b.n	800608a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	2200      	movs	r2, #0
 8005e66:	60bb      	str	r3, [r7, #8]
 8005e68:	60fa      	str	r2, [r7, #12]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	4a84      	ldr	r2, [pc, #528]	@ (8006080 <UART_SetConfig+0x5c4>)
 8005e70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2200      	movs	r2, #0
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e84:	f7fa fe6a 	bl	8000b5c <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	020b      	lsls	r3, r1, #8
 8005e9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e9e:	0202      	lsls	r2, r0, #8
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	6849      	ldr	r1, [r1, #4]
 8005ea4:	0849      	lsrs	r1, r1, #1
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	4605      	mov	r5, r0
 8005eac:	eb12 0804 	adds.w	r8, r2, r4
 8005eb0:	eb43 0905 	adc.w	r9, r3, r5
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	469a      	mov	sl, r3
 8005ebc:	4693      	mov	fp, r2
 8005ebe:	4652      	mov	r2, sl
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	f7fa fe49 	bl	8000b5c <__aeabi_uldivmod>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4613      	mov	r3, r2
 8005ed0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed8:	d308      	bcc.n	8005eec <UART_SetConfig+0x430>
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ee0:	d204      	bcs.n	8005eec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6a3a      	ldr	r2, [r7, #32]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	e0ce      	b.n	800608a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ef2:	e0ca      	b.n	800608a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005efc:	d166      	bne.n	8005fcc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005efe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d827      	bhi.n	8005f56 <UART_SetConfig+0x49a>
 8005f06:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0x450>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f31 	.word	0x08005f31
 8005f10:	08005f39 	.word	0x08005f39
 8005f14:	08005f41 	.word	0x08005f41
 8005f18:	08005f57 	.word	0x08005f57
 8005f1c:	08005f47 	.word	0x08005f47
 8005f20:	08005f57 	.word	0x08005f57
 8005f24:	08005f57 	.word	0x08005f57
 8005f28:	08005f57 	.word	0x08005f57
 8005f2c:	08005f4f 	.word	0x08005f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f30:	f7fe f908 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8005f34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f36:	e014      	b.n	8005f62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f38:	f7fe f91a 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8005f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f3e:	e010      	b.n	8005f62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f40:	4b4e      	ldr	r3, [pc, #312]	@ (800607c <UART_SetConfig+0x5c0>)
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f44:	e00d      	b.n	8005f62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f46:	f7fe f88f 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8005f4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f4c:	e009      	b.n	8005f62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f54:	e005      	b.n	8005f62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8090 	beq.w	800608a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6e:	4a44      	ldr	r2, [pc, #272]	@ (8006080 <UART_SetConfig+0x5c4>)
 8005f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f74:	461a      	mov	r2, r3
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f7c:	005a      	lsls	r2, r3, #1
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	441a      	add	r2, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	2b0f      	cmp	r3, #15
 8005f94:	d916      	bls.n	8005fc4 <UART_SetConfig+0x508>
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f9c:	d212      	bcs.n	8005fc4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f023 030f 	bic.w	r3, r3, #15
 8005fa6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	8bfb      	ldrh	r3, [r7, #30]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	8bfa      	ldrh	r2, [r7, #30]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	e062      	b.n	800608a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005fca:	e05e      	b.n	800608a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d828      	bhi.n	8006026 <UART_SetConfig+0x56a>
 8005fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <UART_SetConfig+0x520>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	08006027 	.word	0x08006027
 8005fec:	08006017 	.word	0x08006017
 8005ff0:	08006027 	.word	0x08006027
 8005ff4:	08006027 	.word	0x08006027
 8005ff8:	08006027 	.word	0x08006027
 8005ffc:	0800601f 	.word	0x0800601f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006000:	f7fe f8a0 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8006004:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006006:	e014      	b.n	8006032 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006008:	f7fe f8b2 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 800600c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800600e:	e010      	b.n	8006032 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006010:	4b1a      	ldr	r3, [pc, #104]	@ (800607c <UART_SetConfig+0x5c0>)
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006014:	e00d      	b.n	8006032 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006016:	f7fe f827 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 800601a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800601c:	e009      	b.n	8006032 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006024:	e005      	b.n	8006032 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006030:	bf00      	nop
    }

    if (pclk != 0U)
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d028      	beq.n	800608a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	4a10      	ldr	r2, [pc, #64]	@ (8006080 <UART_SetConfig+0x5c4>)
 800603e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006042:	461a      	mov	r2, r3
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	fbb3 f2f2 	udiv	r2, r3, r2
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	441a      	add	r2, r3
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	fbb2 f3f3 	udiv	r3, r2, r3
 800605a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	2b0f      	cmp	r3, #15
 8006060:	d910      	bls.n	8006084 <UART_SetConfig+0x5c8>
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006068:	d20c      	bcs.n	8006084 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	b29a      	uxth	r2, r3
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60da      	str	r2, [r3, #12]
 8006074:	e009      	b.n	800608a <UART_SetConfig+0x5ce>
 8006076:	bf00      	nop
 8006078:	40008000 	.word	0x40008000
 800607c:	00f42400 	.word	0x00f42400
 8006080:	08007ad8 	.word	0x08007ad8
      }
      else
      {
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2201      	movs	r2, #1
 800608e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2201      	movs	r2, #1
 8006096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2200      	movs	r2, #0
 80060a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3730      	adds	r7, #48	@ 0x30
 80060ae:	46bd      	mov	sp, r7
 80060b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080060b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01a      	beq.n	80061ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b2:	d10a      	bne.n	80061ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b098      	sub	sp, #96	@ 0x60
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006208:	f7fc ff80 	bl	800310c <HAL_GetTick>
 800620c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d12f      	bne.n	800627c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800621c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006224:	2200      	movs	r2, #0
 8006226:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f88e 	bl	800634c <UART_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d022      	beq.n	800627c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624a:	653b      	str	r3, [r7, #80]	@ 0x50
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006254:	647b      	str	r3, [r7, #68]	@ 0x44
 8006256:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800625a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e6      	bne.n	8006236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e063      	b.n	8006344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b04      	cmp	r3, #4
 8006288:	d149      	bne.n	800631e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800628a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006292:	2200      	movs	r2, #0
 8006294:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f857 	bl	800634c <UART_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d03c      	beq.n	800631e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	623b      	str	r3, [r7, #32]
   return(result);
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80062c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e6      	bne.n	80062a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f6:	61fa      	str	r2, [r7, #28]
 80062f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	69b9      	ldr	r1, [r7, #24]
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	617b      	str	r3, [r7, #20]
   return(result);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e012      	b.n	8006344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3758      	adds	r7, #88	@ 0x58
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635c:	e04f      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006364:	d04b      	beq.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7fc fed1 	bl	800310c <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <UART_WaitOnFlagUntilTimeout+0x30>
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e04e      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	d037      	beq.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b80      	cmp	r3, #128	@ 0x80
 8006392:	d034      	beq.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b40      	cmp	r3, #64	@ 0x40
 8006398:	d031      	beq.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d110      	bne.n	80063ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2208      	movs	r2, #8
 80063ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f838 	bl	8006426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2208      	movs	r2, #8
 80063ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e029      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d8:	d111      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f81e 	bl	8006426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e00f      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4013      	ands	r3, r2
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	429a      	cmp	r2, r3
 800641a:	d0a0      	beq.n	800635e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006426:	b480      	push	{r7}
 8006428:	b095      	sub	sp, #84	@ 0x54
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800644c:	643b      	str	r3, [r7, #64]	@ 0x40
 800644e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e6      	bne.n	800642e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3308      	adds	r3, #8
 8006466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3308      	adds	r3, #8
 8006482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800648a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e3      	bne.n	8006460 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d118      	bne.n	80064d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f023 0310 	bic.w	r3, r3, #16
 80064b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6979      	ldr	r1, [r7, #20]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	613b      	str	r3, [r7, #16]
   return(result);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80064e6:	bf00      	nop
 80064e8:	3754      	adds	r7, #84	@ 0x54
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_UARTEx_DisableFifoMode+0x16>
 8006504:	2302      	movs	r3, #2
 8006506:	e027      	b.n	8006558 <HAL_UARTEx_DisableFifoMode+0x66>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	@ 0x24
 8006514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006536:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006578:	2302      	movs	r3, #2
 800657a:	e02d      	b.n	80065d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	@ 0x24
 8006588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f84f 	bl	800665c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e02d      	b.n	8006654 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2224      	movs	r2, #36	@ 0x24
 8006604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f811 	bl	800665c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006668:	2b00      	cmp	r3, #0
 800666a:	d108      	bne.n	800667e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800667c:	e031      	b.n	80066e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800667e:	2308      	movs	r3, #8
 8006680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006682:	2308      	movs	r3, #8
 8006684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	0e5b      	lsrs	r3, r3, #25
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	0f5b      	lsrs	r3, r3, #29
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	7b3a      	ldrb	r2, [r7, #12]
 80066aa:	4911      	ldr	r1, [pc, #68]	@ (80066f0 <UARTEx_SetNbDataToProcess+0x94>)
 80066ac:	5c8a      	ldrb	r2, [r1, r2]
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066b2:	7b3a      	ldrb	r2, [r7, #12]
 80066b4:	490f      	ldr	r1, [pc, #60]	@ (80066f4 <UARTEx_SetNbDataToProcess+0x98>)
 80066b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066bc:	b29a      	uxth	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	7b7a      	ldrb	r2, [r7, #13]
 80066c8:	4909      	ldr	r1, [pc, #36]	@ (80066f0 <UARTEx_SetNbDataToProcess+0x94>)
 80066ca:	5c8a      	ldrb	r2, [r1, r2]
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066d0:	7b7a      	ldrb	r2, [r7, #13]
 80066d2:	4908      	ldr	r1, [pc, #32]	@ (80066f4 <UARTEx_SetNbDataToProcess+0x98>)
 80066d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066da:	b29a      	uxth	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	08007af0 	.word	0x08007af0
 80066f4:	08007af8 	.word	0x08007af8

080066f8 <siscanf>:
 80066f8:	b40e      	push	{r1, r2, r3}
 80066fa:	b530      	push	{r4, r5, lr}
 80066fc:	b09c      	sub	sp, #112	@ 0x70
 80066fe:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006700:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006704:	f854 5b04 	ldr.w	r5, [r4], #4
 8006708:	f8ad 2014 	strh.w	r2, [sp, #20]
 800670c:	9002      	str	r0, [sp, #8]
 800670e:	9006      	str	r0, [sp, #24]
 8006710:	f7f9 fd86 	bl	8000220 <strlen>
 8006714:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <siscanf+0x4c>)
 8006716:	9003      	str	r0, [sp, #12]
 8006718:	9007      	str	r0, [sp, #28]
 800671a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800671c:	480a      	ldr	r0, [pc, #40]	@ (8006748 <siscanf+0x50>)
 800671e:	9401      	str	r4, [sp, #4]
 8006720:	2300      	movs	r3, #0
 8006722:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006724:	9314      	str	r3, [sp, #80]	@ 0x50
 8006726:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800672a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800672e:	462a      	mov	r2, r5
 8006730:	4623      	mov	r3, r4
 8006732:	a902      	add	r1, sp, #8
 8006734:	6800      	ldr	r0, [r0, #0]
 8006736:	f000 fb13 	bl	8006d60 <__ssvfiscanf_r>
 800673a:	b01c      	add	sp, #112	@ 0x70
 800673c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006740:	b003      	add	sp, #12
 8006742:	4770      	bx	lr
 8006744:	0800676f 	.word	0x0800676f
 8006748:	20000020 	.word	0x20000020

0800674c <__sread>:
 800674c:	b510      	push	{r4, lr}
 800674e:	460c      	mov	r4, r1
 8006750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006754:	f000 fa10 	bl	8006b78 <_read_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	bfab      	itete	ge
 800675c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800675e:	89a3      	ldrhlt	r3, [r4, #12]
 8006760:	181b      	addge	r3, r3, r0
 8006762:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006766:	bfac      	ite	ge
 8006768:	6563      	strge	r3, [r4, #84]	@ 0x54
 800676a:	81a3      	strhlt	r3, [r4, #12]
 800676c:	bd10      	pop	{r4, pc}

0800676e <__seofread>:
 800676e:	2000      	movs	r0, #0
 8006770:	4770      	bx	lr

08006772 <__swrite>:
 8006772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006776:	461f      	mov	r7, r3
 8006778:	898b      	ldrh	r3, [r1, #12]
 800677a:	05db      	lsls	r3, r3, #23
 800677c:	4605      	mov	r5, r0
 800677e:	460c      	mov	r4, r1
 8006780:	4616      	mov	r6, r2
 8006782:	d505      	bpl.n	8006790 <__swrite+0x1e>
 8006784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006788:	2302      	movs	r3, #2
 800678a:	2200      	movs	r2, #0
 800678c:	f000 f9e2 	bl	8006b54 <_lseek_r>
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800679a:	81a3      	strh	r3, [r4, #12]
 800679c:	4632      	mov	r2, r6
 800679e:	463b      	mov	r3, r7
 80067a0:	4628      	mov	r0, r5
 80067a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067a6:	f000 b9f9 	b.w	8006b9c <_write_r>

080067aa <__sseek>:
 80067aa:	b510      	push	{r4, lr}
 80067ac:	460c      	mov	r4, r1
 80067ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b2:	f000 f9cf 	bl	8006b54 <_lseek_r>
 80067b6:	1c43      	adds	r3, r0, #1
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	bf15      	itete	ne
 80067bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067c6:	81a3      	strheq	r3, [r4, #12]
 80067c8:	bf18      	it	ne
 80067ca:	81a3      	strhne	r3, [r4, #12]
 80067cc:	bd10      	pop	{r4, pc}

080067ce <__sclose>:
 80067ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d2:	f000 b9af 	b.w	8006b34 <_close_r>
	...

080067d8 <std>:
 80067d8:	2300      	movs	r3, #0
 80067da:	b510      	push	{r4, lr}
 80067dc:	4604      	mov	r4, r0
 80067de:	e9c0 3300 	strd	r3, r3, [r0]
 80067e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067e6:	6083      	str	r3, [r0, #8]
 80067e8:	8181      	strh	r1, [r0, #12]
 80067ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80067ec:	81c2      	strh	r2, [r0, #14]
 80067ee:	6183      	str	r3, [r0, #24]
 80067f0:	4619      	mov	r1, r3
 80067f2:	2208      	movs	r2, #8
 80067f4:	305c      	adds	r0, #92	@ 0x5c
 80067f6:	f000 f995 	bl	8006b24 <memset>
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <std+0x58>)
 80067fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80067fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <std+0x5c>)
 8006800:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <std+0x60>)
 8006804:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006806:	4b0d      	ldr	r3, [pc, #52]	@ (800683c <std+0x64>)
 8006808:	6323      	str	r3, [r4, #48]	@ 0x30
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <std+0x68>)
 800680c:	6224      	str	r4, [r4, #32]
 800680e:	429c      	cmp	r4, r3
 8006810:	d006      	beq.n	8006820 <std+0x48>
 8006812:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006816:	4294      	cmp	r4, r2
 8006818:	d002      	beq.n	8006820 <std+0x48>
 800681a:	33d0      	adds	r3, #208	@ 0xd0
 800681c:	429c      	cmp	r4, r3
 800681e:	d105      	bne.n	800682c <std+0x54>
 8006820:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006828:	f000 b9f4 	b.w	8006c14 <__retarget_lock_init_recursive>
 800682c:	bd10      	pop	{r4, pc}
 800682e:	bf00      	nop
 8006830:	0800674d 	.word	0x0800674d
 8006834:	08006773 	.word	0x08006773
 8006838:	080067ab 	.word	0x080067ab
 800683c:	080067cf 	.word	0x080067cf
 8006840:	20000340 	.word	0x20000340

08006844 <stdio_exit_handler>:
 8006844:	4a02      	ldr	r2, [pc, #8]	@ (8006850 <stdio_exit_handler+0xc>)
 8006846:	4903      	ldr	r1, [pc, #12]	@ (8006854 <stdio_exit_handler+0x10>)
 8006848:	4803      	ldr	r0, [pc, #12]	@ (8006858 <stdio_exit_handler+0x14>)
 800684a:	f000 b8ef 	b.w	8006a2c <_fwalk_sglue>
 800684e:	bf00      	nop
 8006850:	20000014 	.word	0x20000014
 8006854:	080075a5 	.word	0x080075a5
 8006858:	20000024 	.word	0x20000024

0800685c <cleanup_stdio>:
 800685c:	6841      	ldr	r1, [r0, #4]
 800685e:	4b0c      	ldr	r3, [pc, #48]	@ (8006890 <cleanup_stdio+0x34>)
 8006860:	4299      	cmp	r1, r3
 8006862:	b510      	push	{r4, lr}
 8006864:	4604      	mov	r4, r0
 8006866:	d001      	beq.n	800686c <cleanup_stdio+0x10>
 8006868:	f000 fe9c 	bl	80075a4 <_fflush_r>
 800686c:	68a1      	ldr	r1, [r4, #8]
 800686e:	4b09      	ldr	r3, [pc, #36]	@ (8006894 <cleanup_stdio+0x38>)
 8006870:	4299      	cmp	r1, r3
 8006872:	d002      	beq.n	800687a <cleanup_stdio+0x1e>
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fe95 	bl	80075a4 <_fflush_r>
 800687a:	68e1      	ldr	r1, [r4, #12]
 800687c:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <cleanup_stdio+0x3c>)
 800687e:	4299      	cmp	r1, r3
 8006880:	d004      	beq.n	800688c <cleanup_stdio+0x30>
 8006882:	4620      	mov	r0, r4
 8006884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006888:	f000 be8c 	b.w	80075a4 <_fflush_r>
 800688c:	bd10      	pop	{r4, pc}
 800688e:	bf00      	nop
 8006890:	20000340 	.word	0x20000340
 8006894:	200003a8 	.word	0x200003a8
 8006898:	20000410 	.word	0x20000410

0800689c <global_stdio_init.part.0>:
 800689c:	b510      	push	{r4, lr}
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <global_stdio_init.part.0+0x30>)
 80068a0:	4c0b      	ldr	r4, [pc, #44]	@ (80068d0 <global_stdio_init.part.0+0x34>)
 80068a2:	4a0c      	ldr	r2, [pc, #48]	@ (80068d4 <global_stdio_init.part.0+0x38>)
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	4620      	mov	r0, r4
 80068a8:	2200      	movs	r2, #0
 80068aa:	2104      	movs	r1, #4
 80068ac:	f7ff ff94 	bl	80067d8 <std>
 80068b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068b4:	2201      	movs	r2, #1
 80068b6:	2109      	movs	r1, #9
 80068b8:	f7ff ff8e 	bl	80067d8 <std>
 80068bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068c0:	2202      	movs	r2, #2
 80068c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c6:	2112      	movs	r1, #18
 80068c8:	f7ff bf86 	b.w	80067d8 <std>
 80068cc:	20000478 	.word	0x20000478
 80068d0:	20000340 	.word	0x20000340
 80068d4:	08006845 	.word	0x08006845

080068d8 <__sfp_lock_acquire>:
 80068d8:	4801      	ldr	r0, [pc, #4]	@ (80068e0 <__sfp_lock_acquire+0x8>)
 80068da:	f000 b99c 	b.w	8006c16 <__retarget_lock_acquire_recursive>
 80068de:	bf00      	nop
 80068e0:	20000481 	.word	0x20000481

080068e4 <__sfp_lock_release>:
 80068e4:	4801      	ldr	r0, [pc, #4]	@ (80068ec <__sfp_lock_release+0x8>)
 80068e6:	f000 b997 	b.w	8006c18 <__retarget_lock_release_recursive>
 80068ea:	bf00      	nop
 80068ec:	20000481 	.word	0x20000481

080068f0 <__sinit>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	4604      	mov	r4, r0
 80068f4:	f7ff fff0 	bl	80068d8 <__sfp_lock_acquire>
 80068f8:	6a23      	ldr	r3, [r4, #32]
 80068fa:	b11b      	cbz	r3, 8006904 <__sinit+0x14>
 80068fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006900:	f7ff bff0 	b.w	80068e4 <__sfp_lock_release>
 8006904:	4b04      	ldr	r3, [pc, #16]	@ (8006918 <__sinit+0x28>)
 8006906:	6223      	str	r3, [r4, #32]
 8006908:	4b04      	ldr	r3, [pc, #16]	@ (800691c <__sinit+0x2c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f5      	bne.n	80068fc <__sinit+0xc>
 8006910:	f7ff ffc4 	bl	800689c <global_stdio_init.part.0>
 8006914:	e7f2      	b.n	80068fc <__sinit+0xc>
 8006916:	bf00      	nop
 8006918:	0800685d 	.word	0x0800685d
 800691c:	20000478 	.word	0x20000478

08006920 <_strtol_l.constprop.0>:
 8006920:	2b24      	cmp	r3, #36	@ 0x24
 8006922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006926:	4686      	mov	lr, r0
 8006928:	4690      	mov	r8, r2
 800692a:	d801      	bhi.n	8006930 <_strtol_l.constprop.0+0x10>
 800692c:	2b01      	cmp	r3, #1
 800692e:	d106      	bne.n	800693e <_strtol_l.constprop.0+0x1e>
 8006930:	f000 f946 	bl	8006bc0 <__errno>
 8006934:	2316      	movs	r3, #22
 8006936:	6003      	str	r3, [r0, #0]
 8006938:	2000      	movs	r0, #0
 800693a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693e:	4834      	ldr	r0, [pc, #208]	@ (8006a10 <_strtol_l.constprop.0+0xf0>)
 8006940:	460d      	mov	r5, r1
 8006942:	462a      	mov	r2, r5
 8006944:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006948:	5d06      	ldrb	r6, [r0, r4]
 800694a:	f016 0608 	ands.w	r6, r6, #8
 800694e:	d1f8      	bne.n	8006942 <_strtol_l.constprop.0+0x22>
 8006950:	2c2d      	cmp	r4, #45	@ 0x2d
 8006952:	d12d      	bne.n	80069b0 <_strtol_l.constprop.0+0x90>
 8006954:	782c      	ldrb	r4, [r5, #0]
 8006956:	2601      	movs	r6, #1
 8006958:	1c95      	adds	r5, r2, #2
 800695a:	f033 0210 	bics.w	r2, r3, #16
 800695e:	d109      	bne.n	8006974 <_strtol_l.constprop.0+0x54>
 8006960:	2c30      	cmp	r4, #48	@ 0x30
 8006962:	d12a      	bne.n	80069ba <_strtol_l.constprop.0+0x9a>
 8006964:	782a      	ldrb	r2, [r5, #0]
 8006966:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800696a:	2a58      	cmp	r2, #88	@ 0x58
 800696c:	d125      	bne.n	80069ba <_strtol_l.constprop.0+0x9a>
 800696e:	786c      	ldrb	r4, [r5, #1]
 8006970:	2310      	movs	r3, #16
 8006972:	3502      	adds	r5, #2
 8006974:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006978:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800697c:	2200      	movs	r2, #0
 800697e:	fbbc f9f3 	udiv	r9, ip, r3
 8006982:	4610      	mov	r0, r2
 8006984:	fb03 ca19 	mls	sl, r3, r9, ip
 8006988:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800698c:	2f09      	cmp	r7, #9
 800698e:	d81b      	bhi.n	80069c8 <_strtol_l.constprop.0+0xa8>
 8006990:	463c      	mov	r4, r7
 8006992:	42a3      	cmp	r3, r4
 8006994:	dd27      	ble.n	80069e6 <_strtol_l.constprop.0+0xc6>
 8006996:	1c57      	adds	r7, r2, #1
 8006998:	d007      	beq.n	80069aa <_strtol_l.constprop.0+0x8a>
 800699a:	4581      	cmp	r9, r0
 800699c:	d320      	bcc.n	80069e0 <_strtol_l.constprop.0+0xc0>
 800699e:	d101      	bne.n	80069a4 <_strtol_l.constprop.0+0x84>
 80069a0:	45a2      	cmp	sl, r4
 80069a2:	db1d      	blt.n	80069e0 <_strtol_l.constprop.0+0xc0>
 80069a4:	fb00 4003 	mla	r0, r0, r3, r4
 80069a8:	2201      	movs	r2, #1
 80069aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069ae:	e7eb      	b.n	8006988 <_strtol_l.constprop.0+0x68>
 80069b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80069b2:	bf04      	itt	eq
 80069b4:	782c      	ldrbeq	r4, [r5, #0]
 80069b6:	1c95      	addeq	r5, r2, #2
 80069b8:	e7cf      	b.n	800695a <_strtol_l.constprop.0+0x3a>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1da      	bne.n	8006974 <_strtol_l.constprop.0+0x54>
 80069be:	2c30      	cmp	r4, #48	@ 0x30
 80069c0:	bf0c      	ite	eq
 80069c2:	2308      	moveq	r3, #8
 80069c4:	230a      	movne	r3, #10
 80069c6:	e7d5      	b.n	8006974 <_strtol_l.constprop.0+0x54>
 80069c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80069cc:	2f19      	cmp	r7, #25
 80069ce:	d801      	bhi.n	80069d4 <_strtol_l.constprop.0+0xb4>
 80069d0:	3c37      	subs	r4, #55	@ 0x37
 80069d2:	e7de      	b.n	8006992 <_strtol_l.constprop.0+0x72>
 80069d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80069d8:	2f19      	cmp	r7, #25
 80069da:	d804      	bhi.n	80069e6 <_strtol_l.constprop.0+0xc6>
 80069dc:	3c57      	subs	r4, #87	@ 0x57
 80069de:	e7d8      	b.n	8006992 <_strtol_l.constprop.0+0x72>
 80069e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069e4:	e7e1      	b.n	80069aa <_strtol_l.constprop.0+0x8a>
 80069e6:	1c53      	adds	r3, r2, #1
 80069e8:	d108      	bne.n	80069fc <_strtol_l.constprop.0+0xdc>
 80069ea:	2322      	movs	r3, #34	@ 0x22
 80069ec:	f8ce 3000 	str.w	r3, [lr]
 80069f0:	4660      	mov	r0, ip
 80069f2:	f1b8 0f00 	cmp.w	r8, #0
 80069f6:	d0a0      	beq.n	800693a <_strtol_l.constprop.0+0x1a>
 80069f8:	1e69      	subs	r1, r5, #1
 80069fa:	e006      	b.n	8006a0a <_strtol_l.constprop.0+0xea>
 80069fc:	b106      	cbz	r6, 8006a00 <_strtol_l.constprop.0+0xe0>
 80069fe:	4240      	negs	r0, r0
 8006a00:	f1b8 0f00 	cmp.w	r8, #0
 8006a04:	d099      	beq.n	800693a <_strtol_l.constprop.0+0x1a>
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	d1f6      	bne.n	80069f8 <_strtol_l.constprop.0+0xd8>
 8006a0a:	f8c8 1000 	str.w	r1, [r8]
 8006a0e:	e794      	b.n	800693a <_strtol_l.constprop.0+0x1a>
 8006a10:	08007b01 	.word	0x08007b01

08006a14 <_strtol_r>:
 8006a14:	f7ff bf84 	b.w	8006920 <_strtol_l.constprop.0>

08006a18 <strtol>:
 8006a18:	4613      	mov	r3, r2
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	4601      	mov	r1, r0
 8006a1e:	4802      	ldr	r0, [pc, #8]	@ (8006a28 <strtol+0x10>)
 8006a20:	6800      	ldr	r0, [r0, #0]
 8006a22:	f7ff bf7d 	b.w	8006920 <_strtol_l.constprop.0>
 8006a26:	bf00      	nop
 8006a28:	20000020 	.word	0x20000020

08006a2c <_fwalk_sglue>:
 8006a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a30:	4607      	mov	r7, r0
 8006a32:	4688      	mov	r8, r1
 8006a34:	4614      	mov	r4, r2
 8006a36:	2600      	movs	r6, #0
 8006a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a40:	d505      	bpl.n	8006a4e <_fwalk_sglue+0x22>
 8006a42:	6824      	ldr	r4, [r4, #0]
 8006a44:	2c00      	cmp	r4, #0
 8006a46:	d1f7      	bne.n	8006a38 <_fwalk_sglue+0xc>
 8006a48:	4630      	mov	r0, r6
 8006a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d907      	bls.n	8006a64 <_fwalk_sglue+0x38>
 8006a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	d003      	beq.n	8006a64 <_fwalk_sglue+0x38>
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	4638      	mov	r0, r7
 8006a60:	47c0      	blx	r8
 8006a62:	4306      	orrs	r6, r0
 8006a64:	3568      	adds	r5, #104	@ 0x68
 8006a66:	e7e9      	b.n	8006a3c <_fwalk_sglue+0x10>

08006a68 <_puts_r>:
 8006a68:	6a03      	ldr	r3, [r0, #32]
 8006a6a:	b570      	push	{r4, r5, r6, lr}
 8006a6c:	6884      	ldr	r4, [r0, #8]
 8006a6e:	4605      	mov	r5, r0
 8006a70:	460e      	mov	r6, r1
 8006a72:	b90b      	cbnz	r3, 8006a78 <_puts_r+0x10>
 8006a74:	f7ff ff3c 	bl	80068f0 <__sinit>
 8006a78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a7a:	07db      	lsls	r3, r3, #31
 8006a7c:	d405      	bmi.n	8006a8a <_puts_r+0x22>
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	0598      	lsls	r0, r3, #22
 8006a82:	d402      	bmi.n	8006a8a <_puts_r+0x22>
 8006a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a86:	f000 f8c6 	bl	8006c16 <__retarget_lock_acquire_recursive>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	0719      	lsls	r1, r3, #28
 8006a8e:	d502      	bpl.n	8006a96 <_puts_r+0x2e>
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d135      	bne.n	8006b02 <_puts_r+0x9a>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 fecd 	bl	8007838 <__swsetup_r>
 8006a9e:	b380      	cbz	r0, 8006b02 <_puts_r+0x9a>
 8006aa0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006aa6:	07da      	lsls	r2, r3, #31
 8006aa8:	d405      	bmi.n	8006ab6 <_puts_r+0x4e>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	059b      	lsls	r3, r3, #22
 8006aae:	d402      	bmi.n	8006ab6 <_puts_r+0x4e>
 8006ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ab2:	f000 f8b1 	bl	8006c18 <__retarget_lock_release_recursive>
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da04      	bge.n	8006ac8 <_puts_r+0x60>
 8006abe:	69a2      	ldr	r2, [r4, #24]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	dc17      	bgt.n	8006af4 <_puts_r+0x8c>
 8006ac4:	290a      	cmp	r1, #10
 8006ac6:	d015      	beq.n	8006af4 <_puts_r+0x8c>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	6022      	str	r2, [r4, #0]
 8006ace:	7019      	strb	r1, [r3, #0]
 8006ad0:	68a3      	ldr	r3, [r4, #8]
 8006ad2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	60a3      	str	r3, [r4, #8]
 8006ada:	2900      	cmp	r1, #0
 8006adc:	d1ed      	bne.n	8006aba <_puts_r+0x52>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	da11      	bge.n	8006b06 <_puts_r+0x9e>
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	210a      	movs	r1, #10
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 fe68 	bl	80077bc <__swbuf_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d0d7      	beq.n	8006aa0 <_puts_r+0x38>
 8006af0:	250a      	movs	r5, #10
 8006af2:	e7d7      	b.n	8006aa4 <_puts_r+0x3c>
 8006af4:	4622      	mov	r2, r4
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 fe60 	bl	80077bc <__swbuf_r>
 8006afc:	3001      	adds	r0, #1
 8006afe:	d1e7      	bne.n	8006ad0 <_puts_r+0x68>
 8006b00:	e7ce      	b.n	8006aa0 <_puts_r+0x38>
 8006b02:	3e01      	subs	r6, #1
 8006b04:	e7e4      	b.n	8006ad0 <_puts_r+0x68>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	6022      	str	r2, [r4, #0]
 8006b0c:	220a      	movs	r2, #10
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	e7ee      	b.n	8006af0 <_puts_r+0x88>
	...

08006b14 <puts>:
 8006b14:	4b02      	ldr	r3, [pc, #8]	@ (8006b20 <puts+0xc>)
 8006b16:	4601      	mov	r1, r0
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	f7ff bfa5 	b.w	8006a68 <_puts_r>
 8006b1e:	bf00      	nop
 8006b20:	20000020 	.word	0x20000020

08006b24 <memset>:
 8006b24:	4402      	add	r2, r0
 8006b26:	4603      	mov	r3, r0
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d100      	bne.n	8006b2e <memset+0xa>
 8006b2c:	4770      	bx	lr
 8006b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b32:	e7f9      	b.n	8006b28 <memset+0x4>

08006b34 <_close_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	@ (8006b50 <_close_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fb fda6 	bl	8002690 <_close>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_close_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_close_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	2000047c 	.word	0x2000047c

08006b54 <_lseek_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4d07      	ldr	r5, [pc, #28]	@ (8006b74 <_lseek_r+0x20>)
 8006b58:	4604      	mov	r4, r0
 8006b5a:	4608      	mov	r0, r1
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	2200      	movs	r2, #0
 8006b60:	602a      	str	r2, [r5, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f7fb fdbb 	bl	80026de <_lseek>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d102      	bne.n	8006b72 <_lseek_r+0x1e>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	b103      	cbz	r3, 8006b72 <_lseek_r+0x1e>
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	2000047c 	.word	0x2000047c

08006b78 <_read_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4d07      	ldr	r5, [pc, #28]	@ (8006b98 <_read_r+0x20>)
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	4608      	mov	r0, r1
 8006b80:	4611      	mov	r1, r2
 8006b82:	2200      	movs	r2, #0
 8006b84:	602a      	str	r2, [r5, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f7fb fd49 	bl	800261e <_read>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_read_r+0x1e>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_read_r+0x1e>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	2000047c 	.word	0x2000047c

08006b9c <_write_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d07      	ldr	r5, [pc, #28]	@ (8006bbc <_write_r+0x20>)
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	4608      	mov	r0, r1
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	602a      	str	r2, [r5, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f7fb fd54 	bl	8002658 <_write>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_write_r+0x1e>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_write_r+0x1e>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	2000047c 	.word	0x2000047c

08006bc0 <__errno>:
 8006bc0:	4b01      	ldr	r3, [pc, #4]	@ (8006bc8 <__errno+0x8>)
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000020 	.word	0x20000020

08006bcc <__libc_init_array>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4d0d      	ldr	r5, [pc, #52]	@ (8006c04 <__libc_init_array+0x38>)
 8006bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8006c08 <__libc_init_array+0x3c>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	42a6      	cmp	r6, r4
 8006bda:	d109      	bne.n	8006bf0 <__libc_init_array+0x24>
 8006bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8006c0c <__libc_init_array+0x40>)
 8006bde:	4c0c      	ldr	r4, [pc, #48]	@ (8006c10 <__libc_init_array+0x44>)
 8006be0:	f000 ff2a 	bl	8007a38 <_init>
 8006be4:	1b64      	subs	r4, r4, r5
 8006be6:	10a4      	asrs	r4, r4, #2
 8006be8:	2600      	movs	r6, #0
 8006bea:	42a6      	cmp	r6, r4
 8006bec:	d105      	bne.n	8006bfa <__libc_init_array+0x2e>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf4:	4798      	blx	r3
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__libc_init_array+0xc>
 8006bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfe:	4798      	blx	r3
 8006c00:	3601      	adds	r6, #1
 8006c02:	e7f2      	b.n	8006bea <__libc_init_array+0x1e>
 8006c04:	08007c28 	.word	0x08007c28
 8006c08:	08007c28 	.word	0x08007c28
 8006c0c:	08007c28 	.word	0x08007c28
 8006c10:	08007c2c 	.word	0x08007c2c

08006c14 <__retarget_lock_init_recursive>:
 8006c14:	4770      	bx	lr

08006c16 <__retarget_lock_acquire_recursive>:
 8006c16:	4770      	bx	lr

08006c18 <__retarget_lock_release_recursive>:
 8006c18:	4770      	bx	lr
	...

08006c1c <_free_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4605      	mov	r5, r0
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d041      	beq.n	8006ca8 <_free_r+0x8c>
 8006c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c28:	1f0c      	subs	r4, r1, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bfb8      	it	lt
 8006c2e:	18e4      	addlt	r4, r4, r3
 8006c30:	f000 fce0 	bl	80075f4 <__malloc_lock>
 8006c34:	4a1d      	ldr	r2, [pc, #116]	@ (8006cac <_free_r+0x90>)
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	b933      	cbnz	r3, 8006c48 <_free_r+0x2c>
 8006c3a:	6063      	str	r3, [r4, #4]
 8006c3c:	6014      	str	r4, [r2, #0]
 8006c3e:	4628      	mov	r0, r5
 8006c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c44:	f000 bcdc 	b.w	8007600 <__malloc_unlock>
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	d908      	bls.n	8006c5e <_free_r+0x42>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	1821      	adds	r1, r4, r0
 8006c50:	428b      	cmp	r3, r1
 8006c52:	bf01      	itttt	eq
 8006c54:	6819      	ldreq	r1, [r3, #0]
 8006c56:	685b      	ldreq	r3, [r3, #4]
 8006c58:	1809      	addeq	r1, r1, r0
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	e7ed      	b.n	8006c3a <_free_r+0x1e>
 8006c5e:	461a      	mov	r2, r3
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b10b      	cbz	r3, 8006c68 <_free_r+0x4c>
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d9fa      	bls.n	8006c5e <_free_r+0x42>
 8006c68:	6811      	ldr	r1, [r2, #0]
 8006c6a:	1850      	adds	r0, r2, r1
 8006c6c:	42a0      	cmp	r0, r4
 8006c6e:	d10b      	bne.n	8006c88 <_free_r+0x6c>
 8006c70:	6820      	ldr	r0, [r4, #0]
 8006c72:	4401      	add	r1, r0
 8006c74:	1850      	adds	r0, r2, r1
 8006c76:	4283      	cmp	r3, r0
 8006c78:	6011      	str	r1, [r2, #0]
 8006c7a:	d1e0      	bne.n	8006c3e <_free_r+0x22>
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	6053      	str	r3, [r2, #4]
 8006c82:	4408      	add	r0, r1
 8006c84:	6010      	str	r0, [r2, #0]
 8006c86:	e7da      	b.n	8006c3e <_free_r+0x22>
 8006c88:	d902      	bls.n	8006c90 <_free_r+0x74>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	e7d6      	b.n	8006c3e <_free_r+0x22>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	1821      	adds	r1, r4, r0
 8006c94:	428b      	cmp	r3, r1
 8006c96:	bf04      	itt	eq
 8006c98:	6819      	ldreq	r1, [r3, #0]
 8006c9a:	685b      	ldreq	r3, [r3, #4]
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	bf04      	itt	eq
 8006ca0:	1809      	addeq	r1, r1, r0
 8006ca2:	6021      	streq	r1, [r4, #0]
 8006ca4:	6054      	str	r4, [r2, #4]
 8006ca6:	e7ca      	b.n	8006c3e <_free_r+0x22>
 8006ca8:	bd38      	pop	{r3, r4, r5, pc}
 8006caa:	bf00      	nop
 8006cac:	20000488 	.word	0x20000488

08006cb0 <_sungetc_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	1c4b      	adds	r3, r1, #1
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	d103      	bne.n	8006cc0 <_sungetc_r+0x10>
 8006cb8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	8993      	ldrh	r3, [r2, #12]
 8006cc2:	f023 0320 	bic.w	r3, r3, #32
 8006cc6:	8193      	strh	r3, [r2, #12]
 8006cc8:	6853      	ldr	r3, [r2, #4]
 8006cca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ccc:	b2cd      	uxtb	r5, r1
 8006cce:	b18a      	cbz	r2, 8006cf4 <_sungetc_r+0x44>
 8006cd0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	dd08      	ble.n	8006ce8 <_sungetc_r+0x38>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	1e5a      	subs	r2, r3, #1
 8006cda:	6022      	str	r2, [r4, #0]
 8006cdc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	6063      	str	r3, [r4, #4]
 8006ce6:	e7e9      	b.n	8006cbc <_sungetc_r+0xc>
 8006ce8:	4621      	mov	r1, r4
 8006cea:	f000 fc8f 	bl	800760c <__submore>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d0f1      	beq.n	8006cd6 <_sungetc_r+0x26>
 8006cf2:	e7e1      	b.n	8006cb8 <_sungetc_r+0x8>
 8006cf4:	6921      	ldr	r1, [r4, #16]
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	b141      	cbz	r1, 8006d0c <_sungetc_r+0x5c>
 8006cfa:	4291      	cmp	r1, r2
 8006cfc:	d206      	bcs.n	8006d0c <_sungetc_r+0x5c>
 8006cfe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006d02:	42a9      	cmp	r1, r5
 8006d04:	d102      	bne.n	8006d0c <_sungetc_r+0x5c>
 8006d06:	3a01      	subs	r2, #1
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	e7ea      	b.n	8006ce2 <_sungetc_r+0x32>
 8006d0c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d14:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d16:	2303      	movs	r3, #3
 8006d18:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006d1a:	4623      	mov	r3, r4
 8006d1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	2301      	movs	r3, #1
 8006d24:	e7de      	b.n	8006ce4 <_sungetc_r+0x34>

08006d26 <__ssrefill_r>:
 8006d26:	b510      	push	{r4, lr}
 8006d28:	460c      	mov	r4, r1
 8006d2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006d2c:	b169      	cbz	r1, 8006d4a <__ssrefill_r+0x24>
 8006d2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d32:	4299      	cmp	r1, r3
 8006d34:	d001      	beq.n	8006d3a <__ssrefill_r+0x14>
 8006d36:	f7ff ff71 	bl	8006c1c <_free_r>
 8006d3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d3c:	6063      	str	r3, [r4, #4]
 8006d3e:	2000      	movs	r0, #0
 8006d40:	6360      	str	r0, [r4, #52]	@ 0x34
 8006d42:	b113      	cbz	r3, 8006d4a <__ssrefill_r+0x24>
 8006d44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	f043 0320 	orr.w	r3, r3, #32
 8006d58:	81a3      	strh	r3, [r4, #12]
 8006d5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d5e:	e7f3      	b.n	8006d48 <__ssrefill_r+0x22>

08006d60 <__ssvfiscanf_r>:
 8006d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d64:	460c      	mov	r4, r1
 8006d66:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006d70:	49a5      	ldr	r1, [pc, #660]	@ (8007008 <__ssvfiscanf_r+0x2a8>)
 8006d72:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006d74:	f10d 0804 	add.w	r8, sp, #4
 8006d78:	49a4      	ldr	r1, [pc, #656]	@ (800700c <__ssvfiscanf_r+0x2ac>)
 8006d7a:	4fa5      	ldr	r7, [pc, #660]	@ (8007010 <__ssvfiscanf_r+0x2b0>)
 8006d7c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006d80:	4606      	mov	r6, r0
 8006d82:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	7813      	ldrb	r3, [r2, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8158 	beq.w	800703e <__ssvfiscanf_r+0x2de>
 8006d8e:	5cf9      	ldrb	r1, [r7, r3]
 8006d90:	f011 0108 	ands.w	r1, r1, #8
 8006d94:	f102 0501 	add.w	r5, r2, #1
 8006d98:	d019      	beq.n	8006dce <__ssvfiscanf_r+0x6e>
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd0f      	ble.n	8006dc0 <__ssvfiscanf_r+0x60>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	781a      	ldrb	r2, [r3, #0]
 8006da4:	5cba      	ldrb	r2, [r7, r2]
 8006da6:	0712      	lsls	r2, r2, #28
 8006da8:	d401      	bmi.n	8006dae <__ssvfiscanf_r+0x4e>
 8006daa:	462a      	mov	r2, r5
 8006dac:	e7eb      	b.n	8006d86 <__ssvfiscanf_r+0x26>
 8006dae:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006db0:	3201      	adds	r2, #1
 8006db2:	9245      	str	r2, [sp, #276]	@ 0x114
 8006db4:	6862      	ldr	r2, [r4, #4]
 8006db6:	3301      	adds	r3, #1
 8006db8:	3a01      	subs	r2, #1
 8006dba:	6062      	str	r2, [r4, #4]
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	e7ec      	b.n	8006d9a <__ssvfiscanf_r+0x3a>
 8006dc0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	4798      	blx	r3
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d0e9      	beq.n	8006da0 <__ssvfiscanf_r+0x40>
 8006dcc:	e7ed      	b.n	8006daa <__ssvfiscanf_r+0x4a>
 8006dce:	2b25      	cmp	r3, #37	@ 0x25
 8006dd0:	d012      	beq.n	8006df8 <__ssvfiscanf_r+0x98>
 8006dd2:	4699      	mov	r9, r3
 8006dd4:	6863      	ldr	r3, [r4, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f340 8093 	ble.w	8006f02 <__ssvfiscanf_r+0x1a2>
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	7813      	ldrb	r3, [r2, #0]
 8006de0:	454b      	cmp	r3, r9
 8006de2:	f040 812c 	bne.w	800703e <__ssvfiscanf_r+0x2de>
 8006de6:	6863      	ldr	r3, [r4, #4]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	6063      	str	r3, [r4, #4]
 8006dec:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006dee:	3201      	adds	r2, #1
 8006df0:	3301      	adds	r3, #1
 8006df2:	6022      	str	r2, [r4, #0]
 8006df4:	9345      	str	r3, [sp, #276]	@ 0x114
 8006df6:	e7d8      	b.n	8006daa <__ssvfiscanf_r+0x4a>
 8006df8:	9141      	str	r1, [sp, #260]	@ 0x104
 8006dfa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006dfc:	7853      	ldrb	r3, [r2, #1]
 8006dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e00:	bf02      	ittt	eq
 8006e02:	2310      	moveq	r3, #16
 8006e04:	1c95      	addeq	r5, r2, #2
 8006e06:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006e08:	220a      	movs	r2, #10
 8006e0a:	46a9      	mov	r9, r5
 8006e0c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006e10:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006e14:	2b09      	cmp	r3, #9
 8006e16:	d91e      	bls.n	8006e56 <__ssvfiscanf_r+0xf6>
 8006e18:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8007014 <__ssvfiscanf_r+0x2b4>
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	4650      	mov	r0, sl
 8006e20:	f7f9 fa06 	bl	8000230 <memchr>
 8006e24:	b138      	cbz	r0, 8006e36 <__ssvfiscanf_r+0xd6>
 8006e26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006e28:	eba0 000a 	sub.w	r0, r0, sl
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4083      	lsls	r3, r0
 8006e30:	4313      	orrs	r3, r2
 8006e32:	9341      	str	r3, [sp, #260]	@ 0x104
 8006e34:	464d      	mov	r5, r9
 8006e36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e3a:	2b78      	cmp	r3, #120	@ 0x78
 8006e3c:	d806      	bhi.n	8006e4c <__ssvfiscanf_r+0xec>
 8006e3e:	2b57      	cmp	r3, #87	@ 0x57
 8006e40:	d810      	bhi.n	8006e64 <__ssvfiscanf_r+0x104>
 8006e42:	2b25      	cmp	r3, #37	@ 0x25
 8006e44:	d0c5      	beq.n	8006dd2 <__ssvfiscanf_r+0x72>
 8006e46:	d857      	bhi.n	8006ef8 <__ssvfiscanf_r+0x198>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d065      	beq.n	8006f18 <__ssvfiscanf_r+0x1b8>
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006e50:	230a      	movs	r3, #10
 8006e52:	9342      	str	r3, [sp, #264]	@ 0x108
 8006e54:	e078      	b.n	8006f48 <__ssvfiscanf_r+0x1e8>
 8006e56:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006e58:	fb02 1103 	mla	r1, r2, r3, r1
 8006e5c:	3930      	subs	r1, #48	@ 0x30
 8006e5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006e60:	464d      	mov	r5, r9
 8006e62:	e7d2      	b.n	8006e0a <__ssvfiscanf_r+0xaa>
 8006e64:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006e68:	2a20      	cmp	r2, #32
 8006e6a:	d8ef      	bhi.n	8006e4c <__ssvfiscanf_r+0xec>
 8006e6c:	a101      	add	r1, pc, #4	@ (adr r1, 8006e74 <__ssvfiscanf_r+0x114>)
 8006e6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006f27 	.word	0x08006f27
 8006e78:	08006e4d 	.word	0x08006e4d
 8006e7c:	08006e4d 	.word	0x08006e4d
 8006e80:	08006f81 	.word	0x08006f81
 8006e84:	08006e4d 	.word	0x08006e4d
 8006e88:	08006e4d 	.word	0x08006e4d
 8006e8c:	08006e4d 	.word	0x08006e4d
 8006e90:	08006e4d 	.word	0x08006e4d
 8006e94:	08006e4d 	.word	0x08006e4d
 8006e98:	08006e4d 	.word	0x08006e4d
 8006e9c:	08006e4d 	.word	0x08006e4d
 8006ea0:	08006f97 	.word	0x08006f97
 8006ea4:	08006f7d 	.word	0x08006f7d
 8006ea8:	08006eff 	.word	0x08006eff
 8006eac:	08006eff 	.word	0x08006eff
 8006eb0:	08006eff 	.word	0x08006eff
 8006eb4:	08006e4d 	.word	0x08006e4d
 8006eb8:	08006f39 	.word	0x08006f39
 8006ebc:	08006e4d 	.word	0x08006e4d
 8006ec0:	08006e4d 	.word	0x08006e4d
 8006ec4:	08006e4d 	.word	0x08006e4d
 8006ec8:	08006e4d 	.word	0x08006e4d
 8006ecc:	08006fa7 	.word	0x08006fa7
 8006ed0:	08006f41 	.word	0x08006f41
 8006ed4:	08006f1f 	.word	0x08006f1f
 8006ed8:	08006e4d 	.word	0x08006e4d
 8006edc:	08006e4d 	.word	0x08006e4d
 8006ee0:	08006fa3 	.word	0x08006fa3
 8006ee4:	08006e4d 	.word	0x08006e4d
 8006ee8:	08006f7d 	.word	0x08006f7d
 8006eec:	08006e4d 	.word	0x08006e4d
 8006ef0:	08006e4d 	.word	0x08006e4d
 8006ef4:	08006f27 	.word	0x08006f27
 8006ef8:	3b45      	subs	r3, #69	@ 0x45
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d8a6      	bhi.n	8006e4c <__ssvfiscanf_r+0xec>
 8006efe:	2305      	movs	r3, #5
 8006f00:	e021      	b.n	8006f46 <__ssvfiscanf_r+0x1e6>
 8006f02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006f04:	4621      	mov	r1, r4
 8006f06:	4630      	mov	r0, r6
 8006f08:	4798      	blx	r3
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	f43f af66 	beq.w	8006ddc <__ssvfiscanf_r+0x7c>
 8006f10:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f040 808b 	bne.w	800702e <__ssvfiscanf_r+0x2ce>
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f1c:	e08b      	b.n	8007036 <__ssvfiscanf_r+0x2d6>
 8006f1e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006f20:	f042 0220 	orr.w	r2, r2, #32
 8006f24:	9241      	str	r2, [sp, #260]	@ 0x104
 8006f26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f2c:	9241      	str	r2, [sp, #260]	@ 0x104
 8006f2e:	2210      	movs	r2, #16
 8006f30:	2b6e      	cmp	r3, #110	@ 0x6e
 8006f32:	9242      	str	r2, [sp, #264]	@ 0x108
 8006f34:	d902      	bls.n	8006f3c <__ssvfiscanf_r+0x1dc>
 8006f36:	e005      	b.n	8006f44 <__ssvfiscanf_r+0x1e4>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9342      	str	r3, [sp, #264]	@ 0x108
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e002      	b.n	8006f46 <__ssvfiscanf_r+0x1e6>
 8006f40:	2308      	movs	r3, #8
 8006f42:	9342      	str	r3, [sp, #264]	@ 0x108
 8006f44:	2304      	movs	r3, #4
 8006f46:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006f48:	6863      	ldr	r3, [r4, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dd39      	ble.n	8006fc2 <__ssvfiscanf_r+0x262>
 8006f4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006f50:	0659      	lsls	r1, r3, #25
 8006f52:	d404      	bmi.n	8006f5e <__ssvfiscanf_r+0x1fe>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	5cba      	ldrb	r2, [r7, r2]
 8006f5a:	0712      	lsls	r2, r2, #28
 8006f5c:	d438      	bmi.n	8006fd0 <__ssvfiscanf_r+0x270>
 8006f5e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	dc47      	bgt.n	8006ff4 <__ssvfiscanf_r+0x294>
 8006f64:	466b      	mov	r3, sp
 8006f66:	4622      	mov	r2, r4
 8006f68:	a941      	add	r1, sp, #260	@ 0x104
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f000 f90e 	bl	800718c <_scanf_chars>
 8006f70:	2801      	cmp	r0, #1
 8006f72:	d064      	beq.n	800703e <__ssvfiscanf_r+0x2de>
 8006f74:	2802      	cmp	r0, #2
 8006f76:	f47f af18 	bne.w	8006daa <__ssvfiscanf_r+0x4a>
 8006f7a:	e7c9      	b.n	8006f10 <__ssvfiscanf_r+0x1b0>
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	e7d7      	b.n	8006f30 <__ssvfiscanf_r+0x1d0>
 8006f80:	4629      	mov	r1, r5
 8006f82:	4640      	mov	r0, r8
 8006f84:	f000 fa50 	bl	8007428 <__sccl>
 8006f88:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006f90:	4605      	mov	r5, r0
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7d7      	b.n	8006f46 <__ssvfiscanf_r+0x1e6>
 8006f96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f9c:	9341      	str	r3, [sp, #260]	@ 0x104
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e7d1      	b.n	8006f46 <__ssvfiscanf_r+0x1e6>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e7cf      	b.n	8006f46 <__ssvfiscanf_r+0x1e6>
 8006fa6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006fa8:	06c3      	lsls	r3, r0, #27
 8006faa:	f53f aefe 	bmi.w	8006daa <__ssvfiscanf_r+0x4a>
 8006fae:	9b00      	ldr	r3, [sp, #0]
 8006fb0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006fb2:	1d19      	adds	r1, r3, #4
 8006fb4:	9100      	str	r1, [sp, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	07c0      	lsls	r0, r0, #31
 8006fba:	bf4c      	ite	mi
 8006fbc:	801a      	strhmi	r2, [r3, #0]
 8006fbe:	601a      	strpl	r2, [r3, #0]
 8006fc0:	e6f3      	b.n	8006daa <__ssvfiscanf_r+0x4a>
 8006fc2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	4798      	blx	r3
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d0bf      	beq.n	8006f4e <__ssvfiscanf_r+0x1ee>
 8006fce:	e79f      	b.n	8006f10 <__ssvfiscanf_r+0x1b0>
 8006fd0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006fd2:	3201      	adds	r2, #1
 8006fd4:	9245      	str	r2, [sp, #276]	@ 0x114
 8006fd6:	6862      	ldr	r2, [r4, #4]
 8006fd8:	3a01      	subs	r2, #1
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	6062      	str	r2, [r4, #4]
 8006fde:	dd02      	ble.n	8006fe6 <__ssvfiscanf_r+0x286>
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	e7b6      	b.n	8006f54 <__ssvfiscanf_r+0x1f4>
 8006fe6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4630      	mov	r0, r6
 8006fec:	4798      	blx	r3
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d0b0      	beq.n	8006f54 <__ssvfiscanf_r+0x1f4>
 8006ff2:	e78d      	b.n	8006f10 <__ssvfiscanf_r+0x1b0>
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	dc0f      	bgt.n	8007018 <__ssvfiscanf_r+0x2b8>
 8006ff8:	466b      	mov	r3, sp
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	a941      	add	r1, sp, #260	@ 0x104
 8006ffe:	4630      	mov	r0, r6
 8007000:	f000 f91e 	bl	8007240 <_scanf_i>
 8007004:	e7b4      	b.n	8006f70 <__ssvfiscanf_r+0x210>
 8007006:	bf00      	nop
 8007008:	08006cb1 	.word	0x08006cb1
 800700c:	08006d27 	.word	0x08006d27
 8007010:	08007b01 	.word	0x08007b01
 8007014:	08007c01 	.word	0x08007c01
 8007018:	4b0a      	ldr	r3, [pc, #40]	@ (8007044 <__ssvfiscanf_r+0x2e4>)
 800701a:	2b00      	cmp	r3, #0
 800701c:	f43f aec5 	beq.w	8006daa <__ssvfiscanf_r+0x4a>
 8007020:	466b      	mov	r3, sp
 8007022:	4622      	mov	r2, r4
 8007024:	a941      	add	r1, sp, #260	@ 0x104
 8007026:	4630      	mov	r0, r6
 8007028:	f3af 8000 	nop.w
 800702c:	e7a0      	b.n	8006f70 <__ssvfiscanf_r+0x210>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	065b      	lsls	r3, r3, #25
 8007032:	f53f af71 	bmi.w	8006f18 <__ssvfiscanf_r+0x1b8>
 8007036:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007040:	e7f9      	b.n	8007036 <__ssvfiscanf_r+0x2d6>
 8007042:	bf00      	nop
 8007044:	00000000 	.word	0x00000000

08007048 <sbrk_aligned>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4e0f      	ldr	r6, [pc, #60]	@ (8007088 <sbrk_aligned+0x40>)
 800704c:	460c      	mov	r4, r1
 800704e:	6831      	ldr	r1, [r6, #0]
 8007050:	4605      	mov	r5, r0
 8007052:	b911      	cbnz	r1, 800705a <sbrk_aligned+0x12>
 8007054:	f000 fcca 	bl	80079ec <_sbrk_r>
 8007058:	6030      	str	r0, [r6, #0]
 800705a:	4621      	mov	r1, r4
 800705c:	4628      	mov	r0, r5
 800705e:	f000 fcc5 	bl	80079ec <_sbrk_r>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d103      	bne.n	800706e <sbrk_aligned+0x26>
 8007066:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800706a:	4620      	mov	r0, r4
 800706c:	bd70      	pop	{r4, r5, r6, pc}
 800706e:	1cc4      	adds	r4, r0, #3
 8007070:	f024 0403 	bic.w	r4, r4, #3
 8007074:	42a0      	cmp	r0, r4
 8007076:	d0f8      	beq.n	800706a <sbrk_aligned+0x22>
 8007078:	1a21      	subs	r1, r4, r0
 800707a:	4628      	mov	r0, r5
 800707c:	f000 fcb6 	bl	80079ec <_sbrk_r>
 8007080:	3001      	adds	r0, #1
 8007082:	d1f2      	bne.n	800706a <sbrk_aligned+0x22>
 8007084:	e7ef      	b.n	8007066 <sbrk_aligned+0x1e>
 8007086:	bf00      	nop
 8007088:	20000484 	.word	0x20000484

0800708c <_malloc_r>:
 800708c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007090:	1ccd      	adds	r5, r1, #3
 8007092:	f025 0503 	bic.w	r5, r5, #3
 8007096:	3508      	adds	r5, #8
 8007098:	2d0c      	cmp	r5, #12
 800709a:	bf38      	it	cc
 800709c:	250c      	movcc	r5, #12
 800709e:	2d00      	cmp	r5, #0
 80070a0:	4606      	mov	r6, r0
 80070a2:	db01      	blt.n	80070a8 <_malloc_r+0x1c>
 80070a4:	42a9      	cmp	r1, r5
 80070a6:	d904      	bls.n	80070b2 <_malloc_r+0x26>
 80070a8:	230c      	movs	r3, #12
 80070aa:	6033      	str	r3, [r6, #0]
 80070ac:	2000      	movs	r0, #0
 80070ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007188 <_malloc_r+0xfc>
 80070b6:	f000 fa9d 	bl	80075f4 <__malloc_lock>
 80070ba:	f8d8 3000 	ldr.w	r3, [r8]
 80070be:	461c      	mov	r4, r3
 80070c0:	bb44      	cbnz	r4, 8007114 <_malloc_r+0x88>
 80070c2:	4629      	mov	r1, r5
 80070c4:	4630      	mov	r0, r6
 80070c6:	f7ff ffbf 	bl	8007048 <sbrk_aligned>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	4604      	mov	r4, r0
 80070ce:	d158      	bne.n	8007182 <_malloc_r+0xf6>
 80070d0:	f8d8 4000 	ldr.w	r4, [r8]
 80070d4:	4627      	mov	r7, r4
 80070d6:	2f00      	cmp	r7, #0
 80070d8:	d143      	bne.n	8007162 <_malloc_r+0xd6>
 80070da:	2c00      	cmp	r4, #0
 80070dc:	d04b      	beq.n	8007176 <_malloc_r+0xea>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	4639      	mov	r1, r7
 80070e2:	4630      	mov	r0, r6
 80070e4:	eb04 0903 	add.w	r9, r4, r3
 80070e8:	f000 fc80 	bl	80079ec <_sbrk_r>
 80070ec:	4581      	cmp	r9, r0
 80070ee:	d142      	bne.n	8007176 <_malloc_r+0xea>
 80070f0:	6821      	ldr	r1, [r4, #0]
 80070f2:	1a6d      	subs	r5, r5, r1
 80070f4:	4629      	mov	r1, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff ffa6 	bl	8007048 <sbrk_aligned>
 80070fc:	3001      	adds	r0, #1
 80070fe:	d03a      	beq.n	8007176 <_malloc_r+0xea>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	442b      	add	r3, r5
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	f8d8 3000 	ldr.w	r3, [r8]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	bb62      	cbnz	r2, 8007168 <_malloc_r+0xdc>
 800710e:	f8c8 7000 	str.w	r7, [r8]
 8007112:	e00f      	b.n	8007134 <_malloc_r+0xa8>
 8007114:	6822      	ldr	r2, [r4, #0]
 8007116:	1b52      	subs	r2, r2, r5
 8007118:	d420      	bmi.n	800715c <_malloc_r+0xd0>
 800711a:	2a0b      	cmp	r2, #11
 800711c:	d917      	bls.n	800714e <_malloc_r+0xc2>
 800711e:	1961      	adds	r1, r4, r5
 8007120:	42a3      	cmp	r3, r4
 8007122:	6025      	str	r5, [r4, #0]
 8007124:	bf18      	it	ne
 8007126:	6059      	strne	r1, [r3, #4]
 8007128:	6863      	ldr	r3, [r4, #4]
 800712a:	bf08      	it	eq
 800712c:	f8c8 1000 	streq.w	r1, [r8]
 8007130:	5162      	str	r2, [r4, r5]
 8007132:	604b      	str	r3, [r1, #4]
 8007134:	4630      	mov	r0, r6
 8007136:	f000 fa63 	bl	8007600 <__malloc_unlock>
 800713a:	f104 000b 	add.w	r0, r4, #11
 800713e:	1d23      	adds	r3, r4, #4
 8007140:	f020 0007 	bic.w	r0, r0, #7
 8007144:	1ac2      	subs	r2, r0, r3
 8007146:	bf1c      	itt	ne
 8007148:	1a1b      	subne	r3, r3, r0
 800714a:	50a3      	strne	r3, [r4, r2]
 800714c:	e7af      	b.n	80070ae <_malloc_r+0x22>
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	42a3      	cmp	r3, r4
 8007152:	bf0c      	ite	eq
 8007154:	f8c8 2000 	streq.w	r2, [r8]
 8007158:	605a      	strne	r2, [r3, #4]
 800715a:	e7eb      	b.n	8007134 <_malloc_r+0xa8>
 800715c:	4623      	mov	r3, r4
 800715e:	6864      	ldr	r4, [r4, #4]
 8007160:	e7ae      	b.n	80070c0 <_malloc_r+0x34>
 8007162:	463c      	mov	r4, r7
 8007164:	687f      	ldr	r7, [r7, #4]
 8007166:	e7b6      	b.n	80070d6 <_malloc_r+0x4a>
 8007168:	461a      	mov	r2, r3
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	42a3      	cmp	r3, r4
 800716e:	d1fb      	bne.n	8007168 <_malloc_r+0xdc>
 8007170:	2300      	movs	r3, #0
 8007172:	6053      	str	r3, [r2, #4]
 8007174:	e7de      	b.n	8007134 <_malloc_r+0xa8>
 8007176:	230c      	movs	r3, #12
 8007178:	6033      	str	r3, [r6, #0]
 800717a:	4630      	mov	r0, r6
 800717c:	f000 fa40 	bl	8007600 <__malloc_unlock>
 8007180:	e794      	b.n	80070ac <_malloc_r+0x20>
 8007182:	6005      	str	r5, [r0, #0]
 8007184:	e7d6      	b.n	8007134 <_malloc_r+0xa8>
 8007186:	bf00      	nop
 8007188:	20000488 	.word	0x20000488

0800718c <_scanf_chars>:
 800718c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007190:	4615      	mov	r5, r2
 8007192:	688a      	ldr	r2, [r1, #8]
 8007194:	4680      	mov	r8, r0
 8007196:	460c      	mov	r4, r1
 8007198:	b932      	cbnz	r2, 80071a8 <_scanf_chars+0x1c>
 800719a:	698a      	ldr	r2, [r1, #24]
 800719c:	2a00      	cmp	r2, #0
 800719e:	bf14      	ite	ne
 80071a0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80071a4:	2201      	moveq	r2, #1
 80071a6:	608a      	str	r2, [r1, #8]
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800723c <_scanf_chars+0xb0>
 80071ae:	06d1      	lsls	r1, r2, #27
 80071b0:	bf5f      	itttt	pl
 80071b2:	681a      	ldrpl	r2, [r3, #0]
 80071b4:	1d11      	addpl	r1, r2, #4
 80071b6:	6019      	strpl	r1, [r3, #0]
 80071b8:	6816      	ldrpl	r6, [r2, #0]
 80071ba:	2700      	movs	r7, #0
 80071bc:	69a0      	ldr	r0, [r4, #24]
 80071be:	b188      	cbz	r0, 80071e4 <_scanf_chars+0x58>
 80071c0:	2801      	cmp	r0, #1
 80071c2:	d107      	bne.n	80071d4 <_scanf_chars+0x48>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	6963      	ldr	r3, [r4, #20]
 80071ca:	5c9b      	ldrb	r3, [r3, r2]
 80071cc:	b953      	cbnz	r3, 80071e4 <_scanf_chars+0x58>
 80071ce:	2f00      	cmp	r7, #0
 80071d0:	d031      	beq.n	8007236 <_scanf_chars+0xaa>
 80071d2:	e022      	b.n	800721a <_scanf_chars+0x8e>
 80071d4:	2802      	cmp	r0, #2
 80071d6:	d120      	bne.n	800721a <_scanf_chars+0x8e>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80071e0:	071b      	lsls	r3, r3, #28
 80071e2:	d41a      	bmi.n	800721a <_scanf_chars+0x8e>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	06da      	lsls	r2, r3, #27
 80071e8:	bf5e      	ittt	pl
 80071ea:	682b      	ldrpl	r3, [r5, #0]
 80071ec:	781b      	ldrbpl	r3, [r3, #0]
 80071ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 80071f2:	682a      	ldr	r2, [r5, #0]
 80071f4:	686b      	ldr	r3, [r5, #4]
 80071f6:	3201      	adds	r2, #1
 80071f8:	602a      	str	r2, [r5, #0]
 80071fa:	68a2      	ldr	r2, [r4, #8]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	3a01      	subs	r2, #1
 8007200:	606b      	str	r3, [r5, #4]
 8007202:	3701      	adds	r7, #1
 8007204:	60a2      	str	r2, [r4, #8]
 8007206:	b142      	cbz	r2, 800721a <_scanf_chars+0x8e>
 8007208:	2b00      	cmp	r3, #0
 800720a:	dcd7      	bgt.n	80071bc <_scanf_chars+0x30>
 800720c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007210:	4629      	mov	r1, r5
 8007212:	4640      	mov	r0, r8
 8007214:	4798      	blx	r3
 8007216:	2800      	cmp	r0, #0
 8007218:	d0d0      	beq.n	80071bc <_scanf_chars+0x30>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	f013 0310 	ands.w	r3, r3, #16
 8007220:	d105      	bne.n	800722e <_scanf_chars+0xa2>
 8007222:	68e2      	ldr	r2, [r4, #12]
 8007224:	3201      	adds	r2, #1
 8007226:	60e2      	str	r2, [r4, #12]
 8007228:	69a2      	ldr	r2, [r4, #24]
 800722a:	b102      	cbz	r2, 800722e <_scanf_chars+0xa2>
 800722c:	7033      	strb	r3, [r6, #0]
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	443b      	add	r3, r7
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	2000      	movs	r0, #0
 8007236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723a:	bf00      	nop
 800723c:	08007b01 	.word	0x08007b01

08007240 <_scanf_i>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	4698      	mov	r8, r3
 8007246:	4b74      	ldr	r3, [pc, #464]	@ (8007418 <_scanf_i+0x1d8>)
 8007248:	460c      	mov	r4, r1
 800724a:	4682      	mov	sl, r0
 800724c:	4616      	mov	r6, r2
 800724e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007252:	b087      	sub	sp, #28
 8007254:	ab03      	add	r3, sp, #12
 8007256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800725a:	4b70      	ldr	r3, [pc, #448]	@ (800741c <_scanf_i+0x1dc>)
 800725c:	69a1      	ldr	r1, [r4, #24]
 800725e:	4a70      	ldr	r2, [pc, #448]	@ (8007420 <_scanf_i+0x1e0>)
 8007260:	2903      	cmp	r1, #3
 8007262:	bf08      	it	eq
 8007264:	461a      	moveq	r2, r3
 8007266:	68a3      	ldr	r3, [r4, #8]
 8007268:	9201      	str	r2, [sp, #4]
 800726a:	1e5a      	subs	r2, r3, #1
 800726c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007270:	bf88      	it	hi
 8007272:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007276:	4627      	mov	r7, r4
 8007278:	bf82      	ittt	hi
 800727a:	eb03 0905 	addhi.w	r9, r3, r5
 800727e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007282:	60a3      	strhi	r3, [r4, #8]
 8007284:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007288:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800728c:	bf98      	it	ls
 800728e:	f04f 0900 	movls.w	r9, #0
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	463d      	mov	r5, r7
 8007296:	f04f 0b00 	mov.w	fp, #0
 800729a:	6831      	ldr	r1, [r6, #0]
 800729c:	ab03      	add	r3, sp, #12
 800729e:	7809      	ldrb	r1, [r1, #0]
 80072a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f7f8 ffc3 	bl	8000230 <memchr>
 80072aa:	b328      	cbz	r0, 80072f8 <_scanf_i+0xb8>
 80072ac:	f1bb 0f01 	cmp.w	fp, #1
 80072b0:	d159      	bne.n	8007366 <_scanf_i+0x126>
 80072b2:	6862      	ldr	r2, [r4, #4]
 80072b4:	b92a      	cbnz	r2, 80072c2 <_scanf_i+0x82>
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	2108      	movs	r1, #8
 80072ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072be:	6061      	str	r1, [r4, #4]
 80072c0:	6022      	str	r2, [r4, #0]
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80072c8:	6022      	str	r2, [r4, #0]
 80072ca:	68a2      	ldr	r2, [r4, #8]
 80072cc:	1e51      	subs	r1, r2, #1
 80072ce:	60a1      	str	r1, [r4, #8]
 80072d0:	b192      	cbz	r2, 80072f8 <_scanf_i+0xb8>
 80072d2:	6832      	ldr	r2, [r6, #0]
 80072d4:	1c51      	adds	r1, r2, #1
 80072d6:	6031      	str	r1, [r6, #0]
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	f805 2b01 	strb.w	r2, [r5], #1
 80072de:	6872      	ldr	r2, [r6, #4]
 80072e0:	3a01      	subs	r2, #1
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	6072      	str	r2, [r6, #4]
 80072e6:	dc07      	bgt.n	80072f8 <_scanf_i+0xb8>
 80072e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80072ec:	4631      	mov	r1, r6
 80072ee:	4650      	mov	r0, sl
 80072f0:	4790      	blx	r2
 80072f2:	2800      	cmp	r0, #0
 80072f4:	f040 8085 	bne.w	8007402 <_scanf_i+0x1c2>
 80072f8:	f10b 0b01 	add.w	fp, fp, #1
 80072fc:	f1bb 0f03 	cmp.w	fp, #3
 8007300:	d1cb      	bne.n	800729a <_scanf_i+0x5a>
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	b90b      	cbnz	r3, 800730a <_scanf_i+0xca>
 8007306:	230a      	movs	r3, #10
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	4945      	ldr	r1, [pc, #276]	@ (8007424 <_scanf_i+0x1e4>)
 800730e:	6960      	ldr	r0, [r4, #20]
 8007310:	1ac9      	subs	r1, r1, r3
 8007312:	f000 f889 	bl	8007428 <__sccl>
 8007316:	f04f 0b00 	mov.w	fp, #0
 800731a:	68a3      	ldr	r3, [r4, #8]
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d03d      	beq.n	800739e <_scanf_i+0x15e>
 8007322:	6831      	ldr	r1, [r6, #0]
 8007324:	6960      	ldr	r0, [r4, #20]
 8007326:	f891 c000 	ldrb.w	ip, [r1]
 800732a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800732e:	2800      	cmp	r0, #0
 8007330:	d035      	beq.n	800739e <_scanf_i+0x15e>
 8007332:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007336:	d124      	bne.n	8007382 <_scanf_i+0x142>
 8007338:	0510      	lsls	r0, r2, #20
 800733a:	d522      	bpl.n	8007382 <_scanf_i+0x142>
 800733c:	f10b 0b01 	add.w	fp, fp, #1
 8007340:	f1b9 0f00 	cmp.w	r9, #0
 8007344:	d003      	beq.n	800734e <_scanf_i+0x10e>
 8007346:	3301      	adds	r3, #1
 8007348:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800734c:	60a3      	str	r3, [r4, #8]
 800734e:	6873      	ldr	r3, [r6, #4]
 8007350:	3b01      	subs	r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	6073      	str	r3, [r6, #4]
 8007356:	dd1b      	ble.n	8007390 <_scanf_i+0x150>
 8007358:	6833      	ldr	r3, [r6, #0]
 800735a:	3301      	adds	r3, #1
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	68a3      	ldr	r3, [r4, #8]
 8007360:	3b01      	subs	r3, #1
 8007362:	60a3      	str	r3, [r4, #8]
 8007364:	e7d9      	b.n	800731a <_scanf_i+0xda>
 8007366:	f1bb 0f02 	cmp.w	fp, #2
 800736a:	d1ae      	bne.n	80072ca <_scanf_i+0x8a>
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007372:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007376:	d1bf      	bne.n	80072f8 <_scanf_i+0xb8>
 8007378:	2110      	movs	r1, #16
 800737a:	6061      	str	r1, [r4, #4]
 800737c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007380:	e7a2      	b.n	80072c8 <_scanf_i+0x88>
 8007382:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007386:	6022      	str	r2, [r4, #0]
 8007388:	780b      	ldrb	r3, [r1, #0]
 800738a:	f805 3b01 	strb.w	r3, [r5], #1
 800738e:	e7de      	b.n	800734e <_scanf_i+0x10e>
 8007390:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007394:	4631      	mov	r1, r6
 8007396:	4650      	mov	r0, sl
 8007398:	4798      	blx	r3
 800739a:	2800      	cmp	r0, #0
 800739c:	d0df      	beq.n	800735e <_scanf_i+0x11e>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	05d9      	lsls	r1, r3, #23
 80073a2:	d50d      	bpl.n	80073c0 <_scanf_i+0x180>
 80073a4:	42bd      	cmp	r5, r7
 80073a6:	d909      	bls.n	80073bc <_scanf_i+0x17c>
 80073a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80073ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073b0:	4632      	mov	r2, r6
 80073b2:	4650      	mov	r0, sl
 80073b4:	4798      	blx	r3
 80073b6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80073ba:	464d      	mov	r5, r9
 80073bc:	42bd      	cmp	r5, r7
 80073be:	d028      	beq.n	8007412 <_scanf_i+0x1d2>
 80073c0:	6822      	ldr	r2, [r4, #0]
 80073c2:	f012 0210 	ands.w	r2, r2, #16
 80073c6:	d113      	bne.n	80073f0 <_scanf_i+0x1b0>
 80073c8:	702a      	strb	r2, [r5, #0]
 80073ca:	6863      	ldr	r3, [r4, #4]
 80073cc:	9e01      	ldr	r6, [sp, #4]
 80073ce:	4639      	mov	r1, r7
 80073d0:	4650      	mov	r0, sl
 80073d2:	47b0      	blx	r6
 80073d4:	f8d8 3000 	ldr.w	r3, [r8]
 80073d8:	6821      	ldr	r1, [r4, #0]
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	f8c8 2000 	str.w	r2, [r8]
 80073e0:	f011 0f20 	tst.w	r1, #32
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	d00f      	beq.n	8007408 <_scanf_i+0x1c8>
 80073e8:	6018      	str	r0, [r3, #0]
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60e3      	str	r3, [r4, #12]
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	1bed      	subs	r5, r5, r7
 80073f4:	445d      	add	r5, fp
 80073f6:	442b      	add	r3, r5
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	2000      	movs	r0, #0
 80073fc:	b007      	add	sp, #28
 80073fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007402:	f04f 0b00 	mov.w	fp, #0
 8007406:	e7ca      	b.n	800739e <_scanf_i+0x15e>
 8007408:	07ca      	lsls	r2, r1, #31
 800740a:	bf4c      	ite	mi
 800740c:	8018      	strhmi	r0, [r3, #0]
 800740e:	6018      	strpl	r0, [r3, #0]
 8007410:	e7eb      	b.n	80073ea <_scanf_i+0x1aa>
 8007412:	2001      	movs	r0, #1
 8007414:	e7f2      	b.n	80073fc <_scanf_i+0x1bc>
 8007416:	bf00      	nop
 8007418:	08007ab4 	.word	0x08007ab4
 800741c:	08006a15 	.word	0x08006a15
 8007420:	080077b9 	.word	0x080077b9
 8007424:	08007c15 	.word	0x08007c15

08007428 <__sccl>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	780b      	ldrb	r3, [r1, #0]
 800742c:	4604      	mov	r4, r0
 800742e:	2b5e      	cmp	r3, #94	@ 0x5e
 8007430:	bf0b      	itete	eq
 8007432:	784b      	ldrbeq	r3, [r1, #1]
 8007434:	1c4a      	addne	r2, r1, #1
 8007436:	1c8a      	addeq	r2, r1, #2
 8007438:	2100      	movne	r1, #0
 800743a:	bf08      	it	eq
 800743c:	2101      	moveq	r1, #1
 800743e:	3801      	subs	r0, #1
 8007440:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007444:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007448:	42a8      	cmp	r0, r5
 800744a:	d1fb      	bne.n	8007444 <__sccl+0x1c>
 800744c:	b90b      	cbnz	r3, 8007452 <__sccl+0x2a>
 800744e:	1e50      	subs	r0, r2, #1
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	f081 0101 	eor.w	r1, r1, #1
 8007456:	54e1      	strb	r1, [r4, r3]
 8007458:	4610      	mov	r0, r2
 800745a:	4602      	mov	r2, r0
 800745c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007460:	2d2d      	cmp	r5, #45	@ 0x2d
 8007462:	d005      	beq.n	8007470 <__sccl+0x48>
 8007464:	2d5d      	cmp	r5, #93	@ 0x5d
 8007466:	d016      	beq.n	8007496 <__sccl+0x6e>
 8007468:	2d00      	cmp	r5, #0
 800746a:	d0f1      	beq.n	8007450 <__sccl+0x28>
 800746c:	462b      	mov	r3, r5
 800746e:	e7f2      	b.n	8007456 <__sccl+0x2e>
 8007470:	7846      	ldrb	r6, [r0, #1]
 8007472:	2e5d      	cmp	r6, #93	@ 0x5d
 8007474:	d0fa      	beq.n	800746c <__sccl+0x44>
 8007476:	42b3      	cmp	r3, r6
 8007478:	dcf8      	bgt.n	800746c <__sccl+0x44>
 800747a:	3002      	adds	r0, #2
 800747c:	461a      	mov	r2, r3
 800747e:	3201      	adds	r2, #1
 8007480:	4296      	cmp	r6, r2
 8007482:	54a1      	strb	r1, [r4, r2]
 8007484:	dcfb      	bgt.n	800747e <__sccl+0x56>
 8007486:	1af2      	subs	r2, r6, r3
 8007488:	3a01      	subs	r2, #1
 800748a:	1c5d      	adds	r5, r3, #1
 800748c:	42b3      	cmp	r3, r6
 800748e:	bfa8      	it	ge
 8007490:	2200      	movge	r2, #0
 8007492:	18ab      	adds	r3, r5, r2
 8007494:	e7e1      	b.n	800745a <__sccl+0x32>
 8007496:	4610      	mov	r0, r2
 8007498:	e7da      	b.n	8007450 <__sccl+0x28>
	...

0800749c <__sflush_r>:
 800749c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	0716      	lsls	r6, r2, #28
 80074a6:	4605      	mov	r5, r0
 80074a8:	460c      	mov	r4, r1
 80074aa:	d454      	bmi.n	8007556 <__sflush_r+0xba>
 80074ac:	684b      	ldr	r3, [r1, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dc02      	bgt.n	80074b8 <__sflush_r+0x1c>
 80074b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd48      	ble.n	800754a <__sflush_r+0xae>
 80074b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d045      	beq.n	800754a <__sflush_r+0xae>
 80074be:	2300      	movs	r3, #0
 80074c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074c4:	682f      	ldr	r7, [r5, #0]
 80074c6:	6a21      	ldr	r1, [r4, #32]
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	d030      	beq.n	800752e <__sflush_r+0x92>
 80074cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	0759      	lsls	r1, r3, #29
 80074d2:	d505      	bpl.n	80074e0 <__sflush_r+0x44>
 80074d4:	6863      	ldr	r3, [r4, #4]
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074da:	b10b      	cbz	r3, 80074e0 <__sflush_r+0x44>
 80074dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	2300      	movs	r3, #0
 80074e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074e4:	6a21      	ldr	r1, [r4, #32]
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b0      	blx	r6
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	d106      	bne.n	80074fe <__sflush_r+0x62>
 80074f0:	6829      	ldr	r1, [r5, #0]
 80074f2:	291d      	cmp	r1, #29
 80074f4:	d82b      	bhi.n	800754e <__sflush_r+0xb2>
 80074f6:	4a2a      	ldr	r2, [pc, #168]	@ (80075a0 <__sflush_r+0x104>)
 80074f8:	410a      	asrs	r2, r1
 80074fa:	07d6      	lsls	r6, r2, #31
 80074fc:	d427      	bmi.n	800754e <__sflush_r+0xb2>
 80074fe:	2200      	movs	r2, #0
 8007500:	6062      	str	r2, [r4, #4]
 8007502:	04d9      	lsls	r1, r3, #19
 8007504:	6922      	ldr	r2, [r4, #16]
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	d504      	bpl.n	8007514 <__sflush_r+0x78>
 800750a:	1c42      	adds	r2, r0, #1
 800750c:	d101      	bne.n	8007512 <__sflush_r+0x76>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	b903      	cbnz	r3, 8007514 <__sflush_r+0x78>
 8007512:	6560      	str	r0, [r4, #84]	@ 0x54
 8007514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007516:	602f      	str	r7, [r5, #0]
 8007518:	b1b9      	cbz	r1, 800754a <__sflush_r+0xae>
 800751a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800751e:	4299      	cmp	r1, r3
 8007520:	d002      	beq.n	8007528 <__sflush_r+0x8c>
 8007522:	4628      	mov	r0, r5
 8007524:	f7ff fb7a 	bl	8006c1c <_free_r>
 8007528:	2300      	movs	r3, #0
 800752a:	6363      	str	r3, [r4, #52]	@ 0x34
 800752c:	e00d      	b.n	800754a <__sflush_r+0xae>
 800752e:	2301      	movs	r3, #1
 8007530:	4628      	mov	r0, r5
 8007532:	47b0      	blx	r6
 8007534:	4602      	mov	r2, r0
 8007536:	1c50      	adds	r0, r2, #1
 8007538:	d1c9      	bne.n	80074ce <__sflush_r+0x32>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0c6      	beq.n	80074ce <__sflush_r+0x32>
 8007540:	2b1d      	cmp	r3, #29
 8007542:	d001      	beq.n	8007548 <__sflush_r+0xac>
 8007544:	2b16      	cmp	r3, #22
 8007546:	d11e      	bne.n	8007586 <__sflush_r+0xea>
 8007548:	602f      	str	r7, [r5, #0]
 800754a:	2000      	movs	r0, #0
 800754c:	e022      	b.n	8007594 <__sflush_r+0xf8>
 800754e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007552:	b21b      	sxth	r3, r3
 8007554:	e01b      	b.n	800758e <__sflush_r+0xf2>
 8007556:	690f      	ldr	r7, [r1, #16]
 8007558:	2f00      	cmp	r7, #0
 800755a:	d0f6      	beq.n	800754a <__sflush_r+0xae>
 800755c:	0793      	lsls	r3, r2, #30
 800755e:	680e      	ldr	r6, [r1, #0]
 8007560:	bf08      	it	eq
 8007562:	694b      	ldreq	r3, [r1, #20]
 8007564:	600f      	str	r7, [r1, #0]
 8007566:	bf18      	it	ne
 8007568:	2300      	movne	r3, #0
 800756a:	eba6 0807 	sub.w	r8, r6, r7
 800756e:	608b      	str	r3, [r1, #8]
 8007570:	f1b8 0f00 	cmp.w	r8, #0
 8007574:	dde9      	ble.n	800754a <__sflush_r+0xae>
 8007576:	6a21      	ldr	r1, [r4, #32]
 8007578:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800757a:	4643      	mov	r3, r8
 800757c:	463a      	mov	r2, r7
 800757e:	4628      	mov	r0, r5
 8007580:	47b0      	blx	r6
 8007582:	2800      	cmp	r0, #0
 8007584:	dc08      	bgt.n	8007598 <__sflush_r+0xfc>
 8007586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007598:	4407      	add	r7, r0
 800759a:	eba8 0800 	sub.w	r8, r8, r0
 800759e:	e7e7      	b.n	8007570 <__sflush_r+0xd4>
 80075a0:	dfbffffe 	.word	0xdfbffffe

080075a4 <_fflush_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	4605      	mov	r5, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	b913      	cbnz	r3, 80075b4 <_fflush_r+0x10>
 80075ae:	2500      	movs	r5, #0
 80075b0:	4628      	mov	r0, r5
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	b118      	cbz	r0, 80075be <_fflush_r+0x1a>
 80075b6:	6a03      	ldr	r3, [r0, #32]
 80075b8:	b90b      	cbnz	r3, 80075be <_fflush_r+0x1a>
 80075ba:	f7ff f999 	bl	80068f0 <__sinit>
 80075be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f3      	beq.n	80075ae <_fflush_r+0xa>
 80075c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075c8:	07d0      	lsls	r0, r2, #31
 80075ca:	d404      	bmi.n	80075d6 <_fflush_r+0x32>
 80075cc:	0599      	lsls	r1, r3, #22
 80075ce:	d402      	bmi.n	80075d6 <_fflush_r+0x32>
 80075d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075d2:	f7ff fb20 	bl	8006c16 <__retarget_lock_acquire_recursive>
 80075d6:	4628      	mov	r0, r5
 80075d8:	4621      	mov	r1, r4
 80075da:	f7ff ff5f 	bl	800749c <__sflush_r>
 80075de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075e0:	07da      	lsls	r2, r3, #31
 80075e2:	4605      	mov	r5, r0
 80075e4:	d4e4      	bmi.n	80075b0 <_fflush_r+0xc>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	059b      	lsls	r3, r3, #22
 80075ea:	d4e1      	bmi.n	80075b0 <_fflush_r+0xc>
 80075ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ee:	f7ff fb13 	bl	8006c18 <__retarget_lock_release_recursive>
 80075f2:	e7dd      	b.n	80075b0 <_fflush_r+0xc>

080075f4 <__malloc_lock>:
 80075f4:	4801      	ldr	r0, [pc, #4]	@ (80075fc <__malloc_lock+0x8>)
 80075f6:	f7ff bb0e 	b.w	8006c16 <__retarget_lock_acquire_recursive>
 80075fa:	bf00      	nop
 80075fc:	20000480 	.word	0x20000480

08007600 <__malloc_unlock>:
 8007600:	4801      	ldr	r0, [pc, #4]	@ (8007608 <__malloc_unlock+0x8>)
 8007602:	f7ff bb09 	b.w	8006c18 <__retarget_lock_release_recursive>
 8007606:	bf00      	nop
 8007608:	20000480 	.word	0x20000480

0800760c <__submore>:
 800760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	460c      	mov	r4, r1
 8007612:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007618:	4299      	cmp	r1, r3
 800761a:	d11d      	bne.n	8007658 <__submore+0x4c>
 800761c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007620:	f7ff fd34 	bl	800708c <_malloc_r>
 8007624:	b918      	cbnz	r0, 800762e <__submore+0x22>
 8007626:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800762a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007632:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007634:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007638:	6360      	str	r0, [r4, #52]	@ 0x34
 800763a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800763e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007642:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007646:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800764a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800764e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007652:	6020      	str	r0, [r4, #0]
 8007654:	2000      	movs	r0, #0
 8007656:	e7e8      	b.n	800762a <__submore+0x1e>
 8007658:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800765a:	0077      	lsls	r7, r6, #1
 800765c:	463a      	mov	r2, r7
 800765e:	f000 f80f 	bl	8007680 <_realloc_r>
 8007662:	4605      	mov	r5, r0
 8007664:	2800      	cmp	r0, #0
 8007666:	d0de      	beq.n	8007626 <__submore+0x1a>
 8007668:	eb00 0806 	add.w	r8, r0, r6
 800766c:	4601      	mov	r1, r0
 800766e:	4632      	mov	r2, r6
 8007670:	4640      	mov	r0, r8
 8007672:	f000 f9cb 	bl	8007a0c <memcpy>
 8007676:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800767a:	f8c4 8000 	str.w	r8, [r4]
 800767e:	e7e9      	b.n	8007654 <__submore+0x48>

08007680 <_realloc_r>:
 8007680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007684:	4680      	mov	r8, r0
 8007686:	4615      	mov	r5, r2
 8007688:	460c      	mov	r4, r1
 800768a:	b921      	cbnz	r1, 8007696 <_realloc_r+0x16>
 800768c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	4611      	mov	r1, r2
 8007692:	f7ff bcfb 	b.w	800708c <_malloc_r>
 8007696:	b92a      	cbnz	r2, 80076a4 <_realloc_r+0x24>
 8007698:	f7ff fac0 	bl	8006c1c <_free_r>
 800769c:	2400      	movs	r4, #0
 800769e:	4620      	mov	r0, r4
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	f000 f9c0 	bl	8007a28 <_malloc_usable_size_r>
 80076a8:	4285      	cmp	r5, r0
 80076aa:	4606      	mov	r6, r0
 80076ac:	d802      	bhi.n	80076b4 <_realloc_r+0x34>
 80076ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076b2:	d8f4      	bhi.n	800769e <_realloc_r+0x1e>
 80076b4:	4629      	mov	r1, r5
 80076b6:	4640      	mov	r0, r8
 80076b8:	f7ff fce8 	bl	800708c <_malloc_r>
 80076bc:	4607      	mov	r7, r0
 80076be:	2800      	cmp	r0, #0
 80076c0:	d0ec      	beq.n	800769c <_realloc_r+0x1c>
 80076c2:	42b5      	cmp	r5, r6
 80076c4:	462a      	mov	r2, r5
 80076c6:	4621      	mov	r1, r4
 80076c8:	bf28      	it	cs
 80076ca:	4632      	movcs	r2, r6
 80076cc:	f000 f99e 	bl	8007a0c <memcpy>
 80076d0:	4621      	mov	r1, r4
 80076d2:	4640      	mov	r0, r8
 80076d4:	f7ff faa2 	bl	8006c1c <_free_r>
 80076d8:	463c      	mov	r4, r7
 80076da:	e7e0      	b.n	800769e <_realloc_r+0x1e>

080076dc <_strtoul_l.constprop.0>:
 80076dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076e0:	4e34      	ldr	r6, [pc, #208]	@ (80077b4 <_strtoul_l.constprop.0+0xd8>)
 80076e2:	4686      	mov	lr, r0
 80076e4:	460d      	mov	r5, r1
 80076e6:	4628      	mov	r0, r5
 80076e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076ec:	5d37      	ldrb	r7, [r6, r4]
 80076ee:	f017 0708 	ands.w	r7, r7, #8
 80076f2:	d1f8      	bne.n	80076e6 <_strtoul_l.constprop.0+0xa>
 80076f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80076f6:	d12f      	bne.n	8007758 <_strtoul_l.constprop.0+0x7c>
 80076f8:	782c      	ldrb	r4, [r5, #0]
 80076fa:	2701      	movs	r7, #1
 80076fc:	1c85      	adds	r5, r0, #2
 80076fe:	f033 0010 	bics.w	r0, r3, #16
 8007702:	d109      	bne.n	8007718 <_strtoul_l.constprop.0+0x3c>
 8007704:	2c30      	cmp	r4, #48	@ 0x30
 8007706:	d12c      	bne.n	8007762 <_strtoul_l.constprop.0+0x86>
 8007708:	7828      	ldrb	r0, [r5, #0]
 800770a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800770e:	2858      	cmp	r0, #88	@ 0x58
 8007710:	d127      	bne.n	8007762 <_strtoul_l.constprop.0+0x86>
 8007712:	786c      	ldrb	r4, [r5, #1]
 8007714:	2310      	movs	r3, #16
 8007716:	3502      	adds	r5, #2
 8007718:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800771c:	2600      	movs	r6, #0
 800771e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007722:	fb03 f908 	mul.w	r9, r3, r8
 8007726:	ea6f 0909 	mvn.w	r9, r9
 800772a:	4630      	mov	r0, r6
 800772c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007730:	f1bc 0f09 	cmp.w	ip, #9
 8007734:	d81c      	bhi.n	8007770 <_strtoul_l.constprop.0+0x94>
 8007736:	4664      	mov	r4, ip
 8007738:	42a3      	cmp	r3, r4
 800773a:	dd2a      	ble.n	8007792 <_strtoul_l.constprop.0+0xb6>
 800773c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8007740:	d007      	beq.n	8007752 <_strtoul_l.constprop.0+0x76>
 8007742:	4580      	cmp	r8, r0
 8007744:	d322      	bcc.n	800778c <_strtoul_l.constprop.0+0xb0>
 8007746:	d101      	bne.n	800774c <_strtoul_l.constprop.0+0x70>
 8007748:	45a1      	cmp	r9, r4
 800774a:	db1f      	blt.n	800778c <_strtoul_l.constprop.0+0xb0>
 800774c:	fb00 4003 	mla	r0, r0, r3, r4
 8007750:	2601      	movs	r6, #1
 8007752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007756:	e7e9      	b.n	800772c <_strtoul_l.constprop.0+0x50>
 8007758:	2c2b      	cmp	r4, #43	@ 0x2b
 800775a:	bf04      	itt	eq
 800775c:	782c      	ldrbeq	r4, [r5, #0]
 800775e:	1c85      	addeq	r5, r0, #2
 8007760:	e7cd      	b.n	80076fe <_strtoul_l.constprop.0+0x22>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1d8      	bne.n	8007718 <_strtoul_l.constprop.0+0x3c>
 8007766:	2c30      	cmp	r4, #48	@ 0x30
 8007768:	bf0c      	ite	eq
 800776a:	2308      	moveq	r3, #8
 800776c:	230a      	movne	r3, #10
 800776e:	e7d3      	b.n	8007718 <_strtoul_l.constprop.0+0x3c>
 8007770:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007774:	f1bc 0f19 	cmp.w	ip, #25
 8007778:	d801      	bhi.n	800777e <_strtoul_l.constprop.0+0xa2>
 800777a:	3c37      	subs	r4, #55	@ 0x37
 800777c:	e7dc      	b.n	8007738 <_strtoul_l.constprop.0+0x5c>
 800777e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007782:	f1bc 0f19 	cmp.w	ip, #25
 8007786:	d804      	bhi.n	8007792 <_strtoul_l.constprop.0+0xb6>
 8007788:	3c57      	subs	r4, #87	@ 0x57
 800778a:	e7d5      	b.n	8007738 <_strtoul_l.constprop.0+0x5c>
 800778c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8007790:	e7df      	b.n	8007752 <_strtoul_l.constprop.0+0x76>
 8007792:	1c73      	adds	r3, r6, #1
 8007794:	d106      	bne.n	80077a4 <_strtoul_l.constprop.0+0xc8>
 8007796:	2322      	movs	r3, #34	@ 0x22
 8007798:	f8ce 3000 	str.w	r3, [lr]
 800779c:	4630      	mov	r0, r6
 800779e:	b932      	cbnz	r2, 80077ae <_strtoul_l.constprop.0+0xd2>
 80077a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077a4:	b107      	cbz	r7, 80077a8 <_strtoul_l.constprop.0+0xcc>
 80077a6:	4240      	negs	r0, r0
 80077a8:	2a00      	cmp	r2, #0
 80077aa:	d0f9      	beq.n	80077a0 <_strtoul_l.constprop.0+0xc4>
 80077ac:	b106      	cbz	r6, 80077b0 <_strtoul_l.constprop.0+0xd4>
 80077ae:	1e69      	subs	r1, r5, #1
 80077b0:	6011      	str	r1, [r2, #0]
 80077b2:	e7f5      	b.n	80077a0 <_strtoul_l.constprop.0+0xc4>
 80077b4:	08007b01 	.word	0x08007b01

080077b8 <_strtoul_r>:
 80077b8:	f7ff bf90 	b.w	80076dc <_strtoul_l.constprop.0>

080077bc <__swbuf_r>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	460e      	mov	r6, r1
 80077c0:	4614      	mov	r4, r2
 80077c2:	4605      	mov	r5, r0
 80077c4:	b118      	cbz	r0, 80077ce <__swbuf_r+0x12>
 80077c6:	6a03      	ldr	r3, [r0, #32]
 80077c8:	b90b      	cbnz	r3, 80077ce <__swbuf_r+0x12>
 80077ca:	f7ff f891 	bl	80068f0 <__sinit>
 80077ce:	69a3      	ldr	r3, [r4, #24]
 80077d0:	60a3      	str	r3, [r4, #8]
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	071a      	lsls	r2, r3, #28
 80077d6:	d501      	bpl.n	80077dc <__swbuf_r+0x20>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	b943      	cbnz	r3, 80077ee <__swbuf_r+0x32>
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 f82a 	bl	8007838 <__swsetup_r>
 80077e4:	b118      	cbz	r0, 80077ee <__swbuf_r+0x32>
 80077e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80077ea:	4638      	mov	r0, r7
 80077ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	1a98      	subs	r0, r3, r2
 80077f4:	6963      	ldr	r3, [r4, #20]
 80077f6:	b2f6      	uxtb	r6, r6
 80077f8:	4283      	cmp	r3, r0
 80077fa:	4637      	mov	r7, r6
 80077fc:	dc05      	bgt.n	800780a <__swbuf_r+0x4e>
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f7ff fecf 	bl	80075a4 <_fflush_r>
 8007806:	2800      	cmp	r0, #0
 8007808:	d1ed      	bne.n	80077e6 <__swbuf_r+0x2a>
 800780a:	68a3      	ldr	r3, [r4, #8]
 800780c:	3b01      	subs	r3, #1
 800780e:	60a3      	str	r3, [r4, #8]
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	6022      	str	r2, [r4, #0]
 8007816:	701e      	strb	r6, [r3, #0]
 8007818:	6962      	ldr	r2, [r4, #20]
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	429a      	cmp	r2, r3
 800781e:	d004      	beq.n	800782a <__swbuf_r+0x6e>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	07db      	lsls	r3, r3, #31
 8007824:	d5e1      	bpl.n	80077ea <__swbuf_r+0x2e>
 8007826:	2e0a      	cmp	r6, #10
 8007828:	d1df      	bne.n	80077ea <__swbuf_r+0x2e>
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	f7ff feb9 	bl	80075a4 <_fflush_r>
 8007832:	2800      	cmp	r0, #0
 8007834:	d0d9      	beq.n	80077ea <__swbuf_r+0x2e>
 8007836:	e7d6      	b.n	80077e6 <__swbuf_r+0x2a>

08007838 <__swsetup_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4b29      	ldr	r3, [pc, #164]	@ (80078e0 <__swsetup_r+0xa8>)
 800783c:	4605      	mov	r5, r0
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	460c      	mov	r4, r1
 8007842:	b118      	cbz	r0, 800784c <__swsetup_r+0x14>
 8007844:	6a03      	ldr	r3, [r0, #32]
 8007846:	b90b      	cbnz	r3, 800784c <__swsetup_r+0x14>
 8007848:	f7ff f852 	bl	80068f0 <__sinit>
 800784c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007850:	0719      	lsls	r1, r3, #28
 8007852:	d422      	bmi.n	800789a <__swsetup_r+0x62>
 8007854:	06da      	lsls	r2, r3, #27
 8007856:	d407      	bmi.n	8007868 <__swsetup_r+0x30>
 8007858:	2209      	movs	r2, #9
 800785a:	602a      	str	r2, [r5, #0]
 800785c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007866:	e033      	b.n	80078d0 <__swsetup_r+0x98>
 8007868:	0758      	lsls	r0, r3, #29
 800786a:	d512      	bpl.n	8007892 <__swsetup_r+0x5a>
 800786c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800786e:	b141      	cbz	r1, 8007882 <__swsetup_r+0x4a>
 8007870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007874:	4299      	cmp	r1, r3
 8007876:	d002      	beq.n	800787e <__swsetup_r+0x46>
 8007878:	4628      	mov	r0, r5
 800787a:	f7ff f9cf 	bl	8006c1c <_free_r>
 800787e:	2300      	movs	r3, #0
 8007880:	6363      	str	r3, [r4, #52]	@ 0x34
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	2300      	movs	r3, #0
 800788c:	6063      	str	r3, [r4, #4]
 800788e:	6923      	ldr	r3, [r4, #16]
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	f043 0308 	orr.w	r3, r3, #8
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	6923      	ldr	r3, [r4, #16]
 800789c:	b94b      	cbnz	r3, 80078b2 <__swsetup_r+0x7a>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a8:	d003      	beq.n	80078b2 <__swsetup_r+0x7a>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 f83f 	bl	8007930 <__smakebuf_r>
 80078b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b6:	f013 0201 	ands.w	r2, r3, #1
 80078ba:	d00a      	beq.n	80078d2 <__swsetup_r+0x9a>
 80078bc:	2200      	movs	r2, #0
 80078be:	60a2      	str	r2, [r4, #8]
 80078c0:	6962      	ldr	r2, [r4, #20]
 80078c2:	4252      	negs	r2, r2
 80078c4:	61a2      	str	r2, [r4, #24]
 80078c6:	6922      	ldr	r2, [r4, #16]
 80078c8:	b942      	cbnz	r2, 80078dc <__swsetup_r+0xa4>
 80078ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ce:	d1c5      	bne.n	800785c <__swsetup_r+0x24>
 80078d0:	bd38      	pop	{r3, r4, r5, pc}
 80078d2:	0799      	lsls	r1, r3, #30
 80078d4:	bf58      	it	pl
 80078d6:	6962      	ldrpl	r2, [r4, #20]
 80078d8:	60a2      	str	r2, [r4, #8]
 80078da:	e7f4      	b.n	80078c6 <__swsetup_r+0x8e>
 80078dc:	2000      	movs	r0, #0
 80078de:	e7f7      	b.n	80078d0 <__swsetup_r+0x98>
 80078e0:	20000020 	.word	0x20000020

080078e4 <__swhatbuf_r>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	460c      	mov	r4, r1
 80078e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ec:	2900      	cmp	r1, #0
 80078ee:	b096      	sub	sp, #88	@ 0x58
 80078f0:	4615      	mov	r5, r2
 80078f2:	461e      	mov	r6, r3
 80078f4:	da0d      	bge.n	8007912 <__swhatbuf_r+0x2e>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078fc:	f04f 0100 	mov.w	r1, #0
 8007900:	bf14      	ite	ne
 8007902:	2340      	movne	r3, #64	@ 0x40
 8007904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007908:	2000      	movs	r0, #0
 800790a:	6031      	str	r1, [r6, #0]
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	b016      	add	sp, #88	@ 0x58
 8007910:	bd70      	pop	{r4, r5, r6, pc}
 8007912:	466a      	mov	r2, sp
 8007914:	f000 f848 	bl	80079a8 <_fstat_r>
 8007918:	2800      	cmp	r0, #0
 800791a:	dbec      	blt.n	80078f6 <__swhatbuf_r+0x12>
 800791c:	9901      	ldr	r1, [sp, #4]
 800791e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007926:	4259      	negs	r1, r3
 8007928:	4159      	adcs	r1, r3
 800792a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800792e:	e7eb      	b.n	8007908 <__swhatbuf_r+0x24>

08007930 <__smakebuf_r>:
 8007930:	898b      	ldrh	r3, [r1, #12]
 8007932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007934:	079d      	lsls	r5, r3, #30
 8007936:	4606      	mov	r6, r0
 8007938:	460c      	mov	r4, r1
 800793a:	d507      	bpl.n	800794c <__smakebuf_r+0x1c>
 800793c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	2301      	movs	r3, #1
 8007946:	6163      	str	r3, [r4, #20]
 8007948:	b003      	add	sp, #12
 800794a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800794c:	ab01      	add	r3, sp, #4
 800794e:	466a      	mov	r2, sp
 8007950:	f7ff ffc8 	bl	80078e4 <__swhatbuf_r>
 8007954:	9f00      	ldr	r7, [sp, #0]
 8007956:	4605      	mov	r5, r0
 8007958:	4639      	mov	r1, r7
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff fb96 	bl	800708c <_malloc_r>
 8007960:	b948      	cbnz	r0, 8007976 <__smakebuf_r+0x46>
 8007962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007966:	059a      	lsls	r2, r3, #22
 8007968:	d4ee      	bmi.n	8007948 <__smakebuf_r+0x18>
 800796a:	f023 0303 	bic.w	r3, r3, #3
 800796e:	f043 0302 	orr.w	r3, r3, #2
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	e7e2      	b.n	800793c <__smakebuf_r+0xc>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	6020      	str	r0, [r4, #0]
 800797a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	9b01      	ldr	r3, [sp, #4]
 8007982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007986:	b15b      	cbz	r3, 80079a0 <__smakebuf_r+0x70>
 8007988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800798c:	4630      	mov	r0, r6
 800798e:	f000 f81d 	bl	80079cc <_isatty_r>
 8007992:	b128      	cbz	r0, 80079a0 <__smakebuf_r+0x70>
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	f023 0303 	bic.w	r3, r3, #3
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	431d      	orrs	r5, r3
 80079a4:	81a5      	strh	r5, [r4, #12]
 80079a6:	e7cf      	b.n	8007948 <__smakebuf_r+0x18>

080079a8 <_fstat_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4d07      	ldr	r5, [pc, #28]	@ (80079c8 <_fstat_r+0x20>)
 80079ac:	2300      	movs	r3, #0
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	4611      	mov	r1, r2
 80079b4:	602b      	str	r3, [r5, #0]
 80079b6:	f7fa fe77 	bl	80026a8 <_fstat>
 80079ba:	1c43      	adds	r3, r0, #1
 80079bc:	d102      	bne.n	80079c4 <_fstat_r+0x1c>
 80079be:	682b      	ldr	r3, [r5, #0]
 80079c0:	b103      	cbz	r3, 80079c4 <_fstat_r+0x1c>
 80079c2:	6023      	str	r3, [r4, #0]
 80079c4:	bd38      	pop	{r3, r4, r5, pc}
 80079c6:	bf00      	nop
 80079c8:	2000047c 	.word	0x2000047c

080079cc <_isatty_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d06      	ldr	r5, [pc, #24]	@ (80079e8 <_isatty_r+0x1c>)
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	602b      	str	r3, [r5, #0]
 80079d8:	f7fa fe76 	bl	80026c8 <_isatty>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_isatty_r+0x1a>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_isatty_r+0x1a>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	2000047c 	.word	0x2000047c

080079ec <_sbrk_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d06      	ldr	r5, [pc, #24]	@ (8007a08 <_sbrk_r+0x1c>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	4604      	mov	r4, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	f7fa fe7e 	bl	80026f8 <_sbrk>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d102      	bne.n	8007a06 <_sbrk_r+0x1a>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b103      	cbz	r3, 8007a06 <_sbrk_r+0x1a>
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	2000047c 	.word	0x2000047c

08007a0c <memcpy>:
 8007a0c:	440a      	add	r2, r1
 8007a0e:	4291      	cmp	r1, r2
 8007a10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007a14:	d100      	bne.n	8007a18 <memcpy+0xc>
 8007a16:	4770      	bx	lr
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a22:	4291      	cmp	r1, r2
 8007a24:	d1f9      	bne.n	8007a1a <memcpy+0xe>
 8007a26:	bd10      	pop	{r4, pc}

08007a28 <_malloc_usable_size_r>:
 8007a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2c:	1f18      	subs	r0, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bfbc      	itt	lt
 8007a32:	580b      	ldrlt	r3, [r1, r0]
 8007a34:	18c0      	addlt	r0, r0, r3
 8007a36:	4770      	bx	lr

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
