
tommy_fork_lift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e6c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800821c  0800821c  0000a0c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800821c  0800821c  0000921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008224  08008224  0000a0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008224  08008224  00009224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008228  08008228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  0800822c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200000c8  080082f4  0000a0c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  080082f4  0000a5e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b7a  00000000  00000000  0000a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333a  00000000  00000000  00021c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00024fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101c  00000000  00000000  00026470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023577  00000000  00000000  0002748c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aea4  00000000  00000000  0004aa03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de860  00000000  00000000  000658a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006144  00000000  00000000  0014414c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000c8 	.word	0x200000c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008034 	.word	0x08008034

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000cc 	.word	0x200000cc
 800021c:	08008034 	.word	0x08008034

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b70:	f000 b96a 	b.w	8000e48 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	460c      	mov	r4, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14e      	bne.n	8000c36 <__udivmoddi4+0xaa>
 8000b98:	4694      	mov	ip, r2
 8000b9a:	458c      	cmp	ip, r1
 8000b9c:	4686      	mov	lr, r0
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	d962      	bls.n	8000c6a <__udivmoddi4+0xde>
 8000ba4:	b14a      	cbz	r2, 8000bba <__udivmoddi4+0x2e>
 8000ba6:	f1c2 0320 	rsb	r3, r2, #32
 8000baa:	4091      	lsls	r1, r2
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb4:	4319      	orrs	r1, r3
 8000bb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bbe:	fa1f f68c 	uxth.w	r6, ip
 8000bc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bca:	fb07 1114 	mls	r1, r7, r4, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb04 f106 	mul.w	r1, r4, r6
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000be2:	f080 8112 	bcs.w	8000e0a <__udivmoddi4+0x27e>
 8000be6:	4299      	cmp	r1, r3
 8000be8:	f240 810f 	bls.w	8000e0a <__udivmoddi4+0x27e>
 8000bec:	3c02      	subs	r4, #2
 8000bee:	4463      	add	r3, ip
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb00 f606 	mul.w	r6, r0, r6
 8000c06:	429e      	cmp	r6, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x94>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c12:	f080 80fc 	bcs.w	8000e0e <__udivmoddi4+0x282>
 8000c16:	429e      	cmp	r6, r3
 8000c18:	f240 80f9 	bls.w	8000e0e <__udivmoddi4+0x282>
 8000c1c:	4463      	add	r3, ip
 8000c1e:	3802      	subs	r0, #2
 8000c20:	1b9b      	subs	r3, r3, r6
 8000c22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c26:	2100      	movs	r1, #0
 8000c28:	b11d      	cbz	r5, 8000c32 <__udivmoddi4+0xa6>
 8000c2a:	40d3      	lsrs	r3, r2
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d905      	bls.n	8000c46 <__udivmoddi4+0xba>
 8000c3a:	b10d      	cbz	r5, 8000c40 <__udivmoddi4+0xb4>
 8000c3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c40:	2100      	movs	r1, #0
 8000c42:	4608      	mov	r0, r1
 8000c44:	e7f5      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000c46:	fab3 f183 	clz	r1, r3
 8000c4a:	2900      	cmp	r1, #0
 8000c4c:	d146      	bne.n	8000cdc <__udivmoddi4+0x150>
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xcc>
 8000c52:	4290      	cmp	r0, r2
 8000c54:	f0c0 80f0 	bcc.w	8000e38 <__udivmoddi4+0x2ac>
 8000c58:	1a86      	subs	r6, r0, r2
 8000c5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	2d00      	cmp	r5, #0
 8000c62:	d0e6      	beq.n	8000c32 <__udivmoddi4+0xa6>
 8000c64:	e9c5 6300 	strd	r6, r3, [r5]
 8000c68:	e7e3      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x204>
 8000c70:	eba1 040c 	sub.w	r4, r1, ip
 8000c74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c78:	fa1f f78c 	uxth.w	r7, ip
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb08 4416 	mls	r4, r8, r6, r4
 8000c8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8e:	fb07 f006 	mul.w	r0, r7, r6
 8000c92:	4298      	cmp	r0, r3
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x11c>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x11a>
 8000ca0:	4298      	cmp	r0, r3
 8000ca2:	f200 80cd 	bhi.w	8000e40 <__udivmoddi4+0x2b4>
 8000ca6:	4626      	mov	r6, r4
 8000ca8:	1a1c      	subs	r4, r3, r0
 8000caa:	fa1f f38e 	uxth.w	r3, lr
 8000cae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb00 f707 	mul.w	r7, r0, r7
 8000cbe:	429f      	cmp	r7, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x148>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x146>
 8000ccc:	429f      	cmp	r7, r3
 8000cce:	f200 80b0 	bhi.w	8000e32 <__udivmoddi4+0x2a6>
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	1bdb      	subs	r3, r3, r7
 8000cd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0x9c>
 8000cdc:	f1c1 0620 	rsb	r6, r1, #32
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cec:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf0:	ea43 030c 	orr.w	r3, r3, ip
 8000cf4:	40f4      	lsrs	r4, r6
 8000cf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cfa:	0c38      	lsrs	r0, r7, #16
 8000cfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d00:	fbb4 fef0 	udiv	lr, r4, r0
 8000d04:	fa1f fc87 	uxth.w	ip, r7
 8000d08:	fb00 441e 	mls	r4, r0, lr, r4
 8000d0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d10:	fb0e f90c 	mul.w	r9, lr, ip
 8000d14:	45a1      	cmp	r9, r4
 8000d16:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1a:	d90a      	bls.n	8000d32 <__udivmoddi4+0x1a6>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d22:	f080 8084 	bcs.w	8000e2e <__udivmoddi4+0x2a2>
 8000d26:	45a1      	cmp	r9, r4
 8000d28:	f240 8081 	bls.w	8000e2e <__udivmoddi4+0x2a2>
 8000d2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d30:	443c      	add	r4, r7
 8000d32:	eba4 0409 	sub.w	r4, r4, r9
 8000d36:	fa1f f983 	uxth.w	r9, r3
 8000d3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x1d2>
 8000d4e:	193c      	adds	r4, r7, r4
 8000d50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d54:	d267      	bcs.n	8000e26 <__udivmoddi4+0x29a>
 8000d56:	45a4      	cmp	ip, r4
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0x29a>
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d62:	fba0 9302 	umull	r9, r3, r0, r2
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	46ce      	mov	lr, r9
 8000d6e:	469c      	mov	ip, r3
 8000d70:	d351      	bcc.n	8000e16 <__udivmoddi4+0x28a>
 8000d72:	d04e      	beq.n	8000e12 <__udivmoddi4+0x286>
 8000d74:	b155      	cbz	r5, 8000d8c <__udivmoddi4+0x200>
 8000d76:	ebb8 030e 	subs.w	r3, r8, lr
 8000d7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d82:	40cb      	lsrs	r3, r1
 8000d84:	431e      	orrs	r6, r3
 8000d86:	40cc      	lsrs	r4, r1
 8000d88:	e9c5 6400 	strd	r6, r4, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e750      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f103 	lsr.w	r1, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000da0:	4094      	lsls	r4, r2
 8000da2:	430c      	orrs	r4, r1
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dac:	fa1f f78c 	uxth.w	r7, ip
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3110 	mls	r1, r8, r0, r3
 8000db8:	0c23      	lsrs	r3, r4, #16
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb00 f107 	mul.w	r1, r0, r7
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x24c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dce:	d22c      	bcs.n	8000e2a <__udivmoddi4+0x29e>
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d92a      	bls.n	8000e2a <__udivmoddi4+0x29e>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de0:	fb08 3311 	mls	r3, r8, r1, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb01 f307 	mul.w	r3, r1, r7
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x276>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000df8:	d213      	bcs.n	8000e22 <__udivmoddi4+0x296>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d911      	bls.n	8000e22 <__udivmoddi4+0x296>
 8000dfe:	3902      	subs	r1, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	1ae4      	subs	r4, r4, r3
 8000e04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e08:	e739      	b.n	8000c7e <__udivmoddi4+0xf2>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	e6f0      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e706      	b.n	8000c20 <__udivmoddi4+0x94>
 8000e12:	45c8      	cmp	r8, r9
 8000e14:	d2ae      	bcs.n	8000d74 <__udivmoddi4+0x1e8>
 8000e16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1e:	3801      	subs	r0, #1
 8000e20:	e7a8      	b.n	8000d74 <__udivmoddi4+0x1e8>
 8000e22:	4631      	mov	r1, r6
 8000e24:	e7ed      	b.n	8000e02 <__udivmoddi4+0x276>
 8000e26:	4603      	mov	r3, r0
 8000e28:	e799      	b.n	8000d5e <__udivmoddi4+0x1d2>
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	e7d4      	b.n	8000dd8 <__udivmoddi4+0x24c>
 8000e2e:	46d6      	mov	lr, sl
 8000e30:	e77f      	b.n	8000d32 <__udivmoddi4+0x1a6>
 8000e32:	4463      	add	r3, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e74d      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e70f      	b.n	8000c60 <__udivmoddi4+0xd4>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	e730      	b.n	8000ca8 <__udivmoddi4+0x11c>
 8000e46:	bf00      	nop

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b098      	sub	sp, #96	@ 0x60
 8000e50:	af08      	add	r7, sp, #32
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <parse_controller_data+0x16>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d104      	bne.n	8000e6c <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 8000e62:	4887      	ldr	r0, [pc, #540]	@ (8001080 <parse_controller_data+0x234>)
 8000e64:	f006 f954 	bl	8007110 <puts>
    return 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e105      	b.n	8001078 <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 8000e6c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000e70:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	9306      	str	r3, [sp, #24]
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	9305      	str	r3, [sp, #20]
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	9304      	str	r3, [sp, #16]
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	9303      	str	r3, [sp, #12]
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4978      	ldr	r1, [pc, #480]	@ (8001084 <parse_controller_data+0x238>)
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f005 ff26 	bl	8006cf4 <siscanf>
 8000ea8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 8000eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eac:	2b09      	cmp	r3, #9
 8000eae:	d004      	beq.n	8000eba <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 8000eb0:	4875      	ldr	r0, [pc, #468]	@ (8001088 <parse_controller_data+0x23c>)
 8000eb2:	f006 f92d 	bl	8007110 <puts>
    return 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e0de      	b.n	8001078 <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 8000eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf14      	ite	ne
 8000ec4:	2301      	movne	r3, #1
 8000ec6:	2300      	moveq	r3, #0
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 8000ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf14      	ite	ne
 8000ed8:	2301      	movne	r3, #1
 8000eda:	2300      	moveq	r3, #0
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 8000ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf14      	ite	ne
 8000eec:	2301      	movne	r3, #1
 8000eee:	2300      	moveq	r3, #0
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 8000ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 8000f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf14      	ite	ne
 8000f28:	2301      	movne	r3, #1
 8000f2a:	2300      	moveq	r3, #0
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 8000f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 8000f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf14      	ite	ne
 8000f50:	2301      	movne	r3, #1
 8000f52:	2300      	moveq	r3, #0
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 8000f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf14      	ite	ne
 8000f64:	2301      	movne	r3, #1
 8000f66:	2300      	moveq	r3, #0
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 8000f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 8000f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bf14      	ite	ne
 8000f8c:	2301      	movne	r3, #1
 8000f8e:	2300      	moveq	r3, #0
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 8000f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 8000faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf14      	ite	ne
 8000fc8:	2301      	movne	r3, #1
 8000fca:	2300      	moveq	r3, #0
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd6:	220a      	movs	r2, #10
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f006 f81a 	bl	8007014 <strtol>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b25a      	sxtb	r2, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 8000fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fec:	220a      	movs	r2, #10
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 f80f 	bl	8007014 <strtol>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b25a      	sxtb	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	220a      	movs	r2, #10
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f006 f804 	bl	8007014 <strtol>
 800100c:	4603      	mov	r3, r0
 800100e:	b25a      	sxtb	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	220a      	movs	r2, #10
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f005 fff9 	bl	8007014 <strtol>
 8001022:	4603      	mov	r3, r0
 8001024:	b25a      	sxtb	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	b29a      	uxth	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	b29a      	uxth	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2da      	uxtb	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2da      	uxtb	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2da      	uxtb	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	761a      	strb	r2, [r3, #24]

  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3740      	adds	r7, #64	@ 0x40
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	0800804c 	.word	0x0800804c
 8001084:	0800806c 	.word	0x0800806c
 8001088:	08008094 	.word	0x08008094
 800108c:	00000000 	.word	0x00000000

08001090 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 80010a2:	f001 fff5 	bl	8003090 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	f240 8095 	bls.w	80011e6 <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d102      	bne.n	80010cc <update_encoder+0x3c>
    num_pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e035      	b.n	8001138 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dd18      	ble.n	8001108 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b10      	cmp	r3, #16
 80010e4:	d10a      	bne.n	80010fc <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6892      	ldr	r2, [r2, #8]
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e01d      	b.n	8001138 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e017      	b.n	8001138 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	2b10      	cmp	r3, #16
 8001116:	d105      	bne.n	8001124 <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e009      	b.n	8001138 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6892      	ldr	r2, [r2, #8]
 8001130:	1a9a      	subs	r2, r3, r2
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	8a9b      	ldrh	r3, [r3, #20]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001152:	ee16 0a90 	vmov	r0, s13
 8001156:	f7ff fa1f 	bl	8000598 <__aeabi_f2d>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	f7ff f8bd 	bl	80002dc <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	a322      	add	r3, pc, #136	@ (adr r3, 80011f4 <update_encoder+0x164>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fa6a 	bl	8000648 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc9e 	bl	8000abc <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	ed93 7a00 	vldr	s14, [r3]
 8001190:	edd7 7a02 	vldr	s15, [r7, #8]
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 800119e:	68b8      	ldr	r0, [r7, #8]
 80011a0:	f7ff f9fa 	bl	8000598 <__aeabi_f2d>
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <update_encoder+0x160>)
 80011aa:	f7ff fa4d 	bl	8000648 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4614      	mov	r4, r2
 80011b4:	461d      	mov	r5, r3
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff f9cc 	bl	8000554 <__aeabi_ui2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff fb6a 	bl	800089c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fc74 	bl	8000abc <__aeabi_d2f>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 80011da:	f001 ff59 	bl	8003090 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	e000      	b.n	80011e8 <update_encoder+0x158>
    return;
 80011e6:	bf00      	nop
}
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bdb0      	pop	{r4, r5, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	408f4000 	.word	0x408f4000
 80011f4:	54442d18 	.word	0x54442d18
 80011f8:	400921fb 	.word	0x400921fb

080011fc <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b095      	sub	sp, #84	@ 0x54
 8001200:	af00      	add	r7, sp, #0
 8001202:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d107      	bne.n	800121a <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 800120a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	e030      	b.n	800127c <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 800121a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8001228:	2300      	movs	r3, #0
 800122a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800122c:	e00d      	b.n	800124a <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 800122e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	461a      	mov	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4413      	add	r3, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff26 	bl	8001090 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8001244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001246:	3301      	adds	r3, #1
 8001248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800124a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800124c:	2b03      	cmp	r3, #3
 800124e:	ddee      	ble.n	800122e <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3318      	adds	r3, #24
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3330      	adds	r3, #48	@ 0x30
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3348      	adds	r3, #72	@ 0x48
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 800126e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001272:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800127c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800127e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001280:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001284:	ee06 0a10 	vmov	s12, r0
 8001288:	ee06 1a90 	vmov	s13, r1
 800128c:	ee07 2a10 	vmov	s14, r2
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb0 0a46 	vmov.f32	s0, s12
 8001298:	eef0 0a66 	vmov.f32	s1, s13
 800129c:	eeb0 1a47 	vmov.f32	s2, s14
 80012a0:	eef0 1a67 	vmov.f32	s3, s15
 80012a4:	3754      	adds	r7, #84	@ 0x54
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
	...

080012ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	@ 0x30
 80012b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	4b50      	ldr	r3, [pc, #320]	@ (8001404 <MX_GPIO_Init+0x158>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001404 <MX_GPIO_Init+0x158>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <MX_GPIO_Init+0x158>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b4a      	ldr	r3, [pc, #296]	@ (8001404 <MX_GPIO_Init+0x158>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a49      	ldr	r2, [pc, #292]	@ (8001404 <MX_GPIO_Init+0x158>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b47      	ldr	r3, [pc, #284]	@ (8001404 <MX_GPIO_Init+0x158>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	4b44      	ldr	r3, [pc, #272]	@ (8001404 <MX_GPIO_Init+0x158>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a43      	ldr	r2, [pc, #268]	@ (8001404 <MX_GPIO_Init+0x158>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <MX_GPIO_Init+0x158>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <MX_GPIO_Init+0x158>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a3d      	ldr	r2, [pc, #244]	@ (8001404 <MX_GPIO_Init+0x158>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <MX_GPIO_Init+0x158>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	4b38      	ldr	r3, [pc, #224]	@ (8001404 <MX_GPIO_Init+0x158>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a37      	ldr	r2, [pc, #220]	@ (8001404 <MX_GPIO_Init+0x158>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <MX_GPIO_Init+0x158>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <MX_GPIO_Init+0x158>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a31      	ldr	r2, [pc, #196]	@ (8001404 <MX_GPIO_Init+0x158>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <MX_GPIO_Init+0x158>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2108      	movs	r1, #8
 8001356:	482c      	ldr	r0, [pc, #176]	@ (8001408 <MX_GPIO_Init+0x15c>)
 8001358:	f002 f92e 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f002 f927 	bl	80035b8 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001370:	4826      	ldr	r0, [pc, #152]	@ (800140c <MX_GPIO_Init+0x160>)
 8001372:	f002 f921 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800137c:	4824      	ldr	r0, [pc, #144]	@ (8001410 <MX_GPIO_Init+0x164>)
 800137e:	f002 f91b 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 8001382:	2308      	movs	r3, #8
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	481b      	ldr	r0, [pc, #108]	@ (8001408 <MX_GPIO_Init+0x15c>)
 800139a:	f001 ff8b 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 800139e:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80013a2:	61fb      	str	r3, [r7, #28]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ba:	f001 ff7b 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 80013be:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_GPIO_Init+0x160>)
 80013d8:	f001 ff6c 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 80013dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4806      	ldr	r0, [pc, #24]	@ (8001410 <MX_GPIO_Init+0x164>)
 80013f6:	f001 ff5d 	bl	80032b4 <HAL_GPIO_Init>

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	@ 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	48000800 	.word	0x48000800
 800140c:	48001000 	.word	0x48001000
 8001410:	48000c00 	.word	0x48000c00

08001414 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_I2C1_Init+0x74>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <MX_I2C1_Init+0x78>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_I2C1_Init+0x74>)
 8001420:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <MX_I2C1_Init+0x7c>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <MX_I2C1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_I2C1_Init+0x74>)
 800142c:	2201      	movs	r2, #1
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_I2C1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_I2C1_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_I2C1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800144e:	480e      	ldr	r0, [pc, #56]	@ (8001488 <MX_I2C1_Init+0x74>)
 8001450:	f002 f8ca 	bl	80035e8 <HAL_I2C_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800145a:	f000 fba2 	bl	8001ba2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <MX_I2C1_Init+0x74>)
 8001462:	f002 f95c 	bl	800371e <HAL_I2CEx_ConfigAnalogFilter>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800146c:	f000 fb99 	bl	8001ba2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001470:	2100      	movs	r1, #0
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_I2C1_Init+0x74>)
 8001474:	f002 f99e 	bl	80037b4 <HAL_I2CEx_ConfigDigitalFilter>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800147e:	f000 fb90 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000012c 	.word	0x2000012c
 800148c:	40005400 	.word	0x40005400
 8001490:	40b285c2 	.word	0x40b285c2

08001494 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0a0      	sub	sp, #128	@ 0x80
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	2254      	movs	r2, #84	@ 0x54
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f005 fe33 	bl	8007120 <memset>
  if(i2cHandle->Instance==I2C1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <HAL_I2C_MspInit+0xe0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d153      	bne.n	800156c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014c4:	2340      	movs	r3, #64	@ 0x40
 80014c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 ff9d 	bl	8004410 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014dc:	f000 fb61 	bl	8001ba2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	4a24      	ldr	r2, [pc, #144]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001504:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001514:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001516:	2312      	movs	r3, #18
 8001518:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001522:	2304      	movs	r3, #4
 8001524:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001530:	f001 fec0 	bl	80032b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001544:	2304      	movs	r3, #4
 8001546:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800154c:	4619      	mov	r1, r3
 800154e:	480b      	ldr	r0, [pc, #44]	@ (800157c <HAL_I2C_MspInit+0xe8>)
 8001550:	f001 feb0 	bl	80032b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	4a07      	ldr	r2, [pc, #28]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 800155a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800155e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_I2C_MspInit+0xe4>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800156c:	bf00      	nop
 800156e:	3780      	adds	r7, #128	@ 0x80
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40005400 	.word	0x40005400
 8001578:	40021000 	.word	0x40021000
 800157c:	48000400 	.word	0x48000400

08001580 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b08c      	sub	sp, #48	@ 0x30
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001586:	f001 fd1e 	bl	8002fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158a:	f000 fac1 	bl	8001b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158e:	f7ff fe8d 	bl	80012ac <MX_GPIO_Init>
  MX_UART4_Init();
 8001592:	f001 fbbf 	bl	8002d14 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001596:	f001 fc09 	bl	8002dac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800159a:	f001 f84b 	bl	8002634 <MX_TIM2_Init>
  MX_TIM3_Init();
 800159e:	f001 f8cb 	bl	8002738 <MX_TIM3_Init>
  MX_TIM1_Init();
 80015a2:	f000 ffed 	bl	8002580 <MX_TIM1_Init>
  MX_TIM8_Init();
 80015a6:	f001 f9f5 	bl	8002994 <MX_TIM8_Init>
  MX_TIM4_Init();
 80015aa:	f001 f947 	bl	800283c <MX_TIM4_Init>
  MX_TIM5_Init();
 80015ae:	f001 f99b 	bl	80028e8 <MX_TIM5_Init>
  MX_I2C1_Init();
 80015b2:	f7ff ff2f 	bl	8001414 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015b6:	2100      	movs	r1, #0
 80015b8:	48c3      	ldr	r0, [pc, #780]	@ (80018c8 <main+0x348>)
 80015ba:	f003 faa9 	bl	8004b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015be:	2104      	movs	r1, #4
 80015c0:	48c1      	ldr	r0, [pc, #772]	@ (80018c8 <main+0x348>)
 80015c2:	f003 faa5 	bl	8004b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015c6:	2100      	movs	r1, #0
 80015c8:	48c0      	ldr	r0, [pc, #768]	@ (80018cc <main+0x34c>)
 80015ca:	f003 faa1 	bl	8004b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015ce:	2104      	movs	r1, #4
 80015d0:	48be      	ldr	r0, [pc, #760]	@ (80018cc <main+0x34c>)
 80015d2:	f003 fa9d 	bl	8004b10 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80015d6:	48be      	ldr	r0, [pc, #760]	@ (80018d0 <main+0x350>)
 80015d8:	f003 f9c0 	bl	800495c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80015dc:	213c      	movs	r1, #60	@ 0x3c
 80015de:	48bc      	ldr	r0, [pc, #752]	@ (80018d0 <main+0x350>)
 80015e0:	f003 fc4e 	bl	8004e80 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80015e4:	48bb      	ldr	r0, [pc, #748]	@ (80018d4 <main+0x354>)
 80015e6:	f003 f9b9 	bl	800495c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80015ea:	213c      	movs	r1, #60	@ 0x3c
 80015ec:	48b9      	ldr	r0, [pc, #740]	@ (80018d4 <main+0x354>)
 80015ee:	f003 fc47 	bl	8004e80 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80015f2:	48b9      	ldr	r0, [pc, #740]	@ (80018d8 <main+0x358>)
 80015f4:	f003 f9b2 	bl	800495c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80015f8:	213c      	movs	r1, #60	@ 0x3c
 80015fa:	48b7      	ldr	r0, [pc, #732]	@ (80018d8 <main+0x358>)
 80015fc:	f003 fc40 	bl	8004e80 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8001600:	48b6      	ldr	r0, [pc, #728]	@ (80018dc <main+0x35c>)
 8001602:	f003 f9ab 	bl	800495c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8001606:	213c      	movs	r1, #60	@ 0x3c
 8001608:	48b4      	ldr	r0, [pc, #720]	@ (80018dc <main+0x35c>)
 800160a:	f003 fc39 	bl	8004e80 <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2108      	movs	r1, #8
 8001612:	48b3      	ldr	r0, [pc, #716]	@ (80018e0 <main+0x360>)
 8001614:	f001 ffd0 	bl	80035b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800161e:	48b1      	ldr	r0, [pc, #708]	@ (80018e4 <main+0x364>)
 8001620:	f001 ffca 	bl	80035b8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800162a:	48af      	ldr	r0, [pc, #700]	@ (80018e8 <main+0x368>)
 800162c:	f001 ffc4 	bl	80035b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001636:	48ac      	ldr	r0, [pc, #688]	@ (80018e8 <main+0x368>)
 8001638:	f001 ffbe 	bl	80035b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001642:	48a9      	ldr	r0, [pc, #676]	@ (80018e8 <main+0x368>)
 8001644:	f001 ffb8 	bl	80035b8 <HAL_GPIO_WritePin>
  // BaseVelocity calibrate_vel = {0, 0, 0.5 * ROBOT_MAX_Z_VELOCITY};
  // movement_control(calibrate_vel);
  // hmc5883l_calibrate(&hmc5883l_cali_data);
  // calibrate_vel.z_vel = 0;
  // movement_control(calibrate_vel);
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164e:	48a6      	ldr	r0, [pc, #664]	@ (80018e8 <main+0x368>)
 8001650:	f001 ffb2 	bl	80035b8 <HAL_GPIO_WritePin>
#if (TEST)
    HAL_Delay(1);
    // hmc5883l_read_data(&hmc5883l_data);
    // test_hmc_angle = hmc5883l_cal_xy_angle(&hmc5883l_data, &hmc5883l_cali_data);
#else
    HAL_Delay(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f001 fd27 	bl	80030a8 <HAL_Delay>
    HAL_UART_Receive(&huart1, controller_buffer, sizeof(controller_buffer), 0xFFFF);
 800165a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800165e:	2229      	movs	r2, #41	@ 0x29
 8001660:	49a2      	ldr	r1, [pc, #648]	@ (80018ec <main+0x36c>)
 8001662:	48a3      	ldr	r0, [pc, #652]	@ (80018f0 <main+0x370>)
 8001664:	f004 fc60 	bl	8005f28 <HAL_UART_Receive>
    // HAL_UART_Transmit(&huart4, controller_buffer, sizeof(controller_buffer), 0xFFFF);
    parse_controller_data(controller_buffer, &controller_state);
 8001668:	49a2      	ldr	r1, [pc, #648]	@ (80018f4 <main+0x374>)
 800166a:	48a0      	ldr	r0, [pc, #640]	@ (80018ec <main+0x36c>)
 800166c:	f7ff fbee 	bl	8000e4c <parse_controller_data>

    if (controller_state.options_button) {  // turn on/off the robot
 8001670:	4ba0      	ldr	r3, [pc, #640]	@ (80018f4 <main+0x374>)
 8001672:	7e1b      	ldrb	r3, [r3, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d019      	beq.n	80016ac <main+0x12c>
      turn_on = !turn_on;
 8001678:	4b9f      	ldr	r3, [pc, #636]	@ (80018f8 <main+0x378>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f083 0301 	eor.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b99      	ldr	r3, [pc, #612]	@ (80018f8 <main+0x378>)
 8001694:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001696:	4b98      	ldr	r3, [pc, #608]	@ (80018f8 <main+0x378>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016a6:	4890      	ldr	r0, [pc, #576]	@ (80018e8 <main+0x368>)
 80016a8:	f001 ff86 	bl	80035b8 <HAL_GPIO_WritePin>
    }

    if (turn_on) {
 80016ac:	4b92      	ldr	r3, [pc, #584]	@ (80018f8 <main+0x378>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 81de 	beq.w	8001a72 <main+0x4f2>
      float rotation_vel = (controller_state.l2_pressure / 1024.0 + controller_state.r2_pressure / -1024.0) * 100.0;
 80016b6:	4b8f      	ldr	r3, [pc, #572]	@ (80018f4 <main+0x374>)
 80016b8:	8a5b      	ldrh	r3, [r3, #18]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff5a 	bl	8000574 <__aeabi_i2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b8d      	ldr	r3, [pc, #564]	@ (80018fc <main+0x37c>)
 80016c6:	f7ff f8e9 	bl	800089c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	461d      	mov	r5, r3
 80016d2:	4b88      	ldr	r3, [pc, #544]	@ (80018f4 <main+0x374>)
 80016d4:	8a9b      	ldrh	r3, [r3, #20]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff4c 	bl	8000574 <__aeabi_i2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b87      	ldr	r3, [pc, #540]	@ (8001900 <main+0x380>)
 80016e2:	f7ff f8db 	bl	800089c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdf5 	bl	80002dc <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b81      	ldr	r3, [pc, #516]	@ (8001904 <main+0x384>)
 8001700:	f7fe ffa2 	bl	8000648 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff f9d6 	bl	8000abc <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28

      if (controller_state.ps_button) {  // auto, line following
      }

      if (controller_state.l_stick_x == 0 && controller_state.l_stick_y == 0 && rotation_vel != 0 && !controller_state.r1 && !controller_state.l1) {  // rotate
 8001714:	4b77      	ldr	r3, [pc, #476]	@ (80018f4 <main+0x374>)
 8001716:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d150      	bne.n	80017c0 <main+0x240>
 800171e:	4b75      	ldr	r3, [pc, #468]	@ (80018f4 <main+0x374>)
 8001720:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d14b      	bne.n	80017c0 <main+0x240>
 8001728:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800172c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d044      	beq.n	80017c0 <main+0x240>
 8001736:	4b6f      	ldr	r3, [pc, #444]	@ (80018f4 <main+0x374>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	f083 0301 	eor.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d03d      	beq.n	80017c0 <main+0x240>
 8001744:	4b6b      	ldr	r3, [pc, #428]	@ (80018f4 <main+0x374>)
 8001746:	78db      	ldrb	r3, [r3, #3]
 8001748:	f083 0301 	eor.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d036      	beq.n	80017c0 <main+0x240>
        BaseVelocity target_vel = {0, 0, rotation_vel / 100.0 * ROBOT_MAX_Z_VELOCITY};
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001760:	f7fe ff1a 	bl	8000598 <__aeabi_f2d>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <main+0x384>)
 800176a:	f7ff f897 	bl	800089c <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	a34e      	add	r3, pc, #312	@ (adr r3, 80018b0 <main+0x330>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff64 	bl	8000648 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	a34b      	add	r3, pc, #300	@ (adr r3, 80018b8 <main+0x338>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff5b 	bl	8000648 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f98f 	bl	8000abc <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
        movement_control(target_vel);
 80017a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80017a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80017aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017ae:	eeb0 0a66 	vmov.f32	s0, s13
 80017b2:	eef0 0a47 	vmov.f32	s1, s14
 80017b6:	eeb0 1a67 	vmov.f32	s2, s15
 80017ba:	f000 fd83 	bl	80022c4 <movement_control>
      if (controller_state.l_stick_x == 0 && controller_state.l_stick_y == 0 && rotation_vel != 0 && !controller_state.r1 && !controller_state.l1) {  // rotate
 80017be:	e139      	b.n	8001a34 <main+0x4b4>
      } else if (controller_state.r_stick_x == 0 && controller_state.r_stick_y == 0 && !controller_state.r1 && !controller_state.l1) {  // move fastly
 80017c0:	4b4c      	ldr	r3, [pc, #304]	@ (80018f4 <main+0x374>)
 80017c2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 80a0 	bne.w	800190c <main+0x38c>
 80017cc:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <main+0x374>)
 80017ce:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 809a 	bne.w	800190c <main+0x38c>
 80017d8:	4b46      	ldr	r3, [pc, #280]	@ (80018f4 <main+0x374>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	f083 0301 	eor.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8092 	beq.w	800190c <main+0x38c>
 80017e8:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <main+0x374>)
 80017ea:	78db      	ldrb	r3, [r3, #3]
 80017ec:	f083 0301 	eor.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 808a 	beq.w	800190c <main+0x38c>
        BaseVelocity target_vel = {controller_state.l_stick_y / 100.0 * ROBOT_MAX_Y_VELOCITY,
 80017f8:	4b3e      	ldr	r3, [pc, #248]	@ (80018f4 <main+0x374>)
 80017fa:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feb8 	bl	8000574 <__aeabi_i2d>
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b3e      	ldr	r3, [pc, #248]	@ (8001904 <main+0x384>)
 800180a:	f7ff f847 	bl	800089c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	a32a      	add	r3, pc, #168	@ (adr r3, 80018c0 <main+0x340>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ff14 	bl	8000648 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <main+0x388>)
 800182e:	f7fe ff0b 	bl	8000648 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f93f 	bl	8000abc <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	613b      	str	r3, [r7, #16]
                                   controller_state.l_stick_x / 100.0 * ROBOT_MAX_X_VELOCITY,
 8001842:	4b2c      	ldr	r3, [pc, #176]	@ (80018f4 <main+0x374>)
 8001844:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe93 	bl	8000574 <__aeabi_i2d>
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <main+0x384>)
 8001854:	f7ff f822 	bl	800089c <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	a317      	add	r3, pc, #92	@ (adr r3, 80018c0 <main+0x340>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7fe feef 	bl	8000648 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <main+0x388>)
 8001878:	f7fe fee6 	bl	8000648 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f91a 	bl	8000abc <__aeabi_d2f>
 8001888:	4603      	mov	r3, r0
        BaseVelocity target_vel = {controller_state.l_stick_y / 100.0 * ROBOT_MAX_Y_VELOCITY,
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
                                   0};
        movement_control(target_vel);
 8001892:	edd7 6a04 	vldr	s13, [r7, #16]
 8001896:	ed97 7a05 	vldr	s14, [r7, #20]
 800189a:	edd7 7a06 	vldr	s15, [r7, #24]
 800189e:	eeb0 0a66 	vmov.f32	s0, s13
 80018a2:	eef0 0a47 	vmov.f32	s1, s14
 80018a6:	eeb0 1a67 	vmov.f32	s2, s15
 80018aa:	f000 fd0b 	bl	80022c4 <movement_control>
      } else if (controller_state.r_stick_x == 0 && controller_state.r_stick_y == 0 && !controller_state.r1 && !controller_state.l1) {  // move fastly
 80018ae:	e0c1      	b.n	8001a34 <main+0x4b4>
 80018b0:	3d70a3d7 	.word	0x3d70a3d7
 80018b4:	4052070a 	.word	0x4052070a
 80018b8:	9999999a 	.word	0x9999999a
 80018bc:	3fc99999 	.word	0x3fc99999
 80018c0:	9999999a 	.word	0x9999999a
 80018c4:	401dd999 	.word	0x401dd999
 80018c8:	200001f4 	.word	0x200001f4
 80018cc:	20000240 	.word	0x20000240
 80018d0:	200001a8 	.word	0x200001a8
 80018d4:	2000028c 	.word	0x2000028c
 80018d8:	200002d8 	.word	0x200002d8
 80018dc:	20000324 	.word	0x20000324
 80018e0:	48000800 	.word	0x48000800
 80018e4:	48000c00 	.word	0x48000c00
 80018e8:	48001000 	.word	0x48001000
 80018ec:	200000e4 	.word	0x200000e4
 80018f0:	20000404 	.word	0x20000404
 80018f4:	20000110 	.word	0x20000110
 80018f8:	200001a0 	.word	0x200001a0
 80018fc:	40900000 	.word	0x40900000
 8001900:	c0900000 	.word	0xc0900000
 8001904:	40590000 	.word	0x40590000
 8001908:	3fe00000 	.word	0x3fe00000
      } else if (!controller_state.r1 && !controller_state.l1) {  // move slowly
 800190c:	4b74      	ldr	r3, [pc, #464]	@ (8001ae0 <main+0x560>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d074      	beq.n	8001a04 <main+0x484>
 800191a:	4b71      	ldr	r3, [pc, #452]	@ (8001ae0 <main+0x560>)
 800191c:	78db      	ldrb	r3, [r3, #3]
 800191e:	f083 0301 	eor.w	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d06d      	beq.n	8001a04 <main+0x484>
        BaseVelocity target_vel = {controller_state.r_stick_y / 100.0 * ROBOT_MAX_Y_VELOCITY * 0.4,
 8001928:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae0 <main+0x560>)
 800192a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe20 	bl	8000574 <__aeabi_i2d>
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae4 <main+0x564>)
 800193a:	f7fe ffaf 	bl	800089c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	a362      	add	r3, pc, #392	@ (adr r3, 8001ad0 <main+0x550>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fe7c 	bl	8000648 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b62      	ldr	r3, [pc, #392]	@ (8001ae8 <main+0x568>)
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	a35b      	add	r3, pc, #364	@ (adr r3, 8001ad8 <main+0x558>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fe6a 	bl	8000648 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f89e 	bl	8000abc <__aeabi_d2f>
 8001980:	4603      	mov	r3, r0
 8001982:	607b      	str	r3, [r7, #4]
                                   controller_state.r_stick_x / 100.0 * ROBOT_MAX_X_VELOCITY * 0.4,
 8001984:	4b56      	ldr	r3, [pc, #344]	@ (8001ae0 <main+0x560>)
 8001986:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fdf2 	bl	8000574 <__aeabi_i2d>
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <main+0x564>)
 8001996:	f7fe ff81 	bl	800089c <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	a34b      	add	r3, pc, #300	@ (adr r3, 8001ad0 <main+0x550>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fe4e 	bl	8000648 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae8 <main+0x568>)
 80019ba:	f7fe fe45 	bl	8000648 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	a344      	add	r3, pc, #272	@ (adr r3, 8001ad8 <main+0x558>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fe3c 	bl	8000648 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff f870 	bl	8000abc <__aeabi_d2f>
 80019dc:	4603      	mov	r3, r0
        BaseVelocity target_vel = {controller_state.r_stick_y / 100.0 * ROBOT_MAX_Y_VELOCITY * 0.4,
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
                                   0};
        movement_control(target_vel);
 80019e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80019ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80019f2:	eeb0 0a66 	vmov.f32	s0, s13
 80019f6:	eef0 0a47 	vmov.f32	s1, s14
 80019fa:	eeb0 1a67 	vmov.f32	s2, s15
 80019fe:	f000 fc61 	bl	80022c4 <movement_control>
      } else if (!controller_state.r1 && !controller_state.l1) {  // move slowly
 8001a02:	e017      	b.n	8001a34 <main+0x4b4>
      } else {  // rotate 90 degree, not neccessary
        float degree = 0;
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (controller_state.l1) {
 8001a0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ae0 <main+0x560>)
 8001a0c:	78db      	ldrb	r3, [r3, #3]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <main+0x498>
          degree = -90;
 8001a12:	4b36      	ldr	r3, [pc, #216]	@ (8001aec <main+0x56c>)
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a16:	e005      	b.n	8001a24 <main+0x4a4>
        } else if (controller_state.r1) {
 8001a18:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <main+0x560>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <main+0x4a4>
          degree = 90;
 8001a20:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <main+0x570>)
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        movement_rotation(degree);
 8001a24:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2c:	ee17 0a90 	vmov	r0, s15
 8001a30:	f000 fc93 	bl	800235a <movement_rotation>
      }

      if (controller_state.cross && !controller_state.triangle) {  // down the lift
 8001a34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <main+0x560>)
 8001a36:	799b      	ldrb	r3, [r3, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <main+0x4d6>
 8001a3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <main+0x560>)
 8001a3e:	7a1b      	ldrb	r3, [r3, #8]
 8001a40:	f083 0301 	eor.w	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <main+0x4d6>

      } else if (!controller_state.cross && controller_state.triangle) {  // up the lift
 8001a4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <main+0x560>)
 8001a4c:	799b      	ldrb	r3, [r3, #6]
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
      }

      if (controller_state.circle && !controller_state.square) {  // close the lift
 8001a56:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <main+0x560>)
 8001a58:	79db      	ldrb	r3, [r3, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <main+0x4f2>
 8001a5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <main+0x560>)
 8001a60:	7a5b      	ldrb	r3, [r3, #9]
 8001a62:	f083 0301 	eor.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <main+0x4f2>

      } else if (controller_state.square && !controller_state.circle) {  // open the lift
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <main+0x560>)
 8001a6e:	7a5b      	ldrb	r3, [r3, #9]
 8001a70:	2b00      	cmp	r3, #0
    //     test_stage = 0;
    //     break;
    // }
    // movement_control(test_target_base_vel);

    test_encoder[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <main+0x574>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <main+0x578>)
 8001a7c:	601a      	str	r2, [r3, #0]
    test_encoder[1] = __HAL_TIM_GET_COUNTER(&htim8);
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <main+0x57c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <main+0x578>)
 8001a88:	605a      	str	r2, [r3, #4]
    test_encoder[2] = __HAL_TIM_GET_COUNTER(&htim5);
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <main+0x580>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <main+0x578>)
 8001a94:	609a      	str	r2, [r3, #8]
    test_encoder[3] = __HAL_TIM_GET_COUNTER(&htim4);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <main+0x584>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <main+0x578>)
 8001aa0:	60da      	str	r2, [r3, #12]
    test_wheel_vel = read_current_velocity(encoders);
 8001aa2:	4819      	ldr	r0, [pc, #100]	@ (8001b08 <main+0x588>)
 8001aa4:	f7ff fbaa 	bl	80011fc <read_current_velocity>
 8001aa8:	eeb0 6a40 	vmov.f32	s12, s0
 8001aac:	eef0 6a60 	vmov.f32	s13, s1
 8001ab0:	eeb0 7a41 	vmov.f32	s14, s2
 8001ab4:	eef0 7a61 	vmov.f32	s15, s3
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <main+0x58c>)
 8001aba:	ed83 6a00 	vstr	s12, [r3]
 8001abe:	edc3 6a01 	vstr	s13, [r3, #4]
 8001ac2:	ed83 7a02 	vstr	s14, [r3, #8]
 8001ac6:	edc3 7a03 	vstr	s15, [r3, #12]
    HAL_Delay(1);
 8001aca:	e5c3      	b.n	8001654 <main+0xd4>
 8001acc:	f3af 8000 	nop.w
 8001ad0:	9999999a 	.word	0x9999999a
 8001ad4:	401dd999 	.word	0x401dd999
 8001ad8:	9999999a 	.word	0x9999999a
 8001adc:	3fd99999 	.word	0x3fd99999
 8001ae0:	20000110 	.word	0x20000110
 8001ae4:	40590000 	.word	0x40590000
 8001ae8:	3fe00000 	.word	0x3fe00000
 8001aec:	c2b40000 	.word	0xc2b40000
 8001af0:	42b40000 	.word	0x42b40000
 8001af4:	200001a8 	.word	0x200001a8
 8001af8:	20000180 	.word	0x20000180
 8001afc:	20000324 	.word	0x20000324
 8001b00:	200002d8 	.word	0x200002d8
 8001b04:	2000028c 	.word	0x2000028c
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000190 	.word	0x20000190

08001b10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	@ 0x50
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	2238      	movs	r2, #56	@ 0x38
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fafe 	bl	8007120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f001 fe8a 	bl	800384c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b40:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b42:	2302      	movs	r3, #2
 8001b44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b46:	2303      	movs	r3, #3
 8001b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b4e:	2355      	movs	r3, #85	@ 0x55
 8001b50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 ff26 	bl	80039b4 <HAL_RCC_OscConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0x62>
    Error_Handler();
 8001b6e:	f000 f818 	bl	8001ba2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b72:	230f      	movs	r3, #15
 8001b74:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b76:	2303      	movs	r3, #3
 8001b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fa24 	bl	8003fd8 <HAL_RCC_ClockConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x8a>
    Error_Handler();
 8001b96:	f000 f804 	bl	8001ba2 <Error_Handler>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3750      	adds	r7, #80	@ 0x50
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba6:	b672      	cpsid	i
}
 8001ba8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001baa:	bf00      	nop
 8001bac:	e7fd      	b.n	8001baa <Error_Handler+0x8>
	...

08001bb0 <base2wheel>:
#include "movement.h"

#include "pid-mecanum.h"

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b094      	sub	sp, #80	@ 0x50
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	eef0 6a40 	vmov.f32	s13, s0
 8001bba:	eeb0 7a60 	vmov.f32	s14, s1
 8001bbe:	eef0 7a41 	vmov.f32	s15, s2
 8001bc2:	edc7 6a05 	vstr	s13, [r7, #20]
 8001bc6:	ed87 7a06 	vstr	s14, [r7, #24]
 8001bca:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = (base_vel.x_vel - base_vel.y_vel - (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y) * base_vel.z_vel) / RADIUS_WHEEL;
 8001bce:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bda:	ee17 0a90 	vmov	r0, s15
 8001bde:	f7fe fcdb 	bl	8000598 <__aeabi_f2d>
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fcd5 	bl	8000598 <__aeabi_f2d>
 8001bee:	a360      	add	r3, pc, #384	@ (adr r3, 8001d70 <base2wheel+0x1c0>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fd28 	bl	8000648 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe fb6a 	bl	80002d8 <__aeabi_dsub>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	a35a      	add	r3, pc, #360	@ (adr r3, 8001d78 <base2wheel+0x1c8>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fe43 	bl	800089c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff4d 	bl	8000abc <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float front_right = (base_vel.x_vel + base_vel.y_vel + (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y) * base_vel.z_vel) / RADIUS_WHEEL;
 8001c26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	ee17 0a90 	vmov	r0, s15
 8001c36:	f7fe fcaf 	bl	8000598 <__aeabi_f2d>
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	460d      	mov	r5, r1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fca9 	bl	8000598 <__aeabi_f2d>
 8001c46:	a34a      	add	r3, pc, #296	@ (adr r3, 8001d70 <base2wheel+0x1c0>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fcfc 	bl	8000648 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fb40 	bl	80002dc <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	a344      	add	r3, pc, #272	@ (adr r3, 8001d78 <base2wheel+0x1c8>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fe17 	bl	800089c <__aeabi_ddiv>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ff21 	bl	8000abc <__aeabi_d2f>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  float rear_left = (base_vel.x_vel + base_vel.y_vel - (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y) * base_vel.z_vel) / RADIUS_WHEEL;
 8001c7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c82:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8a:	ee17 0a90 	vmov	r0, s15
 8001c8e:	f7fe fc83 	bl	8000598 <__aeabi_f2d>
 8001c92:	4604      	mov	r4, r0
 8001c94:	460d      	mov	r5, r1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc7d 	bl	8000598 <__aeabi_f2d>
 8001c9e:	a334      	add	r3, pc, #208	@ (adr r3, 8001d70 <base2wheel+0x1c0>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fcd0 	bl	8000648 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fb12 	bl	80002d8 <__aeabi_dsub>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	a32e      	add	r3, pc, #184	@ (adr r3, 8001d78 <base2wheel+0x1c8>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fdeb 	bl	800089c <__aeabi_ddiv>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe fef5 	bl	8000abc <__aeabi_d2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	647b      	str	r3, [r7, #68]	@ 0x44
  float rear_right = (base_vel.x_vel - base_vel.y_vel + (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y) * base_vel.z_vel) / RADIUS_WHEEL;
 8001cd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cda:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce2:	ee17 0a90 	vmov	r0, s15
 8001ce6:	f7fe fc57 	bl	8000598 <__aeabi_f2d>
 8001cea:	4604      	mov	r4, r0
 8001cec:	460d      	mov	r5, r1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc51 	bl	8000598 <__aeabi_f2d>
 8001cf6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001d70 <base2wheel+0x1c0>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fca4 	bl	8000648 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4620      	mov	r0, r4
 8001d06:	4629      	mov	r1, r5
 8001d08:	f7fe fae8 	bl	80002dc <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	a318      	add	r3, pc, #96	@ (adr r3, 8001d78 <base2wheel+0x1c8>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fdbf 	bl	800089c <__aeabi_ddiv>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fec9 	bl	8000abc <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	643b      	str	r3, [r7, #64]	@ 0x40
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8001d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d40:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d46:	ee06 0a10 	vmov	s12, r0
 8001d4a:	ee06 1a90 	vmov	s13, r1
 8001d4e:	ee07 2a10 	vmov	s14, r2
 8001d52:	ee07 3a90 	vmov	s15, r3
}
 8001d56:	eeb0 0a46 	vmov.f32	s0, s12
 8001d5a:	eef0 0a66 	vmov.f32	s1, s13
 8001d5e:	eeb0 1a47 	vmov.f32	s2, s14
 8001d62:	eef0 1a67 	vmov.f32	s3, s15
 8001d66:	3750      	adds	r7, #80	@ 0x50
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6c:	f3af 8000 	nop.w
 8001d70:	b22d0e56 	.word	0xb22d0e56
 8001d74:	3fc7ef9d 	.word	0x3fc7ef9d
 8001d78:	33333333 	.word	0x33333333
 8001d7c:	3fa33333 	.word	0x3fa33333

08001d80 <wheel2pwm>:
  float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b08e      	sub	sp, #56	@ 0x38
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6178      	str	r0, [r7, #20]
 8001d88:	eeb0 6a40 	vmov.f32	s12, s0
 8001d8c:	eef0 6a60 	vmov.f32	s13, s1
 8001d90:	eeb0 7a41 	vmov.f32	s14, s2
 8001d94:	eef0 7a61 	vmov.f32	s15, s3
 8001d98:	ed87 6a01 	vstr	s12, [r7, #4]
 8001d9c:	edc7 6a02 	vstr	s13, [r7, #8]
 8001da0:	ed87 7a03 	vstr	s14, [r7, #12]
 8001da4:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbf4 	bl	8000598 <__aeabi_f2d>
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b92      	ldr	r3, [pc, #584]	@ (8002000 <wheel2pwm+0x280>)
 8001db6:	f7fe fc47 	bl	8000648 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	a38b      	add	r3, pc, #556	@ (adr r3, 8001ff0 <wheel2pwm+0x270>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fd68 	bl	800089c <__aeabi_ddiv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	a388      	add	r3, pc, #544	@ (adr r3, 8001ff8 <wheel2pwm+0x278>)
 8001dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dda:	f7fe fd5f 	bl	800089c <__aeabi_ddiv>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b86      	ldr	r3, [pc, #536]	@ (8002004 <wheel2pwm+0x284>)
 8001dec:	f7fe fc2c 	bl	8000648 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	4b83      	ldr	r3, [pc, #524]	@ (8002008 <wheel2pwm+0x288>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fba9 	bl	8000554 <__aeabi_ui2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fc1d 	bl	8000648 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002004 <wheel2pwm+0x284>)
 8001e1c:	f7fe fd3e 	bl	800089c <__aeabi_ddiv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fe20 	bl	8000a6c <__aeabi_d2iz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fbb0 	bl	8000598 <__aeabi_f2d>
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	4b70      	ldr	r3, [pc, #448]	@ (8002000 <wheel2pwm+0x280>)
 8001e3e:	f7fe fc03 	bl	8000648 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	a369      	add	r3, pc, #420	@ (adr r3, 8001ff0 <wheel2pwm+0x270>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fd24 	bl	800089c <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	a366      	add	r3, pc, #408	@ (adr r3, 8001ff8 <wheel2pwm+0x278>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fd1b 	bl	800089c <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b64      	ldr	r3, [pc, #400]	@ (8002004 <wheel2pwm+0x284>)
 8001e74:	f7fe fbe8 	bl	8000648 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4614      	mov	r4, r2
 8001e7e:	461d      	mov	r5, r3
 8001e80:	4b61      	ldr	r3, [pc, #388]	@ (8002008 <wheel2pwm+0x288>)
 8001e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb65 	bl	8000554 <__aeabi_ui2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	f7fe fbd9 	bl	8000648 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b58      	ldr	r3, [pc, #352]	@ (8002004 <wheel2pwm+0x284>)
 8001ea4:	f7fe fcfa 	bl	800089c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe fddc 	bl	8000a6c <__aeabi_d2iz>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb6c 	bl	8000598 <__aeabi_f2d>
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b4e      	ldr	r3, [pc, #312]	@ (8002000 <wheel2pwm+0x280>)
 8001ec6:	f7fe fbbf 	bl	8000648 <__aeabi_dmul>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	a347      	add	r3, pc, #284	@ (adr r3, 8001ff0 <wheel2pwm+0x270>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fce0 	bl	800089c <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	a344      	add	r3, pc, #272	@ (adr r3, 8001ff8 <wheel2pwm+0x278>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fcd7 	bl	800089c <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b42      	ldr	r3, [pc, #264]	@ (8002004 <wheel2pwm+0x284>)
 8001efc:	f7fe fba4 	bl	8000648 <__aeabi_dmul>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4614      	mov	r4, r2
 8001f06:	461d      	mov	r5, r3
 8001f08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fb20 	bl	8000554 <__aeabi_ui2d>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7fe fb94 	bl	8000648 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b35      	ldr	r3, [pc, #212]	@ (8002004 <wheel2pwm+0x284>)
 8001f2e:	f7fe fcb5 	bl	800089c <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fd97 	bl	8000a6c <__aeabi_d2iz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fb27 	bl	8000598 <__aeabi_f2d>
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002000 <wheel2pwm+0x280>)
 8001f50:	f7fe fb7a 	bl	8000648 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	a324      	add	r3, pc, #144	@ (adr r3, 8001ff0 <wheel2pwm+0x270>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe fc9b 	bl	800089c <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	a322      	add	r3, pc, #136	@ (adr r3, 8001ff8 <wheel2pwm+0x278>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fc92 	bl	800089c <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <wheel2pwm+0x284>)
 8001f86:	f7fe fb5f 	bl	8000648 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4614      	mov	r4, r2
 8001f90:	461d      	mov	r5, r3
 8001f92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fadb 	bl	8000554 <__aeabi_ui2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	f7fe fb4f 	bl	8000648 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <wheel2pwm+0x284>)
 8001fb8:	f7fe fc70 	bl	800089c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fd52 	bl	8000a6c <__aeabi_d2iz>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fe2:	60da      	str	r2, [r3, #12]
}
 8001fe4:	6978      	ldr	r0, [r7, #20]
 8001fe6:	3738      	adds	r7, #56	@ 0x38
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}
 8001fec:	f3af 8000 	nop.w
 8001ff0:	54442d18 	.word	0x54442d18
 8001ff4:	401921fb 	.word	0x401921fb
 8001ff8:	7604ba60 	.word	0x7604ba60
 8001ffc:	409db13d 	.word	0x409db13d
 8002000:	404e0000 	.word	0x404e0000
 8002004:	40590000 	.word	0x40590000
 8002008:	40000400 	.word	0x40000400

0800200c <wheel_control>:

void wheel_control(MecanumWheel wheel, int speed) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 800201e:	4293      	cmp	r3, r2
 8002020:	dd03      	ble.n	800202a <wheel_control+0x1e>
    speed = 16800;
 8002022:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	e005      	b.n	8002036 <wheel_control+0x2a>
  else if (speed < -16800)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	4a94      	ldr	r2, [pc, #592]	@ (8002280 <wheel_control+0x274>)
 800202e:	4293      	cmp	r3, r2
 8002030:	da01      	bge.n	8002036 <wheel_control+0x2a>
    speed = -16800;
 8002032:	4b93      	ldr	r3, [pc, #588]	@ (8002280 <wheel_control+0x274>)
 8002034:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b03      	cmp	r3, #3
 800203a:	f200 80e9 	bhi.w	8002210 <wheel_control+0x204>
 800203e:	a201      	add	r2, pc, #4	@ (adr r2, 8002044 <wheel_control+0x38>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002055 	.word	0x08002055
 8002048:	080020bd 	.word	0x080020bd
 800204c:	08002131 	.word	0x08002131
 8002050:	0800219b 	.word	0x0800219b
    case FRONT_LEFT:
      if (speed > 0) {
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	dd0c      	ble.n	8002074 <wheel_control+0x68>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	2120      	movs	r1, #32
 800205e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002062:	f001 faa9 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	2110      	movs	r1, #16
 800206a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800206e:	f001 faa3 	bl	80035b8 <HAL_GPIO_WritePin>
 8002072:	e01b      	b.n	80020ac <wheel_control+0xa0>
      } else if (speed < 0) {
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0c      	bge.n	8002094 <wheel_control+0x88>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2120      	movs	r1, #32
 800207e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002082:	f001 fa99 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	2110      	movs	r1, #16
 800208a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800208e:	f001 fa93 	bl	80035b8 <HAL_GPIO_WritePin>
 8002092:	e00b      	b.n	80020ac <wheel_control+0xa0>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2120      	movs	r1, #32
 8002098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209c:	f001 fa8c 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2110      	movs	r1, #16
 80020a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a8:	f001 fa86 	bl	80035b8 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80020b2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80020b6:	4b73      	ldr	r3, [pc, #460]	@ (8002284 <wheel_control+0x278>)
 80020b8:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 80020ba:	e0dd      	b.n	8002278 <wheel_control+0x26c>
    case FRONT_RIGHT:
      if (speed < 0) {
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da0e      	bge.n	80020e0 <wheel_control+0xd4>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_SET);
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020cc:	f001 fa74 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020da:	f001 fa6d 	bl	80035b8 <HAL_GPIO_WritePin>
 80020de:	e01f      	b.n	8002120 <wheel_control+0x114>
      } else if (speed > 0) {
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	dd0e      	ble.n	8002104 <wheel_control+0xf8>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f0:	f001 fa62 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020fe:	f001 fa5b 	bl	80035b8 <HAL_GPIO_WritePin>
 8002102:	e00d      	b.n	8002120 <wheel_control+0x114>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800210a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210e:	f001 fa53 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211c:	f001 fa4c 	bl	80035b8 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002126:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800212a:	4b56      	ldr	r3, [pc, #344]	@ (8002284 <wheel_control+0x278>)
 800212c:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 800212e:	e0a3      	b.n	8002278 <wheel_control+0x26c>
    case REAR_LEFT:
      if (speed > 0) {
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	dd0c      	ble.n	8002150 <wheel_control+0x144>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_SET);
 8002136:	2201      	movs	r2, #1
 8002138:	2140      	movs	r1, #64	@ 0x40
 800213a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213e:	f001 fa3b 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2180      	movs	r1, #128	@ 0x80
 8002146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214a:	f001 fa35 	bl	80035b8 <HAL_GPIO_WritePin>
 800214e:	e01b      	b.n	8002188 <wheel_control+0x17c>
      } else if (speed < 0) {
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	da0c      	bge.n	8002170 <wheel_control+0x164>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2140      	movs	r1, #64	@ 0x40
 800215a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800215e:	f001 fa2b 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	2180      	movs	r1, #128	@ 0x80
 8002166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216a:	f001 fa25 	bl	80035b8 <HAL_GPIO_WritePin>
 800216e:	e00b      	b.n	8002188 <wheel_control+0x17c>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8002170:	2200      	movs	r2, #0
 8002172:	2140      	movs	r1, #64	@ 0x40
 8002174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002178:	f001 fa1e 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2180      	movs	r1, #128	@ 0x80
 8002180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002184:	f001 fa18 	bl	80035b8 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800218e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002192:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002196:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8002198:	e06e      	b.n	8002278 <wheel_control+0x26c>
    case REAR_RIGHT:
      if (speed < 0) {
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	da0e      	bge.n	80021be <wheel_control+0x1b2>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021aa:	f001 fa05 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b8:	f001 f9fe 	bl	80035b8 <HAL_GPIO_WritePin>
 80021bc:	e01f      	b.n	80021fe <wheel_control+0x1f2>
      } else if (speed > 0) {
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	dd0e      	ble.n	80021e2 <wheel_control+0x1d6>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 80021c4:	2200      	movs	r2, #0
 80021c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ce:	f001 f9f3 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021dc:	f001 f9ec 	bl	80035b8 <HAL_GPIO_WritePin>
 80021e0:	e00d      	b.n	80021fe <wheel_control+0x1f2>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ec:	f001 f9e4 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fa:	f001 f9dd 	bl	80035b8 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002204:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800220c:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 800220e:	e033      	b.n	8002278 <wheel_control+0x26c>
    default:
      if (speed > 0) {
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	dd0c      	ble.n	8002230 <wheel_control+0x224>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 8002216:	2201      	movs	r2, #1
 8002218:	2120      	movs	r1, #32
 800221a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800221e:	f001 f9cb 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	2110      	movs	r1, #16
 8002226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800222a:	f001 f9c5 	bl	80035b8 <HAL_GPIO_WritePin>
 800222e:	e01b      	b.n	8002268 <wheel_control+0x25c>
      } else if (speed < 0) {
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	da0c      	bge.n	8002250 <wheel_control+0x244>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	2120      	movs	r1, #32
 800223a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223e:	f001 f9bb 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	2110      	movs	r1, #16
 8002246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800224a:	f001 f9b5 	bl	80035b8 <HAL_GPIO_WritePin>
 800224e:	e00b      	b.n	8002268 <wheel_control+0x25c>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	2120      	movs	r1, #32
 8002254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002258:	f001 f9ae 	bl	80035b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	2110      	movs	r1, #16
 8002260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002264:	f001 f9a8 	bl	80035b8 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800226e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002272:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <wheel_control+0x278>)
 8002274:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8002276:	bf00      	nop
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	ffffbe60 	.word	0xffffbe60
 8002284:	40000400 	.word	0x40000400

08002288 <wheels_control>:

void wheels_control(WheelPWM pwm) {
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	463c      	mov	r4, r7
 8002290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff feb7 	bl	800200c <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4619      	mov	r1, r3
 80022a2:	2001      	movs	r0, #1
 80022a4:	f7ff feb2 	bl	800200c <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4619      	mov	r1, r3
 80022ac:	2002      	movs	r0, #2
 80022ae:	f7ff fead 	bl	800200c <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4619      	mov	r1, r3
 80022b6:	2003      	movs	r0, #3
 80022b8:	f7ff fea8 	bl	800200c <wheel_control>
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	@ 0x30
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	eef0 6a40 	vmov.f32	s13, s0
 80022ce:	eeb0 7a60 	vmov.f32	s14, s1
 80022d2:	eef0 7a41 	vmov.f32	s15, s2
 80022d6:	edc7 6a01 	vstr	s13, [r7, #4]
 80022da:	ed87 7a02 	vstr	s14, [r7, #8]
 80022de:	edc7 7a03 	vstr	s15, [r7, #12]
  WheelVelocity target_vel = base2wheel(base_vel);
 80022e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80022e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80022ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ee:	eeb0 0a66 	vmov.f32	s0, s13
 80022f2:	eef0 0a47 	vmov.f32	s1, s14
 80022f6:	eeb0 1a67 	vmov.f32	s2, s15
 80022fa:	f7ff fc59 	bl	8001bb0 <base2wheel>
 80022fe:	eeb0 6a40 	vmov.f32	s12, s0
 8002302:	eef0 6a60 	vmov.f32	s13, s1
 8002306:	eeb0 7a41 	vmov.f32	s14, s2
 800230a:	eef0 7a61 	vmov.f32	s15, s3
 800230e:	ed87 6a08 	vstr	s12, [r7, #32]
 8002312:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002316:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 800231a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
#if (PID_MODE == 1)
  WheelVelocity current_vel = read_current_velocity(encoders);
  WheelVelocity result_vel = pid_system(target_vel, current_vel);
  WheelPWM target_pwm = wheel2pwm(result_vel);
#else
  WheelPWM target_pwm = wheel2pwm(target_vel);
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	ed97 6a08 	vldr	s12, [r7, #32]
 8002326:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800232a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800232e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002332:	eeb0 0a46 	vmov.f32	s0, s12
 8002336:	eef0 0a66 	vmov.f32	s1, s13
 800233a:	eeb0 1a47 	vmov.f32	s2, s14
 800233e:	eef0 1a67 	vmov.f32	s3, s15
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fd1c 	bl	8001d80 <wheel2pwm>
#endif
  wheels_control(target_pwm);
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234e:	f7ff ff9b 	bl	8002288 <wheels_control>
}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	@ 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <movement_rotation>:

// TODO: need to test
void movement_rotation(int degree) {
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  // if degree is negative, rotate counterclockwise
  // if degree is 0, do nothing
  // call movement_control with the appropriate base velocity
  // check current angle of the robot
  // if current angle is close to the target angle, stop the robot by calling movement_control with zero base velocity
  if (degree == 0) 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
  // while (1) {
  //   hmc5883l_read_data(&hmc5883l_data);
  //   current_angle = hmc5883l_cal_xy_angle(&hmc5883l_data, &hmc5883l_cali_data);

  // }
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <HAL_MspInit+0x44>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237a:	4a0e      	ldr	r2, [pc, #56]	@ (80023b4 <HAL_MspInit+0x44>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6613      	str	r3, [r2, #96]	@ 0x60
 8002382:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <HAL_MspInit+0x44>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_MspInit+0x44>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	4a08      	ldr	r2, [pc, #32]	@ (80023b4 <HAL_MspInit+0x44>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	6593      	str	r3, [r2, #88]	@ 0x58
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_MspInit+0x44>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023a6:	f001 faf5 	bl	8003994 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <NMI_Handler+0x4>

080023c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <MemManage_Handler+0x4>

080023d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <UsageFault_Handler+0x4>

080023e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240e:	f000 fe2d 	bl	800306c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}

08002416 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e00a      	b.n	800243e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002428:	f3af 8000 	nop.w
 800242c:	4601      	mov	r1, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	dbf0      	blt.n	8002428 <_read+0x12>
  }

  return len;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e009      	b.n	8002476 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	60ba      	str	r2, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	dbf1      	blt.n	8002462 <_write+0x12>
  }
  return len;
 800247e:	687b      	ldr	r3, [r7, #4]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_close>:

int _close(int file)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024b0:	605a      	str	r2, [r3, #4]
  return 0;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_isatty>:

int _isatty(int file)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <_sbrk+0x5c>)
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <_sbrk+0x60>)
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002504:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <_sbrk+0x64>)
 800250e:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <_sbrk+0x68>)
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	429a      	cmp	r2, r3
 800251e:	d207      	bcs.n	8002530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002520:	f004 fe4c 	bl	80071bc <__errno>
 8002524:	4603      	mov	r3, r0
 8002526:	220c      	movs	r2, #12
 8002528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800252e:	e009      	b.n	8002544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002536:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	4a05      	ldr	r2, [pc, #20]	@ (8002554 <_sbrk+0x64>)
 8002540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002542:	68fb      	ldr	r3, [r7, #12]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20020000 	.word	0x20020000
 8002550:	00000400 	.word	0x00000400
 8002554:	200001a4 	.word	0x200001a4
 8002558:	200005e8 	.word	0x200005e8

0800255c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <SystemInit+0x20>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002566:	4a05      	ldr	r2, [pc, #20]	@ (800257c <SystemInit+0x20>)
 8002568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800256c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	@ 0x30
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	2224      	movs	r2, #36	@ 0x24
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f004 fdc6 	bl	8007120 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	463b      	mov	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800259e:	4b23      	ldr	r3, [pc, #140]	@ (800262c <MX_TIM1_Init+0xac>)
 80025a0:	4a23      	ldr	r2, [pc, #140]	@ (8002630 <MX_TIM1_Init+0xb0>)
 80025a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025a4:	4b21      	ldr	r3, [pc, #132]	@ (800262c <MX_TIM1_Init+0xac>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <MX_TIM1_Init+0xac>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <MX_TIM1_Init+0xac>)
 80025b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b8:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <MX_TIM1_Init+0xac>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025be:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <MX_TIM1_Init+0xac>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <MX_TIM1_Init+0xac>)
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025ca:	2303      	movs	r3, #3
 80025cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025d2:	2301      	movs	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80025da:	230a      	movs	r3, #10
 80025dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025e2:	2301      	movs	r3, #1
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80025ea:	230a      	movs	r3, #10
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80025ee:	f107 030c 	add.w	r3, r7, #12
 80025f2:	4619      	mov	r1, r3
 80025f4:	480d      	ldr	r0, [pc, #52]	@ (800262c <MX_TIM1_Init+0xac>)
 80025f6:	f002 fb9d 	bl	8004d34 <HAL_TIM_Encoder_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002600:	f7ff facf 	bl	8001ba2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002610:	463b      	mov	r3, r7
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	@ (800262c <MX_TIM1_Init+0xac>)
 8002616:	f003 fba1 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002620:	f7ff fabf 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	3730      	adds	r7, #48	@ 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	200001a8 	.word	0x200001a8
 8002630:	40012c00 	.word	0x40012c00

08002634 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	@ 0x38
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002654:	463b      	mov	r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002666:	4b33      	ldr	r3, [pc, #204]	@ (8002734 <MX_TIM2_Init+0x100>)
 8002668:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800266c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 800266e:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <MX_TIM2_Init+0x100>)
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b2f      	ldr	r3, [pc, #188]	@ (8002734 <MX_TIM2_Init+0x100>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 800267a:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <MX_TIM2_Init+0x100>)
 800267c:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002680:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002682:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <MX_TIM2_Init+0x100>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002688:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <MX_TIM2_Init+0x100>)
 800268a:	2280      	movs	r2, #128	@ 0x80
 800268c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800268e:	4829      	ldr	r0, [pc, #164]	@ (8002734 <MX_TIM2_Init+0x100>)
 8002690:	f002 f90c 	bl	80048ac <HAL_TIM_Base_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800269a:	f7ff fa82 	bl	8001ba2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800269e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4822      	ldr	r0, [pc, #136]	@ (8002734 <MX_TIM2_Init+0x100>)
 80026ac:	f002 fdaa 	bl	8005204 <HAL_TIM_ConfigClockSource>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80026b6:	f7ff fa74 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026ba:	481e      	ldr	r0, [pc, #120]	@ (8002734 <MX_TIM2_Init+0x100>)
 80026bc:	f002 f9c6 	bl	8004a4c <HAL_TIM_PWM_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80026c6:	f7ff fa6c 	bl	8001ba2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026d2:	f107 031c 	add.w	r3, r7, #28
 80026d6:	4619      	mov	r1, r3
 80026d8:	4816      	ldr	r0, [pc, #88]	@ (8002734 <MX_TIM2_Init+0x100>)
 80026da:	f003 fb3f 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80026e4:	f7ff fa5d 	bl	8001ba2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e8:	2360      	movs	r3, #96	@ 0x60
 80026ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f8:	463b      	mov	r3, r7
 80026fa:	2200      	movs	r2, #0
 80026fc:	4619      	mov	r1, r3
 80026fe:	480d      	ldr	r0, [pc, #52]	@ (8002734 <MX_TIM2_Init+0x100>)
 8002700:	f002 fc6c 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800270a:	f7ff fa4a 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800270e:	463b      	mov	r3, r7
 8002710:	2204      	movs	r2, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4807      	ldr	r0, [pc, #28]	@ (8002734 <MX_TIM2_Init+0x100>)
 8002716:	f002 fc61 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002720:	f7ff fa3f 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002724:	4803      	ldr	r0, [pc, #12]	@ (8002734 <MX_TIM2_Init+0x100>)
 8002726:	f000 fa99 	bl	8002c5c <HAL_TIM_MspPostInit>

}
 800272a:	bf00      	nop
 800272c:	3738      	adds	r7, #56	@ 0x38
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200001f4 	.word	0x200001f4

08002738 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08e      	sub	sp, #56	@ 0x38
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002758:	463b      	mov	r3, r7
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	615a      	str	r2, [r3, #20]
 8002768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800276a:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <MX_TIM3_Init+0xfc>)
 800276c:	4a32      	ldr	r2, [pc, #200]	@ (8002838 <MX_TIM3_Init+0x100>)
 800276e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8002770:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <MX_TIM3_Init+0xfc>)
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002776:	4b2f      	ldr	r3, [pc, #188]	@ (8002834 <MX_TIM3_Init+0xfc>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16800;
 800277c:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <MX_TIM3_Init+0xfc>)
 800277e:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8002782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002784:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <MX_TIM3_Init+0xfc>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800278a:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <MX_TIM3_Init+0xfc>)
 800278c:	2280      	movs	r2, #128	@ 0x80
 800278e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002790:	4828      	ldr	r0, [pc, #160]	@ (8002834 <MX_TIM3_Init+0xfc>)
 8002792:	f002 f88b 	bl	80048ac <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800279c:	f7ff fa01 	bl	8001ba2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027aa:	4619      	mov	r1, r3
 80027ac:	4821      	ldr	r0, [pc, #132]	@ (8002834 <MX_TIM3_Init+0xfc>)
 80027ae:	f002 fd29 	bl	8005204 <HAL_TIM_ConfigClockSource>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80027b8:	f7ff f9f3 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027bc:	481d      	ldr	r0, [pc, #116]	@ (8002834 <MX_TIM3_Init+0xfc>)
 80027be:	f002 f945 	bl	8004a4c <HAL_TIM_PWM_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80027c8:	f7ff f9eb 	bl	8001ba2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4619      	mov	r1, r3
 80027da:	4816      	ldr	r0, [pc, #88]	@ (8002834 <MX_TIM3_Init+0xfc>)
 80027dc:	f003 fabe 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80027e6:	f7ff f9dc 	bl	8001ba2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ea:	2360      	movs	r3, #96	@ 0x60
 80027ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027fa:	463b      	mov	r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	4619      	mov	r1, r3
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <MX_TIM3_Init+0xfc>)
 8002802:	f002 fbeb 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800280c:	f7ff f9c9 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002810:	463b      	mov	r3, r7
 8002812:	2204      	movs	r2, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4807      	ldr	r0, [pc, #28]	@ (8002834 <MX_TIM3_Init+0xfc>)
 8002818:	f002 fbe0 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002822:	f7ff f9be 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002826:	4803      	ldr	r0, [pc, #12]	@ (8002834 <MX_TIM3_Init+0xfc>)
 8002828:	f000 fa18 	bl	8002c5c <HAL_TIM_MspPostInit>

}
 800282c:	bf00      	nop
 800282e:	3738      	adds	r7, #56	@ 0x38
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000240 	.word	0x20000240
 8002838:	40000400 	.word	0x40000400

0800283c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	@ 0x30
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	2224      	movs	r2, #36	@ 0x24
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f004 fc68 	bl	8007120 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	463b      	mov	r3, r7
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800285a:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <MX_TIM4_Init+0xa4>)
 800285c:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <MX_TIM4_Init+0xa8>)
 800285e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <MX_TIM4_Init+0xa4>)
 8002862:	2200      	movs	r2, #0
 8002864:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002866:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <MX_TIM4_Init+0xa4>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800286c:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <MX_TIM4_Init+0xa4>)
 800286e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002872:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <MX_TIM4_Init+0xa4>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800287a:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <MX_TIM4_Init+0xa4>)
 800287c:	2280      	movs	r2, #128	@ 0x80
 800287e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002880:	2303      	movs	r3, #3
 8002882:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002890:	230a      	movs	r3, #10
 8002892:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002898:	2301      	movs	r3, #1
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800289c:	2300      	movs	r3, #0
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80028a0:	230a      	movs	r3, #10
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	4619      	mov	r1, r3
 80028aa:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <MX_TIM4_Init+0xa4>)
 80028ac:	f002 fa42 	bl	8004d34 <HAL_TIM_Encoder_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80028b6:	f7ff f974 	bl	8001ba2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028c2:	463b      	mov	r3, r7
 80028c4:	4619      	mov	r1, r3
 80028c6:	4806      	ldr	r0, [pc, #24]	@ (80028e0 <MX_TIM4_Init+0xa4>)
 80028c8:	f003 fa48 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80028d2:	f7ff f966 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	3730      	adds	r7, #48	@ 0x30
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000028c 	.word	0x2000028c
 80028e4:	40000800 	.word	0x40000800

080028e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	@ 0x30
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	2224      	movs	r2, #36	@ 0x24
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 fc12 	bl	8007120 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028fc:	463b      	mov	r3, r7
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002906:	4b21      	ldr	r3, [pc, #132]	@ (800298c <MX_TIM5_Init+0xa4>)
 8002908:	4a21      	ldr	r2, [pc, #132]	@ (8002990 <MX_TIM5_Init+0xa8>)
 800290a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800290c:	4b1f      	ldr	r3, [pc, #124]	@ (800298c <MX_TIM5_Init+0xa4>)
 800290e:	2200      	movs	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002912:	4b1e      	ldr	r3, [pc, #120]	@ (800298c <MX_TIM5_Init+0xa4>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002918:	4b1c      	ldr	r3, [pc, #112]	@ (800298c <MX_TIM5_Init+0xa4>)
 800291a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800291e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002920:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <MX_TIM5_Init+0xa4>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002926:	4b19      	ldr	r3, [pc, #100]	@ (800298c <MX_TIM5_Init+0xa4>)
 8002928:	2280      	movs	r2, #128	@ 0x80
 800292a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800292c:	2303      	movs	r3, #3
 800292e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002934:	2301      	movs	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800293c:	230a      	movs	r3, #10
 800293e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002944:	2301      	movs	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800294c:	230a      	movs	r3, #10
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	4619      	mov	r1, r3
 8002956:	480d      	ldr	r0, [pc, #52]	@ (800298c <MX_TIM5_Init+0xa4>)
 8002958:	f002 f9ec 	bl	8004d34 <HAL_TIM_Encoder_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002962:	f7ff f91e 	bl	8001ba2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800296e:	463b      	mov	r3, r7
 8002970:	4619      	mov	r1, r3
 8002972:	4806      	ldr	r0, [pc, #24]	@ (800298c <MX_TIM5_Init+0xa4>)
 8002974:	f003 f9f2 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800297e:	f7ff f910 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	3730      	adds	r7, #48	@ 0x30
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200002d8 	.word	0x200002d8
 8002990:	40000c00 	.word	0x40000c00

08002994 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	@ 0x30
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	2224      	movs	r2, #36	@ 0x24
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 fbbc 	bl	8007120 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a8:	463b      	mov	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80029b2:	4b23      	ldr	r3, [pc, #140]	@ (8002a40 <MX_TIM8_Init+0xac>)
 80029b4:	4a23      	ldr	r2, [pc, #140]	@ (8002a44 <MX_TIM8_Init+0xb0>)
 80029b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80029b8:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <MX_TIM8_Init+0xac>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029be:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <MX_TIM8_Init+0xac>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80029c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <MX_TIM8_Init+0xac>)
 80029c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <MX_TIM8_Init+0xac>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <MX_TIM8_Init+0xac>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029d8:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <MX_TIM8_Init+0xac>)
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029de:	2303      	movs	r3, #3
 80029e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029e6:	2301      	movs	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80029ee:	230a      	movs	r3, #10
 80029f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029f6:	2301      	movs	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80029fe:	230a      	movs	r3, #10
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	4619      	mov	r1, r3
 8002a08:	480d      	ldr	r0, [pc, #52]	@ (8002a40 <MX_TIM8_Init+0xac>)
 8002a0a:	f002 f993 	bl	8004d34 <HAL_TIM_Encoder_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002a14:	f7ff f8c5 	bl	8001ba2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a24:	463b      	mov	r3, r7
 8002a26:	4619      	mov	r1, r3
 8002a28:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <MX_TIM8_Init+0xac>)
 8002a2a:	f003 f997 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002a34:	f7ff f8b5 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002a38:	bf00      	nop
 8002a3a:	3730      	adds	r7, #48	@ 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000324 	.word	0x20000324
 8002a44:	40013400 	.word	0x40013400

08002a48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b090      	sub	sp, #64	@ 0x40
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a5d      	ldr	r2, [pc, #372]	@ (8002bdc <HAL_TIM_Encoder_MspInit+0x194>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d128      	bne.n	8002abc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002a70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a74:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a76:	4b5a      	ldr	r3, [pc, #360]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a82:	4b57      	ldr	r3, [pc, #348]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a86:	4a56      	ldr	r2, [pc, #344]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a8e:	4b54      	ldr	r3, [pc, #336]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	484b      	ldr	r0, [pc, #300]	@ (8002be4 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002ab6:	f000 fbfd 	bl	80032b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002aba:	e08a      	b.n	8002bd2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a49      	ldr	r2, [pc, #292]	@ (8002be8 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d129      	bne.n	8002b1a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ac6:	4b46      	ldr	r3, [pc, #280]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	4a45      	ldr	r2, [pc, #276]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ad2:	4b43      	ldr	r3, [pc, #268]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ade:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002ae4:	f043 0308 	orr.w	r3, r3, #8
 8002ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aea:	4b3d      	ldr	r3, [pc, #244]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002af6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4836      	ldr	r0, [pc, #216]	@ (8002bec <HAL_TIM_Encoder_MspInit+0x1a4>)
 8002b14:	f000 fbce 	bl	80032b4 <HAL_GPIO_Init>
}
 8002b18:	e05b      	b.n	8002bd2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a34      	ldr	r2, [pc, #208]	@ (8002bf0 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d129      	bne.n	8002b78 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b24:	4b2e      	ldr	r3, [pc, #184]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	4a2d      	ldr	r2, [pc, #180]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b30:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b40:	4a27      	ldr	r2, [pc, #156]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b48:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b54:	2303      	movs	r3, #3
 8002b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b64:	2302      	movs	r3, #2
 8002b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b72:	f000 fb9f 	bl	80032b4 <HAL_GPIO_Init>
}
 8002b76:	e02c      	b.n	8002bd2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf4 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d127      	bne.n	8002bd2 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b82:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b86:	4a16      	ldr	r2, [pc, #88]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b8e:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	4a10      	ldr	r2, [pc, #64]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb2:	23c0      	movs	r3, #192	@ 0xc0
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4805      	ldr	r0, [pc, #20]	@ (8002be4 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002bce:	f000 fb71 	bl	80032b4 <HAL_GPIO_Init>
}
 8002bd2:	bf00      	nop
 8002bd4:	3740      	adds	r7, #64	@ 0x40
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40021000 	.word	0x40021000
 8002be4:	48000800 	.word	0x48000800
 8002be8:	40000800 	.word	0x40000800
 8002bec:	48000c00 	.word	0x48000c00
 8002bf0:	40000c00 	.word	0x40000c00
 8002bf4:	40013400 	.word	0x40013400

08002bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c08:	d10c      	bne.n	8002c24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c0a:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <HAL_TIM_Base_MspInit+0x5c>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	4a11      	ldr	r2, [pc, #68]	@ (8002c54 <HAL_TIM_Base_MspInit+0x5c>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <HAL_TIM_Base_MspInit+0x5c>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c22:	e010      	b.n	8002c46 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0b      	ldr	r2, [pc, #44]	@ (8002c58 <HAL_TIM_Base_MspInit+0x60>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10b      	bne.n	8002c46 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c2e:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <HAL_TIM_Base_MspInit+0x5c>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	4a08      	ldr	r2, [pc, #32]	@ (8002c54 <HAL_TIM_Base_MspInit+0x5c>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_TIM_Base_MspInit+0x5c>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40000400 	.word	0x40000400

08002c5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	@ 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7e:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <HAL_TIM_MspPostInit+0xa8>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c82:	4a20      	ldr	r2, [pc, #128]	@ (8002d04 <HAL_TIM_MspPostInit+0xa8>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <HAL_TIM_MspPostInit+0xa8>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c96:	2318      	movs	r3, #24
 8002c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4815      	ldr	r0, [pc, #84]	@ (8002d08 <HAL_TIM_MspPostInit+0xac>)
 8002cb2:	f000 faff 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cb6:	e020      	b.n	8002cfa <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	@ (8002d0c <HAL_TIM_MspPostInit+0xb0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d11b      	bne.n	8002cfa <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <HAL_TIM_MspPostInit+0xa8>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d04 <HAL_TIM_MspPostInit+0xa8>)
 8002cc8:	f043 0310 	orr.w	r3, r3, #16
 8002ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <HAL_TIM_MspPostInit+0xa8>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cda:	230c      	movs	r3, #12
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cea:	2302      	movs	r3, #2
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4806      	ldr	r0, [pc, #24]	@ (8002d10 <HAL_TIM_MspPostInit+0xb4>)
 8002cf6:	f000 fadd 	bl	80032b4 <HAL_GPIO_Init>
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	@ 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	48000c00 	.word	0x48000c00
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	48001000 	.word	0x48001000

08002d14 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d18:	4b22      	ldr	r3, [pc, #136]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d1a:	4a23      	ldr	r2, [pc, #140]	@ (8002da8 <MX_UART4_Init+0x94>)
 8002d1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d26:	4b1f      	ldr	r3, [pc, #124]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3e:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d44:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4a:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d56:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d5c:	4811      	ldr	r0, [pc, #68]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d5e:	f003 f893 	bl	8005e88 <HAL_UART_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002d68:	f7fe ff1b 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	480d      	ldr	r0, [pc, #52]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d70:	f003 fef6 	bl	8006b60 <HAL_UARTEx_SetTxFifoThreshold>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002d7a:	f7fe ff12 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4808      	ldr	r0, [pc, #32]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d82:	f003 ff2b 	bl	8006bdc <HAL_UARTEx_SetRxFifoThreshold>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002d8c:	f7fe ff09 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002d90:	4804      	ldr	r0, [pc, #16]	@ (8002da4 <MX_UART4_Init+0x90>)
 8002d92:	f003 feac 	bl	8006aee <HAL_UARTEx_DisableFifoMode>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002d9c:	f7fe ff01 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000370 	.word	0x20000370
 8002da8:	40004c00 	.word	0x40004c00

08002dac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002db0:	4b22      	ldr	r3, [pc, #136]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002db2:	4a23      	ldr	r2, [pc, #140]	@ (8002e40 <MX_USART1_UART_Init+0x94>)
 8002db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002db6:	4b21      	ldr	r3, [pc, #132]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dca:	4b1c      	ldr	r3, [pc, #112]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd6:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ddc:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002de2:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002de8:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dee:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002df4:	4811      	ldr	r0, [pc, #68]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002df6:	f003 f847 	bl	8005e88 <HAL_UART_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e00:	f7fe fecf 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e04:	2100      	movs	r1, #0
 8002e06:	480d      	ldr	r0, [pc, #52]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002e08:	f003 feaa 	bl	8006b60 <HAL_UARTEx_SetTxFifoThreshold>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e12:	f7fe fec6 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e16:	2100      	movs	r1, #0
 8002e18:	4808      	ldr	r0, [pc, #32]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002e1a:	f003 fedf 	bl	8006bdc <HAL_UARTEx_SetRxFifoThreshold>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e24:	f7fe febd 	bl	8001ba2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e28:	4804      	ldr	r0, [pc, #16]	@ (8002e3c <MX_USART1_UART_Init+0x90>)
 8002e2a:	f003 fe60 	bl	8006aee <HAL_UARTEx_DisableFifoMode>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e34:	f7fe feb5 	bl	8001ba2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000404 	.word	0x20000404
 8002e40:	40013800 	.word	0x40013800

08002e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b0a0      	sub	sp, #128	@ 0x80
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e5c:	f107 0318 	add.w	r3, r7, #24
 8002e60:	2254      	movs	r2, #84	@ 0x54
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 f95b 	bl	8007120 <memset>
  if(uartHandle->Instance==UART4)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f64 <HAL_UART_MspInit+0x120>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d137      	bne.n	8002ee4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002e74:	2308      	movs	r3, #8
 8002e76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	4618      	mov	r0, r3
 8002e82:	f001 fac5 	bl	8004410 <HAL_RCCEx_PeriphCLKConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e8c:	f7fe fe89 	bl	8001ba2 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e90:	4b35      	ldr	r3, [pc, #212]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e94:	4a34      	ldr	r2, [pc, #208]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002e96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e9c:	4b32      	ldr	r3, [pc, #200]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eac:	4a2e      	ldr	r2, [pc, #184]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ec0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ec4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002ed2:	2305      	movs	r3, #5
 8002ed4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002eda:	4619      	mov	r1, r3
 8002edc:	4823      	ldr	r0, [pc, #140]	@ (8002f6c <HAL_UART_MspInit+0x128>)
 8002ede:	f000 f9e9 	bl	80032b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ee2:	e03a      	b.n	8002f5a <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a21      	ldr	r2, [pc, #132]	@ (8002f70 <HAL_UART_MspInit+0x12c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d135      	bne.n	8002f5a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef6:	f107 0318 	add.w	r3, r7, #24
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 fa88 	bl	8004410 <HAL_RCCEx_PeriphCLKConfig>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002f06:	f7fe fe4c 	bl	8001ba2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f0a:	4b17      	ldr	r3, [pc, #92]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0e:	4a16      	ldr	r2, [pc, #88]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f14:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f16:	4b14      	ldr	r3, [pc, #80]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f22:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f26:	4a10      	ldr	r2, [pc, #64]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <HAL_UART_MspInit+0x124>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f3a:	2330      	movs	r3, #48	@ 0x30
 8002f3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2300      	movs	r3, #0
 8002f48:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f4a:	2307      	movs	r3, #7
 8002f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002f52:	4619      	mov	r1, r3
 8002f54:	4805      	ldr	r0, [pc, #20]	@ (8002f6c <HAL_UART_MspInit+0x128>)
 8002f56:	f000 f9ad 	bl	80032b4 <HAL_GPIO_Init>
}
 8002f5a:	bf00      	nop
 8002f5c:	3780      	adds	r7, #128	@ 0x80
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40004c00 	.word	0x40004c00
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	48000800 	.word	0x48000800
 8002f70:	40013800 	.word	0x40013800

08002f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f74:	480d      	ldr	r0, [pc, #52]	@ (8002fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f78:	f7ff faf0 	bl	800255c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f7c:	480c      	ldr	r0, [pc, #48]	@ (8002fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f7e:	490d      	ldr	r1, [pc, #52]	@ (8002fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f80:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <LoopForever+0xe>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f84:	e002      	b.n	8002f8c <LoopCopyDataInit>

08002f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8a:	3304      	adds	r3, #4

08002f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f90:	d3f9      	bcc.n	8002f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f92:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f94:	4c0a      	ldr	r4, [pc, #40]	@ (8002fc0 <LoopForever+0x16>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f98:	e001      	b.n	8002f9e <LoopFillZerobss>

08002f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f9c:	3204      	adds	r2, #4

08002f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa0:	d3fb      	bcc.n	8002f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f004 f911 	bl	80071c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fa6:	f7fe faeb 	bl	8001580 <main>

08002faa <LoopForever>:

LoopForever:
    b LoopForever
 8002faa:	e7fe      	b.n	8002faa <LoopForever>
  ldr   r0, =_estack
 8002fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002fb8:	0800822c 	.word	0x0800822c
  ldr r2, =_sbss
 8002fbc:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002fc0:	200005e8 	.word	0x200005e8

08002fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC1_2_IRQHandler>

08002fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd0:	2003      	movs	r0, #3
 8002fd2:	f000 f93d 	bl	8003250 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fd6:	200f      	movs	r0, #15
 8002fd8:	f000 f80e 	bl	8002ff8 <HAL_InitTick>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	71fb      	strb	r3, [r7, #7]
 8002fe6:	e001      	b.n	8002fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fe8:	f7ff f9c2 	bl	8002370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fec:	79fb      	ldrb	r3, [r7, #7]

}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003004:	4b16      	ldr	r3, [pc, #88]	@ (8003060 <HAL_InitTick+0x68>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d022      	beq.n	8003052 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800300c:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <HAL_InitTick+0x6c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <HAL_InitTick+0x68>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003018:	fbb1 f3f3 	udiv	r3, r1, r3
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f93a 	bl	800329a <HAL_SYSTICK_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10f      	bne.n	800304c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	d809      	bhi.n	8003046 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003032:	2200      	movs	r2, #0
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800303a:	f000 f914 	bl	8003266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800303e:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <HAL_InitTick+0x70>)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e007      	b.n	8003056 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
 800304a:	e004      	b.n	8003056 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e001      	b.n	8003056 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000068 	.word	0x20000068
 8003064:	20000060 	.word	0x20000060
 8003068:	20000064 	.word	0x20000064

0800306c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003070:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_IncTick+0x1c>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_IncTick+0x20>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4413      	add	r3, r2
 800307a:	4a03      	ldr	r2, [pc, #12]	@ (8003088 <HAL_IncTick+0x1c>)
 800307c:	6013      	str	r3, [r2, #0]
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	20000498 	.word	0x20000498
 800308c:	20000068 	.word	0x20000068

08003090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return uwTick;
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <HAL_GetTick+0x14>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000498 	.word	0x20000498

080030a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b0:	f7ff ffee 	bl	8003090 <HAL_GetTick>
 80030b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030c0:	d004      	beq.n	80030cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_Delay+0x40>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030cc:	bf00      	nop
 80030ce:	f7ff ffdf 	bl	8003090 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d8f7      	bhi.n	80030ce <HAL_Delay+0x26>
  {
  }
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000068 	.word	0x20000068

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	2b00      	cmp	r3, #0
 8003162:	db0a      	blt.n	800317a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	490c      	ldr	r1, [pc, #48]	@ (800319c <__NVIC_SetPriority+0x4c>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	0112      	lsls	r2, r2, #4
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	440b      	add	r3, r1
 8003174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003178:	e00a      	b.n	8003190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4908      	ldr	r1, [pc, #32]	@ (80031a0 <__NVIC_SetPriority+0x50>)
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	3b04      	subs	r3, #4
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	440b      	add	r3, r1
 800318e:	761a      	strb	r2, [r3, #24]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000e100 	.word	0xe000e100
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	@ 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f1c3 0307 	rsb	r3, r3, #7
 80031be:	2b04      	cmp	r3, #4
 80031c0:	bf28      	it	cs
 80031c2:	2304      	movcs	r3, #4
 80031c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d902      	bls.n	80031d4 <NVIC_EncodePriority+0x30>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3b03      	subs	r3, #3
 80031d2:	e000      	b.n	80031d6 <NVIC_EncodePriority+0x32>
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	401a      	ands	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	43d9      	mvns	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	4313      	orrs	r3, r2
         );
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3724      	adds	r7, #36	@ 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800321c:	d301      	bcc.n	8003222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321e:	2301      	movs	r3, #1
 8003220:	e00f      	b.n	8003242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003222:	4a0a      	ldr	r2, [pc, #40]	@ (800324c <SysTick_Config+0x40>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322a:	210f      	movs	r1, #15
 800322c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003230:	f7ff ff8e 	bl	8003150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <SysTick_Config+0x40>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323a:	4b04      	ldr	r3, [pc, #16]	@ (800324c <SysTick_Config+0x40>)
 800323c:	2207      	movs	r2, #7
 800323e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000e010 	.word	0xe000e010

08003250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ff47 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003274:	f7ff ff5e 	bl	8003134 <__NVIC_GetPriorityGrouping>
 8003278:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	6978      	ldr	r0, [r7, #20]
 8003280:	f7ff ff90 	bl	80031a4 <NVIC_EncodePriority>
 8003284:	4602      	mov	r2, r0
 8003286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff5f 	bl	8003150 <__NVIC_SetPriority>
}
 8003292:	bf00      	nop
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ffb2 	bl	800320c <SysTick_Config>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032c2:	e15a      	b.n	800357a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 814c 	beq.w	8003574 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d005      	beq.n	80032f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d130      	bne.n	8003356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800332a:	2201      	movs	r2, #1
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0201 	and.w	r2, r3, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b03      	cmp	r3, #3
 8003360:	d017      	beq.n	8003392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2203      	movs	r2, #3
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d123      	bne.n	80033e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	08da      	lsrs	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3208      	adds	r2, #8
 80033a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	08da      	lsrs	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3208      	adds	r2, #8
 80033e0:	6939      	ldr	r1, [r7, #16]
 80033e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0203 	and.w	r2, r3, #3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80a6 	beq.w	8003574 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003428:	4b5b      	ldr	r3, [pc, #364]	@ (8003598 <HAL_GPIO_Init+0x2e4>)
 800342a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342c:	4a5a      	ldr	r2, [pc, #360]	@ (8003598 <HAL_GPIO_Init+0x2e4>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6613      	str	r3, [r2, #96]	@ 0x60
 8003434:	4b58      	ldr	r3, [pc, #352]	@ (8003598 <HAL_GPIO_Init+0x2e4>)
 8003436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003440:	4a56      	ldr	r2, [pc, #344]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	220f      	movs	r2, #15
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800346a:	d01f      	beq.n	80034ac <HAL_GPIO_Init+0x1f8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4c      	ldr	r2, [pc, #304]	@ (80035a0 <HAL_GPIO_Init+0x2ec>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d019      	beq.n	80034a8 <HAL_GPIO_Init+0x1f4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4b      	ldr	r2, [pc, #300]	@ (80035a4 <HAL_GPIO_Init+0x2f0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <HAL_GPIO_Init+0x1f0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4a      	ldr	r2, [pc, #296]	@ (80035a8 <HAL_GPIO_Init+0x2f4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00d      	beq.n	80034a0 <HAL_GPIO_Init+0x1ec>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a49      	ldr	r2, [pc, #292]	@ (80035ac <HAL_GPIO_Init+0x2f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <HAL_GPIO_Init+0x1e8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a48      	ldr	r2, [pc, #288]	@ (80035b0 <HAL_GPIO_Init+0x2fc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d101      	bne.n	8003498 <HAL_GPIO_Init+0x1e4>
 8003494:	2305      	movs	r3, #5
 8003496:	e00a      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 8003498:	2306      	movs	r3, #6
 800349a:	e008      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 800349c:	2304      	movs	r3, #4
 800349e:	e006      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 80034a0:	2303      	movs	r3, #3
 80034a2:	e004      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e002      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_GPIO_Init+0x1fa>
 80034ac:	2300      	movs	r3, #0
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	f002 0203 	and.w	r2, r2, #3
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	4093      	lsls	r3, r2
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034be:	4937      	ldr	r1, [pc, #220]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034cc:	4b39      	ldr	r3, [pc, #228]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f0:	4a30      	ldr	r2, [pc, #192]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034f6:	4b2f      	ldr	r3, [pc, #188]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800351a:	4a26      	ldr	r2, [pc, #152]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003520:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003544:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800354a:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800356e:	4a11      	ldr	r2, [pc, #68]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3301      	adds	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f ae9d 	bne.w	80032c4 <HAL_GPIO_Init+0x10>
  }
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40021000 	.word	0x40021000
 800359c:	40010000 	.word	0x40010000
 80035a0:	48000400 	.word	0x48000400
 80035a4:	48000800 	.word	0x48000800
 80035a8:	48000c00 	.word	0x48000c00
 80035ac:	48001000 	.word	0x48001000
 80035b0:	48001400 	.word	0x48001400
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e08d      	b.n	8003716 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fd ff40 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2224      	movs	r2, #36	@ 0x24
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003638:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003648:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	e006      	b.n	8003670 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800366e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d108      	bne.n	800368a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	e007      	b.n	800369a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003698:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69d9      	ldr	r1, [r3, #28]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1a      	ldr	r2, [r3, #32]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b20      	cmp	r3, #32
 8003732:	d138      	bne.n	80037a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800373e:	2302      	movs	r3, #2
 8003740:	e032      	b.n	80037a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2224      	movs	r2, #36	@ 0x24
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003770:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d139      	bne.n	800383e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e033      	b.n	8003840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	@ 0x24
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003806:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d141      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800385a:	4b4b      	ldr	r3, [pc, #300]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003866:	d131      	bne.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003868:	4b47      	ldr	r3, [pc, #284]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800386e:	4a46      	ldr	r2, [pc, #280]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003878:	4b43      	ldr	r3, [pc, #268]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003880:	4a41      	ldr	r2, [pc, #260]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003888:	4b40      	ldr	r3, [pc, #256]	@ (800398c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2232      	movs	r2, #50	@ 0x32
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	4a3f      	ldr	r2, [pc, #252]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	0c9b      	lsrs	r3, r3, #18
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389e:	e002      	b.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a6:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d102      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f2      	bne.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ba:	4b33      	ldr	r3, [pc, #204]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d158      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e057      	b.n	800397c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038dc:	e04d      	b.n	800397a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e4:	d141      	bne.n	800396a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f2:	d131      	bne.n	8003958 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038fa:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003900:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003904:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800390c:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003914:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2232      	movs	r2, #50	@ 0x32
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	0c9b      	lsrs	r3, r3, #18
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392a:	e002      	b.n	8003932 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003932:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393e:	d102      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f2      	bne.n	800392c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003946:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003952:	d112      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e011      	b.n	800397c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003964:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003968:	e007      	b.n	800397a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800396a:	4b07      	ldr	r3, [pc, #28]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003972:	4a05      	ldr	r2, [pc, #20]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003978:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40007000 	.word	0x40007000
 800398c:	20000060 	.word	0x20000060
 8003990:	431bde83 	.word	0x431bde83

08003994 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4a04      	ldr	r2, [pc, #16]	@ (80039b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800399e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039a2:	6093      	str	r3, [r2, #8]
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40007000 	.word	0x40007000

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e2fe      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d075      	beq.n	8003abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d2:	4b97      	ldr	r3, [pc, #604]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039dc:	4b94      	ldr	r3, [pc, #592]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	d102      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3e>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_OscConfig+0x44>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05b      	beq.n	8003abc <HAL_RCC_OscConfig+0x108>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d157      	bne.n	8003abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e2d9      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a18:	d106      	bne.n	8003a28 <HAL_RCC_OscConfig+0x74>
 8003a1a:	4b85      	ldr	r3, [pc, #532]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a84      	ldr	r2, [pc, #528]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e01d      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x98>
 8003a32:	4b7f      	ldr	r3, [pc, #508]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7e      	ldr	r2, [pc, #504]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	4b78      	ldr	r3, [pc, #480]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a77      	ldr	r2, [pc, #476]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b75      	ldr	r3, [pc, #468]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a74      	ldr	r2, [pc, #464]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7ff fb10 	bl	8003090 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a74:	f7ff fb0c 	bl	8003090 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	@ 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e29e      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a86:	4b6a      	ldr	r3, [pc, #424]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0xc0>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7ff fafc 	bl	8003090 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7ff faf8 	bl	8003090 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	@ 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e28a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aae:	4b60      	ldr	r3, [pc, #384]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0xe8>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d075      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aca:	4b59      	ldr	r3, [pc, #356]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad4:	4b56      	ldr	r3, [pc, #344]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	d102      	bne.n	8003aea <HAL_RCC_OscConfig+0x136>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCC_OscConfig+0x13c>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d11f      	bne.n	8003b30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_OscConfig+0x154>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e25d      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b49      	ldr	r3, [pc, #292]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	4946      	ldr	r1, [pc, #280]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b1c:	4b45      	ldr	r3, [pc, #276]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fa69 	bl	8002ff8 <HAL_InitTick>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d043      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e249      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d023      	beq.n	8003b80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b38:	4b3d      	ldr	r3, [pc, #244]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7ff faa4 	bl	8003090 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4c:	f7ff faa0 	bl	8003090 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e232      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b5e:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	061b      	lsls	r3, r3, #24
 8003b78:	492d      	ldr	r1, [pc, #180]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
 8003b7e:	e01a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b80:	4b2b      	ldr	r3, [pc, #172]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2a      	ldr	r2, [pc, #168]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003b86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7ff fa80 	bl	8003090 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b94:	f7ff fa7c 	bl	8003090 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e20e      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba6:	4b22      	ldr	r3, [pc, #136]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1e0>
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d041      	beq.n	8003c46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd0:	4a17      	ldr	r2, [pc, #92]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bda:	f7ff fa59 	bl	8003090 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be2:	f7ff fa55 	bl	8003090 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e1e7      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ef      	beq.n	8003be2 <HAL_RCC_OscConfig+0x22e>
 8003c02:	e020      	b.n	8003c46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c04:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7ff fa3c 	bl	8003090 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c1a:	e00d      	b.n	8003c38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1c:	f7ff fa38 	bl	8003090 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d906      	bls.n	8003c38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1ca      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	20000064 	.word	0x20000064
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c38:	4b8c      	ldr	r3, [pc, #560]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ea      	bne.n	8003c1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80a6 	beq.w	8003da0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c58:	4b84      	ldr	r3, [pc, #528]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2b4>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x2b6>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	4a7e      	ldr	r2, [pc, #504]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c86:	2301      	movs	r3, #1
 8003c88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8a:	4b79      	ldr	r3, [pc, #484]	@ (8003e70 <HAL_RCC_OscConfig+0x4bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d118      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c96:	4b76      	ldr	r3, [pc, #472]	@ (8003e70 <HAL_RCC_OscConfig+0x4bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	@ (8003e70 <HAL_RCC_OscConfig+0x4bc>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca2:	f7ff f9f5 	bl	8003090 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7ff f9f1 	bl	8003090 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e183      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8003e70 <HAL_RCC_OscConfig+0x4bc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d108      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x32e>
 8003cd0:	4b66      	ldr	r3, [pc, #408]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	4a65      	ldr	r2, [pc, #404]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ce0:	e024      	b.n	8003d2c <HAL_RCC_OscConfig+0x378>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d110      	bne.n	8003d0c <HAL_RCC_OscConfig+0x358>
 8003cea:	4b60      	ldr	r3, [pc, #384]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	4a5a      	ldr	r2, [pc, #360]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d0a:	e00f      	b.n	8003d2c <HAL_RCC_OscConfig+0x378>
 8003d0c:	4b57      	ldr	r3, [pc, #348]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	4a56      	ldr	r2, [pc, #344]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d1c:	4b53      	ldr	r3, [pc, #332]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d22:	4a52      	ldr	r2, [pc, #328]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d016      	beq.n	8003d62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7ff f9ac 	bl	8003090 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7ff f9a8 	bl	8003090 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e138      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d52:	4b46      	ldr	r3, [pc, #280]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ed      	beq.n	8003d3c <HAL_RCC_OscConfig+0x388>
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7ff f995 	bl	8003090 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7ff f991 	bl	8003090 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e121      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d80:	4b3a      	ldr	r3, [pc, #232]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ed      	bne.n	8003d6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d8e:	7ffb      	ldrb	r3, [r7, #31]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d94:	4b35      	ldr	r3, [pc, #212]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	4a34      	ldr	r2, [pc, #208]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d03c      	beq.n	8003e26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01c      	beq.n	8003dee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003db4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dba:	4a2c      	ldr	r2, [pc, #176]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7ff f964 	bl	8003090 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dcc:	f7ff f960 	bl	8003090 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0f2      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dde:	4b23      	ldr	r3, [pc, #140]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ef      	beq.n	8003dcc <HAL_RCC_OscConfig+0x418>
 8003dec:	e01b      	b.n	8003e26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dee:	4b1f      	ldr	r3, [pc, #124]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003df4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7ff f947 	bl	8003090 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e06:	f7ff f943 	bl	8003090 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0d5      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e18:	4b14      	ldr	r3, [pc, #80]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ef      	bne.n	8003e06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80c9 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e30:	4b0e      	ldr	r3, [pc, #56]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	f000 8083 	beq.w	8003f44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d15e      	bne.n	8003f04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a08      	ldr	r2, [pc, #32]	@ (8003e6c <HAL_RCC_OscConfig+0x4b8>)
 8003e4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7ff f91d 	bl	8003090 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e58:	e00c      	b.n	8003e74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7ff f919 	bl	8003090 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d905      	bls.n	8003e74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0ab      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e74:	4b55      	ldr	r3, [pc, #340]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ec      	bne.n	8003e5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e80:	4b52      	ldr	r3, [pc, #328]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	4b52      	ldr	r3, [pc, #328]	@ (8003fd0 <HAL_RCC_OscConfig+0x61c>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6a11      	ldr	r1, [r2, #32]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e90:	3a01      	subs	r2, #1
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	4311      	orrs	r1, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e9a:	0212      	lsls	r2, r2, #8
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ea2:	0852      	lsrs	r2, r2, #1
 8003ea4:	3a01      	subs	r2, #1
 8003ea6:	0552      	lsls	r2, r2, #21
 8003ea8:	4311      	orrs	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003eae:	0852      	lsrs	r2, r2, #1
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	0652      	lsls	r2, r2, #25
 8003eb4:	4311      	orrs	r1, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003eba:	06d2      	lsls	r2, r2, #27
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	4943      	ldr	r1, [pc, #268]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	4b41      	ldr	r3, [pc, #260]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a40      	ldr	r2, [pc, #256]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ece:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a3d      	ldr	r2, [pc, #244]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7ff f8d8 	bl	8003090 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7ff f8d4 	bl	8003090 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e066      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef6:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x530>
 8003f02:	e05e      	b.n	8003fc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f04:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a30      	ldr	r2, [pc, #192]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7ff f8be 	bl	8003090 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7ff f8ba 	bl	8003090 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e04c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f2a:	4b28      	ldr	r3, [pc, #160]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f36:	4b25      	ldr	r3, [pc, #148]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	4924      	ldr	r1, [pc, #144]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003f3c:	4b25      	ldr	r3, [pc, #148]	@ (8003fd4 <HAL_RCC_OscConfig+0x620>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	60cb      	str	r3, [r1, #12]
 8003f42:	e03e      	b.n	8003fc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e039      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f50:	4b1e      	ldr	r3, [pc, #120]	@ (8003fcc <HAL_RCC_OscConfig+0x618>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f003 0203 	and.w	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d12c      	bne.n	8003fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d123      	bne.n	8003fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d11b      	bne.n	8003fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d113      	bne.n	8003fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d109      	bne.n	8003fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	019f800c 	.word	0x019f800c
 8003fd4:	feeefffc 	.word	0xfeeefffc

08003fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e11e      	b.n	800422e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b91      	ldr	r3, [pc, #580]	@ (8004238 <HAL_RCC_ClockConfig+0x260>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d910      	bls.n	8004020 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b8e      	ldr	r3, [pc, #568]	@ (8004238 <HAL_RCC_ClockConfig+0x260>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 020f 	bic.w	r2, r3, #15
 8004006:	498c      	ldr	r1, [pc, #560]	@ (8004238 <HAL_RCC_ClockConfig+0x260>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b8a      	ldr	r3, [pc, #552]	@ (8004238 <HAL_RCC_ClockConfig+0x260>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e106      	b.n	800422e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d073      	beq.n	8004114 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d129      	bne.n	8004088 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004034:	4b81      	ldr	r3, [pc, #516]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0f4      	b.n	800422e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004044:	f000 f99e 	bl	8004384 <RCC_GetSysClockFreqFromPLLSource>
 8004048:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4a7c      	ldr	r2, [pc, #496]	@ (8004240 <HAL_RCC_ClockConfig+0x268>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d93f      	bls.n	80040d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004052:	4b7a      	ldr	r3, [pc, #488]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004066:	2b00      	cmp	r3, #0
 8004068:	d033      	beq.n	80040d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800406e:	2b00      	cmp	r3, #0
 8004070:	d12f      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004072:	4b72      	ldr	r3, [pc, #456]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800407a:	4a70      	ldr	r2, [pc, #448]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 800407c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004080:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004082:	2380      	movs	r3, #128	@ 0x80
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e024      	b.n	80040d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004090:	4b6a      	ldr	r3, [pc, #424]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0c6      	b.n	800422e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a0:	4b66      	ldr	r3, [pc, #408]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0be      	b.n	800422e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040b0:	f000 f8ce 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4a61      	ldr	r2, [pc, #388]	@ (8004240 <HAL_RCC_ClockConfig+0x268>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d909      	bls.n	80040d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040be:	4b5f      	ldr	r3, [pc, #380]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040c6:	4a5d      	ldr	r2, [pc, #372]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80040c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040ce:	2380      	movs	r3, #128	@ 0x80
 80040d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040d2:	4b5a      	ldr	r3, [pc, #360]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4957      	ldr	r1, [pc, #348]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e4:	f7fe ffd4 	bl	8003090 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ec:	f7fe ffd0 	bl	8003090 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e095      	b.n	800422e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	4b4e      	ldr	r3, [pc, #312]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 020c 	and.w	r2, r3, #12
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	429a      	cmp	r2, r3
 8004112:	d1eb      	bne.n	80040ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d023      	beq.n	8004168 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800412c:	4b43      	ldr	r3, [pc, #268]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a42      	ldr	r2, [pc, #264]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004132:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004136:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004144:	4b3d      	ldr	r3, [pc, #244]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800414c:	4a3b      	ldr	r2, [pc, #236]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 800414e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004152:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004154:	4b39      	ldr	r3, [pc, #228]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4936      	ldr	r1, [pc, #216]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
 8004166:	e008      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b80      	cmp	r3, #128	@ 0x80
 800416c:	d105      	bne.n	800417a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800416e:	4b33      	ldr	r3, [pc, #204]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4a32      	ldr	r2, [pc, #200]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 8004174:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004178:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800417a:	4b2f      	ldr	r3, [pc, #188]	@ (8004238 <HAL_RCC_ClockConfig+0x260>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d21d      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004188:	4b2b      	ldr	r3, [pc, #172]	@ (8004238 <HAL_RCC_ClockConfig+0x260>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f023 020f 	bic.w	r2, r3, #15
 8004190:	4929      	ldr	r1, [pc, #164]	@ (8004238 <HAL_RCC_ClockConfig+0x260>)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004198:	f7fe ff7a 	bl	8003090 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fe ff76 	bl	8003090 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e03b      	b.n	800422e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	@ (8004238 <HAL_RCC_ClockConfig+0x260>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1ed      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d0:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4917      	ldr	r1, [pc, #92]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ee:	4b13      	ldr	r3, [pc, #76]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	490f      	ldr	r1, [pc, #60]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004202:	f000 f825 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 8004206:	4602      	mov	r2, r0
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <HAL_RCC_ClockConfig+0x264>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	490c      	ldr	r1, [pc, #48]	@ (8004244 <HAL_RCC_ClockConfig+0x26c>)
 8004214:	5ccb      	ldrb	r3, [r1, r3]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a0a      	ldr	r2, [pc, #40]	@ (8004248 <HAL_RCC_ClockConfig+0x270>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004222:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <HAL_RCC_ClockConfig+0x274>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe fee6 	bl	8002ff8 <HAL_InitTick>
 800422c:	4603      	mov	r3, r0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40022000 	.word	0x40022000
 800423c:	40021000 	.word	0x40021000
 8004240:	04c4b400 	.word	0x04c4b400
 8004244:	080080bc 	.word	0x080080bc
 8004248:	20000060 	.word	0x20000060
 800424c:	20000064 	.word	0x20000064

08004250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004256:	4b2c      	ldr	r3, [pc, #176]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d102      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004262:	4b2a      	ldr	r3, [pc, #168]	@ (800430c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	e047      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004268:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d102      	bne.n	800427a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004274:	4b26      	ldr	r3, [pc, #152]	@ (8004310 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	e03e      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800427a:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d136      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004286:	4b20      	ldr	r3, [pc, #128]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3301      	adds	r3, #1
 800429c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d10c      	bne.n	80042be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004310 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	4a16      	ldr	r2, [pc, #88]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ae:	68d2      	ldr	r2, [r2, #12]
 80042b0:	0a12      	lsrs	r2, r2, #8
 80042b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	617b      	str	r3, [r7, #20]
      break;
 80042bc:	e00c      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042be:	4a13      	ldr	r2, [pc, #76]	@ (800430c <HAL_RCC_GetSysClockFreq+0xbc>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	4a10      	ldr	r2, [pc, #64]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c8:	68d2      	ldr	r2, [r2, #12]
 80042ca:	0a12      	lsrs	r2, r2, #8
 80042cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042d0:	fb02 f303 	mul.w	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]
      break;
 80042d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0e5b      	lsrs	r3, r3, #25
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e001      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042f8:	693b      	ldr	r3, [r7, #16]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	@ (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000060 	.word	0x20000060

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4904      	ldr	r1, [pc, #16]	@ (8004354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	080080cc 	.word	0x080080cc

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800435c:	f7ff ffda 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0adb      	lsrs	r3, r3, #11
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4904      	ldr	r1, [pc, #16]	@ (8004380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	080080cc 	.word	0x080080cc

08004384 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800438a:	4b1e      	ldr	r3, [pc, #120]	@ (8004404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004394:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d10c      	bne.n	80043c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043a8:	4a17      	ldr	r2, [pc, #92]	@ (8004408 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	4a14      	ldr	r2, [pc, #80]	@ (8004404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043b2:	68d2      	ldr	r2, [r2, #12]
 80043b4:	0a12      	lsrs	r2, r2, #8
 80043b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	617b      	str	r3, [r7, #20]
    break;
 80043c0:	e00c      	b.n	80043dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043c2:	4a12      	ldr	r2, [pc, #72]	@ (800440c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043cc:	68d2      	ldr	r2, [r2, #12]
 80043ce:	0a12      	lsrs	r2, r2, #8
 80043d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]
    break;
 80043da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043dc:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	0e5b      	lsrs	r3, r3, #25
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	3301      	adds	r3, #1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043f6:	687b      	ldr	r3, [r7, #4]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40021000 	.word	0x40021000
 8004408:	007a1200 	.word	0x007a1200
 800440c:	00f42400 	.word	0x00f42400

08004410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004418:	2300      	movs	r3, #0
 800441a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800441c:	2300      	movs	r3, #0
 800441e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8098 	beq.w	800455e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004432:	4b43      	ldr	r3, [pc, #268]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004442:	4a3f      	ldr	r2, [pc, #252]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004448:	6593      	str	r3, [r2, #88]	@ 0x58
 800444a:	4b3d      	ldr	r3, [pc, #244]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445a:	4b3a      	ldr	r3, [pc, #232]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a39      	ldr	r2, [pc, #228]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004464:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004466:	f7fe fe13 	bl	8003090 <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800446c:	e009      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fe fe0f 	bl	8003090 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d902      	bls.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	74fb      	strb	r3, [r7, #19]
        break;
 8004480:	e005      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004482:	4b30      	ldr	r3, [pc, #192]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0ef      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d159      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004494:	4b2a      	ldr	r3, [pc, #168]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800449e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01e      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d019      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044b0:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044bc:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044dc:	4a18      	ldr	r2, [pc, #96]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d016      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fe fdcf 	bl	8003090 <HAL_GetTick>
 80044f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f4:	e00b      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fe fdcb 	bl	8003090 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d902      	bls.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	74fb      	strb	r3, [r7, #19]
            break;
 800450c:	e006      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450e:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ec      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004522:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004530:	4903      	ldr	r1, [pc, #12]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004538:	e008      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800453a:	7cfb      	ldrb	r3, [r7, #19]
 800453c:	74bb      	strb	r3, [r7, #18]
 800453e:	e005      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004540:	40021000 	.word	0x40021000
 8004544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454c:	7c7b      	ldrb	r3, [r7, #17]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d105      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004552:	4ba7      	ldr	r3, [pc, #668]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004556:	4aa6      	ldr	r2, [pc, #664]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800455c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800456a:	4ba1      	ldr	r3, [pc, #644]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	f023 0203 	bic.w	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	499d      	ldr	r1, [pc, #628]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800458c:	4b98      	ldr	r3, [pc, #608]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	f023 020c 	bic.w	r2, r3, #12
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4995      	ldr	r1, [pc, #596]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ae:	4b90      	ldr	r3, [pc, #576]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	498c      	ldr	r1, [pc, #560]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045d0:	4b87      	ldr	r3, [pc, #540]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	4984      	ldr	r1, [pc, #528]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045f2:	4b7f      	ldr	r3, [pc, #508]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	497b      	ldr	r1, [pc, #492]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004614:	4b76      	ldr	r3, [pc, #472]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	4973      	ldr	r1, [pc, #460]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004636:	4b6e      	ldr	r3, [pc, #440]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	496a      	ldr	r1, [pc, #424]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004658:	4b65      	ldr	r3, [pc, #404]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4962      	ldr	r1, [pc, #392]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800467a:	4b5d      	ldr	r3, [pc, #372]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	4959      	ldr	r1, [pc, #356]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800469c:	4b54      	ldr	r3, [pc, #336]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	4951      	ldr	r1, [pc, #324]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046be:	4b4c      	ldr	r3, [pc, #304]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	4948      	ldr	r1, [pc, #288]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d015      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e0:	4b43      	ldr	r3, [pc, #268]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ee:	4940      	ldr	r1, [pc, #256]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046fe:	d105      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004700:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a3a      	ldr	r2, [pc, #232]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004714:	2b00      	cmp	r3, #0
 8004716:	d015      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004718:	4b35      	ldr	r3, [pc, #212]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004726:	4932      	ldr	r1, [pc, #200]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004736:	d105      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b2d      	ldr	r3, [pc, #180]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a2c      	ldr	r2, [pc, #176]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004742:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004750:	4b27      	ldr	r3, [pc, #156]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475e:	4924      	ldr	r1, [pc, #144]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b1f      	ldr	r3, [pc, #124]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	4916      	ldr	r1, [pc, #88]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d019      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	4908      	ldr	r1, [pc, #32]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047de:	d109      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e0:	4b03      	ldr	r3, [pc, #12]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a02      	ldr	r2, [pc, #8]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ea:	60d3      	str	r3, [r2, #12]
 80047ec:	e002      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004800:	4b29      	ldr	r3, [pc, #164]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480e:	4926      	ldr	r1, [pc, #152]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800481e:	d105      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004820:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a20      	ldr	r2, [pc, #128]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d015      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004838:	4b1b      	ldr	r3, [pc, #108]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004846:	4918      	ldr	r1, [pc, #96]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004856:	d105      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004858:	4b13      	ldr	r3, [pc, #76]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4a12      	ldr	r2, [pc, #72]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004862:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004870:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004876:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487e:	490a      	ldr	r1, [pc, #40]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800488e:	d105      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004890:	4b05      	ldr	r3, [pc, #20]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a04      	ldr	r2, [pc, #16]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800489a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800489c:	7cbb      	ldrb	r3, [r7, #18]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000

080048ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e049      	b.n	8004952 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fe f990 	bl	8002bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f000 fd96 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e054      	b.n	8004a1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a26      	ldr	r2, [pc, #152]	@ (8004a2c <HAL_TIM_Base_Start_IT+0xd0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d022      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x80>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499e:	d01d      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x80>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a22      	ldr	r2, [pc, #136]	@ (8004a30 <HAL_TIM_Base_Start_IT+0xd4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d018      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x80>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a21      	ldr	r2, [pc, #132]	@ (8004a34 <HAL_TIM_Base_Start_IT+0xd8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <HAL_TIM_Base_Start_IT+0xdc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00e      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x80>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a3c <HAL_TIM_Base_Start_IT+0xe0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d009      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x80>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a40 <HAL_TIM_Base_Start_IT+0xe4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x80>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a44 <HAL_TIM_Base_Start_IT+0xe8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d115      	bne.n	8004a08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	4b19      	ldr	r3, [pc, #100]	@ (8004a48 <HAL_TIM_Base_Start_IT+0xec>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d015      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0xbe>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f4:	d011      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	e008      	b.n	8004a1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e000      	b.n	8004a1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40013400 	.word	0x40013400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40015000 	.word	0x40015000
 8004a48:	00010007 	.word	0x00010007

08004a4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e049      	b.n	8004af2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f841 	bl	8004afa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f000 fcc6 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_TIM_PWM_Start+0x24>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e03c      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d109      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x3e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e02f      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d109      	bne.n	8004b68 <HAL_TIM_PWM_Start+0x58>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e022      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b0c      	cmp	r3, #12
 8004b6c:	d109      	bne.n	8004b82 <HAL_TIM_PWM_Start+0x72>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	e015      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d109      	bne.n	8004b9c <HAL_TIM_PWM_Start+0x8c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e008      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0a6      	b.n	8004d04 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0xb6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bc4:	e023      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0xc6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd4:	e01b      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0xd6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004be4:	e013      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0xe6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bf4:	e00b      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xf6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c04:	e003      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2201      	movs	r2, #1
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 f87a 	bl	8005d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a3a      	ldr	r2, [pc, #232]	@ (8004d0c <HAL_TIM_PWM_Start+0x1fc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d018      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x148>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a39      	ldr	r2, [pc, #228]	@ (8004d10 <HAL_TIM_PWM_Start+0x200>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x148>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a37      	ldr	r2, [pc, #220]	@ (8004d14 <HAL_TIM_PWM_Start+0x204>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00e      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x148>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a36      	ldr	r2, [pc, #216]	@ (8004d18 <HAL_TIM_PWM_Start+0x208>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d009      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x148>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a34      	ldr	r2, [pc, #208]	@ (8004d1c <HAL_TIM_PWM_Start+0x20c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x148>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a33      	ldr	r2, [pc, #204]	@ (8004d20 <HAL_TIM_PWM_Start+0x210>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_TIM_PWM_Start+0x14c>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_TIM_PWM_Start+0x14e>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a25      	ldr	r2, [pc, #148]	@ (8004d0c <HAL_TIM_PWM_Start+0x1fc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x1b2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c84:	d01d      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x1b2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a26      	ldr	r2, [pc, #152]	@ (8004d24 <HAL_TIM_PWM_Start+0x214>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x1b2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a24      	ldr	r2, [pc, #144]	@ (8004d28 <HAL_TIM_PWM_Start+0x218>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x1b2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a23      	ldr	r2, [pc, #140]	@ (8004d2c <HAL_TIM_PWM_Start+0x21c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x1b2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a19      	ldr	r2, [pc, #100]	@ (8004d10 <HAL_TIM_PWM_Start+0x200>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x1b2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a18      	ldr	r2, [pc, #96]	@ (8004d14 <HAL_TIM_PWM_Start+0x204>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x1b2>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a18      	ldr	r2, [pc, #96]	@ (8004d20 <HAL_TIM_PWM_Start+0x210>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d115      	bne.n	8004cee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b19      	ldr	r3, [pc, #100]	@ (8004d30 <HAL_TIM_PWM_Start+0x220>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b06      	cmp	r3, #6
 8004cd2:	d015      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x1f0>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cda:	d011      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	e008      	b.n	8004d00 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e000      	b.n	8004d02 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40013400 	.word	0x40013400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800
 8004d20:	40015000 	.word	0x40015000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	00010007 	.word	0x00010007

08004d34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e097      	b.n	8004e78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fd fe73 	bl	8002a48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004d78:	f023 0307 	bic.w	r3, r3, #7
 8004d7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f000 fb47 	bl	800541c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004dd4:	f023 030c 	bic.w	r3, r3, #12
 8004dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004de0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	4313      	orrs	r3, r2
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	011a      	lsls	r2, r3, #4
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	031b      	lsls	r3, r3, #12
 8004e04:	4313      	orrs	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	4313      	orrs	r3, r2
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ea0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ea8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eb6:	7b7b      	ldrb	r3, [r7, #13]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e089      	b.n	8004fd4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ed0:	e031      	b.n	8004f36 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d110      	bne.n	8004efa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d102      	bne.n	8004ee4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ede:	7b3b      	ldrb	r3, [r7, #12]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d001      	beq.n	8004ee8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e075      	b.n	8004fd4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ef8:	e01d      	b.n	8004f36 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d108      	bne.n	8004f12 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f00:	7bbb      	ldrb	r3, [r7, #14]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f06:	7b7b      	ldrb	r3, [r7, #13]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d102      	bne.n	8004f12 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f0c:	7b3b      	ldrb	r3, [r7, #12]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d001      	beq.n	8004f16 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e05e      	b.n	8004fd4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d010      	beq.n	8004f64 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004f42:	e01f      	b.n	8004f84 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fedf 	bl	8005d10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0202 	orr.w	r2, r2, #2
 8004f60:	60da      	str	r2, [r3, #12]
      break;
 8004f62:	e02e      	b.n	8004fc2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fecf 	bl	8005d10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0204 	orr.w	r2, r2, #4
 8004f80:	60da      	str	r2, [r3, #12]
      break;
 8004f82:	e01e      	b.n	8004fc2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 febf 	bl	8005d10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	2104      	movs	r1, #4
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 feb8 	bl	8005d10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0202 	orr.w	r2, r2, #2
 8004fae:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0204 	orr.w	r2, r2, #4
 8004fbe:	60da      	str	r2, [r3, #12]
      break;
 8004fc0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0ff      	b.n	80051fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b14      	cmp	r3, #20
 8005006:	f200 80f0 	bhi.w	80051ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800500a:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005065 	.word	0x08005065
 8005014:	080051eb 	.word	0x080051eb
 8005018:	080051eb 	.word	0x080051eb
 800501c:	080051eb 	.word	0x080051eb
 8005020:	080050a5 	.word	0x080050a5
 8005024:	080051eb 	.word	0x080051eb
 8005028:	080051eb 	.word	0x080051eb
 800502c:	080051eb 	.word	0x080051eb
 8005030:	080050e7 	.word	0x080050e7
 8005034:	080051eb 	.word	0x080051eb
 8005038:	080051eb 	.word	0x080051eb
 800503c:	080051eb 	.word	0x080051eb
 8005040:	08005127 	.word	0x08005127
 8005044:	080051eb 	.word	0x080051eb
 8005048:	080051eb 	.word	0x080051eb
 800504c:	080051eb 	.word	0x080051eb
 8005050:	08005169 	.word	0x08005169
 8005054:	080051eb 	.word	0x080051eb
 8005058:	080051eb 	.word	0x080051eb
 800505c:	080051eb 	.word	0x080051eb
 8005060:	080051a9 	.word	0x080051a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fa8a 	bl	8005584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0208 	orr.w	r2, r2, #8
 800507e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0204 	bic.w	r2, r2, #4
 800508e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6999      	ldr	r1, [r3, #24]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	619a      	str	r2, [r3, #24]
      break;
 80050a2:	e0a5      	b.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fb04 	bl	80056b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6999      	ldr	r1, [r3, #24]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	619a      	str	r2, [r3, #24]
      break;
 80050e4:	e084      	b.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fb77 	bl	80057e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0208 	orr.w	r2, r2, #8
 8005100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0204 	bic.w	r2, r2, #4
 8005110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69d9      	ldr	r1, [r3, #28]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	61da      	str	r2, [r3, #28]
      break;
 8005124:	e064      	b.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fbe9 	bl	8005904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	021a      	lsls	r2, r3, #8
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	61da      	str	r2, [r3, #28]
      break;
 8005166:	e043      	b.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fc5c 	bl	8005a2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80051a6:	e023      	b.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fca6 	bl	8005b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80051e8:	e002      	b.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
      break;
 80051ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop

08005204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIM_ConfigClockSource+0x1c>
 800521c:	2302      	movs	r3, #2
 800521e:	e0ee      	b.n	80053fe <HAL_TIM_ConfigClockSource+0x1fa>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800523e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800524a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a6b      	ldr	r2, [pc, #428]	@ (8005408 <HAL_TIM_ConfigClockSource+0x204>)
 800525a:	4293      	cmp	r3, r2
 800525c:	f000 80b9 	beq.w	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005260:	4a69      	ldr	r2, [pc, #420]	@ (8005408 <HAL_TIM_ConfigClockSource+0x204>)
 8005262:	4293      	cmp	r3, r2
 8005264:	f200 80be 	bhi.w	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005268:	4a68      	ldr	r2, [pc, #416]	@ (800540c <HAL_TIM_ConfigClockSource+0x208>)
 800526a:	4293      	cmp	r3, r2
 800526c:	f000 80b1 	beq.w	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005270:	4a66      	ldr	r2, [pc, #408]	@ (800540c <HAL_TIM_ConfigClockSource+0x208>)
 8005272:	4293      	cmp	r3, r2
 8005274:	f200 80b6 	bhi.w	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005278:	4a65      	ldr	r2, [pc, #404]	@ (8005410 <HAL_TIM_ConfigClockSource+0x20c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	f000 80a9 	beq.w	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005280:	4a63      	ldr	r2, [pc, #396]	@ (8005410 <HAL_TIM_ConfigClockSource+0x20c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	f200 80ae 	bhi.w	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005288:	4a62      	ldr	r2, [pc, #392]	@ (8005414 <HAL_TIM_ConfigClockSource+0x210>)
 800528a:	4293      	cmp	r3, r2
 800528c:	f000 80a1 	beq.w	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005290:	4a60      	ldr	r2, [pc, #384]	@ (8005414 <HAL_TIM_ConfigClockSource+0x210>)
 8005292:	4293      	cmp	r3, r2
 8005294:	f200 80a6 	bhi.w	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005298:	4a5f      	ldr	r2, [pc, #380]	@ (8005418 <HAL_TIM_ConfigClockSource+0x214>)
 800529a:	4293      	cmp	r3, r2
 800529c:	f000 8099 	beq.w	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 80052a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005418 <HAL_TIM_ConfigClockSource+0x214>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	f200 809e 	bhi.w	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80052a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052ac:	f000 8091 	beq.w	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 80052b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052b4:	f200 8096 	bhi.w	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80052b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052bc:	f000 8089 	beq.w	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 80052c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c4:	f200 808e 	bhi.w	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80052c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052cc:	d03e      	beq.n	800534c <HAL_TIM_ConfigClockSource+0x148>
 80052ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052d2:	f200 8087 	bhi.w	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80052d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052da:	f000 8086 	beq.w	80053ea <HAL_TIM_ConfigClockSource+0x1e6>
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e2:	d87f      	bhi.n	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80052e4:	2b70      	cmp	r3, #112	@ 0x70
 80052e6:	d01a      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x11a>
 80052e8:	2b70      	cmp	r3, #112	@ 0x70
 80052ea:	d87b      	bhi.n	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80052ec:	2b60      	cmp	r3, #96	@ 0x60
 80052ee:	d050      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0x18e>
 80052f0:	2b60      	cmp	r3, #96	@ 0x60
 80052f2:	d877      	bhi.n	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80052f4:	2b50      	cmp	r3, #80	@ 0x50
 80052f6:	d03c      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x16e>
 80052f8:	2b50      	cmp	r3, #80	@ 0x50
 80052fa:	d873      	bhi.n	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80052fc:	2b40      	cmp	r3, #64	@ 0x40
 80052fe:	d058      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005300:	2b40      	cmp	r3, #64	@ 0x40
 8005302:	d86f      	bhi.n	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005304:	2b30      	cmp	r3, #48	@ 0x30
 8005306:	d064      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005308:	2b30      	cmp	r3, #48	@ 0x30
 800530a:	d86b      	bhi.n	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 800530c:	2b20      	cmp	r3, #32
 800530e:	d060      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005310:	2b20      	cmp	r3, #32
 8005312:	d867      	bhi.n	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d05c      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005318:	2b10      	cmp	r3, #16
 800531a:	d05a      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x1ce>
 800531c:	e062      	b.n	80053e4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800532e:	f000 fccf 	bl	8005cd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	609a      	str	r2, [r3, #8]
      break;
 800534a:	e04f      	b.n	80053ec <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800535c:	f000 fcb8 	bl	8005cd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800536e:	609a      	str	r2, [r3, #8]
      break;
 8005370:	e03c      	b.n	80053ec <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537e:	461a      	mov	r2, r3
 8005380:	f000 fc2a 	bl	8005bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2150      	movs	r1, #80	@ 0x50
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fc83 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 8005390:	e02c      	b.n	80053ec <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800539e:	461a      	mov	r2, r3
 80053a0:	f000 fc49 	bl	8005c36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2160      	movs	r1, #96	@ 0x60
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fc73 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 80053b0:	e01c      	b.n	80053ec <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053be:	461a      	mov	r2, r3
 80053c0:	f000 fc0a 	bl	8005bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2140      	movs	r1, #64	@ 0x40
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fc63 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 80053d0:	e00c      	b.n	80053ec <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	4610      	mov	r0, r2
 80053de:	f000 fc5a 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 80053e2:	e003      	b.n	80053ec <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
      break;
 80053e8:	e000      	b.n	80053ec <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80053ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	00100070 	.word	0x00100070
 800540c:	00100050 	.word	0x00100050
 8005410:	00100040 	.word	0x00100040
 8005414:	00100030 	.word	0x00100030
 8005418:	00100020 	.word	0x00100020

0800541c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a4c      	ldr	r2, [pc, #304]	@ (8005560 <TIM_Base_SetConfig+0x144>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d017      	beq.n	8005464 <TIM_Base_SetConfig+0x48>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543a:	d013      	beq.n	8005464 <TIM_Base_SetConfig+0x48>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a49      	ldr	r2, [pc, #292]	@ (8005564 <TIM_Base_SetConfig+0x148>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00f      	beq.n	8005464 <TIM_Base_SetConfig+0x48>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a48      	ldr	r2, [pc, #288]	@ (8005568 <TIM_Base_SetConfig+0x14c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00b      	beq.n	8005464 <TIM_Base_SetConfig+0x48>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a47      	ldr	r2, [pc, #284]	@ (800556c <TIM_Base_SetConfig+0x150>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_Base_SetConfig+0x48>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a46      	ldr	r2, [pc, #280]	@ (8005570 <TIM_Base_SetConfig+0x154>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0x48>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a45      	ldr	r2, [pc, #276]	@ (8005574 <TIM_Base_SetConfig+0x158>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d108      	bne.n	8005476 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a39      	ldr	r2, [pc, #228]	@ (8005560 <TIM_Base_SetConfig+0x144>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d023      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005484:	d01f      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a36      	ldr	r2, [pc, #216]	@ (8005564 <TIM_Base_SetConfig+0x148>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01b      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a35      	ldr	r2, [pc, #212]	@ (8005568 <TIM_Base_SetConfig+0x14c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d017      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a34      	ldr	r2, [pc, #208]	@ (800556c <TIM_Base_SetConfig+0x150>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a33      	ldr	r2, [pc, #204]	@ (8005570 <TIM_Base_SetConfig+0x154>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a33      	ldr	r2, [pc, #204]	@ (8005578 <TIM_Base_SetConfig+0x15c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a32      	ldr	r2, [pc, #200]	@ (800557c <TIM_Base_SetConfig+0x160>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a31      	ldr	r2, [pc, #196]	@ (8005580 <TIM_Base_SetConfig+0x164>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_Base_SetConfig+0xaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005574 <TIM_Base_SetConfig+0x158>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a18      	ldr	r2, [pc, #96]	@ (8005560 <TIM_Base_SetConfig+0x144>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <TIM_Base_SetConfig+0x110>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a1a      	ldr	r2, [pc, #104]	@ (8005570 <TIM_Base_SetConfig+0x154>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00f      	beq.n	800552c <TIM_Base_SetConfig+0x110>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a1a      	ldr	r2, [pc, #104]	@ (8005578 <TIM_Base_SetConfig+0x15c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_Base_SetConfig+0x110>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a19      	ldr	r2, [pc, #100]	@ (800557c <TIM_Base_SetConfig+0x160>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0x110>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a18      	ldr	r2, [pc, #96]	@ (8005580 <TIM_Base_SetConfig+0x164>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0x110>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a13      	ldr	r2, [pc, #76]	@ (8005574 <TIM_Base_SetConfig+0x158>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d103      	bne.n	8005534 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f023 0201 	bic.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]
  }
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40015000 	.word	0x40015000
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800

08005584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f023 0201 	bic.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 0302 	bic.w	r3, r3, #2
 80055d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a30      	ldr	r2, [pc, #192]	@ (80056a0 <TIM_OC1_SetConfig+0x11c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_OC1_SetConfig+0x88>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a2f      	ldr	r2, [pc, #188]	@ (80056a4 <TIM_OC1_SetConfig+0x120>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC1_SetConfig+0x88>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a2e      	ldr	r2, [pc, #184]	@ (80056a8 <TIM_OC1_SetConfig+0x124>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC1_SetConfig+0x88>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a2d      	ldr	r2, [pc, #180]	@ (80056ac <TIM_OC1_SetConfig+0x128>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC1_SetConfig+0x88>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a2c      	ldr	r2, [pc, #176]	@ (80056b0 <TIM_OC1_SetConfig+0x12c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC1_SetConfig+0x88>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a2b      	ldr	r2, [pc, #172]	@ (80056b4 <TIM_OC1_SetConfig+0x130>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d10c      	bne.n	8005626 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0308 	bic.w	r3, r3, #8
 8005612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 0304 	bic.w	r3, r3, #4
 8005624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <TIM_OC1_SetConfig+0x11c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <TIM_OC1_SetConfig+0xd2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1c      	ldr	r2, [pc, #112]	@ (80056a4 <TIM_OC1_SetConfig+0x120>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00f      	beq.n	8005656 <TIM_OC1_SetConfig+0xd2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1b      	ldr	r2, [pc, #108]	@ (80056a8 <TIM_OC1_SetConfig+0x124>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00b      	beq.n	8005656 <TIM_OC1_SetConfig+0xd2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1a      	ldr	r2, [pc, #104]	@ (80056ac <TIM_OC1_SetConfig+0x128>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <TIM_OC1_SetConfig+0xd2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a19      	ldr	r2, [pc, #100]	@ (80056b0 <TIM_OC1_SetConfig+0x12c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_OC1_SetConfig+0xd2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a18      	ldr	r2, [pc, #96]	@ (80056b4 <TIM_OC1_SetConfig+0x130>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d111      	bne.n	800567a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800565c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40013400 	.word	0x40013400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800
 80056b4:	40015000 	.word	0x40015000

080056b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0210 	bic.w	r2, r3, #16
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0320 	bic.w	r3, r3, #32
 8005706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a2c      	ldr	r2, [pc, #176]	@ (80057c8 <TIM_OC2_SetConfig+0x110>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_OC2_SetConfig+0x74>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a2b      	ldr	r2, [pc, #172]	@ (80057cc <TIM_OC2_SetConfig+0x114>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC2_SetConfig+0x74>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a2a      	ldr	r2, [pc, #168]	@ (80057d0 <TIM_OC2_SetConfig+0x118>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d10d      	bne.n	8005748 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a1f      	ldr	r2, [pc, #124]	@ (80057c8 <TIM_OC2_SetConfig+0x110>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <TIM_OC2_SetConfig+0xc0>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a1e      	ldr	r2, [pc, #120]	@ (80057cc <TIM_OC2_SetConfig+0x114>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <TIM_OC2_SetConfig+0xc0>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a1e      	ldr	r2, [pc, #120]	@ (80057d4 <TIM_OC2_SetConfig+0x11c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00b      	beq.n	8005778 <TIM_OC2_SetConfig+0xc0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a1d      	ldr	r2, [pc, #116]	@ (80057d8 <TIM_OC2_SetConfig+0x120>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_OC2_SetConfig+0xc0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a1c      	ldr	r2, [pc, #112]	@ (80057dc <TIM_OC2_SetConfig+0x124>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_OC2_SetConfig+0xc0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a17      	ldr	r2, [pc, #92]	@ (80057d0 <TIM_OC2_SetConfig+0x118>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d113      	bne.n	80057a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800577e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40015000 	.word	0x40015000
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800

080057e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800580e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800582c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2b      	ldr	r2, [pc, #172]	@ (80058ec <TIM_OC3_SetConfig+0x10c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <TIM_OC3_SetConfig+0x72>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2a      	ldr	r2, [pc, #168]	@ (80058f0 <TIM_OC3_SetConfig+0x110>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_OC3_SetConfig+0x72>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a29      	ldr	r2, [pc, #164]	@ (80058f4 <TIM_OC3_SetConfig+0x114>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10d      	bne.n	800586e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800586c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1e      	ldr	r2, [pc, #120]	@ (80058ec <TIM_OC3_SetConfig+0x10c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <TIM_OC3_SetConfig+0xbe>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1d      	ldr	r2, [pc, #116]	@ (80058f0 <TIM_OC3_SetConfig+0x110>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00f      	beq.n	800589e <TIM_OC3_SetConfig+0xbe>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <TIM_OC3_SetConfig+0x118>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00b      	beq.n	800589e <TIM_OC3_SetConfig+0xbe>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <TIM_OC3_SetConfig+0x11c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d007      	beq.n	800589e <TIM_OC3_SetConfig+0xbe>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1b      	ldr	r2, [pc, #108]	@ (8005900 <TIM_OC3_SetConfig+0x120>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_OC3_SetConfig+0xbe>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a16      	ldr	r2, [pc, #88]	@ (80058f4 <TIM_OC3_SetConfig+0x114>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d113      	bne.n	80058c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400
 80058f4:	40015000 	.word	0x40015000
 80058f8:	40014000 	.word	0x40014000
 80058fc:	40014400 	.word	0x40014400
 8005900:	40014800 	.word	0x40014800

08005904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800593e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	031b      	lsls	r3, r3, #12
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a2c      	ldr	r2, [pc, #176]	@ (8005a14 <TIM_OC4_SetConfig+0x110>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_OC4_SetConfig+0x74>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a18 <TIM_OC4_SetConfig+0x114>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC4_SetConfig+0x74>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2a      	ldr	r2, [pc, #168]	@ (8005a1c <TIM_OC4_SetConfig+0x118>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10d      	bne.n	8005994 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800597e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	031b      	lsls	r3, r3, #12
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1f      	ldr	r2, [pc, #124]	@ (8005a14 <TIM_OC4_SetConfig+0x110>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <TIM_OC4_SetConfig+0xc0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a18 <TIM_OC4_SetConfig+0x114>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00f      	beq.n	80059c4 <TIM_OC4_SetConfig+0xc0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a20 <TIM_OC4_SetConfig+0x11c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <TIM_OC4_SetConfig+0xc0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <TIM_OC4_SetConfig+0x120>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_OC4_SetConfig+0xc0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <TIM_OC4_SetConfig+0x124>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_OC4_SetConfig+0xc0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a17      	ldr	r2, [pc, #92]	@ (8005a1c <TIM_OC4_SetConfig+0x118>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d113      	bne.n	80059ec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40015000 	.word	0x40015000
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <TIM_OC5_SetConfig+0xbc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <TIM_OC5_SetConfig+0x82>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <TIM_OC5_SetConfig+0xc0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00f      	beq.n	8005aae <TIM_OC5_SetConfig+0x82>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a17      	ldr	r2, [pc, #92]	@ (8005af0 <TIM_OC5_SetConfig+0xc4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00b      	beq.n	8005aae <TIM_OC5_SetConfig+0x82>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <TIM_OC5_SetConfig+0xc8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d007      	beq.n	8005aae <TIM_OC5_SetConfig+0x82>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	@ (8005af8 <TIM_OC5_SetConfig+0xcc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d003      	beq.n	8005aae <TIM_OC5_SetConfig+0x82>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a14      	ldr	r2, [pc, #80]	@ (8005afc <TIM_OC5_SetConfig+0xd0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d109      	bne.n	8005ac2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	621a      	str	r2, [r3, #32]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800
 8005afc:	40015000 	.word	0x40015000

08005b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc0 <TIM_OC6_SetConfig+0xc0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <TIM_OC6_SetConfig+0x84>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a19      	ldr	r2, [pc, #100]	@ (8005bc4 <TIM_OC6_SetConfig+0xc4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00f      	beq.n	8005b84 <TIM_OC6_SetConfig+0x84>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <TIM_OC6_SetConfig+0xc8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_OC6_SetConfig+0x84>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <TIM_OC6_SetConfig+0xcc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_OC6_SetConfig+0x84>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <TIM_OC6_SetConfig+0xd0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_OC6_SetConfig+0x84>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a15      	ldr	r2, [pc, #84]	@ (8005bd4 <TIM_OC6_SetConfig+0xd4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d109      	bne.n	8005b98 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	029b      	lsls	r3, r3, #10
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40013400 	.word	0x40013400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800
 8005bd4:	40015000 	.word	0x40015000

08005bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0201 	bic.w	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f023 030a 	bic.w	r3, r3, #10
 8005c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b087      	sub	sp, #28
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f023 0210 	bic.w	r2, r3, #16
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	031b      	lsls	r3, r3, #12
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f043 0307 	orr.w	r3, r3, #7
 8005cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	609a      	str	r2, [r3, #8]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	021a      	lsls	r2, r3, #8
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	609a      	str	r2, [r3, #8]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2201      	movs	r2, #1
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a1a      	ldr	r2, [r3, #32]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	401a      	ands	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1a      	ldr	r2, [r3, #32]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e074      	b.n	8005e5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a34      	ldr	r2, [pc, #208]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a33      	ldr	r2, [pc, #204]	@ (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a31      	ldr	r2, [pc, #196]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005db8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a21      	ldr	r2, [pc, #132]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d022      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df4:	d01d      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d018      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1d      	ldr	r2, [pc, #116]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00e      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a15      	ldr	r2, [pc, #84]	@ (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d009      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a11      	ldr	r2, [pc, #68]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d10c      	bne.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40013400 	.word	0x40013400
 8005e74:	40015000 	.word	0x40015000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40014000 	.word	0x40014000

08005e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e042      	b.n	8005f20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7fc ffc9 	bl	8002e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2224      	movs	r2, #36	@ 0x24
 8005eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fbec 	bl	80066b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f8ed 	bl	80060b8 <UART_SetConfig>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e01b      	b.n	8005f20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fc6b 	bl	80067f4 <UART_CheckIdleState>
 8005f1e:	4603      	mov	r3, r0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	@ 0x28
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	f040 80b5 	bne.w	80060ae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_UART_Receive+0x28>
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0ad      	b.n	80060b0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2222      	movs	r2, #34	@ 0x22
 8005f60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6a:	f7fd f891 	bl	8003090 <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	88fa      	ldrh	r2, [r7, #6]
 8005f74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f88:	d10e      	bne.n	8005fa8 <HAL_UART_Receive+0x80>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <HAL_UART_Receive+0x76>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005f98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f9c:	e02d      	b.n	8005ffa <HAL_UART_Receive+0xd2>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	22ff      	movs	r2, #255	@ 0xff
 8005fa2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005fa6:	e028      	b.n	8005ffa <HAL_UART_Receive+0xd2>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10d      	bne.n	8005fcc <HAL_UART_Receive+0xa4>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_UART_Receive+0x9a>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	22ff      	movs	r2, #255	@ 0xff
 8005fbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005fc0:	e01b      	b.n	8005ffa <HAL_UART_Receive+0xd2>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	227f      	movs	r2, #127	@ 0x7f
 8005fc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005fca:	e016      	b.n	8005ffa <HAL_UART_Receive+0xd2>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fd4:	d10d      	bne.n	8005ff2 <HAL_UART_Receive+0xca>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <HAL_UART_Receive+0xc0>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	227f      	movs	r2, #127	@ 0x7f
 8005fe2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005fe6:	e008      	b.n	8005ffa <HAL_UART_Receive+0xd2>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	223f      	movs	r2, #63	@ 0x3f
 8005fec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ff0:	e003      	b.n	8005ffa <HAL_UART_Receive+0xd2>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006000:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800600a:	d108      	bne.n	800601e <HAL_UART_Receive+0xf6>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	e003      	b.n	8006026 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006026:	e036      	b.n	8006096 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	2120      	movs	r1, #32
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fc88 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e032      	b.n	80060b0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10c      	bne.n	800606a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	b29a      	uxth	r2, r3
 8006058:	8a7b      	ldrh	r3, [r7, #18]
 800605a:	4013      	ands	r3, r2
 800605c:	b29a      	uxth	r2, r3
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	3302      	adds	r3, #2
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	e00c      	b.n	8006084 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	b2da      	uxtb	r2, r3
 8006072:	8a7b      	ldrh	r3, [r7, #18]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	4013      	ands	r3, r2
 8006078:	b2da      	uxtb	r2, r3
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3301      	adds	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1c2      	bne.n	8006028 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e000      	b.n	80060b0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060bc:	b08c      	sub	sp, #48	@ 0x30
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	431a      	orrs	r2, r3
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	4313      	orrs	r3, r2
 80060de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4baa      	ldr	r3, [pc, #680]	@ (8006390 <UART_SetConfig+0x2d8>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060f0:	430b      	orrs	r3, r1
 80060f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a9f      	ldr	r2, [pc, #636]	@ (8006394 <UART_SetConfig+0x2dc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d004      	beq.n	8006124 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006120:	4313      	orrs	r3, r2
 8006122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800612e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	6812      	ldr	r2, [r2, #0]
 8006136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006138:	430b      	orrs	r3, r1
 800613a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	f023 010f 	bic.w	r1, r3, #15
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a90      	ldr	r2, [pc, #576]	@ (8006398 <UART_SetConfig+0x2e0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d125      	bne.n	80061a8 <UART_SetConfig+0xf0>
 800615c:	4b8f      	ldr	r3, [pc, #572]	@ (800639c <UART_SetConfig+0x2e4>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	2b03      	cmp	r3, #3
 8006168:	d81a      	bhi.n	80061a0 <UART_SetConfig+0xe8>
 800616a:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <UART_SetConfig+0xb8>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006181 	.word	0x08006181
 8006174:	08006191 	.word	0x08006191
 8006178:	08006189 	.word	0x08006189
 800617c:	08006199 	.word	0x08006199
 8006180:	2301      	movs	r3, #1
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006186:	e116      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006188:	2302      	movs	r3, #2
 800618a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618e:	e112      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006190:	2304      	movs	r3, #4
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006196:	e10e      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006198:	2308      	movs	r3, #8
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619e:	e10a      	b.n	80063b6 <UART_SetConfig+0x2fe>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a6:	e106      	b.n	80063b6 <UART_SetConfig+0x2fe>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a7c      	ldr	r2, [pc, #496]	@ (80063a0 <UART_SetConfig+0x2e8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d138      	bne.n	8006224 <UART_SetConfig+0x16c>
 80061b2:	4b7a      	ldr	r3, [pc, #488]	@ (800639c <UART_SetConfig+0x2e4>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	f003 030c 	and.w	r3, r3, #12
 80061bc:	2b0c      	cmp	r3, #12
 80061be:	d82d      	bhi.n	800621c <UART_SetConfig+0x164>
 80061c0:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <UART_SetConfig+0x110>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061fd 	.word	0x080061fd
 80061cc:	0800621d 	.word	0x0800621d
 80061d0:	0800621d 	.word	0x0800621d
 80061d4:	0800621d 	.word	0x0800621d
 80061d8:	0800620d 	.word	0x0800620d
 80061dc:	0800621d 	.word	0x0800621d
 80061e0:	0800621d 	.word	0x0800621d
 80061e4:	0800621d 	.word	0x0800621d
 80061e8:	08006205 	.word	0x08006205
 80061ec:	0800621d 	.word	0x0800621d
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	0800621d 	.word	0x0800621d
 80061f8:	08006215 	.word	0x08006215
 80061fc:	2300      	movs	r3, #0
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006202:	e0d8      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006204:	2302      	movs	r3, #2
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620a:	e0d4      	b.n	80063b6 <UART_SetConfig+0x2fe>
 800620c:	2304      	movs	r3, #4
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006212:	e0d0      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006214:	2308      	movs	r3, #8
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621a:	e0cc      	b.n	80063b6 <UART_SetConfig+0x2fe>
 800621c:	2310      	movs	r3, #16
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006222:	e0c8      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a5e      	ldr	r2, [pc, #376]	@ (80063a4 <UART_SetConfig+0x2ec>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d125      	bne.n	800627a <UART_SetConfig+0x1c2>
 800622e:	4b5b      	ldr	r3, [pc, #364]	@ (800639c <UART_SetConfig+0x2e4>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006234:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006238:	2b30      	cmp	r3, #48	@ 0x30
 800623a:	d016      	beq.n	800626a <UART_SetConfig+0x1b2>
 800623c:	2b30      	cmp	r3, #48	@ 0x30
 800623e:	d818      	bhi.n	8006272 <UART_SetConfig+0x1ba>
 8006240:	2b20      	cmp	r3, #32
 8006242:	d00a      	beq.n	800625a <UART_SetConfig+0x1a2>
 8006244:	2b20      	cmp	r3, #32
 8006246:	d814      	bhi.n	8006272 <UART_SetConfig+0x1ba>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <UART_SetConfig+0x19a>
 800624c:	2b10      	cmp	r3, #16
 800624e:	d008      	beq.n	8006262 <UART_SetConfig+0x1aa>
 8006250:	e00f      	b.n	8006272 <UART_SetConfig+0x1ba>
 8006252:	2300      	movs	r3, #0
 8006254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006258:	e0ad      	b.n	80063b6 <UART_SetConfig+0x2fe>
 800625a:	2302      	movs	r3, #2
 800625c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006260:	e0a9      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006262:	2304      	movs	r3, #4
 8006264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006268:	e0a5      	b.n	80063b6 <UART_SetConfig+0x2fe>
 800626a:	2308      	movs	r3, #8
 800626c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006270:	e0a1      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006272:	2310      	movs	r3, #16
 8006274:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006278:	e09d      	b.n	80063b6 <UART_SetConfig+0x2fe>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a4a      	ldr	r2, [pc, #296]	@ (80063a8 <UART_SetConfig+0x2f0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d125      	bne.n	80062d0 <UART_SetConfig+0x218>
 8006284:	4b45      	ldr	r3, [pc, #276]	@ (800639c <UART_SetConfig+0x2e4>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800628e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006290:	d016      	beq.n	80062c0 <UART_SetConfig+0x208>
 8006292:	2bc0      	cmp	r3, #192	@ 0xc0
 8006294:	d818      	bhi.n	80062c8 <UART_SetConfig+0x210>
 8006296:	2b80      	cmp	r3, #128	@ 0x80
 8006298:	d00a      	beq.n	80062b0 <UART_SetConfig+0x1f8>
 800629a:	2b80      	cmp	r3, #128	@ 0x80
 800629c:	d814      	bhi.n	80062c8 <UART_SetConfig+0x210>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <UART_SetConfig+0x1f0>
 80062a2:	2b40      	cmp	r3, #64	@ 0x40
 80062a4:	d008      	beq.n	80062b8 <UART_SetConfig+0x200>
 80062a6:	e00f      	b.n	80062c8 <UART_SetConfig+0x210>
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e082      	b.n	80063b6 <UART_SetConfig+0x2fe>
 80062b0:	2302      	movs	r3, #2
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b6:	e07e      	b.n	80063b6 <UART_SetConfig+0x2fe>
 80062b8:	2304      	movs	r3, #4
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062be:	e07a      	b.n	80063b6 <UART_SetConfig+0x2fe>
 80062c0:	2308      	movs	r3, #8
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c6:	e076      	b.n	80063b6 <UART_SetConfig+0x2fe>
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ce:	e072      	b.n	80063b6 <UART_SetConfig+0x2fe>
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a35      	ldr	r2, [pc, #212]	@ (80063ac <UART_SetConfig+0x2f4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d12a      	bne.n	8006330 <UART_SetConfig+0x278>
 80062da:	4b30      	ldr	r3, [pc, #192]	@ (800639c <UART_SetConfig+0x2e4>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e8:	d01a      	beq.n	8006320 <UART_SetConfig+0x268>
 80062ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ee:	d81b      	bhi.n	8006328 <UART_SetConfig+0x270>
 80062f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062f4:	d00c      	beq.n	8006310 <UART_SetConfig+0x258>
 80062f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062fa:	d815      	bhi.n	8006328 <UART_SetConfig+0x270>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <UART_SetConfig+0x250>
 8006300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006304:	d008      	beq.n	8006318 <UART_SetConfig+0x260>
 8006306:	e00f      	b.n	8006328 <UART_SetConfig+0x270>
 8006308:	2300      	movs	r3, #0
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630e:	e052      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006310:	2302      	movs	r3, #2
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006316:	e04e      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006318:	2304      	movs	r3, #4
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631e:	e04a      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006320:	2308      	movs	r3, #8
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006326:	e046      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006328:	2310      	movs	r3, #16
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632e:	e042      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a17      	ldr	r2, [pc, #92]	@ (8006394 <UART_SetConfig+0x2dc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d13a      	bne.n	80063b0 <UART_SetConfig+0x2f8>
 800633a:	4b18      	ldr	r3, [pc, #96]	@ (800639c <UART_SetConfig+0x2e4>)
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006340:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006348:	d01a      	beq.n	8006380 <UART_SetConfig+0x2c8>
 800634a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800634e:	d81b      	bhi.n	8006388 <UART_SetConfig+0x2d0>
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006354:	d00c      	beq.n	8006370 <UART_SetConfig+0x2b8>
 8006356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800635a:	d815      	bhi.n	8006388 <UART_SetConfig+0x2d0>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <UART_SetConfig+0x2b0>
 8006360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006364:	d008      	beq.n	8006378 <UART_SetConfig+0x2c0>
 8006366:	e00f      	b.n	8006388 <UART_SetConfig+0x2d0>
 8006368:	2300      	movs	r3, #0
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636e:	e022      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006370:	2302      	movs	r3, #2
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006376:	e01e      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006378:	2304      	movs	r3, #4
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800637e:	e01a      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006380:	2308      	movs	r3, #8
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006386:	e016      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006388:	2310      	movs	r3, #16
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800638e:	e012      	b.n	80063b6 <UART_SetConfig+0x2fe>
 8006390:	cfff69f3 	.word	0xcfff69f3
 8006394:	40008000 	.word	0x40008000
 8006398:	40013800 	.word	0x40013800
 800639c:	40021000 	.word	0x40021000
 80063a0:	40004400 	.word	0x40004400
 80063a4:	40004800 	.word	0x40004800
 80063a8:	40004c00 	.word	0x40004c00
 80063ac:	40005000 	.word	0x40005000
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4aae      	ldr	r2, [pc, #696]	@ (8006674 <UART_SetConfig+0x5bc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	f040 8097 	bne.w	80064f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d823      	bhi.n	8006412 <UART_SetConfig+0x35a>
 80063ca:	a201      	add	r2, pc, #4	@ (adr r2, 80063d0 <UART_SetConfig+0x318>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080063f5 	.word	0x080063f5
 80063d4:	08006413 	.word	0x08006413
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	08006413 	.word	0x08006413
 80063e0:	08006403 	.word	0x08006403
 80063e4:	08006413 	.word	0x08006413
 80063e8:	08006413 	.word	0x08006413
 80063ec:	08006413 	.word	0x08006413
 80063f0:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f4:	f7fd ff9a 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 80063f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063fa:	e010      	b.n	800641e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b9e      	ldr	r3, [pc, #632]	@ (8006678 <UART_SetConfig+0x5c0>)
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006400:	e00d      	b.n	800641e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fd ff25 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 8006406:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006408:	e009      	b.n	800641e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006410:	e005      	b.n	800641e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800641c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8130 	beq.w	8006686 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	4a94      	ldr	r2, [pc, #592]	@ (800667c <UART_SetConfig+0x5c4>)
 800642c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006430:	461a      	mov	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	fbb3 f3f2 	udiv	r3, r3, r2
 8006438:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	4413      	add	r3, r2
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	429a      	cmp	r2, r3
 8006448:	d305      	bcc.n	8006456 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	429a      	cmp	r2, r3
 8006454:	d903      	bls.n	800645e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800645c:	e113      	b.n	8006686 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	2200      	movs	r2, #0
 8006462:	60bb      	str	r3, [r7, #8]
 8006464:	60fa      	str	r2, [r7, #12]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	4a84      	ldr	r2, [pc, #528]	@ (800667c <UART_SetConfig+0x5c4>)
 800646c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006470:	b29b      	uxth	r3, r3
 8006472:	2200      	movs	r2, #0
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006480:	f7fa fb6c 	bl	8000b5c <__aeabi_uldivmod>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4610      	mov	r0, r2
 800648a:	4619      	mov	r1, r3
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	020b      	lsls	r3, r1, #8
 8006496:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800649a:	0202      	lsls	r2, r0, #8
 800649c:	6979      	ldr	r1, [r7, #20]
 800649e:	6849      	ldr	r1, [r1, #4]
 80064a0:	0849      	lsrs	r1, r1, #1
 80064a2:	2000      	movs	r0, #0
 80064a4:	460c      	mov	r4, r1
 80064a6:	4605      	mov	r5, r0
 80064a8:	eb12 0804 	adds.w	r8, r2, r4
 80064ac:	eb43 0905 	adc.w	r9, r3, r5
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	469a      	mov	sl, r3
 80064b8:	4693      	mov	fp, r2
 80064ba:	4652      	mov	r2, sl
 80064bc:	465b      	mov	r3, fp
 80064be:	4640      	mov	r0, r8
 80064c0:	4649      	mov	r1, r9
 80064c2:	f7fa fb4b 	bl	8000b5c <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4613      	mov	r3, r2
 80064cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d4:	d308      	bcc.n	80064e8 <UART_SetConfig+0x430>
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064dc:	d204      	bcs.n	80064e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	60da      	str	r2, [r3, #12]
 80064e6:	e0ce      	b.n	8006686 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064ee:	e0ca      	b.n	8006686 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064f8:	d166      	bne.n	80065c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80064fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d827      	bhi.n	8006552 <UART_SetConfig+0x49a>
 8006502:	a201      	add	r2, pc, #4	@ (adr r2, 8006508 <UART_SetConfig+0x450>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006535 	.word	0x08006535
 8006510:	0800653d 	.word	0x0800653d
 8006514:	08006553 	.word	0x08006553
 8006518:	08006543 	.word	0x08006543
 800651c:	08006553 	.word	0x08006553
 8006520:	08006553 	.word	0x08006553
 8006524:	08006553 	.word	0x08006553
 8006528:	0800654b 	.word	0x0800654b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800652c:	f7fd fefe 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8006530:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006532:	e014      	b.n	800655e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006534:	f7fd ff10 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8006538:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800653a:	e010      	b.n	800655e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800653c:	4b4e      	ldr	r3, [pc, #312]	@ (8006678 <UART_SetConfig+0x5c0>)
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006540:	e00d      	b.n	800655e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006542:	f7fd fe85 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 8006546:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006548:	e009      	b.n	800655e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006550:	e005      	b.n	800655e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800655c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8090 	beq.w	8006686 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	4a44      	ldr	r2, [pc, #272]	@ (800667c <UART_SetConfig+0x5c4>)
 800656c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006570:	461a      	mov	r2, r3
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	fbb3 f3f2 	udiv	r3, r3, r2
 8006578:	005a      	lsls	r2, r3, #1
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	441a      	add	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	fbb2 f3f3 	udiv	r3, r2, r3
 800658a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	2b0f      	cmp	r3, #15
 8006590:	d916      	bls.n	80065c0 <UART_SetConfig+0x508>
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006598:	d212      	bcs.n	80065c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	b29b      	uxth	r3, r3
 800659e:	f023 030f 	bic.w	r3, r3, #15
 80065a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	8bfb      	ldrh	r3, [r7, #30]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	8bfa      	ldrh	r2, [r7, #30]
 80065bc:	60da      	str	r2, [r3, #12]
 80065be:	e062      	b.n	8006686 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065c6:	e05e      	b.n	8006686 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d828      	bhi.n	8006622 <UART_SetConfig+0x56a>
 80065d0:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <UART_SetConfig+0x520>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	08006623 	.word	0x08006623
 80065e8:	08006613 	.word	0x08006613
 80065ec:	08006623 	.word	0x08006623
 80065f0:	08006623 	.word	0x08006623
 80065f4:	08006623 	.word	0x08006623
 80065f8:	0800661b 	.word	0x0800661b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065fc:	f7fd fe96 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8006600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006602:	e014      	b.n	800662e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7fd fea8 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8006608:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800660a:	e010      	b.n	800662e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800660c:	4b1a      	ldr	r3, [pc, #104]	@ (8006678 <UART_SetConfig+0x5c0>)
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006610:	e00d      	b.n	800662e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006612:	f7fd fe1d 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 8006616:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006618:	e009      	b.n	800662e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006620:	e005      	b.n	800662e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800662c:	bf00      	nop
    }

    if (pclk != 0U)
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d028      	beq.n	8006686 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006638:	4a10      	ldr	r2, [pc, #64]	@ (800667c <UART_SetConfig+0x5c4>)
 800663a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663e:	461a      	mov	r2, r3
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	fbb3 f2f2 	udiv	r2, r3, r2
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	441a      	add	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	fbb2 f3f3 	udiv	r3, r2, r3
 8006656:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	2b0f      	cmp	r3, #15
 800665c:	d910      	bls.n	8006680 <UART_SetConfig+0x5c8>
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d20c      	bcs.n	8006680 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	b29a      	uxth	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60da      	str	r2, [r3, #12]
 8006670:	e009      	b.n	8006686 <UART_SetConfig+0x5ce>
 8006672:	bf00      	nop
 8006674:	40008000 	.word	0x40008000
 8006678:	00f42400 	.word	0x00f42400
 800667c:	080080d4 	.word	0x080080d4
      }
      else
      {
        ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2201      	movs	r2, #1
 800668a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2201      	movs	r2, #1
 8006692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2200      	movs	r2, #0
 800669a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2200      	movs	r2, #0
 80066a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3730      	adds	r7, #48	@ 0x30
 80066aa:	46bd      	mov	sp, r7
 80066ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080066b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ae:	d10a      	bne.n	80067c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b098      	sub	sp, #96	@ 0x60
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006804:	f7fc fc44 	bl	8003090 <HAL_GetTick>
 8006808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b08      	cmp	r3, #8
 8006816:	d12f      	bne.n	8006878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006820:	2200      	movs	r2, #0
 8006822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f88e 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d022      	beq.n	8006878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006846:	653b      	str	r3, [r7, #80]	@ 0x50
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006850:	647b      	str	r3, [r7, #68]	@ 0x44
 8006852:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800685e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e6      	bne.n	8006832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e063      	b.n	8006940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b04      	cmp	r3, #4
 8006884:	d149      	bne.n	800691a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006886:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800688e:	2200      	movs	r2, #0
 8006890:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f857 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d03c      	beq.n	800691a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	623b      	str	r3, [r7, #32]
   return(result);
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068be:	633b      	str	r3, [r7, #48]	@ 0x30
 80068c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e6      	bne.n	80068a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	69b9      	ldr	r1, [r7, #24]
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e012      	b.n	8006940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3758      	adds	r7, #88	@ 0x58
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	e04f      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006960:	d04b      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fc fb95 	bl	8003090 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <UART_WaitOnFlagUntilTimeout+0x30>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e04e      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d037      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b80      	cmp	r3, #128	@ 0x80
 800698e:	d034      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b40      	cmp	r3, #64	@ 0x40
 8006994:	d031      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d110      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f838 	bl	8006a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2208      	movs	r2, #8
 80069b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e029      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d4:	d111      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f81e 	bl	8006a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e00f      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4013      	ands	r3, r2
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d0a0      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b095      	sub	sp, #84	@ 0x54
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e6      	bne.n	8006a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3308      	adds	r3, #8
 8006a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e3      	bne.n	8006a5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d118      	bne.n	8006ace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f023 0310 	bic.w	r3, r3, #16
 8006ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6979      	ldr	r1, [r7, #20]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e6      	bne.n	8006a9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ae2:	bf00      	nop
 8006ae4:	3754      	adds	r7, #84	@ 0x54
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e027      	b.n	8006b54 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2224      	movs	r2, #36	@ 0x24
 8006b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e02d      	b.n	8006bd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2224      	movs	r2, #36	@ 0x24
 8006b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0201 	bic.w	r2, r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f84f 	bl	8006c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e02d      	b.n	8006c50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2224      	movs	r2, #36	@ 0x24
 8006c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f811 	bl	8006c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d108      	bne.n	8006c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c78:	e031      	b.n	8006cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c7e:	2308      	movs	r3, #8
 8006c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	0e5b      	lsrs	r3, r3, #25
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	0f5b      	lsrs	r3, r3, #29
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	7b3a      	ldrb	r2, [r7, #12]
 8006ca6:	4911      	ldr	r1, [pc, #68]	@ (8006cec <UARTEx_SetNbDataToProcess+0x94>)
 8006ca8:	5c8a      	ldrb	r2, [r1, r2]
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cae:	7b3a      	ldrb	r2, [r7, #12]
 8006cb0:	490f      	ldr	r1, [pc, #60]	@ (8006cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8006cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	7b7a      	ldrb	r2, [r7, #13]
 8006cc4:	4909      	ldr	r1, [pc, #36]	@ (8006cec <UARTEx_SetNbDataToProcess+0x94>)
 8006cc6:	5c8a      	ldrb	r2, [r1, r2]
 8006cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ccc:	7b7a      	ldrb	r2, [r7, #13]
 8006cce:	4908      	ldr	r1, [pc, #32]	@ (8006cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8006cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	080080ec 	.word	0x080080ec
 8006cf0:	080080f4 	.word	0x080080f4

08006cf4 <siscanf>:
 8006cf4:	b40e      	push	{r1, r2, r3}
 8006cf6:	b530      	push	{r4, r5, lr}
 8006cf8:	b09c      	sub	sp, #112	@ 0x70
 8006cfa:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006cfc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006d00:	f854 5b04 	ldr.w	r5, [r4], #4
 8006d04:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006d08:	9002      	str	r0, [sp, #8]
 8006d0a:	9006      	str	r0, [sp, #24]
 8006d0c:	f7f9 fa88 	bl	8000220 <strlen>
 8006d10:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <siscanf+0x4c>)
 8006d12:	9003      	str	r0, [sp, #12]
 8006d14:	9007      	str	r0, [sp, #28]
 8006d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d18:	480a      	ldr	r0, [pc, #40]	@ (8006d44 <siscanf+0x50>)
 8006d1a:	9401      	str	r4, [sp, #4]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d20:	9314      	str	r3, [sp, #80]	@ 0x50
 8006d22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	a902      	add	r1, sp, #8
 8006d30:	6800      	ldr	r0, [r0, #0]
 8006d32:	f000 fb13 	bl	800735c <__ssvfiscanf_r>
 8006d36:	b01c      	add	sp, #112	@ 0x70
 8006d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d3c:	b003      	add	sp, #12
 8006d3e:	4770      	bx	lr
 8006d40:	08006d6b 	.word	0x08006d6b
 8006d44:	20000078 	.word	0x20000078

08006d48 <__sread>:
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d50:	f000 fa10 	bl	8007174 <_read_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	bfab      	itete	ge
 8006d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d5c:	181b      	addge	r3, r3, r0
 8006d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d62:	bfac      	ite	ge
 8006d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d66:	81a3      	strhlt	r3, [r4, #12]
 8006d68:	bd10      	pop	{r4, pc}

08006d6a <__seofread>:
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	4770      	bx	lr

08006d6e <__swrite>:
 8006d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d72:	461f      	mov	r7, r3
 8006d74:	898b      	ldrh	r3, [r1, #12]
 8006d76:	05db      	lsls	r3, r3, #23
 8006d78:	4605      	mov	r5, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	4616      	mov	r6, r2
 8006d7e:	d505      	bpl.n	8006d8c <__swrite+0x1e>
 8006d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d84:	2302      	movs	r3, #2
 8006d86:	2200      	movs	r2, #0
 8006d88:	f000 f9e2 	bl	8007150 <_lseek_r>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006da2:	f000 b9f9 	b.w	8007198 <_write_r>

08006da6 <__sseek>:
 8006da6:	b510      	push	{r4, lr}
 8006da8:	460c      	mov	r4, r1
 8006daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dae:	f000 f9cf 	bl	8007150 <_lseek_r>
 8006db2:	1c43      	adds	r3, r0, #1
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	bf15      	itete	ne
 8006db8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dc2:	81a3      	strheq	r3, [r4, #12]
 8006dc4:	bf18      	it	ne
 8006dc6:	81a3      	strhne	r3, [r4, #12]
 8006dc8:	bd10      	pop	{r4, pc}

08006dca <__sclose>:
 8006dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dce:	f000 b9af 	b.w	8007130 <_close_r>
	...

08006dd4 <std>:
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	4604      	mov	r4, r0
 8006dda:	e9c0 3300 	strd	r3, r3, [r0]
 8006dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de2:	6083      	str	r3, [r0, #8]
 8006de4:	8181      	strh	r1, [r0, #12]
 8006de6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006de8:	81c2      	strh	r2, [r0, #14]
 8006dea:	6183      	str	r3, [r0, #24]
 8006dec:	4619      	mov	r1, r3
 8006dee:	2208      	movs	r2, #8
 8006df0:	305c      	adds	r0, #92	@ 0x5c
 8006df2:	f000 f995 	bl	8007120 <memset>
 8006df6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <std+0x58>)
 8006df8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <std+0x5c>)
 8006dfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <std+0x60>)
 8006e00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <std+0x64>)
 8006e04:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e06:	4b0d      	ldr	r3, [pc, #52]	@ (8006e3c <std+0x68>)
 8006e08:	6224      	str	r4, [r4, #32]
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d006      	beq.n	8006e1c <std+0x48>
 8006e0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e12:	4294      	cmp	r4, r2
 8006e14:	d002      	beq.n	8006e1c <std+0x48>
 8006e16:	33d0      	adds	r3, #208	@ 0xd0
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d105      	bne.n	8006e28 <std+0x54>
 8006e1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e24:	f000 b9f4 	b.w	8007210 <__retarget_lock_init_recursive>
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop
 8006e2c:	08006d49 	.word	0x08006d49
 8006e30:	08006d6f 	.word	0x08006d6f
 8006e34:	08006da7 	.word	0x08006da7
 8006e38:	08006dcb 	.word	0x08006dcb
 8006e3c:	2000049c 	.word	0x2000049c

08006e40 <stdio_exit_handler>:
 8006e40:	4a02      	ldr	r2, [pc, #8]	@ (8006e4c <stdio_exit_handler+0xc>)
 8006e42:	4903      	ldr	r1, [pc, #12]	@ (8006e50 <stdio_exit_handler+0x10>)
 8006e44:	4803      	ldr	r0, [pc, #12]	@ (8006e54 <stdio_exit_handler+0x14>)
 8006e46:	f000 b8ef 	b.w	8007028 <_fwalk_sglue>
 8006e4a:	bf00      	nop
 8006e4c:	2000006c 	.word	0x2000006c
 8006e50:	08007ba1 	.word	0x08007ba1
 8006e54:	2000007c 	.word	0x2000007c

08006e58 <cleanup_stdio>:
 8006e58:	6841      	ldr	r1, [r0, #4]
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e8c <cleanup_stdio+0x34>)
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	4604      	mov	r4, r0
 8006e62:	d001      	beq.n	8006e68 <cleanup_stdio+0x10>
 8006e64:	f000 fe9c 	bl	8007ba0 <_fflush_r>
 8006e68:	68a1      	ldr	r1, [r4, #8]
 8006e6a:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <cleanup_stdio+0x38>)
 8006e6c:	4299      	cmp	r1, r3
 8006e6e:	d002      	beq.n	8006e76 <cleanup_stdio+0x1e>
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 fe95 	bl	8007ba0 <_fflush_r>
 8006e76:	68e1      	ldr	r1, [r4, #12]
 8006e78:	4b06      	ldr	r3, [pc, #24]	@ (8006e94 <cleanup_stdio+0x3c>)
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	d004      	beq.n	8006e88 <cleanup_stdio+0x30>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e84:	f000 be8c 	b.w	8007ba0 <_fflush_r>
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	bf00      	nop
 8006e8c:	2000049c 	.word	0x2000049c
 8006e90:	20000504 	.word	0x20000504
 8006e94:	2000056c 	.word	0x2000056c

08006e98 <global_stdio_init.part.0>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <global_stdio_init.part.0+0x30>)
 8006e9c:	4c0b      	ldr	r4, [pc, #44]	@ (8006ecc <global_stdio_init.part.0+0x34>)
 8006e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed0 <global_stdio_init.part.0+0x38>)
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	f7ff ff94 	bl	8006dd4 <std>
 8006eac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	2109      	movs	r1, #9
 8006eb4:	f7ff ff8e 	bl	8006dd4 <std>
 8006eb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec2:	2112      	movs	r1, #18
 8006ec4:	f7ff bf86 	b.w	8006dd4 <std>
 8006ec8:	200005d4 	.word	0x200005d4
 8006ecc:	2000049c 	.word	0x2000049c
 8006ed0:	08006e41 	.word	0x08006e41

08006ed4 <__sfp_lock_acquire>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	@ (8006edc <__sfp_lock_acquire+0x8>)
 8006ed6:	f000 b99c 	b.w	8007212 <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	200005dd 	.word	0x200005dd

08006ee0 <__sfp_lock_release>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	@ (8006ee8 <__sfp_lock_release+0x8>)
 8006ee2:	f000 b997 	b.w	8007214 <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	200005dd 	.word	0x200005dd

08006eec <__sinit>:
 8006eec:	b510      	push	{r4, lr}
 8006eee:	4604      	mov	r4, r0
 8006ef0:	f7ff fff0 	bl	8006ed4 <__sfp_lock_acquire>
 8006ef4:	6a23      	ldr	r3, [r4, #32]
 8006ef6:	b11b      	cbz	r3, 8006f00 <__sinit+0x14>
 8006ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efc:	f7ff bff0 	b.w	8006ee0 <__sfp_lock_release>
 8006f00:	4b04      	ldr	r3, [pc, #16]	@ (8006f14 <__sinit+0x28>)
 8006f02:	6223      	str	r3, [r4, #32]
 8006f04:	4b04      	ldr	r3, [pc, #16]	@ (8006f18 <__sinit+0x2c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f5      	bne.n	8006ef8 <__sinit+0xc>
 8006f0c:	f7ff ffc4 	bl	8006e98 <global_stdio_init.part.0>
 8006f10:	e7f2      	b.n	8006ef8 <__sinit+0xc>
 8006f12:	bf00      	nop
 8006f14:	08006e59 	.word	0x08006e59
 8006f18:	200005d4 	.word	0x200005d4

08006f1c <_strtol_l.constprop.0>:
 8006f1c:	2b24      	cmp	r3, #36	@ 0x24
 8006f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f22:	4686      	mov	lr, r0
 8006f24:	4690      	mov	r8, r2
 8006f26:	d801      	bhi.n	8006f2c <_strtol_l.constprop.0+0x10>
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d106      	bne.n	8006f3a <_strtol_l.constprop.0+0x1e>
 8006f2c:	f000 f946 	bl	80071bc <__errno>
 8006f30:	2316      	movs	r3, #22
 8006f32:	6003      	str	r3, [r0, #0]
 8006f34:	2000      	movs	r0, #0
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	4834      	ldr	r0, [pc, #208]	@ (800700c <_strtol_l.constprop.0+0xf0>)
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	462a      	mov	r2, r5
 8006f40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f44:	5d06      	ldrb	r6, [r0, r4]
 8006f46:	f016 0608 	ands.w	r6, r6, #8
 8006f4a:	d1f8      	bne.n	8006f3e <_strtol_l.constprop.0+0x22>
 8006f4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f4e:	d12d      	bne.n	8006fac <_strtol_l.constprop.0+0x90>
 8006f50:	782c      	ldrb	r4, [r5, #0]
 8006f52:	2601      	movs	r6, #1
 8006f54:	1c95      	adds	r5, r2, #2
 8006f56:	f033 0210 	bics.w	r2, r3, #16
 8006f5a:	d109      	bne.n	8006f70 <_strtol_l.constprop.0+0x54>
 8006f5c:	2c30      	cmp	r4, #48	@ 0x30
 8006f5e:	d12a      	bne.n	8006fb6 <_strtol_l.constprop.0+0x9a>
 8006f60:	782a      	ldrb	r2, [r5, #0]
 8006f62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f66:	2a58      	cmp	r2, #88	@ 0x58
 8006f68:	d125      	bne.n	8006fb6 <_strtol_l.constprop.0+0x9a>
 8006f6a:	786c      	ldrb	r4, [r5, #1]
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	3502      	adds	r5, #2
 8006f70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006f74:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006f78:	2200      	movs	r2, #0
 8006f7a:	fbbc f9f3 	udiv	r9, ip, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006f88:	2f09      	cmp	r7, #9
 8006f8a:	d81b      	bhi.n	8006fc4 <_strtol_l.constprop.0+0xa8>
 8006f8c:	463c      	mov	r4, r7
 8006f8e:	42a3      	cmp	r3, r4
 8006f90:	dd27      	ble.n	8006fe2 <_strtol_l.constprop.0+0xc6>
 8006f92:	1c57      	adds	r7, r2, #1
 8006f94:	d007      	beq.n	8006fa6 <_strtol_l.constprop.0+0x8a>
 8006f96:	4581      	cmp	r9, r0
 8006f98:	d320      	bcc.n	8006fdc <_strtol_l.constprop.0+0xc0>
 8006f9a:	d101      	bne.n	8006fa0 <_strtol_l.constprop.0+0x84>
 8006f9c:	45a2      	cmp	sl, r4
 8006f9e:	db1d      	blt.n	8006fdc <_strtol_l.constprop.0+0xc0>
 8006fa0:	fb00 4003 	mla	r0, r0, r3, r4
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006faa:	e7eb      	b.n	8006f84 <_strtol_l.constprop.0+0x68>
 8006fac:	2c2b      	cmp	r4, #43	@ 0x2b
 8006fae:	bf04      	itt	eq
 8006fb0:	782c      	ldrbeq	r4, [r5, #0]
 8006fb2:	1c95      	addeq	r5, r2, #2
 8006fb4:	e7cf      	b.n	8006f56 <_strtol_l.constprop.0+0x3a>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1da      	bne.n	8006f70 <_strtol_l.constprop.0+0x54>
 8006fba:	2c30      	cmp	r4, #48	@ 0x30
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2308      	moveq	r3, #8
 8006fc0:	230a      	movne	r3, #10
 8006fc2:	e7d5      	b.n	8006f70 <_strtol_l.constprop.0+0x54>
 8006fc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006fc8:	2f19      	cmp	r7, #25
 8006fca:	d801      	bhi.n	8006fd0 <_strtol_l.constprop.0+0xb4>
 8006fcc:	3c37      	subs	r4, #55	@ 0x37
 8006fce:	e7de      	b.n	8006f8e <_strtol_l.constprop.0+0x72>
 8006fd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006fd4:	2f19      	cmp	r7, #25
 8006fd6:	d804      	bhi.n	8006fe2 <_strtol_l.constprop.0+0xc6>
 8006fd8:	3c57      	subs	r4, #87	@ 0x57
 8006fda:	e7d8      	b.n	8006f8e <_strtol_l.constprop.0+0x72>
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fe0:	e7e1      	b.n	8006fa6 <_strtol_l.constprop.0+0x8a>
 8006fe2:	1c53      	adds	r3, r2, #1
 8006fe4:	d108      	bne.n	8006ff8 <_strtol_l.constprop.0+0xdc>
 8006fe6:	2322      	movs	r3, #34	@ 0x22
 8006fe8:	f8ce 3000 	str.w	r3, [lr]
 8006fec:	4660      	mov	r0, ip
 8006fee:	f1b8 0f00 	cmp.w	r8, #0
 8006ff2:	d0a0      	beq.n	8006f36 <_strtol_l.constprop.0+0x1a>
 8006ff4:	1e69      	subs	r1, r5, #1
 8006ff6:	e006      	b.n	8007006 <_strtol_l.constprop.0+0xea>
 8006ff8:	b106      	cbz	r6, 8006ffc <_strtol_l.constprop.0+0xe0>
 8006ffa:	4240      	negs	r0, r0
 8006ffc:	f1b8 0f00 	cmp.w	r8, #0
 8007000:	d099      	beq.n	8006f36 <_strtol_l.constprop.0+0x1a>
 8007002:	2a00      	cmp	r2, #0
 8007004:	d1f6      	bne.n	8006ff4 <_strtol_l.constprop.0+0xd8>
 8007006:	f8c8 1000 	str.w	r1, [r8]
 800700a:	e794      	b.n	8006f36 <_strtol_l.constprop.0+0x1a>
 800700c:	080080fd 	.word	0x080080fd

08007010 <_strtol_r>:
 8007010:	f7ff bf84 	b.w	8006f1c <_strtol_l.constprop.0>

08007014 <strtol>:
 8007014:	4613      	mov	r3, r2
 8007016:	460a      	mov	r2, r1
 8007018:	4601      	mov	r1, r0
 800701a:	4802      	ldr	r0, [pc, #8]	@ (8007024 <strtol+0x10>)
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f7ff bf7d 	b.w	8006f1c <_strtol_l.constprop.0>
 8007022:	bf00      	nop
 8007024:	20000078 	.word	0x20000078

08007028 <_fwalk_sglue>:
 8007028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800702c:	4607      	mov	r7, r0
 800702e:	4688      	mov	r8, r1
 8007030:	4614      	mov	r4, r2
 8007032:	2600      	movs	r6, #0
 8007034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007038:	f1b9 0901 	subs.w	r9, r9, #1
 800703c:	d505      	bpl.n	800704a <_fwalk_sglue+0x22>
 800703e:	6824      	ldr	r4, [r4, #0]
 8007040:	2c00      	cmp	r4, #0
 8007042:	d1f7      	bne.n	8007034 <_fwalk_sglue+0xc>
 8007044:	4630      	mov	r0, r6
 8007046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d907      	bls.n	8007060 <_fwalk_sglue+0x38>
 8007050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007054:	3301      	adds	r3, #1
 8007056:	d003      	beq.n	8007060 <_fwalk_sglue+0x38>
 8007058:	4629      	mov	r1, r5
 800705a:	4638      	mov	r0, r7
 800705c:	47c0      	blx	r8
 800705e:	4306      	orrs	r6, r0
 8007060:	3568      	adds	r5, #104	@ 0x68
 8007062:	e7e9      	b.n	8007038 <_fwalk_sglue+0x10>

08007064 <_puts_r>:
 8007064:	6a03      	ldr	r3, [r0, #32]
 8007066:	b570      	push	{r4, r5, r6, lr}
 8007068:	6884      	ldr	r4, [r0, #8]
 800706a:	4605      	mov	r5, r0
 800706c:	460e      	mov	r6, r1
 800706e:	b90b      	cbnz	r3, 8007074 <_puts_r+0x10>
 8007070:	f7ff ff3c 	bl	8006eec <__sinit>
 8007074:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007076:	07db      	lsls	r3, r3, #31
 8007078:	d405      	bmi.n	8007086 <_puts_r+0x22>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	0598      	lsls	r0, r3, #22
 800707e:	d402      	bmi.n	8007086 <_puts_r+0x22>
 8007080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007082:	f000 f8c6 	bl	8007212 <__retarget_lock_acquire_recursive>
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	0719      	lsls	r1, r3, #28
 800708a:	d502      	bpl.n	8007092 <_puts_r+0x2e>
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d135      	bne.n	80070fe <_puts_r+0x9a>
 8007092:	4621      	mov	r1, r4
 8007094:	4628      	mov	r0, r5
 8007096:	f000 fecd 	bl	8007e34 <__swsetup_r>
 800709a:	b380      	cbz	r0, 80070fe <_puts_r+0x9a>
 800709c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80070a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070a2:	07da      	lsls	r2, r3, #31
 80070a4:	d405      	bmi.n	80070b2 <_puts_r+0x4e>
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	059b      	lsls	r3, r3, #22
 80070aa:	d402      	bmi.n	80070b2 <_puts_r+0x4e>
 80070ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070ae:	f000 f8b1 	bl	8007214 <__retarget_lock_release_recursive>
 80070b2:	4628      	mov	r0, r5
 80070b4:	bd70      	pop	{r4, r5, r6, pc}
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da04      	bge.n	80070c4 <_puts_r+0x60>
 80070ba:	69a2      	ldr	r2, [r4, #24]
 80070bc:	429a      	cmp	r2, r3
 80070be:	dc17      	bgt.n	80070f0 <_puts_r+0x8c>
 80070c0:	290a      	cmp	r1, #10
 80070c2:	d015      	beq.n	80070f0 <_puts_r+0x8c>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	6022      	str	r2, [r4, #0]
 80070ca:	7019      	strb	r1, [r3, #0]
 80070cc:	68a3      	ldr	r3, [r4, #8]
 80070ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070d2:	3b01      	subs	r3, #1
 80070d4:	60a3      	str	r3, [r4, #8]
 80070d6:	2900      	cmp	r1, #0
 80070d8:	d1ed      	bne.n	80070b6 <_puts_r+0x52>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da11      	bge.n	8007102 <_puts_r+0x9e>
 80070de:	4622      	mov	r2, r4
 80070e0:	210a      	movs	r1, #10
 80070e2:	4628      	mov	r0, r5
 80070e4:	f000 fe68 	bl	8007db8 <__swbuf_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d0d7      	beq.n	800709c <_puts_r+0x38>
 80070ec:	250a      	movs	r5, #10
 80070ee:	e7d7      	b.n	80070a0 <_puts_r+0x3c>
 80070f0:	4622      	mov	r2, r4
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 fe60 	bl	8007db8 <__swbuf_r>
 80070f8:	3001      	adds	r0, #1
 80070fa:	d1e7      	bne.n	80070cc <_puts_r+0x68>
 80070fc:	e7ce      	b.n	800709c <_puts_r+0x38>
 80070fe:	3e01      	subs	r6, #1
 8007100:	e7e4      	b.n	80070cc <_puts_r+0x68>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	6022      	str	r2, [r4, #0]
 8007108:	220a      	movs	r2, #10
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	e7ee      	b.n	80070ec <_puts_r+0x88>
	...

08007110 <puts>:
 8007110:	4b02      	ldr	r3, [pc, #8]	@ (800711c <puts+0xc>)
 8007112:	4601      	mov	r1, r0
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	f7ff bfa5 	b.w	8007064 <_puts_r>
 800711a:	bf00      	nop
 800711c:	20000078 	.word	0x20000078

08007120 <memset>:
 8007120:	4402      	add	r2, r0
 8007122:	4603      	mov	r3, r0
 8007124:	4293      	cmp	r3, r2
 8007126:	d100      	bne.n	800712a <memset+0xa>
 8007128:	4770      	bx	lr
 800712a:	f803 1b01 	strb.w	r1, [r3], #1
 800712e:	e7f9      	b.n	8007124 <memset+0x4>

08007130 <_close_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d06      	ldr	r5, [pc, #24]	@ (800714c <_close_r+0x1c>)
 8007134:	2300      	movs	r3, #0
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	602b      	str	r3, [r5, #0]
 800713c:	f7fb f9a4 	bl	8002488 <_close>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_close_r+0x1a>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_close_r+0x1a>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	200005d8 	.word	0x200005d8

08007150 <_lseek_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	@ (8007170 <_lseek_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7fb f9b9 	bl	80024d6 <_lseek>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_lseek_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_lseek_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	200005d8 	.word	0x200005d8

08007174 <_read_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4d07      	ldr	r5, [pc, #28]	@ (8007194 <_read_r+0x20>)
 8007178:	4604      	mov	r4, r0
 800717a:	4608      	mov	r0, r1
 800717c:	4611      	mov	r1, r2
 800717e:	2200      	movs	r2, #0
 8007180:	602a      	str	r2, [r5, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	f7fb f947 	bl	8002416 <_read>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	d102      	bne.n	8007192 <_read_r+0x1e>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	b103      	cbz	r3, 8007192 <_read_r+0x1e>
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	bd38      	pop	{r3, r4, r5, pc}
 8007194:	200005d8 	.word	0x200005d8

08007198 <_write_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4d07      	ldr	r5, [pc, #28]	@ (80071b8 <_write_r+0x20>)
 800719c:	4604      	mov	r4, r0
 800719e:	4608      	mov	r0, r1
 80071a0:	4611      	mov	r1, r2
 80071a2:	2200      	movs	r2, #0
 80071a4:	602a      	str	r2, [r5, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f7fb f952 	bl	8002450 <_write>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_write_r+0x1e>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_write_r+0x1e>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	200005d8 	.word	0x200005d8

080071bc <__errno>:
 80071bc:	4b01      	ldr	r3, [pc, #4]	@ (80071c4 <__errno+0x8>)
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20000078 	.word	0x20000078

080071c8 <__libc_init_array>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007200 <__libc_init_array+0x38>)
 80071cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007204 <__libc_init_array+0x3c>)
 80071ce:	1b64      	subs	r4, r4, r5
 80071d0:	10a4      	asrs	r4, r4, #2
 80071d2:	2600      	movs	r6, #0
 80071d4:	42a6      	cmp	r6, r4
 80071d6:	d109      	bne.n	80071ec <__libc_init_array+0x24>
 80071d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007208 <__libc_init_array+0x40>)
 80071da:	4c0c      	ldr	r4, [pc, #48]	@ (800720c <__libc_init_array+0x44>)
 80071dc:	f000 ff2a 	bl	8008034 <_init>
 80071e0:	1b64      	subs	r4, r4, r5
 80071e2:	10a4      	asrs	r4, r4, #2
 80071e4:	2600      	movs	r6, #0
 80071e6:	42a6      	cmp	r6, r4
 80071e8:	d105      	bne.n	80071f6 <__libc_init_array+0x2e>
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f0:	4798      	blx	r3
 80071f2:	3601      	adds	r6, #1
 80071f4:	e7ee      	b.n	80071d4 <__libc_init_array+0xc>
 80071f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071fa:	4798      	blx	r3
 80071fc:	3601      	adds	r6, #1
 80071fe:	e7f2      	b.n	80071e6 <__libc_init_array+0x1e>
 8007200:	08008224 	.word	0x08008224
 8007204:	08008224 	.word	0x08008224
 8007208:	08008224 	.word	0x08008224
 800720c:	08008228 	.word	0x08008228

08007210 <__retarget_lock_init_recursive>:
 8007210:	4770      	bx	lr

08007212 <__retarget_lock_acquire_recursive>:
 8007212:	4770      	bx	lr

08007214 <__retarget_lock_release_recursive>:
 8007214:	4770      	bx	lr
	...

08007218 <_free_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4605      	mov	r5, r0
 800721c:	2900      	cmp	r1, #0
 800721e:	d041      	beq.n	80072a4 <_free_r+0x8c>
 8007220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007224:	1f0c      	subs	r4, r1, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	bfb8      	it	lt
 800722a:	18e4      	addlt	r4, r4, r3
 800722c:	f000 fce0 	bl	8007bf0 <__malloc_lock>
 8007230:	4a1d      	ldr	r2, [pc, #116]	@ (80072a8 <_free_r+0x90>)
 8007232:	6813      	ldr	r3, [r2, #0]
 8007234:	b933      	cbnz	r3, 8007244 <_free_r+0x2c>
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	6014      	str	r4, [r2, #0]
 800723a:	4628      	mov	r0, r5
 800723c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007240:	f000 bcdc 	b.w	8007bfc <__malloc_unlock>
 8007244:	42a3      	cmp	r3, r4
 8007246:	d908      	bls.n	800725a <_free_r+0x42>
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	1821      	adds	r1, r4, r0
 800724c:	428b      	cmp	r3, r1
 800724e:	bf01      	itttt	eq
 8007250:	6819      	ldreq	r1, [r3, #0]
 8007252:	685b      	ldreq	r3, [r3, #4]
 8007254:	1809      	addeq	r1, r1, r0
 8007256:	6021      	streq	r1, [r4, #0]
 8007258:	e7ed      	b.n	8007236 <_free_r+0x1e>
 800725a:	461a      	mov	r2, r3
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	b10b      	cbz	r3, 8007264 <_free_r+0x4c>
 8007260:	42a3      	cmp	r3, r4
 8007262:	d9fa      	bls.n	800725a <_free_r+0x42>
 8007264:	6811      	ldr	r1, [r2, #0]
 8007266:	1850      	adds	r0, r2, r1
 8007268:	42a0      	cmp	r0, r4
 800726a:	d10b      	bne.n	8007284 <_free_r+0x6c>
 800726c:	6820      	ldr	r0, [r4, #0]
 800726e:	4401      	add	r1, r0
 8007270:	1850      	adds	r0, r2, r1
 8007272:	4283      	cmp	r3, r0
 8007274:	6011      	str	r1, [r2, #0]
 8007276:	d1e0      	bne.n	800723a <_free_r+0x22>
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	6053      	str	r3, [r2, #4]
 800727e:	4408      	add	r0, r1
 8007280:	6010      	str	r0, [r2, #0]
 8007282:	e7da      	b.n	800723a <_free_r+0x22>
 8007284:	d902      	bls.n	800728c <_free_r+0x74>
 8007286:	230c      	movs	r3, #12
 8007288:	602b      	str	r3, [r5, #0]
 800728a:	e7d6      	b.n	800723a <_free_r+0x22>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	1821      	adds	r1, r4, r0
 8007290:	428b      	cmp	r3, r1
 8007292:	bf04      	itt	eq
 8007294:	6819      	ldreq	r1, [r3, #0]
 8007296:	685b      	ldreq	r3, [r3, #4]
 8007298:	6063      	str	r3, [r4, #4]
 800729a:	bf04      	itt	eq
 800729c:	1809      	addeq	r1, r1, r0
 800729e:	6021      	streq	r1, [r4, #0]
 80072a0:	6054      	str	r4, [r2, #4]
 80072a2:	e7ca      	b.n	800723a <_free_r+0x22>
 80072a4:	bd38      	pop	{r3, r4, r5, pc}
 80072a6:	bf00      	nop
 80072a8:	200005e4 	.word	0x200005e4

080072ac <_sungetc_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	1c4b      	adds	r3, r1, #1
 80072b0:	4614      	mov	r4, r2
 80072b2:	d103      	bne.n	80072bc <_sungetc_r+0x10>
 80072b4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80072b8:	4628      	mov	r0, r5
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	8993      	ldrh	r3, [r2, #12]
 80072be:	f023 0320 	bic.w	r3, r3, #32
 80072c2:	8193      	strh	r3, [r2, #12]
 80072c4:	6853      	ldr	r3, [r2, #4]
 80072c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072c8:	b2cd      	uxtb	r5, r1
 80072ca:	b18a      	cbz	r2, 80072f0 <_sungetc_r+0x44>
 80072cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80072ce:	429a      	cmp	r2, r3
 80072d0:	dd08      	ble.n	80072e4 <_sungetc_r+0x38>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	1e5a      	subs	r2, r3, #1
 80072d6:	6022      	str	r2, [r4, #0]
 80072d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80072dc:	6863      	ldr	r3, [r4, #4]
 80072de:	3301      	adds	r3, #1
 80072e0:	6063      	str	r3, [r4, #4]
 80072e2:	e7e9      	b.n	80072b8 <_sungetc_r+0xc>
 80072e4:	4621      	mov	r1, r4
 80072e6:	f000 fc8f 	bl	8007c08 <__submore>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d0f1      	beq.n	80072d2 <_sungetc_r+0x26>
 80072ee:	e7e1      	b.n	80072b4 <_sungetc_r+0x8>
 80072f0:	6921      	ldr	r1, [r4, #16]
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	b141      	cbz	r1, 8007308 <_sungetc_r+0x5c>
 80072f6:	4291      	cmp	r1, r2
 80072f8:	d206      	bcs.n	8007308 <_sungetc_r+0x5c>
 80072fa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80072fe:	42a9      	cmp	r1, r5
 8007300:	d102      	bne.n	8007308 <_sungetc_r+0x5c>
 8007302:	3a01      	subs	r2, #1
 8007304:	6022      	str	r2, [r4, #0]
 8007306:	e7ea      	b.n	80072de <_sungetc_r+0x32>
 8007308:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800730c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007310:	6363      	str	r3, [r4, #52]	@ 0x34
 8007312:	2303      	movs	r3, #3
 8007314:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007316:	4623      	mov	r3, r4
 8007318:	f803 5f46 	strb.w	r5, [r3, #70]!
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	2301      	movs	r3, #1
 8007320:	e7de      	b.n	80072e0 <_sungetc_r+0x34>

08007322 <__ssrefill_r>:
 8007322:	b510      	push	{r4, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007328:	b169      	cbz	r1, 8007346 <__ssrefill_r+0x24>
 800732a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800732e:	4299      	cmp	r1, r3
 8007330:	d001      	beq.n	8007336 <__ssrefill_r+0x14>
 8007332:	f7ff ff71 	bl	8007218 <_free_r>
 8007336:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007338:	6063      	str	r3, [r4, #4]
 800733a:	2000      	movs	r0, #0
 800733c:	6360      	str	r0, [r4, #52]	@ 0x34
 800733e:	b113      	cbz	r3, 8007346 <__ssrefill_r+0x24>
 8007340:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007342:	6023      	str	r3, [r4, #0]
 8007344:	bd10      	pop	{r4, pc}
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	2300      	movs	r3, #0
 800734c:	6063      	str	r3, [r4, #4]
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f043 0320 	orr.w	r3, r3, #32
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800735a:	e7f3      	b.n	8007344 <__ssrefill_r+0x22>

0800735c <__ssvfiscanf_r>:
 800735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	460c      	mov	r4, r1
 8007362:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007366:	2100      	movs	r1, #0
 8007368:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800736c:	49a5      	ldr	r1, [pc, #660]	@ (8007604 <__ssvfiscanf_r+0x2a8>)
 800736e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007370:	f10d 0804 	add.w	r8, sp, #4
 8007374:	49a4      	ldr	r1, [pc, #656]	@ (8007608 <__ssvfiscanf_r+0x2ac>)
 8007376:	4fa5      	ldr	r7, [pc, #660]	@ (800760c <__ssvfiscanf_r+0x2b0>)
 8007378:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800737c:	4606      	mov	r6, r0
 800737e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	7813      	ldrb	r3, [r2, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8158 	beq.w	800763a <__ssvfiscanf_r+0x2de>
 800738a:	5cf9      	ldrb	r1, [r7, r3]
 800738c:	f011 0108 	ands.w	r1, r1, #8
 8007390:	f102 0501 	add.w	r5, r2, #1
 8007394:	d019      	beq.n	80073ca <__ssvfiscanf_r+0x6e>
 8007396:	6863      	ldr	r3, [r4, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	dd0f      	ble.n	80073bc <__ssvfiscanf_r+0x60>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	781a      	ldrb	r2, [r3, #0]
 80073a0:	5cba      	ldrb	r2, [r7, r2]
 80073a2:	0712      	lsls	r2, r2, #28
 80073a4:	d401      	bmi.n	80073aa <__ssvfiscanf_r+0x4e>
 80073a6:	462a      	mov	r2, r5
 80073a8:	e7eb      	b.n	8007382 <__ssvfiscanf_r+0x26>
 80073aa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80073ac:	3201      	adds	r2, #1
 80073ae:	9245      	str	r2, [sp, #276]	@ 0x114
 80073b0:	6862      	ldr	r2, [r4, #4]
 80073b2:	3301      	adds	r3, #1
 80073b4:	3a01      	subs	r2, #1
 80073b6:	6062      	str	r2, [r4, #4]
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	e7ec      	b.n	8007396 <__ssvfiscanf_r+0x3a>
 80073bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80073be:	4621      	mov	r1, r4
 80073c0:	4630      	mov	r0, r6
 80073c2:	4798      	blx	r3
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d0e9      	beq.n	800739c <__ssvfiscanf_r+0x40>
 80073c8:	e7ed      	b.n	80073a6 <__ssvfiscanf_r+0x4a>
 80073ca:	2b25      	cmp	r3, #37	@ 0x25
 80073cc:	d012      	beq.n	80073f4 <__ssvfiscanf_r+0x98>
 80073ce:	4699      	mov	r9, r3
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f340 8093 	ble.w	80074fe <__ssvfiscanf_r+0x1a2>
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	7813      	ldrb	r3, [r2, #0]
 80073dc:	454b      	cmp	r3, r9
 80073de:	f040 812c 	bne.w	800763a <__ssvfiscanf_r+0x2de>
 80073e2:	6863      	ldr	r3, [r4, #4]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	6063      	str	r3, [r4, #4]
 80073e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80073ea:	3201      	adds	r2, #1
 80073ec:	3301      	adds	r3, #1
 80073ee:	6022      	str	r2, [r4, #0]
 80073f0:	9345      	str	r3, [sp, #276]	@ 0x114
 80073f2:	e7d8      	b.n	80073a6 <__ssvfiscanf_r+0x4a>
 80073f4:	9141      	str	r1, [sp, #260]	@ 0x104
 80073f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80073f8:	7853      	ldrb	r3, [r2, #1]
 80073fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80073fc:	bf02      	ittt	eq
 80073fe:	2310      	moveq	r3, #16
 8007400:	1c95      	addeq	r5, r2, #2
 8007402:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007404:	220a      	movs	r2, #10
 8007406:	46a9      	mov	r9, r5
 8007408:	f819 1b01 	ldrb.w	r1, [r9], #1
 800740c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007410:	2b09      	cmp	r3, #9
 8007412:	d91e      	bls.n	8007452 <__ssvfiscanf_r+0xf6>
 8007414:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8007610 <__ssvfiscanf_r+0x2b4>
 8007418:	2203      	movs	r2, #3
 800741a:	4650      	mov	r0, sl
 800741c:	f7f8 ff08 	bl	8000230 <memchr>
 8007420:	b138      	cbz	r0, 8007432 <__ssvfiscanf_r+0xd6>
 8007422:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007424:	eba0 000a 	sub.w	r0, r0, sl
 8007428:	2301      	movs	r3, #1
 800742a:	4083      	lsls	r3, r0
 800742c:	4313      	orrs	r3, r2
 800742e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007430:	464d      	mov	r5, r9
 8007432:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007436:	2b78      	cmp	r3, #120	@ 0x78
 8007438:	d806      	bhi.n	8007448 <__ssvfiscanf_r+0xec>
 800743a:	2b57      	cmp	r3, #87	@ 0x57
 800743c:	d810      	bhi.n	8007460 <__ssvfiscanf_r+0x104>
 800743e:	2b25      	cmp	r3, #37	@ 0x25
 8007440:	d0c5      	beq.n	80073ce <__ssvfiscanf_r+0x72>
 8007442:	d857      	bhi.n	80074f4 <__ssvfiscanf_r+0x198>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d065      	beq.n	8007514 <__ssvfiscanf_r+0x1b8>
 8007448:	2303      	movs	r3, #3
 800744a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800744c:	230a      	movs	r3, #10
 800744e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007450:	e078      	b.n	8007544 <__ssvfiscanf_r+0x1e8>
 8007452:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007454:	fb02 1103 	mla	r1, r2, r3, r1
 8007458:	3930      	subs	r1, #48	@ 0x30
 800745a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800745c:	464d      	mov	r5, r9
 800745e:	e7d2      	b.n	8007406 <__ssvfiscanf_r+0xaa>
 8007460:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007464:	2a20      	cmp	r2, #32
 8007466:	d8ef      	bhi.n	8007448 <__ssvfiscanf_r+0xec>
 8007468:	a101      	add	r1, pc, #4	@ (adr r1, 8007470 <__ssvfiscanf_r+0x114>)
 800746a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007523 	.word	0x08007523
 8007474:	08007449 	.word	0x08007449
 8007478:	08007449 	.word	0x08007449
 800747c:	0800757d 	.word	0x0800757d
 8007480:	08007449 	.word	0x08007449
 8007484:	08007449 	.word	0x08007449
 8007488:	08007449 	.word	0x08007449
 800748c:	08007449 	.word	0x08007449
 8007490:	08007449 	.word	0x08007449
 8007494:	08007449 	.word	0x08007449
 8007498:	08007449 	.word	0x08007449
 800749c:	08007593 	.word	0x08007593
 80074a0:	08007579 	.word	0x08007579
 80074a4:	080074fb 	.word	0x080074fb
 80074a8:	080074fb 	.word	0x080074fb
 80074ac:	080074fb 	.word	0x080074fb
 80074b0:	08007449 	.word	0x08007449
 80074b4:	08007535 	.word	0x08007535
 80074b8:	08007449 	.word	0x08007449
 80074bc:	08007449 	.word	0x08007449
 80074c0:	08007449 	.word	0x08007449
 80074c4:	08007449 	.word	0x08007449
 80074c8:	080075a3 	.word	0x080075a3
 80074cc:	0800753d 	.word	0x0800753d
 80074d0:	0800751b 	.word	0x0800751b
 80074d4:	08007449 	.word	0x08007449
 80074d8:	08007449 	.word	0x08007449
 80074dc:	0800759f 	.word	0x0800759f
 80074e0:	08007449 	.word	0x08007449
 80074e4:	08007579 	.word	0x08007579
 80074e8:	08007449 	.word	0x08007449
 80074ec:	08007449 	.word	0x08007449
 80074f0:	08007523 	.word	0x08007523
 80074f4:	3b45      	subs	r3, #69	@ 0x45
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d8a6      	bhi.n	8007448 <__ssvfiscanf_r+0xec>
 80074fa:	2305      	movs	r3, #5
 80074fc:	e021      	b.n	8007542 <__ssvfiscanf_r+0x1e6>
 80074fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007500:	4621      	mov	r1, r4
 8007502:	4630      	mov	r0, r6
 8007504:	4798      	blx	r3
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f af66 	beq.w	80073d8 <__ssvfiscanf_r+0x7c>
 800750c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800750e:	2800      	cmp	r0, #0
 8007510:	f040 808b 	bne.w	800762a <__ssvfiscanf_r+0x2ce>
 8007514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007518:	e08b      	b.n	8007632 <__ssvfiscanf_r+0x2d6>
 800751a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800751c:	f042 0220 	orr.w	r2, r2, #32
 8007520:	9241      	str	r2, [sp, #260]	@ 0x104
 8007522:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007528:	9241      	str	r2, [sp, #260]	@ 0x104
 800752a:	2210      	movs	r2, #16
 800752c:	2b6e      	cmp	r3, #110	@ 0x6e
 800752e:	9242      	str	r2, [sp, #264]	@ 0x108
 8007530:	d902      	bls.n	8007538 <__ssvfiscanf_r+0x1dc>
 8007532:	e005      	b.n	8007540 <__ssvfiscanf_r+0x1e4>
 8007534:	2300      	movs	r3, #0
 8007536:	9342      	str	r3, [sp, #264]	@ 0x108
 8007538:	2303      	movs	r3, #3
 800753a:	e002      	b.n	8007542 <__ssvfiscanf_r+0x1e6>
 800753c:	2308      	movs	r3, #8
 800753e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007540:	2304      	movs	r3, #4
 8007542:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007544:	6863      	ldr	r3, [r4, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	dd39      	ble.n	80075be <__ssvfiscanf_r+0x262>
 800754a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800754c:	0659      	lsls	r1, r3, #25
 800754e:	d404      	bmi.n	800755a <__ssvfiscanf_r+0x1fe>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	781a      	ldrb	r2, [r3, #0]
 8007554:	5cba      	ldrb	r2, [r7, r2]
 8007556:	0712      	lsls	r2, r2, #28
 8007558:	d438      	bmi.n	80075cc <__ssvfiscanf_r+0x270>
 800755a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800755c:	2b02      	cmp	r3, #2
 800755e:	dc47      	bgt.n	80075f0 <__ssvfiscanf_r+0x294>
 8007560:	466b      	mov	r3, sp
 8007562:	4622      	mov	r2, r4
 8007564:	a941      	add	r1, sp, #260	@ 0x104
 8007566:	4630      	mov	r0, r6
 8007568:	f000 f90e 	bl	8007788 <_scanf_chars>
 800756c:	2801      	cmp	r0, #1
 800756e:	d064      	beq.n	800763a <__ssvfiscanf_r+0x2de>
 8007570:	2802      	cmp	r0, #2
 8007572:	f47f af18 	bne.w	80073a6 <__ssvfiscanf_r+0x4a>
 8007576:	e7c9      	b.n	800750c <__ssvfiscanf_r+0x1b0>
 8007578:	220a      	movs	r2, #10
 800757a:	e7d7      	b.n	800752c <__ssvfiscanf_r+0x1d0>
 800757c:	4629      	mov	r1, r5
 800757e:	4640      	mov	r0, r8
 8007580:	f000 fa50 	bl	8007a24 <__sccl>
 8007584:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758a:	9341      	str	r3, [sp, #260]	@ 0x104
 800758c:	4605      	mov	r5, r0
 800758e:	2301      	movs	r3, #1
 8007590:	e7d7      	b.n	8007542 <__ssvfiscanf_r+0x1e6>
 8007592:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007598:	9341      	str	r3, [sp, #260]	@ 0x104
 800759a:	2300      	movs	r3, #0
 800759c:	e7d1      	b.n	8007542 <__ssvfiscanf_r+0x1e6>
 800759e:	2302      	movs	r3, #2
 80075a0:	e7cf      	b.n	8007542 <__ssvfiscanf_r+0x1e6>
 80075a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80075a4:	06c3      	lsls	r3, r0, #27
 80075a6:	f53f aefe 	bmi.w	80073a6 <__ssvfiscanf_r+0x4a>
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80075ae:	1d19      	adds	r1, r3, #4
 80075b0:	9100      	str	r1, [sp, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	07c0      	lsls	r0, r0, #31
 80075b6:	bf4c      	ite	mi
 80075b8:	801a      	strhmi	r2, [r3, #0]
 80075ba:	601a      	strpl	r2, [r3, #0]
 80075bc:	e6f3      	b.n	80073a6 <__ssvfiscanf_r+0x4a>
 80075be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80075c0:	4621      	mov	r1, r4
 80075c2:	4630      	mov	r0, r6
 80075c4:	4798      	blx	r3
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d0bf      	beq.n	800754a <__ssvfiscanf_r+0x1ee>
 80075ca:	e79f      	b.n	800750c <__ssvfiscanf_r+0x1b0>
 80075cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80075ce:	3201      	adds	r2, #1
 80075d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80075d2:	6862      	ldr	r2, [r4, #4]
 80075d4:	3a01      	subs	r2, #1
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	6062      	str	r2, [r4, #4]
 80075da:	dd02      	ble.n	80075e2 <__ssvfiscanf_r+0x286>
 80075dc:	3301      	adds	r3, #1
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	e7b6      	b.n	8007550 <__ssvfiscanf_r+0x1f4>
 80075e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80075e4:	4621      	mov	r1, r4
 80075e6:	4630      	mov	r0, r6
 80075e8:	4798      	blx	r3
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d0b0      	beq.n	8007550 <__ssvfiscanf_r+0x1f4>
 80075ee:	e78d      	b.n	800750c <__ssvfiscanf_r+0x1b0>
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	dc0f      	bgt.n	8007614 <__ssvfiscanf_r+0x2b8>
 80075f4:	466b      	mov	r3, sp
 80075f6:	4622      	mov	r2, r4
 80075f8:	a941      	add	r1, sp, #260	@ 0x104
 80075fa:	4630      	mov	r0, r6
 80075fc:	f000 f91e 	bl	800783c <_scanf_i>
 8007600:	e7b4      	b.n	800756c <__ssvfiscanf_r+0x210>
 8007602:	bf00      	nop
 8007604:	080072ad 	.word	0x080072ad
 8007608:	08007323 	.word	0x08007323
 800760c:	080080fd 	.word	0x080080fd
 8007610:	080081fd 	.word	0x080081fd
 8007614:	4b0a      	ldr	r3, [pc, #40]	@ (8007640 <__ssvfiscanf_r+0x2e4>)
 8007616:	2b00      	cmp	r3, #0
 8007618:	f43f aec5 	beq.w	80073a6 <__ssvfiscanf_r+0x4a>
 800761c:	466b      	mov	r3, sp
 800761e:	4622      	mov	r2, r4
 8007620:	a941      	add	r1, sp, #260	@ 0x104
 8007622:	4630      	mov	r0, r6
 8007624:	f3af 8000 	nop.w
 8007628:	e7a0      	b.n	800756c <__ssvfiscanf_r+0x210>
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	065b      	lsls	r3, r3, #25
 800762e:	f53f af71 	bmi.w	8007514 <__ssvfiscanf_r+0x1b8>
 8007632:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800763c:	e7f9      	b.n	8007632 <__ssvfiscanf_r+0x2d6>
 800763e:	bf00      	nop
 8007640:	00000000 	.word	0x00000000

08007644 <sbrk_aligned>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	4e0f      	ldr	r6, [pc, #60]	@ (8007684 <sbrk_aligned+0x40>)
 8007648:	460c      	mov	r4, r1
 800764a:	6831      	ldr	r1, [r6, #0]
 800764c:	4605      	mov	r5, r0
 800764e:	b911      	cbnz	r1, 8007656 <sbrk_aligned+0x12>
 8007650:	f000 fcca 	bl	8007fe8 <_sbrk_r>
 8007654:	6030      	str	r0, [r6, #0]
 8007656:	4621      	mov	r1, r4
 8007658:	4628      	mov	r0, r5
 800765a:	f000 fcc5 	bl	8007fe8 <_sbrk_r>
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	d103      	bne.n	800766a <sbrk_aligned+0x26>
 8007662:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007666:	4620      	mov	r0, r4
 8007668:	bd70      	pop	{r4, r5, r6, pc}
 800766a:	1cc4      	adds	r4, r0, #3
 800766c:	f024 0403 	bic.w	r4, r4, #3
 8007670:	42a0      	cmp	r0, r4
 8007672:	d0f8      	beq.n	8007666 <sbrk_aligned+0x22>
 8007674:	1a21      	subs	r1, r4, r0
 8007676:	4628      	mov	r0, r5
 8007678:	f000 fcb6 	bl	8007fe8 <_sbrk_r>
 800767c:	3001      	adds	r0, #1
 800767e:	d1f2      	bne.n	8007666 <sbrk_aligned+0x22>
 8007680:	e7ef      	b.n	8007662 <sbrk_aligned+0x1e>
 8007682:	bf00      	nop
 8007684:	200005e0 	.word	0x200005e0

08007688 <_malloc_r>:
 8007688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800768c:	1ccd      	adds	r5, r1, #3
 800768e:	f025 0503 	bic.w	r5, r5, #3
 8007692:	3508      	adds	r5, #8
 8007694:	2d0c      	cmp	r5, #12
 8007696:	bf38      	it	cc
 8007698:	250c      	movcc	r5, #12
 800769a:	2d00      	cmp	r5, #0
 800769c:	4606      	mov	r6, r0
 800769e:	db01      	blt.n	80076a4 <_malloc_r+0x1c>
 80076a0:	42a9      	cmp	r1, r5
 80076a2:	d904      	bls.n	80076ae <_malloc_r+0x26>
 80076a4:	230c      	movs	r3, #12
 80076a6:	6033      	str	r3, [r6, #0]
 80076a8:	2000      	movs	r0, #0
 80076aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007784 <_malloc_r+0xfc>
 80076b2:	f000 fa9d 	bl	8007bf0 <__malloc_lock>
 80076b6:	f8d8 3000 	ldr.w	r3, [r8]
 80076ba:	461c      	mov	r4, r3
 80076bc:	bb44      	cbnz	r4, 8007710 <_malloc_r+0x88>
 80076be:	4629      	mov	r1, r5
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff ffbf 	bl	8007644 <sbrk_aligned>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	4604      	mov	r4, r0
 80076ca:	d158      	bne.n	800777e <_malloc_r+0xf6>
 80076cc:	f8d8 4000 	ldr.w	r4, [r8]
 80076d0:	4627      	mov	r7, r4
 80076d2:	2f00      	cmp	r7, #0
 80076d4:	d143      	bne.n	800775e <_malloc_r+0xd6>
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	d04b      	beq.n	8007772 <_malloc_r+0xea>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	4639      	mov	r1, r7
 80076de:	4630      	mov	r0, r6
 80076e0:	eb04 0903 	add.w	r9, r4, r3
 80076e4:	f000 fc80 	bl	8007fe8 <_sbrk_r>
 80076e8:	4581      	cmp	r9, r0
 80076ea:	d142      	bne.n	8007772 <_malloc_r+0xea>
 80076ec:	6821      	ldr	r1, [r4, #0]
 80076ee:	1a6d      	subs	r5, r5, r1
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff ffa6 	bl	8007644 <sbrk_aligned>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d03a      	beq.n	8007772 <_malloc_r+0xea>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	442b      	add	r3, r5
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	f8d8 3000 	ldr.w	r3, [r8]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	bb62      	cbnz	r2, 8007764 <_malloc_r+0xdc>
 800770a:	f8c8 7000 	str.w	r7, [r8]
 800770e:	e00f      	b.n	8007730 <_malloc_r+0xa8>
 8007710:	6822      	ldr	r2, [r4, #0]
 8007712:	1b52      	subs	r2, r2, r5
 8007714:	d420      	bmi.n	8007758 <_malloc_r+0xd0>
 8007716:	2a0b      	cmp	r2, #11
 8007718:	d917      	bls.n	800774a <_malloc_r+0xc2>
 800771a:	1961      	adds	r1, r4, r5
 800771c:	42a3      	cmp	r3, r4
 800771e:	6025      	str	r5, [r4, #0]
 8007720:	bf18      	it	ne
 8007722:	6059      	strne	r1, [r3, #4]
 8007724:	6863      	ldr	r3, [r4, #4]
 8007726:	bf08      	it	eq
 8007728:	f8c8 1000 	streq.w	r1, [r8]
 800772c:	5162      	str	r2, [r4, r5]
 800772e:	604b      	str	r3, [r1, #4]
 8007730:	4630      	mov	r0, r6
 8007732:	f000 fa63 	bl	8007bfc <__malloc_unlock>
 8007736:	f104 000b 	add.w	r0, r4, #11
 800773a:	1d23      	adds	r3, r4, #4
 800773c:	f020 0007 	bic.w	r0, r0, #7
 8007740:	1ac2      	subs	r2, r0, r3
 8007742:	bf1c      	itt	ne
 8007744:	1a1b      	subne	r3, r3, r0
 8007746:	50a3      	strne	r3, [r4, r2]
 8007748:	e7af      	b.n	80076aa <_malloc_r+0x22>
 800774a:	6862      	ldr	r2, [r4, #4]
 800774c:	42a3      	cmp	r3, r4
 800774e:	bf0c      	ite	eq
 8007750:	f8c8 2000 	streq.w	r2, [r8]
 8007754:	605a      	strne	r2, [r3, #4]
 8007756:	e7eb      	b.n	8007730 <_malloc_r+0xa8>
 8007758:	4623      	mov	r3, r4
 800775a:	6864      	ldr	r4, [r4, #4]
 800775c:	e7ae      	b.n	80076bc <_malloc_r+0x34>
 800775e:	463c      	mov	r4, r7
 8007760:	687f      	ldr	r7, [r7, #4]
 8007762:	e7b6      	b.n	80076d2 <_malloc_r+0x4a>
 8007764:	461a      	mov	r2, r3
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	42a3      	cmp	r3, r4
 800776a:	d1fb      	bne.n	8007764 <_malloc_r+0xdc>
 800776c:	2300      	movs	r3, #0
 800776e:	6053      	str	r3, [r2, #4]
 8007770:	e7de      	b.n	8007730 <_malloc_r+0xa8>
 8007772:	230c      	movs	r3, #12
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	4630      	mov	r0, r6
 8007778:	f000 fa40 	bl	8007bfc <__malloc_unlock>
 800777c:	e794      	b.n	80076a8 <_malloc_r+0x20>
 800777e:	6005      	str	r5, [r0, #0]
 8007780:	e7d6      	b.n	8007730 <_malloc_r+0xa8>
 8007782:	bf00      	nop
 8007784:	200005e4 	.word	0x200005e4

08007788 <_scanf_chars>:
 8007788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800778c:	4615      	mov	r5, r2
 800778e:	688a      	ldr	r2, [r1, #8]
 8007790:	4680      	mov	r8, r0
 8007792:	460c      	mov	r4, r1
 8007794:	b932      	cbnz	r2, 80077a4 <_scanf_chars+0x1c>
 8007796:	698a      	ldr	r2, [r1, #24]
 8007798:	2a00      	cmp	r2, #0
 800779a:	bf14      	ite	ne
 800779c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80077a0:	2201      	moveq	r2, #1
 80077a2:	608a      	str	r2, [r1, #8]
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007838 <_scanf_chars+0xb0>
 80077aa:	06d1      	lsls	r1, r2, #27
 80077ac:	bf5f      	itttt	pl
 80077ae:	681a      	ldrpl	r2, [r3, #0]
 80077b0:	1d11      	addpl	r1, r2, #4
 80077b2:	6019      	strpl	r1, [r3, #0]
 80077b4:	6816      	ldrpl	r6, [r2, #0]
 80077b6:	2700      	movs	r7, #0
 80077b8:	69a0      	ldr	r0, [r4, #24]
 80077ba:	b188      	cbz	r0, 80077e0 <_scanf_chars+0x58>
 80077bc:	2801      	cmp	r0, #1
 80077be:	d107      	bne.n	80077d0 <_scanf_chars+0x48>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	6963      	ldr	r3, [r4, #20]
 80077c6:	5c9b      	ldrb	r3, [r3, r2]
 80077c8:	b953      	cbnz	r3, 80077e0 <_scanf_chars+0x58>
 80077ca:	2f00      	cmp	r7, #0
 80077cc:	d031      	beq.n	8007832 <_scanf_chars+0xaa>
 80077ce:	e022      	b.n	8007816 <_scanf_chars+0x8e>
 80077d0:	2802      	cmp	r0, #2
 80077d2:	d120      	bne.n	8007816 <_scanf_chars+0x8e>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80077dc:	071b      	lsls	r3, r3, #28
 80077de:	d41a      	bmi.n	8007816 <_scanf_chars+0x8e>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	06da      	lsls	r2, r3, #27
 80077e4:	bf5e      	ittt	pl
 80077e6:	682b      	ldrpl	r3, [r5, #0]
 80077e8:	781b      	ldrbpl	r3, [r3, #0]
 80077ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 80077ee:	682a      	ldr	r2, [r5, #0]
 80077f0:	686b      	ldr	r3, [r5, #4]
 80077f2:	3201      	adds	r2, #1
 80077f4:	602a      	str	r2, [r5, #0]
 80077f6:	68a2      	ldr	r2, [r4, #8]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	3a01      	subs	r2, #1
 80077fc:	606b      	str	r3, [r5, #4]
 80077fe:	3701      	adds	r7, #1
 8007800:	60a2      	str	r2, [r4, #8]
 8007802:	b142      	cbz	r2, 8007816 <_scanf_chars+0x8e>
 8007804:	2b00      	cmp	r3, #0
 8007806:	dcd7      	bgt.n	80077b8 <_scanf_chars+0x30>
 8007808:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800780c:	4629      	mov	r1, r5
 800780e:	4640      	mov	r0, r8
 8007810:	4798      	blx	r3
 8007812:	2800      	cmp	r0, #0
 8007814:	d0d0      	beq.n	80077b8 <_scanf_chars+0x30>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	f013 0310 	ands.w	r3, r3, #16
 800781c:	d105      	bne.n	800782a <_scanf_chars+0xa2>
 800781e:	68e2      	ldr	r2, [r4, #12]
 8007820:	3201      	adds	r2, #1
 8007822:	60e2      	str	r2, [r4, #12]
 8007824:	69a2      	ldr	r2, [r4, #24]
 8007826:	b102      	cbz	r2, 800782a <_scanf_chars+0xa2>
 8007828:	7033      	strb	r3, [r6, #0]
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	443b      	add	r3, r7
 800782e:	6123      	str	r3, [r4, #16]
 8007830:	2000      	movs	r0, #0
 8007832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007836:	bf00      	nop
 8007838:	080080fd 	.word	0x080080fd

0800783c <_scanf_i>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	4698      	mov	r8, r3
 8007842:	4b74      	ldr	r3, [pc, #464]	@ (8007a14 <_scanf_i+0x1d8>)
 8007844:	460c      	mov	r4, r1
 8007846:	4682      	mov	sl, r0
 8007848:	4616      	mov	r6, r2
 800784a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800784e:	b087      	sub	sp, #28
 8007850:	ab03      	add	r3, sp, #12
 8007852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007856:	4b70      	ldr	r3, [pc, #448]	@ (8007a18 <_scanf_i+0x1dc>)
 8007858:	69a1      	ldr	r1, [r4, #24]
 800785a:	4a70      	ldr	r2, [pc, #448]	@ (8007a1c <_scanf_i+0x1e0>)
 800785c:	2903      	cmp	r1, #3
 800785e:	bf08      	it	eq
 8007860:	461a      	moveq	r2, r3
 8007862:	68a3      	ldr	r3, [r4, #8]
 8007864:	9201      	str	r2, [sp, #4]
 8007866:	1e5a      	subs	r2, r3, #1
 8007868:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800786c:	bf88      	it	hi
 800786e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007872:	4627      	mov	r7, r4
 8007874:	bf82      	ittt	hi
 8007876:	eb03 0905 	addhi.w	r9, r3, r5
 800787a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800787e:	60a3      	strhi	r3, [r4, #8]
 8007880:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007884:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007888:	bf98      	it	ls
 800788a:	f04f 0900 	movls.w	r9, #0
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	463d      	mov	r5, r7
 8007892:	f04f 0b00 	mov.w	fp, #0
 8007896:	6831      	ldr	r1, [r6, #0]
 8007898:	ab03      	add	r3, sp, #12
 800789a:	7809      	ldrb	r1, [r1, #0]
 800789c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80078a0:	2202      	movs	r2, #2
 80078a2:	f7f8 fcc5 	bl	8000230 <memchr>
 80078a6:	b328      	cbz	r0, 80078f4 <_scanf_i+0xb8>
 80078a8:	f1bb 0f01 	cmp.w	fp, #1
 80078ac:	d159      	bne.n	8007962 <_scanf_i+0x126>
 80078ae:	6862      	ldr	r2, [r4, #4]
 80078b0:	b92a      	cbnz	r2, 80078be <_scanf_i+0x82>
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	2108      	movs	r1, #8
 80078b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ba:	6061      	str	r1, [r4, #4]
 80078bc:	6022      	str	r2, [r4, #0]
 80078be:	6822      	ldr	r2, [r4, #0]
 80078c0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80078c4:	6022      	str	r2, [r4, #0]
 80078c6:	68a2      	ldr	r2, [r4, #8]
 80078c8:	1e51      	subs	r1, r2, #1
 80078ca:	60a1      	str	r1, [r4, #8]
 80078cc:	b192      	cbz	r2, 80078f4 <_scanf_i+0xb8>
 80078ce:	6832      	ldr	r2, [r6, #0]
 80078d0:	1c51      	adds	r1, r2, #1
 80078d2:	6031      	str	r1, [r6, #0]
 80078d4:	7812      	ldrb	r2, [r2, #0]
 80078d6:	f805 2b01 	strb.w	r2, [r5], #1
 80078da:	6872      	ldr	r2, [r6, #4]
 80078dc:	3a01      	subs	r2, #1
 80078de:	2a00      	cmp	r2, #0
 80078e0:	6072      	str	r2, [r6, #4]
 80078e2:	dc07      	bgt.n	80078f4 <_scanf_i+0xb8>
 80078e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80078e8:	4631      	mov	r1, r6
 80078ea:	4650      	mov	r0, sl
 80078ec:	4790      	blx	r2
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f040 8085 	bne.w	80079fe <_scanf_i+0x1c2>
 80078f4:	f10b 0b01 	add.w	fp, fp, #1
 80078f8:	f1bb 0f03 	cmp.w	fp, #3
 80078fc:	d1cb      	bne.n	8007896 <_scanf_i+0x5a>
 80078fe:	6863      	ldr	r3, [r4, #4]
 8007900:	b90b      	cbnz	r3, 8007906 <_scanf_i+0xca>
 8007902:	230a      	movs	r3, #10
 8007904:	6063      	str	r3, [r4, #4]
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	4945      	ldr	r1, [pc, #276]	@ (8007a20 <_scanf_i+0x1e4>)
 800790a:	6960      	ldr	r0, [r4, #20]
 800790c:	1ac9      	subs	r1, r1, r3
 800790e:	f000 f889 	bl	8007a24 <__sccl>
 8007912:	f04f 0b00 	mov.w	fp, #0
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	6822      	ldr	r2, [r4, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d03d      	beq.n	800799a <_scanf_i+0x15e>
 800791e:	6831      	ldr	r1, [r6, #0]
 8007920:	6960      	ldr	r0, [r4, #20]
 8007922:	f891 c000 	ldrb.w	ip, [r1]
 8007926:	f810 000c 	ldrb.w	r0, [r0, ip]
 800792a:	2800      	cmp	r0, #0
 800792c:	d035      	beq.n	800799a <_scanf_i+0x15e>
 800792e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007932:	d124      	bne.n	800797e <_scanf_i+0x142>
 8007934:	0510      	lsls	r0, r2, #20
 8007936:	d522      	bpl.n	800797e <_scanf_i+0x142>
 8007938:	f10b 0b01 	add.w	fp, fp, #1
 800793c:	f1b9 0f00 	cmp.w	r9, #0
 8007940:	d003      	beq.n	800794a <_scanf_i+0x10e>
 8007942:	3301      	adds	r3, #1
 8007944:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8007948:	60a3      	str	r3, [r4, #8]
 800794a:	6873      	ldr	r3, [r6, #4]
 800794c:	3b01      	subs	r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	6073      	str	r3, [r6, #4]
 8007952:	dd1b      	ble.n	800798c <_scanf_i+0x150>
 8007954:	6833      	ldr	r3, [r6, #0]
 8007956:	3301      	adds	r3, #1
 8007958:	6033      	str	r3, [r6, #0]
 800795a:	68a3      	ldr	r3, [r4, #8]
 800795c:	3b01      	subs	r3, #1
 800795e:	60a3      	str	r3, [r4, #8]
 8007960:	e7d9      	b.n	8007916 <_scanf_i+0xda>
 8007962:	f1bb 0f02 	cmp.w	fp, #2
 8007966:	d1ae      	bne.n	80078c6 <_scanf_i+0x8a>
 8007968:	6822      	ldr	r2, [r4, #0]
 800796a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800796e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007972:	d1bf      	bne.n	80078f4 <_scanf_i+0xb8>
 8007974:	2110      	movs	r1, #16
 8007976:	6061      	str	r1, [r4, #4]
 8007978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800797c:	e7a2      	b.n	80078c4 <_scanf_i+0x88>
 800797e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007982:	6022      	str	r2, [r4, #0]
 8007984:	780b      	ldrb	r3, [r1, #0]
 8007986:	f805 3b01 	strb.w	r3, [r5], #1
 800798a:	e7de      	b.n	800794a <_scanf_i+0x10e>
 800798c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007990:	4631      	mov	r1, r6
 8007992:	4650      	mov	r0, sl
 8007994:	4798      	blx	r3
 8007996:	2800      	cmp	r0, #0
 8007998:	d0df      	beq.n	800795a <_scanf_i+0x11e>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	05d9      	lsls	r1, r3, #23
 800799e:	d50d      	bpl.n	80079bc <_scanf_i+0x180>
 80079a0:	42bd      	cmp	r5, r7
 80079a2:	d909      	bls.n	80079b8 <_scanf_i+0x17c>
 80079a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80079a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079ac:	4632      	mov	r2, r6
 80079ae:	4650      	mov	r0, sl
 80079b0:	4798      	blx	r3
 80079b2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80079b6:	464d      	mov	r5, r9
 80079b8:	42bd      	cmp	r5, r7
 80079ba:	d028      	beq.n	8007a0e <_scanf_i+0x1d2>
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	f012 0210 	ands.w	r2, r2, #16
 80079c2:	d113      	bne.n	80079ec <_scanf_i+0x1b0>
 80079c4:	702a      	strb	r2, [r5, #0]
 80079c6:	6863      	ldr	r3, [r4, #4]
 80079c8:	9e01      	ldr	r6, [sp, #4]
 80079ca:	4639      	mov	r1, r7
 80079cc:	4650      	mov	r0, sl
 80079ce:	47b0      	blx	r6
 80079d0:	f8d8 3000 	ldr.w	r3, [r8]
 80079d4:	6821      	ldr	r1, [r4, #0]
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	f8c8 2000 	str.w	r2, [r8]
 80079dc:	f011 0f20 	tst.w	r1, #32
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	d00f      	beq.n	8007a04 <_scanf_i+0x1c8>
 80079e4:	6018      	str	r0, [r3, #0]
 80079e6:	68e3      	ldr	r3, [r4, #12]
 80079e8:	3301      	adds	r3, #1
 80079ea:	60e3      	str	r3, [r4, #12]
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	1bed      	subs	r5, r5, r7
 80079f0:	445d      	add	r5, fp
 80079f2:	442b      	add	r3, r5
 80079f4:	6123      	str	r3, [r4, #16]
 80079f6:	2000      	movs	r0, #0
 80079f8:	b007      	add	sp, #28
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	f04f 0b00 	mov.w	fp, #0
 8007a02:	e7ca      	b.n	800799a <_scanf_i+0x15e>
 8007a04:	07ca      	lsls	r2, r1, #31
 8007a06:	bf4c      	ite	mi
 8007a08:	8018      	strhmi	r0, [r3, #0]
 8007a0a:	6018      	strpl	r0, [r3, #0]
 8007a0c:	e7eb      	b.n	80079e6 <_scanf_i+0x1aa>
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e7f2      	b.n	80079f8 <_scanf_i+0x1bc>
 8007a12:	bf00      	nop
 8007a14:	080080b0 	.word	0x080080b0
 8007a18:	08007011 	.word	0x08007011
 8007a1c:	08007db5 	.word	0x08007db5
 8007a20:	08008211 	.word	0x08008211

08007a24 <__sccl>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	780b      	ldrb	r3, [r1, #0]
 8007a28:	4604      	mov	r4, r0
 8007a2a:	2b5e      	cmp	r3, #94	@ 0x5e
 8007a2c:	bf0b      	itete	eq
 8007a2e:	784b      	ldrbeq	r3, [r1, #1]
 8007a30:	1c4a      	addne	r2, r1, #1
 8007a32:	1c8a      	addeq	r2, r1, #2
 8007a34:	2100      	movne	r1, #0
 8007a36:	bf08      	it	eq
 8007a38:	2101      	moveq	r1, #1
 8007a3a:	3801      	subs	r0, #1
 8007a3c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007a40:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007a44:	42a8      	cmp	r0, r5
 8007a46:	d1fb      	bne.n	8007a40 <__sccl+0x1c>
 8007a48:	b90b      	cbnz	r3, 8007a4e <__sccl+0x2a>
 8007a4a:	1e50      	subs	r0, r2, #1
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
 8007a4e:	f081 0101 	eor.w	r1, r1, #1
 8007a52:	54e1      	strb	r1, [r4, r3]
 8007a54:	4610      	mov	r0, r2
 8007a56:	4602      	mov	r2, r0
 8007a58:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007a5c:	2d2d      	cmp	r5, #45	@ 0x2d
 8007a5e:	d005      	beq.n	8007a6c <__sccl+0x48>
 8007a60:	2d5d      	cmp	r5, #93	@ 0x5d
 8007a62:	d016      	beq.n	8007a92 <__sccl+0x6e>
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	d0f1      	beq.n	8007a4c <__sccl+0x28>
 8007a68:	462b      	mov	r3, r5
 8007a6a:	e7f2      	b.n	8007a52 <__sccl+0x2e>
 8007a6c:	7846      	ldrb	r6, [r0, #1]
 8007a6e:	2e5d      	cmp	r6, #93	@ 0x5d
 8007a70:	d0fa      	beq.n	8007a68 <__sccl+0x44>
 8007a72:	42b3      	cmp	r3, r6
 8007a74:	dcf8      	bgt.n	8007a68 <__sccl+0x44>
 8007a76:	3002      	adds	r0, #2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	4296      	cmp	r6, r2
 8007a7e:	54a1      	strb	r1, [r4, r2]
 8007a80:	dcfb      	bgt.n	8007a7a <__sccl+0x56>
 8007a82:	1af2      	subs	r2, r6, r3
 8007a84:	3a01      	subs	r2, #1
 8007a86:	1c5d      	adds	r5, r3, #1
 8007a88:	42b3      	cmp	r3, r6
 8007a8a:	bfa8      	it	ge
 8007a8c:	2200      	movge	r2, #0
 8007a8e:	18ab      	adds	r3, r5, r2
 8007a90:	e7e1      	b.n	8007a56 <__sccl+0x32>
 8007a92:	4610      	mov	r0, r2
 8007a94:	e7da      	b.n	8007a4c <__sccl+0x28>
	...

08007a98 <__sflush_r>:
 8007a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa0:	0716      	lsls	r6, r2, #28
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	d454      	bmi.n	8007b52 <__sflush_r+0xba>
 8007aa8:	684b      	ldr	r3, [r1, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dc02      	bgt.n	8007ab4 <__sflush_r+0x1c>
 8007aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dd48      	ble.n	8007b46 <__sflush_r+0xae>
 8007ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ab6:	2e00      	cmp	r6, #0
 8007ab8:	d045      	beq.n	8007b46 <__sflush_r+0xae>
 8007aba:	2300      	movs	r3, #0
 8007abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ac0:	682f      	ldr	r7, [r5, #0]
 8007ac2:	6a21      	ldr	r1, [r4, #32]
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	d030      	beq.n	8007b2a <__sflush_r+0x92>
 8007ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	0759      	lsls	r1, r3, #29
 8007ace:	d505      	bpl.n	8007adc <__sflush_r+0x44>
 8007ad0:	6863      	ldr	r3, [r4, #4]
 8007ad2:	1ad2      	subs	r2, r2, r3
 8007ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ad6:	b10b      	cbz	r3, 8007adc <__sflush_r+0x44>
 8007ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	2300      	movs	r3, #0
 8007ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ae0:	6a21      	ldr	r1, [r4, #32]
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b0      	blx	r6
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	d106      	bne.n	8007afa <__sflush_r+0x62>
 8007aec:	6829      	ldr	r1, [r5, #0]
 8007aee:	291d      	cmp	r1, #29
 8007af0:	d82b      	bhi.n	8007b4a <__sflush_r+0xb2>
 8007af2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b9c <__sflush_r+0x104>)
 8007af4:	410a      	asrs	r2, r1
 8007af6:	07d6      	lsls	r6, r2, #31
 8007af8:	d427      	bmi.n	8007b4a <__sflush_r+0xb2>
 8007afa:	2200      	movs	r2, #0
 8007afc:	6062      	str	r2, [r4, #4]
 8007afe:	04d9      	lsls	r1, r3, #19
 8007b00:	6922      	ldr	r2, [r4, #16]
 8007b02:	6022      	str	r2, [r4, #0]
 8007b04:	d504      	bpl.n	8007b10 <__sflush_r+0x78>
 8007b06:	1c42      	adds	r2, r0, #1
 8007b08:	d101      	bne.n	8007b0e <__sflush_r+0x76>
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	b903      	cbnz	r3, 8007b10 <__sflush_r+0x78>
 8007b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b12:	602f      	str	r7, [r5, #0]
 8007b14:	b1b9      	cbz	r1, 8007b46 <__sflush_r+0xae>
 8007b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b1a:	4299      	cmp	r1, r3
 8007b1c:	d002      	beq.n	8007b24 <__sflush_r+0x8c>
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f7ff fb7a 	bl	8007218 <_free_r>
 8007b24:	2300      	movs	r3, #0
 8007b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b28:	e00d      	b.n	8007b46 <__sflush_r+0xae>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b0      	blx	r6
 8007b30:	4602      	mov	r2, r0
 8007b32:	1c50      	adds	r0, r2, #1
 8007b34:	d1c9      	bne.n	8007aca <__sflush_r+0x32>
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0c6      	beq.n	8007aca <__sflush_r+0x32>
 8007b3c:	2b1d      	cmp	r3, #29
 8007b3e:	d001      	beq.n	8007b44 <__sflush_r+0xac>
 8007b40:	2b16      	cmp	r3, #22
 8007b42:	d11e      	bne.n	8007b82 <__sflush_r+0xea>
 8007b44:	602f      	str	r7, [r5, #0]
 8007b46:	2000      	movs	r0, #0
 8007b48:	e022      	b.n	8007b90 <__sflush_r+0xf8>
 8007b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b4e:	b21b      	sxth	r3, r3
 8007b50:	e01b      	b.n	8007b8a <__sflush_r+0xf2>
 8007b52:	690f      	ldr	r7, [r1, #16]
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	d0f6      	beq.n	8007b46 <__sflush_r+0xae>
 8007b58:	0793      	lsls	r3, r2, #30
 8007b5a:	680e      	ldr	r6, [r1, #0]
 8007b5c:	bf08      	it	eq
 8007b5e:	694b      	ldreq	r3, [r1, #20]
 8007b60:	600f      	str	r7, [r1, #0]
 8007b62:	bf18      	it	ne
 8007b64:	2300      	movne	r3, #0
 8007b66:	eba6 0807 	sub.w	r8, r6, r7
 8007b6a:	608b      	str	r3, [r1, #8]
 8007b6c:	f1b8 0f00 	cmp.w	r8, #0
 8007b70:	dde9      	ble.n	8007b46 <__sflush_r+0xae>
 8007b72:	6a21      	ldr	r1, [r4, #32]
 8007b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b76:	4643      	mov	r3, r8
 8007b78:	463a      	mov	r2, r7
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	47b0      	blx	r6
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	dc08      	bgt.n	8007b94 <__sflush_r+0xfc>
 8007b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b94:	4407      	add	r7, r0
 8007b96:	eba8 0800 	sub.w	r8, r8, r0
 8007b9a:	e7e7      	b.n	8007b6c <__sflush_r+0xd4>
 8007b9c:	dfbffffe 	.word	0xdfbffffe

08007ba0 <_fflush_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	690b      	ldr	r3, [r1, #16]
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	b913      	cbnz	r3, 8007bb0 <_fflush_r+0x10>
 8007baa:	2500      	movs	r5, #0
 8007bac:	4628      	mov	r0, r5
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	b118      	cbz	r0, 8007bba <_fflush_r+0x1a>
 8007bb2:	6a03      	ldr	r3, [r0, #32]
 8007bb4:	b90b      	cbnz	r3, 8007bba <_fflush_r+0x1a>
 8007bb6:	f7ff f999 	bl	8006eec <__sinit>
 8007bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f3      	beq.n	8007baa <_fflush_r+0xa>
 8007bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bc4:	07d0      	lsls	r0, r2, #31
 8007bc6:	d404      	bmi.n	8007bd2 <_fflush_r+0x32>
 8007bc8:	0599      	lsls	r1, r3, #22
 8007bca:	d402      	bmi.n	8007bd2 <_fflush_r+0x32>
 8007bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bce:	f7ff fb20 	bl	8007212 <__retarget_lock_acquire_recursive>
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f7ff ff5f 	bl	8007a98 <__sflush_r>
 8007bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bdc:	07da      	lsls	r2, r3, #31
 8007bde:	4605      	mov	r5, r0
 8007be0:	d4e4      	bmi.n	8007bac <_fflush_r+0xc>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	059b      	lsls	r3, r3, #22
 8007be6:	d4e1      	bmi.n	8007bac <_fflush_r+0xc>
 8007be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bea:	f7ff fb13 	bl	8007214 <__retarget_lock_release_recursive>
 8007bee:	e7dd      	b.n	8007bac <_fflush_r+0xc>

08007bf0 <__malloc_lock>:
 8007bf0:	4801      	ldr	r0, [pc, #4]	@ (8007bf8 <__malloc_lock+0x8>)
 8007bf2:	f7ff bb0e 	b.w	8007212 <__retarget_lock_acquire_recursive>
 8007bf6:	bf00      	nop
 8007bf8:	200005dc 	.word	0x200005dc

08007bfc <__malloc_unlock>:
 8007bfc:	4801      	ldr	r0, [pc, #4]	@ (8007c04 <__malloc_unlock+0x8>)
 8007bfe:	f7ff bb09 	b.w	8007214 <__retarget_lock_release_recursive>
 8007c02:	bf00      	nop
 8007c04:	200005dc 	.word	0x200005dc

08007c08 <__submore>:
 8007c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007c10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c14:	4299      	cmp	r1, r3
 8007c16:	d11d      	bne.n	8007c54 <__submore+0x4c>
 8007c18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c1c:	f7ff fd34 	bl	8007688 <_malloc_r>
 8007c20:	b918      	cbnz	r0, 8007c2a <__submore+0x22>
 8007c22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c2e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007c30:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007c34:	6360      	str	r0, [r4, #52]	@ 0x34
 8007c36:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007c3a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007c3e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007c42:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007c46:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007c4a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007c4e:	6020      	str	r0, [r4, #0]
 8007c50:	2000      	movs	r0, #0
 8007c52:	e7e8      	b.n	8007c26 <__submore+0x1e>
 8007c54:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007c56:	0077      	lsls	r7, r6, #1
 8007c58:	463a      	mov	r2, r7
 8007c5a:	f000 f80f 	bl	8007c7c <_realloc_r>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d0de      	beq.n	8007c22 <__submore+0x1a>
 8007c64:	eb00 0806 	add.w	r8, r0, r6
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	f000 f9cb 	bl	8008008 <memcpy>
 8007c72:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007c76:	f8c4 8000 	str.w	r8, [r4]
 8007c7a:	e7e9      	b.n	8007c50 <__submore+0x48>

08007c7c <_realloc_r>:
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	4680      	mov	r8, r0
 8007c82:	4615      	mov	r5, r2
 8007c84:	460c      	mov	r4, r1
 8007c86:	b921      	cbnz	r1, 8007c92 <_realloc_r+0x16>
 8007c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	f7ff bcfb 	b.w	8007688 <_malloc_r>
 8007c92:	b92a      	cbnz	r2, 8007ca0 <_realloc_r+0x24>
 8007c94:	f7ff fac0 	bl	8007218 <_free_r>
 8007c98:	2400      	movs	r4, #0
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca0:	f000 f9c0 	bl	8008024 <_malloc_usable_size_r>
 8007ca4:	4285      	cmp	r5, r0
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	d802      	bhi.n	8007cb0 <_realloc_r+0x34>
 8007caa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007cae:	d8f4      	bhi.n	8007c9a <_realloc_r+0x1e>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	f7ff fce8 	bl	8007688 <_malloc_r>
 8007cb8:	4607      	mov	r7, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d0ec      	beq.n	8007c98 <_realloc_r+0x1c>
 8007cbe:	42b5      	cmp	r5, r6
 8007cc0:	462a      	mov	r2, r5
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	bf28      	it	cs
 8007cc6:	4632      	movcs	r2, r6
 8007cc8:	f000 f99e 	bl	8008008 <memcpy>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f7ff faa2 	bl	8007218 <_free_r>
 8007cd4:	463c      	mov	r4, r7
 8007cd6:	e7e0      	b.n	8007c9a <_realloc_r+0x1e>

08007cd8 <_strtoul_l.constprop.0>:
 8007cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	4e34      	ldr	r6, [pc, #208]	@ (8007db0 <_strtoul_l.constprop.0+0xd8>)
 8007cde:	4686      	mov	lr, r0
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ce8:	5d37      	ldrb	r7, [r6, r4]
 8007cea:	f017 0708 	ands.w	r7, r7, #8
 8007cee:	d1f8      	bne.n	8007ce2 <_strtoul_l.constprop.0+0xa>
 8007cf0:	2c2d      	cmp	r4, #45	@ 0x2d
 8007cf2:	d12f      	bne.n	8007d54 <_strtoul_l.constprop.0+0x7c>
 8007cf4:	782c      	ldrb	r4, [r5, #0]
 8007cf6:	2701      	movs	r7, #1
 8007cf8:	1c85      	adds	r5, r0, #2
 8007cfa:	f033 0010 	bics.w	r0, r3, #16
 8007cfe:	d109      	bne.n	8007d14 <_strtoul_l.constprop.0+0x3c>
 8007d00:	2c30      	cmp	r4, #48	@ 0x30
 8007d02:	d12c      	bne.n	8007d5e <_strtoul_l.constprop.0+0x86>
 8007d04:	7828      	ldrb	r0, [r5, #0]
 8007d06:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007d0a:	2858      	cmp	r0, #88	@ 0x58
 8007d0c:	d127      	bne.n	8007d5e <_strtoul_l.constprop.0+0x86>
 8007d0e:	786c      	ldrb	r4, [r5, #1]
 8007d10:	2310      	movs	r3, #16
 8007d12:	3502      	adds	r5, #2
 8007d14:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8007d18:	2600      	movs	r6, #0
 8007d1a:	fbb8 f8f3 	udiv	r8, r8, r3
 8007d1e:	fb03 f908 	mul.w	r9, r3, r8
 8007d22:	ea6f 0909 	mvn.w	r9, r9
 8007d26:	4630      	mov	r0, r6
 8007d28:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007d2c:	f1bc 0f09 	cmp.w	ip, #9
 8007d30:	d81c      	bhi.n	8007d6c <_strtoul_l.constprop.0+0x94>
 8007d32:	4664      	mov	r4, ip
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	dd2a      	ble.n	8007d8e <_strtoul_l.constprop.0+0xb6>
 8007d38:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8007d3c:	d007      	beq.n	8007d4e <_strtoul_l.constprop.0+0x76>
 8007d3e:	4580      	cmp	r8, r0
 8007d40:	d322      	bcc.n	8007d88 <_strtoul_l.constprop.0+0xb0>
 8007d42:	d101      	bne.n	8007d48 <_strtoul_l.constprop.0+0x70>
 8007d44:	45a1      	cmp	r9, r4
 8007d46:	db1f      	blt.n	8007d88 <_strtoul_l.constprop.0+0xb0>
 8007d48:	fb00 4003 	mla	r0, r0, r3, r4
 8007d4c:	2601      	movs	r6, #1
 8007d4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d52:	e7e9      	b.n	8007d28 <_strtoul_l.constprop.0+0x50>
 8007d54:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d56:	bf04      	itt	eq
 8007d58:	782c      	ldrbeq	r4, [r5, #0]
 8007d5a:	1c85      	addeq	r5, r0, #2
 8007d5c:	e7cd      	b.n	8007cfa <_strtoul_l.constprop.0+0x22>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1d8      	bne.n	8007d14 <_strtoul_l.constprop.0+0x3c>
 8007d62:	2c30      	cmp	r4, #48	@ 0x30
 8007d64:	bf0c      	ite	eq
 8007d66:	2308      	moveq	r3, #8
 8007d68:	230a      	movne	r3, #10
 8007d6a:	e7d3      	b.n	8007d14 <_strtoul_l.constprop.0+0x3c>
 8007d6c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007d70:	f1bc 0f19 	cmp.w	ip, #25
 8007d74:	d801      	bhi.n	8007d7a <_strtoul_l.constprop.0+0xa2>
 8007d76:	3c37      	subs	r4, #55	@ 0x37
 8007d78:	e7dc      	b.n	8007d34 <_strtoul_l.constprop.0+0x5c>
 8007d7a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007d7e:	f1bc 0f19 	cmp.w	ip, #25
 8007d82:	d804      	bhi.n	8007d8e <_strtoul_l.constprop.0+0xb6>
 8007d84:	3c57      	subs	r4, #87	@ 0x57
 8007d86:	e7d5      	b.n	8007d34 <_strtoul_l.constprop.0+0x5c>
 8007d88:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8007d8c:	e7df      	b.n	8007d4e <_strtoul_l.constprop.0+0x76>
 8007d8e:	1c73      	adds	r3, r6, #1
 8007d90:	d106      	bne.n	8007da0 <_strtoul_l.constprop.0+0xc8>
 8007d92:	2322      	movs	r3, #34	@ 0x22
 8007d94:	f8ce 3000 	str.w	r3, [lr]
 8007d98:	4630      	mov	r0, r6
 8007d9a:	b932      	cbnz	r2, 8007daa <_strtoul_l.constprop.0+0xd2>
 8007d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007da0:	b107      	cbz	r7, 8007da4 <_strtoul_l.constprop.0+0xcc>
 8007da2:	4240      	negs	r0, r0
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	d0f9      	beq.n	8007d9c <_strtoul_l.constprop.0+0xc4>
 8007da8:	b106      	cbz	r6, 8007dac <_strtoul_l.constprop.0+0xd4>
 8007daa:	1e69      	subs	r1, r5, #1
 8007dac:	6011      	str	r1, [r2, #0]
 8007dae:	e7f5      	b.n	8007d9c <_strtoul_l.constprop.0+0xc4>
 8007db0:	080080fd 	.word	0x080080fd

08007db4 <_strtoul_r>:
 8007db4:	f7ff bf90 	b.w	8007cd8 <_strtoul_l.constprop.0>

08007db8 <__swbuf_r>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	460e      	mov	r6, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	b118      	cbz	r0, 8007dca <__swbuf_r+0x12>
 8007dc2:	6a03      	ldr	r3, [r0, #32]
 8007dc4:	b90b      	cbnz	r3, 8007dca <__swbuf_r+0x12>
 8007dc6:	f7ff f891 	bl	8006eec <__sinit>
 8007dca:	69a3      	ldr	r3, [r4, #24]
 8007dcc:	60a3      	str	r3, [r4, #8]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	071a      	lsls	r2, r3, #28
 8007dd2:	d501      	bpl.n	8007dd8 <__swbuf_r+0x20>
 8007dd4:	6923      	ldr	r3, [r4, #16]
 8007dd6:	b943      	cbnz	r3, 8007dea <__swbuf_r+0x32>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 f82a 	bl	8007e34 <__swsetup_r>
 8007de0:	b118      	cbz	r0, 8007dea <__swbuf_r+0x32>
 8007de2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007de6:	4638      	mov	r0, r7
 8007de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	6922      	ldr	r2, [r4, #16]
 8007dee:	1a98      	subs	r0, r3, r2
 8007df0:	6963      	ldr	r3, [r4, #20]
 8007df2:	b2f6      	uxtb	r6, r6
 8007df4:	4283      	cmp	r3, r0
 8007df6:	4637      	mov	r7, r6
 8007df8:	dc05      	bgt.n	8007e06 <__swbuf_r+0x4e>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f7ff fecf 	bl	8007ba0 <_fflush_r>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d1ed      	bne.n	8007de2 <__swbuf_r+0x2a>
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	60a3      	str	r3, [r4, #8]
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	6022      	str	r2, [r4, #0]
 8007e12:	701e      	strb	r6, [r3, #0]
 8007e14:	6962      	ldr	r2, [r4, #20]
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d004      	beq.n	8007e26 <__swbuf_r+0x6e>
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	07db      	lsls	r3, r3, #31
 8007e20:	d5e1      	bpl.n	8007de6 <__swbuf_r+0x2e>
 8007e22:	2e0a      	cmp	r6, #10
 8007e24:	d1df      	bne.n	8007de6 <__swbuf_r+0x2e>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f7ff feb9 	bl	8007ba0 <_fflush_r>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d0d9      	beq.n	8007de6 <__swbuf_r+0x2e>
 8007e32:	e7d6      	b.n	8007de2 <__swbuf_r+0x2a>

08007e34 <__swsetup_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4b29      	ldr	r3, [pc, #164]	@ (8007edc <__swsetup_r+0xa8>)
 8007e38:	4605      	mov	r5, r0
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	b118      	cbz	r0, 8007e48 <__swsetup_r+0x14>
 8007e40:	6a03      	ldr	r3, [r0, #32]
 8007e42:	b90b      	cbnz	r3, 8007e48 <__swsetup_r+0x14>
 8007e44:	f7ff f852 	bl	8006eec <__sinit>
 8007e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4c:	0719      	lsls	r1, r3, #28
 8007e4e:	d422      	bmi.n	8007e96 <__swsetup_r+0x62>
 8007e50:	06da      	lsls	r2, r3, #27
 8007e52:	d407      	bmi.n	8007e64 <__swsetup_r+0x30>
 8007e54:	2209      	movs	r2, #9
 8007e56:	602a      	str	r2, [r5, #0]
 8007e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e62:	e033      	b.n	8007ecc <__swsetup_r+0x98>
 8007e64:	0758      	lsls	r0, r3, #29
 8007e66:	d512      	bpl.n	8007e8e <__swsetup_r+0x5a>
 8007e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e6a:	b141      	cbz	r1, 8007e7e <__swsetup_r+0x4a>
 8007e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e70:	4299      	cmp	r1, r3
 8007e72:	d002      	beq.n	8007e7a <__swsetup_r+0x46>
 8007e74:	4628      	mov	r0, r5
 8007e76:	f7ff f9cf 	bl	8007218 <_free_r>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	2300      	movs	r3, #0
 8007e88:	6063      	str	r3, [r4, #4]
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	f043 0308 	orr.w	r3, r3, #8
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	b94b      	cbnz	r3, 8007eae <__swsetup_r+0x7a>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea4:	d003      	beq.n	8007eae <__swsetup_r+0x7a>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 f83f 	bl	8007f2c <__smakebuf_r>
 8007eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb2:	f013 0201 	ands.w	r2, r3, #1
 8007eb6:	d00a      	beq.n	8007ece <__swsetup_r+0x9a>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	60a2      	str	r2, [r4, #8]
 8007ebc:	6962      	ldr	r2, [r4, #20]
 8007ebe:	4252      	negs	r2, r2
 8007ec0:	61a2      	str	r2, [r4, #24]
 8007ec2:	6922      	ldr	r2, [r4, #16]
 8007ec4:	b942      	cbnz	r2, 8007ed8 <__swsetup_r+0xa4>
 8007ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007eca:	d1c5      	bne.n	8007e58 <__swsetup_r+0x24>
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
 8007ece:	0799      	lsls	r1, r3, #30
 8007ed0:	bf58      	it	pl
 8007ed2:	6962      	ldrpl	r2, [r4, #20]
 8007ed4:	60a2      	str	r2, [r4, #8]
 8007ed6:	e7f4      	b.n	8007ec2 <__swsetup_r+0x8e>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e7f7      	b.n	8007ecc <__swsetup_r+0x98>
 8007edc:	20000078 	.word	0x20000078

08007ee0 <__swhatbuf_r>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	b096      	sub	sp, #88	@ 0x58
 8007eec:	4615      	mov	r5, r2
 8007eee:	461e      	mov	r6, r3
 8007ef0:	da0d      	bge.n	8007f0e <__swhatbuf_r+0x2e>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ef8:	f04f 0100 	mov.w	r1, #0
 8007efc:	bf14      	ite	ne
 8007efe:	2340      	movne	r3, #64	@ 0x40
 8007f00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f04:	2000      	movs	r0, #0
 8007f06:	6031      	str	r1, [r6, #0]
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	b016      	add	sp, #88	@ 0x58
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	466a      	mov	r2, sp
 8007f10:	f000 f848 	bl	8007fa4 <_fstat_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	dbec      	blt.n	8007ef2 <__swhatbuf_r+0x12>
 8007f18:	9901      	ldr	r1, [sp, #4]
 8007f1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f22:	4259      	negs	r1, r3
 8007f24:	4159      	adcs	r1, r3
 8007f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f2a:	e7eb      	b.n	8007f04 <__swhatbuf_r+0x24>

08007f2c <__smakebuf_r>:
 8007f2c:	898b      	ldrh	r3, [r1, #12]
 8007f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f30:	079d      	lsls	r5, r3, #30
 8007f32:	4606      	mov	r6, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	d507      	bpl.n	8007f48 <__smakebuf_r+0x1c>
 8007f38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	6123      	str	r3, [r4, #16]
 8007f40:	2301      	movs	r3, #1
 8007f42:	6163      	str	r3, [r4, #20]
 8007f44:	b003      	add	sp, #12
 8007f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f48:	ab01      	add	r3, sp, #4
 8007f4a:	466a      	mov	r2, sp
 8007f4c:	f7ff ffc8 	bl	8007ee0 <__swhatbuf_r>
 8007f50:	9f00      	ldr	r7, [sp, #0]
 8007f52:	4605      	mov	r5, r0
 8007f54:	4639      	mov	r1, r7
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff fb96 	bl	8007688 <_malloc_r>
 8007f5c:	b948      	cbnz	r0, 8007f72 <__smakebuf_r+0x46>
 8007f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f62:	059a      	lsls	r2, r3, #22
 8007f64:	d4ee      	bmi.n	8007f44 <__smakebuf_r+0x18>
 8007f66:	f023 0303 	bic.w	r3, r3, #3
 8007f6a:	f043 0302 	orr.w	r3, r3, #2
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	e7e2      	b.n	8007f38 <__smakebuf_r+0xc>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	6020      	str	r0, [r4, #0]
 8007f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f82:	b15b      	cbz	r3, 8007f9c <__smakebuf_r+0x70>
 8007f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f000 f81d 	bl	8007fc8 <_isatty_r>
 8007f8e:	b128      	cbz	r0, 8007f9c <__smakebuf_r+0x70>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	431d      	orrs	r5, r3
 8007fa0:	81a5      	strh	r5, [r4, #12]
 8007fa2:	e7cf      	b.n	8007f44 <__smakebuf_r+0x18>

08007fa4 <_fstat_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d07      	ldr	r5, [pc, #28]	@ (8007fc4 <_fstat_r+0x20>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	4611      	mov	r1, r2
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	f7fa fa75 	bl	80024a0 <_fstat>
 8007fb6:	1c43      	adds	r3, r0, #1
 8007fb8:	d102      	bne.n	8007fc0 <_fstat_r+0x1c>
 8007fba:	682b      	ldr	r3, [r5, #0]
 8007fbc:	b103      	cbz	r3, 8007fc0 <_fstat_r+0x1c>
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	bd38      	pop	{r3, r4, r5, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200005d8 	.word	0x200005d8

08007fc8 <_isatty_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	@ (8007fe4 <_isatty_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f7fa fa74 	bl	80024c0 <_isatty>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_isatty_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_isatty_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	200005d8 	.word	0x200005d8

08007fe8 <_sbrk_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d06      	ldr	r5, [pc, #24]	@ (8008004 <_sbrk_r+0x1c>)
 8007fec:	2300      	movs	r3, #0
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	f7fa fa7c 	bl	80024f0 <_sbrk>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_sbrk_r+0x1a>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_sbrk_r+0x1a>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	200005d8 	.word	0x200005d8

08008008 <memcpy>:
 8008008:	440a      	add	r2, r1
 800800a:	4291      	cmp	r1, r2
 800800c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008010:	d100      	bne.n	8008014 <memcpy+0xc>
 8008012:	4770      	bx	lr
 8008014:	b510      	push	{r4, lr}
 8008016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800801a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800801e:	4291      	cmp	r1, r2
 8008020:	d1f9      	bne.n	8008016 <memcpy+0xe>
 8008022:	bd10      	pop	{r4, pc}

08008024 <_malloc_usable_size_r>:
 8008024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008028:	1f18      	subs	r0, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	bfbc      	itt	lt
 800802e:	580b      	ldrlt	r3, [r1, r0]
 8008030:	18c0      	addlt	r0, r0, r3
 8008032:	4770      	bx	lr

08008034 <_init>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr

08008040 <_fini>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	bf00      	nop
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr
