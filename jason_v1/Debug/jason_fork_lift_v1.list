
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f8  080051f8  00007030  2**0
                  CONTENTS
  4 .ARM          00000008  080051f8  080051f8  000061f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005200  08005200  00007030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005200  08005200  00006200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005204  08005204  00006204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08005208  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000030  08005238  00007030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005238  00007270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126b6  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268a  00000000  00000000  00019716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbe  00000000  00000000  0001cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025e9  00000000  00000000  0001dab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d4e  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9533  00000000  00000000  00033ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  0010d364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00111914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080051a0 	.word	0x080051a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	080051a0 	.word	0x080051a0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	4a49      	ldr	r2, [pc, #292]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d16:	4b47      	ldr	r3, [pc, #284]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4b44      	ldr	r3, [pc, #272]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a43      	ldr	r2, [pc, #268]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b41      	ldr	r3, [pc, #260]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d40:	f043 0320 	orr.w	r3, r3, #32
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b3b      	ldr	r3, [pc, #236]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0320 	and.w	r3, r3, #32
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b38      	ldr	r3, [pc, #224]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a37      	ldr	r2, [pc, #220]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b32      	ldr	r3, [pc, #200]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a31      	ldr	r2, [pc, #196]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b2f      	ldr	r3, [pc, #188]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	482c      	ldr	r0, [pc, #176]	@ (8000e38 <MX_GPIO_Init+0x144>)
 8000d88:	f001 fa0c 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f001 fa05 	bl	80021a4 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000da0:	4826      	ldr	r0, [pc, #152]	@ (8000e3c <MX_GPIO_Init+0x148>)
 8000da2:	f001 f9ff 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dac:	4824      	ldr	r0, [pc, #144]	@ (8000e40 <MX_GPIO_Init+0x14c>)
 8000dae:	f001 f9f9 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 8000db2:	2308      	movs	r3, #8
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481b      	ldr	r0, [pc, #108]	@ (8000e38 <MX_GPIO_Init+0x144>)
 8000dca:	f001 f869 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 8000dce:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8000dd2:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dea:	f001 f859 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000dee:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_GPIO_Init+0x148>)
 8000e08:	f001 f84a 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 8000e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <MX_GPIO_Init+0x14c>)
 8000e26:	f001 f83b 	bl	8001ea0 <HAL_GPIO_Init>

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	@ 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000800 	.word	0x48000800
 8000e3c:	48001000 	.word	0x48001000
 8000e40:	48000c00 	.word	0x48000c00

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 feb3 	bl	8001bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f85a 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f7ff ff50 	bl	8000cf4 <MX_GPIO_Init>
  MX_UART5_Init();
 8000e54:	f000 fdc0 	bl	80019d8 <MX_UART5_Init>
  MX_TIM1_Init();
 8000e58:	f000 fa96 	bl	8001388 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e5c:	f000 faee 	bl	800143c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e60:	f000 fb84 	bl	800156c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e64:	f000 fbd8 	bl	8001618 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e68:	f000 fc2c 	bl	80016c4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e72:	481e      	ldr	r0, [pc, #120]	@ (8000eec <main+0xa8>)
 8000e74:	f001 f996 	bl	80021a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e7e:	481b      	ldr	r0, [pc, #108]	@ (8000eec <main+0xa8>)
 8000e80:	f001 f990 	bl	80021a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e8a:	4818      	ldr	r0, [pc, #96]	@ (8000eec <main+0xa8>)
 8000e8c:	f001 f98a 	bl	80021a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	4815      	ldr	r0, [pc, #84]	@ (8000eec <main+0xa8>)
 8000e96:	f001 f985 	bl	80021a4 <HAL_GPIO_WritePin>

  servo_reset_all();
 8000e9a:	f000 f9ed 	bl	8001278 <servo_reset_all>
  HAL_Delay(2000);
 8000e9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ea2:	f000 fef7 	bl	8001c94 <HAL_Delay>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2180      	movs	r1, #128	@ 0x80
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <main+0xa8>)
 8000eac:	f001 f97a 	bl	80021a4 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    test_encoder[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <main+0xac>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <main+0xb0>)
 8000eba:	601a      	str	r2, [r3, #0]
    test_encoder[1] = __HAL_TIM_GET_COUNTER(&htim8);
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <main+0xb4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <main+0xb0>)
 8000ec6:	605a      	str	r2, [r3, #4]
    test_encoder[2] = __HAL_TIM_GET_COUNTER(&htim5);
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <main+0xb8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <main+0xb0>)
 8000ed2:	609a      	str	r2, [r3, #8]
    test_encoder[3] = __HAL_TIM_GET_COUNTER(&htim4);
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <main+0xbc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <main+0xb0>)
 8000ede:	60da      	str	r2, [r3, #12]
    HAL_Delay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 fed7 	bl	8001c94 <HAL_Delay>
    test_encoder[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8000ee6:	bf00      	nop
 8000ee8:	e7e2      	b.n	8000eb0 <main+0x6c>
 8000eea:	bf00      	nop
 8000eec:	48001000 	.word	0x48001000
 8000ef0:	2000005c 	.word	0x2000005c
 8000ef4:	2000004c 	.word	0x2000004c
 8000ef8:	2000018c 	.word	0x2000018c
 8000efc:	20000140 	.word	0x20000140
 8000f00:	200000f4 	.word	0x200000f4

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	@ 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	2238      	movs	r2, #56	@ 0x38
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 f918 	bl	8005148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f001 f954 	bl	80021d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f34:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f42:	2355      	movs	r3, #85	@ 0x55
 8000f44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f9f0 	bl	800233c <HAL_RCC_OscConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f62:	f000 f818 	bl	8000f96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f66:	230f      	movs	r3, #15
 8000f68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fcee 	bl	8002960 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f8a:	f000 f804 	bl	8000f96 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3750      	adds	r7, #80	@ 0x50
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9a:	b672      	cpsid	i
}
 8000f9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000f9e:	bf00      	nop
 8000fa0:	e7fd      	b.n	8000f9e <Error_Handler+0x8>
 8000fa2:	0000      	movs	r0, r0
 8000fa4:	0000      	movs	r0, r0
	...

08000fa8 <servo_move>:
  HAL_UART_Transmit(&huart5, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart5, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8000fb8:	2355      	movs	r3, #85	@ 0x55
 8000fba:	737b      	strb	r3, [r7, #13]
 8000fbc:	7b7b      	ldrb	r3, [r7, #13]
 8000fbe:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 8000fd2:	883b      	ldrh	r3, [r7, #0]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart5, send_buffer, sizeof(send_buffer), 0xFFFF);
 8000ff2:	f107 010c 	add.w	r1, r7, #12
 8000ff6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ffa:	220a      	movs	r2, #10
 8000ffc:	4898      	ldr	r0, [pc, #608]	@ (8001260 <servo_move+0x2b8>)
 8000ffe:	f003 f9f7 	bl	80043f0 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	887a      	ldrh	r2, [r7, #2]
 8001006:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	2b05      	cmp	r3, #5
 8001010:	f200 8110 	bhi.w	8001234 <servo_move+0x28c>
 8001014:	a201      	add	r2, pc, #4	@ (adr r2, 800101c <servo_move+0x74>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	08001035 	.word	0x08001035
 8001020:	080010b5 	.word	0x080010b5
 8001024:	08001135 	.word	0x08001135
 8001028:	080011b5 	.word	0x080011b5
 800102c:	08001235 	.word	0x08001235
 8001030:	08001235 	.word	0x08001235
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800103a:	d91c      	bls.n	8001076 <servo_move+0xce>
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa3a 	bl	80004bc <__aeabi_i2d>
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b85      	ldr	r3, [pc, #532]	@ (8001264 <servo_move+0x2bc>)
 800104e:	f7ff fa9f 	bl	8000590 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b82      	ldr	r3, [pc, #520]	@ (8001268 <servo_move+0x2c0>)
 8001060:	f7ff fbc0 	bl	80007e4 <__aeabi_ddiv>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fca2 	bl	80009b4 <__aeabi_d2iz>
 8001070:	4603      	mov	r3, r0
 8001072:	b21b      	sxth	r3, r3
 8001074:	e01b      	b.n	80010ae <servo_move+0x106>
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa1d 	bl	80004bc <__aeabi_i2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b79      	ldr	r3, [pc, #484]	@ (800126c <servo_move+0x2c4>)
 8001088:	f7ff fa82 	bl	8000590 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b75      	ldr	r3, [pc, #468]	@ (8001270 <servo_move+0x2c8>)
 800109a:	f7ff fba3 	bl	80007e4 <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fc85 	bl	80009b4 <__aeabi_d2iz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	8093      	strh	r3, [r2, #4]
      break;
 80010b2:	e0c0      	b.n	8001236 <servo_move+0x28e>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010ba:	d91c      	bls.n	80010f6 <servo_move+0x14e>
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f9fa 	bl	80004bc <__aeabi_i2d>
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b65      	ldr	r3, [pc, #404]	@ (8001264 <servo_move+0x2bc>)
 80010ce:	f7ff fa5f 	bl	8000590 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b62      	ldr	r3, [pc, #392]	@ (8001268 <servo_move+0x2c0>)
 80010e0:	f7ff fb80 	bl	80007e4 <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fc62 	bl	80009b4 <__aeabi_d2iz>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	e01b      	b.n	800112e <servo_move+0x186>
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f9dd 	bl	80004bc <__aeabi_i2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b59      	ldr	r3, [pc, #356]	@ (800126c <servo_move+0x2c4>)
 8001108:	f7ff fa42 	bl	8000590 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	a34a      	add	r3, pc, #296	@ (adr r3, 8001240 <servo_move+0x298>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fb63 	bl	80007e4 <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fc45 	bl	80009b4 <__aeabi_d2iz>
 800112a:	4603      	mov	r3, r0
 800112c:	b21b      	sxth	r3, r3
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	8093      	strh	r3, [r2, #4]
      break;
 8001132:	e080      	b.n	8001236 <servo_move+0x28e>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800113a:	d91c      	bls.n	8001176 <servo_move+0x1ce>
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9ba 	bl	80004bc <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b45      	ldr	r3, [pc, #276]	@ (8001264 <servo_move+0x2bc>)
 800114e:	f7ff fa1f 	bl	8000590 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001248 <servo_move+0x2a0>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fb40 	bl	80007e4 <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fc22 	bl	80009b4 <__aeabi_d2iz>
 8001170:	4603      	mov	r3, r0
 8001172:	b21b      	sxth	r3, r3
 8001174:	e01b      	b.n	80011ae <servo_move+0x206>
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f99d 	bl	80004bc <__aeabi_i2d>
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b39      	ldr	r3, [pc, #228]	@ (800126c <servo_move+0x2c4>)
 8001188:	f7ff fa02 	bl	8000590 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	a32e      	add	r3, pc, #184	@ (adr r3, 8001250 <servo_move+0x2a8>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff fb23 	bl	80007e4 <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fc05 	bl	80009b4 <__aeabi_d2iz>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	8093      	strh	r3, [r2, #4]
      break;
 80011b2:	e040      	b.n	8001236 <servo_move+0x28e>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011ba:	d91c      	bls.n	80011f6 <servo_move+0x24e>
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f97a 	bl	80004bc <__aeabi_i2d>
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <servo_move+0x2bc>)
 80011ce:	f7ff f9df 	bl	8000590 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	a31f      	add	r3, pc, #124	@ (adr r3, 8001258 <servo_move+0x2b0>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fb00 	bl	80007e4 <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fbe2 	bl	80009b4 <__aeabi_d2iz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	e01b      	b.n	800122e <servo_move+0x286>
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f95d 	bl	80004bc <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b19      	ldr	r3, [pc, #100]	@ (800126c <servo_move+0x2c4>)
 8001208:	f7ff f9c2 	bl	8000590 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <servo_move+0x2cc>)
 800121a:	f7ff fae3 	bl	80007e4 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fbc5 	bl	80009b4 <__aeabi_d2iz>
 800122a:	4603      	mov	r3, r0
 800122c:	b21b      	sxth	r3, r3
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	8093      	strh	r3, [r2, #4]
      break;
 8001232:	e000      	b.n	8001236 <servo_move+0x28e>
    case 5:
      break;
    case 6:
      break;
    default:
      break;
 8001234:	bf00      	nop
  }
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	00000000 	.word	0x00000000
 8001244:	c0786000 	.word	0xc0786000
 8001248:	00000000 	.word	0x00000000
 800124c:	40777000 	.word	0x40777000
 8001250:	00000000 	.word	0x00000000
 8001254:	c0772000 	.word	0xc0772000
 8001258:	00000000 	.word	0x00000000
 800125c:	4077c000 	.word	0x4077c000
 8001260:	200001d8 	.word	0x200001d8
 8001264:	40568000 	.word	0x40568000
 8001268:	40768000 	.word	0x40768000
 800126c:	c0568000 	.word	0xc0568000
 8001270:	c0790000 	.word	0xc0790000
 8001274:	c0768000 	.word	0xc0768000

08001278 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	e010      	b.n	80012a6 <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <servo_reset_all+0x40>)
 8001290:	4413      	add	r3, r2
 8001292:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001296:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe84 	bl	8000fa8 <servo_move>
  for (int i = 0; i < 6; i++)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	ddeb      	ble.n	8001284 <servo_reset_all+0xc>
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <HAL_MspInit+0x44>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_MspInit+0x44>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <HAL_MspInit+0x44>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_MspInit+0x44>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_MspInit+0x44>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_MspInit+0x44>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012f2:	f001 f813 	bl	800231c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <NMI_Handler+0x4>

0800130c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <MemManage_Handler+0x4>

0800131c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <UsageFault_Handler+0x4>

0800132c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 fc7d 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2224      	movs	r2, #36	@ 0x24
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fed6 	bl	8005148 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a6:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <MX_TIM1_Init+0xac>)
 80013a8:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <MX_TIM1_Init+0xb0>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013ac:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <MX_TIM1_Init+0xac>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <MX_TIM1_Init+0xac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <MX_TIM1_Init+0xac>)
 80013ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <MX_TIM1_Init+0xac>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <MX_TIM1_Init+0xac>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <MX_TIM1_Init+0xac>)
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d2:	2303      	movs	r3, #3
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013e2:	230a      	movs	r3, #10
 80013e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ea:	2301      	movs	r3, #1
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80013f2:	230a      	movs	r3, #10
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4619      	mov	r1, r3
 80013fc:	480d      	ldr	r0, [pc, #52]	@ (8001434 <MX_TIM1_Init+0xac>)
 80013fe:	f001 ffd1 	bl	80033a4 <HAL_TIM_Encoder_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001408:	f7ff fdc5 	bl	8000f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_TIM1_Init+0xac>)
 800141e:	f002 ff01 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001428:	f7ff fdb5 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3730      	adds	r7, #48	@ 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000005c 	.word	0x2000005c
 8001438:	40012c00 	.word	0x40012c00

0800143c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	@ 0x38
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146e:	4b3d      	ldr	r3, [pc, #244]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001470:	4a3d      	ldr	r2, [pc, #244]	@ (8001568 <MX_TIM3_Init+0x12c>)
 8001472:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001474:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <MX_TIM3_Init+0x128>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8001480:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001482:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001486:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <MX_TIM3_Init+0x128>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148e:	4b35      	ldr	r3, [pc, #212]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001494:	4833      	ldr	r0, [pc, #204]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001496:	f001 fecd 	bl	8003234 <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014a0:	f7ff fd79 	bl	8000f96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ae:	4619      	mov	r1, r3
 80014b0:	482c      	ldr	r0, [pc, #176]	@ (8001564 <MX_TIM3_Init+0x128>)
 80014b2:	f002 f931 	bl	8003718 <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014bc:	f7ff fd6b 	bl	8000f96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014c0:	4828      	ldr	r0, [pc, #160]	@ (8001564 <MX_TIM3_Init+0x128>)
 80014c2:	f001 ff0e 	bl	80032e2 <HAL_TIM_PWM_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014cc:	f7ff fd63 	bl	8000f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	4821      	ldr	r0, [pc, #132]	@ (8001564 <MX_TIM3_Init+0x128>)
 80014e0:	f002 fea0 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014ea:	f7ff fd54 	bl	8000f96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	@ 0x60
 80014f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4817      	ldr	r0, [pc, #92]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001506:	f001 fff3 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001510:	f7ff fd41 	bl	8000f96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	2204      	movs	r2, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4812      	ldr	r0, [pc, #72]	@ (8001564 <MX_TIM3_Init+0x128>)
 800151c:	f001 ffe8 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001526:	f7ff fd36 	bl	8000f96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	2208      	movs	r2, #8
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001532:	f001 ffdd 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800153c:	f7ff fd2b 	bl	8000f96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	220c      	movs	r2, #12
 8001544:	4619      	mov	r1, r3
 8001546:	4807      	ldr	r0, [pc, #28]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001548:	f001 ffd2 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001552:	f7ff fd20 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001556:	4803      	ldr	r0, [pc, #12]	@ (8001564 <MX_TIM3_Init+0x128>)
 8001558:	f000 fa06 	bl	8001968 <HAL_TIM_MspPostInit>

}
 800155c:	bf00      	nop
 800155e:	3738      	adds	r7, #56	@ 0x38
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200000a8 	.word	0x200000a8
 8001568:	40000400 	.word	0x40000400

0800156c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	2224      	movs	r2, #36	@ 0x24
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fde4 	bl	8005148 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <MX_TIM4_Init+0xa4>)
 800158c:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <MX_TIM4_Init+0xa8>)
 800158e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001590:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <MX_TIM4_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <MX_TIM4_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800159c:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <MX_TIM4_Init+0xa4>)
 800159e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_TIM4_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <MX_TIM4_Init+0xa4>)
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015b0:	2303      	movs	r3, #3
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80015c0:	230a      	movs	r3, #10
 80015c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015c8:	2301      	movs	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80015d0:	230a      	movs	r3, #10
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_TIM4_Init+0xa4>)
 80015dc:	f001 fee2 	bl	80033a4 <HAL_TIM_Encoder_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015e6:	f7ff fcd6 	bl	8000f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	@ (8001610 <MX_TIM4_Init+0xa4>)
 80015f8:	f002 fe14 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001602:	f7ff fcc8 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3730      	adds	r7, #48	@ 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200000f4 	.word	0x200000f4
 8001614:	40000800 	.word	0x40000800

08001618 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2224      	movs	r2, #36	@ 0x24
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fd8e 	bl	8005148 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001636:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <MX_TIM5_Init+0xa4>)
 8001638:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <MX_TIM5_Init+0xa8>)
 800163a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <MX_TIM5_Init+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <MX_TIM5_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_TIM5_Init+0xa4>)
 800164a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800164e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_TIM5_Init+0xa4>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_TIM5_Init+0xa4>)
 8001658:	2280      	movs	r2, #128	@ 0x80
 800165a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800165c:	2303      	movs	r3, #3
 800165e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001664:	2301      	movs	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800166c:	230a      	movs	r3, #10
 800166e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001674:	2301      	movs	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800167c:	230a      	movs	r3, #10
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_TIM5_Init+0xa4>)
 8001688:	f001 fe8c 	bl	80033a4 <HAL_TIM_Encoder_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001692:	f7ff fc80 	bl	8000f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	@ (80016bc <MX_TIM5_Init+0xa4>)
 80016a4:	f002 fdbe 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80016ae:	f7ff fc72 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	@ 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000140 	.word	0x20000140
 80016c0:	40000c00 	.word	0x40000c00

080016c4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	@ 0x30
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2224      	movs	r2, #36	@ 0x24
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fd38 	bl	8005148 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <MX_TIM8_Init+0xac>)
 80016e4:	4a23      	ldr	r2, [pc, #140]	@ (8001774 <MX_TIM8_Init+0xb0>)
 80016e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <MX_TIM8_Init+0xac>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <MX_TIM8_Init+0xac>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <MX_TIM8_Init+0xac>)
 80016f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <MX_TIM8_Init+0xac>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001702:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <MX_TIM8_Init+0xac>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <MX_TIM8_Init+0xac>)
 800170a:	2280      	movs	r2, #128	@ 0x80
 800170c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800170e:	2303      	movs	r3, #3
 8001710:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800171e:	230a      	movs	r3, #10
 8001720:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001726:	2301      	movs	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800172e:	230a      	movs	r3, #10
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	480d      	ldr	r0, [pc, #52]	@ (8001770 <MX_TIM8_Init+0xac>)
 800173a:	f001 fe33 	bl	80033a4 <HAL_TIM_Encoder_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001744:	f7ff fc27 	bl	8000f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001754:	463b      	mov	r3, r7
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	@ (8001770 <MX_TIM8_Init+0xac>)
 800175a:	f002 fd63 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001764:	f7ff fc17 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	3730      	adds	r7, #48	@ 0x30
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000018c 	.word	0x2000018c
 8001774:	40013400 	.word	0x40013400

08001778 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b090      	sub	sp, #64	@ 0x40
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5d      	ldr	r2, [pc, #372]	@ (800190c <HAL_TIM_Encoder_MspInit+0x194>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d128      	bne.n	80017ec <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800179a:	4b5d      	ldr	r3, [pc, #372]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179e:	4a5c      	ldr	r2, [pc, #368]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80017a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b57      	ldr	r3, [pc, #348]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	4a56      	ldr	r2, [pc, #344]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017be:	4b54      	ldr	r3, [pc, #336]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ca:	2303      	movs	r3, #3
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80017da:	2302      	movs	r3, #2
 80017dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e2:	4619      	mov	r1, r3
 80017e4:	484b      	ldr	r0, [pc, #300]	@ (8001914 <HAL_TIM_Encoder_MspInit+0x19c>)
 80017e6:	f000 fb5b 	bl	8001ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80017ea:	e08a      	b.n	8001902 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a49      	ldr	r2, [pc, #292]	@ (8001918 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d129      	bne.n	800184a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017f6:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	4a45      	ldr	r2, [pc, #276]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6593      	str	r3, [r2, #88]	@ 0x58
 8001802:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	4b40      	ldr	r3, [pc, #256]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	4a3f      	ldr	r2, [pc, #252]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181a:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001826:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001838:	2302      	movs	r3, #2
 800183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	4836      	ldr	r0, [pc, #216]	@ (800191c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001844:	f000 fb2c 	bl	8001ea0 <HAL_GPIO_Init>
}
 8001848:	e05b      	b.n	8001902 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a34      	ldr	r2, [pc, #208]	@ (8001920 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d129      	bne.n	80018a8 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001860:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001870:	4a27      	ldr	r2, [pc, #156]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001878:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001884:	2303      	movs	r3, #3
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001894:	2302      	movs	r3, #2
 8001896:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a2:	f000 fafd 	bl	8001ea0 <HAL_GPIO_Init>
}
 80018a6:	e02c      	b.n	8001902 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <HAL_TIM_Encoder_MspInit+0x1ac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d127      	bne.n	8001902 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b6:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80018b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018be:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_TIM_Encoder_MspInit+0x198>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e2:	23c0      	movs	r3, #192	@ 0xc0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80018f2:	2304      	movs	r3, #4
 80018f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	@ (8001914 <HAL_TIM_Encoder_MspInit+0x19c>)
 80018fe:	f000 facf 	bl	8001ea0 <HAL_GPIO_Init>
}
 8001902:	bf00      	nop
 8001904:	3740      	adds	r7, #64	@ 0x40
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40012c00 	.word	0x40012c00
 8001910:	40021000 	.word	0x40021000
 8001914:	48000800 	.word	0x48000800
 8001918:	40000800 	.word	0x40000800
 800191c:	48000c00 	.word	0x48000c00
 8001920:	40000c00 	.word	0x40000c00
 8001924:	40013400 	.word	0x40013400

08001928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_TIM_Base_MspInit+0x38>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10b      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_TIM_Base_MspInit+0x3c>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	4a09      	ldr	r2, [pc, #36]	@ (8001964 <HAL_TIM_Base_MspInit+0x3c>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6593      	str	r3, [r2, #88]	@ 0x58
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <HAL_TIM_Base_MspInit+0x3c>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40000400 	.word	0x40000400
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a11      	ldr	r2, [pc, #68]	@ (80019cc <HAL_TIM_MspPostInit+0x64>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11b      	bne.n	80019c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800198a:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_TIM_MspPostInit+0x68>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	4a10      	ldr	r2, [pc, #64]	@ (80019d0 <HAL_TIM_MspPostInit+0x68>)
 8001990:	f043 0310 	orr.w	r3, r3, #16
 8001994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_TIM_MspPostInit+0x68>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    PE2     ------> TIM3_CH1
    PE3     ------> TIM3_CH2
    PE4     ------> TIM3_CH3
    PE5     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019a2:	233c      	movs	r3, #60	@ 0x3c
 80019a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 80019be:	f000 fa6f 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48001000 	.word	0x48001000

080019d8 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019dc:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <MX_UART5_Init+0x90>)
 80019de:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <MX_UART5_Init+0x94>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80019e2:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <MX_UART5_Init+0x90>)
 80019e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <MX_UART5_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <MX_UART5_Init+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <MX_UART5_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <MX_UART5_Init+0x90>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a20:	4811      	ldr	r0, [pc, #68]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a22:	f002 fc95 	bl	8004350 <HAL_UART_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001a2c:	f7ff fab3 	bl	8000f96 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a34:	f003 fabe 	bl	8004fb4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001a3e:	f7ff faaa 	bl	8000f96 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4808      	ldr	r0, [pc, #32]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a46:	f003 faf3 	bl	8005030 <HAL_UARTEx_SetRxFifoThreshold>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001a50:	f7ff faa1 	bl	8000f96 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <MX_UART5_Init+0x90>)
 8001a56:	f003 fa74 	bl	8004f42 <HAL_UARTEx_DisableFifoMode>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001a60:	f7ff fa99 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200001d8 	.word	0x200001d8
 8001a6c:	40005000 	.word	0x40005000

08001a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0a0      	sub	sp, #128	@ 0x80
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	2254      	movs	r2, #84	@ 0x54
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 fb59 	bl	8005148 <memset>
  if(uartHandle->Instance==UART5)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b50 <HAL_UART_MspInit+0xe0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d152      	bne.n	8001b46 <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 f973 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab8:	f7ff fa6d 	bl	8000f96 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001abc:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	4a24      	ldr	r2, [pc, #144]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af0:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <HAL_UART_MspInit+0xe4>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001b16:	2305      	movs	r3, #5
 8001b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <HAL_UART_MspInit+0xe8>)
 8001b22:	f000 f9bd 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b26:	2304      	movs	r3, #4
 8001b28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001b36:	2305      	movs	r3, #5
 8001b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4806      	ldr	r0, [pc, #24]	@ (8001b5c <HAL_UART_MspInit+0xec>)
 8001b42:	f000 f9ad 	bl	8001ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001b46:	bf00      	nop
 8001b48:	3780      	adds	r7, #128	@ 0x80
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40005000 	.word	0x40005000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	48000c00 	.word	0x48000c00

08001b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b60:	480d      	ldr	r0, [pc, #52]	@ (8001b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b64:	f7ff fbfe 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b6a:	490d      	ldr	r1, [pc, #52]	@ (8001ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <LoopForever+0xe>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b80:	4c0a      	ldr	r4, [pc, #40]	@ (8001bac <LoopForever+0x16>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f003 fae3 	bl	8005158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b92:	f7ff f957 	bl	8000e44 <main>

08001b96 <LoopForever>:

LoopForever:
    b LoopForever
 8001b96:	e7fe      	b.n	8001b96 <LoopForever>
  ldr   r0, =_estack
 8001b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001ba4:	08005208 	.word	0x08005208
  ldr r2, =_sbss
 8001ba8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001bac:	20000270 	.word	0x20000270

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>

08001bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f93d 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f80e 	bl	8001be4 <HAL_InitTick>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	71fb      	strb	r3, [r7, #7]
 8001bd2:	e001      	b.n	8001bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bd4:	f7ff fb72 	bl	80012bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd8:	79fb      	ldrb	r3, [r7, #7]

}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bf0:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <HAL_InitTick+0x68>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d022      	beq.n	8001c3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bf8:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_InitTick+0x6c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <HAL_InitTick+0x68>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f93a 	bl	8001e86 <HAL_SYSTICK_Config>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10f      	bne.n	8001c38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b0f      	cmp	r3, #15
 8001c1c:	d809      	bhi.n	8001c32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c26:	f000 f914 	bl	8001e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_InitTick+0x70>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e007      	b.n	8001c42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	e004      	b.n	8001c42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e001      	b.n	8001c42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000002c 	.word	0x2000002c
 8001c50:	20000024 	.word	0x20000024
 8001c54:	20000028 	.word	0x20000028

08001c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_IncTick+0x1c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_IncTick+0x20>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a03      	ldr	r2, [pc, #12]	@ (8001c74 <HAL_IncTick+0x1c>)
 8001c68:	6013      	str	r3, [r2, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	2000026c 	.word	0x2000026c
 8001c78:	2000002c 	.word	0x2000002c

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2000026c 	.word	0x2000026c

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cac:	d004      	beq.n	8001cb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_Delay+0x40>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb8:	bf00      	nop
 8001cba:	f7ff ffdf 	bl	8001c7c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d8f7      	bhi.n	8001cba <HAL_Delay+0x26>
  {
  }
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000002c 	.word	0x2000002c

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	@ 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff47 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff5e 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff90 	bl	8001d90 <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5f 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffb2 	bl	8001df8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eae:	e15a      	b.n	8002166 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 814c 	beq.w	8002160 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80a6 	beq.w	8002160 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	4b5b      	ldr	r3, [pc, #364]	@ (8002184 <HAL_GPIO_Init+0x2e4>)
 8002016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002018:	4a5a      	ldr	r2, [pc, #360]	@ (8002184 <HAL_GPIO_Init+0x2e4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002020:	4b58      	ldr	r3, [pc, #352]	@ (8002184 <HAL_GPIO_Init+0x2e4>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202c:	4a56      	ldr	r2, [pc, #344]	@ (8002188 <HAL_GPIO_Init+0x2e8>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002056:	d01f      	beq.n	8002098 <HAL_GPIO_Init+0x1f8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a4c      	ldr	r2, [pc, #304]	@ (800218c <HAL_GPIO_Init+0x2ec>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d019      	beq.n	8002094 <HAL_GPIO_Init+0x1f4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a4b      	ldr	r2, [pc, #300]	@ (8002190 <HAL_GPIO_Init+0x2f0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_GPIO_Init+0x1f0>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a4a      	ldr	r2, [pc, #296]	@ (8002194 <HAL_GPIO_Init+0x2f4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00d      	beq.n	800208c <HAL_GPIO_Init+0x1ec>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a49      	ldr	r2, [pc, #292]	@ (8002198 <HAL_GPIO_Init+0x2f8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <HAL_GPIO_Init+0x1e8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a48      	ldr	r2, [pc, #288]	@ (800219c <HAL_GPIO_Init+0x2fc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_GPIO_Init+0x1e4>
 8002080:	2305      	movs	r3, #5
 8002082:	e00a      	b.n	800209a <HAL_GPIO_Init+0x1fa>
 8002084:	2306      	movs	r3, #6
 8002086:	e008      	b.n	800209a <HAL_GPIO_Init+0x1fa>
 8002088:	2304      	movs	r3, #4
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x1fa>
 800208c:	2303      	movs	r3, #3
 800208e:	e004      	b.n	800209a <HAL_GPIO_Init+0x1fa>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x1fa>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_Init+0x1fa>
 8002098:	2300      	movs	r3, #0
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020aa:	4937      	ldr	r1, [pc, #220]	@ (8002188 <HAL_GPIO_Init+0x2e8>)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b8:	4b39      	ldr	r3, [pc, #228]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020dc:	4a30      	ldr	r2, [pc, #192]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020e2:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002106:	4a26      	ldr	r2, [pc, #152]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800210c:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002130:	4a1b      	ldr	r2, [pc, #108]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002136:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800215a:	4a11      	ldr	r2, [pc, #68]	@ (80021a0 <HAL_GPIO_Init+0x300>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f ae9d 	bne.w	8001eb0 <HAL_GPIO_Init+0x10>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48001000 	.word	0x48001000
 800219c:	48001400 	.word	0x48001400
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d141      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ee:	d131      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f0:	4b47      	ldr	r3, [pc, #284]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021f6:	4a46      	ldr	r2, [pc, #280]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002200:	4b43      	ldr	r3, [pc, #268]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002208:	4a41      	ldr	r2, [pc, #260]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800220e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002210:	4b40      	ldr	r3, [pc, #256]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2232      	movs	r2, #50	@ 0x32
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4a3f      	ldr	r2, [pc, #252]	@ (8002318 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	3301      	adds	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002226:	e002      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222e:	4b38      	ldr	r3, [pc, #224]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800223a:	d102      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f2      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002242:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224e:	d158      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e057      	b.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002254:	4b2e      	ldr	r3, [pc, #184]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800225a:	4a2d      	ldr	r2, [pc, #180]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002264:	e04d      	b.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800226c:	d141      	bne.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800226e:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227a:	d131      	bne.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800227c:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002282:	4a23      	ldr	r2, [pc, #140]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002288:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800228c:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002294:	4a1e      	ldr	r2, [pc, #120]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800229a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2232      	movs	r2, #50	@ 0x32
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002318 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	3301      	adds	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b2:	e002      	b.n	80022ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c6:	d102      	bne.n	80022ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f2      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022da:	d112      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e011      	b.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022f0:	e007      	b.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f2:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002300:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40007000 	.word	0x40007000
 8002314:	20000024 	.word	0x20000024
 8002318:	431bde83 	.word	0x431bde83

0800231c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232a:	6093      	str	r3, [r2, #8]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40007000 	.word	0x40007000

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e2fe      	b.n	800294c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d075      	beq.n	8002446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235a:	4b97      	ldr	r3, [pc, #604]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002364:	4b94      	ldr	r3, [pc, #592]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	d102      	bne.n	800237a <HAL_RCC_OscConfig+0x3e>
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d002      	beq.n	8002380 <HAL_RCC_OscConfig+0x44>
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d10b      	bne.n	8002398 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	4b8d      	ldr	r3, [pc, #564]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05b      	beq.n	8002444 <HAL_RCC_OscConfig+0x108>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d157      	bne.n	8002444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e2d9      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x74>
 80023a2:	4b85      	ldr	r3, [pc, #532]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a84      	ldr	r2, [pc, #528]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e01d      	b.n	80023ec <HAL_RCC_OscConfig+0xb0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b7f      	ldr	r3, [pc, #508]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7e      	ldr	r2, [pc, #504]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b7c      	ldr	r3, [pc, #496]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7b      	ldr	r2, [pc, #492]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0xb0>
 80023d4:	4b78      	ldr	r3, [pc, #480]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a77      	ldr	r2, [pc, #476]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b75      	ldr	r3, [pc, #468]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a74      	ldr	r2, [pc, #464]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fc42 	bl	8001c7c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fc3e 	bl	8001c7c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	@ 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e29e      	b.n	800294c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240e:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0xc0>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7ff fc2e 	bl	8001c7c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff fc2a 	bl	8001c7c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e28a      	b.n	800294c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002436:	4b60      	ldr	r3, [pc, #384]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0xe8>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b59      	ldr	r3, [pc, #356]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245c:	4b56      	ldr	r3, [pc, #344]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b0c      	cmp	r3, #12
 800246a:	d102      	bne.n	8002472 <HAL_RCC_OscConfig+0x136>
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d002      	beq.n	8002478 <HAL_RCC_OscConfig+0x13c>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d11f      	bne.n	80024b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002478:	4b4f      	ldr	r3, [pc, #316]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x154>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e25d      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b49      	ldr	r3, [pc, #292]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	4946      	ldr	r1, [pc, #280]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024a4:	4b45      	ldr	r3, [pc, #276]	@ (80025bc <HAL_RCC_OscConfig+0x280>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fb9b 	bl	8001be4 <HAL_InitTick>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d043      	beq.n	800253c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e249      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c0:	4b3d      	ldr	r3, [pc, #244]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a3c      	ldr	r2, [pc, #240]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff fbd6 	bl	8001c7c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d4:	f7ff fbd2 	bl	8001c7c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e232      	b.n	800294c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e6:	4b34      	ldr	r3, [pc, #208]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	061b      	lsls	r3, r3, #24
 8002500:	492d      	ldr	r1, [pc, #180]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
 8002506:	e01a      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002508:	4b2b      	ldr	r3, [pc, #172]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2a      	ldr	r2, [pc, #168]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800250e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7ff fbb2 	bl	8001c7c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7ff fbae 	bl	8001c7c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e20e      	b.n	800294c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800252e:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x1e0>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d041      	beq.n	80025ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01c      	beq.n	800258c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002558:	4a17      	ldr	r2, [pc, #92]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7ff fb8b 	bl	8001c7c <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256a:	f7ff fb87 	bl	8001c7c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1e7      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ef      	beq.n	800256a <HAL_RCC_OscConfig+0x22e>
 800258a:	e020      	b.n	80025ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002592:	4a09      	ldr	r2, [pc, #36]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7ff fb6e 	bl	8001c7c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a2:	e00d      	b.n	80025c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7ff fb6a 	bl	8001c7c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d906      	bls.n	80025c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1ca      	b.n	800294c <HAL_RCC_OscConfig+0x610>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c0:	4b8c      	ldr	r3, [pc, #560]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80025c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ea      	bne.n	80025a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80a6 	beq.w	8002728 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025e0:	4b84      	ldr	r3, [pc, #528]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2b4>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x2b6>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b7f      	ldr	r3, [pc, #508]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	4a7e      	ldr	r2, [pc, #504]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	@ 0x58
 8002602:	4b7c      	ldr	r3, [pc, #496]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002612:	4b79      	ldr	r3, [pc, #484]	@ (80027f8 <HAL_RCC_OscConfig+0x4bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261e:	4b76      	ldr	r3, [pc, #472]	@ (80027f8 <HAL_RCC_OscConfig+0x4bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a75      	ldr	r2, [pc, #468]	@ (80027f8 <HAL_RCC_OscConfig+0x4bc>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7ff fb27 	bl	8001c7c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7ff fb23 	bl	8001c7c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e183      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002644:	4b6c      	ldr	r3, [pc, #432]	@ (80027f8 <HAL_RCC_OscConfig+0x4bc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d108      	bne.n	800266a <HAL_RCC_OscConfig+0x32e>
 8002658:	4b66      	ldr	r3, [pc, #408]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265e:	4a65      	ldr	r2, [pc, #404]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002668:	e024      	b.n	80026b4 <HAL_RCC_OscConfig+0x378>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d110      	bne.n	8002694 <HAL_RCC_OscConfig+0x358>
 8002672:	4b60      	ldr	r3, [pc, #384]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	4a5e      	ldr	r2, [pc, #376]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002682:	4b5c      	ldr	r3, [pc, #368]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002688:	4a5a      	ldr	r2, [pc, #360]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002692:	e00f      	b.n	80026b4 <HAL_RCC_OscConfig+0x378>
 8002694:	4b57      	ldr	r3, [pc, #348]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269a:	4a56      	ldr	r2, [pc, #344]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026a4:	4b53      	ldr	r3, [pc, #332]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026aa:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d016      	beq.n	80026ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7ff fade 	bl	8001c7c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7ff fada 	bl	8001c7c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e138      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b46      	ldr	r3, [pc, #280]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ed      	beq.n	80026c4 <HAL_RCC_OscConfig+0x388>
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7ff fac7 	bl	8001c7c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7ff fac3 	bl	8001c7c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e121      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002708:	4b3a      	ldr	r3, [pc, #232]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ed      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002716:	7ffb      	ldrb	r3, [r7, #31]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	4a34      	ldr	r2, [pc, #208]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03c      	beq.n	80027ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01c      	beq.n	8002776 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800273c:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800273e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002742:	4a2c      	ldr	r2, [pc, #176]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7ff fa96 	bl	8001c7c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002754:	f7ff fa92 	bl	8001c7c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0f2      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002766:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002768:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCC_OscConfig+0x418>
 8002774:	e01b      	b.n	80027ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002776:	4b1f      	ldr	r3, [pc, #124]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800277c:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7ff fa79 	bl	8001c7c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800278e:	f7ff fa75 	bl	8001c7c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0d5      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ef      	bne.n	800278e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80c9 	beq.w	800294a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	f000 8083 	beq.w	80028cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d15e      	bne.n	800288c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80027d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7ff fa4f 	bl	8001c7c <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e0:	e00c      	b.n	80027fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e2:	f7ff fa4b 	bl	8001c7c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d905      	bls.n	80027fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0ab      	b.n	800294c <HAL_RCC_OscConfig+0x610>
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fc:	4b55      	ldr	r3, [pc, #340]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ec      	bne.n	80027e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b52      	ldr	r3, [pc, #328]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b52      	ldr	r3, [pc, #328]	@ (8002958 <HAL_RCC_OscConfig+0x61c>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6a11      	ldr	r1, [r2, #32]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002818:	3a01      	subs	r2, #1
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	4311      	orrs	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002822:	0212      	lsls	r2, r2, #8
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800282a:	0852      	lsrs	r2, r2, #1
 800282c:	3a01      	subs	r2, #1
 800282e:	0552      	lsls	r2, r2, #21
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	3a01      	subs	r2, #1
 800283a:	0652      	lsls	r2, r2, #25
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002842:	06d2      	lsls	r2, r2, #27
 8002844:	430a      	orrs	r2, r1
 8002846:	4943      	ldr	r1, [pc, #268]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a40      	ldr	r2, [pc, #256]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002858:	4b3e      	ldr	r3, [pc, #248]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a3d      	ldr	r2, [pc, #244]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002862:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7ff fa0a 	bl	8001c7c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7ff fa06 	bl	8001c7c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e066      	b.n	800294c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x530>
 800288a:	e05e      	b.n	800294a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff f9f0 	bl	8001c7c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff f9ec 	bl	8001c7c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e04c      	b.n	800294c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b2:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028be:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4924      	ldr	r1, [pc, #144]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 80028c4:	4b25      	ldr	r3, [pc, #148]	@ (800295c <HAL_RCC_OscConfig+0x620>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	60cb      	str	r3, [r1, #12]
 80028ca:	e03e      	b.n	800294a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e039      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <HAL_RCC_OscConfig+0x618>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 0203 	and.w	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d12c      	bne.n	8002946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	3b01      	subs	r3, #1
 80028f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d123      	bne.n	8002946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002908:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d11b      	bne.n	8002946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d113      	bne.n	8002946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d109      	bne.n	8002946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	3b01      	subs	r3, #1
 8002940:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	019f800c 	.word	0x019f800c
 800295c:	feeefffc 	.word	0xfeeefffc

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e11e      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b91      	ldr	r3, [pc, #580]	@ (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d910      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b8e      	ldr	r3, [pc, #568]	@ (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 020f 	bic.w	r2, r3, #15
 800298e:	498c      	ldr	r1, [pc, #560]	@ (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b8a      	ldr	r3, [pc, #552]	@ (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e106      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d073      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d129      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029bc:	4b81      	ldr	r3, [pc, #516]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0f4      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029cc:	f000 f99e 	bl	8002d0c <RCC_GetSysClockFreqFromPLLSource>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4a7c      	ldr	r2, [pc, #496]	@ (8002bc8 <HAL_RCC_ClockConfig+0x268>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d93f      	bls.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029da:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d033      	beq.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d12f      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029fa:	4b72      	ldr	r3, [pc, #456]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a02:	4a70      	ldr	r2, [pc, #448]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e024      	b.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a18:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0c6      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	4b66      	ldr	r3, [pc, #408]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0be      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a38:	f000 f8ce 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4a61      	ldr	r2, [pc, #388]	@ (8002bc8 <HAL_RCC_ClockConfig+0x268>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d909      	bls.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a46:	4b5f      	ldr	r3, [pc, #380]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a4e:	4a5d      	ldr	r2, [pc, #372]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a56:	2380      	movs	r3, #128	@ 0x80
 8002a58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4957      	ldr	r1, [pc, #348]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7ff f906 	bl	8001c7c <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7ff f902 	bl	8001c7c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e095      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b43      	ldr	r3, [pc, #268]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a42      	ldr	r2, [pc, #264]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002abe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002acc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ad4:	4a3b      	ldr	r2, [pc, #236]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002ad6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ada:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b39      	ldr	r3, [pc, #228]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4936      	ldr	r1, [pc, #216]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b80      	cmp	r3, #128	@ 0x80
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002af6:	4b33      	ldr	r3, [pc, #204]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4a32      	ldr	r2, [pc, #200]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b02:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d21d      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b10:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 020f 	bic.w	r2, r3, #15
 8002b18:	4929      	ldr	r1, [pc, #164]	@ (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b20:	f7ff f8ac 	bl	8001c7c <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7ff f8a8 	bl	8001c7c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e03b      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1ed      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4917      	ldr	r1, [pc, #92]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b76:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490f      	ldr	r1, [pc, #60]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b8a:	f000 f825 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	490c      	ldr	r1, [pc, #48]	@ (8002bcc <HAL_RCC_ClockConfig+0x26c>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_RCC_ClockConfig+0x270>)
 8002ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_RCC_ClockConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f818 	bl	8001be4 <HAL_InitTick>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	04c4b400 	.word	0x04c4b400
 8002bcc:	080051b8 	.word	0x080051b8
 8002bd0:	20000024 	.word	0x20000024
 8002bd4:	20000028 	.word	0x20000028

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bde:	4b2c      	ldr	r3, [pc, #176]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d102      	bne.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bea:	4b2a      	ldr	r3, [pc, #168]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	e047      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bf0:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bfc:	4b26      	ldr	r3, [pc, #152]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e03e      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c02:	4b23      	ldr	r3, [pc, #140]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d136      	bne.n	8002c7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c0e:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3301      	adds	r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	4a16      	ldr	r2, [pc, #88]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c36:	68d2      	ldr	r2, [r2, #12]
 8002c38:	0a12      	lsrs	r2, r2, #8
 8002c3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	617b      	str	r3, [r7, #20]
      break;
 8002c44:	e00c      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c46:	4a13      	ldr	r2, [pc, #76]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c50:	68d2      	ldr	r2, [r2, #12]
 8002c52:	0a12      	lsrs	r2, r2, #8
 8002c54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]
      break;
 8002c5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0e5b      	lsrs	r3, r3, #25
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e001      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c80:	693b      	ldr	r3, [r7, #16]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000024 	.word	0x20000024

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4904      	ldr	r1, [pc, #16]	@ (8002cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	080051c8 	.word	0x080051c8

08002ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ce4:	f7ff ffda 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0adb      	lsrs	r3, r3, #11
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4904      	ldr	r1, [pc, #16]	@ (8002d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	080051c8 	.word	0x080051c8

08002d0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d12:	4b1e      	ldr	r3, [pc, #120]	@ (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3301      	adds	r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d10c      	bne.n	8002d4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d30:	4a17      	ldr	r2, [pc, #92]	@ (8002d90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	4a14      	ldr	r2, [pc, #80]	@ (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d3a:	68d2      	ldr	r2, [r2, #12]
 8002d3c:	0a12      	lsrs	r2, r2, #8
 8002d3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	617b      	str	r3, [r7, #20]
    break;
 8002d48:	e00c      	b.n	8002d64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d4a:	4a12      	ldr	r2, [pc, #72]	@ (8002d94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	4a0e      	ldr	r2, [pc, #56]	@ (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	0a12      	lsrs	r2, r2, #8
 8002d58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    break;
 8002d62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0e5b      	lsrs	r3, r3, #25
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d7e:	687b      	ldr	r3, [r7, #4]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	007a1200 	.word	0x007a1200
 8002d94:	00f42400 	.word	0x00f42400

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da0:	2300      	movs	r3, #0
 8002da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da4:	2300      	movs	r3, #0
 8002da6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8098 	beq.w	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b40      	ldr	r3, [pc, #256]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dca:	4a3f      	ldr	r2, [pc, #252]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dde:	2301      	movs	r3, #1
 8002de0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a39      	ldr	r2, [pc, #228]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dee:	f7fe ff45 	bl	8001c7c <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df4:	e009      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fe ff41 	bl	8001c7c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d902      	bls.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	74fb      	strb	r3, [r7, #19]
        break;
 8002e08:	e005      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0a:	4b30      	ldr	r3, [pc, #192]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ef      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d159      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01e      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d019      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e38:	4b23      	ldr	r3, [pc, #140]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e44:	4b20      	ldr	r3, [pc, #128]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e64:	4a18      	ldr	r2, [pc, #96]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe ff01 	bl	8001c7c <HAL_GetTick>
 8002e7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe fefd 	bl	8001c7c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d902      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	74fb      	strb	r3, [r7, #19]
            break;
 8002e94:	e006      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ec      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb8:	4903      	ldr	r1, [pc, #12]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	74bb      	strb	r3, [r7, #18]
 8002ec6:	e005      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed4:	7c7b      	ldrb	r3, [r7, #17]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d105      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eda:	4ba7      	ldr	r3, [pc, #668]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	4aa6      	ldr	r2, [pc, #664]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ef2:	4ba1      	ldr	r3, [pc, #644]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef8:	f023 0203 	bic.w	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	499d      	ldr	r1, [pc, #628]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f14:	4b98      	ldr	r3, [pc, #608]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f023 020c 	bic.w	r2, r3, #12
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4995      	ldr	r1, [pc, #596]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f36:	4b90      	ldr	r3, [pc, #576]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	498c      	ldr	r1, [pc, #560]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f58:	4b87      	ldr	r3, [pc, #540]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	4984      	ldr	r1, [pc, #528]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	497b      	ldr	r1, [pc, #492]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f9c:	4b76      	ldr	r3, [pc, #472]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	4973      	ldr	r1, [pc, #460]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	496a      	ldr	r1, [pc, #424]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fe0:	4b65      	ldr	r3, [pc, #404]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4962      	ldr	r1, [pc, #392]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003002:	4b5d      	ldr	r3, [pc, #372]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003008:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	4959      	ldr	r1, [pc, #356]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003024:	4b54      	ldr	r3, [pc, #336]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	4951      	ldr	r1, [pc, #324]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003046:	4b4c      	ldr	r3, [pc, #304]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	4948      	ldr	r1, [pc, #288]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003068:	4b43      	ldr	r3, [pc, #268]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4940      	ldr	r1, [pc, #256]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4b3b      	ldr	r3, [pc, #236]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a3a      	ldr	r2, [pc, #232]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003092:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030a0:	4b35      	ldr	r3, [pc, #212]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ae:	4932      	ldr	r1, [pc, #200]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030d8:	4b27      	ldr	r3, [pc, #156]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	4924      	ldr	r1, [pc, #144]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d015      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003110:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311e:	4916      	ldr	r1, [pc, #88]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800312e:	d105      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003130:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a10      	ldr	r2, [pc, #64]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800313a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d019      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003148:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	4908      	ldr	r1, [pc, #32]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003166:	d109      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a02      	ldr	r2, [pc, #8]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003172:	60d3      	str	r3, [r2, #12]
 8003174:	e002      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003188:	4b29      	ldr	r3, [pc, #164]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	4926      	ldr	r1, [pc, #152]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a6:	d105      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031a8:	4b21      	ldr	r3, [pc, #132]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a20      	ldr	r2, [pc, #128]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80031c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ce:	4918      	ldr	r1, [pc, #96]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031de:	d105      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031e0:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a12      	ldr	r2, [pc, #72]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80031f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	490a      	ldr	r1, [pc, #40]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003216:	d105      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a04      	ldr	r2, [pc, #16]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800321e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003222:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003224:	7cbb      	ldrb	r3, [r7, #18]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e049      	b.n	80032da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe fb64 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 fb5c 	bl	8003930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e049      	b.n	8003388 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f841 	bl	8003390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f000 fb05 	bl	8003930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e097      	b.n	80034e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fe f9d3 	bl	8001778 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80033e8:	f023 0307 	bic.w	r3, r3, #7
 80033ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f000 fa99 	bl	8003930 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	4313      	orrs	r3, r2
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003444:	f023 030c 	bic.w	r3, r3, #12
 8003448:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003450:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	4313      	orrs	r3, r2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	011a      	lsls	r2, r3, #4
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	031b      	lsls	r3, r3, #12
 8003474:	4313      	orrs	r3, r2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	4313      	orrs	r3, r2
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800350a:	2302      	movs	r3, #2
 800350c:	e0ff      	b.n	800370e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b14      	cmp	r3, #20
 800351a:	f200 80f0 	bhi.w	80036fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800351e:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003579 	.word	0x08003579
 8003528:	080036ff 	.word	0x080036ff
 800352c:	080036ff 	.word	0x080036ff
 8003530:	080036ff 	.word	0x080036ff
 8003534:	080035b9 	.word	0x080035b9
 8003538:	080036ff 	.word	0x080036ff
 800353c:	080036ff 	.word	0x080036ff
 8003540:	080036ff 	.word	0x080036ff
 8003544:	080035fb 	.word	0x080035fb
 8003548:	080036ff 	.word	0x080036ff
 800354c:	080036ff 	.word	0x080036ff
 8003550:	080036ff 	.word	0x080036ff
 8003554:	0800363b 	.word	0x0800363b
 8003558:	080036ff 	.word	0x080036ff
 800355c:	080036ff 	.word	0x080036ff
 8003560:	080036ff 	.word	0x080036ff
 8003564:	0800367d 	.word	0x0800367d
 8003568:	080036ff 	.word	0x080036ff
 800356c:	080036ff 	.word	0x080036ff
 8003570:	080036ff 	.word	0x080036ff
 8003574:	080036bd 	.word	0x080036bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fa8a 	bl	8003a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0208 	orr.w	r2, r2, #8
 8003592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0204 	bic.w	r2, r2, #4
 80035a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6999      	ldr	r1, [r3, #24]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	619a      	str	r2, [r3, #24]
      break;
 80035b6:	e0a5      	b.n	8003704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fb04 	bl	8003bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6999      	ldr	r1, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	619a      	str	r2, [r3, #24]
      break;
 80035f8:	e084      	b.n	8003704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fb77 	bl	8003cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0208 	orr.w	r2, r2, #8
 8003614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0204 	bic.w	r2, r2, #4
 8003624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69d9      	ldr	r1, [r3, #28]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	61da      	str	r2, [r3, #28]
      break;
 8003638:	e064      	b.n	8003704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fbe9 	bl	8003e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	021a      	lsls	r2, r3, #8
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	61da      	str	r2, [r3, #28]
      break;
 800367a:	e043      	b.n	8003704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fc5c 	bl	8003f40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0208 	orr.w	r2, r2, #8
 8003696:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0204 	bic.w	r2, r2, #4
 80036a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80036ba:	e023      	b.n	8003704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fca6 	bl	8004014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	021a      	lsls	r2, r3, #8
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80036fc:	e002      	b.n	8003704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
      break;
 8003702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800370c:	7dfb      	ldrb	r3, [r7, #23]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop

08003718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIM_ConfigClockSource+0x1c>
 8003730:	2302      	movs	r3, #2
 8003732:	e0ee      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x1fa>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800375e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6b      	ldr	r2, [pc, #428]	@ (800391c <HAL_TIM_ConfigClockSource+0x204>)
 800376e:	4293      	cmp	r3, r2
 8003770:	f000 80b9 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003774:	4a69      	ldr	r2, [pc, #420]	@ (800391c <HAL_TIM_ConfigClockSource+0x204>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f200 80be 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 800377c:	4a68      	ldr	r2, [pc, #416]	@ (8003920 <HAL_TIM_ConfigClockSource+0x208>)
 800377e:	4293      	cmp	r3, r2
 8003780:	f000 80b1 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003784:	4a66      	ldr	r2, [pc, #408]	@ (8003920 <HAL_TIM_ConfigClockSource+0x208>)
 8003786:	4293      	cmp	r3, r2
 8003788:	f200 80b6 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 800378c:	4a65      	ldr	r2, [pc, #404]	@ (8003924 <HAL_TIM_ConfigClockSource+0x20c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	f000 80a9 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003794:	4a63      	ldr	r2, [pc, #396]	@ (8003924 <HAL_TIM_ConfigClockSource+0x20c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	f200 80ae 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 800379c:	4a62      	ldr	r2, [pc, #392]	@ (8003928 <HAL_TIM_ConfigClockSource+0x210>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	f000 80a1 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 80037a4:	4a60      	ldr	r2, [pc, #384]	@ (8003928 <HAL_TIM_ConfigClockSource+0x210>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	f200 80a6 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 80037ac:	4a5f      	ldr	r2, [pc, #380]	@ (800392c <HAL_TIM_ConfigClockSource+0x214>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f000 8099 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 80037b4:	4a5d      	ldr	r2, [pc, #372]	@ (800392c <HAL_TIM_ConfigClockSource+0x214>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f200 809e 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 80037bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037c0:	f000 8091 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 80037c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037c8:	f200 8096 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 80037cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037d0:	f000 8089 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 80037d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037d8:	f200 808e 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 80037dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e0:	d03e      	beq.n	8003860 <HAL_TIM_ConfigClockSource+0x148>
 80037e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e6:	f200 8087 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ee:	f000 8086 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1e6>
 80037f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f6:	d87f      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 80037f8:	2b70      	cmp	r3, #112	@ 0x70
 80037fa:	d01a      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x11a>
 80037fc:	2b70      	cmp	r3, #112	@ 0x70
 80037fe:	d87b      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 8003800:	2b60      	cmp	r3, #96	@ 0x60
 8003802:	d050      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x18e>
 8003804:	2b60      	cmp	r3, #96	@ 0x60
 8003806:	d877      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 8003808:	2b50      	cmp	r3, #80	@ 0x50
 800380a:	d03c      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x16e>
 800380c:	2b50      	cmp	r3, #80	@ 0x50
 800380e:	d873      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 8003810:	2b40      	cmp	r3, #64	@ 0x40
 8003812:	d058      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003814:	2b40      	cmp	r3, #64	@ 0x40
 8003816:	d86f      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 8003818:	2b30      	cmp	r3, #48	@ 0x30
 800381a:	d064      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 800381c:	2b30      	cmp	r3, #48	@ 0x30
 800381e:	d86b      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d060      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003824:	2b20      	cmp	r3, #32
 8003826:	d867      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d05c      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 800382c:	2b10      	cmp	r3, #16
 800382e:	d05a      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003830:	e062      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	f000 fccf 	bl	80041e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	609a      	str	r2, [r3, #8]
      break;
 800385e:	e04f      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	f000 fcb8 	bl	80041e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003882:	609a      	str	r2, [r3, #8]
      break;
 8003884:	e03c      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	461a      	mov	r2, r3
 8003894:	f000 fc2a 	bl	80040ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2150      	movs	r1, #80	@ 0x50
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fc83 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 80038a4:	e02c      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b2:	461a      	mov	r2, r3
 80038b4:	f000 fc49 	bl	800414a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2160      	movs	r1, #96	@ 0x60
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fc73 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 80038c4:	e01c      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d2:	461a      	mov	r2, r3
 80038d4:	f000 fc0a 	bl	80040ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2140      	movs	r1, #64	@ 0x40
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fc63 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 80038e4:	e00c      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f000 fc5a 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 80038f6:	e003      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
      break;
 80038fc:	e000      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80038fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	00100070 	.word	0x00100070
 8003920:	00100050 	.word	0x00100050
 8003924:	00100040 	.word	0x00100040
 8003928:	00100030 	.word	0x00100030
 800392c:	00100020 	.word	0x00100020

08003930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a4c      	ldr	r2, [pc, #304]	@ (8003a74 <TIM_Base_SetConfig+0x144>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d017      	beq.n	8003978 <TIM_Base_SetConfig+0x48>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394e:	d013      	beq.n	8003978 <TIM_Base_SetConfig+0x48>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a49      	ldr	r2, [pc, #292]	@ (8003a78 <TIM_Base_SetConfig+0x148>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00f      	beq.n	8003978 <TIM_Base_SetConfig+0x48>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a48      	ldr	r2, [pc, #288]	@ (8003a7c <TIM_Base_SetConfig+0x14c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00b      	beq.n	8003978 <TIM_Base_SetConfig+0x48>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a47      	ldr	r2, [pc, #284]	@ (8003a80 <TIM_Base_SetConfig+0x150>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_Base_SetConfig+0x48>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a46      	ldr	r2, [pc, #280]	@ (8003a84 <TIM_Base_SetConfig+0x154>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0x48>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a45      	ldr	r2, [pc, #276]	@ (8003a88 <TIM_Base_SetConfig+0x158>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800397e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a39      	ldr	r2, [pc, #228]	@ (8003a74 <TIM_Base_SetConfig+0x144>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d023      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003998:	d01f      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a36      	ldr	r2, [pc, #216]	@ (8003a78 <TIM_Base_SetConfig+0x148>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01b      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a35      	ldr	r2, [pc, #212]	@ (8003a7c <TIM_Base_SetConfig+0x14c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d017      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a34      	ldr	r2, [pc, #208]	@ (8003a80 <TIM_Base_SetConfig+0x150>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a33      	ldr	r2, [pc, #204]	@ (8003a84 <TIM_Base_SetConfig+0x154>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00f      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a33      	ldr	r2, [pc, #204]	@ (8003a8c <TIM_Base_SetConfig+0x15c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a32      	ldr	r2, [pc, #200]	@ (8003a90 <TIM_Base_SetConfig+0x160>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a31      	ldr	r2, [pc, #196]	@ (8003a94 <TIM_Base_SetConfig+0x164>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_Base_SetConfig+0xaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a88 <TIM_Base_SetConfig+0x158>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a18      	ldr	r2, [pc, #96]	@ (8003a74 <TIM_Base_SetConfig+0x144>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <TIM_Base_SetConfig+0x110>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a84 <TIM_Base_SetConfig+0x154>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00f      	beq.n	8003a40 <TIM_Base_SetConfig+0x110>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <TIM_Base_SetConfig+0x15c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <TIM_Base_SetConfig+0x110>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <TIM_Base_SetConfig+0x160>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <TIM_Base_SetConfig+0x110>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <TIM_Base_SetConfig+0x164>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0x110>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a13      	ldr	r2, [pc, #76]	@ (8003a88 <TIM_Base_SetConfig+0x158>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d103      	bne.n	8003a48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f023 0201 	bic.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	611a      	str	r2, [r3, #16]
  }
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40013400 	.word	0x40013400
 8003a88:	40015000 	.word	0x40015000
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 0201 	bic.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0303 	bic.w	r3, r3, #3
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f023 0302 	bic.w	r3, r3, #2
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <TIM_OC1_SetConfig+0x11c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_OC1_SetConfig+0x88>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb8 <TIM_OC1_SetConfig+0x120>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00f      	beq.n	8003b20 <TIM_OC1_SetConfig+0x88>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a2e      	ldr	r2, [pc, #184]	@ (8003bbc <TIM_OC1_SetConfig+0x124>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_OC1_SetConfig+0x88>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc0 <TIM_OC1_SetConfig+0x128>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_OC1_SetConfig+0x88>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc4 <TIM_OC1_SetConfig+0x12c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_OC1_SetConfig+0x88>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc8 <TIM_OC1_SetConfig+0x130>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10c      	bne.n	8003b3a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0308 	bic.w	r3, r3, #8
 8003b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb4 <TIM_OC1_SetConfig+0x11c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <TIM_OC1_SetConfig+0xd2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <TIM_OC1_SetConfig+0x120>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00f      	beq.n	8003b6a <TIM_OC1_SetConfig+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bbc <TIM_OC1_SetConfig+0x124>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00b      	beq.n	8003b6a <TIM_OC1_SetConfig+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc0 <TIM_OC1_SetConfig+0x128>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <TIM_OC1_SetConfig+0xd2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	@ (8003bc4 <TIM_OC1_SetConfig+0x12c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_OC1_SetConfig+0xd2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a18      	ldr	r2, [pc, #96]	@ (8003bc8 <TIM_OC1_SetConfig+0x130>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d111      	bne.n	8003b8e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40013400 	.word	0x40013400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800
 8003bc8:	40015000 	.word	0x40015000

08003bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f023 0210 	bic.w	r2, r3, #16
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0320 	bic.w	r3, r3, #32
 8003c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cdc <TIM_OC2_SetConfig+0x110>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_OC2_SetConfig+0x74>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce0 <TIM_OC2_SetConfig+0x114>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC2_SetConfig+0x74>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce4 <TIM_OC2_SetConfig+0x118>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d10d      	bne.n	8003c5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <TIM_OC2_SetConfig+0x110>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <TIM_OC2_SetConfig+0xc0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce0 <TIM_OC2_SetConfig+0x114>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00f      	beq.n	8003c8c <TIM_OC2_SetConfig+0xc0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce8 <TIM_OC2_SetConfig+0x11c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <TIM_OC2_SetConfig+0xc0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a1d      	ldr	r2, [pc, #116]	@ (8003cec <TIM_OC2_SetConfig+0x120>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <TIM_OC2_SetConfig+0xc0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf0 <TIM_OC2_SetConfig+0x124>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_OC2_SetConfig+0xc0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a17      	ldr	r2, [pc, #92]	@ (8003ce4 <TIM_OC2_SetConfig+0x118>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d113      	bne.n	8003cb4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40013400 	.word	0x40013400
 8003ce4:	40015000 	.word	0x40015000
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40014400 	.word	0x40014400
 8003cf0:	40014800 	.word	0x40014800

08003cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2b      	ldr	r2, [pc, #172]	@ (8003e00 <TIM_OC3_SetConfig+0x10c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <TIM_OC3_SetConfig+0x72>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	@ (8003e04 <TIM_OC3_SetConfig+0x110>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_OC3_SetConfig+0x72>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <TIM_OC3_SetConfig+0x114>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d10d      	bne.n	8003d82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1e      	ldr	r2, [pc, #120]	@ (8003e00 <TIM_OC3_SetConfig+0x10c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <TIM_OC3_SetConfig+0xbe>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <TIM_OC3_SetConfig+0x110>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00f      	beq.n	8003db2 <TIM_OC3_SetConfig+0xbe>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <TIM_OC3_SetConfig+0x118>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_OC3_SetConfig+0xbe>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <TIM_OC3_SetConfig+0x11c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_OC3_SetConfig+0xbe>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <TIM_OC3_SetConfig+0x120>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_OC3_SetConfig+0xbe>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a16      	ldr	r2, [pc, #88]	@ (8003e08 <TIM_OC3_SetConfig+0x114>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d113      	bne.n	8003dda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40015000 	.word	0x40015000
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800

08003e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a2c      	ldr	r2, [pc, #176]	@ (8003f28 <TIM_OC4_SetConfig+0x110>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_OC4_SetConfig+0x74>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f2c <TIM_OC4_SetConfig+0x114>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_OC4_SetConfig+0x74>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <TIM_OC4_SetConfig+0x118>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10d      	bne.n	8003ea8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	031b      	lsls	r3, r3, #12
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <TIM_OC4_SetConfig+0x110>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d013      	beq.n	8003ed8 <TIM_OC4_SetConfig+0xc0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <TIM_OC4_SetConfig+0x114>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00f      	beq.n	8003ed8 <TIM_OC4_SetConfig+0xc0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1e      	ldr	r2, [pc, #120]	@ (8003f34 <TIM_OC4_SetConfig+0x11c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_OC4_SetConfig+0xc0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f38 <TIM_OC4_SetConfig+0x120>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d007      	beq.n	8003ed8 <TIM_OC4_SetConfig+0xc0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <TIM_OC4_SetConfig+0x124>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_OC4_SetConfig+0xc0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	@ (8003f30 <TIM_OC4_SetConfig+0x118>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d113      	bne.n	8003f00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ede:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ee6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40013400 	.word	0x40013400
 8003f30:	40015000 	.word	0x40015000
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800

08003f40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <TIM_OC5_SetConfig+0xbc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <TIM_OC5_SetConfig+0x82>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	@ (8004000 <TIM_OC5_SetConfig+0xc0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00f      	beq.n	8003fc2 <TIM_OC5_SetConfig+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <TIM_OC5_SetConfig+0xc4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_OC5_SetConfig+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a16      	ldr	r2, [pc, #88]	@ (8004008 <TIM_OC5_SetConfig+0xc8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_OC5_SetConfig+0x82>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a15      	ldr	r2, [pc, #84]	@ (800400c <TIM_OC5_SetConfig+0xcc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_OC5_SetConfig+0x82>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <TIM_OC5_SetConfig+0xd0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d109      	bne.n	8003fd6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40013400 	.word	0x40013400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40015000 	.word	0x40015000

08004014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800405a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	051b      	lsls	r3, r3, #20
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1a      	ldr	r2, [pc, #104]	@ (80040d4 <TIM_OC6_SetConfig+0xc0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <TIM_OC6_SetConfig+0x84>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <TIM_OC6_SetConfig+0xc4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00f      	beq.n	8004098 <TIM_OC6_SetConfig+0x84>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <TIM_OC6_SetConfig+0xc8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_OC6_SetConfig+0x84>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <TIM_OC6_SetConfig+0xcc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_OC6_SetConfig+0x84>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a16      	ldr	r2, [pc, #88]	@ (80040e4 <TIM_OC6_SetConfig+0xd0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC6_SetConfig+0x84>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <TIM_OC6_SetConfig+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d109      	bne.n	80040ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	029b      	lsls	r3, r3, #10
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800
 80040e8:	40015000 	.word	0x40015000

080040ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 030a 	bic.w	r3, r3, #10
 8004128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f023 0210 	bic.w	r2, r3, #16
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80041c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f043 0307 	orr.w	r3, r3, #7
 80041d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	021a      	lsls	r2, r3, #8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	431a      	orrs	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e074      	b.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a34      	ldr	r2, [pc, #208]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a33      	ldr	r2, [pc, #204]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a31      	ldr	r2, [pc, #196]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d108      	bne.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a21      	ldr	r2, [pc, #132]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042bc:	d01d      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a15      	ldr	r2, [pc, #84]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a18      	ldr	r2, [pc, #96]	@ (800434c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a11      	ldr	r2, [pc, #68]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10c      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40013400 	.word	0x40013400
 800433c:	40015000 	.word	0x40015000
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40014000 	.word	0x40014000

08004350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e042      	b.n	80043e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fd fb7b 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2224      	movs	r2, #36	@ 0x24
 800437e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fbb2 	bl	8004b04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8b3 	bl	800450c <UART_SetConfig>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e01b      	b.n	80043e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fc31 	bl	8004c48 <UART_CheckIdleState>
 80043e6:	4603      	mov	r3, r0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	@ 0x28
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	2b20      	cmp	r3, #32
 8004408:	d17b      	bne.n	8004502 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_UART_Transmit+0x26>
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e074      	b.n	8004504 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2221      	movs	r2, #33	@ 0x21
 8004426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442a:	f7fd fc27 	bl	8001c7c <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004448:	d108      	bne.n	800445c <HAL_UART_Transmit+0x6c>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e003      	b.n	8004464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004464:	e030      	b.n	80044c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	@ 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fc93 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e03d      	b.n	8004504 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3302      	adds	r3, #2
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	e007      	b.n	80044b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	3301      	adds	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1c8      	bne.n	8004466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2200      	movs	r2, #0
 80044dc:	2140      	movs	r1, #64	@ 0x40
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fc5c 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e006      	b.n	8004504 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b08c      	sub	sp, #48	@ 0x30
 8004512:	af00      	add	r7, sp, #0
 8004514:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	431a      	orrs	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	431a      	orrs	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4313      	orrs	r3, r2
 8004532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4baa      	ldr	r3, [pc, #680]	@ (80047e4 <UART_SetConfig+0x2d8>)
 800453c:	4013      	ands	r3, r2
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004544:	430b      	orrs	r3, r1
 8004546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a9f      	ldr	r2, [pc, #636]	@ (80047e8 <UART_SetConfig+0x2dc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004574:	4313      	orrs	r3, r2
 8004576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004582:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800458c:	430b      	orrs	r3, r1
 800458e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	f023 010f 	bic.w	r1, r3, #15
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a90      	ldr	r2, [pc, #576]	@ (80047ec <UART_SetConfig+0x2e0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d125      	bne.n	80045fc <UART_SetConfig+0xf0>
 80045b0:	4b8f      	ldr	r3, [pc, #572]	@ (80047f0 <UART_SetConfig+0x2e4>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d81a      	bhi.n	80045f4 <UART_SetConfig+0xe8>
 80045be:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <UART_SetConfig+0xb8>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045e5 	.word	0x080045e5
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045da:	e116      	b.n	800480a <UART_SetConfig+0x2fe>
 80045dc:	2302      	movs	r3, #2
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e2:	e112      	b.n	800480a <UART_SetConfig+0x2fe>
 80045e4:	2304      	movs	r3, #4
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ea:	e10e      	b.n	800480a <UART_SetConfig+0x2fe>
 80045ec:	2308      	movs	r3, #8
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f2:	e10a      	b.n	800480a <UART_SetConfig+0x2fe>
 80045f4:	2310      	movs	r3, #16
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fa:	e106      	b.n	800480a <UART_SetConfig+0x2fe>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7c      	ldr	r2, [pc, #496]	@ (80047f4 <UART_SetConfig+0x2e8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d138      	bne.n	8004678 <UART_SetConfig+0x16c>
 8004606:	4b7a      	ldr	r3, [pc, #488]	@ (80047f0 <UART_SetConfig+0x2e4>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d82d      	bhi.n	8004670 <UART_SetConfig+0x164>
 8004614:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <UART_SetConfig+0x110>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004651 	.word	0x08004651
 8004620:	08004671 	.word	0x08004671
 8004624:	08004671 	.word	0x08004671
 8004628:	08004671 	.word	0x08004671
 800462c:	08004661 	.word	0x08004661
 8004630:	08004671 	.word	0x08004671
 8004634:	08004671 	.word	0x08004671
 8004638:	08004671 	.word	0x08004671
 800463c:	08004659 	.word	0x08004659
 8004640:	08004671 	.word	0x08004671
 8004644:	08004671 	.word	0x08004671
 8004648:	08004671 	.word	0x08004671
 800464c:	08004669 	.word	0x08004669
 8004650:	2300      	movs	r3, #0
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004656:	e0d8      	b.n	800480a <UART_SetConfig+0x2fe>
 8004658:	2302      	movs	r3, #2
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800465e:	e0d4      	b.n	800480a <UART_SetConfig+0x2fe>
 8004660:	2304      	movs	r3, #4
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004666:	e0d0      	b.n	800480a <UART_SetConfig+0x2fe>
 8004668:	2308      	movs	r3, #8
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800466e:	e0cc      	b.n	800480a <UART_SetConfig+0x2fe>
 8004670:	2310      	movs	r3, #16
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004676:	e0c8      	b.n	800480a <UART_SetConfig+0x2fe>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5e      	ldr	r2, [pc, #376]	@ (80047f8 <UART_SetConfig+0x2ec>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d125      	bne.n	80046ce <UART_SetConfig+0x1c2>
 8004682:	4b5b      	ldr	r3, [pc, #364]	@ (80047f0 <UART_SetConfig+0x2e4>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004688:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800468c:	2b30      	cmp	r3, #48	@ 0x30
 800468e:	d016      	beq.n	80046be <UART_SetConfig+0x1b2>
 8004690:	2b30      	cmp	r3, #48	@ 0x30
 8004692:	d818      	bhi.n	80046c6 <UART_SetConfig+0x1ba>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d00a      	beq.n	80046ae <UART_SetConfig+0x1a2>
 8004698:	2b20      	cmp	r3, #32
 800469a:	d814      	bhi.n	80046c6 <UART_SetConfig+0x1ba>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <UART_SetConfig+0x19a>
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d008      	beq.n	80046b6 <UART_SetConfig+0x1aa>
 80046a4:	e00f      	b.n	80046c6 <UART_SetConfig+0x1ba>
 80046a6:	2300      	movs	r3, #0
 80046a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ac:	e0ad      	b.n	800480a <UART_SetConfig+0x2fe>
 80046ae:	2302      	movs	r3, #2
 80046b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046b4:	e0a9      	b.n	800480a <UART_SetConfig+0x2fe>
 80046b6:	2304      	movs	r3, #4
 80046b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046bc:	e0a5      	b.n	800480a <UART_SetConfig+0x2fe>
 80046be:	2308      	movs	r3, #8
 80046c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046c4:	e0a1      	b.n	800480a <UART_SetConfig+0x2fe>
 80046c6:	2310      	movs	r3, #16
 80046c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046cc:	e09d      	b.n	800480a <UART_SetConfig+0x2fe>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4a      	ldr	r2, [pc, #296]	@ (80047fc <UART_SetConfig+0x2f0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d125      	bne.n	8004724 <UART_SetConfig+0x218>
 80046d8:	4b45      	ldr	r3, [pc, #276]	@ (80047f0 <UART_SetConfig+0x2e4>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80046e4:	d016      	beq.n	8004714 <UART_SetConfig+0x208>
 80046e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80046e8:	d818      	bhi.n	800471c <UART_SetConfig+0x210>
 80046ea:	2b80      	cmp	r3, #128	@ 0x80
 80046ec:	d00a      	beq.n	8004704 <UART_SetConfig+0x1f8>
 80046ee:	2b80      	cmp	r3, #128	@ 0x80
 80046f0:	d814      	bhi.n	800471c <UART_SetConfig+0x210>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <UART_SetConfig+0x1f0>
 80046f6:	2b40      	cmp	r3, #64	@ 0x40
 80046f8:	d008      	beq.n	800470c <UART_SetConfig+0x200>
 80046fa:	e00f      	b.n	800471c <UART_SetConfig+0x210>
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004702:	e082      	b.n	800480a <UART_SetConfig+0x2fe>
 8004704:	2302      	movs	r3, #2
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800470a:	e07e      	b.n	800480a <UART_SetConfig+0x2fe>
 800470c:	2304      	movs	r3, #4
 800470e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004712:	e07a      	b.n	800480a <UART_SetConfig+0x2fe>
 8004714:	2308      	movs	r3, #8
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800471a:	e076      	b.n	800480a <UART_SetConfig+0x2fe>
 800471c:	2310      	movs	r3, #16
 800471e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004722:	e072      	b.n	800480a <UART_SetConfig+0x2fe>
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a35      	ldr	r2, [pc, #212]	@ (8004800 <UART_SetConfig+0x2f4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d12a      	bne.n	8004784 <UART_SetConfig+0x278>
 800472e:	4b30      	ldr	r3, [pc, #192]	@ (80047f0 <UART_SetConfig+0x2e4>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004738:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800473c:	d01a      	beq.n	8004774 <UART_SetConfig+0x268>
 800473e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004742:	d81b      	bhi.n	800477c <UART_SetConfig+0x270>
 8004744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004748:	d00c      	beq.n	8004764 <UART_SetConfig+0x258>
 800474a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800474e:	d815      	bhi.n	800477c <UART_SetConfig+0x270>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <UART_SetConfig+0x250>
 8004754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004758:	d008      	beq.n	800476c <UART_SetConfig+0x260>
 800475a:	e00f      	b.n	800477c <UART_SetConfig+0x270>
 800475c:	2300      	movs	r3, #0
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004762:	e052      	b.n	800480a <UART_SetConfig+0x2fe>
 8004764:	2302      	movs	r3, #2
 8004766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800476a:	e04e      	b.n	800480a <UART_SetConfig+0x2fe>
 800476c:	2304      	movs	r3, #4
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004772:	e04a      	b.n	800480a <UART_SetConfig+0x2fe>
 8004774:	2308      	movs	r3, #8
 8004776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800477a:	e046      	b.n	800480a <UART_SetConfig+0x2fe>
 800477c:	2310      	movs	r3, #16
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004782:	e042      	b.n	800480a <UART_SetConfig+0x2fe>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a17      	ldr	r2, [pc, #92]	@ (80047e8 <UART_SetConfig+0x2dc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d13a      	bne.n	8004804 <UART_SetConfig+0x2f8>
 800478e:	4b18      	ldr	r3, [pc, #96]	@ (80047f0 <UART_SetConfig+0x2e4>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004794:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800479c:	d01a      	beq.n	80047d4 <UART_SetConfig+0x2c8>
 800479e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047a2:	d81b      	bhi.n	80047dc <UART_SetConfig+0x2d0>
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a8:	d00c      	beq.n	80047c4 <UART_SetConfig+0x2b8>
 80047aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ae:	d815      	bhi.n	80047dc <UART_SetConfig+0x2d0>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <UART_SetConfig+0x2b0>
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b8:	d008      	beq.n	80047cc <UART_SetConfig+0x2c0>
 80047ba:	e00f      	b.n	80047dc <UART_SetConfig+0x2d0>
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c2:	e022      	b.n	800480a <UART_SetConfig+0x2fe>
 80047c4:	2302      	movs	r3, #2
 80047c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ca:	e01e      	b.n	800480a <UART_SetConfig+0x2fe>
 80047cc:	2304      	movs	r3, #4
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d2:	e01a      	b.n	800480a <UART_SetConfig+0x2fe>
 80047d4:	2308      	movs	r3, #8
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047da:	e016      	b.n	800480a <UART_SetConfig+0x2fe>
 80047dc:	2310      	movs	r3, #16
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e2:	e012      	b.n	800480a <UART_SetConfig+0x2fe>
 80047e4:	cfff69f3 	.word	0xcfff69f3
 80047e8:	40008000 	.word	0x40008000
 80047ec:	40013800 	.word	0x40013800
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40004400 	.word	0x40004400
 80047f8:	40004800 	.word	0x40004800
 80047fc:	40004c00 	.word	0x40004c00
 8004800:	40005000 	.word	0x40005000
 8004804:	2310      	movs	r3, #16
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4aae      	ldr	r2, [pc, #696]	@ (8004ac8 <UART_SetConfig+0x5bc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	f040 8097 	bne.w	8004944 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004816:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800481a:	2b08      	cmp	r3, #8
 800481c:	d823      	bhi.n	8004866 <UART_SetConfig+0x35a>
 800481e:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <UART_SetConfig+0x318>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004849 	.word	0x08004849
 8004828:	08004867 	.word	0x08004867
 800482c:	08004851 	.word	0x08004851
 8004830:	08004867 	.word	0x08004867
 8004834:	08004857 	.word	0x08004857
 8004838:	08004867 	.word	0x08004867
 800483c:	08004867 	.word	0x08004867
 8004840:	08004867 	.word	0x08004867
 8004844:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fe fa34 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 800484c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800484e:	e010      	b.n	8004872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b9e      	ldr	r3, [pc, #632]	@ (8004acc <UART_SetConfig+0x5c0>)
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004854:	e00d      	b.n	8004872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7fe f9bf 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 800485a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800485c:	e009      	b.n	8004872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004864:	e005      	b.n	8004872 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004870:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8130 	beq.w	8004ada <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	4a94      	ldr	r2, [pc, #592]	@ (8004ad0 <UART_SetConfig+0x5c4>)
 8004880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004884:	461a      	mov	r2, r3
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	fbb3 f3f2 	udiv	r3, r3, r2
 800488c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	429a      	cmp	r2, r3
 800489c:	d305      	bcc.n	80048aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d903      	bls.n	80048b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048b0:	e113      	b.n	8004ada <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	2200      	movs	r2, #0
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	60fa      	str	r2, [r7, #12]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	4a84      	ldr	r2, [pc, #528]	@ (8004ad0 <UART_SetConfig+0x5c4>)
 80048c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2200      	movs	r2, #0
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048d4:	f7fc f896 	bl	8000a04 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	020b      	lsls	r3, r1, #8
 80048ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048ee:	0202      	lsls	r2, r0, #8
 80048f0:	6979      	ldr	r1, [r7, #20]
 80048f2:	6849      	ldr	r1, [r1, #4]
 80048f4:	0849      	lsrs	r1, r1, #1
 80048f6:	2000      	movs	r0, #0
 80048f8:	460c      	mov	r4, r1
 80048fa:	4605      	mov	r5, r0
 80048fc:	eb12 0804 	adds.w	r8, r2, r4
 8004900:	eb43 0905 	adc.w	r9, r3, r5
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	469a      	mov	sl, r3
 800490c:	4693      	mov	fp, r2
 800490e:	4652      	mov	r2, sl
 8004910:	465b      	mov	r3, fp
 8004912:	4640      	mov	r0, r8
 8004914:	4649      	mov	r1, r9
 8004916:	f7fc f875 	bl	8000a04 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4613      	mov	r3, r2
 8004920:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004928:	d308      	bcc.n	800493c <UART_SetConfig+0x430>
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004930:	d204      	bcs.n	800493c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a3a      	ldr	r2, [r7, #32]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	e0ce      	b.n	8004ada <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004942:	e0ca      	b.n	8004ada <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800494c:	d166      	bne.n	8004a1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800494e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004952:	2b08      	cmp	r3, #8
 8004954:	d827      	bhi.n	80049a6 <UART_SetConfig+0x49a>
 8004956:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <UART_SetConfig+0x450>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe f998 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004984:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004986:	e014      	b.n	80049b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe f9aa 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800498e:	e010      	b.n	80049b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b4e      	ldr	r3, [pc, #312]	@ (8004acc <UART_SetConfig+0x5c0>)
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe f91f 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 800499a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800499c:	e009      	b.n	80049b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8090 	beq.w	8004ada <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	4a44      	ldr	r2, [pc, #272]	@ (8004ad0 <UART_SetConfig+0x5c4>)
 80049c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049cc:	005a      	lsls	r2, r3, #1
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	441a      	add	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	2b0f      	cmp	r3, #15
 80049e4:	d916      	bls.n	8004a14 <UART_SetConfig+0x508>
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ec:	d212      	bcs.n	8004a14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f023 030f 	bic.w	r3, r3, #15
 80049f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	8bfb      	ldrh	r3, [r7, #30]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	8bfa      	ldrh	r2, [r7, #30]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	e062      	b.n	8004ada <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a1a:	e05e      	b.n	8004ada <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d828      	bhi.n	8004a76 <UART_SetConfig+0x56a>
 8004a24:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <UART_SetConfig+0x520>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a61 	.word	0x08004a61
 8004a38:	08004a77 	.word	0x08004a77
 8004a3c:	08004a67 	.word	0x08004a67
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004a77 	.word	0x08004a77
 8004a4c:	08004a6f 	.word	0x08004a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7fe f930 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a56:	e014      	b.n	8004a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a58:	f7fe f942 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8004a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a5e:	e010      	b.n	8004a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a60:	4b1a      	ldr	r3, [pc, #104]	@ (8004acc <UART_SetConfig+0x5c0>)
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a64:	e00d      	b.n	8004a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a66:	f7fe f8b7 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8004a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a6c:	e009      	b.n	8004a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a74:	e005      	b.n	8004a82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a80:	bf00      	nop
    }

    if (pclk != 0U)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d028      	beq.n	8004ada <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	4a10      	ldr	r2, [pc, #64]	@ (8004ad0 <UART_SetConfig+0x5c4>)
 8004a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	441a      	add	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d910      	bls.n	8004ad4 <UART_SetConfig+0x5c8>
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab8:	d20c      	bcs.n	8004ad4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60da      	str	r2, [r3, #12]
 8004ac4:	e009      	b.n	8004ada <UART_SetConfig+0x5ce>
 8004ac6:	bf00      	nop
 8004ac8:	40008000 	.word	0x40008000
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	080051d0 	.word	0x080051d0
      }
      else
      {
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004af6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3730      	adds	r7, #48	@ 0x30
 8004afe:	46bd      	mov	sp, r7
 8004b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c02:	d10a      	bne.n	8004c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b098      	sub	sp, #96	@ 0x60
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c58:	f7fd f810 	bl	8001c7c <HAL_GetTick>
 8004c5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d12f      	bne.n	8004ccc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c74:	2200      	movs	r2, #0
 8004c76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f88e 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d022      	beq.n	8004ccc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e063      	b.n	8004d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d149      	bne.n	8004d6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f857 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d03c      	beq.n	8004d6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	623b      	str	r3, [r7, #32]
   return(result);
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d12:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e6      	bne.n	8004cf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d46:	61fa      	str	r2, [r7, #28]
 8004d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	69b9      	ldr	r1, [r7, #24]
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	617b      	str	r3, [r7, #20]
   return(result);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e012      	b.n	8004d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3758      	adds	r7, #88	@ 0x58
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	e04f      	b.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004db4:	d04b      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fc ff61 	bl	8001c7c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e04e      	b.n	8004e6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d037      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b80      	cmp	r3, #128	@ 0x80
 8004de2:	d034      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b40      	cmp	r3, #64	@ 0x40
 8004de8:	d031      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d110      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f838 	bl	8004e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e029      	b.n	8004e6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e28:	d111      	bne.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f81e 	bl	8004e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e00f      	b.n	8004e6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d0a0      	beq.n	8004dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b095      	sub	sp, #84	@ 0x54
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e6      	bne.n	8004e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e3      	bne.n	8004eb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d118      	bne.n	8004f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f023 0310 	bic.w	r3, r3, #16
 8004f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6979      	ldr	r1, [r7, #20]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e6      	bne.n	8004ef0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f36:	bf00      	nop
 8004f38:	3754      	adds	r7, #84	@ 0x54
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e027      	b.n	8004fa8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2224      	movs	r2, #36	@ 0x24
 8004f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004f86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e02d      	b.n	8005028 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2224      	movs	r2, #36	@ 0x24
 8004fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f84f 	bl	80050ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005044:	2302      	movs	r3, #2
 8005046:	e02d      	b.n	80050a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2224      	movs	r2, #36	@ 0x24
 8005054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f811 	bl	80050ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d108      	bne.n	80050ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050cc:	e031      	b.n	8005132 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050ce:	2308      	movs	r3, #8
 80050d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050d2:	2308      	movs	r3, #8
 80050d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	0e5b      	lsrs	r3, r3, #25
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	0f5b      	lsrs	r3, r3, #29
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050f6:	7bbb      	ldrb	r3, [r7, #14]
 80050f8:	7b3a      	ldrb	r2, [r7, #12]
 80050fa:	4911      	ldr	r1, [pc, #68]	@ (8005140 <UARTEx_SetNbDataToProcess+0x94>)
 80050fc:	5c8a      	ldrb	r2, [r1, r2]
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005102:	7b3a      	ldrb	r2, [r7, #12]
 8005104:	490f      	ldr	r1, [pc, #60]	@ (8005144 <UARTEx_SetNbDataToProcess+0x98>)
 8005106:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005108:	fb93 f3f2 	sdiv	r3, r3, r2
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	7b7a      	ldrb	r2, [r7, #13]
 8005118:	4909      	ldr	r1, [pc, #36]	@ (8005140 <UARTEx_SetNbDataToProcess+0x94>)
 800511a:	5c8a      	ldrb	r2, [r1, r2]
 800511c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005120:	7b7a      	ldrb	r2, [r7, #13]
 8005122:	4908      	ldr	r1, [pc, #32]	@ (8005144 <UARTEx_SetNbDataToProcess+0x98>)
 8005124:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005126:	fb93 f3f2 	sdiv	r3, r3, r2
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	080051e8 	.word	0x080051e8
 8005144:	080051f0 	.word	0x080051f0

08005148 <memset>:
 8005148:	4402      	add	r2, r0
 800514a:	4603      	mov	r3, r0
 800514c:	4293      	cmp	r3, r2
 800514e:	d100      	bne.n	8005152 <memset+0xa>
 8005150:	4770      	bx	lr
 8005152:	f803 1b01 	strb.w	r1, [r3], #1
 8005156:	e7f9      	b.n	800514c <memset+0x4>

08005158 <__libc_init_array>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	4d0d      	ldr	r5, [pc, #52]	@ (8005190 <__libc_init_array+0x38>)
 800515c:	4c0d      	ldr	r4, [pc, #52]	@ (8005194 <__libc_init_array+0x3c>)
 800515e:	1b64      	subs	r4, r4, r5
 8005160:	10a4      	asrs	r4, r4, #2
 8005162:	2600      	movs	r6, #0
 8005164:	42a6      	cmp	r6, r4
 8005166:	d109      	bne.n	800517c <__libc_init_array+0x24>
 8005168:	4d0b      	ldr	r5, [pc, #44]	@ (8005198 <__libc_init_array+0x40>)
 800516a:	4c0c      	ldr	r4, [pc, #48]	@ (800519c <__libc_init_array+0x44>)
 800516c:	f000 f818 	bl	80051a0 <_init>
 8005170:	1b64      	subs	r4, r4, r5
 8005172:	10a4      	asrs	r4, r4, #2
 8005174:	2600      	movs	r6, #0
 8005176:	42a6      	cmp	r6, r4
 8005178:	d105      	bne.n	8005186 <__libc_init_array+0x2e>
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005180:	4798      	blx	r3
 8005182:	3601      	adds	r6, #1
 8005184:	e7ee      	b.n	8005164 <__libc_init_array+0xc>
 8005186:	f855 3b04 	ldr.w	r3, [r5], #4
 800518a:	4798      	blx	r3
 800518c:	3601      	adds	r6, #1
 800518e:	e7f2      	b.n	8005176 <__libc_init_array+0x1e>
 8005190:	08005200 	.word	0x08005200
 8005194:	08005200 	.word	0x08005200
 8005198:	08005200 	.word	0x08005200
 800519c:	08005204 	.word	0x08005204

080051a0 <_init>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr

080051ac <_fini>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr
