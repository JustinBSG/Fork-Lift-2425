
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d0  080055d0  00007030  2**0
                  CONTENTS
  4 .ARM          00000008  080055d0  080055d0  000065d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d8  080055d8  00007030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d8  080055d8  000065d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055dc  080055dc  000065dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080055e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000030  08005610  00007030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005610  00007340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128b2  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002691  00000000  00000000  00019912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccd  00000000  00000000  0001d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002562  00000000  00000000  0001dcdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f44  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9fc3  00000000  00000000  00034183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f0  00000000  00000000  0010e18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0011277c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005578 	.word	0x08005578

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	08005578 	.word	0x08005578

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	4a49      	ldr	r2, [pc, #292]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d16:	4b47      	ldr	r3, [pc, #284]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4b44      	ldr	r3, [pc, #272]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a43      	ldr	r2, [pc, #268]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b41      	ldr	r3, [pc, #260]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d40:	f043 0320 	orr.w	r3, r3, #32
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b3b      	ldr	r3, [pc, #236]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0320 	and.w	r3, r3, #32
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b38      	ldr	r3, [pc, #224]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a37      	ldr	r2, [pc, #220]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b32      	ldr	r3, [pc, #200]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a31      	ldr	r2, [pc, #196]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b2f      	ldr	r3, [pc, #188]	@ (8000e34 <MX_GPIO_Init+0x140>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	482c      	ldr	r0, [pc, #176]	@ (8000e38 <MX_GPIO_Init+0x144>)
 8000d88:	f001 fba2 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f001 fb9b 	bl	80024d0 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000da0:	4826      	ldr	r0, [pc, #152]	@ (8000e3c <MX_GPIO_Init+0x148>)
 8000da2:	f001 fb95 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dac:	4824      	ldr	r0, [pc, #144]	@ (8000e40 <MX_GPIO_Init+0x14c>)
 8000dae:	f001 fb8f 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 8000db2:	2308      	movs	r3, #8
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481b      	ldr	r0, [pc, #108]	@ (8000e38 <MX_GPIO_Init+0x144>)
 8000dca:	f001 f9ff 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 8000dce:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8000dd2:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dea:	f001 f9ef 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000dee:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_GPIO_Init+0x148>)
 8000e08:	f001 f9e0 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 8000e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <MX_GPIO_Init+0x14c>)
 8000e26:	f001 f9d1 	bl	80021cc <HAL_GPIO_Init>

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	@ 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000800 	.word	0x48000800
 8000e3c:	48001000 	.word	0x48001000
 8000e40:	48000c00 	.word	0x48000c00

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f001 f849 	bl	8001ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f898 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f7ff ff50 	bl	8000cf4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e54:	f000 fb4e 	bl	80014f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e58:	f000 fc00 	bl	800165c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e5c:	f000 fc7a 	bl	8001754 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e60:	f000 fcce 	bl	8001800 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e64:	f000 fd22 	bl	80018ac <MX_TIM8_Init>
  MX_TIM2_Init();
 8000e68:	f000 fb9e 	bl	80015a8 <MX_TIM2_Init>
  MX_UART4_Init();
 8000e6c:	f000 fede 	bl	8001c2c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000e70:	f000 ff28 	bl	8001cc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	4838      	ldr	r0, [pc, #224]	@ (8000f58 <main+0x114>)
 8000e78:	f002 fc42 	bl	8003700 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	4836      	ldr	r0, [pc, #216]	@ (8000f58 <main+0x114>)
 8000e80:	f002 fc3e 	bl	8003700 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e84:	2108      	movs	r1, #8
 8000e86:	4834      	ldr	r0, [pc, #208]	@ (8000f58 <main+0x114>)
 8000e88:	f002 fc3a 	bl	8003700 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e8c:	210c      	movs	r1, #12
 8000e8e:	4832      	ldr	r0, [pc, #200]	@ (8000f58 <main+0x114>)
 8000e90:	f002 fc36 	bl	8003700 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e94:	210c      	movs	r1, #12
 8000e96:	4831      	ldr	r0, [pc, #196]	@ (8000f5c <main+0x118>)
 8000e98:	f002 fc32 	bl	8003700 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000e9c:	4830      	ldr	r0, [pc, #192]	@ (8000f60 <main+0x11c>)
 8000e9e:	f002 fb5f 	bl	8003560 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000ea2:	213c      	movs	r1, #60	@ 0x3c
 8000ea4:	482e      	ldr	r0, [pc, #184]	@ (8000f60 <main+0x11c>)
 8000ea6:	f002 fde3 	bl	8003a70 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000eaa:	482e      	ldr	r0, [pc, #184]	@ (8000f64 <main+0x120>)
 8000eac:	f002 fb58 	bl	8003560 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000eb0:	213c      	movs	r1, #60	@ 0x3c
 8000eb2:	482c      	ldr	r0, [pc, #176]	@ (8000f64 <main+0x120>)
 8000eb4:	f002 fddc 	bl	8003a70 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000eb8:	482b      	ldr	r0, [pc, #172]	@ (8000f68 <main+0x124>)
 8000eba:	f002 fb51 	bl	8003560 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000ebe:	213c      	movs	r1, #60	@ 0x3c
 8000ec0:	4829      	ldr	r0, [pc, #164]	@ (8000f68 <main+0x124>)
 8000ec2:	f002 fdd5 	bl	8003a70 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000ec6:	4829      	ldr	r0, [pc, #164]	@ (8000f6c <main+0x128>)
 8000ec8:	f002 fb4a 	bl	8003560 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000ecc:	213c      	movs	r1, #60	@ 0x3c
 8000ece:	4827      	ldr	r0, [pc, #156]	@ (8000f6c <main+0x128>)
 8000ed0:	f002 fdce 	bl	8003a70 <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	4825      	ldr	r0, [pc, #148]	@ (8000f70 <main+0x12c>)
 8000eda:	f001 faf9 	bl	80024d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ee4:	4823      	ldr	r0, [pc, #140]	@ (8000f74 <main+0x130>)
 8000ee6:	f001 faf3 	bl	80024d0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef0:	4821      	ldr	r0, [pc, #132]	@ (8000f78 <main+0x134>)
 8000ef2:	f001 faed 	bl	80024d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000efc:	481e      	ldr	r0, [pc, #120]	@ (8000f78 <main+0x134>)
 8000efe:	f001 fae7 	bl	80024d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f08:	481b      	ldr	r0, [pc, #108]	@ (8000f78 <main+0x134>)
 8000f0a:	f001 fae1 	bl	80024d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	4819      	ldr	r0, [pc, #100]	@ (8000f78 <main+0x134>)
 8000f14:	f001 fadc 	bl	80024d0 <HAL_GPIO_WritePin>

  servo_reset_all();
 8000f18:	f000 fa64 	bl	80013e4 <servo_reset_all>
  HAL_Delay(1000);
 8000f1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f20:	f001 f84e 	bl	8001fc0 <HAL_Delay>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <main+0x134>)
 8000f2a:	f001 fad1 	bl	80024d0 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f001 f846 	bl	8001fc0 <HAL_Delay>
    //   servo_move(&(servos[4]), 500 + 380, SHORTEST_TIME_ROTATE(5, 380));
    //   test_var_1 = SHORTEST_TIME_ROTATE(5, 380);
    // }
    // else if (test_count == 2)
    //   servo_reset_all();
    TIM3->CCR1 = 16800 / 2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <main+0x138>)
 8000f36:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 16800 / 2;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <main+0x138>)
 8000f3e:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000f42:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = 16800 / 2;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <main+0x138>)
 8000f46:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = 16800 / 2;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <main+0x138>)
 8000f4e:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000f52:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_Delay(1);
 8000f54:	bf00      	nop
 8000f56:	e7ea      	b.n	8000f2e <main+0xea>
 8000f58:	200000e4 	.word	0x200000e4
 8000f5c:	20000098 	.word	0x20000098
 8000f60:	2000004c 	.word	0x2000004c
 8000f64:	20000130 	.word	0x20000130
 8000f68:	2000017c 	.word	0x2000017c
 8000f6c:	200001c8 	.word	0x200001c8
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	48001000 	.word	0x48001000
 8000f7c:	40000400 	.word	0x40000400

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	@ 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	2238      	movs	r2, #56	@ 0x38
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fac6 	bl	8005520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f001 faac 	bl	8002500 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fbe:	2355      	movs	r3, #85	@ 0x55
 8000fc0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fb48 	bl	8002668 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000fde:	f000 f818 	bl	8001012 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fe46 	bl	8002c8c <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001006:	f000 f804 	bl	8001012 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	@ 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001016:	b672      	cpsid	i
}
 8001018:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800101a:	bf00      	nop
 800101c:	e7fd      	b.n	800101a <Error_Handler+0x8>
	...

08001020 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8001030:	2355      	movs	r3, #85	@ 0x55
 8001032:	737b      	strb	r3, [r7, #13]
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8001038:	2308      	movs	r3, #8
 800103a:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 800103c:	2303      	movs	r3, #3
 800103e:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8001040:	2301      	movs	r3, #1
 8001042:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 8001044:	883b      	ldrh	r3, [r7, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 800104a:	883b      	ldrh	r3, [r7, #0]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 800106a:	f107 010c 	add.w	r1, r7, #12
 800106e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001072:	220a      	movs	r2, #10
 8001074:	48ce      	ldr	r0, [pc, #824]	@ (80013b0 <servo_move+0x390>)
 8001076:	f003 fba7 	bl	80047c8 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	2b05      	cmp	r3, #5
 8001088:	f200 81a6 	bhi.w	80013d8 <servo_move+0x3b8>
 800108c:	a201      	add	r2, pc, #4	@ (adr r2, 8001094 <servo_move+0x74>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010ad 	.word	0x080010ad
 8001098:	0800112d 	.word	0x0800112d
 800109c:	080011ad 	.word	0x080011ad
 80010a0:	0800122d 	.word	0x0800122d
 80010a4:	080012ad 	.word	0x080012ad
 80010a8:	0800132d 	.word	0x0800132d
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010b2:	d91c      	bls.n	80010ee <servo_move+0xce>
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f9fe 	bl	80004bc <__aeabi_i2d>
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4bbb      	ldr	r3, [pc, #748]	@ (80013b4 <servo_move+0x394>)
 80010c6:	f7ff fa63 	bl	8000590 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8001370 <servo_move+0x350>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fb84 	bl	80007e4 <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fc66 	bl	80009b4 <__aeabi_d2iz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	e01b      	b.n	8001126 <servo_move+0x106>
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f9e1 	bl	80004bc <__aeabi_i2d>
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4bae      	ldr	r3, [pc, #696]	@ (80013b8 <servo_move+0x398>)
 8001100:	f7ff fa46 	bl	8000590 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4baa      	ldr	r3, [pc, #680]	@ (80013bc <servo_move+0x39c>)
 8001112:	f7ff fb67 	bl	80007e4 <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fc49 	bl	80009b4 <__aeabi_d2iz>
 8001122:	4603      	mov	r3, r0
 8001124:	b21b      	sxth	r3, r3
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	8093      	strh	r3, [r2, #4]
      break;
 800112a:	e156      	b.n	80013da <servo_move+0x3ba>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001132:	d91c      	bls.n	800116e <servo_move+0x14e>
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f9be 	bl	80004bc <__aeabi_i2d>
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b9b      	ldr	r3, [pc, #620]	@ (80013b4 <servo_move+0x394>)
 8001146:	f7ff fa23 	bl	8000590 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	a389      	add	r3, pc, #548	@ (adr r3, 8001378 <servo_move+0x358>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fb44 	bl	80007e4 <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fc26 	bl	80009b4 <__aeabi_d2iz>
 8001168:	4603      	mov	r3, r0
 800116a:	b21b      	sxth	r3, r3
 800116c:	e01b      	b.n	80011a6 <servo_move+0x186>
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9a1 	bl	80004bc <__aeabi_i2d>
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b8e      	ldr	r3, [pc, #568]	@ (80013b8 <servo_move+0x398>)
 8001180:	f7ff fa06 	bl	8000590 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	a37c      	add	r3, pc, #496	@ (adr r3, 8001380 <servo_move+0x360>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff fb27 	bl	80007e4 <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fc09 	bl	80009b4 <__aeabi_d2iz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	8093      	strh	r3, [r2, #4]
      break;
 80011aa:	e116      	b.n	80013da <servo_move+0x3ba>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011b2:	d91c      	bls.n	80011ee <servo_move+0x1ce>
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f97e 	bl	80004bc <__aeabi_i2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b7b      	ldr	r3, [pc, #492]	@ (80013b4 <servo_move+0x394>)
 80011c6:	f7ff f9e3 	bl	8000590 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	a36d      	add	r3, pc, #436	@ (adr r3, 8001388 <servo_move+0x368>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fb04 	bl	80007e4 <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fbe6 	bl	80009b4 <__aeabi_d2iz>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	e01b      	b.n	8001226 <servo_move+0x206>
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f961 	bl	80004bc <__aeabi_i2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b6e      	ldr	r3, [pc, #440]	@ (80013b8 <servo_move+0x398>)
 8001200:	f7ff f9c6 	bl	8000590 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	a360      	add	r3, pc, #384	@ (adr r3, 8001390 <servo_move+0x370>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fae7 	bl	80007e4 <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fbc9 	bl	80009b4 <__aeabi_d2iz>
 8001222:	4603      	mov	r3, r0
 8001224:	b21b      	sxth	r3, r3
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	8093      	strh	r3, [r2, #4]
      break;
 800122a:	e0d6      	b.n	80013da <servo_move+0x3ba>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001232:	d91c      	bls.n	800126e <servo_move+0x24e>
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f93e 	bl	80004bc <__aeabi_i2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <servo_move+0x394>)
 8001246:	f7ff f9a3 	bl	8000590 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	a351      	add	r3, pc, #324	@ (adr r3, 8001398 <servo_move+0x378>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff fac4 	bl	80007e4 <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fba6 	bl	80009b4 <__aeabi_d2iz>
 8001268:	4603      	mov	r3, r0
 800126a:	b21b      	sxth	r3, r3
 800126c:	e01b      	b.n	80012a6 <servo_move+0x286>
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f921 	bl	80004bc <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b4e      	ldr	r3, [pc, #312]	@ (80013b8 <servo_move+0x398>)
 8001280:	f7ff f986 	bl	8000590 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b4b      	ldr	r3, [pc, #300]	@ (80013c0 <servo_move+0x3a0>)
 8001292:	f7ff faa7 	bl	80007e4 <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fb89 	bl	80009b4 <__aeabi_d2iz>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	8093      	strh	r3, [r2, #4]
      break;
 80012aa:	e096      	b.n	80013da <servo_move+0x3ba>
    case 5:
      target_servo->current_degree = SERVO_ID5_POS_TO_ANGLE(target_pos);
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012b2:	d91c      	bls.n	80012ee <servo_move+0x2ce>
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f8fe 	bl	80004bc <__aeabi_i2d>
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <servo_move+0x394>)
 80012c6:	f7ff f963 	bl	8000590 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	a333      	add	r3, pc, #204	@ (adr r3, 80013a0 <servo_move+0x380>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff fa84 	bl	80007e4 <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fb66 	bl	80009b4 <__aeabi_d2iz>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	e01b      	b.n	8001326 <servo_move+0x306>
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8e1 	bl	80004bc <__aeabi_i2d>
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b31      	ldr	r3, [pc, #196]	@ (80013c4 <servo_move+0x3a4>)
 8001300:	f7ff f946 	bl	8000590 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	a326      	add	r3, pc, #152	@ (adr r3, 80013a8 <servo_move+0x388>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fa67 	bl	80007e4 <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fb49 	bl	80009b4 <__aeabi_d2iz>
 8001322:	4603      	mov	r3, r0
 8001324:	b21b      	sxth	r3, r3
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	8093      	strh	r3, [r2, #4]
      break;
 800132a:	e056      	b.n	80013da <servo_move+0x3ba>
    case 6:
      target_servo->current_degree = SERVO_ID6_POS_TO_ANGLE(target_pos);
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001332:	d84d      	bhi.n	80013d0 <servo_move+0x3b0>
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8be 	bl	80004bc <__aeabi_i2d>
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <servo_move+0x3a8>)
 8001346:	f7ff f923 	bl	8000590 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <servo_move+0x3ac>)
 8001358:	f7ff fa44 	bl	80007e4 <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fb26 	bl	80009b4 <__aeabi_d2iz>
 8001368:	4603      	mov	r3, r0
 800136a:	b21a      	sxth	r2, r3
 800136c:	e031      	b.n	80013d2 <servo_move+0x3b2>
 800136e:	bf00      	nop
 8001370:	00000000 	.word	0x00000000
 8001374:	4076a000 	.word	0x4076a000
 8001378:	00000000 	.word	0x00000000
 800137c:	40772000 	.word	0x40772000
 8001380:	00000000 	.word	0x00000000
 8001384:	c0786000 	.word	0xc0786000
 8001388:	00000000 	.word	0x00000000
 800138c:	4076c000 	.word	0x4076c000
 8001390:	00000000 	.word	0x00000000
 8001394:	c0772000 	.word	0xc0772000
 8001398:	00000000 	.word	0x00000000
 800139c:	4077a000 	.word	0x4077a000
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40786000 	.word	0x40786000
 80013a8:	00000000 	.word	0x00000000
 80013ac:	c0554000 	.word	0xc0554000
 80013b0:	20000214 	.word	0x20000214
 80013b4:	40568000 	.word	0x40568000
 80013b8:	c0568000 	.word	0xc0568000
 80013bc:	c0790000 	.word	0xc0790000
 80013c0:	c0768000 	.word	0xc0768000
 80013c4:	c0240000 	.word	0xc0240000
 80013c8:	c03e0000 	.word	0xc03e0000
 80013cc:	c05e0000 	.word	0xc05e0000
 80013d0:	2200      	movs	r2, #0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	809a      	strh	r2, [r3, #4]
      break;
 80013d6:	e000      	b.n	80013da <servo_move+0x3ba>
    default:
      break;
 80013d8:	bf00      	nop
  }
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop

080013e4 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	e010      	b.n	8001412 <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <servo_reset_all+0x40>)
 80013fc:	4413      	add	r3, r2
 80013fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001402:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe0a 	bl	8001020 <servo_move>
  for (int i = 0; i < 6; i++)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b05      	cmp	r3, #5
 8001416:	ddeb      	ble.n	80013f0 <servo_reset_all+0xc>
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000000 	.word	0x20000000

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_MspInit+0x44>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	4a0e      	ldr	r2, [pc, #56]	@ (800146c <HAL_MspInit+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6613      	str	r3, [r2, #96]	@ 0x60
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_MspInit+0x44>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_MspInit+0x44>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	6593      	str	r3, [r2, #88]	@ 0x58
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800145e:	f001 f8f3 	bl	8002648 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <NMI_Handler+0x4>

08001478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <MemManage_Handler+0x4>

08001488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <UsageFault_Handler+0x4>

08001498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 fd5d 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	@ 0x30
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2224      	movs	r2, #36	@ 0x24
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f004 f80c 	bl	8005520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <MX_TIM1_Init+0xac>)
 8001514:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <MX_TIM1_Init+0xb0>)
 8001516:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001518:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <MX_TIM1_Init+0xac>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <MX_TIM1_Init+0xac>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001524:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <MX_TIM1_Init+0xac>)
 8001526:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800152a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_TIM1_Init+0xac>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001532:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <MX_TIM1_Init+0xac>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_TIM1_Init+0xac>)
 800153a:	2280      	movs	r2, #128	@ 0x80
 800153c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800153e:	2303      	movs	r3, #3
 8001540:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800154e:	230a      	movs	r3, #10
 8001550:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001556:	2301      	movs	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800155e:	230a      	movs	r3, #10
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <MX_TIM1_Init+0xac>)
 800156a:	f002 f9db 	bl	8003924 <HAL_TIM_Encoder_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001574:	f7ff fd4d 	bl	8001012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001584:	463b      	mov	r3, r7
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <MX_TIM1_Init+0xac>)
 800158a:	f003 f837 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001594:	f7ff fd3d 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	3730      	adds	r7, #48	@ 0x30
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000004c 	.word	0x2000004c
 80015a4:	40012c00 	.word	0x40012c00

080015a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ba:	463b      	mov	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <MX_TIM2_Init+0xb0>)
 80015ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015d4:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <MX_TIM2_Init+0xb0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <MX_TIM2_Init+0xb0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <MX_TIM2_Init+0xb0>)
 80015e2:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80015e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_TIM2_Init+0xb0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <MX_TIM2_Init+0xb0>)
 80015f0:	2280      	movs	r2, #128	@ 0x80
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015f4:	4818      	ldr	r0, [pc, #96]	@ (8001658 <MX_TIM2_Init+0xb0>)
 80015f6:	f002 f82b 	bl	8003650 <HAL_TIM_PWM_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001600:	f7ff fd07 	bl	8001012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4811      	ldr	r0, [pc, #68]	@ (8001658 <MX_TIM2_Init+0xb0>)
 8001614:	f002 fff2 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800161e:	f7ff fcf8 	bl	8001012 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001622:	2360      	movs	r3, #96	@ 0x60
 8001624:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001632:	463b      	mov	r3, r7
 8001634:	220c      	movs	r2, #12
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <MX_TIM2_Init+0xb0>)
 800163a:	f002 fac7 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001644:	f7ff fce5 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <MX_TIM2_Init+0xb0>)
 800164a:	f000 fa93 	bl	8001b74 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000098 	.word	0x20000098

0800165c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	615a      	str	r2, [r3, #20]
 800167e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <MX_TIM3_Init+0xf0>)
 8001682:	4a33      	ldr	r2, [pc, #204]	@ (8001750 <MX_TIM3_Init+0xf4>)
 8001684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <MX_TIM3_Init+0xf0>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <MX_TIM3_Init+0xf0>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8001692:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <MX_TIM3_Init+0xf0>)
 8001694:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001698:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <MX_TIM3_Init+0xf0>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <MX_TIM3_Init+0xf0>)
 80016a2:	2280      	movs	r2, #128	@ 0x80
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016a6:	4829      	ldr	r0, [pc, #164]	@ (800174c <MX_TIM3_Init+0xf0>)
 80016a8:	f001 ffd2 	bl	8003650 <HAL_TIM_PWM_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80016b2:	f7ff fcae 	bl	8001012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	4821      	ldr	r0, [pc, #132]	@ (800174c <MX_TIM3_Init+0xf0>)
 80016c6:	f002 ff99 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80016d0:	f7ff fc9f 	bl	8001012 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d4:	2360      	movs	r3, #96	@ 0x60
 80016d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	4818      	ldr	r0, [pc, #96]	@ (800174c <MX_TIM3_Init+0xf0>)
 80016ec:	f002 fa6e 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80016f6:	f7ff fc8c 	bl	8001012 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	2204      	movs	r2, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4812      	ldr	r0, [pc, #72]	@ (800174c <MX_TIM3_Init+0xf0>)
 8001702:	f002 fa63 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800170c:	f7ff fc81 	bl	8001012 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001710:	463b      	mov	r3, r7
 8001712:	2208      	movs	r2, #8
 8001714:	4619      	mov	r1, r3
 8001716:	480d      	ldr	r0, [pc, #52]	@ (800174c <MX_TIM3_Init+0xf0>)
 8001718:	f002 fa58 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001722:	f7ff fc76 	bl	8001012 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	220c      	movs	r2, #12
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	@ (800174c <MX_TIM3_Init+0xf0>)
 800172e:	f002 fa4d 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001738:	f7ff fc6b 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <MX_TIM3_Init+0xf0>)
 800173e:	f000 fa19 	bl	8001b74 <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000e4 	.word	0x200000e4
 8001750:	40000400 	.word	0x40000400

08001754 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	@ 0x30
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2224      	movs	r2, #36	@ 0x24
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fedc 	bl	8005520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001772:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <MX_TIM4_Init+0xa4>)
 8001774:	4a21      	ldr	r2, [pc, #132]	@ (80017fc <MX_TIM4_Init+0xa8>)
 8001776:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <MX_TIM4_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <MX_TIM4_Init+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001784:	4b1c      	ldr	r3, [pc, #112]	@ (80017f8 <MX_TIM4_Init+0xa4>)
 8001786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800178a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <MX_TIM4_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <MX_TIM4_Init+0xa4>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001798:	2303      	movs	r3, #3
 800179a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017a0:	2301      	movs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80017a8:	230a      	movs	r3, #10
 80017aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017b0:	2301      	movs	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80017b8:	230a      	movs	r3, #10
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <MX_TIM4_Init+0xa4>)
 80017c4:	f002 f8ae 	bl	8003924 <HAL_TIM_Encoder_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017ce:	f7ff fc20 	bl	8001012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <MX_TIM4_Init+0xa4>)
 80017e0:	f002 ff0c 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80017ea:	f7ff fc12 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	@ 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000130 	.word	0x20000130
 80017fc:	40000800 	.word	0x40000800

08001800 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	@ 0x30
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2224      	movs	r2, #36	@ 0x24
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fe86 	bl	8005520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	463b      	mov	r3, r7
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <MX_TIM5_Init+0xa4>)
 8001820:	4a21      	ldr	r2, [pc, #132]	@ (80018a8 <MX_TIM5_Init+0xa8>)
 8001822:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <MX_TIM5_Init+0xa4>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <MX_TIM5_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_TIM5_Init+0xa4>)
 8001832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001836:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_TIM5_Init+0xa4>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <MX_TIM5_Init+0xa4>)
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001844:	2303      	movs	r3, #3
 8001846:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800184c:	2301      	movs	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001854:	230a      	movs	r3, #10
 8001856:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800185c:	2301      	movs	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001864:	230a      	movs	r3, #10
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	4619      	mov	r1, r3
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_TIM5_Init+0xa4>)
 8001870:	f002 f858 	bl	8003924 <HAL_TIM_Encoder_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800187a:	f7ff fbca 	bl	8001012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <MX_TIM5_Init+0xa4>)
 800188c:	f002 feb6 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001896:	f7ff fbbc 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	3730      	adds	r7, #48	@ 0x30
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000017c 	.word	0x2000017c
 80018a8:	40000c00 	.word	0x40000c00

080018ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2224      	movs	r2, #36	@ 0x24
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 fe30 	bl	8005520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <MX_TIM8_Init+0xac>)
 80018cc:	4a23      	ldr	r2, [pc, #140]	@ (800195c <MX_TIM8_Init+0xb0>)
 80018ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <MX_TIM8_Init+0xac>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <MX_TIM8_Init+0xac>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <MX_TIM8_Init+0xac>)
 80018de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_TIM8_Init+0xac>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <MX_TIM8_Init+0xac>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_TIM8_Init+0xac>)
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018f6:	2303      	movs	r3, #3
 80018f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001906:	230a      	movs	r3, #10
 8001908:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001916:	230a      	movs	r3, #10
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4619      	mov	r1, r3
 8001920:	480d      	ldr	r0, [pc, #52]	@ (8001958 <MX_TIM8_Init+0xac>)
 8001922:	f001 ffff 	bl	8003924 <HAL_TIM_Encoder_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800192c:	f7ff fb71 	bl	8001012 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_TIM8_Init+0xac>)
 8001942:	f002 fe5b 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800194c:	f7ff fb61 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	3730      	adds	r7, #48	@ 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200001c8 	.word	0x200001c8
 800195c:	40013400 	.word	0x40013400

08001960 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b090      	sub	sp, #64	@ 0x40
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a5d      	ldr	r2, [pc, #372]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0x194>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d128      	bne.n	80019d4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001982:	4b5d      	ldr	r3, [pc, #372]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001986:	4a5c      	ldr	r2, [pc, #368]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800198c:	6613      	str	r3, [r2, #96]	@ 0x60
 800198e:	4b5a      	ldr	r3, [pc, #360]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	4b57      	ldr	r3, [pc, #348]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199e:	4a56      	ldr	r2, [pc, #344]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a6:	4b54      	ldr	r3, [pc, #336]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019b2:	2303      	movs	r3, #3
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019c2:	2302      	movs	r3, #2
 80019c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	484b      	ldr	r0, [pc, #300]	@ (8001afc <HAL_TIM_Encoder_MspInit+0x19c>)
 80019ce:	f000 fbfd 	bl	80021cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80019d2:	e08a      	b.n	8001aea <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a49      	ldr	r2, [pc, #292]	@ (8001b00 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d129      	bne.n	8001a32 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019de:	4b46      	ldr	r3, [pc, #280]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	4a45      	ldr	r2, [pc, #276]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ea:	4b43      	ldr	r3, [pc, #268]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f6:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	4a3f      	ldr	r2, [pc, #252]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a02:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a0e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a20:	2302      	movs	r3, #2
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4836      	ldr	r0, [pc, #216]	@ (8001b04 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001a2c:	f000 fbce 	bl	80021cc <HAL_GPIO_Init>
}
 8001a30:	e05b      	b.n	8001aea <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a34      	ldr	r2, [pc, #208]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d129      	bne.n	8001a90 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	4a2d      	ldr	r2, [pc, #180]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a48:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a58:	4a27      	ldr	r2, [pc, #156]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a60:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a8a:	f000 fb9f 	bl	80021cc <HAL_GPIO_Init>
}
 8001a8e:	e02c      	b.n	8001aea <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1d      	ldr	r2, [pc, #116]	@ (8001b0c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d127      	bne.n	8001aea <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	4a16      	ldr	r2, [pc, #88]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001aa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aca:	23c0      	movs	r3, #192	@ 0xc0
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001ada:	2304      	movs	r3, #4
 8001adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <HAL_TIM_Encoder_MspInit+0x19c>)
 8001ae6:	f000 fb71 	bl	80021cc <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3740      	adds	r7, #64	@ 0x40
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40012c00 	.word	0x40012c00
 8001af8:	40021000 	.word	0x40021000
 8001afc:	48000800 	.word	0x48000800
 8001b00:	40000800 	.word	0x40000800
 8001b04:	48000c00 	.word	0x48000c00
 8001b08:	40000c00 	.word	0x40000c00
 8001b0c:	40013400 	.word	0x40013400

08001b10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b20:	d10c      	bne.n	8001b3c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_TIM_PWM_MspInit+0x5c>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b26:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <HAL_TIM_PWM_MspInit+0x5c>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_TIM_PWM_MspInit+0x5c>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b3a:	e010      	b.n	8001b5e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <HAL_TIM_PWM_MspInit+0x60>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10b      	bne.n	8001b5e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_TIM_PWM_MspInit+0x5c>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	4a08      	ldr	r2, [pc, #32]	@ (8001b6c <HAL_TIM_PWM_MspInit+0x5c>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_TIM_PWM_MspInit+0x5c>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40000400 	.word	0x40000400

08001b74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b94:	d11c      	bne.n	8001bd0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <HAL_TIM_MspPostInit+0xa8>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	4a20      	ldr	r2, [pc, #128]	@ (8001c1c <HAL_TIM_MspPostInit+0xa8>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <HAL_TIM_MspPostInit+0xa8>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bae:	2340      	movs	r3, #64	@ 0x40
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4815      	ldr	r0, [pc, #84]	@ (8001c20 <HAL_TIM_MspPostInit+0xac>)
 8001bca:	f000 faff 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bce:	e020      	b.n	8001c12 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a13      	ldr	r2, [pc, #76]	@ (8001c24 <HAL_TIM_MspPostInit+0xb0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d11b      	bne.n	8001c12 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <HAL_TIM_MspPostInit+0xa8>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <HAL_TIM_MspPostInit+0xa8>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <HAL_TIM_MspPostInit+0xa8>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bf2:	233c      	movs	r3, #60	@ 0x3c
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c02:	2302      	movs	r3, #2
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4806      	ldr	r0, [pc, #24]	@ (8001c28 <HAL_TIM_MspPostInit+0xb4>)
 8001c0e:	f000 fadd 	bl	80021cc <HAL_GPIO_Init>
}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	@ 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	48000c00 	.word	0x48000c00
 8001c24:	40000400 	.word	0x40000400
 8001c28:	48001000 	.word	0x48001000

08001c2c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c30:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c32:	4a23      	ldr	r2, [pc, #140]	@ (8001cc0 <MX_UART4_Init+0x94>)
 8001c34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c68:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c74:	4811      	ldr	r0, [pc, #68]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c76:	f002 fd57 	bl	8004728 <HAL_UART_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c80:	f7ff f9c7 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c84:	2100      	movs	r1, #0
 8001c86:	480d      	ldr	r0, [pc, #52]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c88:	f003 fb80 	bl	800538c <HAL_UARTEx_SetTxFifoThreshold>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c92:	f7ff f9be 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c96:	2100      	movs	r1, #0
 8001c98:	4808      	ldr	r0, [pc, #32]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001c9a:	f003 fbb5 	bl	8005408 <HAL_UARTEx_SetRxFifoThreshold>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001ca4:	f7ff f9b5 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <MX_UART4_Init+0x90>)
 8001caa:	f003 fb36 	bl	800531a <HAL_UARTEx_DisableFifoMode>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001cb4:	f7ff f9ad 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000214 	.word	0x20000214
 8001cc0:	40004c00 	.word	0x40004c00

08001cc4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001cca:	4a23      	ldr	r2, [pc, #140]	@ (8001d58 <MX_USART1_UART_Init+0x94>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cce:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b19      	ldr	r3, [pc, #100]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d00:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d0c:	4811      	ldr	r0, [pc, #68]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001d0e:	f002 fd0b 	bl	8004728 <HAL_UART_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d18:	f7ff f97b 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001d20:	f003 fb34 	bl	800538c <HAL_UARTEx_SetTxFifoThreshold>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d2a:	f7ff f972 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4808      	ldr	r0, [pc, #32]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001d32:	f003 fb69 	bl	8005408 <HAL_UARTEx_SetRxFifoThreshold>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d3c:	f7ff f969 	bl	8001012 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <MX_USART1_UART_Init+0x90>)
 8001d42:	f003 faea 	bl	800531a <HAL_UARTEx_DisableFifoMode>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d4c:	f7ff f961 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200002a8 	.word	0x200002a8
 8001d58:	40013800 	.word	0x40013800

08001d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0a0      	sub	sp, #128	@ 0x80
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d74:	f107 0318 	add.w	r3, r7, #24
 8001d78:	2254      	movs	r2, #84	@ 0x54
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fbcf 	bl	8005520 <memset>
  if(uartHandle->Instance==UART4)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a3d      	ldr	r2, [pc, #244]	@ (8001e7c <HAL_UART_MspInit+0x120>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d137      	bne.n	8001dfc <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 f993 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001da4:	f7ff f935 	bl	8001012 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001da8:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	4a34      	ldr	r2, [pc, #208]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001dae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db4:	4b32      	ldr	r3, [pc, #200]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dd8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ddc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001dea:	2305      	movs	r3, #5
 8001dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dee:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001df2:	4619      	mov	r1, r3
 8001df4:	4823      	ldr	r0, [pc, #140]	@ (8001e84 <HAL_UART_MspInit+0x128>)
 8001df6:	f000 f9e9 	bl	80021cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001dfa:	e03a      	b.n	8001e72 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <HAL_UART_MspInit+0x12c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d135      	bne.n	8001e72 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 f956 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001e1e:	f7ff f8f8 	bl	8001012 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e22:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e26:	4a16      	ldr	r2, [pc, #88]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e2e:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <HAL_UART_MspInit+0x124>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e52:	2330      	movs	r3, #48	@ 0x30
 8001e54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e62:	2307      	movs	r3, #7
 8001e64:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <HAL_UART_MspInit+0x128>)
 8001e6e:	f000 f9ad 	bl	80021cc <HAL_GPIO_Init>
}
 8001e72:	bf00      	nop
 8001e74:	3780      	adds	r7, #128	@ 0x80
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004c00 	.word	0x40004c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48000800 	.word	0x48000800
 8001e88:	40013800 	.word	0x40013800

08001e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e8c:	480d      	ldr	r0, [pc, #52]	@ (8001ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e90:	f7ff fb1e 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <LoopForever+0xe>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed8 <LoopForever+0x16>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f003 fb39 	bl	8005530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ebe:	f7fe ffc1 	bl	8000e44 <main>

08001ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec2:	e7fe      	b.n	8001ec2 <LoopForever>
  ldr   r0, =_estack
 8001ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001ed0:	080055e0 	.word	0x080055e0
  ldr r2, =_sbss
 8001ed4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001ed8:	20000340 	.word	0x20000340

08001edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC1_2_IRQHandler>

08001ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f93d 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f000 f80e 	bl	8001f10 <HAL_InitTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	71fb      	strb	r3, [r7, #7]
 8001efe:	e001      	b.n	8001f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f00:	f7ff fa92 	bl	8001428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f04:	79fb      	ldrb	r3, [r7, #7]

}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f1c:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <HAL_InitTick+0x68>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d022      	beq.n	8001f6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f24:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_InitTick+0x6c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <HAL_InitTick+0x68>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f93a 	bl	80021b2 <HAL_SYSTICK_Config>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	d809      	bhi.n	8001f5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f52:	f000 f914 	bl	800217e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <HAL_InitTick+0x70>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	e007      	b.n	8001f6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e004      	b.n	8001f6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e001      	b.n	8001f6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000002c 	.word	0x2000002c
 8001f7c:	20000024 	.word	0x20000024
 8001f80:	20000028 	.word	0x20000028

08001f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_IncTick+0x1c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a03      	ldr	r2, [pc, #12]	@ (8001fa0 <HAL_IncTick+0x1c>)
 8001f94:	6013      	str	r3, [r2, #0]
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	2000033c 	.word	0x2000033c
 8001fa4:	2000002c 	.word	0x2000002c

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	2000033c 	.word	0x2000033c

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fd8:	d004      	beq.n	8001fe4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_Delay+0x40>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe4:	bf00      	nop
 8001fe6:	f7ff ffdf 	bl	8001fa8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d8f7      	bhi.n	8001fe6 <HAL_Delay+0x26>
  {
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	2000002c 	.word	0x2000002c

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	@ (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff47 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff5e 	bl	800204c <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff90 	bl	80020bc <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5f 	bl	8002068 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffb2 	bl	8002124 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021da:	e15a      	b.n	8002492 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 814c 	beq.w	800248c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002208:	2b02      	cmp	r3, #2
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002242:	2201      	movs	r2, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d017      	beq.n	80022aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d123      	bne.n	80022fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	6939      	ldr	r1, [r7, #16]
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a6 	beq.w	800248c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002340:	4b5b      	ldr	r3, [pc, #364]	@ (80024b0 <HAL_GPIO_Init+0x2e4>)
 8002342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002344:	4a5a      	ldr	r2, [pc, #360]	@ (80024b0 <HAL_GPIO_Init+0x2e4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6613      	str	r3, [r2, #96]	@ 0x60
 800234c:	4b58      	ldr	r3, [pc, #352]	@ (80024b0 <HAL_GPIO_Init+0x2e4>)
 800234e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002358:	4a56      	ldr	r2, [pc, #344]	@ (80024b4 <HAL_GPIO_Init+0x2e8>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002382:	d01f      	beq.n	80023c4 <HAL_GPIO_Init+0x1f8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a4c      	ldr	r2, [pc, #304]	@ (80024b8 <HAL_GPIO_Init+0x2ec>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d019      	beq.n	80023c0 <HAL_GPIO_Init+0x1f4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a4b      	ldr	r2, [pc, #300]	@ (80024bc <HAL_GPIO_Init+0x2f0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_GPIO_Init+0x1f0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a4a      	ldr	r2, [pc, #296]	@ (80024c0 <HAL_GPIO_Init+0x2f4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00d      	beq.n	80023b8 <HAL_GPIO_Init+0x1ec>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a49      	ldr	r2, [pc, #292]	@ (80024c4 <HAL_GPIO_Init+0x2f8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <HAL_GPIO_Init+0x1e8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a48      	ldr	r2, [pc, #288]	@ (80024c8 <HAL_GPIO_Init+0x2fc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_GPIO_Init+0x1e4>
 80023ac:	2305      	movs	r3, #5
 80023ae:	e00a      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023b0:	2306      	movs	r3, #6
 80023b2:	e008      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e006      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023b8:	2303      	movs	r3, #3
 80023ba:	e004      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023bc:	2302      	movs	r3, #2
 80023be:	e002      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023c4:	2300      	movs	r3, #0
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	f002 0203 	and.w	r2, r2, #3
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4093      	lsls	r3, r2
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d6:	4937      	ldr	r1, [pc, #220]	@ (80024b4 <HAL_GPIO_Init+0x2e8>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e4:	4b39      	ldr	r3, [pc, #228]	@ (80024cc <HAL_GPIO_Init+0x300>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002408:	4a30      	ldr	r2, [pc, #192]	@ (80024cc <HAL_GPIO_Init+0x300>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800240e:	4b2f      	ldr	r3, [pc, #188]	@ (80024cc <HAL_GPIO_Init+0x300>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002432:	4a26      	ldr	r2, [pc, #152]	@ (80024cc <HAL_GPIO_Init+0x300>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_GPIO_Init+0x300>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800245c:	4a1b      	ldr	r2, [pc, #108]	@ (80024cc <HAL_GPIO_Init+0x300>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002462:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_GPIO_Init+0x300>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002486:	4a11      	ldr	r2, [pc, #68]	@ (80024cc <HAL_GPIO_Init+0x300>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f ae9d 	bne.w	80021dc <HAL_GPIO_Init+0x10>
  }
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	48000400 	.word	0x48000400
 80024bc:	48000800 	.word	0x48000800
 80024c0:	48000c00 	.word	0x48000c00
 80024c4:	48001000 	.word	0x48001000
 80024c8:	48001400 	.word	0x48001400
 80024cc:	40010400 	.word	0x40010400

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d141      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800250e:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251a:	d131      	bne.n	8002580 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800251c:	4b47      	ldr	r3, [pc, #284]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002522:	4a46      	ldr	r2, [pc, #280]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002528:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800252c:	4b43      	ldr	r3, [pc, #268]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002534:	4a41      	ldr	r2, [pc, #260]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002536:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800253a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800253c:	4b40      	ldr	r3, [pc, #256]	@ (8002640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2232      	movs	r2, #50	@ 0x32
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	4a3f      	ldr	r2, [pc, #252]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	0c9b      	lsrs	r3, r3, #18
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002552:	e002      	b.n	800255a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3b01      	subs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255a:	4b38      	ldr	r3, [pc, #224]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002566:	d102      	bne.n	800256e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f2      	bne.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800256e:	4b33      	ldr	r3, [pc, #204]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257a:	d158      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e057      	b.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002580:	4b2e      	ldr	r3, [pc, #184]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002586:	4a2d      	ldr	r2, [pc, #180]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800258c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002590:	e04d      	b.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002598:	d141      	bne.n	800261e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800259a:	4b28      	ldr	r3, [pc, #160]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a6:	d131      	bne.n	800260c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a8:	4b24      	ldr	r3, [pc, #144]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ae:	4a23      	ldr	r2, [pc, #140]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b8:	4b20      	ldr	r3, [pc, #128]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025c0:	4a1e      	ldr	r2, [pc, #120]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2232      	movs	r2, #50	@ 0x32
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025de:	e002      	b.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f2:	d102      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f2      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002606:	d112      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e011      	b.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002618:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800261c:	e007      	b.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002626:	4a05      	ldr	r2, [pc, #20]	@ (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002628:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800262c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40007000 	.word	0x40007000
 8002640:	20000024 	.word	0x20000024
 8002644:	431bde83 	.word	0x431bde83

08002648 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002656:	6093      	str	r3, [r2, #8]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40007000 	.word	0x40007000

08002668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e2fe      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d075      	beq.n	8002772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002686:	4b97      	ldr	r3, [pc, #604]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002690:	4b94      	ldr	r3, [pc, #592]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3e>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_OscConfig+0x44>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d10b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	4b8d      	ldr	r3, [pc, #564]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05b      	beq.n	8002770 <HAL_RCC_OscConfig+0x108>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d157      	bne.n	8002770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e2d9      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x74>
 80026ce:	4b85      	ldr	r3, [pc, #532]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a84      	ldr	r2, [pc, #528]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01d      	b.n	8002718 <HAL_RCC_OscConfig+0xb0>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x98>
 80026e6:	4b7f      	ldr	r3, [pc, #508]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a7e      	ldr	r2, [pc, #504]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b7c      	ldr	r3, [pc, #496]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7b      	ldr	r2, [pc, #492]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xb0>
 8002700:	4b78      	ldr	r3, [pc, #480]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a77      	ldr	r2, [pc, #476]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b75      	ldr	r3, [pc, #468]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a74      	ldr	r2, [pc, #464]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7ff fc42 	bl	8001fa8 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff fc3e 	bl	8001fa8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e29e      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273a:	4b6a      	ldr	r3, [pc, #424]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0xc0>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff fc2e 	bl	8001fa8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff fc2a 	bl	8001fa8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	@ 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e28a      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002762:	4b60      	ldr	r3, [pc, #384]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0xe8>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d075      	beq.n	800286a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4b59      	ldr	r3, [pc, #356]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002788:	4b56      	ldr	r3, [pc, #344]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d102      	bne.n	800279e <HAL_RCC_OscConfig+0x136>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_OscConfig+0x13c>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d11f      	bne.n	80027e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a4:	4b4f      	ldr	r3, [pc, #316]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_OscConfig+0x154>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e25d      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b49      	ldr	r3, [pc, #292]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	4946      	ldr	r1, [pc, #280]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027d0:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <HAL_RCC_OscConfig+0x280>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fb9b 	bl	8001f10 <HAL_InitTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d043      	beq.n	8002868 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e249      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3c      	ldr	r2, [pc, #240]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff fbd6 	bl	8001fa8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff fbd2 	bl	8001fa8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e232      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002812:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	061b      	lsls	r3, r3, #24
 800282c:	492d      	ldr	r1, [pc, #180]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
 8002832:	e01a      	b.n	800286a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002834:	4b2b      	ldr	r3, [pc, #172]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2a      	ldr	r2, [pc, #168]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800283a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff fbb2 	bl	8001fa8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7ff fbae 	bl	8001fa8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e20e      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800285a:	4b22      	ldr	r3, [pc, #136]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1e0>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d041      	beq.n	80028fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002884:	4a17      	ldr	r2, [pc, #92]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7ff fb8b 	bl	8001fa8 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002896:	f7ff fb87 	bl	8001fa8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1e7      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a8:	4b0e      	ldr	r3, [pc, #56]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0ef      	beq.n	8002896 <HAL_RCC_OscConfig+0x22e>
 80028b6:	e020      	b.n	80028fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028be:	4a09      	ldr	r2, [pc, #36]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7ff fb6e 	bl	8001fa8 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ce:	e00d      	b.n	80028ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7ff fb6a 	bl	8001fa8 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d906      	bls.n	80028ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1ca      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ea      	bne.n	80028d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80a6 	beq.w	8002a54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800290c:	4b84      	ldr	r3, [pc, #528]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_OscConfig+0x2b4>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x2b6>
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	4b7f      	ldr	r3, [pc, #508]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	4a7e      	ldr	r2, [pc, #504]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292c:	6593      	str	r3, [r2, #88]	@ 0x58
 800292e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293e:	4b79      	ldr	r3, [pc, #484]	@ (8002b24 <HAL_RCC_OscConfig+0x4bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294a:	4b76      	ldr	r3, [pc, #472]	@ (8002b24 <HAL_RCC_OscConfig+0x4bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	@ (8002b24 <HAL_RCC_OscConfig+0x4bc>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7ff fb27 	bl	8001fa8 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7ff fb23 	bl	8001fa8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e183      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002970:	4b6c      	ldr	r3, [pc, #432]	@ (8002b24 <HAL_RCC_OscConfig+0x4bc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d108      	bne.n	8002996 <HAL_RCC_OscConfig+0x32e>
 8002984:	4b66      	ldr	r3, [pc, #408]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298a:	4a65      	ldr	r2, [pc, #404]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002994:	e024      	b.n	80029e0 <HAL_RCC_OscConfig+0x378>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d110      	bne.n	80029c0 <HAL_RCC_OscConfig+0x358>
 800299e:	4b60      	ldr	r3, [pc, #384]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_OscConfig+0x378>
 80029c0:	4b57      	ldr	r3, [pc, #348]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c6:	4a56      	ldr	r2, [pc, #344]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	4a52      	ldr	r2, [pc, #328]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7ff fade 	bl	8001fa8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7ff fada 	bl	8001fa8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e138      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	4b46      	ldr	r3, [pc, #280]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ed      	beq.n	80029f0 <HAL_RCC_OscConfig+0x388>
 8002a14:	e015      	b.n	8002a42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7ff fac7 	bl	8001fa8 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7ff fac3 	bl	8001fa8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e121      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a34:	4b3a      	ldr	r3, [pc, #232]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ed      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a42:	7ffb      	ldrb	r3, [r7, #31]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b35      	ldr	r3, [pc, #212]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4c:	4a34      	ldr	r2, [pc, #208]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d03c      	beq.n	8002ada <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01c      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a68:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7ff fa96 	bl	8001fa8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a80:	f7ff fa92 	bl	8001fa8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0f2      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a92:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <HAL_RCC_OscConfig+0x418>
 8002aa0:	e01b      	b.n	8002ada <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7ff fa79 	bl	8001fa8 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aba:	f7ff fa75 	bl	8001fa8 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e0d5      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ef      	bne.n	8002aba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80c9 	beq.w	8002c76 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	f000 8083 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d15e      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a08      	ldr	r2, [pc, #32]	@ (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7ff fa4f 	bl	8001fa8 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7ff fa4b 	bl	8001fa8 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d905      	bls.n	8002b28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0ab      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	4b55      	ldr	r3, [pc, #340]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ec      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b34:	4b52      	ldr	r3, [pc, #328]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4b52      	ldr	r3, [pc, #328]	@ (8002c84 <HAL_RCC_OscConfig+0x61c>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6a11      	ldr	r1, [r2, #32]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b44:	3a01      	subs	r2, #1
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b4e:	0212      	lsls	r2, r2, #8
 8002b50:	4311      	orrs	r1, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b56:	0852      	lsrs	r2, r2, #1
 8002b58:	3a01      	subs	r2, #1
 8002b5a:	0552      	lsls	r2, r2, #21
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b62:	0852      	lsrs	r2, r2, #1
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0652      	lsls	r2, r2, #25
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b6e:	06d2      	lsls	r2, r2, #27
 8002b70:	430a      	orrs	r2, r1
 8002b72:	4943      	ldr	r1, [pc, #268]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a40      	ldr	r2, [pc, #256]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b84:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a3d      	ldr	r2, [pc, #244]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7ff fa0a 	bl	8001fa8 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7ff fa06 	bl	8001fa8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e066      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	4b35      	ldr	r3, [pc, #212]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x530>
 8002bb6:	e05e      	b.n	8002c76 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb8:	4b31      	ldr	r3, [pc, #196]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a30      	ldr	r2, [pc, #192]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002bbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7ff f9f0 	bl	8001fa8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7ff f9ec 	bl	8001fa8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e04c      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bde:	4b28      	ldr	r3, [pc, #160]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bea:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	4924      	ldr	r1, [pc, #144]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002bf0:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <HAL_RCC_OscConfig+0x620>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60cb      	str	r3, [r1, #12]
 8002bf6:	e03e      	b.n	8002c76 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e039      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c04:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <HAL_RCC_OscConfig+0x618>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d12c      	bne.n	8002c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d123      	bne.n	8002c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11b      	bne.n	8002c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d113      	bne.n	8002c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d109      	bne.n	8002c72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	019f800c 	.word	0x019f800c
 8002c88:	feeefffc 	.word	0xfeeefffc

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e11e      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b91      	ldr	r3, [pc, #580]	@ (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d910      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b8e      	ldr	r3, [pc, #568]	@ (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 020f 	bic.w	r2, r3, #15
 8002cba:	498c      	ldr	r1, [pc, #560]	@ (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b8a      	ldr	r3, [pc, #552]	@ (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e106      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d073      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d129      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce8:	4b81      	ldr	r3, [pc, #516]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0f4      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002cf8:	f000 f99e 	bl	8003038 <RCC_GetSysClockFreqFromPLLSource>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4a7c      	ldr	r2, [pc, #496]	@ (8002ef4 <HAL_RCC_ClockConfig+0x268>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d93f      	bls.n	8002d86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d06:	4b7a      	ldr	r3, [pc, #488]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d033      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d12f      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d26:	4b72      	ldr	r3, [pc, #456]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d2e:	4a70      	ldr	r2, [pc, #448]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e024      	b.n	8002d86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d44:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0c6      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d54:	4b66      	ldr	r3, [pc, #408]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0be      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d64:	f000 f8ce 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4a61      	ldr	r2, [pc, #388]	@ (8002ef4 <HAL_RCC_ClockConfig+0x268>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d909      	bls.n	8002d86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d72:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d7a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b5a      	ldr	r3, [pc, #360]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4957      	ldr	r1, [pc, #348]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d98:	f7ff f906 	bl	8001fa8 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7ff f902 	bl	8001fa8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e095      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b4e      	ldr	r3, [pc, #312]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d023      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de0:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a42      	ldr	r2, [pc, #264]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002de6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002df8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e00:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002e02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b39      	ldr	r3, [pc, #228]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4936      	ldr	r1, [pc, #216]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b80      	cmp	r3, #128	@ 0x80
 8002e20:	d105      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e22:	4b33      	ldr	r3, [pc, #204]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	4a32      	ldr	r2, [pc, #200]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002e28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d21d      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 020f 	bic.w	r2, r3, #15
 8002e44:	4929      	ldr	r1, [pc, #164]	@ (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e4c:	f7ff f8ac 	bl	8001fa8 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	f7ff f8a8 	bl	8001fa8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e03b      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1ed      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4917      	ldr	r1, [pc, #92]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea2:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	490f      	ldr	r1, [pc, #60]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb6:	f000 f825 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	490c      	ldr	r1, [pc, #48]	@ (8002ef8 <HAL_RCC_ClockConfig+0x26c>)
 8002ec8:	5ccb      	ldrb	r3, [r1, r3]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <HAL_RCC_ClockConfig+0x270>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <HAL_RCC_ClockConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f818 	bl	8001f10 <HAL_InitTick>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	04c4b400 	.word	0x04c4b400
 8002ef8:	08005590 	.word	0x08005590
 8002efc:	20000024 	.word	0x20000024
 8002f00:	20000028 	.word	0x20000028

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d102      	bne.n	8002f1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f16:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	e047      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f1c:	4b27      	ldr	r3, [pc, #156]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d102      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f28:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	e03e      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f2e:	4b23      	ldr	r3, [pc, #140]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d136      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f3a:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f44:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f58:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f62:	68d2      	ldr	r2, [r2, #12]
 8002f64:	0a12      	lsrs	r2, r2, #8
 8002f66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	617b      	str	r3, [r7, #20]
      break;
 8002f70:	e00c      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f72:	4a13      	ldr	r2, [pc, #76]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	4a10      	ldr	r2, [pc, #64]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	0a12      	lsrs	r2, r2, #8
 8002f80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f84:	fb02 f303 	mul.w	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
      break;
 8002f8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0e5b      	lsrs	r3, r3, #25
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	3301      	adds	r3, #1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e001      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fac:	693b      	ldr	r3, [r7, #16]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	007a1200 	.word	0x007a1200

08002fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000024 	.word	0x20000024

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fe4:	f7ff fff0 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	@ (8003008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	080055a0 	.word	0x080055a0

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003010:	f7ff ffda 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0adb      	lsrs	r3, r3, #11
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4904      	ldr	r1, [pc, #16]	@ (8003034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	080055a0 	.word	0x080055a0

08003038 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800303e:	4b1e      	ldr	r3, [pc, #120]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3301      	adds	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d10c      	bne.n	8003076 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800305c:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	4a14      	ldr	r2, [pc, #80]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003066:	68d2      	ldr	r2, [r2, #12]
 8003068:	0a12      	lsrs	r2, r2, #8
 800306a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	617b      	str	r3, [r7, #20]
    break;
 8003074:	e00c      	b.n	8003090 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	4a0e      	ldr	r2, [pc, #56]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	0a12      	lsrs	r2, r2, #8
 8003084:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003088:	fb02 f303 	mul.w	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]
    break;
 800308e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	0e5b      	lsrs	r3, r3, #25
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	3301      	adds	r3, #1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030aa:	687b      	ldr	r3, [r7, #4]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40021000 	.word	0x40021000
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	00f42400 	.word	0x00f42400

080030c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030cc:	2300      	movs	r3, #0
 80030ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8098 	beq.w	8003212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b40      	ldr	r3, [pc, #256]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	4a3f      	ldr	r2, [pc, #252]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fe:	4b3d      	ldr	r3, [pc, #244]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310e:	4b3a      	ldr	r3, [pc, #232]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a39      	ldr	r2, [pc, #228]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003118:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800311a:	f7fe ff45 	bl	8001fa8 <HAL_GetTick>
 800311e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003120:	e009      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7fe ff41 	bl	8001fa8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d902      	bls.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	74fb      	strb	r3, [r7, #19]
        break;
 8003134:	e005      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003136:	4b30      	ldr	r3, [pc, #192]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ef      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d159      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003148:	4b2a      	ldr	r3, [pc, #168]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003152:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01e      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	d019      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003164:	4b23      	ldr	r3, [pc, #140]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003170:	4b20      	ldr	r3, [pc, #128]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	4a1f      	ldr	r2, [pc, #124]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003180:	4b1c      	ldr	r3, [pc, #112]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003186:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003190:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe ff01 	bl	8001fa8 <HAL_GetTick>
 80031a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a8:	e00b      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe fefd 	bl	8001fa8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d902      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	74fb      	strb	r3, [r7, #19]
            break;
 80031c0:	e006      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c2:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ec      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d6:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e4:	4903      	ldr	r1, [pc, #12]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031ec:	e008      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	74bb      	strb	r3, [r7, #18]
 80031f2:	e005      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003200:	7c7b      	ldrb	r3, [r7, #17]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d105      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003206:	4ba7      	ldr	r3, [pc, #668]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320a:	4aa6      	ldr	r2, [pc, #664]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003210:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800321e:	4ba1      	ldr	r3, [pc, #644]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003224:	f023 0203 	bic.w	r2, r3, #3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	499d      	ldr	r1, [pc, #628]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003240:	4b98      	ldr	r3, [pc, #608]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f023 020c 	bic.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	4995      	ldr	r1, [pc, #596]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003262:	4b90      	ldr	r3, [pc, #576]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	498c      	ldr	r1, [pc, #560]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003284:	4b87      	ldr	r3, [pc, #540]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	4984      	ldr	r1, [pc, #528]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032a6:	4b7f      	ldr	r3, [pc, #508]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	497b      	ldr	r1, [pc, #492]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032c8:	4b76      	ldr	r3, [pc, #472]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	4973      	ldr	r1, [pc, #460]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ea:	4b6e      	ldr	r3, [pc, #440]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	496a      	ldr	r1, [pc, #424]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800330c:	4b65      	ldr	r3, [pc, #404]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4962      	ldr	r1, [pc, #392]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800332e:	4b5d      	ldr	r3, [pc, #372]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	4959      	ldr	r1, [pc, #356]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003350:	4b54      	ldr	r3, [pc, #336]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003352:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335e:	4951      	ldr	r1, [pc, #324]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003372:	4b4c      	ldr	r3, [pc, #304]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003378:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	4948      	ldr	r1, [pc, #288]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003394:	4b43      	ldr	r3, [pc, #268]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	4940      	ldr	r1, [pc, #256]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033b2:	d105      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b4:	4b3b      	ldr	r3, [pc, #236]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a3a      	ldr	r2, [pc, #232]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033be:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033cc:	4b35      	ldr	r3, [pc, #212]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033da:	4932      	ldr	r1, [pc, #200]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ea:	d105      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ec:	4b2d      	ldr	r3, [pc, #180]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a2c      	ldr	r2, [pc, #176]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033f6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003404:	4b27      	ldr	r3, [pc, #156]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	4924      	ldr	r1, [pc, #144]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003424:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a1e      	ldr	r2, [pc, #120]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800342e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800343c:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003442:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344a:	4916      	ldr	r1, [pc, #88]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800345a:	d105      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345c:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a10      	ldr	r2, [pc, #64]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003466:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d019      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003474:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4908      	ldr	r1, [pc, #32]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003492:	d109      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a02      	ldr	r2, [pc, #8]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800349e:	60d3      	str	r3, [r2, #12]
 80034a0:	e002      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d015      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034b4:	4b29      	ldr	r3, [pc, #164]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	4926      	ldr	r1, [pc, #152]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d2:	d105      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034d4:	4b21      	ldr	r3, [pc, #132]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a20      	ldr	r2, [pc, #128]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fa:	4918      	ldr	r1, [pc, #96]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350a:	d105      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a12      	ldr	r2, [pc, #72]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003516:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d015      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003524:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800352a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	490a      	ldr	r1, [pc, #40]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003542:	d105      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a04      	ldr	r2, [pc, #16]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800354a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800354e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003550:	7cbb      	ldrb	r3, [r7, #18]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000

08003560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d001      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e054      	b.n	8003622 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <HAL_TIM_Base_Start_IT+0xd0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d022      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x80>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a2:	d01d      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x80>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a22      	ldr	r2, [pc, #136]	@ (8003634 <HAL_TIM_Base_Start_IT+0xd4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d018      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x80>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a21      	ldr	r2, [pc, #132]	@ (8003638 <HAL_TIM_Base_Start_IT+0xd8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x80>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1f      	ldr	r2, [pc, #124]	@ (800363c <HAL_TIM_Base_Start_IT+0xdc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00e      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x80>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003640 <HAL_TIM_Base_Start_IT+0xe0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x80>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003644 <HAL_TIM_Base_Start_IT+0xe4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x80>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1b      	ldr	r2, [pc, #108]	@ (8003648 <HAL_TIM_Base_Start_IT+0xe8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d115      	bne.n	800360c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	4b19      	ldr	r3, [pc, #100]	@ (800364c <HAL_TIM_Base_Start_IT+0xec>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d015      	beq.n	800361e <HAL_TIM_Base_Start_IT+0xbe>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f8:	d011      	beq.n	800361e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360a:	e008      	b.n	800361e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e000      	b.n	8003620 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00
 8003640:	40013400 	.word	0x40013400
 8003644:	40014000 	.word	0x40014000
 8003648:	40015000 	.word	0x40015000
 800364c:	00010007 	.word	0x00010007

08003650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e049      	b.n	80036f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fe fa4a 	bl	8001b10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fbb0 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_TIM_PWM_Start+0x24>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e03c      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d109      	bne.n	800373e <HAL_TIM_PWM_Start+0x3e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e02f      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d109      	bne.n	8003758 <HAL_TIM_PWM_Start+0x58>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e022      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d109      	bne.n	8003772 <HAL_TIM_PWM_Start+0x72>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e015      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b10      	cmp	r3, #16
 8003776:	d109      	bne.n	800378c <HAL_TIM_PWM_Start+0x8c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e008      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0a6      	b.n	80038f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Start+0xb6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b4:	e023      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Start+0xc6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037c4:	e01b      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xd6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d4:	e013      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0xe6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0xf6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f4:	e003      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fed2 	bl	80045b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a3a      	ldr	r2, [pc, #232]	@ (80038fc <HAL_TIM_PWM_Start+0x1fc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d018      	beq.n	8003848 <HAL_TIM_PWM_Start+0x148>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a39      	ldr	r2, [pc, #228]	@ (8003900 <HAL_TIM_PWM_Start+0x200>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d013      	beq.n	8003848 <HAL_TIM_PWM_Start+0x148>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a37      	ldr	r2, [pc, #220]	@ (8003904 <HAL_TIM_PWM_Start+0x204>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00e      	beq.n	8003848 <HAL_TIM_PWM_Start+0x148>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a36      	ldr	r2, [pc, #216]	@ (8003908 <HAL_TIM_PWM_Start+0x208>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d009      	beq.n	8003848 <HAL_TIM_PWM_Start+0x148>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a34      	ldr	r2, [pc, #208]	@ (800390c <HAL_TIM_PWM_Start+0x20c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_PWM_Start+0x148>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a33      	ldr	r2, [pc, #204]	@ (8003910 <HAL_TIM_PWM_Start+0x210>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_TIM_PWM_Start+0x14c>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_TIM_PWM_Start+0x14e>
 800384c:	2300      	movs	r3, #0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a25      	ldr	r2, [pc, #148]	@ (80038fc <HAL_TIM_PWM_Start+0x1fc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x1b2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d01d      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x1b2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a26      	ldr	r2, [pc, #152]	@ (8003914 <HAL_TIM_PWM_Start+0x214>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x1b2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a24      	ldr	r2, [pc, #144]	@ (8003918 <HAL_TIM_PWM_Start+0x218>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x1b2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a23      	ldr	r2, [pc, #140]	@ (800391c <HAL_TIM_PWM_Start+0x21c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x1b2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a19      	ldr	r2, [pc, #100]	@ (8003900 <HAL_TIM_PWM_Start+0x200>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x1b2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_TIM_PWM_Start+0x204>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x1b2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a18      	ldr	r2, [pc, #96]	@ (8003910 <HAL_TIM_PWM_Start+0x210>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d115      	bne.n	80038de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <HAL_TIM_PWM_Start+0x220>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b06      	cmp	r3, #6
 80038c2:	d015      	beq.n	80038f0 <HAL_TIM_PWM_Start+0x1f0>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ca:	d011      	beq.n	80038f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	e008      	b.n	80038f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e000      	b.n	80038f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40013400 	.word	0x40013400
 8003904:	40014000 	.word	0x40014000
 8003908:	40014400 	.word	0x40014400
 800390c:	40014800 	.word	0x40014800
 8003910:	40015000 	.word	0x40015000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40000c00 	.word	0x40000c00
 8003920:	00010007 	.word	0x00010007

08003924 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e097      	b.n	8003a68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fe f807 	bl	8001960 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003968:	f023 0307 	bic.w	r3, r3, #7
 800396c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 fa3b 	bl	8003df4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	4313      	orrs	r3, r2
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80039c4:	f023 030c 	bic.w	r3, r3, #12
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	4313      	orrs	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	011a      	lsls	r2, r3, #4
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	031b      	lsls	r3, r3, #12
 80039f4:	4313      	orrs	r3, r2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	4313      	orrs	r3, r2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d110      	bne.n	8003ac2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003aa6:	7b7b      	ldrb	r3, [r7, #13]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d001      	beq.n	8003ab0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e089      	b.n	8003bc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ac0:	e031      	b.n	8003b26 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d110      	bne.n	8003aea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d102      	bne.n	8003ad4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ace:	7b3b      	ldrb	r3, [r7, #12]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d001      	beq.n	8003ad8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e075      	b.n	8003bc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ae8:	e01d      	b.n	8003b26 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af0:	7bbb      	ldrb	r3, [r7, #14]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af6:	7b7b      	ldrb	r3, [r7, #13]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003afc:	7b3b      	ldrb	r3, [r7, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e05e      	b.n	8003bc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d010      	beq.n	8003b54 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003b32:	e01f      	b.n	8003b74 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fd37 	bl	80045b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0202 	orr.w	r2, r2, #2
 8003b50:	60da      	str	r2, [r3, #12]
      break;
 8003b52:	e02e      	b.n	8003bb2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2104      	movs	r1, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fd27 	bl	80045b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0204 	orr.w	r2, r2, #4
 8003b70:	60da      	str	r2, [r3, #12]
      break;
 8003b72:	e01e      	b.n	8003bb2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fd17 	bl	80045b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	2104      	movs	r1, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fd10 	bl	80045b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0202 	orr.w	r2, r2, #2
 8003b9e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0204 	orr.w	r2, r2, #4
 8003bae:	60da      	str	r2, [r3, #12]
      break;
 8003bb0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0ff      	b.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b14      	cmp	r3, #20
 8003bf6:	f200 80f0 	bhi.w	8003dda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003ddb 	.word	0x08003ddb
 8003c08:	08003ddb 	.word	0x08003ddb
 8003c0c:	08003ddb 	.word	0x08003ddb
 8003c10:	08003c95 	.word	0x08003c95
 8003c14:	08003ddb 	.word	0x08003ddb
 8003c18:	08003ddb 	.word	0x08003ddb
 8003c1c:	08003ddb 	.word	0x08003ddb
 8003c20:	08003cd7 	.word	0x08003cd7
 8003c24:	08003ddb 	.word	0x08003ddb
 8003c28:	08003ddb 	.word	0x08003ddb
 8003c2c:	08003ddb 	.word	0x08003ddb
 8003c30:	08003d17 	.word	0x08003d17
 8003c34:	08003ddb 	.word	0x08003ddb
 8003c38:	08003ddb 	.word	0x08003ddb
 8003c3c:	08003ddb 	.word	0x08003ddb
 8003c40:	08003d59 	.word	0x08003d59
 8003c44:	08003ddb 	.word	0x08003ddb
 8003c48:	08003ddb 	.word	0x08003ddb
 8003c4c:	08003ddb 	.word	0x08003ddb
 8003c50:	08003d99 	.word	0x08003d99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f97e 	bl	8003f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0208 	orr.w	r2, r2, #8
 8003c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6999      	ldr	r1, [r3, #24]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	619a      	str	r2, [r3, #24]
      break;
 8003c92:	e0a5      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f9f8 	bl	8004090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6999      	ldr	r1, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	021a      	lsls	r2, r3, #8
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	619a      	str	r2, [r3, #24]
      break;
 8003cd4:	e084      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fa6b 	bl	80041b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0208 	orr.w	r2, r2, #8
 8003cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0204 	bic.w	r2, r2, #4
 8003d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69d9      	ldr	r1, [r3, #28]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	61da      	str	r2, [r3, #28]
      break;
 8003d14:	e064      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fadd 	bl	80042dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	021a      	lsls	r2, r3, #8
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	61da      	str	r2, [r3, #28]
      break;
 8003d56:	e043      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fb50 	bl	8004404 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0208 	orr.w	r2, r2, #8
 8003d72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0204 	bic.w	r2, r2, #4
 8003d82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003d96:	e023      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fb9a 	bl	80044d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003dd8:	e002      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a4c      	ldr	r2, [pc, #304]	@ (8003f38 <TIM_Base_SetConfig+0x144>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d017      	beq.n	8003e3c <TIM_Base_SetConfig+0x48>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d013      	beq.n	8003e3c <TIM_Base_SetConfig+0x48>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a49      	ldr	r2, [pc, #292]	@ (8003f3c <TIM_Base_SetConfig+0x148>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00f      	beq.n	8003e3c <TIM_Base_SetConfig+0x48>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a48      	ldr	r2, [pc, #288]	@ (8003f40 <TIM_Base_SetConfig+0x14c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00b      	beq.n	8003e3c <TIM_Base_SetConfig+0x48>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a47      	ldr	r2, [pc, #284]	@ (8003f44 <TIM_Base_SetConfig+0x150>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <TIM_Base_SetConfig+0x48>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a46      	ldr	r2, [pc, #280]	@ (8003f48 <TIM_Base_SetConfig+0x154>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_Base_SetConfig+0x48>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a45      	ldr	r2, [pc, #276]	@ (8003f4c <TIM_Base_SetConfig+0x158>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d108      	bne.n	8003e4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a39      	ldr	r2, [pc, #228]	@ (8003f38 <TIM_Base_SetConfig+0x144>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d023      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5c:	d01f      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a36      	ldr	r2, [pc, #216]	@ (8003f3c <TIM_Base_SetConfig+0x148>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01b      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a35      	ldr	r2, [pc, #212]	@ (8003f40 <TIM_Base_SetConfig+0x14c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d017      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a34      	ldr	r2, [pc, #208]	@ (8003f44 <TIM_Base_SetConfig+0x150>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a33      	ldr	r2, [pc, #204]	@ (8003f48 <TIM_Base_SetConfig+0x154>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00f      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a33      	ldr	r2, [pc, #204]	@ (8003f50 <TIM_Base_SetConfig+0x15c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a32      	ldr	r2, [pc, #200]	@ (8003f54 <TIM_Base_SetConfig+0x160>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a31      	ldr	r2, [pc, #196]	@ (8003f58 <TIM_Base_SetConfig+0x164>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_Base_SetConfig+0xaa>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2c      	ldr	r2, [pc, #176]	@ (8003f4c <TIM_Base_SetConfig+0x158>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	@ (8003f38 <TIM_Base_SetConfig+0x144>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <TIM_Base_SetConfig+0x110>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	@ (8003f48 <TIM_Base_SetConfig+0x154>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00f      	beq.n	8003f04 <TIM_Base_SetConfig+0x110>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f50 <TIM_Base_SetConfig+0x15c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <TIM_Base_SetConfig+0x110>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <TIM_Base_SetConfig+0x160>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d007      	beq.n	8003f04 <TIM_Base_SetConfig+0x110>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <TIM_Base_SetConfig+0x164>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0x110>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a13      	ldr	r2, [pc, #76]	@ (8003f4c <TIM_Base_SetConfig+0x158>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d103      	bne.n	8003f0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d105      	bne.n	8003f2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f023 0201 	bic.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40015000 	.word	0x40015000
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800

08003f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 0201 	bic.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0302 	bic.w	r3, r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a30      	ldr	r2, [pc, #192]	@ (8004078 <TIM_OC1_SetConfig+0x11c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <TIM_OC1_SetConfig+0x88>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800407c <TIM_OC1_SetConfig+0x120>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00f      	beq.n	8003fe4 <TIM_OC1_SetConfig+0x88>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004080 <TIM_OC1_SetConfig+0x124>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00b      	beq.n	8003fe4 <TIM_OC1_SetConfig+0x88>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a2d      	ldr	r2, [pc, #180]	@ (8004084 <TIM_OC1_SetConfig+0x128>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <TIM_OC1_SetConfig+0x88>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004088 <TIM_OC1_SetConfig+0x12c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_OC1_SetConfig+0x88>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a2b      	ldr	r2, [pc, #172]	@ (800408c <TIM_OC1_SetConfig+0x130>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10c      	bne.n	8003ffe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f023 0308 	bic.w	r3, r3, #8
 8003fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1d      	ldr	r2, [pc, #116]	@ (8004078 <TIM_OC1_SetConfig+0x11c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <TIM_OC1_SetConfig+0xd2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <TIM_OC1_SetConfig+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_OC1_SetConfig+0xd2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1b      	ldr	r2, [pc, #108]	@ (8004080 <TIM_OC1_SetConfig+0x124>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_OC1_SetConfig+0xd2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1a      	ldr	r2, [pc, #104]	@ (8004084 <TIM_OC1_SetConfig+0x128>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_OC1_SetConfig+0xd2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <TIM_OC1_SetConfig+0x12c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC1_SetConfig+0xd2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a18      	ldr	r2, [pc, #96]	@ (800408c <TIM_OC1_SetConfig+0x130>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40013400 	.word	0x40013400
 8004080:	40014000 	.word	0x40014000
 8004084:	40014400 	.word	0x40014400
 8004088:	40014800 	.word	0x40014800
 800408c:	40015000 	.word	0x40015000

08004090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 0210 	bic.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0320 	bic.w	r3, r3, #32
 80040de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a2c      	ldr	r2, [pc, #176]	@ (80041a0 <TIM_OC2_SetConfig+0x110>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_OC2_SetConfig+0x74>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a2b      	ldr	r2, [pc, #172]	@ (80041a4 <TIM_OC2_SetConfig+0x114>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC2_SetConfig+0x74>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a2a      	ldr	r2, [pc, #168]	@ (80041a8 <TIM_OC2_SetConfig+0x118>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10d      	bne.n	8004120 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800411e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a1f      	ldr	r2, [pc, #124]	@ (80041a0 <TIM_OC2_SetConfig+0x110>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <TIM_OC2_SetConfig+0xc0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a1e      	ldr	r2, [pc, #120]	@ (80041a4 <TIM_OC2_SetConfig+0x114>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00f      	beq.n	8004150 <TIM_OC2_SetConfig+0xc0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a1e      	ldr	r2, [pc, #120]	@ (80041ac <TIM_OC2_SetConfig+0x11c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00b      	beq.n	8004150 <TIM_OC2_SetConfig+0xc0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <TIM_OC2_SetConfig+0x120>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <TIM_OC2_SetConfig+0xc0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1c      	ldr	r2, [pc, #112]	@ (80041b4 <TIM_OC2_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0xc0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <TIM_OC2_SetConfig+0x118>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d113      	bne.n	8004178 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40013400 	.word	0x40013400
 80041a8:	40015000 	.word	0x40015000
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40014400 	.word	0x40014400
 80041b4:	40014800 	.word	0x40014800

080041b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2b      	ldr	r2, [pc, #172]	@ (80042c4 <TIM_OC3_SetConfig+0x10c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <TIM_OC3_SetConfig+0x72>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2a      	ldr	r2, [pc, #168]	@ (80042c8 <TIM_OC3_SetConfig+0x110>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_OC3_SetConfig+0x72>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a29      	ldr	r2, [pc, #164]	@ (80042cc <TIM_OC3_SetConfig+0x114>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10d      	bne.n	8004246 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1e      	ldr	r2, [pc, #120]	@ (80042c4 <TIM_OC3_SetConfig+0x10c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <TIM_OC3_SetConfig+0xbe>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1d      	ldr	r2, [pc, #116]	@ (80042c8 <TIM_OC3_SetConfig+0x110>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00f      	beq.n	8004276 <TIM_OC3_SetConfig+0xbe>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1d      	ldr	r2, [pc, #116]	@ (80042d0 <TIM_OC3_SetConfig+0x118>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00b      	beq.n	8004276 <TIM_OC3_SetConfig+0xbe>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <TIM_OC3_SetConfig+0x11c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <TIM_OC3_SetConfig+0xbe>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <TIM_OC3_SetConfig+0x120>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC3_SetConfig+0xbe>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a16      	ldr	r2, [pc, #88]	@ (80042cc <TIM_OC3_SetConfig+0x114>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d113      	bne.n	800429e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800427c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40013400 	.word	0x40013400
 80042cc:	40015000 	.word	0x40015000
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800

080042dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800432a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a2c      	ldr	r2, [pc, #176]	@ (80043ec <TIM_OC4_SetConfig+0x110>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_OC4_SetConfig+0x74>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a2b      	ldr	r2, [pc, #172]	@ (80043f0 <TIM_OC4_SetConfig+0x114>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_OC4_SetConfig+0x74>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2a      	ldr	r2, [pc, #168]	@ (80043f4 <TIM_OC4_SetConfig+0x118>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10d      	bne.n	800436c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800436a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a1f      	ldr	r2, [pc, #124]	@ (80043ec <TIM_OC4_SetConfig+0x110>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <TIM_OC4_SetConfig+0xc0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1e      	ldr	r2, [pc, #120]	@ (80043f0 <TIM_OC4_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00f      	beq.n	800439c <TIM_OC4_SetConfig+0xc0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <TIM_OC4_SetConfig+0x11c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00b      	beq.n	800439c <TIM_OC4_SetConfig+0xc0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a1d      	ldr	r2, [pc, #116]	@ (80043fc <TIM_OC4_SetConfig+0x120>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_OC4_SetConfig+0xc0>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <TIM_OC4_SetConfig+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_OC4_SetConfig+0xc0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a17      	ldr	r2, [pc, #92]	@ (80043f4 <TIM_OC4_SetConfig+0x118>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d113      	bne.n	80043c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	019b      	lsls	r3, r3, #6
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40013400 	.word	0x40013400
 80043f4:	40015000 	.word	0x40015000
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800

08004404 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004448:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <TIM_OC5_SetConfig+0xbc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <TIM_OC5_SetConfig+0x82>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a18      	ldr	r2, [pc, #96]	@ (80044c4 <TIM_OC5_SetConfig+0xc0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00f      	beq.n	8004486 <TIM_OC5_SetConfig+0x82>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <TIM_OC5_SetConfig+0xc4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_OC5_SetConfig+0x82>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <TIM_OC5_SetConfig+0xc8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_OC5_SetConfig+0x82>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a15      	ldr	r2, [pc, #84]	@ (80044d0 <TIM_OC5_SetConfig+0xcc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_OC5_SetConfig+0x82>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a14      	ldr	r2, [pc, #80]	@ (80044d4 <TIM_OC5_SetConfig+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d109      	bne.n	800449a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800448c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	621a      	str	r2, [r3, #32]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40013400 	.word	0x40013400
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800
 80044d4:	40015000 	.word	0x40015000

080044d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800451e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	051b      	lsls	r3, r3, #20
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a1a      	ldr	r2, [pc, #104]	@ (8004598 <TIM_OC6_SetConfig+0xc0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <TIM_OC6_SetConfig+0x84>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a19      	ldr	r2, [pc, #100]	@ (800459c <TIM_OC6_SetConfig+0xc4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_OC6_SetConfig+0x84>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a18      	ldr	r2, [pc, #96]	@ (80045a0 <TIM_OC6_SetConfig+0xc8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_OC6_SetConfig+0x84>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a17      	ldr	r2, [pc, #92]	@ (80045a4 <TIM_OC6_SetConfig+0xcc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_OC6_SetConfig+0x84>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a16      	ldr	r2, [pc, #88]	@ (80045a8 <TIM_OC6_SetConfig+0xd0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC6_SetConfig+0x84>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a15      	ldr	r2, [pc, #84]	@ (80045ac <TIM_OC6_SetConfig+0xd4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d109      	bne.n	8004570 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40013400 	.word	0x40013400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800
 80045ac:	40015000 	.word	0x40015000

080045b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	2201      	movs	r2, #1
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1a      	ldr	r2, [r3, #32]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	401a      	ands	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	fa01 f303 	lsl.w	r3, r1, r3
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004610:	2302      	movs	r3, #2
 8004612:	e074      	b.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a34      	ldr	r2, [pc, #208]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a33      	ldr	r2, [pc, #204]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a31      	ldr	r2, [pc, #196]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d108      	bne.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004658:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a21      	ldr	r2, [pc, #132]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004694:	d01d      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1f      	ldr	r2, [pc, #124]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1d      	ldr	r2, [pc, #116]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a15      	ldr	r2, [pc, #84]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a18      	ldr	r2, [pc, #96]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a11      	ldr	r2, [pc, #68]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10c      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40013400 	.word	0x40013400
 8004714:	40015000 	.word	0x40015000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40014000 	.word	0x40014000

08004728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e042      	b.n	80047c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fd fb05 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2224      	movs	r2, #36	@ 0x24
 8004756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fbb2 	bl	8004edc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f8b3 	bl	80048e4 <UART_SetConfig>
 800477e:	4603      	mov	r3, r0
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e01b      	b.n	80047c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fc31 	bl	8005020 <UART_CheckIdleState>
 80047be:	4603      	mov	r3, r0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	@ 0x28
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d17b      	bne.n	80048da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Transmit+0x26>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e074      	b.n	80048dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2221      	movs	r2, #33	@ 0x21
 80047fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004802:	f7fd fbd1 	bl	8001fa8 <HAL_GetTick>
 8004806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004820:	d108      	bne.n	8004834 <HAL_UART_Transmit+0x6c>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	e003      	b.n	800483c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800483c:	e030      	b.n	80048a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	2180      	movs	r1, #128	@ 0x80
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fc93 	bl	8005174 <UART_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e03d      	b.n	80048dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10b      	bne.n	800487e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004874:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	3302      	adds	r3, #2
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	e007      	b.n	800488e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1c8      	bne.n	800483e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2200      	movs	r2, #0
 80048b4:	2140      	movs	r1, #64	@ 0x40
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fc5c 	bl	8005174 <UART_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e006      	b.n	80048dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e8:	b08c      	sub	sp, #48	@ 0x30
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	431a      	orrs	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	4313      	orrs	r3, r2
 800490a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4baa      	ldr	r3, [pc, #680]	@ (8004bbc <UART_SetConfig+0x2d8>)
 8004914:	4013      	ands	r3, r2
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800491c:	430b      	orrs	r3, r1
 800491e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a9f      	ldr	r2, [pc, #636]	@ (8004bc0 <UART_SetConfig+0x2dc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800494c:	4313      	orrs	r3, r2
 800494e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800495a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004964:	430b      	orrs	r3, r1
 8004966:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	f023 010f 	bic.w	r1, r3, #15
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a90      	ldr	r2, [pc, #576]	@ (8004bc4 <UART_SetConfig+0x2e0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d125      	bne.n	80049d4 <UART_SetConfig+0xf0>
 8004988:	4b8f      	ldr	r3, [pc, #572]	@ (8004bc8 <UART_SetConfig+0x2e4>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b03      	cmp	r3, #3
 8004994:	d81a      	bhi.n	80049cc <UART_SetConfig+0xe8>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <UART_SetConfig+0xb8>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049ad 	.word	0x080049ad
 80049a0:	080049bd 	.word	0x080049bd
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b2:	e116      	b.n	8004be2 <UART_SetConfig+0x2fe>
 80049b4:	2302      	movs	r3, #2
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ba:	e112      	b.n	8004be2 <UART_SetConfig+0x2fe>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c2:	e10e      	b.n	8004be2 <UART_SetConfig+0x2fe>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ca:	e10a      	b.n	8004be2 <UART_SetConfig+0x2fe>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d2:	e106      	b.n	8004be2 <UART_SetConfig+0x2fe>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a7c      	ldr	r2, [pc, #496]	@ (8004bcc <UART_SetConfig+0x2e8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d138      	bne.n	8004a50 <UART_SetConfig+0x16c>
 80049de:	4b7a      	ldr	r3, [pc, #488]	@ (8004bc8 <UART_SetConfig+0x2e4>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d82d      	bhi.n	8004a48 <UART_SetConfig+0x164>
 80049ec:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <UART_SetConfig+0x110>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a29 	.word	0x08004a29
 80049f8:	08004a49 	.word	0x08004a49
 80049fc:	08004a49 	.word	0x08004a49
 8004a00:	08004a49 	.word	0x08004a49
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a49 	.word	0x08004a49
 8004a0c:	08004a49 	.word	0x08004a49
 8004a10:	08004a49 	.word	0x08004a49
 8004a14:	08004a31 	.word	0x08004a31
 8004a18:	08004a49 	.word	0x08004a49
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a41 	.word	0x08004a41
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a2e:	e0d8      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a36:	e0d4      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3e:	e0d0      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a40:	2308      	movs	r3, #8
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a46:	e0cc      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4e:	e0c8      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a5e      	ldr	r2, [pc, #376]	@ (8004bd0 <UART_SetConfig+0x2ec>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d125      	bne.n	8004aa6 <UART_SetConfig+0x1c2>
 8004a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc8 <UART_SetConfig+0x2e4>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a64:	2b30      	cmp	r3, #48	@ 0x30
 8004a66:	d016      	beq.n	8004a96 <UART_SetConfig+0x1b2>
 8004a68:	2b30      	cmp	r3, #48	@ 0x30
 8004a6a:	d818      	bhi.n	8004a9e <UART_SetConfig+0x1ba>
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d00a      	beq.n	8004a86 <UART_SetConfig+0x1a2>
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d814      	bhi.n	8004a9e <UART_SetConfig+0x1ba>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <UART_SetConfig+0x19a>
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d008      	beq.n	8004a8e <UART_SetConfig+0x1aa>
 8004a7c:	e00f      	b.n	8004a9e <UART_SetConfig+0x1ba>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a84:	e0ad      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a86:	2302      	movs	r3, #2
 8004a88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8c:	e0a9      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a94:	e0a5      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a96:	2308      	movs	r3, #8
 8004a98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9c:	e0a1      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa4:	e09d      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd4 <UART_SetConfig+0x2f0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d125      	bne.n	8004afc <UART_SetConfig+0x218>
 8004ab0:	4b45      	ldr	r3, [pc, #276]	@ (8004bc8 <UART_SetConfig+0x2e4>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004abc:	d016      	beq.n	8004aec <UART_SetConfig+0x208>
 8004abe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ac0:	d818      	bhi.n	8004af4 <UART_SetConfig+0x210>
 8004ac2:	2b80      	cmp	r3, #128	@ 0x80
 8004ac4:	d00a      	beq.n	8004adc <UART_SetConfig+0x1f8>
 8004ac6:	2b80      	cmp	r3, #128	@ 0x80
 8004ac8:	d814      	bhi.n	8004af4 <UART_SetConfig+0x210>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <UART_SetConfig+0x1f0>
 8004ace:	2b40      	cmp	r3, #64	@ 0x40
 8004ad0:	d008      	beq.n	8004ae4 <UART_SetConfig+0x200>
 8004ad2:	e00f      	b.n	8004af4 <UART_SetConfig+0x210>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ada:	e082      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004adc:	2302      	movs	r3, #2
 8004ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae2:	e07e      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aea:	e07a      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004aec:	2308      	movs	r3, #8
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af2:	e076      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004af4:	2310      	movs	r3, #16
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004afa:	e072      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a35      	ldr	r2, [pc, #212]	@ (8004bd8 <UART_SetConfig+0x2f4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d12a      	bne.n	8004b5c <UART_SetConfig+0x278>
 8004b06:	4b30      	ldr	r3, [pc, #192]	@ (8004bc8 <UART_SetConfig+0x2e4>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b14:	d01a      	beq.n	8004b4c <UART_SetConfig+0x268>
 8004b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b1a:	d81b      	bhi.n	8004b54 <UART_SetConfig+0x270>
 8004b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b20:	d00c      	beq.n	8004b3c <UART_SetConfig+0x258>
 8004b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b26:	d815      	bhi.n	8004b54 <UART_SetConfig+0x270>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <UART_SetConfig+0x250>
 8004b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b30:	d008      	beq.n	8004b44 <UART_SetConfig+0x260>
 8004b32:	e00f      	b.n	8004b54 <UART_SetConfig+0x270>
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3a:	e052      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b42:	e04e      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4a:	e04a      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b52:	e046      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5a:	e042      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a17      	ldr	r2, [pc, #92]	@ (8004bc0 <UART_SetConfig+0x2dc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d13a      	bne.n	8004bdc <UART_SetConfig+0x2f8>
 8004b66:	4b18      	ldr	r3, [pc, #96]	@ (8004bc8 <UART_SetConfig+0x2e4>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b74:	d01a      	beq.n	8004bac <UART_SetConfig+0x2c8>
 8004b76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b7a:	d81b      	bhi.n	8004bb4 <UART_SetConfig+0x2d0>
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b80:	d00c      	beq.n	8004b9c <UART_SetConfig+0x2b8>
 8004b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b86:	d815      	bhi.n	8004bb4 <UART_SetConfig+0x2d0>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <UART_SetConfig+0x2b0>
 8004b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b90:	d008      	beq.n	8004ba4 <UART_SetConfig+0x2c0>
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x2d0>
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9a:	e022      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba2:	e01e      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004baa:	e01a      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004bac:	2308      	movs	r3, #8
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb2:	e016      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bba:	e012      	b.n	8004be2 <UART_SetConfig+0x2fe>
 8004bbc:	cfff69f3 	.word	0xcfff69f3
 8004bc0:	40008000 	.word	0x40008000
 8004bc4:	40013800 	.word	0x40013800
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40004400 	.word	0x40004400
 8004bd0:	40004800 	.word	0x40004800
 8004bd4:	40004c00 	.word	0x40004c00
 8004bd8:	40005000 	.word	0x40005000
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4aae      	ldr	r2, [pc, #696]	@ (8004ea0 <UART_SetConfig+0x5bc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	f040 8097 	bne.w	8004d1c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d823      	bhi.n	8004c3e <UART_SetConfig+0x35a>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0x318>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c3f 	.word	0x08004c3f
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c3f 	.word	0x08004c3f
 8004c0c:	08004c2f 	.word	0x08004c2f
 8004c10:	08004c3f 	.word	0x08004c3f
 8004c14:	08004c3f 	.word	0x08004c3f
 8004c18:	08004c3f 	.word	0x08004c3f
 8004c1c:	08004c37 	.word	0x08004c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe f9de 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8004c24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c26:	e010      	b.n	8004c4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c28:	4b9e      	ldr	r3, [pc, #632]	@ (8004ea4 <UART_SetConfig+0x5c0>)
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c2c:	e00d      	b.n	8004c4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7fe f969 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8004c32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c34:	e009      	b.n	8004c4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c3c:	e005      	b.n	8004c4a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8130 	beq.w	8004eb2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	4a94      	ldr	r2, [pc, #592]	@ (8004ea8 <UART_SetConfig+0x5c4>)
 8004c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4413      	add	r3, r2
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d305      	bcc.n	8004c82 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d903      	bls.n	8004c8a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c88:	e113      	b.n	8004eb2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	60fa      	str	r2, [r7, #12]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	4a84      	ldr	r2, [pc, #528]	@ (8004ea8 <UART_SetConfig+0x5c4>)
 8004c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cac:	f7fb feaa 	bl	8000a04 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	020b      	lsls	r3, r1, #8
 8004cc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cc6:	0202      	lsls	r2, r0, #8
 8004cc8:	6979      	ldr	r1, [r7, #20]
 8004cca:	6849      	ldr	r1, [r1, #4]
 8004ccc:	0849      	lsrs	r1, r1, #1
 8004cce:	2000      	movs	r0, #0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	eb12 0804 	adds.w	r8, r2, r4
 8004cd8:	eb43 0905 	adc.w	r9, r3, r5
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	469a      	mov	sl, r3
 8004ce4:	4693      	mov	fp, r2
 8004ce6:	4652      	mov	r2, sl
 8004ce8:	465b      	mov	r3, fp
 8004cea:	4640      	mov	r0, r8
 8004cec:	4649      	mov	r1, r9
 8004cee:	f7fb fe89 	bl	8000a04 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d00:	d308      	bcc.n	8004d14 <UART_SetConfig+0x430>
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d08:	d204      	bcs.n	8004d14 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	e0ce      	b.n	8004eb2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d1a:	e0ca      	b.n	8004eb2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d24:	d166      	bne.n	8004df4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d827      	bhi.n	8004d7e <UART_SetConfig+0x49a>
 8004d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d34 <UART_SetConfig+0x450>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d61 	.word	0x08004d61
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	08004d7f 	.word	0x08004d7f
 8004d44:	08004d6f 	.word	0x08004d6f
 8004d48:	08004d7f 	.word	0x08004d7f
 8004d4c:	08004d7f 	.word	0x08004d7f
 8004d50:	08004d7f 	.word	0x08004d7f
 8004d54:	08004d77 	.word	0x08004d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d58:	f7fe f942 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d5e:	e014      	b.n	8004d8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d60:	f7fe f954 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8004d64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d66:	e010      	b.n	8004d8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d68:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea4 <UART_SetConfig+0x5c0>)
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d6c:	e00d      	b.n	8004d8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6e:	f7fe f8c9 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8004d72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d74:	e009      	b.n	8004d8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d7c:	e005      	b.n	8004d8a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8090 	beq.w	8004eb2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	4a44      	ldr	r2, [pc, #272]	@ (8004ea8 <UART_SetConfig+0x5c4>)
 8004d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da4:	005a      	lsls	r2, r3, #1
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	441a      	add	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d916      	bls.n	8004dec <UART_SetConfig+0x508>
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc4:	d212      	bcs.n	8004dec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f023 030f 	bic.w	r3, r3, #15
 8004dce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	8bfb      	ldrh	r3, [r7, #30]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	8bfa      	ldrh	r2, [r7, #30]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	e062      	b.n	8004eb2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004df2:	e05e      	b.n	8004eb2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d828      	bhi.n	8004e4e <UART_SetConfig+0x56a>
 8004dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004e04 <UART_SetConfig+0x520>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e4f 	.word	0x08004e4f
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e47 	.word	0x08004e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe f8da 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e2e:	e014      	b.n	8004e5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fe f8ec 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8004e34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e36:	e010      	b.n	8004e5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <UART_SetConfig+0x5c0>)
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e3c:	e00d      	b.n	8004e5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fe f861 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8004e42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e44:	e009      	b.n	8004e5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e4c:	e005      	b.n	8004e5a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e58:	bf00      	nop
    }

    if (pclk != 0U)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d028      	beq.n	8004eb2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	4a10      	ldr	r2, [pc, #64]	@ (8004ea8 <UART_SetConfig+0x5c4>)
 8004e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	441a      	add	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d910      	bls.n	8004eac <UART_SetConfig+0x5c8>
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e90:	d20c      	bcs.n	8004eac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	e009      	b.n	8004eb2 <UART_SetConfig+0x5ce>
 8004e9e:	bf00      	nop
 8004ea0:	40008000 	.word	0x40008000
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	080055a8 	.word	0x080055a8
      }
      else
      {
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ece:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3730      	adds	r7, #48	@ 0x30
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fda:	d10a      	bne.n	8004ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b098      	sub	sp, #96	@ 0x60
 8005024:	af02      	add	r7, sp, #8
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005030:	f7fc ffba 	bl	8001fa8 <HAL_GetTick>
 8005034:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b08      	cmp	r3, #8
 8005042:	d12f      	bne.n	80050a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005044:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800504c:	2200      	movs	r2, #0
 800504e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f88e 	bl	8005174 <UART_WaitOnFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d022      	beq.n	80050a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800506c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005072:	653b      	str	r3, [r7, #80]	@ 0x50
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800507c:	647b      	str	r3, [r7, #68]	@ 0x44
 800507e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800508a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e6      	bne.n	800505e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e063      	b.n	800516c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d149      	bne.n	8005146 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ba:	2200      	movs	r2, #0
 80050bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f857 	bl	8005174 <UART_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d03c      	beq.n	8005146 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	623b      	str	r3, [r7, #32]
   return(result);
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e6      	bne.n	80050cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	60fb      	str	r3, [r7, #12]
   return(result);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800511e:	61fa      	str	r2, [r7, #28]
 8005120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	69b9      	ldr	r1, [r7, #24]
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	617b      	str	r3, [r7, #20]
   return(result);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e012      	b.n	800516c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3758      	adds	r7, #88	@ 0x58
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005184:	e04f      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800518c:	d04b      	beq.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7fc ff0b 	bl	8001fa8 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e04e      	b.n	8005246 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d037      	beq.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b80      	cmp	r3, #128	@ 0x80
 80051ba:	d034      	beq.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b40      	cmp	r3, #64	@ 0x40
 80051c0:	d031      	beq.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d110      	bne.n	80051f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2208      	movs	r2, #8
 80051d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f838 	bl	800524e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2208      	movs	r2, #8
 80051e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e029      	b.n	8005246 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005200:	d111      	bne.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800520a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f81e 	bl	800524e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e00f      	b.n	8005246 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	429a      	cmp	r2, r3
 8005242:	d0a0      	beq.n	8005186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800524e:	b480      	push	{r7}
 8005250:	b095      	sub	sp, #84	@ 0x54
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005266:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800526a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005274:	643b      	str	r3, [r7, #64]	@ 0x40
 8005276:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800527a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e6      	bne.n	8005256 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3308      	adds	r3, #8
 800528e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	61fb      	str	r3, [r7, #28]
   return(result);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e3      	bne.n	8005288 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d118      	bne.n	80052fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f023 0310 	bic.w	r3, r3, #16
 80052dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6979      	ldr	r1, [r7, #20]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	613b      	str	r3, [r7, #16]
   return(result);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800530e:	bf00      	nop
 8005310:	3754      	adds	r7, #84	@ 0x54
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_UARTEx_DisableFifoMode+0x16>
 800532c:	2302      	movs	r3, #2
 800532e:	e027      	b.n	8005380 <HAL_UARTEx_DisableFifoMode+0x66>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2224      	movs	r2, #36	@ 0x24
 800533c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800535e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e02d      	b.n	8005400 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2224      	movs	r2, #36	@ 0x24
 80053b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f84f 	bl	8005484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800541c:	2302      	movs	r3, #2
 800541e:	e02d      	b.n	800547c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	@ 0x24
 800542c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f811 	bl	8005484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005490:	2b00      	cmp	r3, #0
 8005492:	d108      	bne.n	80054a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054a4:	e031      	b.n	800550a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054a6:	2308      	movs	r3, #8
 80054a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054aa:	2308      	movs	r3, #8
 80054ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	0e5b      	lsrs	r3, r3, #25
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	0f5b      	lsrs	r3, r3, #29
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ce:	7bbb      	ldrb	r3, [r7, #14]
 80054d0:	7b3a      	ldrb	r2, [r7, #12]
 80054d2:	4911      	ldr	r1, [pc, #68]	@ (8005518 <UARTEx_SetNbDataToProcess+0x94>)
 80054d4:	5c8a      	ldrb	r2, [r1, r2]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054da:	7b3a      	ldrb	r2, [r7, #12]
 80054dc:	490f      	ldr	r1, [pc, #60]	@ (800551c <UARTEx_SetNbDataToProcess+0x98>)
 80054de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	7b7a      	ldrb	r2, [r7, #13]
 80054f0:	4909      	ldr	r1, [pc, #36]	@ (8005518 <UARTEx_SetNbDataToProcess+0x94>)
 80054f2:	5c8a      	ldrb	r2, [r1, r2]
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054f8:	7b7a      	ldrb	r2, [r7, #13]
 80054fa:	4908      	ldr	r1, [pc, #32]	@ (800551c <UARTEx_SetNbDataToProcess+0x98>)
 80054fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800550a:	bf00      	nop
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	080055c0 	.word	0x080055c0
 800551c:	080055c8 	.word	0x080055c8

08005520 <memset>:
 8005520:	4402      	add	r2, r0
 8005522:	4603      	mov	r3, r0
 8005524:	4293      	cmp	r3, r2
 8005526:	d100      	bne.n	800552a <memset+0xa>
 8005528:	4770      	bx	lr
 800552a:	f803 1b01 	strb.w	r1, [r3], #1
 800552e:	e7f9      	b.n	8005524 <memset+0x4>

08005530 <__libc_init_array>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4d0d      	ldr	r5, [pc, #52]	@ (8005568 <__libc_init_array+0x38>)
 8005534:	4c0d      	ldr	r4, [pc, #52]	@ (800556c <__libc_init_array+0x3c>)
 8005536:	1b64      	subs	r4, r4, r5
 8005538:	10a4      	asrs	r4, r4, #2
 800553a:	2600      	movs	r6, #0
 800553c:	42a6      	cmp	r6, r4
 800553e:	d109      	bne.n	8005554 <__libc_init_array+0x24>
 8005540:	4d0b      	ldr	r5, [pc, #44]	@ (8005570 <__libc_init_array+0x40>)
 8005542:	4c0c      	ldr	r4, [pc, #48]	@ (8005574 <__libc_init_array+0x44>)
 8005544:	f000 f818 	bl	8005578 <_init>
 8005548:	1b64      	subs	r4, r4, r5
 800554a:	10a4      	asrs	r4, r4, #2
 800554c:	2600      	movs	r6, #0
 800554e:	42a6      	cmp	r6, r4
 8005550:	d105      	bne.n	800555e <__libc_init_array+0x2e>
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	f855 3b04 	ldr.w	r3, [r5], #4
 8005558:	4798      	blx	r3
 800555a:	3601      	adds	r6, #1
 800555c:	e7ee      	b.n	800553c <__libc_init_array+0xc>
 800555e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005562:	4798      	blx	r3
 8005564:	3601      	adds	r6, #1
 8005566:	e7f2      	b.n	800554e <__libc_init_array+0x1e>
 8005568:	080055d8 	.word	0x080055d8
 800556c:	080055d8 	.word	0x080055d8
 8005570:	080055d8 	.word	0x080055d8
 8005574:	080055dc 	.word	0x080055dc

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr
