
jason_fork_lift_v1_kitty_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000993c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08009b20  08009b20  0000ab20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d60  08009d60  0000b100  2**0
                  CONTENTS
  4 .ARM          00000008  08009d60  08009d60  0000ad60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d68  08009d68  0000b100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d68  08009d68  0000ad68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d6c  08009d6c  0000ad6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08009d70  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000100  08009e70  0000b100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08009e70  0000b5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015266  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003192  00000000  00000000  00020396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00023528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0f  00000000  00000000  00024778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233d0  00000000  00000000  00025587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ed9  00000000  00000000  00048957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc3fe  00000000  00000000  00060830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cc2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005794  00000000  00000000  0013cc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00142408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000100 	.word	0x20000100
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009b04 	.word	0x08009b04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000104 	.word	0x20000104
 800021c:	08009b04 	.word	0x08009b04

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <follow_auto_path>:

bool prev_auto_path_switch = false;

AutoPathSelection auto_path_selection = LEFT_PATH;

void follow_auto_path(AutoPathSelection auto_path_selection) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b092      	sub	sp, #72	@ 0x48
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  switch (auto_path_selection) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d057      	beq.n	8001088 <follow_auto_path+0xc0>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	f300 808a 	bgt.w	80010f2 <follow_auto_path+0x12a>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <follow_auto_path+0x20>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d035      	beq.n	8001052 <follow_auto_path+0x8a>
 8000fe6:	e084      	b.n	80010f2 <follow_auto_path+0x12a>
    case LEFT_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * 0.5, 0};
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fee:	4b5a      	ldr	r3, [pc, #360]	@ (8001158 <follow_auto_path+0x190>)
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 8000ff8:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8000ffc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001000:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001004:	eeb0 0a66 	vmov.f32	s0, s13
 8001008:	eef0 0a47 	vmov.f32	s1, s14
 800100c:	eeb0 1a67 	vmov.f32	s2, s15
 8001010:	f002 f99a 	bl	8003348 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_1);
 8001014:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001018:	f003 fae2 	bl	80045e0 <HAL_Delay>
      target_vel.x_vel = -ROBOT_MAX_X_VELOCITY * 0.5;
 800101c:	4b4f      	ldr	r3, [pc, #316]	@ (800115c <follow_auto_path+0x194>)
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
      target_vel.y_vel = 0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
      target_vel.z_vel = 0;
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 800102c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001030:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001034:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001038:	eeb0 0a66 	vmov.f32	s0, s13
 800103c:	eef0 0a47 	vmov.f32	s1, s14
 8001040:	eeb0 1a67 	vmov.f32	s2, s15
 8001044:	f002 f980 	bl	8003348 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_2);
 8001048:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104c:	f003 fac8 	bl	80045e0 <HAL_Delay>
      break;
 8001050:	e067      	b.n	8001122 <follow_auto_path+0x15a>
    }
    case MID_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * 0.5, 0};
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
 8001058:	4b3f      	ldr	r3, [pc, #252]	@ (8001158 <follow_auto_path+0x190>)
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      movement_control(target_vel);
 8001062:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001066:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800106a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800106e:	eeb0 0a66 	vmov.f32	s0, s13
 8001072:	eef0 0a47 	vmov.f32	s1, s14
 8001076:	eeb0 1a67 	vmov.f32	s2, s15
 800107a:	f002 f965 	bl	8003348 <movement_control>
      HAL_Delay(MID_PATH_TIME_1);
 800107e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001082:	f003 faad 	bl	80045e0 <HAL_Delay>
      break;
 8001086:	e04c      	b.n	8001122 <follow_auto_path+0x15a>
    }
    case RIGHT_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * 0.5, 0};
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <follow_auto_path+0x190>)
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 8001098:	edd7 6a06 	vldr	s13, [r7, #24]
 800109c:	ed97 7a07 	vldr	s14, [r7, #28]
 80010a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80010a4:	eeb0 0a66 	vmov.f32	s0, s13
 80010a8:	eef0 0a47 	vmov.f32	s1, s14
 80010ac:	eeb0 1a67 	vmov.f32	s2, s15
 80010b0:	f002 f94a 	bl	8003348 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_1);
 80010b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b8:	f003 fa92 	bl	80045e0 <HAL_Delay>
      target_vel.x_vel = ROBOT_MAX_X_VELOCITY * 0.5;
 80010bc:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <follow_auto_path+0x190>)
 80010be:	61bb      	str	r3, [r7, #24]
      target_vel.y_vel = 0;
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
      target_vel.z_vel = 0;
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 80010cc:	edd7 6a06 	vldr	s13, [r7, #24]
 80010d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010d8:	eeb0 0a66 	vmov.f32	s0, s13
 80010dc:	eef0 0a47 	vmov.f32	s1, s14
 80010e0:	eeb0 1a67 	vmov.f32	s2, s15
 80010e4:	f002 f930 	bl	8003348 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_2);
 80010e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ec:	f003 fa78 	bl	80045e0 <HAL_Delay>
      break;
 80010f0:	e017      	b.n	8001122 <follow_auto_path+0x15a>
    }
    default: {
      BaseVelocity target_vel = {0, 0, 0};
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
      movement_control(target_vel);
 8001104:	edd7 6a03 	vldr	s13, [r7, #12]
 8001108:	ed97 7a04 	vldr	s14, [r7, #16]
 800110c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001110:	eeb0 0a66 	vmov.f32	s0, s13
 8001114:	eef0 0a47 	vmov.f32	s1, s14
 8001118:	eeb0 1a67 	vmov.f32	s2, s15
 800111c:	f002 f914 	bl	8003348 <movement_control>
      break;
 8001120:	bf00      	nop
    }
  }
  BaseVelocity target_vel = {0, 0, 0};
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	@ 0x40
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	647b      	str	r3, [r7, #68]	@ 0x44
  movement_control(target_vel);
 8001134:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001138:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800113c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001140:	eeb0 0a66 	vmov.f32	s0, s13
 8001144:	eef0 0a47 	vmov.f32	s1, s14
 8001148:	eeb0 1a67 	vmov.f32	s2, s15
 800114c:	f002 f8fc 	bl	8003348 <movement_control>
 8001150:	bf00      	nop
 8001152:	3748      	adds	r7, #72	@ 0x48
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	401942c4 	.word	0x401942c4
 800115c:	c01942c4 	.word	0xc01942c4

08001160 <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b098      	sub	sp, #96	@ 0x60
 8001164:	af08      	add	r7, sp, #32
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <parse_controller_data+0x16>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 8001176:	4887      	ldr	r0, [pc, #540]	@ (8001394 <parse_controller_data+0x234>)
 8001178:	f007 f9c2 	bl	8008500 <puts>
    return 1;
 800117c:	2301      	movs	r3, #1
 800117e:	e105      	b.n	800138c <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 8001180:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001184:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	9306      	str	r3, [sp, #24]
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	9305      	str	r3, [sp, #20]
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	9304      	str	r3, [sp, #16]
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	9303      	str	r3, [sp, #12]
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	460b      	mov	r3, r1
 80011b4:	4978      	ldr	r1, [pc, #480]	@ (8001398 <parse_controller_data+0x238>)
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f006 ff94 	bl	80080e4 <siscanf>
 80011bc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 80011be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d004      	beq.n	80011ce <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 80011c4:	4875      	ldr	r0, [pc, #468]	@ (800139c <parse_controller_data+0x23c>)
 80011c6:	f007 f99b 	bl	8008500 <puts>
    return 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	e0de      	b.n	800138c <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 80011ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf14      	ite	ne
 80011d8:	2301      	movne	r3, #1
 80011da:	2300      	moveq	r3, #0
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 80011e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 80011f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2da      	uxtb	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 800120a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf14      	ite	ne
 8001214:	2301      	movne	r3, #1
 8001216:	2300      	moveq	r3, #0
 8001218:	b2da      	uxtb	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 800121e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2da      	uxtb	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 8001232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 8001246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf14      	ite	ne
 8001250:	2301      	movne	r3, #1
 8001252:	2300      	moveq	r3, #0
 8001254:	b2da      	uxtb	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 800125a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf14      	ite	ne
 8001264:	2301      	movne	r3, #1
 8001266:	2300      	moveq	r3, #0
 8001268:	b2da      	uxtb	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 800126e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2da      	uxtb	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 8001282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2da      	uxtb	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 8001296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf14      	ite	ne
 80012a0:	2301      	movne	r3, #1
 80012a2:	2300      	moveq	r3, #0
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 80012aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf14      	ite	ne
 80012c8:	2301      	movne	r3, #1
 80012ca:	2300      	moveq	r3, #0
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 80012d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	220a      	movs	r2, #10
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 f888 	bl	8008404 <strtol>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 80012fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001300:	220a      	movs	r2, #10
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f007 f87d 	bl	8008404 <strtol>
 800130a:	4603      	mov	r3, r0
 800130c:	b25a      	sxtb	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	220a      	movs	r2, #10
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f007 f872 	bl	8008404 <strtol>
 8001320:	4603      	mov	r3, r0
 8001322:	b25a      	sxtb	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	220a      	movs	r2, #10
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f007 f867 	bl	8008404 <strtol>
 8001336:	4603      	mov	r3, r0
 8001338:	b25a      	sxtb	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	b29a      	uxth	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	b29a      	uxth	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf14      	ite	ne
 8001358:	2301      	movne	r3, #1
 800135a:	2300      	moveq	r3, #0
 800135c:	b2da      	uxtb	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	bf14      	ite	ne
 800136c:	2301      	movne	r3, #1
 800136e:	2300      	moveq	r3, #0
 8001370:	b2da      	uxtb	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2da      	uxtb	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	761a      	strb	r2, [r3, #24]

  return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3740      	adds	r7, #64	@ 0x40
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	08009b20 	.word	0x08009b20
 8001398:	08009b40 	.word	0x08009b40
 800139c:	08009b68 	.word	0x08009b68

080013a0 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 80013b2:	f003 f909 	bl	80045c8 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	f240 8095 	bls.w	80014f6 <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d102      	bne.n	80013dc <update_encoder+0x3c>
    num_pulse = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e035      	b.n	8001448 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dd18      	ble.n	8001418 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b10      	cmp	r3, #16
 80013f4:	d10a      	bne.n	800140c <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6892      	ldr	r2, [r2, #8]
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e01d      	b.n	8001448 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e017      	b.n	8001448 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b10      	cmp	r3, #16
 8001426:	d105      	bne.n	8001434 <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e009      	b.n	8001448 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6892      	ldr	r2, [r2, #8]
 8001440:	1a9a      	subs	r2, r3, r2
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4413      	add	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	8a9b      	ldrh	r3, [r3, #20]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001462:	ee16 0a90 	vmov	r0, s13
 8001466:	f7ff f897 	bl	8000598 <__aeabi_f2d>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	f7fe ff35 	bl	80002dc <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	a322      	add	r3, pc, #136	@ (adr r3, 8001504 <update_encoder+0x164>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff f8e2 	bl	8000648 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fbd4 	bl	8000c38 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f7ff f872 	bl	8000598 <__aeabi_f2d>
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <update_encoder+0x160>)
 80014ba:	f7ff f8c5 	bl	8000648 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4614      	mov	r4, r2
 80014c4:	461d      	mov	r5, r3
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff f844 	bl	8000554 <__aeabi_ui2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7ff f9e2 	bl	800089c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fbaa 	bl	8000c38 <__aeabi_d2f>
 80014e4:	4602      	mov	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 80014ea:	f003 f86d 	bl	80045c8 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	e000      	b.n	80014f8 <update_encoder+0x158>
    return;
 80014f6:	bf00      	nop
}
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bdb0      	pop	{r4, r5, r7, pc}
 80014fe:	bf00      	nop
 8001500:	408f4000 	.word	0x408f4000
 8001504:	54442d18 	.word	0x54442d18
 8001508:	400921fb 	.word	0x400921fb

0800150c <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b095      	sub	sp, #84	@ 0x54
 8001510:	af00      	add	r7, sp, #0
 8001512:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d107      	bne.n	800152a <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 800151a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	e030      	b.n	800158c <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 800152a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800153c:	e00d      	b.n	800155a <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 800153e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	461a      	mov	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	4413      	add	r3, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff26 	bl	80013a0 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8001554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001556:	3301      	adds	r3, #1
 8001558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800155a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800155c:	2b03      	cmp	r3, #3
 800155e:	ddee      	ble.n	800153e <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3318      	adds	r3, #24
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3330      	adds	r3, #48	@ 0x30
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3348      	adds	r3, #72	@ 0x48
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 800157e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001582:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800158c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800158e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001594:	ee06 0a10 	vmov	s12, r0
 8001598:	ee06 1a90 	vmov	s13, r1
 800159c:	ee07 2a10 	vmov	s14, r2
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eeb0 0a46 	vmov.f32	s0, s12
 80015a8:	eef0 0a66 	vmov.f32	s1, s13
 80015ac:	eeb0 1a47 	vmov.f32	s2, s14
 80015b0:	eef0 1a67 	vmov.f32	s3, s15
 80015b4:	3754      	adds	r7, #84	@ 0x54
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd90      	pop	{r4, r7, pc}
	...

080015bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	@ 0x30
 80015c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d2:	4b60      	ldr	r3, [pc, #384]	@ (8001754 <MX_GPIO_Init+0x198>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001754 <MX_GPIO_Init+0x198>)
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015de:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <MX_GPIO_Init+0x198>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001754 <MX_GPIO_Init+0x198>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a59      	ldr	r2, [pc, #356]	@ (8001754 <MX_GPIO_Init+0x198>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b57      	ldr	r3, [pc, #348]	@ (8001754 <MX_GPIO_Init+0x198>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001602:	4b54      	ldr	r3, [pc, #336]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4a53      	ldr	r2, [pc, #332]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4b51      	ldr	r3, [pc, #324]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b4e      	ldr	r3, [pc, #312]	@ (8001754 <MX_GPIO_Init+0x198>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	4a4d      	ldr	r2, [pc, #308]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001626:	4b4b      	ldr	r3, [pc, #300]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b48      	ldr	r3, [pc, #288]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a47      	ldr	r2, [pc, #284]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b45      	ldr	r3, [pc, #276]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <MX_GPIO_Init+0x198>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a41      	ldr	r2, [pc, #260]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <MX_GPIO_Init+0x198>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin|LED_4_Pin
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 8001668:	483b      	ldr	r0, [pc, #236]	@ (8001758 <MX_GPIO_Init+0x19c>)
 800166a:	f003 fa41 	bl	8004af0 <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_IN1_Pin|D_IN2_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2181      	movs	r1, #129	@ 0x81
 8001672:	483a      	ldr	r0, [pc, #232]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001674:	f003 fa3c 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800167e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001682:	f003 fa35 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800168c:	4834      	ldr	r0, [pc, #208]	@ (8001760 <MX_GPIO_Init+0x1a4>)
 800168e:	f003 fa2f 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2101      	movs	r1, #1
 8001696:	4833      	ldr	r0, [pc, #204]	@ (8001764 <MX_GPIO_Init+0x1a8>)
 8001698:	f003 fa2a 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 800169c:	2370      	movs	r3, #112	@ 0x70
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4829      	ldr	r0, [pc, #164]	@ (8001758 <MX_GPIO_Init+0x19c>)
 80016b4:	f003 f89a 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : A_IN1_Pin D_IN2_Pin */
  GPIO_InitStruct.Pin = A_IN1_Pin|D_IN2_Pin;
 80016b8:	2381      	movs	r3, #129	@ 0x81
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	4823      	ldr	r0, [pc, #140]	@ (800175c <MX_GPIO_Init+0x1a0>)
 80016d0:	f003 f88c 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 80016d4:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	481a      	ldr	r0, [pc, #104]	@ (8001758 <MX_GPIO_Init+0x19c>)
 80016ee:	f003 f87d 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pin : D_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN1_Pin;
 80016f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(D_IN1_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f003 f86d 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pin : C_IN2_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin;
 8001712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(C_IN2_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_GPIO_Init+0x1a4>)
 800172c:	f003 f85e 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pin : C_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN1_Pin;
 8001730:	2301      	movs	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(C_IN1_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	4807      	ldr	r0, [pc, #28]	@ (8001764 <MX_GPIO_Init+0x1a8>)
 8001748:	f003 f850 	bl	80047ec <HAL_GPIO_Init>

}
 800174c:	bf00      	nop
 800174e:	3730      	adds	r7, #48	@ 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	48001000 	.word	0x48001000
 800175c:	48000400 	.word	0x48000400
 8001760:	48000800 	.word	0x48000800
 8001764:	48000c00 	.word	0x48000c00

08001768 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b098      	sub	sp, #96	@ 0x60
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f002 fec6 	bl	80044fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 fa8b 	bl	8001c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f7ff ff21 	bl	80015bc <MX_GPIO_Init>
  MX_TIM1_Init();
 800177a:	f002 f99d 	bl	8003ab8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800177e:	f002 fa77 	bl	8003c70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001782:	f002 faf7 	bl	8003d74 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001786:	f002 fb4b 	bl	8003e20 <MX_TIM5_Init>
  MX_TIM8_Init();
 800178a:	f002 fb9f 	bl	8003ecc <MX_TIM8_Init>
  MX_TIM2_Init();
 800178e:	f002 f9ed 	bl	8003b6c <MX_TIM2_Init>
  MX_UART4_Init();
 8001792:	f002 fd5b 	bl	800424c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001796:	f002 fda5 	bl	80042e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800179a:	2100      	movs	r1, #0
 800179c:	48a3      	ldr	r0, [pc, #652]	@ (8001a2c <main+0x2c4>)
 800179e:	f004 fb21 	bl	8005de4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017a2:	2104      	movs	r1, #4
 80017a4:	48a1      	ldr	r0, [pc, #644]	@ (8001a2c <main+0x2c4>)
 80017a6:	f004 fb1d 	bl	8005de4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017aa:	2100      	movs	r1, #0
 80017ac:	48a0      	ldr	r0, [pc, #640]	@ (8001a30 <main+0x2c8>)
 80017ae:	f004 fb19 	bl	8005de4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017b2:	2104      	movs	r1, #4
 80017b4:	489e      	ldr	r0, [pc, #632]	@ (8001a30 <main+0x2c8>)
 80017b6:	f004 fb15 	bl	8005de4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80017ba:	489e      	ldr	r0, [pc, #632]	@ (8001a34 <main+0x2cc>)
 80017bc:	f004 fa38 	bl	8005c30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80017c0:	213c      	movs	r1, #60	@ 0x3c
 80017c2:	489c      	ldr	r0, [pc, #624]	@ (8001a34 <main+0x2cc>)
 80017c4:	f004 fcc6 	bl	8006154 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80017c8:	489b      	ldr	r0, [pc, #620]	@ (8001a38 <main+0x2d0>)
 80017ca:	f004 fa31 	bl	8005c30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80017ce:	213c      	movs	r1, #60	@ 0x3c
 80017d0:	4899      	ldr	r0, [pc, #612]	@ (8001a38 <main+0x2d0>)
 80017d2:	f004 fcbf 	bl	8006154 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80017d6:	4899      	ldr	r0, [pc, #612]	@ (8001a3c <main+0x2d4>)
 80017d8:	f004 fa2a 	bl	8005c30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80017dc:	213c      	movs	r1, #60	@ 0x3c
 80017de:	4897      	ldr	r0, [pc, #604]	@ (8001a3c <main+0x2d4>)
 80017e0:	f004 fcb8 	bl	8006154 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80017e4:	4896      	ldr	r0, [pc, #600]	@ (8001a40 <main+0x2d8>)
 80017e6:	f004 fa23 	bl	8005c30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80017ea:	213c      	movs	r1, #60	@ 0x3c
 80017ec:	4894      	ldr	r0, [pc, #592]	@ (8001a40 <main+0x2d8>)
 80017ee:	f004 fcb1 	bl	8006154 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017f8:	4892      	ldr	r0, [pc, #584]	@ (8001a44 <main+0x2dc>)
 80017fa:	f003 f979 	bl	8004af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001804:	488f      	ldr	r0, [pc, #572]	@ (8001a44 <main+0x2dc>)
 8001806:	f003 f973 	bl	8004af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001810:	488c      	ldr	r0, [pc, #560]	@ (8001a44 <main+0x2dc>)
 8001812:	f003 f96d 	bl	8004af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2180      	movs	r1, #128	@ 0x80
 800181a:	488a      	ldr	r0, [pc, #552]	@ (8001a44 <main+0x2dc>)
 800181c:	f003 f968 	bl	8004af0 <HAL_GPIO_WritePin>

  servo_reset_all();
 8001820:	f002 f820 	bl	8003864 <servo_reset_all>
  HAL_Delay(1000);
 8001824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001828:	f002 feda 	bl	80045e0 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f002 fed7 	bl	80045e0 <HAL_Delay>
    read_current_velocity(encoders);
 8001832:	4885      	ldr	r0, [pc, #532]	@ (8001a48 <main+0x2e0>)
 8001834:	f7ff fe6a 	bl	800150c <read_current_velocity>
#if (TEST == 0)
    HAL_UART_Receive(&huart1, controller_buffer, sizeof(controller_buffer), 0xFFFF);
 8001838:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800183c:	2229      	movs	r2, #41	@ 0x29
 800183e:	4983      	ldr	r1, [pc, #524]	@ (8001a4c <main+0x2e4>)
 8001840:	4883      	ldr	r0, [pc, #524]	@ (8001a50 <main+0x2e8>)
 8001842:	f005 fd69 	bl	8007318 <HAL_UART_Receive>
    parse_controller_data(controller_buffer, &controller_state);
 8001846:	4983      	ldr	r1, [pc, #524]	@ (8001a54 <main+0x2ec>)
 8001848:	4880      	ldr	r0, [pc, #512]	@ (8001a4c <main+0x2e4>)
 800184a:	f7ff fc89 	bl	8001160 <parse_controller_data>
    if (controller_state.options_button && !prev_turn_on) {  // turn on/off the robot
 800184e:	4b81      	ldr	r3, [pc, #516]	@ (8001a54 <main+0x2ec>)
 8001850:	7e1b      	ldrb	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d020      	beq.n	8001898 <main+0x130>
 8001856:	4b80      	ldr	r3, [pc, #512]	@ (8001a58 <main+0x2f0>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f083 0301 	eor.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d019      	beq.n	8001898 <main+0x130>
      turn_on = !turn_on;
 8001864:	4b7d      	ldr	r3, [pc, #500]	@ (8001a5c <main+0x2f4>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf14      	ite	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2300      	moveq	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f083 0301 	eor.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b77      	ldr	r3, [pc, #476]	@ (8001a5c <main+0x2f4>)
 8001880:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001882:	4b76      	ldr	r3, [pc, #472]	@ (8001a5c <main+0x2f4>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f083 0301 	eor.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001892:	486c      	ldr	r0, [pc, #432]	@ (8001a44 <main+0x2dc>)
 8001894:	f003 f92c 	bl	8004af0 <HAL_GPIO_WritePin>
    }
    prev_turn_on = controller_state.options_button;
 8001898:	4b6e      	ldr	r3, [pc, #440]	@ (8001a54 <main+0x2ec>)
 800189a:	7e1a      	ldrb	r2, [r3, #24]
 800189c:	4b6e      	ldr	r3, [pc, #440]	@ (8001a58 <main+0x2f0>)
 800189e:	701a      	strb	r2, [r3, #0]

    if (turn_on) {
 80018a0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a5c <main+0x2f4>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0c1      	beq.n	800182c <main+0xc4>
      if (auto_path_selection == LEFT_PATH) {
 80018a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001a60 <main+0x2f8>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d111      	bne.n	80018d4 <main+0x16c>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b6:	4863      	ldr	r0, [pc, #396]	@ (8001a44 <main+0x2dc>)
 80018b8:	f003 f91a 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c2:	4860      	ldr	r0, [pc, #384]	@ (8001a44 <main+0x2dc>)
 80018c4:	f003 f914 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	485d      	ldr	r0, [pc, #372]	@ (8001a44 <main+0x2dc>)
 80018ce:	f003 f90f 	bl	8004af0 <HAL_GPIO_WritePin>
 80018d2:	e02a      	b.n	800192a <main+0x1c2>
      } else if (auto_path_selection == MID_PATH) {
 80018d4:	4b62      	ldr	r3, [pc, #392]	@ (8001a60 <main+0x2f8>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d111      	bne.n	8001900 <main+0x198>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018e2:	4858      	ldr	r0, [pc, #352]	@ (8001a44 <main+0x2dc>)
 80018e4:	f003 f904 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ee:	4855      	ldr	r0, [pc, #340]	@ (8001a44 <main+0x2dc>)
 80018f0:	f003 f8fe 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	2180      	movs	r1, #128	@ 0x80
 80018f8:	4852      	ldr	r0, [pc, #328]	@ (8001a44 <main+0x2dc>)
 80018fa:	f003 f8f9 	bl	8004af0 <HAL_GPIO_WritePin>
 80018fe:	e014      	b.n	800192a <main+0x1c2>
      } else if (auto_path_selection == RIGHT_PATH) {
 8001900:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <main+0x2f8>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d110      	bne.n	800192a <main+0x1c2>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800190e:	484d      	ldr	r0, [pc, #308]	@ (8001a44 <main+0x2dc>)
 8001910:	f003 f8ee 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800191a:	484a      	ldr	r0, [pc, #296]	@ (8001a44 <main+0x2dc>)
 800191c:	f003 f8e8 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2180      	movs	r1, #128	@ 0x80
 8001924:	4847      	ldr	r0, [pc, #284]	@ (8001a44 <main+0x2dc>)
 8001926:	f003 f8e3 	bl	8004af0 <HAL_GPIO_WritePin>
      }

      float rotation_vel = (controller_state.l2_pressure / 1024.0 + controller_state.r2_pressure / -1024.0) * 100.0;
 800192a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a54 <main+0x2ec>)
 800192c:	8a5b      	ldrh	r3, [r3, #18]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe20 	bl	8000574 <__aeabi_i2d>
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <main+0x2fc>)
 800193a:	f7fe ffaf 	bl	800089c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4614      	mov	r4, r2
 8001944:	461d      	mov	r5, r3
 8001946:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <main+0x2ec>)
 8001948:	8a9b      	ldrh	r3, [r3, #20]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe12 	bl	8000574 <__aeabi_i2d>
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b44      	ldr	r3, [pc, #272]	@ (8001a68 <main+0x300>)
 8001956:	f7fe ffa1 	bl	800089c <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fcbb 	bl	80002dc <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b3e      	ldr	r3, [pc, #248]	@ (8001a6c <main+0x304>)
 8001974:	f7fe fe68 	bl	8000648 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f95a 	bl	8000c38 <__aeabi_d2f>
 8001984:	4603      	mov	r3, r0
 8001986:	65fb      	str	r3, [r7, #92]	@ 0x5c

      if (controller_state.ps_button && !prev_auto_path_enable) {  // auto, line following
 8001988:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <main+0x2ec>)
 800198a:	7d9b      	ldrb	r3, [r3, #22]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01e      	beq.n	80019ce <main+0x266>
 8001990:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <main+0x308>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d017      	beq.n	80019ce <main+0x266>
        auto_path_enable = !auto_path_enable;
 800199e:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <main+0x30c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f083 0301 	eor.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <main+0x30c>)
 80019ba:	701a      	strb	r2, [r3, #0]
        if (auto_path_enable)
 80019bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <main+0x30c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <main+0x266>
          follow_auto_path(auto_path_selection);
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <main+0x2f8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fafd 	bl	8000fc8 <follow_auto_path>
      }
      prev_auto_path_enable = controller_state.ps_button;
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <main+0x2ec>)
 80019d0:	7d9a      	ldrb	r2, [r3, #22]
 80019d2:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <main+0x308>)
 80019d4:	701a      	strb	r2, [r3, #0]

      if (controller_state.square && !prev_auto_path_switch) {
 80019d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <main+0x2ec>)
 80019d8:	7a5b      	ldrb	r3, [r3, #9]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d057      	beq.n	8001a8e <main+0x326>
 80019de:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <main+0x310>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f083 0301 	eor.w	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d050      	beq.n	8001a8e <main+0x326>
        auto_path_switch = !auto_path_switch;
 80019ec:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <main+0x314>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <main+0x314>)
 8001a08:	701a      	strb	r2, [r3, #0]
        if (auto_path_selection == LEFT_PATH)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <main+0x2f8>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <main+0x2b2>
          auto_path_selection = MID_PATH;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <main+0x2f8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e039      	b.n	8001a8e <main+0x326>
        else if (auto_path_selection == MID_PATH)
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <main+0x2f8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d12e      	bne.n	8001a80 <main+0x318>
          auto_path_selection = RIGHT_PATH;
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <main+0x2f8>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e031      	b.n	8001a8e <main+0x326>
 8001a2a:	bf00      	nop
 8001a2c:	200001c0 	.word	0x200001c0
 8001a30:	2000020c 	.word	0x2000020c
 8001a34:	20000174 	.word	0x20000174
 8001a38:	20000258 	.word	0x20000258
 8001a3c:	200002a4 	.word	0x200002a4
 8001a40:	200002f0 	.word	0x200002f0
 8001a44:	48001000 	.word	0x48001000
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000124 	.word	0x20000124
 8001a50:	200003d0 	.word	0x200003d0
 8001a54:	20000150 	.word	0x20000150
 8001a58:	2000016e 	.word	0x2000016e
 8001a5c:	2000016d 	.word	0x2000016d
 8001a60:	20000120 	.word	0x20000120
 8001a64:	40900000 	.word	0x40900000
 8001a68:	c0900000 	.word	0xc0900000
 8001a6c:	40590000 	.word	0x40590000
 8001a70:	2000011d 	.word	0x2000011d
 8001a74:	2000011c 	.word	0x2000011c
 8001a78:	2000011f 	.word	0x2000011f
 8001a7c:	2000011e 	.word	0x2000011e
        else if (auto_path_selection == RIGHT_PATH)
 8001a80:	4b79      	ldr	r3, [pc, #484]	@ (8001c68 <main+0x500>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d102      	bne.n	8001a8e <main+0x326>
          auto_path_selection = LEFT_PATH;
 8001a88:	4b77      	ldr	r3, [pc, #476]	@ (8001c68 <main+0x500>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
      }  // auto, choose path, toggle left / right / straight forward
      prev_auto_path_switch = controller_state.square;
 8001a8e:	4b77      	ldr	r3, [pc, #476]	@ (8001c6c <main+0x504>)
 8001a90:	7a5a      	ldrb	r2, [r3, #9]
 8001a92:	4b77      	ldr	r3, [pc, #476]	@ (8001c70 <main+0x508>)
 8001a94:	701a      	strb	r2, [r3, #0]

      if (controller_state.r1) {
 8001a96:	4b75      	ldr	r3, [pc, #468]	@ (8001c6c <main+0x504>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d016      	beq.n	8001acc <main+0x364>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * -0.35};
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001aaa:	4b72      	ldr	r3, [pc, #456]	@ (8001c74 <main+0x50c>)
 8001aac:	65bb      	str	r3, [r7, #88]	@ 0x58
        movement_control(target_vel);
 8001aae:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001ab2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001ab6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001aba:	eeb0 0a66 	vmov.f32	s0, s13
 8001abe:	eef0 0a47 	vmov.f32	s1, s14
 8001ac2:	eeb0 1a67 	vmov.f32	s2, s15
 8001ac6:	f001 fc3f 	bl	8003348 <movement_control>
 8001aca:	e090      	b.n	8001bee <main+0x486>
      } else if (controller_state.l1) {
 8001acc:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <main+0x504>)
 8001ace:	78db      	ldrb	r3, [r3, #3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d016      	beq.n	8001b02 <main+0x39a>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * 0.35};
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ae0:	4b65      	ldr	r3, [pc, #404]	@ (8001c78 <main+0x510>)
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        movement_control(target_vel);
 8001ae4:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001ae8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001aec:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001af0:	eeb0 0a66 	vmov.f32	s0, s13
 8001af4:	eef0 0a47 	vmov.f32	s1, s14
 8001af8:	eeb0 1a67 	vmov.f32	s2, s15
 8001afc:	f001 fc24 	bl	8003348 <movement_control>
 8001b00:	e075      	b.n	8001bee <main+0x486>
      } else if (controller_state.up) {
 8001b02:	4b5a      	ldr	r3, [pc, #360]	@ (8001c6c <main+0x504>)
 8001b04:	7a9b      	ldrb	r3, [r3, #10]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d016      	beq.n	8001b38 <main+0x3d0>
        BaseVelocity target_vel = {0,
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b10:	4b5a      	ldr	r3, [pc, #360]	@ (8001c7c <main+0x514>)
 8001b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	643b      	str	r3, [r7, #64]	@ 0x40
                                   ROBOT_MAX_Y_VELOCITY * 0.5,
                                   0};
        movement_control(target_vel);
 8001b1a:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001b1e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b22:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b26:	eeb0 0a66 	vmov.f32	s0, s13
 8001b2a:	eef0 0a47 	vmov.f32	s1, s14
 8001b2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001b32:	f001 fc09 	bl	8003348 <movement_control>
 8001b36:	e05a      	b.n	8001bee <main+0x486>
      } else if (controller_state.down) {
 8001b38:	4b4c      	ldr	r3, [pc, #304]	@ (8001c6c <main+0x504>)
 8001b3a:	7adb      	ldrb	r3, [r3, #11]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d016      	beq.n	8001b6e <main+0x406>
        BaseVelocity target_vel = {0,
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b46:	4b4e      	ldr	r3, [pc, #312]	@ (8001c80 <main+0x518>)
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	@ 0x34
                                   ROBOT_MAX_Y_VELOCITY * -0.5,
                                   0};
        movement_control(target_vel);
 8001b50:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001b54:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b58:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b5c:	eeb0 0a66 	vmov.f32	s0, s13
 8001b60:	eef0 0a47 	vmov.f32	s1, s14
 8001b64:	eeb0 1a67 	vmov.f32	s2, s15
 8001b68:	f001 fbee 	bl	8003348 <movement_control>
 8001b6c:	e03f      	b.n	8001bee <main+0x486>
      } else if (controller_state.left) {
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c6c <main+0x504>)
 8001b70:	7b1b      	ldrb	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d016      	beq.n	8001ba4 <main+0x43c>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * 0.5,
 8001b76:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <main+0x514>)
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
                                   0,
                                   0};
        movement_control(target_vel);
 8001b86:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b8a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b8e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b92:	eeb0 0a66 	vmov.f32	s0, s13
 8001b96:	eef0 0a47 	vmov.f32	s1, s14
 8001b9a:	eeb0 1a67 	vmov.f32	s2, s15
 8001b9e:	f001 fbd3 	bl	8003348 <movement_control>
 8001ba2:	e024      	b.n	8001bee <main+0x486>
      } else if (controller_state.right) {
 8001ba4:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <main+0x504>)
 8001ba6:	7b5b      	ldrb	r3, [r3, #13]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d016      	beq.n	8001bda <main+0x472>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * -0.5,
 8001bac:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <main+0x518>)
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
                                   0,
                                   0};
        movement_control(target_vel);
 8001bbc:	edd7 6a05 	vldr	s13, [r7, #20]
 8001bc0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bc8:	eeb0 0a66 	vmov.f32	s0, s13
 8001bcc:	eef0 0a47 	vmov.f32	s1, s14
 8001bd0:	eeb0 1a67 	vmov.f32	s2, s15
 8001bd4:	f001 fbb8 	bl	8003348 <movement_control>
 8001bd8:	e009      	b.n	8001bee <main+0x486>
      } else {
        WheelPWM target_pwm = {0, 0, 0, 0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
        wheels_control(target_pwm);
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bea:	f000 fd1f 	bl	800262c <wheels_control>
      }

      if (controller_state.triangle) {
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <main+0x504>)
 8001bf0:	7a1b      	ldrb	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <main+0x494>
        catch_move_down();
 8001bf6:	f000 f899 	bl	8001d2c <catch_move_down>
 8001bfa:	e00c      	b.n	8001c16 <main+0x4ae>
      } else if (controller_state.cross)
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <main+0x504>)
 8001bfe:	799b      	ldrb	r3, [r3, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <main+0x4a2>
        catch_move_up();
 8001c04:	f000 f8ba 	bl	8001d7c <catch_move_up>
 8001c08:	e005      	b.n	8001c16 <main+0x4ae>
      else if (controller_state.share_button) {
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <main+0x504>)
 8001c0c:	7ddb      	ldrb	r3, [r3, #23]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <main+0x4ae>
        catch_reset();
 8001c12:	f000 f8db 	bl	8001dcc <catch_reset>
      }

      if (controller_state.circle && !prev_container_down) {
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <main+0x504>)
 8001c18:	79db      	ldrb	r3, [r3, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01e      	beq.n	8001c5c <main+0x4f4>
 8001c1e:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <main+0x51c>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	f083 0301 	eor.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d017      	beq.n	8001c5c <main+0x4f4>
        container_down = !container_down;
 8001c2c:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <main+0x520>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <main+0x520>)
 8001c48:	701a      	strb	r2, [r3, #0]
        if (container_down)
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <main+0x520>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <main+0x4f0>
          container_move_down();
 8001c52:	f000 f8c7 	bl	8001de4 <container_move_down>
 8001c56:	e001      	b.n	8001c5c <main+0x4f4>
        else
          container_reset();
 8001c58:	f000 f8f2 	bl	8001e40 <container_reset>
      }
      prev_container_down = controller_state.circle;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <main+0x504>)
 8001c5e:	79da      	ldrb	r2, [r3, #7]
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <main+0x51c>)
 8001c62:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1);
 8001c64:	e5e2      	b.n	800182c <main+0xc4>
 8001c66:	bf00      	nop
 8001c68:	20000120 	.word	0x20000120
 8001c6c:	20000150 	.word	0x20000150
 8001c70:	2000011f 	.word	0x2000011f
 8001c74:	bff5d14e 	.word	0xbff5d14e
 8001c78:	3ff5d14e 	.word	0x3ff5d14e
 8001c7c:	401942c4 	.word	0x401942c4
 8001c80:	c01942c4 	.word	0xc01942c4
 8001c84:	2000016c 	.word	0x2000016c
 8001c88:	2000016b 	.word	0x2000016b

08001c8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b094      	sub	sp, #80	@ 0x50
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	2238      	movs	r2, #56	@ 0x38
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 fc38 	bl	8008510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f002 ff36 	bl	8004b20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cbc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001cca:	2355      	movs	r3, #85	@ 0x55
 8001ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001cda:	f107 0318 	add.w	r3, r7, #24
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 ffd2 	bl	8004c88 <HAL_RCC_OscConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x62>
    Error_Handler();
 8001cea:	f000 f818 	bl	8001d1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cee:	230f      	movs	r3, #15
 8001cf0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2104      	movs	r1, #4
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fad0 	bl	80052ac <HAL_RCC_ClockConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0x8a>
    Error_Handler();
 8001d12:	f000 f804 	bl	8001d1e <Error_Handler>
  }
}
 8001d16:	bf00      	nop
 8001d18:	3750      	adds	r7, #80	@ 0x50
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d22:	b672      	cpsid	i
}
 8001d24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001d26:	bf00      	nop
 8001d28:	e7fd      	b.n	8001d26 <Error_Handler+0x8>
	...

08001d2c <catch_move_down>:

bool container_down = false;

bool prev_container_down = false;

void catch_move_down(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), SERVO_ID5_MAX_POS, SHORTEST_TIME_ROTATE(5, 90));
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <catch_move_down+0x44>)
 8001d32:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001d36:	3b5a      	subs	r3, #90	@ 0x5a
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bfb8      	it	lt
 8001d3c:	425b      	neglt	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc18 	bl	8000574 <__aeabi_i2d>
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <catch_move_down+0x48>)
 8001d4a:	f7fe fc7d 	bl	8000648 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7fe ff4f 	bl	8000bf8 <__aeabi_d2uiz>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f240 317a 	movw	r1, #890	@ 0x37a
 8001d64:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <catch_move_down+0x4c>)
 8001d66:	f001 fb9b 	bl	80034a0 <servo_move>
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000060 	.word	0x20000060
 8001d74:	40080000 	.word	0x40080000
 8001d78:	20000078 	.word	0x20000078

08001d7c <catch_move_up>:

void catch_move_up(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), SERVO_ID5_MIN_POS, SHORTEST_TIME_ROTATE(5, 100));
 8001d80:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <catch_move_up+0x44>)
 8001d82:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001d86:	3b64      	subs	r3, #100	@ 0x64
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bfb8      	it	lt
 8001d8c:	425b      	neglt	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbf0 	bl	8000574 <__aeabi_i2d>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <catch_move_up+0x48>)
 8001d9a:	f7fe fc55 	bl	8000648 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe ff27 	bl	8000bf8 <__aeabi_d2uiz>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	f240 119f 	movw	r1, #415	@ 0x19f
 8001db4:	4804      	ldr	r0, [pc, #16]	@ (8001dc8 <catch_move_up+0x4c>)
 8001db6:	f001 fb73 	bl	80034a0 <servo_move>
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000060 	.word	0x20000060
 8001dc4:	40080000 	.word	0x40080000
 8001dc8:	20000078 	.word	0x20000078

08001dcc <catch_reset>:

void catch_reset(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), INITIAL_POS, 180);
 8001dd0:	22b4      	movs	r2, #180	@ 0xb4
 8001dd2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001dd6:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <catch_reset+0x14>)
 8001dd8:	f001 fb62 	bl	80034a0 <servo_move>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000078 	.word	0x20000078

08001de4 <container_move_down>:

void container_move_down(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  if (servos[4].current_pos != SERVO_ID5_MIN_POS)
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <container_move_down+0x50>)
 8001dea:	8b5b      	ldrh	r3, [r3, #26]
 8001dec:	f240 129f 	movw	r2, #415	@ 0x19f
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d01c      	beq.n	8001e2e <container_move_down+0x4a>
    servo_move(&(servos[5]), SERVO_ID6_MIN_POS, SHORTEST_TIME_ROTATE(6, 30));
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <container_move_down+0x50>)
 8001df6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001dfa:	3b1e      	subs	r3, #30
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bfb8      	it	lt
 8001e00:	425b      	neglt	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fbb6 	bl	8000574 <__aeabi_i2d>
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <container_move_down+0x54>)
 8001e0e:	f7fe fc1b 	bl	8000648 <__aeabi_dmul>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe feed 	bl	8000bf8 <__aeabi_d2uiz>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <container_move_down+0x58>)
 8001e2a:	f001 fb39 	bl	80034a0 <servo_move>
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000060 	.word	0x20000060
 8001e38:	40080000 	.word	0x40080000
 8001e3c:	2000007e 	.word	0x2000007e

08001e40 <container_reset>:

void container_reset(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  if (servos[4].current_pos != SERVO_ID5_MIN_POS)
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <container_reset+0x50>)
 8001e46:	8b5b      	ldrh	r3, [r3, #26]
 8001e48:	f240 129f 	movw	r2, #415	@ 0x19f
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d01c      	beq.n	8001e8a <container_reset+0x4a>
    servo_move(&(servos[5]), INITIAL_POS, SHORTEST_TIME_ROTATE(6, 30));
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <container_reset+0x50>)
 8001e52:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001e56:	3b1e      	subs	r3, #30
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bfb8      	it	lt
 8001e5c:	425b      	neglt	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb88 	bl	8000574 <__aeabi_i2d>
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <container_reset+0x54>)
 8001e6a:	f7fe fbed 	bl	8000648 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe febf 	bl	8000bf8 <__aeabi_d2uiz>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e84:	4804      	ldr	r0, [pc, #16]	@ (8001e98 <container_reset+0x58>)
 8001e86:	f001 fb0b 	bl	80034a0 <servo_move>
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000060 	.word	0x20000060
 8001e94:	40080000 	.word	0x40080000
 8001e98:	2000007e 	.word	0x2000007e
 8001e9c:	00000000 	.word	0x00000000

08001ea0 <base2wheel>:
#include "movement.h"

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b094      	sub	sp, #80	@ 0x50
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	eef0 6a40 	vmov.f32	s13, s0
 8001eaa:	eeb0 7a60 	vmov.f32	s14, s1
 8001eae:	eef0 7a41 	vmov.f32	s15, s2
 8001eb2:	edc7 6a05 	vstr	s13, [r7, #20]
 8001eb6:	ed87 7a06 	vstr	s14, [r7, #24]
 8001eba:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = 0, front_right = 0, rear_left = 0, rear_right = 0;
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	643b      	str	r3, [r7, #64]	@ 0x40
  if (base_vel.z_vel == 0) {
 8001ed6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	f040 809d 	bne.w	8002020 <base2wheel+0x180>
    front_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001ee6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef2:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ef6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f02:	ee17 0a90 	vmov	r0, s15
 8001f06:	f7fe fb47 	bl	8000598 <__aeabi_f2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	ec43 2b10 	vmov	d0, r2, r3
 8001f12:	f007 fb4f 	bl	80095b4 <sqrt>
 8001f16:	ec51 0b10 	vmov	r0, r1, d0
 8001f1a:	a38b      	add	r3, pc, #556	@ (adr r3, 8002148 <base2wheel+0x2a8>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe fcbc 	bl	800089c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe84 	bl	8000c38 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001f34:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f40:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	ee17 0a90 	vmov	r0, s15
 8001f54:	f7fe fb20 	bl	8000598 <__aeabi_f2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	ec43 2b10 	vmov	d0, r2, r3
 8001f60:	f007 fb28 	bl	80095b4 <sqrt>
 8001f64:	ec51 0b10 	vmov	r0, r1, d0
 8001f68:	a377      	add	r3, pc, #476	@ (adr r3, 8002148 <base2wheel+0x2a8>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fc95 	bl	800089c <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fe5d 	bl	8000c38 <__aeabi_d2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f92:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9e:	ee17 0a90 	vmov	r0, s15
 8001fa2:	f7fe faf9 	bl	8000598 <__aeabi_f2d>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	ec43 2b10 	vmov	d0, r2, r3
 8001fae:	f007 fb01 	bl	80095b4 <sqrt>
 8001fb2:	ec51 0b10 	vmov	r0, r1, d0
 8001fb6:	a364      	add	r3, pc, #400	@ (adr r3, 8002148 <base2wheel+0x2a8>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fc6e 	bl	800089c <__aeabi_ddiv>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7fe fe36 	bl	8000c38 <__aeabi_d2f>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001fd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fdc:	edd7 6a06 	vldr	s13, [r7, #24]
 8001fe0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fec:	ee17 0a90 	vmov	r0, s15
 8001ff0:	f7fe fad2 	bl	8000598 <__aeabi_f2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	ec43 2b10 	vmov	d0, r2, r3
 8001ffc:	f007 fada 	bl	80095b4 <sqrt>
 8002000:	ec51 0b10 	vmov	r0, r1, d0
 8002004:	a350      	add	r3, pc, #320	@ (adr r3, 8002148 <base2wheel+0x2a8>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fc47 	bl	800089c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	f7fe fe0f 	bl	8000c38 <__aeabi_d2f>
 800201a:	4603      	mov	r3, r0
 800201c:	643b      	str	r3, [r7, #64]	@ 0x40
 800201e:	e04d      	b.n	80020bc <base2wheel+0x21c>
  } else {
    front_left = base_vel.z_vel / RADIUS_WHEEL;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fab8 	bl	8000598 <__aeabi_f2d>
 8002028:	a347      	add	r3, pc, #284	@ (adr r3, 8002148 <base2wheel+0x2a8>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fc35 	bl	800089c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fdfd 	bl	8000c38 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = -base_vel.z_vel / RADIUS_WHEEL;
 8002042:	edd7 7a07 	vldr	s15, [r7, #28]
 8002046:	eef1 7a67 	vneg.f32	s15, s15
 800204a:	ee17 3a90 	vmov	r3, s15
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe faa2 	bl	8000598 <__aeabi_f2d>
 8002054:	a33c      	add	r3, pc, #240	@ (adr r3, 8002148 <base2wheel+0x2a8>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe fc1f 	bl	800089c <__aeabi_ddiv>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fde7 	bl	8000c38 <__aeabi_d2f>
 800206a:	4603      	mov	r3, r0
 800206c:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = base_vel.z_vel / RADIUS_WHEEL;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa91 	bl	8000598 <__aeabi_f2d>
 8002076:	a334      	add	r3, pc, #208	@ (adr r3, 8002148 <base2wheel+0x2a8>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fc0e 	bl	800089c <__aeabi_ddiv>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fdd6 	bl	8000c38 <__aeabi_d2f>
 800208c:	4603      	mov	r3, r0
 800208e:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = -base_vel.z_vel / RADIUS_WHEEL;
 8002090:	edd7 7a07 	vldr	s15, [r7, #28]
 8002094:	eef1 7a67 	vneg.f32	s15, s15
 8002098:	ee17 3a90 	vmov	r3, s15
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa7b 	bl	8000598 <__aeabi_f2d>
 80020a2:	a329      	add	r3, pc, #164	@ (adr r3, 8002148 <base2wheel+0x2a8>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe fbf8 	bl	800089c <__aeabi_ddiv>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fdc0 	bl	8000c38 <__aeabi_d2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  if (base_vel.x_vel < 0 || base_vel.y_vel < 0) {
 80020bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80020c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	d406      	bmi.n	80020d8 <base2wheel+0x238>
 80020ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d517      	bpl.n	8002108 <base2wheel+0x268>
    front_left = -front_left;
 80020d8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80020dc:	eef1 7a67 	vneg.f32	s15, s15
 80020e0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    front_right = -front_right;
 80020e4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80020e8:	eef1 7a67 	vneg.f32	s15, s15
 80020ec:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    rear_left = -rear_left;
 80020f0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80020f4:	eef1 7a67 	vneg.f32	s15, s15
 80020f8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    rear_right = -rear_right;
 80020fc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002100:	eef1 7a67 	vneg.f32	s15, s15
 8002104:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  }
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8002108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800210a:	633b      	str	r3, [r7, #48]	@ 0x30
 800210c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800210e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800211a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800211c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800211e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002120:	ee06 0a10 	vmov	s12, r0
 8002124:	ee06 1a90 	vmov	s13, r1
 8002128:	ee07 2a10 	vmov	s14, r2
 800212c:	ee07 3a90 	vmov	s15, r3
}
 8002130:	eeb0 0a46 	vmov.f32	s0, s12
 8002134:	eef0 0a66 	vmov.f32	s1, s13
 8002138:	eeb0 1a47 	vmov.f32	s2, s14
 800213c:	eef0 1a67 	vmov.f32	s3, s15
 8002140:	3750      	adds	r7, #80	@ 0x50
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	020c49ba 	.word	0x020c49ba
 800214c:	3f96872b 	.word	0x3f96872b

08002150 <wheel2pwm>:
  // float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  // float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  // return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b08e      	sub	sp, #56	@ 0x38
 8002154:	af00      	add	r7, sp, #0
 8002156:	6178      	str	r0, [r7, #20]
 8002158:	eeb0 6a40 	vmov.f32	s12, s0
 800215c:	eef0 6a60 	vmov.f32	s13, s1
 8002160:	eeb0 7a41 	vmov.f32	s14, s2
 8002164:	eef0 7a61 	vmov.f32	s15, s3
 8002168:	ed87 6a01 	vstr	s12, [r7, #4]
 800216c:	edc7 6a02 	vstr	s13, [r7, #8]
 8002170:	ed87 7a03 	vstr	s14, [r7, #12]
 8002174:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fa0c 	bl	8000598 <__aeabi_f2d>
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	4b92      	ldr	r3, [pc, #584]	@ (80023d0 <wheel2pwm+0x280>)
 8002186:	f7fe fa5f 	bl	8000648 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	a38b      	add	r3, pc, #556	@ (adr r3, 80023c0 <wheel2pwm+0x270>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe fb80 	bl	800089c <__aeabi_ddiv>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	a388      	add	r3, pc, #544	@ (adr r3, 80023c8 <wheel2pwm+0x278>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fb77 	bl	800089c <__aeabi_ddiv>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b86      	ldr	r3, [pc, #536]	@ (80023d4 <wheel2pwm+0x284>)
 80021bc:	f7fe fa44 	bl	8000648 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	4b83      	ldr	r3, [pc, #524]	@ (80023d8 <wheel2pwm+0x288>)
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9c1 	bl	8000554 <__aeabi_ui2d>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4620      	mov	r0, r4
 80021d8:	4629      	mov	r1, r5
 80021da:	f7fe fa35 	bl	8000648 <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b7a      	ldr	r3, [pc, #488]	@ (80023d4 <wheel2pwm+0x284>)
 80021ec:	f7fe fb56 	bl	800089c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7fe fcd6 	bl	8000ba8 <__aeabi_d2iz>
 80021fc:	4603      	mov	r3, r0
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f9c8 	bl	8000598 <__aeabi_f2d>
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	4b70      	ldr	r3, [pc, #448]	@ (80023d0 <wheel2pwm+0x280>)
 800220e:	f7fe fa1b 	bl	8000648 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	a369      	add	r3, pc, #420	@ (adr r3, 80023c0 <wheel2pwm+0x270>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe fb3c 	bl	800089c <__aeabi_ddiv>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	a366      	add	r3, pc, #408	@ (adr r3, 80023c8 <wheel2pwm+0x278>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fb33 	bl	800089c <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b64      	ldr	r3, [pc, #400]	@ (80023d4 <wheel2pwm+0x284>)
 8002244:	f7fe fa00 	bl	8000648 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4614      	mov	r4, r2
 800224e:	461d      	mov	r5, r3
 8002250:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f97c 	bl	8000554 <__aeabi_ui2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f9f0 	bl	8000648 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b57      	ldr	r3, [pc, #348]	@ (80023d4 <wheel2pwm+0x284>)
 8002276:	f7fe fb11 	bl	800089c <__aeabi_ddiv>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f7fe fc91 	bl	8000ba8 <__aeabi_d2iz>
 8002286:	4603      	mov	r3, r0
 8002288:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f983 	bl	8000598 <__aeabi_f2d>
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	4b4e      	ldr	r3, [pc, #312]	@ (80023d0 <wheel2pwm+0x280>)
 8002298:	f7fe f9d6 	bl	8000648 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	a346      	add	r3, pc, #280	@ (adr r3, 80023c0 <wheel2pwm+0x270>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	f7fe faf7 	bl	800089c <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	a344      	add	r3, pc, #272	@ (adr r3, 80023c8 <wheel2pwm+0x278>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe faee 	bl	800089c <__aeabi_ddiv>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	4b41      	ldr	r3, [pc, #260]	@ (80023d4 <wheel2pwm+0x284>)
 80022ce:	f7fe f9bb 	bl	8000648 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4614      	mov	r4, r2
 80022d8:	461d      	mov	r5, r3
 80022da:	4b3f      	ldr	r3, [pc, #252]	@ (80023d8 <wheel2pwm+0x288>)
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f938 	bl	8000554 <__aeabi_ui2d>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4620      	mov	r0, r4
 80022ea:	4629      	mov	r1, r5
 80022ec:	f7fe f9ac 	bl	8000648 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	4b35      	ldr	r3, [pc, #212]	@ (80023d4 <wheel2pwm+0x284>)
 80022fe:	f7fe facd 	bl	800089c <__aeabi_ddiv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	f7fe fc4d 	bl	8000ba8 <__aeabi_d2iz>
 800230e:	4603      	mov	r3, r0
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f93f 	bl	8000598 <__aeabi_f2d>
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	4b2c      	ldr	r3, [pc, #176]	@ (80023d0 <wheel2pwm+0x280>)
 8002320:	f7fe f992 	bl	8000648 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	a324      	add	r3, pc, #144	@ (adr r3, 80023c0 <wheel2pwm+0x270>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe fab3 	bl	800089c <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	a322      	add	r3, pc, #136	@ (adr r3, 80023c8 <wheel2pwm+0x278>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe faaa 	bl	800089c <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <wheel2pwm+0x284>)
 8002356:	f7fe f977 	bl	8000648 <__aeabi_dmul>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4614      	mov	r4, r2
 8002360:	461d      	mov	r5, r3
 8002362:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f8f3 	bl	8000554 <__aeabi_ui2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7fe f967 	bl	8000648 <__aeabi_dmul>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <wheel2pwm+0x284>)
 8002388:	f7fe fa88 	bl	800089c <__aeabi_ddiv>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fc08 	bl	8000ba8 <__aeabi_d2iz>
 8002398:	4603      	mov	r3, r0
 800239a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023b2:	60da      	str	r2, [r3, #12]
}
 80023b4:	6978      	ldr	r0, [r7, #20]
 80023b6:	3738      	adds	r7, #56	@ 0x38
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bdb0      	pop	{r4, r5, r7, pc}
 80023bc:	f3af 8000 	nop.w
 80023c0:	54442d18 	.word	0x54442d18
 80023c4:	401921fb 	.word	0x401921fb
 80023c8:	980a206e 	.word	0x980a206e
 80023cc:	40a733a9 	.word	0x40a733a9
 80023d0:	404e0000 	.word	0x404e0000
 80023d4:	40590000 	.word	0x40590000
 80023d8:	40000400 	.word	0x40000400

080023dc <wheel_control>:

void wheel_control(Wheel wheel, int speed) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80023ee:	4293      	cmp	r3, r2
 80023f0:	dd03      	ble.n	80023fa <wheel_control+0x1e>
    speed = 16800;
 80023f2:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	e005      	b.n	8002406 <wheel_control+0x2a>
  else if (speed < -16800)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	4a85      	ldr	r2, [pc, #532]	@ (8002614 <wheel_control+0x238>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	da01      	bge.n	8002406 <wheel_control+0x2a>
    speed = -16800;
 8002402:	4b84      	ldr	r3, [pc, #528]	@ (8002614 <wheel_control+0x238>)
 8002404:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	2b03      	cmp	r3, #3
 800240a:	f200 80ce 	bhi.w	80025aa <wheel_control+0x1ce>
 800240e:	a201      	add	r2, pc, #4	@ (adr r2, 8002414 <wheel_control+0x38>)
 8002410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002414:	08002425 	.word	0x08002425
 8002418:	08002487 	.word	0x08002487
 800241c:	080024e5 	.word	0x080024e5
 8002420:	0800254d 	.word	0x0800254d
    case FRONT_LEFT:
      if (speed < 0) {
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	da0b      	bge.n	8002442 <wheel_control+0x66>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2101      	movs	r1, #1
 800242e:	487a      	ldr	r0, [pc, #488]	@ (8002618 <wheel_control+0x23c>)
 8002430:	f002 fb5e 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800243a:	4878      	ldr	r0, [pc, #480]	@ (800261c <wheel_control+0x240>)
 800243c:	f002 fb58 	bl	8004af0 <HAL_GPIO_WritePin>
 8002440:	e019      	b.n	8002476 <wheel_control+0x9a>
      } else if (speed > 0) {
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	dd0b      	ble.n	8002460 <wheel_control+0x84>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	2101      	movs	r1, #1
 800244c:	4872      	ldr	r0, [pc, #456]	@ (8002618 <wheel_control+0x23c>)
 800244e:	f002 fb4f 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002458:	4870      	ldr	r0, [pc, #448]	@ (800261c <wheel_control+0x240>)
 800245a:	f002 fb49 	bl	8004af0 <HAL_GPIO_WritePin>
 800245e:	e00a      	b.n	8002476 <wheel_control+0x9a>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	2101      	movs	r1, #1
 8002464:	486c      	ldr	r0, [pc, #432]	@ (8002618 <wheel_control+0x23c>)
 8002466:	f002 fb43 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002470:	486a      	ldr	r0, [pc, #424]	@ (800261c <wheel_control+0x240>)
 8002472:	f002 fb3d 	bl	8004af0 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800247c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002480:	4b67      	ldr	r3, [pc, #412]	@ (8002620 <wheel_control+0x244>)
 8002482:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8002484:	e0c2      	b.n	800260c <wheel_control+0x230>
    case FRONT_RIGHT:
      if (speed > 0) {
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	dd0a      	ble.n	80024a2 <wheel_control+0xc6>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	2110      	movs	r1, #16
 8002490:	4864      	ldr	r0, [pc, #400]	@ (8002624 <wheel_control+0x248>)
 8002492:	f002 fb2d 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_SET);
 8002496:	2201      	movs	r2, #1
 8002498:	2120      	movs	r1, #32
 800249a:	4862      	ldr	r0, [pc, #392]	@ (8002624 <wheel_control+0x248>)
 800249c:	f002 fb28 	bl	8004af0 <HAL_GPIO_WritePin>
 80024a0:	e017      	b.n	80024d2 <wheel_control+0xf6>
      } else if (speed < 0) {
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	da0a      	bge.n	80024be <wheel_control+0xe2>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	2110      	movs	r1, #16
 80024ac:	485d      	ldr	r0, [pc, #372]	@ (8002624 <wheel_control+0x248>)
 80024ae:	f002 fb1f 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2120      	movs	r1, #32
 80024b6:	485b      	ldr	r0, [pc, #364]	@ (8002624 <wheel_control+0x248>)
 80024b8:	f002 fb1a 	bl	8004af0 <HAL_GPIO_WritePin>
 80024bc:	e009      	b.n	80024d2 <wheel_control+0xf6>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 80024be:	2200      	movs	r2, #0
 80024c0:	2110      	movs	r1, #16
 80024c2:	4858      	ldr	r0, [pc, #352]	@ (8002624 <wheel_control+0x248>)
 80024c4:	f002 fb14 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2120      	movs	r1, #32
 80024cc:	4855      	ldr	r0, [pc, #340]	@ (8002624 <wheel_control+0x248>)
 80024ce:	f002 fb0f 	bl	8004af0 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80024d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024e0:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 80024e2:	e093      	b.n	800260c <wheel_control+0x230>
    case REAR_LEFT:
      if (speed < 0) {
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da0c      	bge.n	8002504 <wheel_control+0x128>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 80024ea:	2201      	movs	r2, #1
 80024ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f4:	f002 fafc 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2180      	movs	r1, #128	@ 0x80
 80024fc:	484a      	ldr	r0, [pc, #296]	@ (8002628 <wheel_control+0x24c>)
 80024fe:	f002 faf7 	bl	8004af0 <HAL_GPIO_WritePin>
 8002502:	e01b      	b.n	800253c <wheel_control+0x160>
      } else if (speed > 0) {
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	dd0c      	ble.n	8002524 <wheel_control+0x148>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002514:	f002 faec 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_SET);
 8002518:	2201      	movs	r2, #1
 800251a:	2180      	movs	r1, #128	@ 0x80
 800251c:	4842      	ldr	r0, [pc, #264]	@ (8002628 <wheel_control+0x24c>)
 800251e:	f002 fae7 	bl	8004af0 <HAL_GPIO_WritePin>
 8002522:	e00b      	b.n	800253c <wheel_control+0x160>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 8002524:	2200      	movs	r2, #0
 8002526:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800252a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800252e:	f002 fadf 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	2180      	movs	r1, #128	@ 0x80
 8002536:	483c      	ldr	r0, [pc, #240]	@ (8002628 <wheel_control+0x24c>)
 8002538:	f002 fada 	bl	8004af0 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002542:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002546:	4b36      	ldr	r3, [pc, #216]	@ (8002620 <wheel_control+0x244>)
 8002548:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 800254a:	e05f      	b.n	800260c <wheel_control+0x230>
    case REAR_RIGHT:
      if (speed > 0) {
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	dd0a      	ble.n	8002568 <wheel_control+0x18c>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 8002552:	2201      	movs	r2, #1
 8002554:	2101      	movs	r1, #1
 8002556:	4834      	ldr	r0, [pc, #208]	@ (8002628 <wheel_control+0x24c>)
 8002558:	f002 faca 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	@ 0x40
 8002560:	4830      	ldr	r0, [pc, #192]	@ (8002624 <wheel_control+0x248>)
 8002562:	f002 fac5 	bl	8004af0 <HAL_GPIO_WritePin>
 8002566:	e017      	b.n	8002598 <wheel_control+0x1bc>
      } else if (speed < 0) {
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	da0a      	bge.n	8002584 <wheel_control+0x1a8>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 800256e:	2200      	movs	r2, #0
 8002570:	2101      	movs	r1, #1
 8002572:	482d      	ldr	r0, [pc, #180]	@ (8002628 <wheel_control+0x24c>)
 8002574:	f002 fabc 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_SET);
 8002578:	2201      	movs	r2, #1
 800257a:	2140      	movs	r1, #64	@ 0x40
 800257c:	4829      	ldr	r0, [pc, #164]	@ (8002624 <wheel_control+0x248>)
 800257e:	f002 fab7 	bl	8004af0 <HAL_GPIO_WritePin>
 8002582:	e009      	b.n	8002598 <wheel_control+0x1bc>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	2101      	movs	r1, #1
 8002588:	4827      	ldr	r0, [pc, #156]	@ (8002628 <wheel_control+0x24c>)
 800258a:	f002 fab1 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	2140      	movs	r1, #64	@ 0x40
 8002592:	4824      	ldr	r0, [pc, #144]	@ (8002624 <wheel_control+0x248>)
 8002594:	f002 faac 	bl	8004af0 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800259e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80025a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80025a6:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 80025a8:	e030      	b.n	800260c <wheel_control+0x230>
    default:
      if (speed < 0) {
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da0b      	bge.n	80025c8 <wheel_control+0x1ec>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2101      	movs	r1, #1
 80025b4:	4818      	ldr	r0, [pc, #96]	@ (8002618 <wheel_control+0x23c>)
 80025b6:	f002 fa9b 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025c0:	4816      	ldr	r0, [pc, #88]	@ (800261c <wheel_control+0x240>)
 80025c2:	f002 fa95 	bl	8004af0 <HAL_GPIO_WritePin>
 80025c6:	e019      	b.n	80025fc <wheel_control+0x220>
      } else if (speed > 0) {
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	dd0b      	ble.n	80025e6 <wheel_control+0x20a>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2101      	movs	r1, #1
 80025d2:	4811      	ldr	r0, [pc, #68]	@ (8002618 <wheel_control+0x23c>)
 80025d4:	f002 fa8c 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025de:	480f      	ldr	r0, [pc, #60]	@ (800261c <wheel_control+0x240>)
 80025e0:	f002 fa86 	bl	8004af0 <HAL_GPIO_WritePin>
 80025e4:	e00a      	b.n	80025fc <wheel_control+0x220>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2101      	movs	r1, #1
 80025ea:	480b      	ldr	r0, [pc, #44]	@ (8002618 <wheel_control+0x23c>)
 80025ec:	f002 fa80 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025f6:	4809      	ldr	r0, [pc, #36]	@ (800261c <wheel_control+0x240>)
 80025f8:	f002 fa7a 	bl	8004af0 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002602:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <wheel_control+0x244>)
 8002608:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 800260a:	bf00      	nop
  }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	ffffbe60 	.word	0xffffbe60
 8002618:	48000c00 	.word	0x48000c00
 800261c:	48000800 	.word	0x48000800
 8002620:	40000400 	.word	0x40000400
 8002624:	48001000 	.word	0x48001000
 8002628:	48000400 	.word	0x48000400

0800262c <wheels_control>:

void wheels_control(WheelPWM pwm) {
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	463c      	mov	r4, r7
 8002634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	2000      	movs	r0, #0
 800263e:	f7ff fecd 	bl	80023dc <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4619      	mov	r1, r3
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff fec8 	bl	80023dc <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4619      	mov	r1, r3
 8002650:	2002      	movs	r0, #2
 8002652:	f7ff fec3 	bl	80023dc <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4619      	mov	r1, r3
 800265a:	2003      	movs	r0, #3
 800265c:	f7ff febe 	bl	80023dc <wheel_control>
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}

08002668 <rotate_motor>:

void rotate_motor(BaseVelocity base_vel) {
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	eef0 6a40 	vmov.f32	s13, s0
 8002672:	eeb0 7a60 	vmov.f32	s14, s1
 8002676:	eef0 7a41 	vmov.f32	s15, s2
 800267a:	edc7 6a01 	vstr	s13, [r7, #4]
 800267e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002682:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 8002686:	edd7 7a03 	vldr	s15, [r7, #12]
 800268a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002692:	d075      	beq.n	8002780 <rotate_motor+0x118>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(1, 45));
 8002694:	4bd6      	ldr	r3, [pc, #856]	@ (80029f0 <rotate_motor+0x388>)
 8002696:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800269a:	3b2d      	subs	r3, #45	@ 0x2d
 800269c:	2b00      	cmp	r3, #0
 800269e:	bfb8      	it	lt
 80026a0:	425b      	neglt	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff66 	bl	8000574 <__aeabi_i2d>
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	4bd1      	ldr	r3, [pc, #836]	@ (80029f4 <rotate_motor+0x38c>)
 80026ae:	f7fd ffcb 	bl	8000648 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7fe fa9d 	bl	8000bf8 <__aeabi_d2uiz>
 80026be:	4603      	mov	r3, r0
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	f240 21a9 	movw	r1, #681	@ 0x2a9
 80026c8:	48c9      	ldr	r0, [pc, #804]	@ (80029f0 <rotate_motor+0x388>)
 80026ca:	f000 fee9 	bl	80034a0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(2, -45));
 80026ce:	4bc8      	ldr	r3, [pc, #800]	@ (80029f0 <rotate_motor+0x388>)
 80026d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026d4:	332d      	adds	r3, #45	@ 0x2d
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bfb8      	it	lt
 80026da:	425b      	neglt	r3, r3
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd ff49 	bl	8000574 <__aeabi_i2d>
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	4bc3      	ldr	r3, [pc, #780]	@ (80029f4 <rotate_motor+0x38c>)
 80026e8:	f7fd ffae 	bl	8000648 <__aeabi_dmul>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa80 	bl	8000bf8 <__aeabi_d2uiz>
 80026f8:	4603      	mov	r3, r0
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	f240 1131 	movw	r1, #305	@ 0x131
 8002702:	48bd      	ldr	r0, [pc, #756]	@ (80029f8 <rotate_motor+0x390>)
 8002704:	f000 fecc 	bl	80034a0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(3, 45));
 8002708:	4bb9      	ldr	r3, [pc, #740]	@ (80029f0 <rotate_motor+0x388>)
 800270a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800270e:	3b2d      	subs	r3, #45	@ 0x2d
 8002710:	2b00      	cmp	r3, #0
 8002712:	bfb8      	it	lt
 8002714:	425b      	neglt	r3, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff2c 	bl	8000574 <__aeabi_i2d>
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4bb4      	ldr	r3, [pc, #720]	@ (80029f4 <rotate_motor+0x38c>)
 8002722:	f7fd ff91 	bl	8000648 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fe fa63 	bl	8000bf8 <__aeabi_d2uiz>
 8002732:	4603      	mov	r3, r0
 8002734:	b29b      	uxth	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	f240 21b1 	movw	r1, #689	@ 0x2b1
 800273c:	48af      	ldr	r0, [pc, #700]	@ (80029fc <rotate_motor+0x394>)
 800273e:	f000 feaf 	bl	80034a0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(4, -45));
 8002742:	4bab      	ldr	r3, [pc, #684]	@ (80029f0 <rotate_motor+0x388>)
 8002744:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002748:	332d      	adds	r3, #45	@ 0x2d
 800274a:	2b00      	cmp	r3, #0
 800274c:	bfb8      	it	lt
 800274e:	425b      	neglt	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd ff0f 	bl	8000574 <__aeabi_i2d>
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4ba6      	ldr	r3, [pc, #664]	@ (80029f4 <rotate_motor+0x38c>)
 800275c:	f7fd ff74 	bl	8000648 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa46 	bl	8000bf8 <__aeabi_d2uiz>
 800276c:	4603      	mov	r3, r0
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	f240 113b 	movw	r1, #315	@ 0x13b
 8002776:	48a2      	ldr	r0, [pc, #648]	@ (8002a00 <rotate_motor+0x398>)
 8002778:	f000 fe92 	bl	80034a0 <servo_move>
    return;
 800277c:	f000 bdc6 	b.w	800330c <rotate_motor+0xca4>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd ff08 	bl	8000598 <__aeabi_f2d>
 8002788:	4604      	mov	r4, r0
 800278a:	460d      	mov	r5, r1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd ff02 	bl	8000598 <__aeabi_f2d>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	ec43 2b11 	vmov	d1, r2, r3
 800279c:	ec45 4b10 	vmov	d0, r4, r5
 80027a0:	f006 fe40 	bl	8009424 <atan2>
 80027a4:	ec51 0b10 	vmov	r0, r1, d0
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	4b95      	ldr	r3, [pc, #596]	@ (8002a04 <rotate_motor+0x39c>)
 80027ae:	f7fd ff4b 	bl	8000648 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	a38b      	add	r3, pc, #556	@ (adr r3, 80029e8 <rotate_motor+0x380>)
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f7fe f86c 	bl	800089c <__aeabi_ddiv>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	f7fe fa34 	bl	8000c38 <__aeabi_d2f>
 80027d0:	4603      	mov	r3, r0
 80027d2:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 80027d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e0:	d17c      	bne.n	80028dc <rotate_motor+0x274>
 80027e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	d075      	beq.n	80028dc <rotate_motor+0x274>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(1, 90));
 80027f0:	4b7f      	ldr	r3, [pc, #508]	@ (80029f0 <rotate_motor+0x388>)
 80027f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027f6:	3b5a      	subs	r3, #90	@ 0x5a
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bfb8      	it	lt
 80027fc:	425b      	neglt	r3, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd feb8 	bl	8000574 <__aeabi_i2d>
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	4b7a      	ldr	r3, [pc, #488]	@ (80029f4 <rotate_motor+0x38c>)
 800280a:	f7fd ff1d 	bl	8000648 <__aeabi_dmul>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f9ef 	bl	8000bf8 <__aeabi_d2uiz>
 800281a:	4603      	mov	r3, r0
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002824:	4872      	ldr	r0, [pc, #456]	@ (80029f0 <rotate_motor+0x388>)
 8002826:	f000 fe3b 	bl	80034a0 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(2, 90));
 800282a:	4b71      	ldr	r3, [pc, #452]	@ (80029f0 <rotate_motor+0x388>)
 800282c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002830:	3b5a      	subs	r3, #90	@ 0x5a
 8002832:	2b00      	cmp	r3, #0
 8002834:	bfb8      	it	lt
 8002836:	425b      	neglt	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe9b 	bl	8000574 <__aeabi_i2d>
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	4b6c      	ldr	r3, [pc, #432]	@ (80029f4 <rotate_motor+0x38c>)
 8002844:	f7fd ff00 	bl	8000648 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f7fe f9d2 	bl	8000bf8 <__aeabi_d2uiz>
 8002854:	4603      	mov	r3, r0
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800285e:	4866      	ldr	r0, [pc, #408]	@ (80029f8 <rotate_motor+0x390>)
 8002860:	f000 fe1e 	bl	80034a0 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(3, 90));
 8002864:	4b62      	ldr	r3, [pc, #392]	@ (80029f0 <rotate_motor+0x388>)
 8002866:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800286a:	3b5a      	subs	r3, #90	@ 0x5a
 800286c:	2b00      	cmp	r3, #0
 800286e:	bfb8      	it	lt
 8002870:	425b      	neglt	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe7e 	bl	8000574 <__aeabi_i2d>
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <rotate_motor+0x38c>)
 800287e:	f7fd fee3 	bl	8000648 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f9b5 	bl	8000bf8 <__aeabi_d2uiz>
 800288e:	4603      	mov	r3, r0
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002898:	4859      	ldr	r0, [pc, #356]	@ (8002a00 <rotate_motor+0x398>)
 800289a:	f000 fe01 	bl	80034a0 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(4, 90));
 800289e:	4b54      	ldr	r3, [pc, #336]	@ (80029f0 <rotate_motor+0x388>)
 80028a0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80028a4:	3b5a      	subs	r3, #90	@ 0x5a
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bfb8      	it	lt
 80028aa:	425b      	neglt	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe61 	bl	8000574 <__aeabi_i2d>
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <rotate_motor+0x38c>)
 80028b8:	f7fd fec6 	bl	8000648 <__aeabi_dmul>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f998 	bl	8000bf8 <__aeabi_d2uiz>
 80028c8:	4603      	mov	r3, r0
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80028d2:	484a      	ldr	r0, [pc, #296]	@ (80029fc <rotate_motor+0x394>)
 80028d4:	f000 fde4 	bl	80034a0 <servo_move>
 80028d8:	f000 bd18 	b.w	800330c <rotate_motor+0xca4>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 80028dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e8:	f000 8092 	beq.w	8002a10 <rotate_motor+0x3a8>
 80028ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	f040 808a 	bne.w	8002a10 <rotate_motor+0x3a8>
    servo_move(&(servos[0]), SERVO_ID1_MIN_POS, SHORTEST_TIME_ROTATE(1, 90));
 80028fc:	4b3c      	ldr	r3, [pc, #240]	@ (80029f0 <rotate_motor+0x388>)
 80028fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002902:	3b5a      	subs	r3, #90	@ 0x5a
 8002904:	2b00      	cmp	r3, #0
 8002906:	bfb8      	it	lt
 8002908:	425b      	neglt	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe32 	bl	8000574 <__aeabi_i2d>
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <rotate_motor+0x38c>)
 8002916:	f7fd fe97 	bl	8000648 <__aeabi_dmul>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	f7fe f969 	bl	8000bf8 <__aeabi_d2uiz>
 8002926:	4603      	mov	r3, r0
 8002928:	b29b      	uxth	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	2164      	movs	r1, #100	@ 0x64
 800292e:	4830      	ldr	r0, [pc, #192]	@ (80029f0 <rotate_motor+0x388>)
 8002930:	f000 fdb6 	bl	80034a0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(2, 90));
 8002934:	4b2e      	ldr	r3, [pc, #184]	@ (80029f0 <rotate_motor+0x388>)
 8002936:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800293a:	3b5a      	subs	r3, #90	@ 0x5a
 800293c:	2b00      	cmp	r3, #0
 800293e:	bfb8      	it	lt
 8002940:	425b      	neglt	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fe16 	bl	8000574 <__aeabi_i2d>
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <rotate_motor+0x38c>)
 800294e:	f7fd fe7b 	bl	8000648 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f94d 	bl	8000bf8 <__aeabi_d2uiz>
 800295e:	4603      	mov	r3, r0
 8002960:	b29b      	uxth	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	f240 3166 	movw	r1, #870	@ 0x366
 8002968:	4823      	ldr	r0, [pc, #140]	@ (80029f8 <rotate_motor+0x390>)
 800296a:	f000 fd99 	bl	80034a0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MIN_POS, SHORTEST_TIME_ROTATE(3, 90));
 800296e:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <rotate_motor+0x388>)
 8002970:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002974:	3b5a      	subs	r3, #90	@ 0x5a
 8002976:	2b00      	cmp	r3, #0
 8002978:	bfb8      	it	lt
 800297a:	425b      	neglt	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdf9 	bl	8000574 <__aeabi_i2d>
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <rotate_motor+0x38c>)
 8002988:	f7fd fe5e 	bl	8000648 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	f7fe f930 	bl	8000bf8 <__aeabi_d2uiz>
 8002998:	4603      	mov	r3, r0
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	2182      	movs	r1, #130	@ 0x82
 80029a0:	4817      	ldr	r0, [pc, #92]	@ (8002a00 <rotate_motor+0x398>)
 80029a2:	f000 fd7d 	bl	80034a0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(4, 90));
 80029a6:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <rotate_motor+0x388>)
 80029a8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80029ac:	3b5a      	subs	r3, #90	@ 0x5a
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bfb8      	it	lt
 80029b2:	425b      	neglt	r3, r3
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fddd 	bl	8000574 <__aeabi_i2d>
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <rotate_motor+0x38c>)
 80029c0:	f7fd fe42 	bl	8000648 <__aeabi_dmul>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f914 	bl	8000bf8 <__aeabi_d2uiz>
 80029d0:	4603      	mov	r3, r0
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	f240 316e 	movw	r1, #878	@ 0x36e
 80029da:	4808      	ldr	r0, [pc, #32]	@ (80029fc <rotate_motor+0x394>)
 80029dc:	f000 fd60 	bl	80034a0 <servo_move>
 80029e0:	f000 bc94 	b.w	800330c <rotate_motor+0xca4>
 80029e4:	f3af 8000 	nop.w
 80029e8:	54442d18 	.word	0x54442d18
 80029ec:	400921fb 	.word	0x400921fb
 80029f0:	20000060 	.word	0x20000060
 80029f4:	40080000 	.word	0x40080000
 80029f8:	20000066 	.word	0x20000066
 80029fc:	20000072 	.word	0x20000072
 8002a00:	2000006c 	.word	0x2000006c
 8002a04:	40668000 	.word	0x40668000
 8002a08:	43340000 	.word	0x43340000
 8002a0c:	42b40000 	.word	0x42b40000
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {  // quadrant 2 or 4
 8002a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	d506      	bpl.n	8002a2c <rotate_motor+0x3c4>
 8002a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2a:	dc0f      	bgt.n	8002a4c <rotate_motor+0x3e4>
 8002a2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	f340 822d 	ble.w	8002e96 <rotate_motor+0x82e>
 8002a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	f140 8225 	bpl.w	8002e96 <rotate_motor+0x82e>
    if (angle < 0)
 8002a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a58:	d507      	bpl.n	8002a6a <rotate_motor+0x402>
      angle += 180;
 8002a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a5e:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 8002a08 <rotate_motor+0x3a0>
 8002a62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a66:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 8002a6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a6e:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8002a0c <rotate_motor+0x3a4>
 8002a72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a76:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 8002a7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a7e:	eef1 7a67 	vneg.f32	s15, s15
 8002a82:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 8002a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a92:	dd22      	ble.n	8002ada <rotate_motor+0x472>
 8002a94:	6978      	ldr	r0, [r7, #20]
 8002a96:	f7fd fd7f 	bl	8000598 <__aeabi_f2d>
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4bce      	ldr	r3, [pc, #824]	@ (8002dd8 <rotate_motor+0x770>)
 8002aa0:	f7fd fefc 	bl	800089c <__aeabi_ddiv>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	a3c0      	add	r3, pc, #768	@ (adr r3, 8002db0 <rotate_motor+0x748>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fdc9 	bl	8000648 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	4bc6      	ldr	r3, [pc, #792]	@ (8002ddc <rotate_motor+0x774>)
 8002ac4:	f7fd fc0a 	bl	80002dc <__adddf3>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fe f892 	bl	8000bf8 <__aeabi_d2uiz>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b29c      	uxth	r4, r3
 8002ad8:	e021      	b.n	8002b1e <rotate_motor+0x4b6>
 8002ada:	6978      	ldr	r0, [r7, #20]
 8002adc:	f7fd fd5c 	bl	8000598 <__aeabi_f2d>
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	4bbc      	ldr	r3, [pc, #752]	@ (8002dd8 <rotate_motor+0x770>)
 8002ae6:	f7fd fed9 	bl	800089c <__aeabi_ddiv>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4bba      	ldr	r3, [pc, #744]	@ (8002de0 <rotate_motor+0x778>)
 8002af8:	f7fd fda6 	bl	8000648 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	4bb4      	ldr	r3, [pc, #720]	@ (8002ddc <rotate_motor+0x774>)
 8002b0a:	f7fd fbe7 	bl	80002dc <__adddf3>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7fe f86f 	bl	8000bf8 <__aeabi_d2uiz>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	b29c      	uxth	r4, r3
 8002b1e:	4bb1      	ldr	r3, [pc, #708]	@ (8002de4 <rotate_motor+0x77c>)
 8002b20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b24:	335a      	adds	r3, #90	@ 0x5a
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b32:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8002de8 <rotate_motor+0x780>
 8002b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b42:	ee17 3a90 	vmov	r3, s15
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bfb8      	it	lt
 8002b4a:	425b      	neglt	r3, r3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fd11 	bl	8000574 <__aeabi_i2d>
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	4ba5      	ldr	r3, [pc, #660]	@ (8002dec <rotate_motor+0x784>)
 8002b58:	f7fd fd76 	bl	8000648 <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7fe f848 	bl	8000bf8 <__aeabi_d2uiz>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4621      	mov	r1, r4
 8002b70:	489c      	ldr	r0, [pc, #624]	@ (8002de4 <rotate_motor+0x77c>)
 8002b72:	f000 fc95 	bl	80034a0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8002b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b82:	dd22      	ble.n	8002bca <rotate_motor+0x562>
 8002b84:	6978      	ldr	r0, [r7, #20]
 8002b86:	f7fd fd07 	bl	8000598 <__aeabi_f2d>
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	4b92      	ldr	r3, [pc, #584]	@ (8002dd8 <rotate_motor+0x770>)
 8002b90:	f7fd fe84 	bl	800089c <__aeabi_ddiv>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	a386      	add	r3, pc, #536	@ (adr r3, 8002db8 <rotate_motor+0x750>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fd51 	bl	8000648 <__aeabi_dmul>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8002ddc <rotate_motor+0x774>)
 8002bb4:	f7fd fb92 	bl	80002dc <__adddf3>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fe f81a 	bl	8000bf8 <__aeabi_d2uiz>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b29c      	uxth	r4, r3
 8002bc8:	e021      	b.n	8002c0e <rotate_motor+0x5a6>
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f7fd fce4 	bl	8000598 <__aeabi_f2d>
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	4b80      	ldr	r3, [pc, #512]	@ (8002dd8 <rotate_motor+0x770>)
 8002bd6:	f7fd fe61 	bl	800089c <__aeabi_ddiv>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	a377      	add	r3, pc, #476	@ (adr r3, 8002dc0 <rotate_motor+0x758>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fd2e 	bl	8000648 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	4b78      	ldr	r3, [pc, #480]	@ (8002ddc <rotate_motor+0x774>)
 8002bfa:	f7fd fb6f 	bl	80002dc <__adddf3>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	f7fd fff7 	bl	8000bf8 <__aeabi_d2uiz>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	b29c      	uxth	r4, r3
 8002c0e:	4b75      	ldr	r3, [pc, #468]	@ (8002de4 <rotate_motor+0x77c>)
 8002c10:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c14:	335a      	adds	r3, #90	@ 0x5a
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c22:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002de8 <rotate_motor+0x780>
 8002c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c32:	ee17 3a90 	vmov	r3, s15
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bfb8      	it	lt
 8002c3a:	425b      	neglt	r3, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fc99 	bl	8000574 <__aeabi_i2d>
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	4b69      	ldr	r3, [pc, #420]	@ (8002dec <rotate_motor+0x784>)
 8002c48:	f7fd fcfe 	bl	8000648 <__aeabi_dmul>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7fd ffd0 	bl	8000bf8 <__aeabi_d2uiz>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4621      	mov	r1, r4
 8002c60:	4863      	ldr	r0, [pc, #396]	@ (8002df0 <rotate_motor+0x788>)
 8002c62:	f000 fc1d 	bl	80034a0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 8002c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	dd22      	ble.n	8002cba <rotate_motor+0x652>
 8002c74:	6978      	ldr	r0, [r7, #20]
 8002c76:	f7fd fc8f 	bl	8000598 <__aeabi_f2d>
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	4b56      	ldr	r3, [pc, #344]	@ (8002dd8 <rotate_motor+0x770>)
 8002c80:	f7fd fe0c 	bl	800089c <__aeabi_ddiv>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	a34e      	add	r3, pc, #312	@ (adr r3, 8002dc8 <rotate_motor+0x760>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd fcd9 	bl	8000648 <__aeabi_dmul>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	4b4e      	ldr	r3, [pc, #312]	@ (8002ddc <rotate_motor+0x774>)
 8002ca4:	f7fd fb1a 	bl	80002dc <__adddf3>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7fd ffa2 	bl	8000bf8 <__aeabi_d2uiz>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	b29c      	uxth	r4, r3
 8002cb8:	e021      	b.n	8002cfe <rotate_motor+0x696>
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7fd fc6c 	bl	8000598 <__aeabi_f2d>
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	4b44      	ldr	r3, [pc, #272]	@ (8002dd8 <rotate_motor+0x770>)
 8002cc6:	f7fd fde9 	bl	800089c <__aeabi_ddiv>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	a339      	add	r3, pc, #228	@ (adr r3, 8002db8 <rotate_motor+0x750>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fcb6 	bl	8000648 <__aeabi_dmul>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8002ddc <rotate_motor+0x774>)
 8002cea:	f7fd faf7 	bl	80002dc <__adddf3>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd ff7f 	bl	8000bf8 <__aeabi_d2uiz>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	b29c      	uxth	r4, r3
 8002cfe:	4b39      	ldr	r3, [pc, #228]	@ (8002de4 <rotate_motor+0x77c>)
 8002d00:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002d04:	335a      	adds	r3, #90	@ 0x5a
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d12:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002de8 <rotate_motor+0x780>
 8002d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d22:	ee17 3a90 	vmov	r3, s15
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bfb8      	it	lt
 8002d2a:	425b      	neglt	r3, r3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fc21 	bl	8000574 <__aeabi_i2d>
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <rotate_motor+0x784>)
 8002d38:	f7fd fc86 	bl	8000648 <__aeabi_dmul>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f7fd ff58 	bl	8000bf8 <__aeabi_d2uiz>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4621      	mov	r1, r4
 8002d50:	4828      	ldr	r0, [pc, #160]	@ (8002df4 <rotate_motor+0x78c>)
 8002d52:	f000 fba5 	bl	80034a0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002d56:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d62:	dd49      	ble.n	8002df8 <rotate_motor+0x790>
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f7fd fc17 	bl	8000598 <__aeabi_f2d>
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <rotate_motor+0x770>)
 8002d70:	f7fd fd94 	bl	800089c <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	a314      	add	r3, pc, #80	@ (adr r3, 8002dd0 <rotate_motor+0x768>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fc61 	bl	8000648 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <rotate_motor+0x774>)
 8002d94:	f7fd faa2 	bl	80002dc <__adddf3>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f7fd ff2a 	bl	8000bf8 <__aeabi_d2uiz>
 8002da4:	4603      	mov	r3, r0
 8002da6:	b29c      	uxth	r4, r3
 8002da8:	e048      	b.n	8002e3c <rotate_motor+0x7d4>
 8002daa:	bf00      	nop
 8002dac:	f3af 8000 	nop.w
 8002db0:	00000000 	.word	0x00000000
 8002db4:	4076a000 	.word	0x4076a000
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	40772000 	.word	0x40772000
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	40786000 	.word	0x40786000
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	4076c000 	.word	0x4076c000
 8002dd0:	00000000 	.word	0x00000000
 8002dd4:	4077a000 	.word	0x4077a000
 8002dd8:	40568000 	.word	0x40568000
 8002ddc:	407f4000 	.word	0x407f4000
 8002de0:	40790000 	.word	0x40790000
 8002de4:	20000060 	.word	0x20000060
 8002de8:	42b40000 	.word	0x42b40000
 8002dec:	40080000 	.word	0x40080000
 8002df0:	20000066 	.word	0x20000066
 8002df4:	2000006c 	.word	0x2000006c
 8002df8:	6978      	ldr	r0, [r7, #20]
 8002dfa:	f7fd fbcd 	bl	8000598 <__aeabi_f2d>
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	4bd5      	ldr	r3, [pc, #852]	@ (8003158 <rotate_motor+0xaf0>)
 8002e04:	f7fd fd4a 	bl	800089c <__aeabi_ddiv>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	4bd1      	ldr	r3, [pc, #836]	@ (800315c <rotate_motor+0xaf4>)
 8002e16:	f7fd fc17 	bl	8000648 <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	4bce      	ldr	r3, [pc, #824]	@ (8003160 <rotate_motor+0xaf8>)
 8002e28:	f7fd fa58 	bl	80002dc <__adddf3>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f7fd fee0 	bl	8000bf8 <__aeabi_d2uiz>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	b29c      	uxth	r4, r3
 8002e3c:	4bc9      	ldr	r3, [pc, #804]	@ (8003164 <rotate_motor+0xafc>)
 8002e3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002e42:	335a      	adds	r3, #90	@ 0x5a
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e50:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003168 <rotate_motor+0xb00>
 8002e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e60:	ee17 3a90 	vmov	r3, s15
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bfb8      	it	lt
 8002e68:	425b      	neglt	r3, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fb82 	bl	8000574 <__aeabi_i2d>
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	4bbd      	ldr	r3, [pc, #756]	@ (800316c <rotate_motor+0xb04>)
 8002e76:	f7fd fbe7 	bl	8000648 <__aeabi_dmul>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd feb9 	bl	8000bf8 <__aeabi_d2uiz>
 8002e86:	4603      	mov	r3, r0
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	48b8      	ldr	r0, [pc, #736]	@ (8003170 <rotate_motor+0xb08>)
 8002e90:	f000 fb06 	bl	80034a0 <servo_move>
 8002e94:	e23a      	b.n	800330c <rotate_motor+0xca4>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {  // quadrant 1 or 3
 8002e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea2:	d506      	bpl.n	8002eb2 <rotate_motor+0x84a>
 8002ea4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d40f      	bmi.n	8002ed2 <rotate_motor+0x86a>
 8002eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	f340 8225 	ble.w	800330c <rotate_motor+0xca4>
 8002ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ece:	f340 821d 	ble.w	800330c <rotate_motor+0xca4>
    if (angle < 0)
 8002ed2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ede:	d507      	bpl.n	8002ef0 <rotate_motor+0x888>
      angle += 180;
 8002ee0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ee4:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8003174 <rotate_motor+0xb0c>
 8002ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eec:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 8002ef0:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8003168 <rotate_motor+0xb00>
 8002ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efc:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 8002f00:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	dd22      	ble.n	8002f54 <rotate_motor+0x8ec>
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f7fd fb42 	bl	8000598 <__aeabi_f2d>
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	4b8f      	ldr	r3, [pc, #572]	@ (8003158 <rotate_motor+0xaf0>)
 8002f1a:	f7fd fcbf 	bl	800089c <__aeabi_ddiv>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	a384      	add	r3, pc, #528	@ (adr r3, 8003138 <rotate_motor+0xad0>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f7fd fb8c 	bl	8000648 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	4b88      	ldr	r3, [pc, #544]	@ (8003160 <rotate_motor+0xaf8>)
 8002f3e:	f7fd f9cd 	bl	80002dc <__adddf3>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7fd fe55 	bl	8000bf8 <__aeabi_d2uiz>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	b29c      	uxth	r4, r3
 8002f52:	e021      	b.n	8002f98 <rotate_motor+0x930>
 8002f54:	6978      	ldr	r0, [r7, #20]
 8002f56:	f7fd fb1f 	bl	8000598 <__aeabi_f2d>
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	4b7e      	ldr	r3, [pc, #504]	@ (8003158 <rotate_motor+0xaf0>)
 8002f60:	f7fd fc9c 	bl	800089c <__aeabi_ddiv>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	4b81      	ldr	r3, [pc, #516]	@ (8003178 <rotate_motor+0xb10>)
 8002f72:	f7fd fb69 	bl	8000648 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	4b77      	ldr	r3, [pc, #476]	@ (8003160 <rotate_motor+0xaf8>)
 8002f84:	f7fd f9aa 	bl	80002dc <__adddf3>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7fd fe32 	bl	8000bf8 <__aeabi_d2uiz>
 8002f94:	4603      	mov	r3, r0
 8002f96:	b29c      	uxth	r4, r3
 8002f98:	4b72      	ldr	r3, [pc, #456]	@ (8003164 <rotate_motor+0xafc>)
 8002f9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f9e:	335a      	adds	r3, #90	@ 0x5a
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003168 <rotate_motor+0xb00>
 8002fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fbc:	ee17 3a90 	vmov	r3, s15
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bfb8      	it	lt
 8002fc4:	425b      	neglt	r3, r3
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fad4 	bl	8000574 <__aeabi_i2d>
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	4b66      	ldr	r3, [pc, #408]	@ (800316c <rotate_motor+0xb04>)
 8002fd2:	f7fd fb39 	bl	8000648 <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7fd fe0b 	bl	8000bf8 <__aeabi_d2uiz>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4621      	mov	r1, r4
 8002fea:	485e      	ldr	r0, [pc, #376]	@ (8003164 <rotate_motor+0xafc>)
 8002fec:	f000 fa58 	bl	80034a0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8002ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	dd22      	ble.n	8003044 <rotate_motor+0x9dc>
 8002ffe:	6978      	ldr	r0, [r7, #20]
 8003000:	f7fd faca 	bl	8000598 <__aeabi_f2d>
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	4b53      	ldr	r3, [pc, #332]	@ (8003158 <rotate_motor+0xaf0>)
 800300a:	f7fd fc47 	bl	800089c <__aeabi_ddiv>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	a34a      	add	r3, pc, #296	@ (adr r3, 8003140 <rotate_motor+0xad8>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd fb14 	bl	8000648 <__aeabi_dmul>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	4b4c      	ldr	r3, [pc, #304]	@ (8003160 <rotate_motor+0xaf8>)
 800302e:	f7fd f955 	bl	80002dc <__adddf3>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f7fd fddd 	bl	8000bf8 <__aeabi_d2uiz>
 800303e:	4603      	mov	r3, r0
 8003040:	b29c      	uxth	r4, r3
 8003042:	e021      	b.n	8003088 <rotate_motor+0xa20>
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7fd faa7 	bl	8000598 <__aeabi_f2d>
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	4b42      	ldr	r3, [pc, #264]	@ (8003158 <rotate_motor+0xaf0>)
 8003050:	f7fd fc24 	bl	800089c <__aeabi_ddiv>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	a33a      	add	r3, pc, #232	@ (adr r3, 8003148 <rotate_motor+0xae0>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd faf1 	bl	8000648 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <rotate_motor+0xaf8>)
 8003074:	f7fd f932 	bl	80002dc <__adddf3>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f7fd fdba 	bl	8000bf8 <__aeabi_d2uiz>
 8003084:	4603      	mov	r3, r0
 8003086:	b29c      	uxth	r4, r3
 8003088:	4b36      	ldr	r3, [pc, #216]	@ (8003164 <rotate_motor+0xafc>)
 800308a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800308e:	335a      	adds	r3, #90	@ 0x5a
 8003090:	ee07 3a90 	vmov	s15, r3
 8003094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003098:	edd7 7a05 	vldr	s15, [r7, #20]
 800309c:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003168 <rotate_motor+0xb00>
 80030a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ac:	ee17 3a90 	vmov	r3, s15
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bfb8      	it	lt
 80030b4:	425b      	neglt	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fa5c 	bl	8000574 <__aeabi_i2d>
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	4b2a      	ldr	r3, [pc, #168]	@ (800316c <rotate_motor+0xb04>)
 80030c2:	f7fd fac1 	bl	8000648 <__aeabi_dmul>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f7fd fd93 	bl	8000bf8 <__aeabi_d2uiz>
 80030d2:	4603      	mov	r3, r0
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	4621      	mov	r1, r4
 80030da:	4828      	ldr	r0, [pc, #160]	@ (800317c <rotate_motor+0xb14>)
 80030dc:	f000 f9e0 	bl	80034a0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 80030e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	dd48      	ble.n	8003180 <rotate_motor+0xb18>
 80030ee:	6978      	ldr	r0, [r7, #20]
 80030f0:	f7fd fa52 	bl	8000598 <__aeabi_f2d>
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	4b17      	ldr	r3, [pc, #92]	@ (8003158 <rotate_motor+0xaf0>)
 80030fa:	f7fd fbcf 	bl	800089c <__aeabi_ddiv>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	a312      	add	r3, pc, #72	@ (adr r3, 8003150 <rotate_motor+0xae8>)
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f7fd fa9c 	bl	8000648 <__aeabi_dmul>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <rotate_motor+0xaf8>)
 800311e:	f7fd f8dd 	bl	80002dc <__adddf3>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd fd65 	bl	8000bf8 <__aeabi_d2uiz>
 800312e:	4603      	mov	r3, r0
 8003130:	b29c      	uxth	r4, r3
 8003132:	e047      	b.n	80031c4 <rotate_motor+0xb5c>
 8003134:	f3af 8000 	nop.w
 8003138:	00000000 	.word	0x00000000
 800313c:	4076a000 	.word	0x4076a000
 8003140:	00000000 	.word	0x00000000
 8003144:	40772000 	.word	0x40772000
 8003148:	00000000 	.word	0x00000000
 800314c:	40786000 	.word	0x40786000
 8003150:	00000000 	.word	0x00000000
 8003154:	4076c000 	.word	0x4076c000
 8003158:	40568000 	.word	0x40568000
 800315c:	40768000 	.word	0x40768000
 8003160:	407f4000 	.word	0x407f4000
 8003164:	20000060 	.word	0x20000060
 8003168:	42b40000 	.word	0x42b40000
 800316c:	40080000 	.word	0x40080000
 8003170:	20000072 	.word	0x20000072
 8003174:	43340000 	.word	0x43340000
 8003178:	40790000 	.word	0x40790000
 800317c:	20000066 	.word	0x20000066
 8003180:	6978      	ldr	r0, [r7, #20]
 8003182:	f7fd fa09 	bl	8000598 <__aeabi_f2d>
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	4b67      	ldr	r3, [pc, #412]	@ (8003328 <rotate_motor+0xcc0>)
 800318c:	f7fd fb86 	bl	800089c <__aeabi_ddiv>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	a35f      	add	r3, pc, #380	@ (adr r3, 8003318 <rotate_motor+0xcb0>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd fa53 	bl	8000648 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4b5f      	ldr	r3, [pc, #380]	@ (800332c <rotate_motor+0xcc4>)
 80031b0:	f7fd f894 	bl	80002dc <__adddf3>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7fd fd1c 	bl	8000bf8 <__aeabi_d2uiz>
 80031c0:	4603      	mov	r3, r0
 80031c2:	b29c      	uxth	r4, r3
 80031c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003330 <rotate_motor+0xcc8>)
 80031c6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80031ca:	335a      	adds	r3, #90	@ 0x5a
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80031d8:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8003334 <rotate_motor+0xccc>
 80031dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e8:	ee17 3a90 	vmov	r3, s15
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bfb8      	it	lt
 80031f0:	425b      	neglt	r3, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f9be 	bl	8000574 <__aeabi_i2d>
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003338 <rotate_motor+0xcd0>)
 80031fe:	f7fd fa23 	bl	8000648 <__aeabi_dmul>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	f7fd fcf5 	bl	8000bf8 <__aeabi_d2uiz>
 800320e:	4603      	mov	r3, r0
 8003210:	b29b      	uxth	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	4621      	mov	r1, r4
 8003216:	4849      	ldr	r0, [pc, #292]	@ (800333c <rotate_motor+0xcd4>)
 8003218:	f000 f942 	bl	80034a0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 800321c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003228:	dd22      	ble.n	8003270 <rotate_motor+0xc08>
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	f7fd f9b4 	bl	8000598 <__aeabi_f2d>
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	4b3c      	ldr	r3, [pc, #240]	@ (8003328 <rotate_motor+0xcc0>)
 8003236:	f7fd fb31 	bl	800089c <__aeabi_ddiv>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	a337      	add	r3, pc, #220	@ (adr r3, 8003320 <rotate_motor+0xcb8>)
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	f7fd f9fe 	bl	8000648 <__aeabi_dmul>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	4b34      	ldr	r3, [pc, #208]	@ (800332c <rotate_motor+0xcc4>)
 800325a:	f7fd f83f 	bl	80002dc <__adddf3>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	f7fd fcc7 	bl	8000bf8 <__aeabi_d2uiz>
 800326a:	4603      	mov	r3, r0
 800326c:	b29c      	uxth	r4, r3
 800326e:	e021      	b.n	80032b4 <rotate_motor+0xc4c>
 8003270:	6978      	ldr	r0, [r7, #20]
 8003272:	f7fd f991 	bl	8000598 <__aeabi_f2d>
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	4b2b      	ldr	r3, [pc, #172]	@ (8003328 <rotate_motor+0xcc0>)
 800327c:	f7fd fb0e 	bl	800089c <__aeabi_ddiv>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	4b2c      	ldr	r3, [pc, #176]	@ (8003340 <rotate_motor+0xcd8>)
 800328e:	f7fd f9db 	bl	8000648 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	4b23      	ldr	r3, [pc, #140]	@ (800332c <rotate_motor+0xcc4>)
 80032a0:	f7fd f81c 	bl	80002dc <__adddf3>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	f7fd fca4 	bl	8000bf8 <__aeabi_d2uiz>
 80032b0:	4603      	mov	r3, r0
 80032b2:	b29c      	uxth	r4, r3
 80032b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <rotate_motor+0xcc8>)
 80032b6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80032ba:	335a      	adds	r3, #90	@ 0x5a
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032c8:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003334 <rotate_motor+0xccc>
 80032cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032d8:	ee17 3a90 	vmov	r3, s15
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bfb8      	it	lt
 80032e0:	425b      	neglt	r3, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f946 	bl	8000574 <__aeabi_i2d>
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <rotate_motor+0xcd0>)
 80032ee:	f7fd f9ab 	bl	8000648 <__aeabi_dmul>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	f7fd fc7d 	bl	8000bf8 <__aeabi_d2uiz>
 80032fe:	4603      	mov	r3, r0
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	4621      	mov	r1, r4
 8003306:	480f      	ldr	r0, [pc, #60]	@ (8003344 <rotate_motor+0xcdc>)
 8003308:	f000 f8ca 	bl	80034a0 <servo_move>
  }
}
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bdb0      	pop	{r4, r5, r7, pc}
 8003312:	bf00      	nop
 8003314:	f3af 8000 	nop.w
 8003318:	00000000 	.word	0x00000000
 800331c:	40772000 	.word	0x40772000
 8003320:	00000000 	.word	0x00000000
 8003324:	4077a000 	.word	0x4077a000
 8003328:	40568000 	.word	0x40568000
 800332c:	407f4000 	.word	0x407f4000
 8003330:	20000060 	.word	0x20000060
 8003334:	42b40000 	.word	0x42b40000
 8003338:	40080000 	.word	0x40080000
 800333c:	2000006c 	.word	0x2000006c
 8003340:	40768000 	.word	0x40768000
 8003344:	20000072 	.word	0x20000072

08003348 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b08c      	sub	sp, #48	@ 0x30
 800334c:	af00      	add	r7, sp, #0
 800334e:	eef0 6a40 	vmov.f32	s13, s0
 8003352:	eeb0 7a60 	vmov.f32	s14, s1
 8003356:	eef0 7a41 	vmov.f32	s15, s2
 800335a:	edc7 6a01 	vstr	s13, [r7, #4]
 800335e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003362:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.x_vel != 0 && direction_encoder != LEFT_RIGHT || base_vel.y_vel != 0 && direction_encoder != FRONT_BACK) {
 8003366:	edd7 7a01 	vldr	s15, [r7, #4]
 800336a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	d003      	beq.n	800337c <movement_control+0x34>
 8003374:	4b49      	ldr	r3, [pc, #292]	@ (800349c <movement_control+0x154>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10a      	bne.n	8003392 <movement_control+0x4a>
 800337c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003380:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	d01f      	beq.n	80033ca <movement_control+0x82>
 800338a:	4b44      	ldr	r3, [pc, #272]	@ (800349c <movement_control+0x154>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01b      	beq.n	80033ca <movement_control+0x82>
    rotate_motor(base_vel);
 8003392:	edd7 6a01 	vldr	s13, [r7, #4]
 8003396:	ed97 7a02 	vldr	s14, [r7, #8]
 800339a:	edd7 7a03 	vldr	s15, [r7, #12]
 800339e:	eeb0 0a66 	vmov.f32	s0, s13
 80033a2:	eef0 0a47 	vmov.f32	s1, s14
 80033a6:	eeb0 1a67 	vmov.f32	s2, s15
 80033aa:	f7ff f95d 	bl	8002668 <rotate_motor>
    direction_encoder = base_vel.x_vel != 0 ? LEFT_RIGHT : FRONT_BACK;
 80033ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b35      	ldr	r3, [pc, #212]	@ (800349c <movement_control+0x154>)
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e01b      	b.n	8003402 <movement_control+0xba>
  } else if (base_vel.z_vel != 0 && direction_encoder != ROTATE) {
 80033ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80033ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d014      	beq.n	8003402 <movement_control+0xba>
 80033d8:	4b30      	ldr	r3, [pc, #192]	@ (800349c <movement_control+0x154>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d010      	beq.n	8003402 <movement_control+0xba>
    rotate_motor(base_vel);
 80033e0:	edd7 6a01 	vldr	s13, [r7, #4]
 80033e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80033e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033ec:	eeb0 0a66 	vmov.f32	s0, s13
 80033f0:	eef0 0a47 	vmov.f32	s1, s14
 80033f4:	eeb0 1a67 	vmov.f32	s2, s15
 80033f8:	f7ff f936 	bl	8002668 <rotate_motor>
    direction_encoder = ROTATE;
 80033fc:	4b27      	ldr	r3, [pc, #156]	@ (800349c <movement_control+0x154>)
 80033fe:	2202      	movs	r2, #2
 8003400:	701a      	strb	r2, [r3, #0]
  }

  WheelVelocity target_vel = base2wheel(base_vel);
 8003402:	edd7 6a01 	vldr	s13, [r7, #4]
 8003406:	ed97 7a02 	vldr	s14, [r7, #8]
 800340a:	edd7 7a03 	vldr	s15, [r7, #12]
 800340e:	eeb0 0a66 	vmov.f32	s0, s13
 8003412:	eef0 0a47 	vmov.f32	s1, s14
 8003416:	eeb0 1a67 	vmov.f32	s2, s15
 800341a:	f7fe fd41 	bl	8001ea0 <base2wheel>
 800341e:	eeb0 6a40 	vmov.f32	s12, s0
 8003422:	eef0 6a60 	vmov.f32	s13, s1
 8003426:	eeb0 7a41 	vmov.f32	s14, s2
 800342a:	eef0 7a61 	vmov.f32	s15, s3
 800342e:	ed87 6a08 	vstr	s12, [r7, #32]
 8003432:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8003436:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 800343a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
if (direction_encoder == LEFT_RIGHT) {
 800343e:	4b17      	ldr	r3, [pc, #92]	@ (800349c <movement_control+0x154>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10b      	bne.n	800345e <movement_control+0x116>
  target_vel.front_left *= -1;
 8003446:	edd7 7a08 	vldr	s15, [r7, #32]
 800344a:	eef1 7a67 	vneg.f32	s15, s15
 800344e:	edc7 7a08 	vstr	s15, [r7, #32]
  target_vel.rear_left *= -1;
 8003452:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003456:	eef1 7a67 	vneg.f32	s15, s15
 800345a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
}


  WheelPWM target_pwm = wheel2pwm(target_vel);
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	ed97 6a08 	vldr	s12, [r7, #32]
 8003466:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800346a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800346e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003472:	eeb0 0a46 	vmov.f32	s0, s12
 8003476:	eef0 0a66 	vmov.f32	s1, s13
 800347a:	eeb0 1a47 	vmov.f32	s2, s14
 800347e:	eef0 1a67 	vmov.f32	s3, s15
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fe64 	bl	8002150 <wheel2pwm>
  wheels_control(target_pwm);
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800348e:	f7ff f8cd 	bl	800262c <wheels_control>
}
 8003492:	bf00      	nop
 8003494:	3730      	adds	r7, #48	@ 0x30
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000016a 	.word	0x2000016a

080034a0 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
 80034ac:	4613      	mov	r3, r2
 80034ae:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 80034b0:	2355      	movs	r3, #85	@ 0x55
 80034b2:	737b      	strb	r3, [r7, #13]
 80034b4:	7b7b      	ldrb	r3, [r7, #13]
 80034b6:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 80034b8:	2308      	movs	r3, #8
 80034ba:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 80034bc:	2303      	movs	r3, #3
 80034be:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 80034c0:	2301      	movs	r3, #1
 80034c2:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 80034c4:	883b      	ldrh	r3, [r7, #0]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 80034ca:	883b      	ldrh	r3, [r7, #0]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 80034ea:	f107 010c 	add.w	r1, r7, #12
 80034ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034f2:	220a      	movs	r2, #10
 80034f4:	48ce      	ldr	r0, [pc, #824]	@ (8003830 <servo_move+0x390>)
 80034f6:	f003 fe81 	bl	80071fc <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	3b01      	subs	r3, #1
 8003506:	2b05      	cmp	r3, #5
 8003508:	f200 81a6 	bhi.w	8003858 <servo_move+0x3b8>
 800350c:	a201      	add	r2, pc, #4	@ (adr r2, 8003514 <servo_move+0x74>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	0800352d 	.word	0x0800352d
 8003518:	080035ad 	.word	0x080035ad
 800351c:	0800362d 	.word	0x0800362d
 8003520:	080036ad 	.word	0x080036ad
 8003524:	0800372d 	.word	0x0800372d
 8003528:	080037ad 	.word	0x080037ad
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003532:	d91c      	bls.n	800356e <servo_move+0xce>
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f81a 	bl	8000574 <__aeabi_i2d>
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	4bbb      	ldr	r3, [pc, #748]	@ (8003834 <servo_move+0x394>)
 8003546:	f7fd f87f 	bl	8000648 <__aeabi_dmul>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	a3a7      	add	r3, pc, #668	@ (adr r3, 80037f0 <servo_move+0x350>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fd f9a0 	bl	800089c <__aeabi_ddiv>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fd fb20 	bl	8000ba8 <__aeabi_d2iz>
 8003568:	4603      	mov	r3, r0
 800356a:	b21b      	sxth	r3, r3
 800356c:	e01b      	b.n	80035a6 <servo_move+0x106>
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc fffd 	bl	8000574 <__aeabi_i2d>
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	4bae      	ldr	r3, [pc, #696]	@ (8003838 <servo_move+0x398>)
 8003580:	f7fd f862 	bl	8000648 <__aeabi_dmul>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	4baa      	ldr	r3, [pc, #680]	@ (800383c <servo_move+0x39c>)
 8003592:	f7fd f983 	bl	800089c <__aeabi_ddiv>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	f7fd fb03 	bl	8000ba8 <__aeabi_d2iz>
 80035a2:	4603      	mov	r3, r0
 80035a4:	b21b      	sxth	r3, r3
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	8093      	strh	r3, [r2, #4]
      break;
 80035aa:	e156      	b.n	800385a <servo_move+0x3ba>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80035b2:	d91c      	bls.n	80035ee <servo_move+0x14e>
 80035b4:	887b      	ldrh	r3, [r7, #2]
 80035b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ffda 	bl	8000574 <__aeabi_i2d>
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	4b9b      	ldr	r3, [pc, #620]	@ (8003834 <servo_move+0x394>)
 80035c6:	f7fd f83f 	bl	8000648 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	a389      	add	r3, pc, #548	@ (adr r3, 80037f8 <servo_move+0x358>)
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f7fd f960 	bl	800089c <__aeabi_ddiv>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	f7fd fae0 	bl	8000ba8 <__aeabi_d2iz>
 80035e8:	4603      	mov	r3, r0
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	e01b      	b.n	8003626 <servo_move+0x186>
 80035ee:	887b      	ldrh	r3, [r7, #2]
 80035f0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffbd 	bl	8000574 <__aeabi_i2d>
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	4b8e      	ldr	r3, [pc, #568]	@ (8003838 <servo_move+0x398>)
 8003600:	f7fd f822 	bl	8000648 <__aeabi_dmul>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	a37c      	add	r3, pc, #496	@ (adr r3, 8003800 <servo_move+0x360>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f7fd f943 	bl	800089c <__aeabi_ddiv>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	f7fd fac3 	bl	8000ba8 <__aeabi_d2iz>
 8003622:	4603      	mov	r3, r0
 8003624:	b21b      	sxth	r3, r3
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	8093      	strh	r3, [r2, #4]
      break;
 800362a:	e116      	b.n	800385a <servo_move+0x3ba>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003632:	d91c      	bls.n	800366e <servo_move+0x1ce>
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc ff9a 	bl	8000574 <__aeabi_i2d>
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	4b7b      	ldr	r3, [pc, #492]	@ (8003834 <servo_move+0x394>)
 8003646:	f7fc ffff 	bl	8000648 <__aeabi_dmul>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	a36d      	add	r3, pc, #436	@ (adr r3, 8003808 <servo_move+0x368>)
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f7fd f920 	bl	800089c <__aeabi_ddiv>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	f7fd faa0 	bl	8000ba8 <__aeabi_d2iz>
 8003668:	4603      	mov	r3, r0
 800366a:	b21b      	sxth	r3, r3
 800366c:	e01b      	b.n	80036a6 <servo_move+0x206>
 800366e:	887b      	ldrh	r3, [r7, #2]
 8003670:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc ff7d 	bl	8000574 <__aeabi_i2d>
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	4b6e      	ldr	r3, [pc, #440]	@ (8003838 <servo_move+0x398>)
 8003680:	f7fc ffe2 	bl	8000648 <__aeabi_dmul>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	a360      	add	r3, pc, #384	@ (adr r3, 8003810 <servo_move+0x370>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f7fd f903 	bl	800089c <__aeabi_ddiv>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	f7fd fa83 	bl	8000ba8 <__aeabi_d2iz>
 80036a2:	4603      	mov	r3, r0
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	8093      	strh	r3, [r2, #4]
      break;
 80036aa:	e0d6      	b.n	800385a <servo_move+0x3ba>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036b2:	d91c      	bls.n	80036ee <servo_move+0x24e>
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc ff5a 	bl	8000574 <__aeabi_i2d>
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003834 <servo_move+0x394>)
 80036c6:	f7fc ffbf 	bl	8000648 <__aeabi_dmul>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	a351      	add	r3, pc, #324	@ (adr r3, 8003818 <servo_move+0x378>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fd f8e0 	bl	800089c <__aeabi_ddiv>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fd fa60 	bl	8000ba8 <__aeabi_d2iz>
 80036e8:	4603      	mov	r3, r0
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	e01b      	b.n	8003726 <servo_move+0x286>
 80036ee:	887b      	ldrh	r3, [r7, #2]
 80036f0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fc ff3d 	bl	8000574 <__aeabi_i2d>
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003838 <servo_move+0x398>)
 8003700:	f7fc ffa2 	bl	8000648 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	4b4b      	ldr	r3, [pc, #300]	@ (8003840 <servo_move+0x3a0>)
 8003712:	f7fd f8c3 	bl	800089c <__aeabi_ddiv>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	f7fd fa43 	bl	8000ba8 <__aeabi_d2iz>
 8003722:	4603      	mov	r3, r0
 8003724:	b21b      	sxth	r3, r3
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	8093      	strh	r3, [r2, #4]
      break;
 800372a:	e096      	b.n	800385a <servo_move+0x3ba>
    case 5:
      target_servo->current_degree = SERVO_ID5_POS_TO_ANGLE(target_pos);
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003732:	d91c      	bls.n	800376e <servo_move+0x2ce>
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc ff1a 	bl	8000574 <__aeabi_i2d>
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	4b3b      	ldr	r3, [pc, #236]	@ (8003834 <servo_move+0x394>)
 8003746:	f7fc ff7f 	bl	8000648 <__aeabi_dmul>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	a333      	add	r3, pc, #204	@ (adr r3, 8003820 <servo_move+0x380>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fd f8a0 	bl	800089c <__aeabi_ddiv>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	f7fd fa20 	bl	8000ba8 <__aeabi_d2iz>
 8003768:	4603      	mov	r3, r0
 800376a:	b21b      	sxth	r3, r3
 800376c:	e01b      	b.n	80037a6 <servo_move+0x306>
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003774:	4618      	mov	r0, r3
 8003776:	f7fc fefd 	bl	8000574 <__aeabi_i2d>
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	4b31      	ldr	r3, [pc, #196]	@ (8003844 <servo_move+0x3a4>)
 8003780:	f7fc ff62 	bl	8000648 <__aeabi_dmul>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	a326      	add	r3, pc, #152	@ (adr r3, 8003828 <servo_move+0x388>)
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f7fd f883 	bl	800089c <__aeabi_ddiv>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	f7fd fa03 	bl	8000ba8 <__aeabi_d2iz>
 80037a2:	4603      	mov	r3, r0
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	8093      	strh	r3, [r2, #4]
      break;
 80037aa:	e056      	b.n	800385a <servo_move+0x3ba>
    case 6:
      target_servo->current_degree = SERVO_ID6_POS_TO_ANGLE(target_pos);
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037b2:	d84d      	bhi.n	8003850 <servo_move+0x3b0>
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc feda 	bl	8000574 <__aeabi_i2d>
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <servo_move+0x3a8>)
 80037c6:	f7fc ff3f 	bl	8000648 <__aeabi_dmul>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <servo_move+0x3ac>)
 80037d8:	f7fd f860 	bl	800089c <__aeabi_ddiv>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	f7fd f9e0 	bl	8000ba8 <__aeabi_d2iz>
 80037e8:	4603      	mov	r3, r0
 80037ea:	b21a      	sxth	r2, r3
 80037ec:	e031      	b.n	8003852 <servo_move+0x3b2>
 80037ee:	bf00      	nop
 80037f0:	00000000 	.word	0x00000000
 80037f4:	4076a000 	.word	0x4076a000
 80037f8:	00000000 	.word	0x00000000
 80037fc:	40772000 	.word	0x40772000
 8003800:	00000000 	.word	0x00000000
 8003804:	c0786000 	.word	0xc0786000
 8003808:	00000000 	.word	0x00000000
 800380c:	4076c000 	.word	0x4076c000
 8003810:	00000000 	.word	0x00000000
 8003814:	c0772000 	.word	0xc0772000
 8003818:	00000000 	.word	0x00000000
 800381c:	4077a000 	.word	0x4077a000
 8003820:	00000000 	.word	0x00000000
 8003824:	40786000 	.word	0x40786000
 8003828:	00000000 	.word	0x00000000
 800382c:	c0554000 	.word	0xc0554000
 8003830:	2000033c 	.word	0x2000033c
 8003834:	40568000 	.word	0x40568000
 8003838:	c0568000 	.word	0xc0568000
 800383c:	c0790000 	.word	0xc0790000
 8003840:	c0768000 	.word	0xc0768000
 8003844:	c0240000 	.word	0xc0240000
 8003848:	c03e0000 	.word	0xc03e0000
 800384c:	c05e0000 	.word	0xc05e0000
 8003850:	2200      	movs	r2, #0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	809a      	strh	r2, [r3, #4]
      break;
 8003856:	e000      	b.n	800385a <servo_move+0x3ba>
    default:
      break;
 8003858:	bf00      	nop
  }
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop

08003864 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	e010      	b.n	8003892 <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4a0a      	ldr	r2, [pc, #40]	@ (80038a4 <servo_reset_all+0x40>)
 800387c:	4413      	add	r3, r2
 800387e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003882:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fe0a 	bl	80034a0 <servo_move>
  for (int i = 0; i < 6; i++)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3301      	adds	r3, #1
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b05      	cmp	r3, #5
 8003896:	ddeb      	ble.n	8003870 <servo_reset_all+0xc>
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000060 	.word	0x20000060

080038a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ae:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <HAL_MspInit+0x44>)
 80038b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b2:	4a0e      	ldr	r2, [pc, #56]	@ (80038ec <HAL_MspInit+0x44>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80038ba:	4b0c      	ldr	r3, [pc, #48]	@ (80038ec <HAL_MspInit+0x44>)
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <HAL_MspInit+0x44>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ca:	4a08      	ldr	r2, [pc, #32]	@ (80038ec <HAL_MspInit+0x44>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_MspInit+0x44>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80038de:	f001 f9c3 	bl	8004c68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000

080038f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <NMI_Handler+0x4>

080038f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <HardFault_Handler+0x4>

08003900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <MemManage_Handler+0x4>

08003908 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800390c:	bf00      	nop
 800390e:	e7fd      	b.n	800390c <BusFault_Handler+0x4>

08003910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <UsageFault_Handler+0x4>

08003918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003946:	f000 fe2d 	bl	80045a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}

0800394e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e00a      	b.n	8003976 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003960:	f3af 8000 	nop.w
 8003964:	4601      	mov	r1, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	60ba      	str	r2, [r7, #8]
 800396c:	b2ca      	uxtb	r2, r1
 800396e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	dbf0      	blt.n	8003960 <_read+0x12>
  }

  return len;
 800397e:	687b      	ldr	r3, [r7, #4]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e009      	b.n	80039ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	60ba      	str	r2, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3301      	adds	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	dbf1      	blt.n	800399a <_write+0x12>
  }
  return len;
 80039b6:	687b      	ldr	r3, [r7, #4]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_close>:

int _close(int file)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039e8:	605a      	str	r2, [r3, #4]
  return 0;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <_isatty>:

int _isatty(int file)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a00:	2301      	movs	r3, #1
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a30:	4a14      	ldr	r2, [pc, #80]	@ (8003a84 <_sbrk+0x5c>)
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <_sbrk+0x60>)
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a3c:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <_sbrk+0x64>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <_sbrk+0x64>)
 8003a46:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <_sbrk+0x68>)
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <_sbrk+0x64>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d207      	bcs.n	8003a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a58:	f004 fda8 	bl	80085ac <__errno>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	220c      	movs	r2, #12
 8003a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a66:	e009      	b.n	8003a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <_sbrk+0x64>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6e:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <_sbrk+0x64>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	4a05      	ldr	r2, [pc, #20]	@ (8003a8c <_sbrk+0x64>)
 8003a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20020000 	.word	0x20020000
 8003a88:	00000400 	.word	0x00000400
 8003a8c:	20000170 	.word	0x20000170
 8003a90:	200005b8 	.word	0x200005b8

08003a94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <SystemInit+0x20>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9e:	4a05      	ldr	r2, [pc, #20]	@ (8003ab4 <SystemInit+0x20>)
 8003aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08c      	sub	sp, #48	@ 0x30
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003abe:	f107 030c 	add.w	r3, r7, #12
 8003ac2:	2224      	movs	r2, #36	@ 0x24
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 fd22 	bl	8008510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003acc:	463b      	mov	r3, r7
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ad6:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003ad8:	4a23      	ldr	r2, [pc, #140]	@ (8003b68 <MX_TIM1_Init+0xb0>)
 8003ada:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003adc:	4b21      	ldr	r3, [pc, #132]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae2:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003af6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003afe:	2280      	movs	r2, #128	@ 0x80
 8003b00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b02:	2303      	movs	r3, #3
 8003b04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003b12:	230a      	movs	r3, #10
 8003b14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003b22:	230a      	movs	r3, #10
 8003b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	480d      	ldr	r0, [pc, #52]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003b2e:	f002 fa6b 	bl	8006008 <HAL_TIM_Encoder_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003b38:	f7fe f8f1 	bl	8001d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b40:	2300      	movs	r3, #0
 8003b42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b48:	463b      	mov	r3, r7
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4805      	ldr	r0, [pc, #20]	@ (8003b64 <MX_TIM1_Init+0xac>)
 8003b4e:	f003 fa6f 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003b58:	f7fe f8e1 	bl	8001d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003b5c:	bf00      	nop
 8003b5e:	3730      	adds	r7, #48	@ 0x30
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000174 	.word	0x20000174
 8003b68:	40012c00 	.word	0x40012c00

08003b6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08e      	sub	sp, #56	@ 0x38
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b80:	f107 031c 	add.w	r3, r7, #28
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	611a      	str	r2, [r3, #16]
 8003b9a:	615a      	str	r2, [r3, #20]
 8003b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b9e:	4b33      	ldr	r3, [pc, #204]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003ba0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ba4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ba6:	4b31      	ldr	r3, [pc, #196]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bac:	4b2f      	ldr	r3, [pc, #188]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003bb4:	f244 129f 	movw	r2, #16799	@ 0x419f
 8003bb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bba:	4b2c      	ldr	r3, [pc, #176]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003bc2:	2280      	movs	r2, #128	@ 0x80
 8003bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bc6:	4829      	ldr	r0, [pc, #164]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003bc8:	f001 ffda 	bl	8005b80 <HAL_TIM_Base_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003bd2:	f7fe f8a4 	bl	8001d1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003be0:	4619      	mov	r1, r3
 8003be2:	4822      	ldr	r0, [pc, #136]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003be4:	f002 fc78 	bl	80064d8 <HAL_TIM_ConfigClockSource>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003bee:	f7fe f896 	bl	8001d1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003bf2:	481e      	ldr	r0, [pc, #120]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003bf4:	f002 f894 	bl	8005d20 <HAL_TIM_PWM_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003bfe:	f7fe f88e 	bl	8001d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4816      	ldr	r0, [pc, #88]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003c12:	f003 fa0d 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003c1c:	f7fe f87f 	bl	8001d1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c20:	2360      	movs	r3, #96	@ 0x60
 8003c22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c30:	463b      	mov	r3, r7
 8003c32:	2200      	movs	r2, #0
 8003c34:	4619      	mov	r1, r3
 8003c36:	480d      	ldr	r0, [pc, #52]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003c38:	f002 fb3a 	bl	80062b0 <HAL_TIM_PWM_ConfigChannel>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003c42:	f7fe f86c 	bl	8001d1e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c46:	463b      	mov	r3, r7
 8003c48:	2204      	movs	r2, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4807      	ldr	r0, [pc, #28]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003c4e:	f002 fb2f 	bl	80062b0 <HAL_TIM_PWM_ConfigChannel>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003c58:	f7fe f861 	bl	8001d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003c5c:	4803      	ldr	r0, [pc, #12]	@ (8003c6c <MX_TIM2_Init+0x100>)
 8003c5e:	f000 fa99 	bl	8004194 <HAL_TIM_MspPostInit>

}
 8003c62:	bf00      	nop
 8003c64:	3738      	adds	r7, #56	@ 0x38
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200001c0 	.word	0x200001c0

08003c70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08e      	sub	sp, #56	@ 0x38
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c90:	463b      	mov	r3, r7
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	60da      	str	r2, [r3, #12]
 8003c9c:	611a      	str	r2, [r3, #16]
 8003c9e:	615a      	str	r2, [r3, #20]
 8003ca0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ca2:	4b32      	ldr	r3, [pc, #200]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003ca4:	4a32      	ldr	r2, [pc, #200]	@ (8003d70 <MX_TIM3_Init+0x100>)
 8003ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8003ca8:	4b30      	ldr	r3, [pc, #192]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cae:	4b2f      	ldr	r3, [pc, #188]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003cb6:	f244 129f 	movw	r2, #16799	@ 0x419f
 8003cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003cc4:	2280      	movs	r2, #128	@ 0x80
 8003cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cc8:	4828      	ldr	r0, [pc, #160]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003cca:	f001 ff59 	bl	8005b80 <HAL_TIM_Base_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003cd4:	f7fe f823 	bl	8001d1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4821      	ldr	r0, [pc, #132]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003ce6:	f002 fbf7 	bl	80064d8 <HAL_TIM_ConfigClockSource>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003cf0:	f7fe f815 	bl	8001d1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003cf4:	481d      	ldr	r0, [pc, #116]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003cf6:	f002 f813 	bl	8005d20 <HAL_TIM_PWM_Init>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003d00:	f7fe f80d 	bl	8001d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d0c:	f107 031c 	add.w	r3, r7, #28
 8003d10:	4619      	mov	r1, r3
 8003d12:	4816      	ldr	r0, [pc, #88]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003d14:	f003 f98c 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003d1e:	f7fd fffe 	bl	8001d1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d22:	2360      	movs	r3, #96	@ 0x60
 8003d24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d32:	463b      	mov	r3, r7
 8003d34:	2200      	movs	r2, #0
 8003d36:	4619      	mov	r1, r3
 8003d38:	480c      	ldr	r0, [pc, #48]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003d3a:	f002 fab9 	bl	80062b0 <HAL_TIM_PWM_ConfigChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003d44:	f7fd ffeb 	bl	8001d1e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d48:	463b      	mov	r3, r7
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4807      	ldr	r0, [pc, #28]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003d50:	f002 faae 	bl	80062b0 <HAL_TIM_PWM_ConfigChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003d5a:	f7fd ffe0 	bl	8001d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003d5e:	4803      	ldr	r0, [pc, #12]	@ (8003d6c <MX_TIM3_Init+0xfc>)
 8003d60:	f000 fa18 	bl	8004194 <HAL_TIM_MspPostInit>

}
 8003d64:	bf00      	nop
 8003d66:	3738      	adds	r7, #56	@ 0x38
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	2000020c 	.word	0x2000020c
 8003d70:	40000400 	.word	0x40000400

08003d74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	@ 0x30
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d7a:	f107 030c 	add.w	r3, r7, #12
 8003d7e:	2224      	movs	r2, #36	@ 0x24
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f004 fbc4 	bl	8008510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d88:	463b      	mov	r3, r7
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d92:	4b21      	ldr	r3, [pc, #132]	@ (8003e18 <MX_TIM4_Init+0xa4>)
 8003d94:	4a21      	ldr	r2, [pc, #132]	@ (8003e1c <MX_TIM4_Init+0xa8>)
 8003d96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d98:	4b1f      	ldr	r3, [pc, #124]	@ (8003e18 <MX_TIM4_Init+0xa4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e18 <MX_TIM4_Init+0xa4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003da4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <MX_TIM4_Init+0xa4>)
 8003da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003daa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dac:	4b1a      	ldr	r3, [pc, #104]	@ (8003e18 <MX_TIM4_Init+0xa4>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003db2:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <MX_TIM4_Init+0xa4>)
 8003db4:	2280      	movs	r2, #128	@ 0x80
 8003db6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003db8:	2303      	movs	r3, #3
 8003dba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003dc8:	230a      	movs	r3, #10
 8003dca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003dd8:	230a      	movs	r3, #10
 8003dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	4619      	mov	r1, r3
 8003de2:	480d      	ldr	r0, [pc, #52]	@ (8003e18 <MX_TIM4_Init+0xa4>)
 8003de4:	f002 f910 	bl	8006008 <HAL_TIM_Encoder_Init>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003dee:	f7fd ff96 	bl	8001d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4806      	ldr	r0, [pc, #24]	@ (8003e18 <MX_TIM4_Init+0xa4>)
 8003e00:	f003 f916 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003e0a:	f7fd ff88 	bl	8001d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e0e:	bf00      	nop
 8003e10:	3730      	adds	r7, #48	@ 0x30
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000258 	.word	0x20000258
 8003e1c:	40000800 	.word	0x40000800

08003e20 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	@ 0x30
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	2224      	movs	r2, #36	@ 0x24
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 fb6e 	bl	8008510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e34:	463b      	mov	r3, r7
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e3e:	4b21      	ldr	r3, [pc, #132]	@ (8003ec4 <MX_TIM5_Init+0xa4>)
 8003e40:	4a21      	ldr	r2, [pc, #132]	@ (8003ec8 <MX_TIM5_Init+0xa8>)
 8003e42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003e44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec4 <MX_TIM5_Init+0xa4>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec4 <MX_TIM5_Init+0xa4>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003e50:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec4 <MX_TIM5_Init+0xa4>)
 8003e52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <MX_TIM5_Init+0xa4>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ec4 <MX_TIM5_Init+0xa4>)
 8003e60:	2280      	movs	r2, #128	@ 0x80
 8003e62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e64:	2303      	movs	r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003e74:	230a      	movs	r3, #10
 8003e76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003e84:	230a      	movs	r3, #10
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	480d      	ldr	r0, [pc, #52]	@ (8003ec4 <MX_TIM5_Init+0xa4>)
 8003e90:	f002 f8ba 	bl	8006008 <HAL_TIM_Encoder_Init>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003e9a:	f7fd ff40 	bl	8001d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4806      	ldr	r0, [pc, #24]	@ (8003ec4 <MX_TIM5_Init+0xa4>)
 8003eac:	f003 f8c0 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003eb6:	f7fd ff32 	bl	8001d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003eba:	bf00      	nop
 8003ebc:	3730      	adds	r7, #48	@ 0x30
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200002a4 	.word	0x200002a4
 8003ec8:	40000c00 	.word	0x40000c00

08003ecc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	@ 0x30
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	2224      	movs	r2, #36	@ 0x24
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f004 fb18 	bl	8008510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003eea:	4b23      	ldr	r3, [pc, #140]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003eec:	4a23      	ldr	r2, [pc, #140]	@ (8003f7c <MX_TIM8_Init+0xb0>)
 8003eee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003ef0:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef6:	4b20      	ldr	r3, [pc, #128]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003efc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f04:	4b1c      	ldr	r3, [pc, #112]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003f12:	2280      	movs	r2, #128	@ 0x80
 8003f14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f16:	2303      	movs	r3, #3
 8003f18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003f26:	230a      	movs	r3, #10
 8003f28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f32:	2300      	movs	r3, #0
 8003f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003f36:	230a      	movs	r3, #10
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003f3a:	f107 030c 	add.w	r3, r7, #12
 8003f3e:	4619      	mov	r1, r3
 8003f40:	480d      	ldr	r0, [pc, #52]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003f42:	f002 f861 	bl	8006008 <HAL_TIM_Encoder_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003f4c:	f7fd fee7 	bl	8001d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4805      	ldr	r0, [pc, #20]	@ (8003f78 <MX_TIM8_Init+0xac>)
 8003f62:	f003 f865 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003f6c:	f7fd fed7 	bl	8001d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003f70:	bf00      	nop
 8003f72:	3730      	adds	r7, #48	@ 0x30
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200002f0 	.word	0x200002f0
 8003f7c:	40013400 	.word	0x40013400

08003f80 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b090      	sub	sp, #64	@ 0x40
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004114 <HAL_TIM_Encoder_MspInit+0x194>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d128      	bne.n	8003ff4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa6:	4a5c      	ldr	r2, [pc, #368]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8003fa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fac:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fae:	4b5a      	ldr	r3, [pc, #360]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fba:	4b57      	ldr	r3, [pc, #348]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	4a56      	ldr	r2, [pc, #344]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fc6:	4b54      	ldr	r3, [pc, #336]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fea:	4619      	mov	r1, r3
 8003fec:	484b      	ldr	r0, [pc, #300]	@ (800411c <HAL_TIM_Encoder_MspInit+0x19c>)
 8003fee:	f000 fbfd 	bl	80047ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003ff2:	e08a      	b.n	800410a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	@ (8004120 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d129      	bne.n	8004052 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ffe:	4b46      	ldr	r3, [pc, #280]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	4a45      	ldr	r2, [pc, #276]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8004004:	f043 0304 	orr.w	r3, r3, #4
 8004008:	6593      	str	r3, [r2, #88]	@ 0x58
 800400a:	4b43      	ldr	r3, [pc, #268]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004016:	4b40      	ldr	r3, [pc, #256]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8004018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401a:	4a3f      	ldr	r2, [pc, #252]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 800401c:	f043 0308 	orr.w	r3, r3, #8
 8004020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004022:	4b3d      	ldr	r3, [pc, #244]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800402e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403c:	2300      	movs	r3, #0
 800403e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004040:	2302      	movs	r3, #2
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004048:	4619      	mov	r1, r3
 800404a:	4836      	ldr	r0, [pc, #216]	@ (8004124 <HAL_TIM_Encoder_MspInit+0x1a4>)
 800404c:	f000 fbce 	bl	80047ec <HAL_GPIO_Init>
}
 8004050:	e05b      	b.n	800410a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a34      	ldr	r2, [pc, #208]	@ (8004128 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d129      	bne.n	80040b0 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800405c:	4b2e      	ldr	r3, [pc, #184]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	4a2d      	ldr	r2, [pc, #180]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8004062:	f043 0308 	orr.w	r3, r3, #8
 8004066:	6593      	str	r3, [r2, #88]	@ 0x58
 8004068:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004074:	4b28      	ldr	r3, [pc, #160]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8004076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004078:	4a27      	ldr	r2, [pc, #156]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004080:	4b25      	ldr	r3, [pc, #148]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 8004082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800408c:	2303      	movs	r3, #3
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004098:	2300      	movs	r3, #0
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800409c:	2302      	movs	r3, #2
 800409e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040a4:	4619      	mov	r1, r3
 80040a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040aa:	f000 fb9f 	bl	80047ec <HAL_GPIO_Init>
}
 80040ae:	e02c      	b.n	800410a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <HAL_TIM_Encoder_MspInit+0x1ac>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d127      	bne.n	800410a <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040ba:	4b17      	ldr	r3, [pc, #92]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 80040bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040be:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 80040c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80040c6:	4b14      	ldr	r3, [pc, #80]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 80040c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d2:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d6:	4a10      	ldr	r2, [pc, #64]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <HAL_TIM_Encoder_MspInit+0x198>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040ea:	23c0      	movs	r3, #192	@ 0xc0
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80040fa:	2304      	movs	r3, #4
 80040fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004102:	4619      	mov	r1, r3
 8004104:	4805      	ldr	r0, [pc, #20]	@ (800411c <HAL_TIM_Encoder_MspInit+0x19c>)
 8004106:	f000 fb71 	bl	80047ec <HAL_GPIO_Init>
}
 800410a:	bf00      	nop
 800410c:	3740      	adds	r7, #64	@ 0x40
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40021000 	.word	0x40021000
 800411c:	48000800 	.word	0x48000800
 8004120:	40000800 	.word	0x40000800
 8004124:	48000c00 	.word	0x48000c00
 8004128:	40000c00 	.word	0x40000c00
 800412c:	40013400 	.word	0x40013400

08004130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004140:	d10c      	bne.n	800415c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004142:	4b12      	ldr	r3, [pc, #72]	@ (800418c <HAL_TIM_Base_MspInit+0x5c>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004146:	4a11      	ldr	r2, [pc, #68]	@ (800418c <HAL_TIM_Base_MspInit+0x5c>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	6593      	str	r3, [r2, #88]	@ 0x58
 800414e:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <HAL_TIM_Base_MspInit+0x5c>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800415a:	e010      	b.n	800417e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0b      	ldr	r2, [pc, #44]	@ (8004190 <HAL_TIM_Base_MspInit+0x60>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10b      	bne.n	800417e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004166:	4b09      	ldr	r3, [pc, #36]	@ (800418c <HAL_TIM_Base_MspInit+0x5c>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416a:	4a08      	ldr	r2, [pc, #32]	@ (800418c <HAL_TIM_Base_MspInit+0x5c>)
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	6593      	str	r3, [r2, #88]	@ 0x58
 8004172:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_TIM_Base_MspInit+0x5c>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
}
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	40000400 	.word	0x40000400

08004194 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	@ 0x28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b4:	d11c      	bne.n	80041f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041b6:	4b21      	ldr	r3, [pc, #132]	@ (800423c <HAL_TIM_MspPostInit+0xa8>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ba:	4a20      	ldr	r2, [pc, #128]	@ (800423c <HAL_TIM_MspPostInit+0xa8>)
 80041bc:	f043 0308 	orr.w	r3, r3, #8
 80041c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041c2:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <HAL_TIM_MspPostInit+0xa8>)
 80041c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = RL_PWM_Pin|RR_PWM_Pin;
 80041ce:	2318      	movs	r3, #24
 80041d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d2:	2302      	movs	r3, #2
 80041d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041da:	2300      	movs	r3, #0
 80041dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80041de:	2302      	movs	r3, #2
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	4619      	mov	r1, r3
 80041e8:	4815      	ldr	r0, [pc, #84]	@ (8004240 <HAL_TIM_MspPostInit+0xac>)
 80041ea:	f000 faff 	bl	80047ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80041ee:	e020      	b.n	8004232 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a13      	ldr	r2, [pc, #76]	@ (8004244 <HAL_TIM_MspPostInit+0xb0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d11b      	bne.n	8004232 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_TIM_MspPostInit+0xa8>)
 80041fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fe:	4a0f      	ldr	r2, [pc, #60]	@ (800423c <HAL_TIM_MspPostInit+0xa8>)
 8004200:	f043 0310 	orr.w	r3, r3, #16
 8004204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004206:	4b0d      	ldr	r3, [pc, #52]	@ (800423c <HAL_TIM_MspPostInit+0xa8>)
 8004208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_PWM_Pin|FL_PWM_Pin;
 8004212:	230c      	movs	r3, #12
 8004214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004216:	2302      	movs	r3, #2
 8004218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004222:	2302      	movs	r3, #2
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	4619      	mov	r1, r3
 800422c:	4806      	ldr	r0, [pc, #24]	@ (8004248 <HAL_TIM_MspPostInit+0xb4>)
 800422e:	f000 fadd 	bl	80047ec <HAL_GPIO_Init>
}
 8004232:	bf00      	nop
 8004234:	3728      	adds	r7, #40	@ 0x28
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	48000c00 	.word	0x48000c00
 8004244:	40000400 	.word	0x40000400
 8004248:	48001000 	.word	0x48001000

0800424c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004250:	4b22      	ldr	r3, [pc, #136]	@ (80042dc <MX_UART4_Init+0x90>)
 8004252:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <MX_UART4_Init+0x94>)
 8004254:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004256:	4b21      	ldr	r3, [pc, #132]	@ (80042dc <MX_UART4_Init+0x90>)
 8004258:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800425c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800425e:	4b1f      	ldr	r3, [pc, #124]	@ (80042dc <MX_UART4_Init+0x90>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004264:	4b1d      	ldr	r3, [pc, #116]	@ (80042dc <MX_UART4_Init+0x90>)
 8004266:	2200      	movs	r2, #0
 8004268:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800426a:	4b1c      	ldr	r3, [pc, #112]	@ (80042dc <MX_UART4_Init+0x90>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004270:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <MX_UART4_Init+0x90>)
 8004272:	220c      	movs	r2, #12
 8004274:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004276:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <MX_UART4_Init+0x90>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800427c:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <MX_UART4_Init+0x90>)
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004282:	4b16      	ldr	r3, [pc, #88]	@ (80042dc <MX_UART4_Init+0x90>)
 8004284:	2200      	movs	r2, #0
 8004286:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <MX_UART4_Init+0x90>)
 800428a:	2200      	movs	r2, #0
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800428e:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <MX_UART4_Init+0x90>)
 8004290:	2200      	movs	r2, #0
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004294:	4811      	ldr	r0, [pc, #68]	@ (80042dc <MX_UART4_Init+0x90>)
 8004296:	f002 ff61 	bl	800715c <HAL_UART_Init>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80042a0:	f7fd fd3d 	bl	8001d1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042a4:	2100      	movs	r1, #0
 80042a6:	480d      	ldr	r0, [pc, #52]	@ (80042dc <MX_UART4_Init+0x90>)
 80042a8:	f003 fe52 	bl	8007f50 <HAL_UARTEx_SetTxFifoThreshold>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80042b2:	f7fd fd34 	bl	8001d1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042b6:	2100      	movs	r1, #0
 80042b8:	4808      	ldr	r0, [pc, #32]	@ (80042dc <MX_UART4_Init+0x90>)
 80042ba:	f003 fe87 	bl	8007fcc <HAL_UARTEx_SetRxFifoThreshold>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80042c4:	f7fd fd2b 	bl	8001d1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80042c8:	4804      	ldr	r0, [pc, #16]	@ (80042dc <MX_UART4_Init+0x90>)
 80042ca:	f003 fe08 	bl	8007ede <HAL_UARTEx_DisableFifoMode>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80042d4:	f7fd fd23 	bl	8001d1e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	2000033c 	.word	0x2000033c
 80042e0:	40004c00 	.word	0x40004c00

080042e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042e8:	4b22      	ldr	r3, [pc, #136]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 80042ea:	4a23      	ldr	r2, [pc, #140]	@ (8004378 <MX_USART1_UART_Init+0x94>)
 80042ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042ee:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 80042f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004302:	4b1c      	ldr	r3, [pc, #112]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004308:	4b1a      	ldr	r3, [pc, #104]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 800430a:	220c      	movs	r2, #12
 800430c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800430e:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004314:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800431a:	4b16      	ldr	r3, [pc, #88]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 800431c:	2200      	movs	r2, #0
 800431e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004320:	4b14      	ldr	r3, [pc, #80]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 8004322:	2200      	movs	r2, #0
 8004324:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004326:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 8004328:	2200      	movs	r2, #0
 800432a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800432c:	4811      	ldr	r0, [pc, #68]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 800432e:	f002 ff15 	bl	800715c <HAL_UART_Init>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004338:	f7fd fcf1 	bl	8001d1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800433c:	2100      	movs	r1, #0
 800433e:	480d      	ldr	r0, [pc, #52]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 8004340:	f003 fe06 	bl	8007f50 <HAL_UARTEx_SetTxFifoThreshold>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800434a:	f7fd fce8 	bl	8001d1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800434e:	2100      	movs	r1, #0
 8004350:	4808      	ldr	r0, [pc, #32]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 8004352:	f003 fe3b 	bl	8007fcc <HAL_UARTEx_SetRxFifoThreshold>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800435c:	f7fd fcdf 	bl	8001d1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004360:	4804      	ldr	r0, [pc, #16]	@ (8004374 <MX_USART1_UART_Init+0x90>)
 8004362:	f003 fdbc 	bl	8007ede <HAL_UARTEx_DisableFifoMode>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800436c:	f7fd fcd7 	bl	8001d1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200003d0 	.word	0x200003d0
 8004378:	40013800 	.word	0x40013800

0800437c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b0a0      	sub	sp, #128	@ 0x80
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004384:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004394:	f107 0318 	add.w	r3, r7, #24
 8004398:	2254      	movs	r2, #84	@ 0x54
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f004 f8b7 	bl	8008510 <memset>
  if(uartHandle->Instance==UART4)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a3d      	ldr	r2, [pc, #244]	@ (800449c <HAL_UART_MspInit+0x120>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d137      	bne.n	800441c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80043ac:	2308      	movs	r3, #8
 80043ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043b4:	f107 0318 	add.w	r3, r7, #24
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 f993 	bl	80056e4 <HAL_RCCEx_PeriphCLKConfig>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80043c4:	f7fd fcab 	bl	8001d1e <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80043c8:	4b35      	ldr	r3, [pc, #212]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043cc:	4a34      	ldr	r2, [pc, #208]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 80043ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d4:	4b32      	ldr	r3, [pc, #200]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e0:	4b2f      	ldr	r3, [pc, #188]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 80043e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e4:	4a2e      	ldr	r2, [pc, #184]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043ec:	4b2c      	ldr	r3, [pc, #176]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 80043ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800440a:	2305      	movs	r3, #5
 800440c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800440e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004412:	4619      	mov	r1, r3
 8004414:	4823      	ldr	r0, [pc, #140]	@ (80044a4 <HAL_UART_MspInit+0x128>)
 8004416:	f000 f9e9 	bl	80047ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800441a:	e03a      	b.n	8004492 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a21      	ldr	r2, [pc, #132]	@ (80044a8 <HAL_UART_MspInit+0x12c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d135      	bne.n	8004492 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004426:	2301      	movs	r3, #1
 8004428:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800442e:	f107 0318 	add.w	r3, r7, #24
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f956 	bl	80056e4 <HAL_RCCEx_PeriphCLKConfig>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800443e:	f7fd fc6e 	bl	8001d1e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004442:	4b17      	ldr	r3, [pc, #92]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 8004444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004446:	4a16      	ldr	r2, [pc, #88]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 8004448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800444c:	6613      	str	r3, [r2, #96]	@ 0x60
 800444e:	4b14      	ldr	r3, [pc, #80]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 8004450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800445a:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	4a10      	ldr	r2, [pc, #64]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004466:	4b0e      	ldr	r3, [pc, #56]	@ (80044a0 <HAL_UART_MspInit+0x124>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004472:	2330      	movs	r3, #48	@ 0x30
 8004474:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004476:	2302      	movs	r3, #2
 8004478:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	2300      	movs	r3, #0
 800447c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447e:	2300      	movs	r3, #0
 8004480:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004482:	2307      	movs	r3, #7
 8004484:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004486:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800448a:	4619      	mov	r1, r3
 800448c:	4805      	ldr	r0, [pc, #20]	@ (80044a4 <HAL_UART_MspInit+0x128>)
 800448e:	f000 f9ad 	bl	80047ec <HAL_GPIO_Init>
}
 8004492:	bf00      	nop
 8004494:	3780      	adds	r7, #128	@ 0x80
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40004c00 	.word	0x40004c00
 80044a0:	40021000 	.word	0x40021000
 80044a4:	48000800 	.word	0x48000800
 80044a8:	40013800 	.word	0x40013800

080044ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044ac:	480d      	ldr	r0, [pc, #52]	@ (80044e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044ae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80044b0:	f7ff faf0 	bl	8003a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044b4:	480c      	ldr	r0, [pc, #48]	@ (80044e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80044b6:	490d      	ldr	r1, [pc, #52]	@ (80044ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80044b8:	4a0d      	ldr	r2, [pc, #52]	@ (80044f0 <LoopForever+0xe>)
  movs r3, #0
 80044ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044bc:	e002      	b.n	80044c4 <LoopCopyDataInit>

080044be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044c2:	3304      	adds	r3, #4

080044c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c8:	d3f9      	bcc.n	80044be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ca:	4a0a      	ldr	r2, [pc, #40]	@ (80044f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044cc:	4c0a      	ldr	r4, [pc, #40]	@ (80044f8 <LoopForever+0x16>)
  movs r3, #0
 80044ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044d0:	e001      	b.n	80044d6 <LoopFillZerobss>

080044d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d4:	3204      	adds	r2, #4

080044d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d8:	d3fb      	bcc.n	80044d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044da:	f004 f86d 	bl	80085b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044de:	f7fd f943 	bl	8001768 <main>

080044e2 <LoopForever>:

LoopForever:
    b LoopForever
 80044e2:	e7fe      	b.n	80044e2 <LoopForever>
  ldr   r0, =_estack
 80044e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044ec:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80044f0:	08009d70 	.word	0x08009d70
  ldr r2, =_sbss
 80044f4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80044f8:	200005b4 	.word	0x200005b4

080044fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044fc:	e7fe      	b.n	80044fc <ADC1_2_IRQHandler>

080044fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004508:	2003      	movs	r0, #3
 800450a:	f000 f93d 	bl	8004788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800450e:	200f      	movs	r0, #15
 8004510:	f000 f80e 	bl	8004530 <HAL_InitTick>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	71fb      	strb	r3, [r7, #7]
 800451e:	e001      	b.n	8004524 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004520:	f7ff f9c2 	bl	80038a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004524:	79fb      	ldrb	r3, [r7, #7]

}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800453c:	4b16      	ldr	r3, [pc, #88]	@ (8004598 <HAL_InitTick+0x68>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004544:	4b15      	ldr	r3, [pc, #84]	@ (800459c <HAL_InitTick+0x6c>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b13      	ldr	r3, [pc, #76]	@ (8004598 <HAL_InitTick+0x68>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004550:	fbb1 f3f3 	udiv	r3, r1, r3
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f93a 	bl	80047d2 <HAL_SYSTICK_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10f      	bne.n	8004584 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d809      	bhi.n	800457e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800456a:	2200      	movs	r2, #0
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004572:	f000 f914 	bl	800479e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <HAL_InitTick+0x70>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e007      	b.n	800458e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e004      	b.n	800458e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e001      	b.n	800458e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	2000008c 	.word	0x2000008c
 800459c:	20000084 	.word	0x20000084
 80045a0:	20000088 	.word	0x20000088

080045a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_IncTick+0x1c>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_IncTick+0x20>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	4a03      	ldr	r2, [pc, #12]	@ (80045c0 <HAL_IncTick+0x1c>)
 80045b4:	6013      	str	r3, [r2, #0]
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20000464 	.word	0x20000464
 80045c4:	2000008c 	.word	0x2000008c

080045c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return uwTick;
 80045cc:	4b03      	ldr	r3, [pc, #12]	@ (80045dc <HAL_GetTick+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000464 	.word	0x20000464

080045e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e8:	f7ff ffee 	bl	80045c8 <HAL_GetTick>
 80045ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f8:	d004      	beq.n	8004604 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80045fa:	4b09      	ldr	r3, [pc, #36]	@ (8004620 <HAL_Delay+0x40>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004604:	bf00      	nop
 8004606:	f7ff ffdf 	bl	80045c8 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	429a      	cmp	r2, r3
 8004614:	d8f7      	bhi.n	8004606 <HAL_Delay+0x26>
  {
  }
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	2000008c 	.word	0x2000008c

08004624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004634:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <__NVIC_SetPriorityGrouping+0x44>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004640:	4013      	ands	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800464c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004656:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <__NVIC_SetPriorityGrouping+0x44>)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	60d3      	str	r3, [r2, #12]
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004670:	4b04      	ldr	r3, [pc, #16]	@ (8004684 <__NVIC_GetPriorityGrouping+0x18>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	f003 0307 	and.w	r3, r3, #7
}
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	2b00      	cmp	r3, #0
 800469a:	db0a      	blt.n	80046b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	490c      	ldr	r1, [pc, #48]	@ (80046d4 <__NVIC_SetPriority+0x4c>)
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	0112      	lsls	r2, r2, #4
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	440b      	add	r3, r1
 80046ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b0:	e00a      	b.n	80046c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4908      	ldr	r1, [pc, #32]	@ (80046d8 <__NVIC_SetPriority+0x50>)
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	3b04      	subs	r3, #4
 80046c0:	0112      	lsls	r2, r2, #4
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	440b      	add	r3, r1
 80046c6:	761a      	strb	r2, [r3, #24]
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000e100 	.word	0xe000e100
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	@ 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f1c3 0307 	rsb	r3, r3, #7
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	bf28      	it	cs
 80046fa:	2304      	movcs	r3, #4
 80046fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3304      	adds	r3, #4
 8004702:	2b06      	cmp	r3, #6
 8004704:	d902      	bls.n	800470c <NVIC_EncodePriority+0x30>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3b03      	subs	r3, #3
 800470a:	e000      	b.n	800470e <NVIC_EncodePriority+0x32>
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43da      	mvns	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	401a      	ands	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004724:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	43d9      	mvns	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	4313      	orrs	r3, r2
         );
}
 8004736:	4618      	mov	r0, r3
 8004738:	3724      	adds	r7, #36	@ 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004754:	d301      	bcc.n	800475a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004756:	2301      	movs	r3, #1
 8004758:	e00f      	b.n	800477a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800475a:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <SysTick_Config+0x40>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004762:	210f      	movs	r1, #15
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004768:	f7ff ff8e 	bl	8004688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <SysTick_Config+0x40>)
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004772:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <SysTick_Config+0x40>)
 8004774:	2207      	movs	r2, #7
 8004776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000e010 	.word	0xe000e010

08004788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff47 	bl	8004624 <__NVIC_SetPriorityGrouping>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	4603      	mov	r3, r0
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047ac:	f7ff ff5e 	bl	800466c <__NVIC_GetPriorityGrouping>
 80047b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f7ff ff90 	bl	80046dc <NVIC_EncodePriority>
 80047bc:	4602      	mov	r2, r0
 80047be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff5f 	bl	8004688 <__NVIC_SetPriority>
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff ffb2 	bl	8004744 <SysTick_Config>
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047fa:	e15a      	b.n	8004ab2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2101      	movs	r1, #1
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	4013      	ands	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 814c 	beq.w	8004aac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d005      	beq.n	800482c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004828:	2b02      	cmp	r3, #2
 800482a:	d130      	bne.n	800488e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	2203      	movs	r2, #3
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004862:	2201      	movs	r2, #1
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	f003 0201 	and.w	r2, r3, #1
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b03      	cmp	r3, #3
 8004898:	d017      	beq.n	80048ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	2203      	movs	r2, #3
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d123      	bne.n	800491e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	08da      	lsrs	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3208      	adds	r2, #8
 80048de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	6939      	ldr	r1, [r7, #16]
 800491a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	2203      	movs	r2, #3
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0203 	and.w	r2, r3, #3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a6 	beq.w	8004aac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004960:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad0 <HAL_GPIO_Init+0x2e4>)
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad0 <HAL_GPIO_Init+0x2e4>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	6613      	str	r3, [r2, #96]	@ 0x60
 800496c:	4b58      	ldr	r3, [pc, #352]	@ (8004ad0 <HAL_GPIO_Init+0x2e4>)
 800496e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004978:	4a56      	ldr	r2, [pc, #344]	@ (8004ad4 <HAL_GPIO_Init+0x2e8>)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	3302      	adds	r3, #2
 8004980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	220f      	movs	r2, #15
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049a2:	d01f      	beq.n	80049e4 <HAL_GPIO_Init+0x1f8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a4c      	ldr	r2, [pc, #304]	@ (8004ad8 <HAL_GPIO_Init+0x2ec>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d019      	beq.n	80049e0 <HAL_GPIO_Init+0x1f4>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a4b      	ldr	r2, [pc, #300]	@ (8004adc <HAL_GPIO_Init+0x2f0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <HAL_GPIO_Init+0x1f0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ae0 <HAL_GPIO_Init+0x2f4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00d      	beq.n	80049d8 <HAL_GPIO_Init+0x1ec>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a49      	ldr	r2, [pc, #292]	@ (8004ae4 <HAL_GPIO_Init+0x2f8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <HAL_GPIO_Init+0x1e8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a48      	ldr	r2, [pc, #288]	@ (8004ae8 <HAL_GPIO_Init+0x2fc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_GPIO_Init+0x1e4>
 80049cc:	2305      	movs	r3, #5
 80049ce:	e00a      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d0:	2306      	movs	r3, #6
 80049d2:	e008      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d4:	2304      	movs	r3, #4
 80049d6:	e006      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049d8:	2303      	movs	r3, #3
 80049da:	e004      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049dc:	2302      	movs	r3, #2
 80049de:	e002      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_GPIO_Init+0x1fa>
 80049e4:	2300      	movs	r3, #0
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	f002 0203 	and.w	r2, r2, #3
 80049ec:	0092      	lsls	r2, r2, #2
 80049ee:	4093      	lsls	r3, r2
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f6:	4937      	ldr	r1, [pc, #220]	@ (8004ad4 <HAL_GPIO_Init+0x2e8>)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	3302      	adds	r3, #2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a04:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a28:	4a30      	ldr	r2, [pc, #192]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a52:	4a26      	ldr	r2, [pc, #152]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a58:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a82:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aa6:	4a11      	ldr	r2, [pc, #68]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f47f ae9d 	bne.w	80047fc <HAL_GPIO_Init+0x10>
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	48000400 	.word	0x48000400
 8004adc:	48000800 	.word	0x48000800
 8004ae0:	48000c00 	.word	0x48000c00
 8004ae4:	48001000 	.word	0x48001000
 8004ae8:	48001400 	.word	0x48001400
 8004aec:	40010400 	.word	0x40010400

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b0c:	e002      	b.n	8004b14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b0e:	887a      	ldrh	r2, [r7, #2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d141      	bne.n	8004bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3a:	d131      	bne.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b3c:	4b47      	ldr	r3, [pc, #284]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b42:	4a46      	ldr	r2, [pc, #280]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b4c:	4b43      	ldr	r3, [pc, #268]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b54:	4a41      	ldr	r2, [pc, #260]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b5c:	4b40      	ldr	r3, [pc, #256]	@ (8004c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2232      	movs	r2, #50	@ 0x32
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	4a3f      	ldr	r2, [pc, #252]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	0c9b      	lsrs	r3, r3, #18
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b72:	e002      	b.n	8004b7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b7a:	4b38      	ldr	r3, [pc, #224]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b86:	d102      	bne.n	8004b8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f2      	bne.n	8004b74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b8e:	4b33      	ldr	r3, [pc, #204]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d158      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e057      	b.n	8004c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bb0:	e04d      	b.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb8:	d141      	bne.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bba:	4b28      	ldr	r3, [pc, #160]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc6:	d131      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc8:	4b24      	ldr	r3, [pc, #144]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bce:	4a23      	ldr	r2, [pc, #140]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd8:	4b20      	ldr	r3, [pc, #128]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004be0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2232      	movs	r2, #50	@ 0x32
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	0c9b      	lsrs	r3, r3, #18
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfe:	e002      	b.n	8004c06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c06:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c12:	d102      	bne.n	8004c1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f2      	bne.n	8004c00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c1a:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c26:	d112      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e011      	b.n	8004c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c32:	4a0a      	ldr	r2, [pc, #40]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c3c:	e007      	b.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c3e:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c46:	4a05      	ldr	r2, [pc, #20]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	20000084 	.word	0x20000084
 8004c64:	431bde83 	.word	0x431bde83

08004c68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a04      	ldr	r2, [pc, #16]	@ (8004c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c76:	6093      	str	r3, [r2, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40007000 	.word	0x40007000

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e2fe      	b.n	8005298 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d075      	beq.n	8004d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca6:	4b97      	ldr	r3, [pc, #604]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb0:	4b94      	ldr	r3, [pc, #592]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d102      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x3e>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d002      	beq.n	8004ccc <HAL_RCC_OscConfig+0x44>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	4b8d      	ldr	r3, [pc, #564]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05b      	beq.n	8004d90 <HAL_RCC_OscConfig+0x108>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d157      	bne.n	8004d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e2d9      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cec:	d106      	bne.n	8004cfc <HAL_RCC_OscConfig+0x74>
 8004cee:	4b85      	ldr	r3, [pc, #532]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a84      	ldr	r2, [pc, #528]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x98>
 8004d06:	4b7f      	ldr	r3, [pc, #508]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b7c      	ldr	r3, [pc, #496]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a7b      	ldr	r2, [pc, #492]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004d20:	4b78      	ldr	r3, [pc, #480]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a77      	ldr	r2, [pc, #476]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b75      	ldr	r3, [pc, #468]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a74      	ldr	r2, [pc, #464]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7ff fc42 	bl	80045c8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7ff fc3e 	bl	80045c8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	@ 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e29e      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xc0>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7ff fc2e 	bl	80045c8 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7ff fc2a 	bl	80045c8 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	@ 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e28a      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d82:	4b60      	ldr	r3, [pc, #384]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0xe8>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d075      	beq.n	8004e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9e:	4b59      	ldr	r3, [pc, #356]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da8:	4b56      	ldr	r3, [pc, #344]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d102      	bne.n	8004dbe <HAL_RCC_OscConfig+0x136>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d002      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x13c>
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d11f      	bne.n	8004e04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_OscConfig+0x154>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e25d      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ddc:	4b49      	ldr	r3, [pc, #292]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	061b      	lsls	r3, r3, #24
 8004dea:	4946      	ldr	r1, [pc, #280]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004df0:	4b45      	ldr	r3, [pc, #276]	@ (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fb9b 	bl	8004530 <HAL_InitTick>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d043      	beq.n	8004e88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e249      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d023      	beq.n	8004e54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a3c      	ldr	r2, [pc, #240]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7ff fbd6 	bl	80045c8 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e20:	f7ff fbd2 	bl	80045c8 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e232      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e32:	4b34      	ldr	r3, [pc, #208]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3e:	4b31      	ldr	r3, [pc, #196]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	061b      	lsls	r3, r3, #24
 8004e4c:	492d      	ldr	r1, [pc, #180]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	604b      	str	r3, [r1, #4]
 8004e52:	e01a      	b.n	8004e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e54:	4b2b      	ldr	r3, [pc, #172]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2a      	ldr	r2, [pc, #168]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004e5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7ff fbb2 	bl	80045c8 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7ff fbae 	bl	80045c8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e20e      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e7a:	4b22      	ldr	r3, [pc, #136]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d041      	beq.n	8004f1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9e:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea4:	4a17      	ldr	r2, [pc, #92]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7ff fb8b 	bl	80045c8 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7ff fb87 	bl	80045c8 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e1e7      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ef      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x22e>
 8004ed6:	e020      	b.n	8004f1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ede:	4a09      	ldr	r2, [pc, #36]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7ff fb6e 	bl	80045c8 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eee:	e00d      	b.n	8004f0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7ff fb6a 	bl	80045c8 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d906      	bls.n	8004f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e1ca      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	20000088 	.word	0x20000088
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ea      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80a6 	beq.w	8005074 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f2c:	4b84      	ldr	r3, [pc, #528]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_RCC_OscConfig+0x2b4>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <HAL_RCC_OscConfig+0x2b6>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	4b7f      	ldr	r3, [pc, #508]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	4a7e      	ldr	r2, [pc, #504]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5e:	4b79      	ldr	r3, [pc, #484]	@ (8005144 <HAL_RCC_OscConfig+0x4bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d118      	bne.n	8004f9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f6a:	4b76      	ldr	r3, [pc, #472]	@ (8005144 <HAL_RCC_OscConfig+0x4bc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a75      	ldr	r2, [pc, #468]	@ (8005144 <HAL_RCC_OscConfig+0x4bc>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f76:	f7ff fb27 	bl	80045c8 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7e:	f7ff fb23 	bl	80045c8 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e183      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f90:	4b6c      	ldr	r3, [pc, #432]	@ (8005144 <HAL_RCC_OscConfig+0x4bc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d108      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x32e>
 8004fa4:	4b66      	ldr	r3, [pc, #408]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004faa:	4a65      	ldr	r2, [pc, #404]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fb4:	e024      	b.n	8005000 <HAL_RCC_OscConfig+0x378>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d110      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x358>
 8004fbe:	4b60      	ldr	r3, [pc, #384]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fce:	4b5c      	ldr	r3, [pc, #368]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fde:	e00f      	b.n	8005000 <HAL_RCC_OscConfig+0x378>
 8004fe0:	4b57      	ldr	r3, [pc, #348]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	4a56      	ldr	r2, [pc, #344]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ff0:	4b53      	ldr	r3, [pc, #332]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff6:	4a52      	ldr	r2, [pc, #328]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8004ff8:	f023 0304 	bic.w	r3, r3, #4
 8004ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d016      	beq.n	8005036 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7ff fade 	bl	80045c8 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500e:	e00a      	b.n	8005026 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f7ff fada 	bl	80045c8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e138      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005026:	4b46      	ldr	r3, [pc, #280]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ed      	beq.n	8005010 <HAL_RCC_OscConfig+0x388>
 8005034:	e015      	b.n	8005062 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005036:	f7ff fac7 	bl	80045c8 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800503c:	e00a      	b.n	8005054 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7ff fac3 	bl	80045c8 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e121      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005054:	4b3a      	ldr	r3, [pc, #232]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ed      	bne.n	800503e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005062:	7ffb      	ldrb	r3, [r7, #31]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b35      	ldr	r3, [pc, #212]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506c:	4a34      	ldr	r2, [pc, #208]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005072:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d03c      	beq.n	80050fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01c      	beq.n	80050c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005088:	4b2d      	ldr	r3, [pc, #180]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 800508a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800508e:	4a2c      	ldr	r2, [pc, #176]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005098:	f7ff fa96 	bl	80045c8 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a0:	f7ff fa92 	bl	80045c8 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0f2      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050b2:	4b23      	ldr	r3, [pc, #140]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 80050b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ef      	beq.n	80050a0 <HAL_RCC_OscConfig+0x418>
 80050c0:	e01b      	b.n	80050fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 80050c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d2:	f7ff fa79 	bl	80045c8 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050da:	f7ff fa75 	bl	80045c8 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e0d5      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050ec:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 80050ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1ef      	bne.n	80050da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80c9 	beq.w	8005296 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005104:	4b0e      	ldr	r3, [pc, #56]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b0c      	cmp	r3, #12
 800510e:	f000 8083 	beq.w	8005218 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d15e      	bne.n	80051d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511a:	4b09      	ldr	r3, [pc, #36]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a08      	ldr	r2, [pc, #32]	@ (8005140 <HAL_RCC_OscConfig+0x4b8>)
 8005120:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005126:	f7ff fa4f 	bl	80045c8 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512c:	e00c      	b.n	8005148 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512e:	f7ff fa4b 	bl	80045c8 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d905      	bls.n	8005148 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e0ab      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
 8005140:	40021000 	.word	0x40021000
 8005144:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005148:	4b55      	ldr	r3, [pc, #340]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ec      	bne.n	800512e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005154:	4b52      	ldr	r3, [pc, #328]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	4b52      	ldr	r3, [pc, #328]	@ (80052a4 <HAL_RCC_OscConfig+0x61c>)
 800515a:	4013      	ands	r3, r2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6a11      	ldr	r1, [r2, #32]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005164:	3a01      	subs	r2, #1
 8005166:	0112      	lsls	r2, r2, #4
 8005168:	4311      	orrs	r1, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800516e:	0212      	lsls	r2, r2, #8
 8005170:	4311      	orrs	r1, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005176:	0852      	lsrs	r2, r2, #1
 8005178:	3a01      	subs	r2, #1
 800517a:	0552      	lsls	r2, r2, #21
 800517c:	4311      	orrs	r1, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005182:	0852      	lsrs	r2, r2, #1
 8005184:	3a01      	subs	r2, #1
 8005186:	0652      	lsls	r2, r2, #25
 8005188:	4311      	orrs	r1, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800518e:	06d2      	lsls	r2, r2, #27
 8005190:	430a      	orrs	r2, r1
 8005192:	4943      	ldr	r1, [pc, #268]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 8005194:	4313      	orrs	r3, r2
 8005196:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005198:	4b41      	ldr	r3, [pc, #260]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a40      	ldr	r2, [pc, #256]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 800519e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051a4:	4b3e      	ldr	r3, [pc, #248]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a3d      	ldr	r2, [pc, #244]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 80051aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7ff fa0a 	bl	80045c8 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b8:	f7ff fa06 	bl	80045c8 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e066      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ca:	4b35      	ldr	r3, [pc, #212]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x530>
 80051d6:	e05e      	b.n	8005296 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d8:	4b31      	ldr	r3, [pc, #196]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a30      	ldr	r2, [pc, #192]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 80051de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7ff f9f0 	bl	80045c8 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ec:	f7ff f9ec 	bl	80045c8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e04c      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fe:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800520a:	4b25      	ldr	r3, [pc, #148]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	4924      	ldr	r1, [pc, #144]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 8005210:	4b25      	ldr	r3, [pc, #148]	@ (80052a8 <HAL_RCC_OscConfig+0x620>)
 8005212:	4013      	ands	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
 8005216:	e03e      	b.n	8005296 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e039      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005224:	4b1e      	ldr	r3, [pc, #120]	@ (80052a0 <HAL_RCC_OscConfig+0x618>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f003 0203 	and.w	r2, r3, #3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	429a      	cmp	r2, r3
 8005236:	d12c      	bne.n	8005292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	3b01      	subs	r3, #1
 8005244:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d123      	bne.n	8005292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d11b      	bne.n	8005292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d113      	bne.n	8005292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	3b01      	subs	r3, #1
 8005278:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d109      	bne.n	8005292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	3b01      	subs	r3, #1
 800528c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000
 80052a4:	019f800c 	.word	0x019f800c
 80052a8:	feeefffc 	.word	0xfeeefffc

080052ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e11e      	b.n	8005502 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052c4:	4b91      	ldr	r3, [pc, #580]	@ (800550c <HAL_RCC_ClockConfig+0x260>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d910      	bls.n	80052f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d2:	4b8e      	ldr	r3, [pc, #568]	@ (800550c <HAL_RCC_ClockConfig+0x260>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 020f 	bic.w	r2, r3, #15
 80052da:	498c      	ldr	r1, [pc, #560]	@ (800550c <HAL_RCC_ClockConfig+0x260>)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e2:	4b8a      	ldr	r3, [pc, #552]	@ (800550c <HAL_RCC_ClockConfig+0x260>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e106      	b.n	8005502 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d073      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b03      	cmp	r3, #3
 8005306:	d129      	bne.n	800535c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005308:	4b81      	ldr	r3, [pc, #516]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0f4      	b.n	8005502 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005318:	f000 f99e 	bl	8005658 <RCC_GetSysClockFreqFromPLLSource>
 800531c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4a7c      	ldr	r2, [pc, #496]	@ (8005514 <HAL_RCC_ClockConfig+0x268>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d93f      	bls.n	80053a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005326:	4b7a      	ldr	r3, [pc, #488]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800533a:	2b00      	cmp	r3, #0
 800533c:	d033      	beq.n	80053a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005342:	2b00      	cmp	r3, #0
 8005344:	d12f      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005346:	4b72      	ldr	r3, [pc, #456]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800534e:	4a70      	ldr	r2, [pc, #448]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005354:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005356:	2380      	movs	r3, #128	@ 0x80
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	e024      	b.n	80053a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d107      	bne.n	8005374 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005364:	4b6a      	ldr	r3, [pc, #424]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0c6      	b.n	8005502 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005374:	4b66      	ldr	r3, [pc, #408]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0be      	b.n	8005502 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005384:	f000 f8ce 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 8005388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4a61      	ldr	r2, [pc, #388]	@ (8005514 <HAL_RCC_ClockConfig+0x268>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d909      	bls.n	80053a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005392:	4b5f      	ldr	r3, [pc, #380]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800539a:	4a5d      	ldr	r2, [pc, #372]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 800539c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053a2:	2380      	movs	r3, #128	@ 0x80
 80053a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 0203 	bic.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4957      	ldr	r1, [pc, #348]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b8:	f7ff f906 	bl	80045c8 <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c0:	f7ff f902 	bl	80045c8 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e095      	b.n	8005502 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 020c 	and.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d1eb      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d023      	beq.n	800543c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005400:	4b43      	ldr	r3, [pc, #268]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	4a42      	ldr	r2, [pc, #264]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005406:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800540a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005418:	4b3d      	ldr	r3, [pc, #244]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005420:	4a3b      	ldr	r2, [pc, #236]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005422:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005426:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005428:	4b39      	ldr	r3, [pc, #228]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	4936      	ldr	r1, [pc, #216]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
 800543a:	e008      	b.n	800544e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b80      	cmp	r3, #128	@ 0x80
 8005440:	d105      	bne.n	800544e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005442:	4b33      	ldr	r3, [pc, #204]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	4a32      	ldr	r2, [pc, #200]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 8005448:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800544c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800544e:	4b2f      	ldr	r3, [pc, #188]	@ (800550c <HAL_RCC_ClockConfig+0x260>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d21d      	bcs.n	8005498 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545c:	4b2b      	ldr	r3, [pc, #172]	@ (800550c <HAL_RCC_ClockConfig+0x260>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f023 020f 	bic.w	r2, r3, #15
 8005464:	4929      	ldr	r1, [pc, #164]	@ (800550c <HAL_RCC_ClockConfig+0x260>)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800546c:	f7ff f8ac 	bl	80045c8 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	e00a      	b.n	800548a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005474:	f7ff f8a8 	bl	80045c8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e03b      	b.n	8005502 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b20      	ldr	r3, [pc, #128]	@ (800550c <HAL_RCC_ClockConfig+0x260>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d1ed      	bne.n	8005474 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4917      	ldr	r1, [pc, #92]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054c2:	4b13      	ldr	r3, [pc, #76]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	490f      	ldr	r1, [pc, #60]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054d6:	f000 f825 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 80054da:	4602      	mov	r2, r0
 80054dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <HAL_RCC_ClockConfig+0x264>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	490c      	ldr	r1, [pc, #48]	@ (8005518 <HAL_RCC_ClockConfig+0x26c>)
 80054e8:	5ccb      	ldrb	r3, [r1, r3]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	fa22 f303 	lsr.w	r3, r2, r3
 80054f2:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <HAL_RCC_ClockConfig+0x270>)
 80054f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <HAL_RCC_ClockConfig+0x274>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff f818 	bl	8004530 <HAL_InitTick>
 8005500:	4603      	mov	r3, r0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40022000 	.word	0x40022000
 8005510:	40021000 	.word	0x40021000
 8005514:	04c4b400 	.word	0x04c4b400
 8005518:	08009b90 	.word	0x08009b90
 800551c:	20000084 	.word	0x20000084
 8005520:	20000088 	.word	0x20000088

08005524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800552a:	4b2c      	ldr	r3, [pc, #176]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b04      	cmp	r3, #4
 8005534:	d102      	bne.n	800553c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005536:	4b2a      	ldr	r3, [pc, #168]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e047      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800553c:	4b27      	ldr	r3, [pc, #156]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 030c 	and.w	r3, r3, #12
 8005544:	2b08      	cmp	r3, #8
 8005546:	d102      	bne.n	800554e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005548:	4b26      	ldr	r3, [pc, #152]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	e03e      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800554e:	4b23      	ldr	r3, [pc, #140]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d136      	bne.n	80055c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800555a:	4b20      	ldr	r3, [pc, #128]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005564:	4b1d      	ldr	r3, [pc, #116]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	3301      	adds	r3, #1
 8005570:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d10c      	bne.n	8005592 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005578:	4a1a      	ldr	r2, [pc, #104]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005582:	68d2      	ldr	r2, [r2, #12]
 8005584:	0a12      	lsrs	r2, r2, #8
 8005586:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	617b      	str	r3, [r7, #20]
      break;
 8005590:	e00c      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005592:	4a13      	ldr	r2, [pc, #76]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	4a10      	ldr	r2, [pc, #64]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800559c:	68d2      	ldr	r2, [r2, #12]
 800559e:	0a12      	lsrs	r2, r2, #8
 80055a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]
      break;
 80055aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055ac:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	0e5b      	lsrs	r3, r3, #25
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	3301      	adds	r3, #1
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e001      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055cc:	693b      	ldr	r3, [r7, #16]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000
 80055e0:	00f42400 	.word	0x00f42400
 80055e4:	007a1200 	.word	0x007a1200

080055e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055ec:	4b03      	ldr	r3, [pc, #12]	@ (80055fc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ee:	681b      	ldr	r3, [r3, #0]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000084 	.word	0x20000084

08005600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005604:	f7ff fff0 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4904      	ldr	r1, [pc, #16]	@ (8005628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021000 	.word	0x40021000
 8005628:	08009ba0 	.word	0x08009ba0

0800562c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005630:	f7ff ffda 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0adb      	lsrs	r3, r3, #11
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4904      	ldr	r1, [pc, #16]	@ (8005654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	08009ba0 	.word	0x08009ba0

08005658 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800565e:	4b1e      	ldr	r3, [pc, #120]	@ (80056d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005668:	4b1b      	ldr	r3, [pc, #108]	@ (80056d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	3301      	adds	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d10c      	bne.n	8005696 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800567c:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	4a14      	ldr	r2, [pc, #80]	@ (80056d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005686:	68d2      	ldr	r2, [r2, #12]
 8005688:	0a12      	lsrs	r2, r2, #8
 800568a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800568e:	fb02 f303 	mul.w	r3, r2, r3
 8005692:	617b      	str	r3, [r7, #20]
    break;
 8005694:	e00c      	b.n	80056b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005696:	4a12      	ldr	r2, [pc, #72]	@ (80056e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	4a0e      	ldr	r2, [pc, #56]	@ (80056d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056a0:	68d2      	ldr	r2, [r2, #12]
 80056a2:	0a12      	lsrs	r2, r2, #8
 80056a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
    break;
 80056ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056b0:	4b09      	ldr	r3, [pc, #36]	@ (80056d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	0e5b      	lsrs	r3, r3, #25
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	3301      	adds	r3, #1
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056ca:	687b      	ldr	r3, [r7, #4]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40021000 	.word	0x40021000
 80056dc:	007a1200 	.word	0x007a1200
 80056e0:	00f42400 	.word	0x00f42400

080056e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056ec:	2300      	movs	r3, #0
 80056ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056f0:	2300      	movs	r3, #0
 80056f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8098 	beq.w	8005832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005702:	2300      	movs	r3, #0
 8005704:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005706:	4b43      	ldr	r3, [pc, #268]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10d      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005712:	4b40      	ldr	r3, [pc, #256]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	4a3f      	ldr	r2, [pc, #252]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800571c:	6593      	str	r3, [r2, #88]	@ 0x58
 800571e:	4b3d      	ldr	r3, [pc, #244]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005726:	60bb      	str	r3, [r7, #8]
 8005728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800572a:	2301      	movs	r3, #1
 800572c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800572e:	4b3a      	ldr	r3, [pc, #232]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a39      	ldr	r2, [pc, #228]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005738:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800573a:	f7fe ff45 	bl	80045c8 <HAL_GetTick>
 800573e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005740:	e009      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fe ff41 	bl	80045c8 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d902      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	74fb      	strb	r3, [r7, #19]
        break;
 8005754:	e005      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005756:	4b30      	ldr	r3, [pc, #192]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ef      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d159      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005768:	4b2a      	ldr	r3, [pc, #168]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005772:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01e      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	429a      	cmp	r2, r3
 8005782:	d019      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005784:	4b23      	ldr	r3, [pc, #140]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005790:	4b20      	ldr	r3, [pc, #128]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	4a1f      	ldr	r2, [pc, #124]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800579c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057b0:	4a18      	ldr	r2, [pc, #96]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fe ff01 	bl	80045c8 <HAL_GetTick>
 80057c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c8:	e00b      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fe fefd 	bl	80045c8 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d8:	4293      	cmp	r3, r2
 80057da:	d902      	bls.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	74fb      	strb	r3, [r7, #19]
            break;
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ec      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057f6:	4b07      	ldr	r3, [pc, #28]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005804:	4903      	ldr	r1, [pc, #12]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800580c:	e008      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	74bb      	strb	r3, [r7, #18]
 8005812:	e005      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005814:	40021000 	.word	0x40021000
 8005818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005820:	7c7b      	ldrb	r3, [r7, #17]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d105      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005826:	4ba7      	ldr	r3, [pc, #668]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582a:	4aa6      	ldr	r2, [pc, #664]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005830:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800583e:	4ba1      	ldr	r3, [pc, #644]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005844:	f023 0203 	bic.w	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	499d      	ldr	r1, [pc, #628]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005860:	4b98      	ldr	r3, [pc, #608]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005866:	f023 020c 	bic.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	4995      	ldr	r1, [pc, #596]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005882:	4b90      	ldr	r3, [pc, #576]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005888:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	498c      	ldr	r1, [pc, #560]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058a4:	4b87      	ldr	r3, [pc, #540]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	4984      	ldr	r1, [pc, #528]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058c6:	4b7f      	ldr	r3, [pc, #508]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	497b      	ldr	r1, [pc, #492]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e8:	4b76      	ldr	r3, [pc, #472]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	4973      	ldr	r1, [pc, #460]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800590a:	4b6e      	ldr	r3, [pc, #440]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005910:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	496a      	ldr	r1, [pc, #424]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800592c:	4b65      	ldr	r3, [pc, #404]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005932:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4962      	ldr	r1, [pc, #392]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800594e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005954:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	4959      	ldr	r1, [pc, #356]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005970:	4b54      	ldr	r3, [pc, #336]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005972:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005976:	f023 0203 	bic.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597e:	4951      	ldr	r1, [pc, #324]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005992:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005998:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a0:	4948      	ldr	r1, [pc, #288]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d015      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059b4:	4b43      	ldr	r3, [pc, #268]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c2:	4940      	ldr	r1, [pc, #256]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059d2:	d105      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d015      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059ec:	4b35      	ldr	r3, [pc, #212]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fa:	4932      	ldr	r1, [pc, #200]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a0a:	d105      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a16:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d015      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a24:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a32:	4924      	ldr	r1, [pc, #144]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a42:	d105      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a44:	4b1f      	ldr	r3, [pc, #124]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d015      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a5c:	4b19      	ldr	r3, [pc, #100]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6a:	4916      	ldr	r1, [pc, #88]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a7a:	d105      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4a10      	ldr	r2, [pc, #64]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d019      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a94:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	4908      	ldr	r1, [pc, #32]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab2:	d109      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab4:	4b03      	ldr	r3, [pc, #12]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a02      	ldr	r2, [pc, #8]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005abe:	60d3      	str	r3, [r2, #12]
 8005ac0:	e002      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d015      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ad4:	4b29      	ldr	r3, [pc, #164]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ada:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae2:	4926      	ldr	r1, [pc, #152]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005af2:	d105      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005af4:	4b21      	ldr	r3, [pc, #132]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a20      	ldr	r2, [pc, #128]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005afe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d015      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b12:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1a:	4918      	ldr	r1, [pc, #96]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2a:	d105      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b2c:	4b13      	ldr	r3, [pc, #76]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a12      	ldr	r2, [pc, #72]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b36:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d015      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b44:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b52:	490a      	ldr	r1, [pc, #40]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b62:	d105      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b64:	4b05      	ldr	r3, [pc, #20]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4a04      	ldr	r2, [pc, #16]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b70:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40021000 	.word	0x40021000

08005b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e049      	b.n	8005c26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fe fac2 	bl	8004130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	f000 fd96 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e054      	b.n	8005cf2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a26      	ldr	r2, [pc, #152]	@ (8005d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d022      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c72:	d01d      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a22      	ldr	r2, [pc, #136]	@ (8005d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d018      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a21      	ldr	r2, [pc, #132]	@ (8005d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8005d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00e      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1e      	ldr	r2, [pc, #120]	@ (8005d10 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d14 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1b      	ldr	r2, [pc, #108]	@ (8005d18 <HAL_TIM_Base_Start_IT+0xe8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d115      	bne.n	8005cdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	4b19      	ldr	r3, [pc, #100]	@ (8005d1c <HAL_TIM_Base_Start_IT+0xec>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d015      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0xbe>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cc8:	d011      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0201 	orr.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cda:	e008      	b.n	8005cee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e000      	b.n	8005cf0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40013400 	.word	0x40013400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40015000 	.word	0x40015000
 8005d1c:	00010007 	.word	0x00010007

08005d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e049      	b.n	8005dc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f841 	bl	8005dce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 fcc6 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <HAL_TIM_PWM_Start+0x24>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	e03c      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d109      	bne.n	8005e22 <HAL_TIM_PWM_Start+0x3e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	e02f      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d109      	bne.n	8005e3c <HAL_TIM_PWM_Start+0x58>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	e022      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d109      	bne.n	8005e56 <HAL_TIM_PWM_Start+0x72>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	bf14      	ite	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	2300      	moveq	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	e015      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d109      	bne.n	8005e70 <HAL_TIM_PWM_Start+0x8c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	e008      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e0a6      	b.n	8005fd8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Start+0xb6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e98:	e023      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xc6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea8:	e01b      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Start+0xd6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eb8:	e013      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xe6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ec8:	e00b      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xf6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ed8:	e003      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 f87a 	bl	8006fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe0 <HAL_TIM_PWM_Start+0x1fc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x148>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a39      	ldr	r2, [pc, #228]	@ (8005fe4 <HAL_TIM_PWM_Start+0x200>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x148>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a37      	ldr	r2, [pc, #220]	@ (8005fe8 <HAL_TIM_PWM_Start+0x204>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x148>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a36      	ldr	r2, [pc, #216]	@ (8005fec <HAL_TIM_PWM_Start+0x208>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x148>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a34      	ldr	r2, [pc, #208]	@ (8005ff0 <HAL_TIM_PWM_Start+0x20c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x148>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a33      	ldr	r2, [pc, #204]	@ (8005ff4 <HAL_TIM_PWM_Start+0x210>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIM_PWM_Start+0x14c>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_TIM_PWM_Start+0x14e>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a25      	ldr	r2, [pc, #148]	@ (8005fe0 <HAL_TIM_PWM_Start+0x1fc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x1b2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f58:	d01d      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x1b2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <HAL_TIM_PWM_Start+0x214>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x1b2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a24      	ldr	r2, [pc, #144]	@ (8005ffc <HAL_TIM_PWM_Start+0x218>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x1b2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a23      	ldr	r2, [pc, #140]	@ (8006000 <HAL_TIM_PWM_Start+0x21c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x1b2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a19      	ldr	r2, [pc, #100]	@ (8005fe4 <HAL_TIM_PWM_Start+0x200>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x1b2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a18      	ldr	r2, [pc, #96]	@ (8005fe8 <HAL_TIM_PWM_Start+0x204>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x1b2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a18      	ldr	r2, [pc, #96]	@ (8005ff4 <HAL_TIM_PWM_Start+0x210>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d115      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4b19      	ldr	r3, [pc, #100]	@ (8006004 <HAL_TIM_PWM_Start+0x220>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b06      	cmp	r3, #6
 8005fa6:	d015      	beq.n	8005fd4 <HAL_TIM_PWM_Start+0x1f0>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fae:	d011      	beq.n	8005fd4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	e008      	b.n	8005fd4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e000      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40014400 	.word	0x40014400
 8005ff0:	40014800 	.word	0x40014800
 8005ff4:	40015000 	.word	0x40015000
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	00010007 	.word	0x00010007

08006008 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e097      	b.n	800614c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fd ffa5 	bl	8003f80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800604c:	f023 0307 	bic.w	r3, r3, #7
 8006050:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3304      	adds	r3, #4
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f000 fb47 	bl	80066f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608a:	f023 0303 	bic.w	r3, r3, #3
 800608e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	4313      	orrs	r3, r2
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80060a8:	f023 030c 	bic.w	r3, r3, #12
 80060ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	4313      	orrs	r3, r2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	011a      	lsls	r2, r3, #4
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	031b      	lsls	r3, r3, #12
 80060d8:	4313      	orrs	r3, r2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	4313      	orrs	r3, r2
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006164:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800616c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006174:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800617c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d110      	bne.n	80061a6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d102      	bne.n	8006190 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800618a:	7b7b      	ldrb	r3, [r7, #13]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d001      	beq.n	8006194 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e089      	b.n	80062a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a4:	e031      	b.n	800620a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d110      	bne.n	80061ce <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d102      	bne.n	80061b8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061b2:	7b3b      	ldrb	r3, [r7, #12]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e075      	b.n	80062a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061cc:	e01d      	b.n	800620a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d108      	bne.n	80061e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d105      	bne.n	80061e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061da:	7b7b      	ldrb	r3, [r7, #13]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d102      	bne.n	80061e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061e0:	7b3b      	ldrb	r3, [r7, #12]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d001      	beq.n	80061ea <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e05e      	b.n	80062a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b04      	cmp	r3, #4
 8006214:	d010      	beq.n	8006238 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006216:	e01f      	b.n	8006258 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2201      	movs	r2, #1
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fedf 	bl	8006fe4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0202 	orr.w	r2, r2, #2
 8006234:	60da      	str	r2, [r3, #12]
      break;
 8006236:	e02e      	b.n	8006296 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2201      	movs	r2, #1
 800623e:	2104      	movs	r1, #4
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fecf 	bl	8006fe4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0204 	orr.w	r2, r2, #4
 8006254:	60da      	str	r2, [r3, #12]
      break;
 8006256:	e01e      	b.n	8006296 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2201      	movs	r2, #1
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f000 febf 	bl	8006fe4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2201      	movs	r2, #1
 800626c:	2104      	movs	r1, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f000 feb8 	bl	8006fe4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0202 	orr.w	r2, r2, #2
 8006282:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0204 	orr.w	r2, r2, #4
 8006292:	60da      	str	r2, [r3, #12]
      break;
 8006294:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e0ff      	b.n	80064ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b14      	cmp	r3, #20
 80062da:	f200 80f0 	bhi.w	80064be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062de:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006339 	.word	0x08006339
 80062e8:	080064bf 	.word	0x080064bf
 80062ec:	080064bf 	.word	0x080064bf
 80062f0:	080064bf 	.word	0x080064bf
 80062f4:	08006379 	.word	0x08006379
 80062f8:	080064bf 	.word	0x080064bf
 80062fc:	080064bf 	.word	0x080064bf
 8006300:	080064bf 	.word	0x080064bf
 8006304:	080063bb 	.word	0x080063bb
 8006308:	080064bf 	.word	0x080064bf
 800630c:	080064bf 	.word	0x080064bf
 8006310:	080064bf 	.word	0x080064bf
 8006314:	080063fb 	.word	0x080063fb
 8006318:	080064bf 	.word	0x080064bf
 800631c:	080064bf 	.word	0x080064bf
 8006320:	080064bf 	.word	0x080064bf
 8006324:	0800643d 	.word	0x0800643d
 8006328:	080064bf 	.word	0x080064bf
 800632c:	080064bf 	.word	0x080064bf
 8006330:	080064bf 	.word	0x080064bf
 8006334:	0800647d 	.word	0x0800647d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fa8a 	bl	8006858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0208 	orr.w	r2, r2, #8
 8006352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0204 	bic.w	r2, r2, #4
 8006362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6999      	ldr	r1, [r3, #24]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	619a      	str	r2, [r3, #24]
      break;
 8006376:	e0a5      	b.n	80064c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fb04 	bl	800698c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6999      	ldr	r1, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	619a      	str	r2, [r3, #24]
      break;
 80063b8:	e084      	b.n	80064c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fb77 	bl	8006ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0208 	orr.w	r2, r2, #8
 80063d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0204 	bic.w	r2, r2, #4
 80063e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69d9      	ldr	r1, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	61da      	str	r2, [r3, #28]
      break;
 80063f8:	e064      	b.n	80064c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fbe9 	bl	8006bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	021a      	lsls	r2, r3, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	61da      	str	r2, [r3, #28]
      break;
 800643a:	e043      	b.n	80064c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fc5c 	bl	8006d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0204 	bic.w	r2, r2, #4
 8006466:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691a      	ldr	r2, [r3, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800647a:	e023      	b.n	80064c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fca6 	bl	8006dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006496:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	021a      	lsls	r2, r3, #8
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064bc:	e002      	b.n	80064c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
      break;
 80064c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop

080064d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIM_ConfigClockSource+0x1c>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e0ee      	b.n	80066d2 <HAL_TIM_ConfigClockSource+0x1fa>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006512:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800651e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a6b      	ldr	r2, [pc, #428]	@ (80066dc <HAL_TIM_ConfigClockSource+0x204>)
 800652e:	4293      	cmp	r3, r2
 8006530:	f000 80b9 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006534:	4a69      	ldr	r2, [pc, #420]	@ (80066dc <HAL_TIM_ConfigClockSource+0x204>)
 8006536:	4293      	cmp	r3, r2
 8006538:	f200 80be 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 800653c:	4a68      	ldr	r2, [pc, #416]	@ (80066e0 <HAL_TIM_ConfigClockSource+0x208>)
 800653e:	4293      	cmp	r3, r2
 8006540:	f000 80b1 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006544:	4a66      	ldr	r2, [pc, #408]	@ (80066e0 <HAL_TIM_ConfigClockSource+0x208>)
 8006546:	4293      	cmp	r3, r2
 8006548:	f200 80b6 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 800654c:	4a65      	ldr	r2, [pc, #404]	@ (80066e4 <HAL_TIM_ConfigClockSource+0x20c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	f000 80a9 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006554:	4a63      	ldr	r2, [pc, #396]	@ (80066e4 <HAL_TIM_ConfigClockSource+0x20c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	f200 80ae 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 800655c:	4a62      	ldr	r2, [pc, #392]	@ (80066e8 <HAL_TIM_ConfigClockSource+0x210>)
 800655e:	4293      	cmp	r3, r2
 8006560:	f000 80a1 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006564:	4a60      	ldr	r2, [pc, #384]	@ (80066e8 <HAL_TIM_ConfigClockSource+0x210>)
 8006566:	4293      	cmp	r3, r2
 8006568:	f200 80a6 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 800656c:	4a5f      	ldr	r2, [pc, #380]	@ (80066ec <HAL_TIM_ConfigClockSource+0x214>)
 800656e:	4293      	cmp	r3, r2
 8006570:	f000 8099 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006574:	4a5d      	ldr	r2, [pc, #372]	@ (80066ec <HAL_TIM_ConfigClockSource+0x214>)
 8006576:	4293      	cmp	r3, r2
 8006578:	f200 809e 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 800657c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006580:	f000 8091 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006584:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006588:	f200 8096 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 800658c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006590:	f000 8089 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006598:	f200 808e 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 800659c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a0:	d03e      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0x148>
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a6:	f200 8087 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ae:	f000 8086 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x1e6>
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b6:	d87f      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 80065b8:	2b70      	cmp	r3, #112	@ 0x70
 80065ba:	d01a      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x11a>
 80065bc:	2b70      	cmp	r3, #112	@ 0x70
 80065be:	d87b      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 80065c0:	2b60      	cmp	r3, #96	@ 0x60
 80065c2:	d050      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x18e>
 80065c4:	2b60      	cmp	r3, #96	@ 0x60
 80065c6:	d877      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 80065c8:	2b50      	cmp	r3, #80	@ 0x50
 80065ca:	d03c      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x16e>
 80065cc:	2b50      	cmp	r3, #80	@ 0x50
 80065ce:	d873      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 80065d0:	2b40      	cmp	r3, #64	@ 0x40
 80065d2:	d058      	beq.n	8006686 <HAL_TIM_ConfigClockSource+0x1ae>
 80065d4:	2b40      	cmp	r3, #64	@ 0x40
 80065d6:	d86f      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 80065d8:	2b30      	cmp	r3, #48	@ 0x30
 80065da:	d064      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 80065dc:	2b30      	cmp	r3, #48	@ 0x30
 80065de:	d86b      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d060      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d867      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d05c      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d05a      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x1ce>
 80065f0:	e062      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006602:	f000 fccf 	bl	8006fa4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	609a      	str	r2, [r3, #8]
      break;
 800661e:	e04f      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006630:	f000 fcb8 	bl	8006fa4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006642:	609a      	str	r2, [r3, #8]
      break;
 8006644:	e03c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	461a      	mov	r2, r3
 8006654:	f000 fc2a 	bl	8006eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2150      	movs	r1, #80	@ 0x50
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fc83 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 8006664:	e02c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006672:	461a      	mov	r2, r3
 8006674:	f000 fc49 	bl	8006f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2160      	movs	r1, #96	@ 0x60
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fc73 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 8006684:	e01c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	461a      	mov	r2, r3
 8006694:	f000 fc0a 	bl	8006eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2140      	movs	r1, #64	@ 0x40
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fc63 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 80066a4:	e00c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f000 fc5a 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 80066b6:	e003      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
      break;
 80066bc:	e000      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80066be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	00100070 	.word	0x00100070
 80066e0:	00100050 	.word	0x00100050
 80066e4:	00100040 	.word	0x00100040
 80066e8:	00100030 	.word	0x00100030
 80066ec:	00100020 	.word	0x00100020

080066f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a4c      	ldr	r2, [pc, #304]	@ (8006834 <TIM_Base_SetConfig+0x144>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d017      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670e:	d013      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a49      	ldr	r2, [pc, #292]	@ (8006838 <TIM_Base_SetConfig+0x148>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00f      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a48      	ldr	r2, [pc, #288]	@ (800683c <TIM_Base_SetConfig+0x14c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00b      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a47      	ldr	r2, [pc, #284]	@ (8006840 <TIM_Base_SetConfig+0x150>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a46      	ldr	r2, [pc, #280]	@ (8006844 <TIM_Base_SetConfig+0x154>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x48>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a45      	ldr	r2, [pc, #276]	@ (8006848 <TIM_Base_SetConfig+0x158>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a39      	ldr	r2, [pc, #228]	@ (8006834 <TIM_Base_SetConfig+0x144>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d023      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006758:	d01f      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a36      	ldr	r2, [pc, #216]	@ (8006838 <TIM_Base_SetConfig+0x148>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01b      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a35      	ldr	r2, [pc, #212]	@ (800683c <TIM_Base_SetConfig+0x14c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d017      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a34      	ldr	r2, [pc, #208]	@ (8006840 <TIM_Base_SetConfig+0x150>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a33      	ldr	r2, [pc, #204]	@ (8006844 <TIM_Base_SetConfig+0x154>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a33      	ldr	r2, [pc, #204]	@ (800684c <TIM_Base_SetConfig+0x15c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a32      	ldr	r2, [pc, #200]	@ (8006850 <TIM_Base_SetConfig+0x160>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a31      	ldr	r2, [pc, #196]	@ (8006854 <TIM_Base_SetConfig+0x164>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0xaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2c      	ldr	r2, [pc, #176]	@ (8006848 <TIM_Base_SetConfig+0x158>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a18      	ldr	r2, [pc, #96]	@ (8006834 <TIM_Base_SetConfig+0x144>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a1a      	ldr	r2, [pc, #104]	@ (8006844 <TIM_Base_SetConfig+0x154>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a1a      	ldr	r2, [pc, #104]	@ (800684c <TIM_Base_SetConfig+0x15c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a19      	ldr	r2, [pc, #100]	@ (8006850 <TIM_Base_SetConfig+0x160>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a18      	ldr	r2, [pc, #96]	@ (8006854 <TIM_Base_SetConfig+0x164>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0x110>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a13      	ldr	r2, [pc, #76]	@ (8006848 <TIM_Base_SetConfig+0x158>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b01      	cmp	r3, #1
 8006818:	d105      	bne.n	8006826 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f023 0201 	bic.w	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	611a      	str	r2, [r3, #16]
  }
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40015000 	.word	0x40015000
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800

08006858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f023 0201 	bic.w	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0302 	bic.w	r3, r3, #2
 80068a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a30      	ldr	r2, [pc, #192]	@ (8006974 <TIM_OC1_SetConfig+0x11c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006978 <TIM_OC1_SetConfig+0x120>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00f      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a2e      	ldr	r2, [pc, #184]	@ (800697c <TIM_OC1_SetConfig+0x124>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00b      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006980 <TIM_OC1_SetConfig+0x128>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006984 <TIM_OC1_SetConfig+0x12c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC1_SetConfig+0x88>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a2b      	ldr	r2, [pc, #172]	@ (8006988 <TIM_OC1_SetConfig+0x130>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10c      	bne.n	80068fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 0308 	bic.w	r3, r3, #8
 80068e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 0304 	bic.w	r3, r3, #4
 80068f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006974 <TIM_OC1_SetConfig+0x11c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1c      	ldr	r2, [pc, #112]	@ (8006978 <TIM_OC1_SetConfig+0x120>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00f      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a1b      	ldr	r2, [pc, #108]	@ (800697c <TIM_OC1_SetConfig+0x124>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1a      	ldr	r2, [pc, #104]	@ (8006980 <TIM_OC1_SetConfig+0x128>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a19      	ldr	r2, [pc, #100]	@ (8006984 <TIM_OC1_SetConfig+0x12c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_OC1_SetConfig+0xd2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a18      	ldr	r2, [pc, #96]	@ (8006988 <TIM_OC1_SetConfig+0x130>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d111      	bne.n	800694e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40013400 	.word	0x40013400
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800
 8006988:	40015000 	.word	0x40015000

0800698c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f023 0210 	bic.w	r2, r3, #16
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0320 	bic.w	r3, r3, #32
 80069da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a2c      	ldr	r2, [pc, #176]	@ (8006a9c <TIM_OC2_SetConfig+0x110>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d007      	beq.n	8006a00 <TIM_OC2_SetConfig+0x74>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a2b      	ldr	r2, [pc, #172]	@ (8006aa0 <TIM_OC2_SetConfig+0x114>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC2_SetConfig+0x74>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa4 <TIM_OC2_SetConfig+0x118>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10d      	bne.n	8006a1c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006a9c <TIM_OC2_SetConfig+0x110>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa0 <TIM_OC2_SetConfig+0x114>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00f      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa8 <TIM_OC2_SetConfig+0x11c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00b      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <TIM_OC2_SetConfig+0x120>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d007      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab0 <TIM_OC2_SetConfig+0x124>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC2_SetConfig+0xc0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a17      	ldr	r2, [pc, #92]	@ (8006aa4 <TIM_OC2_SetConfig+0x118>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d113      	bne.n	8006a74 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	40015000 	.word	0x40015000
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a2b      	ldr	r2, [pc, #172]	@ (8006bc0 <TIM_OC3_SetConfig+0x10c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d007      	beq.n	8006b26 <TIM_OC3_SetConfig+0x72>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc4 <TIM_OC3_SetConfig+0x110>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d003      	beq.n	8006b26 <TIM_OC3_SetConfig+0x72>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a29      	ldr	r2, [pc, #164]	@ (8006bc8 <TIM_OC3_SetConfig+0x114>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10d      	bne.n	8006b42 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc0 <TIM_OC3_SetConfig+0x10c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d013      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc4 <TIM_OC3_SetConfig+0x110>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00f      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a1d      	ldr	r2, [pc, #116]	@ (8006bcc <TIM_OC3_SetConfig+0x118>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00b      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd0 <TIM_OC3_SetConfig+0x11c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d007      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd4 <TIM_OC3_SetConfig+0x120>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d003      	beq.n	8006b72 <TIM_OC3_SetConfig+0xbe>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a16      	ldr	r2, [pc, #88]	@ (8006bc8 <TIM_OC3_SetConfig+0x114>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d113      	bne.n	8006b9a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40015000 	.word	0x40015000
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40014400 	.word	0x40014400
 8006bd4:	40014800 	.word	0x40014800

08006bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	031b      	lsls	r3, r3, #12
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce8 <TIM_OC4_SetConfig+0x110>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_OC4_SetConfig+0x74>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8006cec <TIM_OC4_SetConfig+0x114>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_OC4_SetConfig+0x74>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf0 <TIM_OC4_SetConfig+0x118>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10d      	bne.n	8006c68 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce8 <TIM_OC4_SetConfig+0x110>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d013      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1e      	ldr	r2, [pc, #120]	@ (8006cec <TIM_OC4_SetConfig+0x114>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf4 <TIM_OC4_SetConfig+0x11c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf8 <TIM_OC4_SetConfig+0x120>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cfc <TIM_OC4_SetConfig+0x124>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC4_SetConfig+0xc0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a17      	ldr	r2, [pc, #92]	@ (8006cf0 <TIM_OC4_SetConfig+0x118>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d113      	bne.n	8006cc0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ca6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	019b      	lsls	r3, r3, #6
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40013400 	.word	0x40013400
 8006cf0:	40015000 	.word	0x40015000
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800

08006d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a19      	ldr	r2, [pc, #100]	@ (8006dbc <TIM_OC5_SetConfig+0xbc>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a18      	ldr	r2, [pc, #96]	@ (8006dc0 <TIM_OC5_SetConfig+0xc0>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00f      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a17      	ldr	r2, [pc, #92]	@ (8006dc4 <TIM_OC5_SetConfig+0xc4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00b      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	@ (8006dc8 <TIM_OC5_SetConfig+0xc8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d007      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a15      	ldr	r2, [pc, #84]	@ (8006dcc <TIM_OC5_SetConfig+0xcc>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d003      	beq.n	8006d82 <TIM_OC5_SetConfig+0x82>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a14      	ldr	r2, [pc, #80]	@ (8006dd0 <TIM_OC5_SetConfig+0xd0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d109      	bne.n	8006d96 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	621a      	str	r2, [r3, #32]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40013400 	.word	0x40013400
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40014400 	.word	0x40014400
 8006dcc:	40014800 	.word	0x40014800
 8006dd0:	40015000 	.word	0x40015000

08006dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	051b      	lsls	r3, r3, #20
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8006e94 <TIM_OC6_SetConfig+0xc0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a19      	ldr	r2, [pc, #100]	@ (8006e98 <TIM_OC6_SetConfig+0xc4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00f      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a18      	ldr	r2, [pc, #96]	@ (8006e9c <TIM_OC6_SetConfig+0xc8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a17      	ldr	r2, [pc, #92]	@ (8006ea0 <TIM_OC6_SetConfig+0xcc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a16      	ldr	r2, [pc, #88]	@ (8006ea4 <TIM_OC6_SetConfig+0xd0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC6_SetConfig+0x84>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a15      	ldr	r2, [pc, #84]	@ (8006ea8 <TIM_OC6_SetConfig+0xd4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d109      	bne.n	8006e6c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	029b      	lsls	r3, r3, #10
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40013400 	.word	0x40013400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800
 8006ea8:	40015000 	.word	0x40015000

08006eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f023 0201 	bic.w	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 030a 	bic.w	r3, r3, #10
 8006ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b087      	sub	sp, #28
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	f023 0210 	bic.w	r2, r3, #16
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	031b      	lsls	r3, r3, #12
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f043 0307 	orr.w	r3, r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	609a      	str	r2, [r3, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	021a      	lsls	r2, r3, #8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	609a      	str	r2, [r3, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	43db      	mvns	r3, r3
 8007006:	401a      	ands	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
}
 8007022:	bf00      	nop
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007044:	2302      	movs	r3, #2
 8007046:	e074      	b.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a34      	ldr	r2, [pc, #208]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a33      	ldr	r2, [pc, #204]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a31      	ldr	r2, [pc, #196]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d108      	bne.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800708c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800709e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a21      	ldr	r2, [pc, #132]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c8:	d01d      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1f      	ldr	r2, [pc, #124]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007154 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a15      	ldr	r2, [pc, #84]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a18      	ldr	r2, [pc, #96]	@ (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a11      	ldr	r2, [pc, #68]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d10c      	bne.n	8007120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800710c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4313      	orrs	r3, r2
 8007116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40013400 	.word	0x40013400
 8007148:	40015000 	.word	0x40015000
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40014000 	.word	0x40014000

0800715c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e042      	b.n	80071f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007174:	2b00      	cmp	r3, #0
 8007176:	d106      	bne.n	8007186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7fd f8fb 	bl	800437c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2224      	movs	r2, #36	@ 0x24
 800718a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0201 	bic.w	r2, r2, #1
 800719c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fc7a 	bl	8007aa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f97b 	bl	80074a8 <UART_SetConfig>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e01b      	b.n	80071f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fcf9 	bl	8007be4 <UART_CheckIdleState>
 80071f2:	4603      	mov	r3, r0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	@ 0x28
 8007200:	af02      	add	r7, sp, #8
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007212:	2b20      	cmp	r3, #32
 8007214:	d17b      	bne.n	800730e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_UART_Transmit+0x26>
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e074      	b.n	8007310 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2221      	movs	r2, #33	@ 0x21
 8007232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007236:	f7fd f9c7 	bl	80045c8 <HAL_GetTick>
 800723a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007254:	d108      	bne.n	8007268 <HAL_UART_Transmit+0x6c>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d104      	bne.n	8007268 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	e003      	b.n	8007270 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800726c:	2300      	movs	r3, #0
 800726e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007270:	e030      	b.n	80072d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2200      	movs	r2, #0
 800727a:	2180      	movs	r1, #128	@ 0x80
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fd5b 	bl	8007d38 <UART_WaitOnFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2220      	movs	r2, #32
 800728c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e03d      	b.n	8007310 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	3302      	adds	r3, #2
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e007      	b.n	80072c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1c8      	bne.n	8007272 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	2140      	movs	r1, #64	@ 0x40
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fd24 	bl	8007d38 <UART_WaitOnFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e006      	b.n	8007310 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	e000      	b.n	8007310 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800730e:	2302      	movs	r3, #2
  }
}
 8007310:	4618      	mov	r0, r3
 8007312:	3720      	adds	r7, #32
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	@ 0x28
 800731c:	af02      	add	r7, sp, #8
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800732e:	2b20      	cmp	r3, #32
 8007330:	f040 80b5 	bne.w	800749e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <HAL_UART_Receive+0x28>
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0ad      	b.n	80074a0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2222      	movs	r2, #34	@ 0x22
 8007350:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800735a:	f7fd f935 	bl	80045c8 <HAL_GetTick>
 800735e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	88fa      	ldrh	r2, [r7, #6]
 8007364:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	88fa      	ldrh	r2, [r7, #6]
 800736c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007378:	d10e      	bne.n	8007398 <HAL_UART_Receive+0x80>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d105      	bne.n	800738e <HAL_UART_Receive+0x76>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800738c:	e02d      	b.n	80073ea <HAL_UART_Receive+0xd2>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	22ff      	movs	r2, #255	@ 0xff
 8007392:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007396:	e028      	b.n	80073ea <HAL_UART_Receive+0xd2>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10d      	bne.n	80073bc <HAL_UART_Receive+0xa4>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <HAL_UART_Receive+0x9a>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	22ff      	movs	r2, #255	@ 0xff
 80073ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073b0:	e01b      	b.n	80073ea <HAL_UART_Receive+0xd2>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	227f      	movs	r2, #127	@ 0x7f
 80073b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073ba:	e016      	b.n	80073ea <HAL_UART_Receive+0xd2>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073c4:	d10d      	bne.n	80073e2 <HAL_UART_Receive+0xca>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <HAL_UART_Receive+0xc0>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	227f      	movs	r2, #127	@ 0x7f
 80073d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073d6:	e008      	b.n	80073ea <HAL_UART_Receive+0xd2>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	223f      	movs	r2, #63	@ 0x3f
 80073dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073e0:	e003      	b.n	80073ea <HAL_UART_Receive+0xd2>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fa:	d108      	bne.n	800740e <HAL_UART_Receive+0xf6>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e003      	b.n	8007416 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007416:	e036      	b.n	8007486 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	2120      	movs	r1, #32
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fc88 	bl	8007d38 <UART_WaitOnFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e032      	b.n	80074a0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10c      	bne.n	800745a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007446:	b29a      	uxth	r2, r3
 8007448:	8a7b      	ldrh	r3, [r7, #18]
 800744a:	4013      	ands	r3, r2
 800744c:	b29a      	uxth	r2, r3
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	3302      	adds	r3, #2
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	e00c      	b.n	8007474 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007460:	b2da      	uxtb	r2, r3
 8007462:	8a7b      	ldrh	r3, [r7, #18]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	4013      	ands	r3, r2
 8007468:	b2da      	uxtb	r2, r3
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	3301      	adds	r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1c2      	bne.n	8007418 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	e000      	b.n	80074a0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800749e:	2302      	movs	r3, #2
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074ac:	b08c      	sub	sp, #48	@ 0x30
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	431a      	orrs	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4baa      	ldr	r3, [pc, #680]	@ (8007780 <UART_SetConfig+0x2d8>)
 80074d8:	4013      	ands	r3, r2
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074e0:	430b      	orrs	r3, r1
 80074e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a9f      	ldr	r2, [pc, #636]	@ (8007784 <UART_SetConfig+0x2dc>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007510:	4313      	orrs	r3, r2
 8007512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800751e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	6812      	ldr	r2, [r2, #0]
 8007526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007528:	430b      	orrs	r3, r1
 800752a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	f023 010f 	bic.w	r1, r3, #15
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a90      	ldr	r2, [pc, #576]	@ (8007788 <UART_SetConfig+0x2e0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d125      	bne.n	8007598 <UART_SetConfig+0xf0>
 800754c:	4b8f      	ldr	r3, [pc, #572]	@ (800778c <UART_SetConfig+0x2e4>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	2b03      	cmp	r3, #3
 8007558:	d81a      	bhi.n	8007590 <UART_SetConfig+0xe8>
 800755a:	a201      	add	r2, pc, #4	@ (adr r2, 8007560 <UART_SetConfig+0xb8>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007571 	.word	0x08007571
 8007564:	08007581 	.word	0x08007581
 8007568:	08007579 	.word	0x08007579
 800756c:	08007589 	.word	0x08007589
 8007570:	2301      	movs	r3, #1
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007576:	e116      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007578:	2302      	movs	r3, #2
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757e:	e112      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007580:	2304      	movs	r3, #4
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007586:	e10e      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007588:	2308      	movs	r3, #8
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758e:	e10a      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007590:	2310      	movs	r3, #16
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007596:	e106      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a7c      	ldr	r2, [pc, #496]	@ (8007790 <UART_SetConfig+0x2e8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d138      	bne.n	8007614 <UART_SetConfig+0x16c>
 80075a2:	4b7a      	ldr	r3, [pc, #488]	@ (800778c <UART_SetConfig+0x2e4>)
 80075a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a8:	f003 030c 	and.w	r3, r3, #12
 80075ac:	2b0c      	cmp	r3, #12
 80075ae:	d82d      	bhi.n	800760c <UART_SetConfig+0x164>
 80075b0:	a201      	add	r2, pc, #4	@ (adr r2, 80075b8 <UART_SetConfig+0x110>)
 80075b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b6:	bf00      	nop
 80075b8:	080075ed 	.word	0x080075ed
 80075bc:	0800760d 	.word	0x0800760d
 80075c0:	0800760d 	.word	0x0800760d
 80075c4:	0800760d 	.word	0x0800760d
 80075c8:	080075fd 	.word	0x080075fd
 80075cc:	0800760d 	.word	0x0800760d
 80075d0:	0800760d 	.word	0x0800760d
 80075d4:	0800760d 	.word	0x0800760d
 80075d8:	080075f5 	.word	0x080075f5
 80075dc:	0800760d 	.word	0x0800760d
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	0800760d 	.word	0x0800760d
 80075e8:	08007605 	.word	0x08007605
 80075ec:	2300      	movs	r3, #0
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e0d8      	b.n	80077a6 <UART_SetConfig+0x2fe>
 80075f4:	2302      	movs	r3, #2
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	e0d4      	b.n	80077a6 <UART_SetConfig+0x2fe>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007602:	e0d0      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800760a:	e0cc      	b.n	80077a6 <UART_SetConfig+0x2fe>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007612:	e0c8      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a5e      	ldr	r2, [pc, #376]	@ (8007794 <UART_SetConfig+0x2ec>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d125      	bne.n	800766a <UART_SetConfig+0x1c2>
 800761e:	4b5b      	ldr	r3, [pc, #364]	@ (800778c <UART_SetConfig+0x2e4>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007628:	2b30      	cmp	r3, #48	@ 0x30
 800762a:	d016      	beq.n	800765a <UART_SetConfig+0x1b2>
 800762c:	2b30      	cmp	r3, #48	@ 0x30
 800762e:	d818      	bhi.n	8007662 <UART_SetConfig+0x1ba>
 8007630:	2b20      	cmp	r3, #32
 8007632:	d00a      	beq.n	800764a <UART_SetConfig+0x1a2>
 8007634:	2b20      	cmp	r3, #32
 8007636:	d814      	bhi.n	8007662 <UART_SetConfig+0x1ba>
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <UART_SetConfig+0x19a>
 800763c:	2b10      	cmp	r3, #16
 800763e:	d008      	beq.n	8007652 <UART_SetConfig+0x1aa>
 8007640:	e00f      	b.n	8007662 <UART_SetConfig+0x1ba>
 8007642:	2300      	movs	r3, #0
 8007644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007648:	e0ad      	b.n	80077a6 <UART_SetConfig+0x2fe>
 800764a:	2302      	movs	r3, #2
 800764c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007650:	e0a9      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007652:	2304      	movs	r3, #4
 8007654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007658:	e0a5      	b.n	80077a6 <UART_SetConfig+0x2fe>
 800765a:	2308      	movs	r3, #8
 800765c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007660:	e0a1      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007662:	2310      	movs	r3, #16
 8007664:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007668:	e09d      	b.n	80077a6 <UART_SetConfig+0x2fe>
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a4a      	ldr	r2, [pc, #296]	@ (8007798 <UART_SetConfig+0x2f0>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d125      	bne.n	80076c0 <UART_SetConfig+0x218>
 8007674:	4b45      	ldr	r3, [pc, #276]	@ (800778c <UART_SetConfig+0x2e4>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800767e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007680:	d016      	beq.n	80076b0 <UART_SetConfig+0x208>
 8007682:	2bc0      	cmp	r3, #192	@ 0xc0
 8007684:	d818      	bhi.n	80076b8 <UART_SetConfig+0x210>
 8007686:	2b80      	cmp	r3, #128	@ 0x80
 8007688:	d00a      	beq.n	80076a0 <UART_SetConfig+0x1f8>
 800768a:	2b80      	cmp	r3, #128	@ 0x80
 800768c:	d814      	bhi.n	80076b8 <UART_SetConfig+0x210>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <UART_SetConfig+0x1f0>
 8007692:	2b40      	cmp	r3, #64	@ 0x40
 8007694:	d008      	beq.n	80076a8 <UART_SetConfig+0x200>
 8007696:	e00f      	b.n	80076b8 <UART_SetConfig+0x210>
 8007698:	2300      	movs	r3, #0
 800769a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769e:	e082      	b.n	80077a6 <UART_SetConfig+0x2fe>
 80076a0:	2302      	movs	r3, #2
 80076a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a6:	e07e      	b.n	80077a6 <UART_SetConfig+0x2fe>
 80076a8:	2304      	movs	r3, #4
 80076aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ae:	e07a      	b.n	80077a6 <UART_SetConfig+0x2fe>
 80076b0:	2308      	movs	r3, #8
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b6:	e076      	b.n	80077a6 <UART_SetConfig+0x2fe>
 80076b8:	2310      	movs	r3, #16
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076be:	e072      	b.n	80077a6 <UART_SetConfig+0x2fe>
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a35      	ldr	r2, [pc, #212]	@ (800779c <UART_SetConfig+0x2f4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d12a      	bne.n	8007720 <UART_SetConfig+0x278>
 80076ca:	4b30      	ldr	r3, [pc, #192]	@ (800778c <UART_SetConfig+0x2e4>)
 80076cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076d8:	d01a      	beq.n	8007710 <UART_SetConfig+0x268>
 80076da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076de:	d81b      	bhi.n	8007718 <UART_SetConfig+0x270>
 80076e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076e4:	d00c      	beq.n	8007700 <UART_SetConfig+0x258>
 80076e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ea:	d815      	bhi.n	8007718 <UART_SetConfig+0x270>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <UART_SetConfig+0x250>
 80076f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076f4:	d008      	beq.n	8007708 <UART_SetConfig+0x260>
 80076f6:	e00f      	b.n	8007718 <UART_SetConfig+0x270>
 80076f8:	2300      	movs	r3, #0
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fe:	e052      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007700:	2302      	movs	r3, #2
 8007702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007706:	e04e      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770e:	e04a      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007716:	e046      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771e:	e042      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a17      	ldr	r2, [pc, #92]	@ (8007784 <UART_SetConfig+0x2dc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d13a      	bne.n	80077a0 <UART_SetConfig+0x2f8>
 800772a:	4b18      	ldr	r3, [pc, #96]	@ (800778c <UART_SetConfig+0x2e4>)
 800772c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007730:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007734:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007738:	d01a      	beq.n	8007770 <UART_SetConfig+0x2c8>
 800773a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800773e:	d81b      	bhi.n	8007778 <UART_SetConfig+0x2d0>
 8007740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007744:	d00c      	beq.n	8007760 <UART_SetConfig+0x2b8>
 8007746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800774a:	d815      	bhi.n	8007778 <UART_SetConfig+0x2d0>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <UART_SetConfig+0x2b0>
 8007750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007754:	d008      	beq.n	8007768 <UART_SetConfig+0x2c0>
 8007756:	e00f      	b.n	8007778 <UART_SetConfig+0x2d0>
 8007758:	2300      	movs	r3, #0
 800775a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800775e:	e022      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007760:	2302      	movs	r3, #2
 8007762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007766:	e01e      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007768:	2304      	movs	r3, #4
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800776e:	e01a      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007770:	2308      	movs	r3, #8
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007776:	e016      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007778:	2310      	movs	r3, #16
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777e:	e012      	b.n	80077a6 <UART_SetConfig+0x2fe>
 8007780:	cfff69f3 	.word	0xcfff69f3
 8007784:	40008000 	.word	0x40008000
 8007788:	40013800 	.word	0x40013800
 800778c:	40021000 	.word	0x40021000
 8007790:	40004400 	.word	0x40004400
 8007794:	40004800 	.word	0x40004800
 8007798:	40004c00 	.word	0x40004c00
 800779c:	40005000 	.word	0x40005000
 80077a0:	2310      	movs	r3, #16
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4aae      	ldr	r2, [pc, #696]	@ (8007a64 <UART_SetConfig+0x5bc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	f040 8097 	bne.w	80078e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	d823      	bhi.n	8007802 <UART_SetConfig+0x35a>
 80077ba:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <UART_SetConfig+0x318>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	08007803 	.word	0x08007803
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	08007803 	.word	0x08007803
 80077d0:	080077f3 	.word	0x080077f3
 80077d4:	08007803 	.word	0x08007803
 80077d8:	08007803 	.word	0x08007803
 80077dc:	08007803 	.word	0x08007803
 80077e0:	080077fb 	.word	0x080077fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077e4:	f7fd ff0c 	bl	8005600 <HAL_RCC_GetPCLK1Freq>
 80077e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077ea:	e010      	b.n	800780e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ec:	4b9e      	ldr	r3, [pc, #632]	@ (8007a68 <UART_SetConfig+0x5c0>)
 80077ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077f0:	e00d      	b.n	800780e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fd fe97 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 80077f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077f8:	e009      	b.n	800780e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007800:	e005      	b.n	800780e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800780c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8130 	beq.w	8007a76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	4a94      	ldr	r2, [pc, #592]	@ (8007a6c <UART_SetConfig+0x5c4>)
 800781c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007820:	461a      	mov	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	fbb3 f3f2 	udiv	r3, r3, r2
 8007828:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	4413      	add	r3, r2
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	429a      	cmp	r2, r3
 8007838:	d305      	bcc.n	8007846 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	429a      	cmp	r2, r3
 8007844:	d903      	bls.n	800784e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800784c:	e113      	b.n	8007a76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	2200      	movs	r2, #0
 8007852:	60bb      	str	r3, [r7, #8]
 8007854:	60fa      	str	r2, [r7, #12]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785a:	4a84      	ldr	r2, [pc, #528]	@ (8007a6c <UART_SetConfig+0x5c4>)
 800785c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007860:	b29b      	uxth	r3, r3
 8007862:	2200      	movs	r2, #0
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800786c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007870:	f7f9 fa32 	bl	8000cd8 <__aeabi_uldivmod>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4610      	mov	r0, r2
 800787a:	4619      	mov	r1, r3
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	020b      	lsls	r3, r1, #8
 8007886:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800788a:	0202      	lsls	r2, r0, #8
 800788c:	6979      	ldr	r1, [r7, #20]
 800788e:	6849      	ldr	r1, [r1, #4]
 8007890:	0849      	lsrs	r1, r1, #1
 8007892:	2000      	movs	r0, #0
 8007894:	460c      	mov	r4, r1
 8007896:	4605      	mov	r5, r0
 8007898:	eb12 0804 	adds.w	r8, r2, r4
 800789c:	eb43 0905 	adc.w	r9, r3, r5
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	469a      	mov	sl, r3
 80078a8:	4693      	mov	fp, r2
 80078aa:	4652      	mov	r2, sl
 80078ac:	465b      	mov	r3, fp
 80078ae:	4640      	mov	r0, r8
 80078b0:	4649      	mov	r1, r9
 80078b2:	f7f9 fa11 	bl	8000cd8 <__aeabi_uldivmod>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4613      	mov	r3, r2
 80078bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078c4:	d308      	bcc.n	80078d8 <UART_SetConfig+0x430>
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078cc:	d204      	bcs.n	80078d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6a3a      	ldr	r2, [r7, #32]
 80078d4:	60da      	str	r2, [r3, #12]
 80078d6:	e0ce      	b.n	8007a76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078de:	e0ca      	b.n	8007a76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078e8:	d166      	bne.n	80079b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80078ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	d827      	bhi.n	8007942 <UART_SetConfig+0x49a>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <UART_SetConfig+0x450>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	0800791d 	.word	0x0800791d
 80078fc:	08007925 	.word	0x08007925
 8007900:	0800792d 	.word	0x0800792d
 8007904:	08007943 	.word	0x08007943
 8007908:	08007933 	.word	0x08007933
 800790c:	08007943 	.word	0x08007943
 8007910:	08007943 	.word	0x08007943
 8007914:	08007943 	.word	0x08007943
 8007918:	0800793b 	.word	0x0800793b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800791c:	f7fd fe70 	bl	8005600 <HAL_RCC_GetPCLK1Freq>
 8007920:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007922:	e014      	b.n	800794e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007924:	f7fd fe82 	bl	800562c <HAL_RCC_GetPCLK2Freq>
 8007928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800792a:	e010      	b.n	800794e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800792c:	4b4e      	ldr	r3, [pc, #312]	@ (8007a68 <UART_SetConfig+0x5c0>)
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007930:	e00d      	b.n	800794e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007932:	f7fd fdf7 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 8007936:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007938:	e009      	b.n	800794e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007940:	e005      	b.n	800794e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800794c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8090 	beq.w	8007a76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795a:	4a44      	ldr	r2, [pc, #272]	@ (8007a6c <UART_SetConfig+0x5c4>)
 800795c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007960:	461a      	mov	r2, r3
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	fbb3 f3f2 	udiv	r3, r3, r2
 8007968:	005a      	lsls	r2, r3, #1
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	441a      	add	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	fbb2 f3f3 	udiv	r3, r2, r3
 800797a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	2b0f      	cmp	r3, #15
 8007980:	d916      	bls.n	80079b0 <UART_SetConfig+0x508>
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007988:	d212      	bcs.n	80079b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f023 030f 	bic.w	r3, r3, #15
 8007992:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	085b      	lsrs	r3, r3, #1
 8007998:	b29b      	uxth	r3, r3
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	b29a      	uxth	r2, r3
 80079a0:	8bfb      	ldrh	r3, [r7, #30]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	8bfa      	ldrh	r2, [r7, #30]
 80079ac:	60da      	str	r2, [r3, #12]
 80079ae:	e062      	b.n	8007a76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079b6:	e05e      	b.n	8007a76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d828      	bhi.n	8007a12 <UART_SetConfig+0x56a>
 80079c0:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x520>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079ed 	.word	0x080079ed
 80079cc:	080079f5 	.word	0x080079f5
 80079d0:	080079fd 	.word	0x080079fd
 80079d4:	08007a13 	.word	0x08007a13
 80079d8:	08007a03 	.word	0x08007a03
 80079dc:	08007a13 	.word	0x08007a13
 80079e0:	08007a13 	.word	0x08007a13
 80079e4:	08007a13 	.word	0x08007a13
 80079e8:	08007a0b 	.word	0x08007a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ec:	f7fd fe08 	bl	8005600 <HAL_RCC_GetPCLK1Freq>
 80079f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079f2:	e014      	b.n	8007a1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f4:	f7fd fe1a 	bl	800562c <HAL_RCC_GetPCLK2Freq>
 80079f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079fa:	e010      	b.n	8007a1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a68 <UART_SetConfig+0x5c0>)
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a00:	e00d      	b.n	8007a1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a02:	f7fd fd8f 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 8007a06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a08:	e009      	b.n	8007a1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a10:	e005      	b.n	8007a1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d028      	beq.n	8007a76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	4a10      	ldr	r2, [pc, #64]	@ (8007a6c <UART_SetConfig+0x5c4>)
 8007a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	441a      	add	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	2b0f      	cmp	r3, #15
 8007a4c:	d910      	bls.n	8007a70 <UART_SetConfig+0x5c8>
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a54:	d20c      	bcs.n	8007a70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60da      	str	r2, [r3, #12]
 8007a60:	e009      	b.n	8007a76 <UART_SetConfig+0x5ce>
 8007a62:	bf00      	nop
 8007a64:	40008000 	.word	0x40008000
 8007a68:	00f42400 	.word	0x00f42400
 8007a6c:	08009ba8 	.word	0x08009ba8
      }
      else
      {
        ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3730      	adds	r7, #48	@ 0x30
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01a      	beq.n	8007bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b9e:	d10a      	bne.n	8007bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	605a      	str	r2, [r3, #4]
  }
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b098      	sub	sp, #96	@ 0x60
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bf4:	f7fc fce8 	bl	80045c8 <HAL_GetTick>
 8007bf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d12f      	bne.n	8007c68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c10:	2200      	movs	r2, #0
 8007c12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f88e 	bl	8007d38 <UART_WaitOnFlagUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d022      	beq.n	8007c68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e063      	b.n	8007d30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d149      	bne.n	8007d0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f857 	bl	8007d38 <UART_WaitOnFlagUntilTimeout>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d03c      	beq.n	8007d0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e6      	bne.n	8007c90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ce2:	61fa      	str	r2, [r7, #28]
 8007ce4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	69b9      	ldr	r1, [r7, #24]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e5      	bne.n	8007cc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e012      	b.n	8007d30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3758      	adds	r7, #88	@ 0x58
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d48:	e04f      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d50:	d04b      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d52:	f7fc fc39 	bl	80045c8 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d302      	bcc.n	8007d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e04e      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0304 	and.w	r3, r3, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d037      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b80      	cmp	r3, #128	@ 0x80
 8007d7e:	d034      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b40      	cmp	r3, #64	@ 0x40
 8007d84:	d031      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d110      	bne.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2208      	movs	r2, #8
 8007d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f838 	bl	8007e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2208      	movs	r2, #8
 8007da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e029      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dc4:	d111      	bne.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f81e 	bl	8007e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e00f      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69da      	ldr	r2, [r3, #28]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4013      	ands	r3, r2
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	bf0c      	ite	eq
 8007dfa:	2301      	moveq	r3, #1
 8007dfc:	2300      	movne	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d0a0      	beq.n	8007d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b095      	sub	sp, #84	@ 0x54
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e6      	bne.n	8007e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e62:	f023 0301 	bic.w	r3, r3, #1
 8007e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e3      	bne.n	8007e4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d118      	bne.n	8007ebe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f023 0310 	bic.w	r3, r3, #16
 8007ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eaa:	61bb      	str	r3, [r7, #24]
 8007eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6979      	ldr	r1, [r7, #20]
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e6      	bne.n	8007e8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ed2:	bf00      	nop
 8007ed4:	3754      	adds	r7, #84	@ 0x54
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e027      	b.n	8007f44 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2224      	movs	r2, #36	@ 0x24
 8007f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0201 	bic.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e02d      	b.n	8007fc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2224      	movs	r2, #36	@ 0x24
 8007f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0201 	bic.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f84f 	bl	8008048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e02d      	b.n	8008040 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2224      	movs	r2, #36	@ 0x24
 8007ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0201 	bic.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f811 	bl	8008048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008054:	2b00      	cmp	r3, #0
 8008056:	d108      	bne.n	800806a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008068:	e031      	b.n	80080ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800806a:	2308      	movs	r3, #8
 800806c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800806e:	2308      	movs	r3, #8
 8008070:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	0e5b      	lsrs	r3, r3, #25
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	0f5b      	lsrs	r3, r3, #29
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	7b3a      	ldrb	r2, [r7, #12]
 8008096:	4911      	ldr	r1, [pc, #68]	@ (80080dc <UARTEx_SetNbDataToProcess+0x94>)
 8008098:	5c8a      	ldrb	r2, [r1, r2]
 800809a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800809e:	7b3a      	ldrb	r2, [r7, #12]
 80080a0:	490f      	ldr	r1, [pc, #60]	@ (80080e0 <UARTEx_SetNbDataToProcess+0x98>)
 80080a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	7b7a      	ldrb	r2, [r7, #13]
 80080b4:	4909      	ldr	r1, [pc, #36]	@ (80080dc <UARTEx_SetNbDataToProcess+0x94>)
 80080b6:	5c8a      	ldrb	r2, [r1, r2]
 80080b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080bc:	7b7a      	ldrb	r2, [r7, #13]
 80080be:	4908      	ldr	r1, [pc, #32]	@ (80080e0 <UARTEx_SetNbDataToProcess+0x98>)
 80080c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080ce:	bf00      	nop
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	08009bc0 	.word	0x08009bc0
 80080e0:	08009bc8 	.word	0x08009bc8

080080e4 <siscanf>:
 80080e4:	b40e      	push	{r1, r2, r3}
 80080e6:	b530      	push	{r4, r5, lr}
 80080e8:	b09c      	sub	sp, #112	@ 0x70
 80080ea:	ac1f      	add	r4, sp, #124	@ 0x7c
 80080ec:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80080f0:	f854 5b04 	ldr.w	r5, [r4], #4
 80080f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80080f8:	9002      	str	r0, [sp, #8]
 80080fa:	9006      	str	r0, [sp, #24]
 80080fc:	f7f8 f890 	bl	8000220 <strlen>
 8008100:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <siscanf+0x4c>)
 8008102:	9003      	str	r0, [sp, #12]
 8008104:	9007      	str	r0, [sp, #28]
 8008106:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008108:	480a      	ldr	r0, [pc, #40]	@ (8008134 <siscanf+0x50>)
 800810a:	9401      	str	r4, [sp, #4]
 800810c:	2300      	movs	r3, #0
 800810e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008110:	9314      	str	r3, [sp, #80]	@ 0x50
 8008112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008116:	f8ad 3016 	strh.w	r3, [sp, #22]
 800811a:	462a      	mov	r2, r5
 800811c:	4623      	mov	r3, r4
 800811e:	a902      	add	r1, sp, #8
 8008120:	6800      	ldr	r0, [r0, #0]
 8008122:	f000 fb13 	bl	800874c <__ssvfiscanf_r>
 8008126:	b01c      	add	sp, #112	@ 0x70
 8008128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800812c:	b003      	add	sp, #12
 800812e:	4770      	bx	lr
 8008130:	0800815b 	.word	0x0800815b
 8008134:	2000009c 	.word	0x2000009c

08008138 <__sread>:
 8008138:	b510      	push	{r4, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008140:	f000 fa10 	bl	8008564 <_read_r>
 8008144:	2800      	cmp	r0, #0
 8008146:	bfab      	itete	ge
 8008148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800814a:	89a3      	ldrhlt	r3, [r4, #12]
 800814c:	181b      	addge	r3, r3, r0
 800814e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008152:	bfac      	ite	ge
 8008154:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008156:	81a3      	strhlt	r3, [r4, #12]
 8008158:	bd10      	pop	{r4, pc}

0800815a <__seofread>:
 800815a:	2000      	movs	r0, #0
 800815c:	4770      	bx	lr

0800815e <__swrite>:
 800815e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008162:	461f      	mov	r7, r3
 8008164:	898b      	ldrh	r3, [r1, #12]
 8008166:	05db      	lsls	r3, r3, #23
 8008168:	4605      	mov	r5, r0
 800816a:	460c      	mov	r4, r1
 800816c:	4616      	mov	r6, r2
 800816e:	d505      	bpl.n	800817c <__swrite+0x1e>
 8008170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008174:	2302      	movs	r3, #2
 8008176:	2200      	movs	r2, #0
 8008178:	f000 f9e2 	bl	8008540 <_lseek_r>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	4632      	mov	r2, r6
 800818a:	463b      	mov	r3, r7
 800818c:	4628      	mov	r0, r5
 800818e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	f000 b9f9 	b.w	8008588 <_write_r>

08008196 <__sseek>:
 8008196:	b510      	push	{r4, lr}
 8008198:	460c      	mov	r4, r1
 800819a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819e:	f000 f9cf 	bl	8008540 <_lseek_r>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	bf15      	itete	ne
 80081a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081b2:	81a3      	strheq	r3, [r4, #12]
 80081b4:	bf18      	it	ne
 80081b6:	81a3      	strhne	r3, [r4, #12]
 80081b8:	bd10      	pop	{r4, pc}

080081ba <__sclose>:
 80081ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081be:	f000 b9af 	b.w	8008520 <_close_r>
	...

080081c4 <std>:
 80081c4:	2300      	movs	r3, #0
 80081c6:	b510      	push	{r4, lr}
 80081c8:	4604      	mov	r4, r0
 80081ca:	e9c0 3300 	strd	r3, r3, [r0]
 80081ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081d2:	6083      	str	r3, [r0, #8]
 80081d4:	8181      	strh	r1, [r0, #12]
 80081d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80081d8:	81c2      	strh	r2, [r0, #14]
 80081da:	6183      	str	r3, [r0, #24]
 80081dc:	4619      	mov	r1, r3
 80081de:	2208      	movs	r2, #8
 80081e0:	305c      	adds	r0, #92	@ 0x5c
 80081e2:	f000 f995 	bl	8008510 <memset>
 80081e6:	4b0d      	ldr	r3, [pc, #52]	@ (800821c <std+0x58>)
 80081e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80081ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008220 <std+0x5c>)
 80081ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <std+0x60>)
 80081f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008228 <std+0x64>)
 80081f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80081f6:	4b0d      	ldr	r3, [pc, #52]	@ (800822c <std+0x68>)
 80081f8:	6224      	str	r4, [r4, #32]
 80081fa:	429c      	cmp	r4, r3
 80081fc:	d006      	beq.n	800820c <std+0x48>
 80081fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008202:	4294      	cmp	r4, r2
 8008204:	d002      	beq.n	800820c <std+0x48>
 8008206:	33d0      	adds	r3, #208	@ 0xd0
 8008208:	429c      	cmp	r4, r3
 800820a:	d105      	bne.n	8008218 <std+0x54>
 800820c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008214:	f000 b9f4 	b.w	8008600 <__retarget_lock_init_recursive>
 8008218:	bd10      	pop	{r4, pc}
 800821a:	bf00      	nop
 800821c:	08008139 	.word	0x08008139
 8008220:	0800815f 	.word	0x0800815f
 8008224:	08008197 	.word	0x08008197
 8008228:	080081bb 	.word	0x080081bb
 800822c:	20000468 	.word	0x20000468

08008230 <stdio_exit_handler>:
 8008230:	4a02      	ldr	r2, [pc, #8]	@ (800823c <stdio_exit_handler+0xc>)
 8008232:	4903      	ldr	r1, [pc, #12]	@ (8008240 <stdio_exit_handler+0x10>)
 8008234:	4803      	ldr	r0, [pc, #12]	@ (8008244 <stdio_exit_handler+0x14>)
 8008236:	f000 b8ef 	b.w	8008418 <_fwalk_sglue>
 800823a:	bf00      	nop
 800823c:	20000090 	.word	0x20000090
 8008240:	08008f91 	.word	0x08008f91
 8008244:	200000a0 	.word	0x200000a0

08008248 <cleanup_stdio>:
 8008248:	6841      	ldr	r1, [r0, #4]
 800824a:	4b0c      	ldr	r3, [pc, #48]	@ (800827c <cleanup_stdio+0x34>)
 800824c:	4299      	cmp	r1, r3
 800824e:	b510      	push	{r4, lr}
 8008250:	4604      	mov	r4, r0
 8008252:	d001      	beq.n	8008258 <cleanup_stdio+0x10>
 8008254:	f000 fe9c 	bl	8008f90 <_fflush_r>
 8008258:	68a1      	ldr	r1, [r4, #8]
 800825a:	4b09      	ldr	r3, [pc, #36]	@ (8008280 <cleanup_stdio+0x38>)
 800825c:	4299      	cmp	r1, r3
 800825e:	d002      	beq.n	8008266 <cleanup_stdio+0x1e>
 8008260:	4620      	mov	r0, r4
 8008262:	f000 fe95 	bl	8008f90 <_fflush_r>
 8008266:	68e1      	ldr	r1, [r4, #12]
 8008268:	4b06      	ldr	r3, [pc, #24]	@ (8008284 <cleanup_stdio+0x3c>)
 800826a:	4299      	cmp	r1, r3
 800826c:	d004      	beq.n	8008278 <cleanup_stdio+0x30>
 800826e:	4620      	mov	r0, r4
 8008270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008274:	f000 be8c 	b.w	8008f90 <_fflush_r>
 8008278:	bd10      	pop	{r4, pc}
 800827a:	bf00      	nop
 800827c:	20000468 	.word	0x20000468
 8008280:	200004d0 	.word	0x200004d0
 8008284:	20000538 	.word	0x20000538

08008288 <global_stdio_init.part.0>:
 8008288:	b510      	push	{r4, lr}
 800828a:	4b0b      	ldr	r3, [pc, #44]	@ (80082b8 <global_stdio_init.part.0+0x30>)
 800828c:	4c0b      	ldr	r4, [pc, #44]	@ (80082bc <global_stdio_init.part.0+0x34>)
 800828e:	4a0c      	ldr	r2, [pc, #48]	@ (80082c0 <global_stdio_init.part.0+0x38>)
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	4620      	mov	r0, r4
 8008294:	2200      	movs	r2, #0
 8008296:	2104      	movs	r1, #4
 8008298:	f7ff ff94 	bl	80081c4 <std>
 800829c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082a0:	2201      	movs	r2, #1
 80082a2:	2109      	movs	r1, #9
 80082a4:	f7ff ff8e 	bl	80081c4 <std>
 80082a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082ac:	2202      	movs	r2, #2
 80082ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b2:	2112      	movs	r1, #18
 80082b4:	f7ff bf86 	b.w	80081c4 <std>
 80082b8:	200005a0 	.word	0x200005a0
 80082bc:	20000468 	.word	0x20000468
 80082c0:	08008231 	.word	0x08008231

080082c4 <__sfp_lock_acquire>:
 80082c4:	4801      	ldr	r0, [pc, #4]	@ (80082cc <__sfp_lock_acquire+0x8>)
 80082c6:	f000 b99c 	b.w	8008602 <__retarget_lock_acquire_recursive>
 80082ca:	bf00      	nop
 80082cc:	200005a9 	.word	0x200005a9

080082d0 <__sfp_lock_release>:
 80082d0:	4801      	ldr	r0, [pc, #4]	@ (80082d8 <__sfp_lock_release+0x8>)
 80082d2:	f000 b997 	b.w	8008604 <__retarget_lock_release_recursive>
 80082d6:	bf00      	nop
 80082d8:	200005a9 	.word	0x200005a9

080082dc <__sinit>:
 80082dc:	b510      	push	{r4, lr}
 80082de:	4604      	mov	r4, r0
 80082e0:	f7ff fff0 	bl	80082c4 <__sfp_lock_acquire>
 80082e4:	6a23      	ldr	r3, [r4, #32]
 80082e6:	b11b      	cbz	r3, 80082f0 <__sinit+0x14>
 80082e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ec:	f7ff bff0 	b.w	80082d0 <__sfp_lock_release>
 80082f0:	4b04      	ldr	r3, [pc, #16]	@ (8008304 <__sinit+0x28>)
 80082f2:	6223      	str	r3, [r4, #32]
 80082f4:	4b04      	ldr	r3, [pc, #16]	@ (8008308 <__sinit+0x2c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f5      	bne.n	80082e8 <__sinit+0xc>
 80082fc:	f7ff ffc4 	bl	8008288 <global_stdio_init.part.0>
 8008300:	e7f2      	b.n	80082e8 <__sinit+0xc>
 8008302:	bf00      	nop
 8008304:	08008249 	.word	0x08008249
 8008308:	200005a0 	.word	0x200005a0

0800830c <_strtol_l.constprop.0>:
 800830c:	2b24      	cmp	r3, #36	@ 0x24
 800830e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008312:	4686      	mov	lr, r0
 8008314:	4690      	mov	r8, r2
 8008316:	d801      	bhi.n	800831c <_strtol_l.constprop.0+0x10>
 8008318:	2b01      	cmp	r3, #1
 800831a:	d106      	bne.n	800832a <_strtol_l.constprop.0+0x1e>
 800831c:	f000 f946 	bl	80085ac <__errno>
 8008320:	2316      	movs	r3, #22
 8008322:	6003      	str	r3, [r0, #0]
 8008324:	2000      	movs	r0, #0
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	4834      	ldr	r0, [pc, #208]	@ (80083fc <_strtol_l.constprop.0+0xf0>)
 800832c:	460d      	mov	r5, r1
 800832e:	462a      	mov	r2, r5
 8008330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008334:	5d06      	ldrb	r6, [r0, r4]
 8008336:	f016 0608 	ands.w	r6, r6, #8
 800833a:	d1f8      	bne.n	800832e <_strtol_l.constprop.0+0x22>
 800833c:	2c2d      	cmp	r4, #45	@ 0x2d
 800833e:	d12d      	bne.n	800839c <_strtol_l.constprop.0+0x90>
 8008340:	782c      	ldrb	r4, [r5, #0]
 8008342:	2601      	movs	r6, #1
 8008344:	1c95      	adds	r5, r2, #2
 8008346:	f033 0210 	bics.w	r2, r3, #16
 800834a:	d109      	bne.n	8008360 <_strtol_l.constprop.0+0x54>
 800834c:	2c30      	cmp	r4, #48	@ 0x30
 800834e:	d12a      	bne.n	80083a6 <_strtol_l.constprop.0+0x9a>
 8008350:	782a      	ldrb	r2, [r5, #0]
 8008352:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008356:	2a58      	cmp	r2, #88	@ 0x58
 8008358:	d125      	bne.n	80083a6 <_strtol_l.constprop.0+0x9a>
 800835a:	786c      	ldrb	r4, [r5, #1]
 800835c:	2310      	movs	r3, #16
 800835e:	3502      	adds	r5, #2
 8008360:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008364:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008368:	2200      	movs	r2, #0
 800836a:	fbbc f9f3 	udiv	r9, ip, r3
 800836e:	4610      	mov	r0, r2
 8008370:	fb03 ca19 	mls	sl, r3, r9, ip
 8008374:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008378:	2f09      	cmp	r7, #9
 800837a:	d81b      	bhi.n	80083b4 <_strtol_l.constprop.0+0xa8>
 800837c:	463c      	mov	r4, r7
 800837e:	42a3      	cmp	r3, r4
 8008380:	dd27      	ble.n	80083d2 <_strtol_l.constprop.0+0xc6>
 8008382:	1c57      	adds	r7, r2, #1
 8008384:	d007      	beq.n	8008396 <_strtol_l.constprop.0+0x8a>
 8008386:	4581      	cmp	r9, r0
 8008388:	d320      	bcc.n	80083cc <_strtol_l.constprop.0+0xc0>
 800838a:	d101      	bne.n	8008390 <_strtol_l.constprop.0+0x84>
 800838c:	45a2      	cmp	sl, r4
 800838e:	db1d      	blt.n	80083cc <_strtol_l.constprop.0+0xc0>
 8008390:	fb00 4003 	mla	r0, r0, r3, r4
 8008394:	2201      	movs	r2, #1
 8008396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800839a:	e7eb      	b.n	8008374 <_strtol_l.constprop.0+0x68>
 800839c:	2c2b      	cmp	r4, #43	@ 0x2b
 800839e:	bf04      	itt	eq
 80083a0:	782c      	ldrbeq	r4, [r5, #0]
 80083a2:	1c95      	addeq	r5, r2, #2
 80083a4:	e7cf      	b.n	8008346 <_strtol_l.constprop.0+0x3a>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1da      	bne.n	8008360 <_strtol_l.constprop.0+0x54>
 80083aa:	2c30      	cmp	r4, #48	@ 0x30
 80083ac:	bf0c      	ite	eq
 80083ae:	2308      	moveq	r3, #8
 80083b0:	230a      	movne	r3, #10
 80083b2:	e7d5      	b.n	8008360 <_strtol_l.constprop.0+0x54>
 80083b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80083b8:	2f19      	cmp	r7, #25
 80083ba:	d801      	bhi.n	80083c0 <_strtol_l.constprop.0+0xb4>
 80083bc:	3c37      	subs	r4, #55	@ 0x37
 80083be:	e7de      	b.n	800837e <_strtol_l.constprop.0+0x72>
 80083c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80083c4:	2f19      	cmp	r7, #25
 80083c6:	d804      	bhi.n	80083d2 <_strtol_l.constprop.0+0xc6>
 80083c8:	3c57      	subs	r4, #87	@ 0x57
 80083ca:	e7d8      	b.n	800837e <_strtol_l.constprop.0+0x72>
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083d0:	e7e1      	b.n	8008396 <_strtol_l.constprop.0+0x8a>
 80083d2:	1c53      	adds	r3, r2, #1
 80083d4:	d108      	bne.n	80083e8 <_strtol_l.constprop.0+0xdc>
 80083d6:	2322      	movs	r3, #34	@ 0x22
 80083d8:	f8ce 3000 	str.w	r3, [lr]
 80083dc:	4660      	mov	r0, ip
 80083de:	f1b8 0f00 	cmp.w	r8, #0
 80083e2:	d0a0      	beq.n	8008326 <_strtol_l.constprop.0+0x1a>
 80083e4:	1e69      	subs	r1, r5, #1
 80083e6:	e006      	b.n	80083f6 <_strtol_l.constprop.0+0xea>
 80083e8:	b106      	cbz	r6, 80083ec <_strtol_l.constprop.0+0xe0>
 80083ea:	4240      	negs	r0, r0
 80083ec:	f1b8 0f00 	cmp.w	r8, #0
 80083f0:	d099      	beq.n	8008326 <_strtol_l.constprop.0+0x1a>
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	d1f6      	bne.n	80083e4 <_strtol_l.constprop.0+0xd8>
 80083f6:	f8c8 1000 	str.w	r1, [r8]
 80083fa:	e794      	b.n	8008326 <_strtol_l.constprop.0+0x1a>
 80083fc:	08009bd1 	.word	0x08009bd1

08008400 <_strtol_r>:
 8008400:	f7ff bf84 	b.w	800830c <_strtol_l.constprop.0>

08008404 <strtol>:
 8008404:	4613      	mov	r3, r2
 8008406:	460a      	mov	r2, r1
 8008408:	4601      	mov	r1, r0
 800840a:	4802      	ldr	r0, [pc, #8]	@ (8008414 <strtol+0x10>)
 800840c:	6800      	ldr	r0, [r0, #0]
 800840e:	f7ff bf7d 	b.w	800830c <_strtol_l.constprop.0>
 8008412:	bf00      	nop
 8008414:	2000009c 	.word	0x2000009c

08008418 <_fwalk_sglue>:
 8008418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800841c:	4607      	mov	r7, r0
 800841e:	4688      	mov	r8, r1
 8008420:	4614      	mov	r4, r2
 8008422:	2600      	movs	r6, #0
 8008424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008428:	f1b9 0901 	subs.w	r9, r9, #1
 800842c:	d505      	bpl.n	800843a <_fwalk_sglue+0x22>
 800842e:	6824      	ldr	r4, [r4, #0]
 8008430:	2c00      	cmp	r4, #0
 8008432:	d1f7      	bne.n	8008424 <_fwalk_sglue+0xc>
 8008434:	4630      	mov	r0, r6
 8008436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843a:	89ab      	ldrh	r3, [r5, #12]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d907      	bls.n	8008450 <_fwalk_sglue+0x38>
 8008440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008444:	3301      	adds	r3, #1
 8008446:	d003      	beq.n	8008450 <_fwalk_sglue+0x38>
 8008448:	4629      	mov	r1, r5
 800844a:	4638      	mov	r0, r7
 800844c:	47c0      	blx	r8
 800844e:	4306      	orrs	r6, r0
 8008450:	3568      	adds	r5, #104	@ 0x68
 8008452:	e7e9      	b.n	8008428 <_fwalk_sglue+0x10>

08008454 <_puts_r>:
 8008454:	6a03      	ldr	r3, [r0, #32]
 8008456:	b570      	push	{r4, r5, r6, lr}
 8008458:	6884      	ldr	r4, [r0, #8]
 800845a:	4605      	mov	r5, r0
 800845c:	460e      	mov	r6, r1
 800845e:	b90b      	cbnz	r3, 8008464 <_puts_r+0x10>
 8008460:	f7ff ff3c 	bl	80082dc <__sinit>
 8008464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008466:	07db      	lsls	r3, r3, #31
 8008468:	d405      	bmi.n	8008476 <_puts_r+0x22>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	0598      	lsls	r0, r3, #22
 800846e:	d402      	bmi.n	8008476 <_puts_r+0x22>
 8008470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008472:	f000 f8c6 	bl	8008602 <__retarget_lock_acquire_recursive>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	0719      	lsls	r1, r3, #28
 800847a:	d502      	bpl.n	8008482 <_puts_r+0x2e>
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d135      	bne.n	80084ee <_puts_r+0x9a>
 8008482:	4621      	mov	r1, r4
 8008484:	4628      	mov	r0, r5
 8008486:	f000 fecd 	bl	8009224 <__swsetup_r>
 800848a:	b380      	cbz	r0, 80084ee <_puts_r+0x9a>
 800848c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008492:	07da      	lsls	r2, r3, #31
 8008494:	d405      	bmi.n	80084a2 <_puts_r+0x4e>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	059b      	lsls	r3, r3, #22
 800849a:	d402      	bmi.n	80084a2 <_puts_r+0x4e>
 800849c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800849e:	f000 f8b1 	bl	8008604 <__retarget_lock_release_recursive>
 80084a2:	4628      	mov	r0, r5
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da04      	bge.n	80084b4 <_puts_r+0x60>
 80084aa:	69a2      	ldr	r2, [r4, #24]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	dc17      	bgt.n	80084e0 <_puts_r+0x8c>
 80084b0:	290a      	cmp	r1, #10
 80084b2:	d015      	beq.n	80084e0 <_puts_r+0x8c>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	7019      	strb	r1, [r3, #0]
 80084bc:	68a3      	ldr	r3, [r4, #8]
 80084be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084c2:	3b01      	subs	r3, #1
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	2900      	cmp	r1, #0
 80084c8:	d1ed      	bne.n	80084a6 <_puts_r+0x52>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	da11      	bge.n	80084f2 <_puts_r+0x9e>
 80084ce:	4622      	mov	r2, r4
 80084d0:	210a      	movs	r1, #10
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 fe68 	bl	80091a8 <__swbuf_r>
 80084d8:	3001      	adds	r0, #1
 80084da:	d0d7      	beq.n	800848c <_puts_r+0x38>
 80084dc:	250a      	movs	r5, #10
 80084de:	e7d7      	b.n	8008490 <_puts_r+0x3c>
 80084e0:	4622      	mov	r2, r4
 80084e2:	4628      	mov	r0, r5
 80084e4:	f000 fe60 	bl	80091a8 <__swbuf_r>
 80084e8:	3001      	adds	r0, #1
 80084ea:	d1e7      	bne.n	80084bc <_puts_r+0x68>
 80084ec:	e7ce      	b.n	800848c <_puts_r+0x38>
 80084ee:	3e01      	subs	r6, #1
 80084f0:	e7e4      	b.n	80084bc <_puts_r+0x68>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	6022      	str	r2, [r4, #0]
 80084f8:	220a      	movs	r2, #10
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e7ee      	b.n	80084dc <_puts_r+0x88>
	...

08008500 <puts>:
 8008500:	4b02      	ldr	r3, [pc, #8]	@ (800850c <puts+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f7ff bfa5 	b.w	8008454 <_puts_r>
 800850a:	bf00      	nop
 800850c:	2000009c 	.word	0x2000009c

08008510 <memset>:
 8008510:	4402      	add	r2, r0
 8008512:	4603      	mov	r3, r0
 8008514:	4293      	cmp	r3, r2
 8008516:	d100      	bne.n	800851a <memset+0xa>
 8008518:	4770      	bx	lr
 800851a:	f803 1b01 	strb.w	r1, [r3], #1
 800851e:	e7f9      	b.n	8008514 <memset+0x4>

08008520 <_close_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d06      	ldr	r5, [pc, #24]	@ (800853c <_close_r+0x1c>)
 8008524:	2300      	movs	r3, #0
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	f7fb fa48 	bl	80039c0 <_close>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_close_r+0x1a>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b103      	cbz	r3, 800853a <_close_r+0x1a>
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	200005a4 	.word	0x200005a4

08008540 <_lseek_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d07      	ldr	r5, [pc, #28]	@ (8008560 <_lseek_r+0x20>)
 8008544:	4604      	mov	r4, r0
 8008546:	4608      	mov	r0, r1
 8008548:	4611      	mov	r1, r2
 800854a:	2200      	movs	r2, #0
 800854c:	602a      	str	r2, [r5, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	f7fb fa5d 	bl	8003a0e <_lseek>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_lseek_r+0x1e>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_lseek_r+0x1e>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	200005a4 	.word	0x200005a4

08008564 <_read_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d07      	ldr	r5, [pc, #28]	@ (8008584 <_read_r+0x20>)
 8008568:	4604      	mov	r4, r0
 800856a:	4608      	mov	r0, r1
 800856c:	4611      	mov	r1, r2
 800856e:	2200      	movs	r2, #0
 8008570:	602a      	str	r2, [r5, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	f7fb f9eb 	bl	800394e <_read>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_read_r+0x1e>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_read_r+0x1e>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	200005a4 	.word	0x200005a4

08008588 <_write_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4d07      	ldr	r5, [pc, #28]	@ (80085a8 <_write_r+0x20>)
 800858c:	4604      	mov	r4, r0
 800858e:	4608      	mov	r0, r1
 8008590:	4611      	mov	r1, r2
 8008592:	2200      	movs	r2, #0
 8008594:	602a      	str	r2, [r5, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	f7fb f9f6 	bl	8003988 <_write>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_write_r+0x1e>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_write_r+0x1e>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	200005a4 	.word	0x200005a4

080085ac <__errno>:
 80085ac:	4b01      	ldr	r3, [pc, #4]	@ (80085b4 <__errno+0x8>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	2000009c 	.word	0x2000009c

080085b8 <__libc_init_array>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	4d0d      	ldr	r5, [pc, #52]	@ (80085f0 <__libc_init_array+0x38>)
 80085bc:	4c0d      	ldr	r4, [pc, #52]	@ (80085f4 <__libc_init_array+0x3c>)
 80085be:	1b64      	subs	r4, r4, r5
 80085c0:	10a4      	asrs	r4, r4, #2
 80085c2:	2600      	movs	r6, #0
 80085c4:	42a6      	cmp	r6, r4
 80085c6:	d109      	bne.n	80085dc <__libc_init_array+0x24>
 80085c8:	4d0b      	ldr	r5, [pc, #44]	@ (80085f8 <__libc_init_array+0x40>)
 80085ca:	4c0c      	ldr	r4, [pc, #48]	@ (80085fc <__libc_init_array+0x44>)
 80085cc:	f001 fa9a 	bl	8009b04 <_init>
 80085d0:	1b64      	subs	r4, r4, r5
 80085d2:	10a4      	asrs	r4, r4, #2
 80085d4:	2600      	movs	r6, #0
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	d105      	bne.n	80085e6 <__libc_init_array+0x2e>
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e0:	4798      	blx	r3
 80085e2:	3601      	adds	r6, #1
 80085e4:	e7ee      	b.n	80085c4 <__libc_init_array+0xc>
 80085e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ea:	4798      	blx	r3
 80085ec:	3601      	adds	r6, #1
 80085ee:	e7f2      	b.n	80085d6 <__libc_init_array+0x1e>
 80085f0:	08009d68 	.word	0x08009d68
 80085f4:	08009d68 	.word	0x08009d68
 80085f8:	08009d68 	.word	0x08009d68
 80085fc:	08009d6c 	.word	0x08009d6c

08008600 <__retarget_lock_init_recursive>:
 8008600:	4770      	bx	lr

08008602 <__retarget_lock_acquire_recursive>:
 8008602:	4770      	bx	lr

08008604 <__retarget_lock_release_recursive>:
 8008604:	4770      	bx	lr
	...

08008608 <_free_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4605      	mov	r5, r0
 800860c:	2900      	cmp	r1, #0
 800860e:	d041      	beq.n	8008694 <_free_r+0x8c>
 8008610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008614:	1f0c      	subs	r4, r1, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	18e4      	addlt	r4, r4, r3
 800861c:	f000 fce0 	bl	8008fe0 <__malloc_lock>
 8008620:	4a1d      	ldr	r2, [pc, #116]	@ (8008698 <_free_r+0x90>)
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	b933      	cbnz	r3, 8008634 <_free_r+0x2c>
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	4628      	mov	r0, r5
 800862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008630:	f000 bcdc 	b.w	8008fec <__malloc_unlock>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d908      	bls.n	800864a <_free_r+0x42>
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	1821      	adds	r1, r4, r0
 800863c:	428b      	cmp	r3, r1
 800863e:	bf01      	itttt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	1809      	addeq	r1, r1, r0
 8008646:	6021      	streq	r1, [r4, #0]
 8008648:	e7ed      	b.n	8008626 <_free_r+0x1e>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x4c>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x42>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1850      	adds	r0, r2, r1
 8008658:	42a0      	cmp	r0, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x6c>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	4401      	add	r1, r0
 8008660:	1850      	adds	r0, r2, r1
 8008662:	4283      	cmp	r3, r0
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1e0      	bne.n	800862a <_free_r+0x22>
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	6053      	str	r3, [r2, #4]
 800866e:	4408      	add	r0, r1
 8008670:	6010      	str	r0, [r2, #0]
 8008672:	e7da      	b.n	800862a <_free_r+0x22>
 8008674:	d902      	bls.n	800867c <_free_r+0x74>
 8008676:	230c      	movs	r3, #12
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	e7d6      	b.n	800862a <_free_r+0x22>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	1821      	adds	r1, r4, r0
 8008680:	428b      	cmp	r3, r1
 8008682:	bf04      	itt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	bf04      	itt	eq
 800868c:	1809      	addeq	r1, r1, r0
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	6054      	str	r4, [r2, #4]
 8008692:	e7ca      	b.n	800862a <_free_r+0x22>
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	200005b0 	.word	0x200005b0

0800869c <_sungetc_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	1c4b      	adds	r3, r1, #1
 80086a0:	4614      	mov	r4, r2
 80086a2:	d103      	bne.n	80086ac <_sungetc_r+0x10>
 80086a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80086a8:	4628      	mov	r0, r5
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	8993      	ldrh	r3, [r2, #12]
 80086ae:	f023 0320 	bic.w	r3, r3, #32
 80086b2:	8193      	strh	r3, [r2, #12]
 80086b4:	6853      	ldr	r3, [r2, #4]
 80086b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80086b8:	b2cd      	uxtb	r5, r1
 80086ba:	b18a      	cbz	r2, 80086e0 <_sungetc_r+0x44>
 80086bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80086be:	429a      	cmp	r2, r3
 80086c0:	dd08      	ble.n	80086d4 <_sungetc_r+0x38>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	1e5a      	subs	r2, r3, #1
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	3301      	adds	r3, #1
 80086d0:	6063      	str	r3, [r4, #4]
 80086d2:	e7e9      	b.n	80086a8 <_sungetc_r+0xc>
 80086d4:	4621      	mov	r1, r4
 80086d6:	f000 fc8f 	bl	8008ff8 <__submore>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0f1      	beq.n	80086c2 <_sungetc_r+0x26>
 80086de:	e7e1      	b.n	80086a4 <_sungetc_r+0x8>
 80086e0:	6921      	ldr	r1, [r4, #16]
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	b141      	cbz	r1, 80086f8 <_sungetc_r+0x5c>
 80086e6:	4291      	cmp	r1, r2
 80086e8:	d206      	bcs.n	80086f8 <_sungetc_r+0x5c>
 80086ea:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80086ee:	42a9      	cmp	r1, r5
 80086f0:	d102      	bne.n	80086f8 <_sungetc_r+0x5c>
 80086f2:	3a01      	subs	r2, #1
 80086f4:	6022      	str	r2, [r4, #0]
 80086f6:	e7ea      	b.n	80086ce <_sungetc_r+0x32>
 80086f8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80086fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008700:	6363      	str	r3, [r4, #52]	@ 0x34
 8008702:	2303      	movs	r3, #3
 8008704:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008706:	4623      	mov	r3, r4
 8008708:	f803 5f46 	strb.w	r5, [r3, #70]!
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	2301      	movs	r3, #1
 8008710:	e7de      	b.n	80086d0 <_sungetc_r+0x34>

08008712 <__ssrefill_r>:
 8008712:	b510      	push	{r4, lr}
 8008714:	460c      	mov	r4, r1
 8008716:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008718:	b169      	cbz	r1, 8008736 <__ssrefill_r+0x24>
 800871a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800871e:	4299      	cmp	r1, r3
 8008720:	d001      	beq.n	8008726 <__ssrefill_r+0x14>
 8008722:	f7ff ff71 	bl	8008608 <_free_r>
 8008726:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008728:	6063      	str	r3, [r4, #4]
 800872a:	2000      	movs	r0, #0
 800872c:	6360      	str	r0, [r4, #52]	@ 0x34
 800872e:	b113      	cbz	r3, 8008736 <__ssrefill_r+0x24>
 8008730:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008732:	6023      	str	r3, [r4, #0]
 8008734:	bd10      	pop	{r4, pc}
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	f043 0320 	orr.w	r3, r3, #32
 8008744:	81a3      	strh	r3, [r4, #12]
 8008746:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800874a:	e7f3      	b.n	8008734 <__ssrefill_r+0x22>

0800874c <__ssvfiscanf_r>:
 800874c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	460c      	mov	r4, r1
 8008752:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008756:	2100      	movs	r1, #0
 8008758:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800875c:	49a5      	ldr	r1, [pc, #660]	@ (80089f4 <__ssvfiscanf_r+0x2a8>)
 800875e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008760:	f10d 0804 	add.w	r8, sp, #4
 8008764:	49a4      	ldr	r1, [pc, #656]	@ (80089f8 <__ssvfiscanf_r+0x2ac>)
 8008766:	4fa5      	ldr	r7, [pc, #660]	@ (80089fc <__ssvfiscanf_r+0x2b0>)
 8008768:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800876c:	4606      	mov	r6, r0
 800876e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	7813      	ldrb	r3, [r2, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 8158 	beq.w	8008a2a <__ssvfiscanf_r+0x2de>
 800877a:	5cf9      	ldrb	r1, [r7, r3]
 800877c:	f011 0108 	ands.w	r1, r1, #8
 8008780:	f102 0501 	add.w	r5, r2, #1
 8008784:	d019      	beq.n	80087ba <__ssvfiscanf_r+0x6e>
 8008786:	6863      	ldr	r3, [r4, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	dd0f      	ble.n	80087ac <__ssvfiscanf_r+0x60>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	5cba      	ldrb	r2, [r7, r2]
 8008792:	0712      	lsls	r2, r2, #28
 8008794:	d401      	bmi.n	800879a <__ssvfiscanf_r+0x4e>
 8008796:	462a      	mov	r2, r5
 8008798:	e7eb      	b.n	8008772 <__ssvfiscanf_r+0x26>
 800879a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800879c:	3201      	adds	r2, #1
 800879e:	9245      	str	r2, [sp, #276]	@ 0x114
 80087a0:	6862      	ldr	r2, [r4, #4]
 80087a2:	3301      	adds	r3, #1
 80087a4:	3a01      	subs	r2, #1
 80087a6:	6062      	str	r2, [r4, #4]
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	e7ec      	b.n	8008786 <__ssvfiscanf_r+0x3a>
 80087ac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80087ae:	4621      	mov	r1, r4
 80087b0:	4630      	mov	r0, r6
 80087b2:	4798      	blx	r3
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d0e9      	beq.n	800878c <__ssvfiscanf_r+0x40>
 80087b8:	e7ed      	b.n	8008796 <__ssvfiscanf_r+0x4a>
 80087ba:	2b25      	cmp	r3, #37	@ 0x25
 80087bc:	d012      	beq.n	80087e4 <__ssvfiscanf_r+0x98>
 80087be:	4699      	mov	r9, r3
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f340 8093 	ble.w	80088ee <__ssvfiscanf_r+0x1a2>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	7813      	ldrb	r3, [r2, #0]
 80087cc:	454b      	cmp	r3, r9
 80087ce:	f040 812c 	bne.w	8008a2a <__ssvfiscanf_r+0x2de>
 80087d2:	6863      	ldr	r3, [r4, #4]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	6063      	str	r3, [r4, #4]
 80087d8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80087da:	3201      	adds	r2, #1
 80087dc:	3301      	adds	r3, #1
 80087de:	6022      	str	r2, [r4, #0]
 80087e0:	9345      	str	r3, [sp, #276]	@ 0x114
 80087e2:	e7d8      	b.n	8008796 <__ssvfiscanf_r+0x4a>
 80087e4:	9141      	str	r1, [sp, #260]	@ 0x104
 80087e6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80087e8:	7853      	ldrb	r3, [r2, #1]
 80087ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ec:	bf02      	ittt	eq
 80087ee:	2310      	moveq	r3, #16
 80087f0:	1c95      	addeq	r5, r2, #2
 80087f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80087f4:	220a      	movs	r2, #10
 80087f6:	46a9      	mov	r9, r5
 80087f8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80087fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008800:	2b09      	cmp	r3, #9
 8008802:	d91e      	bls.n	8008842 <__ssvfiscanf_r+0xf6>
 8008804:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008a00 <__ssvfiscanf_r+0x2b4>
 8008808:	2203      	movs	r2, #3
 800880a:	4650      	mov	r0, sl
 800880c:	f7f7 fd10 	bl	8000230 <memchr>
 8008810:	b138      	cbz	r0, 8008822 <__ssvfiscanf_r+0xd6>
 8008812:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008814:	eba0 000a 	sub.w	r0, r0, sl
 8008818:	2301      	movs	r3, #1
 800881a:	4083      	lsls	r3, r0
 800881c:	4313      	orrs	r3, r2
 800881e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008820:	464d      	mov	r5, r9
 8008822:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008826:	2b78      	cmp	r3, #120	@ 0x78
 8008828:	d806      	bhi.n	8008838 <__ssvfiscanf_r+0xec>
 800882a:	2b57      	cmp	r3, #87	@ 0x57
 800882c:	d810      	bhi.n	8008850 <__ssvfiscanf_r+0x104>
 800882e:	2b25      	cmp	r3, #37	@ 0x25
 8008830:	d0c5      	beq.n	80087be <__ssvfiscanf_r+0x72>
 8008832:	d857      	bhi.n	80088e4 <__ssvfiscanf_r+0x198>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d065      	beq.n	8008904 <__ssvfiscanf_r+0x1b8>
 8008838:	2303      	movs	r3, #3
 800883a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800883c:	230a      	movs	r3, #10
 800883e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008840:	e078      	b.n	8008934 <__ssvfiscanf_r+0x1e8>
 8008842:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008844:	fb02 1103 	mla	r1, r2, r3, r1
 8008848:	3930      	subs	r1, #48	@ 0x30
 800884a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800884c:	464d      	mov	r5, r9
 800884e:	e7d2      	b.n	80087f6 <__ssvfiscanf_r+0xaa>
 8008850:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008854:	2a20      	cmp	r2, #32
 8008856:	d8ef      	bhi.n	8008838 <__ssvfiscanf_r+0xec>
 8008858:	a101      	add	r1, pc, #4	@ (adr r1, 8008860 <__ssvfiscanf_r+0x114>)
 800885a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800885e:	bf00      	nop
 8008860:	08008913 	.word	0x08008913
 8008864:	08008839 	.word	0x08008839
 8008868:	08008839 	.word	0x08008839
 800886c:	0800896d 	.word	0x0800896d
 8008870:	08008839 	.word	0x08008839
 8008874:	08008839 	.word	0x08008839
 8008878:	08008839 	.word	0x08008839
 800887c:	08008839 	.word	0x08008839
 8008880:	08008839 	.word	0x08008839
 8008884:	08008839 	.word	0x08008839
 8008888:	08008839 	.word	0x08008839
 800888c:	08008983 	.word	0x08008983
 8008890:	08008969 	.word	0x08008969
 8008894:	080088eb 	.word	0x080088eb
 8008898:	080088eb 	.word	0x080088eb
 800889c:	080088eb 	.word	0x080088eb
 80088a0:	08008839 	.word	0x08008839
 80088a4:	08008925 	.word	0x08008925
 80088a8:	08008839 	.word	0x08008839
 80088ac:	08008839 	.word	0x08008839
 80088b0:	08008839 	.word	0x08008839
 80088b4:	08008839 	.word	0x08008839
 80088b8:	08008993 	.word	0x08008993
 80088bc:	0800892d 	.word	0x0800892d
 80088c0:	0800890b 	.word	0x0800890b
 80088c4:	08008839 	.word	0x08008839
 80088c8:	08008839 	.word	0x08008839
 80088cc:	0800898f 	.word	0x0800898f
 80088d0:	08008839 	.word	0x08008839
 80088d4:	08008969 	.word	0x08008969
 80088d8:	08008839 	.word	0x08008839
 80088dc:	08008839 	.word	0x08008839
 80088e0:	08008913 	.word	0x08008913
 80088e4:	3b45      	subs	r3, #69	@ 0x45
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d8a6      	bhi.n	8008838 <__ssvfiscanf_r+0xec>
 80088ea:	2305      	movs	r3, #5
 80088ec:	e021      	b.n	8008932 <__ssvfiscanf_r+0x1e6>
 80088ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80088f0:	4621      	mov	r1, r4
 80088f2:	4630      	mov	r0, r6
 80088f4:	4798      	blx	r3
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f43f af66 	beq.w	80087c8 <__ssvfiscanf_r+0x7c>
 80088fc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80088fe:	2800      	cmp	r0, #0
 8008900:	f040 808b 	bne.w	8008a1a <__ssvfiscanf_r+0x2ce>
 8008904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008908:	e08b      	b.n	8008a22 <__ssvfiscanf_r+0x2d6>
 800890a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800890c:	f042 0220 	orr.w	r2, r2, #32
 8008910:	9241      	str	r2, [sp, #260]	@ 0x104
 8008912:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008918:	9241      	str	r2, [sp, #260]	@ 0x104
 800891a:	2210      	movs	r2, #16
 800891c:	2b6e      	cmp	r3, #110	@ 0x6e
 800891e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008920:	d902      	bls.n	8008928 <__ssvfiscanf_r+0x1dc>
 8008922:	e005      	b.n	8008930 <__ssvfiscanf_r+0x1e4>
 8008924:	2300      	movs	r3, #0
 8008926:	9342      	str	r3, [sp, #264]	@ 0x108
 8008928:	2303      	movs	r3, #3
 800892a:	e002      	b.n	8008932 <__ssvfiscanf_r+0x1e6>
 800892c:	2308      	movs	r3, #8
 800892e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008930:	2304      	movs	r3, #4
 8008932:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008934:	6863      	ldr	r3, [r4, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	dd39      	ble.n	80089ae <__ssvfiscanf_r+0x262>
 800893a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800893c:	0659      	lsls	r1, r3, #25
 800893e:	d404      	bmi.n	800894a <__ssvfiscanf_r+0x1fe>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	5cba      	ldrb	r2, [r7, r2]
 8008946:	0712      	lsls	r2, r2, #28
 8008948:	d438      	bmi.n	80089bc <__ssvfiscanf_r+0x270>
 800894a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800894c:	2b02      	cmp	r3, #2
 800894e:	dc47      	bgt.n	80089e0 <__ssvfiscanf_r+0x294>
 8008950:	466b      	mov	r3, sp
 8008952:	4622      	mov	r2, r4
 8008954:	a941      	add	r1, sp, #260	@ 0x104
 8008956:	4630      	mov	r0, r6
 8008958:	f000 f90e 	bl	8008b78 <_scanf_chars>
 800895c:	2801      	cmp	r0, #1
 800895e:	d064      	beq.n	8008a2a <__ssvfiscanf_r+0x2de>
 8008960:	2802      	cmp	r0, #2
 8008962:	f47f af18 	bne.w	8008796 <__ssvfiscanf_r+0x4a>
 8008966:	e7c9      	b.n	80088fc <__ssvfiscanf_r+0x1b0>
 8008968:	220a      	movs	r2, #10
 800896a:	e7d7      	b.n	800891c <__ssvfiscanf_r+0x1d0>
 800896c:	4629      	mov	r1, r5
 800896e:	4640      	mov	r0, r8
 8008970:	f000 fa50 	bl	8008e14 <__sccl>
 8008974:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800897a:	9341      	str	r3, [sp, #260]	@ 0x104
 800897c:	4605      	mov	r5, r0
 800897e:	2301      	movs	r3, #1
 8008980:	e7d7      	b.n	8008932 <__ssvfiscanf_r+0x1e6>
 8008982:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008988:	9341      	str	r3, [sp, #260]	@ 0x104
 800898a:	2300      	movs	r3, #0
 800898c:	e7d1      	b.n	8008932 <__ssvfiscanf_r+0x1e6>
 800898e:	2302      	movs	r3, #2
 8008990:	e7cf      	b.n	8008932 <__ssvfiscanf_r+0x1e6>
 8008992:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008994:	06c3      	lsls	r3, r0, #27
 8008996:	f53f aefe 	bmi.w	8008796 <__ssvfiscanf_r+0x4a>
 800899a:	9b00      	ldr	r3, [sp, #0]
 800899c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800899e:	1d19      	adds	r1, r3, #4
 80089a0:	9100      	str	r1, [sp, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	07c0      	lsls	r0, r0, #31
 80089a6:	bf4c      	ite	mi
 80089a8:	801a      	strhmi	r2, [r3, #0]
 80089aa:	601a      	strpl	r2, [r3, #0]
 80089ac:	e6f3      	b.n	8008796 <__ssvfiscanf_r+0x4a>
 80089ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80089b0:	4621      	mov	r1, r4
 80089b2:	4630      	mov	r0, r6
 80089b4:	4798      	blx	r3
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d0bf      	beq.n	800893a <__ssvfiscanf_r+0x1ee>
 80089ba:	e79f      	b.n	80088fc <__ssvfiscanf_r+0x1b0>
 80089bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80089be:	3201      	adds	r2, #1
 80089c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80089c2:	6862      	ldr	r2, [r4, #4]
 80089c4:	3a01      	subs	r2, #1
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	6062      	str	r2, [r4, #4]
 80089ca:	dd02      	ble.n	80089d2 <__ssvfiscanf_r+0x286>
 80089cc:	3301      	adds	r3, #1
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	e7b6      	b.n	8008940 <__ssvfiscanf_r+0x1f4>
 80089d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80089d4:	4621      	mov	r1, r4
 80089d6:	4630      	mov	r0, r6
 80089d8:	4798      	blx	r3
 80089da:	2800      	cmp	r0, #0
 80089dc:	d0b0      	beq.n	8008940 <__ssvfiscanf_r+0x1f4>
 80089de:	e78d      	b.n	80088fc <__ssvfiscanf_r+0x1b0>
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	dc0f      	bgt.n	8008a04 <__ssvfiscanf_r+0x2b8>
 80089e4:	466b      	mov	r3, sp
 80089e6:	4622      	mov	r2, r4
 80089e8:	a941      	add	r1, sp, #260	@ 0x104
 80089ea:	4630      	mov	r0, r6
 80089ec:	f000 f91e 	bl	8008c2c <_scanf_i>
 80089f0:	e7b4      	b.n	800895c <__ssvfiscanf_r+0x210>
 80089f2:	bf00      	nop
 80089f4:	0800869d 	.word	0x0800869d
 80089f8:	08008713 	.word	0x08008713
 80089fc:	08009bd1 	.word	0x08009bd1
 8008a00:	08009cd1 	.word	0x08009cd1
 8008a04:	4b0a      	ldr	r3, [pc, #40]	@ (8008a30 <__ssvfiscanf_r+0x2e4>)
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f43f aec5 	beq.w	8008796 <__ssvfiscanf_r+0x4a>
 8008a0c:	466b      	mov	r3, sp
 8008a0e:	4622      	mov	r2, r4
 8008a10:	a941      	add	r1, sp, #260	@ 0x104
 8008a12:	4630      	mov	r0, r6
 8008a14:	f3af 8000 	nop.w
 8008a18:	e7a0      	b.n	800895c <__ssvfiscanf_r+0x210>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	065b      	lsls	r3, r3, #25
 8008a1e:	f53f af71 	bmi.w	8008904 <__ssvfiscanf_r+0x1b8>
 8008a22:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008a2c:	e7f9      	b.n	8008a22 <__ssvfiscanf_r+0x2d6>
 8008a2e:	bf00      	nop
 8008a30:	00000000 	.word	0x00000000

08008a34 <sbrk_aligned>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4e0f      	ldr	r6, [pc, #60]	@ (8008a74 <sbrk_aligned+0x40>)
 8008a38:	460c      	mov	r4, r1
 8008a3a:	6831      	ldr	r1, [r6, #0]
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	b911      	cbnz	r1, 8008a46 <sbrk_aligned+0x12>
 8008a40:	f000 fcca 	bl	80093d8 <_sbrk_r>
 8008a44:	6030      	str	r0, [r6, #0]
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 fcc5 	bl	80093d8 <_sbrk_r>
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	d103      	bne.n	8008a5a <sbrk_aligned+0x26>
 8008a52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008a56:	4620      	mov	r0, r4
 8008a58:	bd70      	pop	{r4, r5, r6, pc}
 8008a5a:	1cc4      	adds	r4, r0, #3
 8008a5c:	f024 0403 	bic.w	r4, r4, #3
 8008a60:	42a0      	cmp	r0, r4
 8008a62:	d0f8      	beq.n	8008a56 <sbrk_aligned+0x22>
 8008a64:	1a21      	subs	r1, r4, r0
 8008a66:	4628      	mov	r0, r5
 8008a68:	f000 fcb6 	bl	80093d8 <_sbrk_r>
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d1f2      	bne.n	8008a56 <sbrk_aligned+0x22>
 8008a70:	e7ef      	b.n	8008a52 <sbrk_aligned+0x1e>
 8008a72:	bf00      	nop
 8008a74:	200005ac 	.word	0x200005ac

08008a78 <_malloc_r>:
 8008a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a7c:	1ccd      	adds	r5, r1, #3
 8008a7e:	f025 0503 	bic.w	r5, r5, #3
 8008a82:	3508      	adds	r5, #8
 8008a84:	2d0c      	cmp	r5, #12
 8008a86:	bf38      	it	cc
 8008a88:	250c      	movcc	r5, #12
 8008a8a:	2d00      	cmp	r5, #0
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	db01      	blt.n	8008a94 <_malloc_r+0x1c>
 8008a90:	42a9      	cmp	r1, r5
 8008a92:	d904      	bls.n	8008a9e <_malloc_r+0x26>
 8008a94:	230c      	movs	r3, #12
 8008a96:	6033      	str	r3, [r6, #0]
 8008a98:	2000      	movs	r0, #0
 8008a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b74 <_malloc_r+0xfc>
 8008aa2:	f000 fa9d 	bl	8008fe0 <__malloc_lock>
 8008aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aaa:	461c      	mov	r4, r3
 8008aac:	bb44      	cbnz	r4, 8008b00 <_malloc_r+0x88>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7ff ffbf 	bl	8008a34 <sbrk_aligned>
 8008ab6:	1c43      	adds	r3, r0, #1
 8008ab8:	4604      	mov	r4, r0
 8008aba:	d158      	bne.n	8008b6e <_malloc_r+0xf6>
 8008abc:	f8d8 4000 	ldr.w	r4, [r8]
 8008ac0:	4627      	mov	r7, r4
 8008ac2:	2f00      	cmp	r7, #0
 8008ac4:	d143      	bne.n	8008b4e <_malloc_r+0xd6>
 8008ac6:	2c00      	cmp	r4, #0
 8008ac8:	d04b      	beq.n	8008b62 <_malloc_r+0xea>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	4639      	mov	r1, r7
 8008ace:	4630      	mov	r0, r6
 8008ad0:	eb04 0903 	add.w	r9, r4, r3
 8008ad4:	f000 fc80 	bl	80093d8 <_sbrk_r>
 8008ad8:	4581      	cmp	r9, r0
 8008ada:	d142      	bne.n	8008b62 <_malloc_r+0xea>
 8008adc:	6821      	ldr	r1, [r4, #0]
 8008ade:	1a6d      	subs	r5, r5, r1
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7ff ffa6 	bl	8008a34 <sbrk_aligned>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d03a      	beq.n	8008b62 <_malloc_r+0xea>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	442b      	add	r3, r5
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	f8d8 3000 	ldr.w	r3, [r8]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	bb62      	cbnz	r2, 8008b54 <_malloc_r+0xdc>
 8008afa:	f8c8 7000 	str.w	r7, [r8]
 8008afe:	e00f      	b.n	8008b20 <_malloc_r+0xa8>
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	1b52      	subs	r2, r2, r5
 8008b04:	d420      	bmi.n	8008b48 <_malloc_r+0xd0>
 8008b06:	2a0b      	cmp	r2, #11
 8008b08:	d917      	bls.n	8008b3a <_malloc_r+0xc2>
 8008b0a:	1961      	adds	r1, r4, r5
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	6025      	str	r5, [r4, #0]
 8008b10:	bf18      	it	ne
 8008b12:	6059      	strne	r1, [r3, #4]
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	bf08      	it	eq
 8008b18:	f8c8 1000 	streq.w	r1, [r8]
 8008b1c:	5162      	str	r2, [r4, r5]
 8008b1e:	604b      	str	r3, [r1, #4]
 8008b20:	4630      	mov	r0, r6
 8008b22:	f000 fa63 	bl	8008fec <__malloc_unlock>
 8008b26:	f104 000b 	add.w	r0, r4, #11
 8008b2a:	1d23      	adds	r3, r4, #4
 8008b2c:	f020 0007 	bic.w	r0, r0, #7
 8008b30:	1ac2      	subs	r2, r0, r3
 8008b32:	bf1c      	itt	ne
 8008b34:	1a1b      	subne	r3, r3, r0
 8008b36:	50a3      	strne	r3, [r4, r2]
 8008b38:	e7af      	b.n	8008a9a <_malloc_r+0x22>
 8008b3a:	6862      	ldr	r2, [r4, #4]
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	bf0c      	ite	eq
 8008b40:	f8c8 2000 	streq.w	r2, [r8]
 8008b44:	605a      	strne	r2, [r3, #4]
 8008b46:	e7eb      	b.n	8008b20 <_malloc_r+0xa8>
 8008b48:	4623      	mov	r3, r4
 8008b4a:	6864      	ldr	r4, [r4, #4]
 8008b4c:	e7ae      	b.n	8008aac <_malloc_r+0x34>
 8008b4e:	463c      	mov	r4, r7
 8008b50:	687f      	ldr	r7, [r7, #4]
 8008b52:	e7b6      	b.n	8008ac2 <_malloc_r+0x4a>
 8008b54:	461a      	mov	r2, r3
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	d1fb      	bne.n	8008b54 <_malloc_r+0xdc>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	6053      	str	r3, [r2, #4]
 8008b60:	e7de      	b.n	8008b20 <_malloc_r+0xa8>
 8008b62:	230c      	movs	r3, #12
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	4630      	mov	r0, r6
 8008b68:	f000 fa40 	bl	8008fec <__malloc_unlock>
 8008b6c:	e794      	b.n	8008a98 <_malloc_r+0x20>
 8008b6e:	6005      	str	r5, [r0, #0]
 8008b70:	e7d6      	b.n	8008b20 <_malloc_r+0xa8>
 8008b72:	bf00      	nop
 8008b74:	200005b0 	.word	0x200005b0

08008b78 <_scanf_chars>:
 8008b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	4615      	mov	r5, r2
 8008b7e:	688a      	ldr	r2, [r1, #8]
 8008b80:	4680      	mov	r8, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	b932      	cbnz	r2, 8008b94 <_scanf_chars+0x1c>
 8008b86:	698a      	ldr	r2, [r1, #24]
 8008b88:	2a00      	cmp	r2, #0
 8008b8a:	bf14      	ite	ne
 8008b8c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008b90:	2201      	moveq	r2, #1
 8008b92:	608a      	str	r2, [r1, #8]
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008c28 <_scanf_chars+0xb0>
 8008b9a:	06d1      	lsls	r1, r2, #27
 8008b9c:	bf5f      	itttt	pl
 8008b9e:	681a      	ldrpl	r2, [r3, #0]
 8008ba0:	1d11      	addpl	r1, r2, #4
 8008ba2:	6019      	strpl	r1, [r3, #0]
 8008ba4:	6816      	ldrpl	r6, [r2, #0]
 8008ba6:	2700      	movs	r7, #0
 8008ba8:	69a0      	ldr	r0, [r4, #24]
 8008baa:	b188      	cbz	r0, 8008bd0 <_scanf_chars+0x58>
 8008bac:	2801      	cmp	r0, #1
 8008bae:	d107      	bne.n	8008bc0 <_scanf_chars+0x48>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	781a      	ldrb	r2, [r3, #0]
 8008bb4:	6963      	ldr	r3, [r4, #20]
 8008bb6:	5c9b      	ldrb	r3, [r3, r2]
 8008bb8:	b953      	cbnz	r3, 8008bd0 <_scanf_chars+0x58>
 8008bba:	2f00      	cmp	r7, #0
 8008bbc:	d031      	beq.n	8008c22 <_scanf_chars+0xaa>
 8008bbe:	e022      	b.n	8008c06 <_scanf_chars+0x8e>
 8008bc0:	2802      	cmp	r0, #2
 8008bc2:	d120      	bne.n	8008c06 <_scanf_chars+0x8e>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008bcc:	071b      	lsls	r3, r3, #28
 8008bce:	d41a      	bmi.n	8008c06 <_scanf_chars+0x8e>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	06da      	lsls	r2, r3, #27
 8008bd4:	bf5e      	ittt	pl
 8008bd6:	682b      	ldrpl	r3, [r5, #0]
 8008bd8:	781b      	ldrbpl	r3, [r3, #0]
 8008bda:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008bde:	682a      	ldr	r2, [r5, #0]
 8008be0:	686b      	ldr	r3, [r5, #4]
 8008be2:	3201      	adds	r2, #1
 8008be4:	602a      	str	r2, [r5, #0]
 8008be6:	68a2      	ldr	r2, [r4, #8]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	3a01      	subs	r2, #1
 8008bec:	606b      	str	r3, [r5, #4]
 8008bee:	3701      	adds	r7, #1
 8008bf0:	60a2      	str	r2, [r4, #8]
 8008bf2:	b142      	cbz	r2, 8008c06 <_scanf_chars+0x8e>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dcd7      	bgt.n	8008ba8 <_scanf_chars+0x30>
 8008bf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4798      	blx	r3
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d0d0      	beq.n	8008ba8 <_scanf_chars+0x30>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	f013 0310 	ands.w	r3, r3, #16
 8008c0c:	d105      	bne.n	8008c1a <_scanf_chars+0xa2>
 8008c0e:	68e2      	ldr	r2, [r4, #12]
 8008c10:	3201      	adds	r2, #1
 8008c12:	60e2      	str	r2, [r4, #12]
 8008c14:	69a2      	ldr	r2, [r4, #24]
 8008c16:	b102      	cbz	r2, 8008c1a <_scanf_chars+0xa2>
 8008c18:	7033      	strb	r3, [r6, #0]
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	443b      	add	r3, r7
 8008c1e:	6123      	str	r3, [r4, #16]
 8008c20:	2000      	movs	r0, #0
 8008c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c26:	bf00      	nop
 8008c28:	08009bd1 	.word	0x08009bd1

08008c2c <_scanf_i>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	4698      	mov	r8, r3
 8008c32:	4b74      	ldr	r3, [pc, #464]	@ (8008e04 <_scanf_i+0x1d8>)
 8008c34:	460c      	mov	r4, r1
 8008c36:	4682      	mov	sl, r0
 8008c38:	4616      	mov	r6, r2
 8008c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	ab03      	add	r3, sp, #12
 8008c42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008c46:	4b70      	ldr	r3, [pc, #448]	@ (8008e08 <_scanf_i+0x1dc>)
 8008c48:	69a1      	ldr	r1, [r4, #24]
 8008c4a:	4a70      	ldr	r2, [pc, #448]	@ (8008e0c <_scanf_i+0x1e0>)
 8008c4c:	2903      	cmp	r1, #3
 8008c4e:	bf08      	it	eq
 8008c50:	461a      	moveq	r2, r3
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	9201      	str	r2, [sp, #4]
 8008c56:	1e5a      	subs	r2, r3, #1
 8008c58:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008c5c:	bf88      	it	hi
 8008c5e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008c62:	4627      	mov	r7, r4
 8008c64:	bf82      	ittt	hi
 8008c66:	eb03 0905 	addhi.w	r9, r3, r5
 8008c6a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008c6e:	60a3      	strhi	r3, [r4, #8]
 8008c70:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008c74:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008c78:	bf98      	it	ls
 8008c7a:	f04f 0900 	movls.w	r9, #0
 8008c7e:	6023      	str	r3, [r4, #0]
 8008c80:	463d      	mov	r5, r7
 8008c82:	f04f 0b00 	mov.w	fp, #0
 8008c86:	6831      	ldr	r1, [r6, #0]
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	7809      	ldrb	r1, [r1, #0]
 8008c8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008c90:	2202      	movs	r2, #2
 8008c92:	f7f7 facd 	bl	8000230 <memchr>
 8008c96:	b328      	cbz	r0, 8008ce4 <_scanf_i+0xb8>
 8008c98:	f1bb 0f01 	cmp.w	fp, #1
 8008c9c:	d159      	bne.n	8008d52 <_scanf_i+0x126>
 8008c9e:	6862      	ldr	r2, [r4, #4]
 8008ca0:	b92a      	cbnz	r2, 8008cae <_scanf_i+0x82>
 8008ca2:	6822      	ldr	r2, [r4, #0]
 8008ca4:	2108      	movs	r1, #8
 8008ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008caa:	6061      	str	r1, [r4, #4]
 8008cac:	6022      	str	r2, [r4, #0]
 8008cae:	6822      	ldr	r2, [r4, #0]
 8008cb0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008cb4:	6022      	str	r2, [r4, #0]
 8008cb6:	68a2      	ldr	r2, [r4, #8]
 8008cb8:	1e51      	subs	r1, r2, #1
 8008cba:	60a1      	str	r1, [r4, #8]
 8008cbc:	b192      	cbz	r2, 8008ce4 <_scanf_i+0xb8>
 8008cbe:	6832      	ldr	r2, [r6, #0]
 8008cc0:	1c51      	adds	r1, r2, #1
 8008cc2:	6031      	str	r1, [r6, #0]
 8008cc4:	7812      	ldrb	r2, [r2, #0]
 8008cc6:	f805 2b01 	strb.w	r2, [r5], #1
 8008cca:	6872      	ldr	r2, [r6, #4]
 8008ccc:	3a01      	subs	r2, #1
 8008cce:	2a00      	cmp	r2, #0
 8008cd0:	6072      	str	r2, [r6, #4]
 8008cd2:	dc07      	bgt.n	8008ce4 <_scanf_i+0xb8>
 8008cd4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4650      	mov	r0, sl
 8008cdc:	4790      	blx	r2
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f040 8085 	bne.w	8008dee <_scanf_i+0x1c2>
 8008ce4:	f10b 0b01 	add.w	fp, fp, #1
 8008ce8:	f1bb 0f03 	cmp.w	fp, #3
 8008cec:	d1cb      	bne.n	8008c86 <_scanf_i+0x5a>
 8008cee:	6863      	ldr	r3, [r4, #4]
 8008cf0:	b90b      	cbnz	r3, 8008cf6 <_scanf_i+0xca>
 8008cf2:	230a      	movs	r3, #10
 8008cf4:	6063      	str	r3, [r4, #4]
 8008cf6:	6863      	ldr	r3, [r4, #4]
 8008cf8:	4945      	ldr	r1, [pc, #276]	@ (8008e10 <_scanf_i+0x1e4>)
 8008cfa:	6960      	ldr	r0, [r4, #20]
 8008cfc:	1ac9      	subs	r1, r1, r3
 8008cfe:	f000 f889 	bl	8008e14 <__sccl>
 8008d02:	f04f 0b00 	mov.w	fp, #0
 8008d06:	68a3      	ldr	r3, [r4, #8]
 8008d08:	6822      	ldr	r2, [r4, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d03d      	beq.n	8008d8a <_scanf_i+0x15e>
 8008d0e:	6831      	ldr	r1, [r6, #0]
 8008d10:	6960      	ldr	r0, [r4, #20]
 8008d12:	f891 c000 	ldrb.w	ip, [r1]
 8008d16:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d035      	beq.n	8008d8a <_scanf_i+0x15e>
 8008d1e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008d22:	d124      	bne.n	8008d6e <_scanf_i+0x142>
 8008d24:	0510      	lsls	r0, r2, #20
 8008d26:	d522      	bpl.n	8008d6e <_scanf_i+0x142>
 8008d28:	f10b 0b01 	add.w	fp, fp, #1
 8008d2c:	f1b9 0f00 	cmp.w	r9, #0
 8008d30:	d003      	beq.n	8008d3a <_scanf_i+0x10e>
 8008d32:	3301      	adds	r3, #1
 8008d34:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008d38:	60a3      	str	r3, [r4, #8]
 8008d3a:	6873      	ldr	r3, [r6, #4]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	6073      	str	r3, [r6, #4]
 8008d42:	dd1b      	ble.n	8008d7c <_scanf_i+0x150>
 8008d44:	6833      	ldr	r3, [r6, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	6033      	str	r3, [r6, #0]
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	60a3      	str	r3, [r4, #8]
 8008d50:	e7d9      	b.n	8008d06 <_scanf_i+0xda>
 8008d52:	f1bb 0f02 	cmp.w	fp, #2
 8008d56:	d1ae      	bne.n	8008cb6 <_scanf_i+0x8a>
 8008d58:	6822      	ldr	r2, [r4, #0]
 8008d5a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008d5e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008d62:	d1bf      	bne.n	8008ce4 <_scanf_i+0xb8>
 8008d64:	2110      	movs	r1, #16
 8008d66:	6061      	str	r1, [r4, #4]
 8008d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d6c:	e7a2      	b.n	8008cb4 <_scanf_i+0x88>
 8008d6e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008d72:	6022      	str	r2, [r4, #0]
 8008d74:	780b      	ldrb	r3, [r1, #0]
 8008d76:	f805 3b01 	strb.w	r3, [r5], #1
 8008d7a:	e7de      	b.n	8008d3a <_scanf_i+0x10e>
 8008d7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d80:	4631      	mov	r1, r6
 8008d82:	4650      	mov	r0, sl
 8008d84:	4798      	blx	r3
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d0df      	beq.n	8008d4a <_scanf_i+0x11e>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	05d9      	lsls	r1, r3, #23
 8008d8e:	d50d      	bpl.n	8008dac <_scanf_i+0x180>
 8008d90:	42bd      	cmp	r5, r7
 8008d92:	d909      	bls.n	8008da8 <_scanf_i+0x17c>
 8008d94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d9c:	4632      	mov	r2, r6
 8008d9e:	4650      	mov	r0, sl
 8008da0:	4798      	blx	r3
 8008da2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8008da6:	464d      	mov	r5, r9
 8008da8:	42bd      	cmp	r5, r7
 8008daa:	d028      	beq.n	8008dfe <_scanf_i+0x1d2>
 8008dac:	6822      	ldr	r2, [r4, #0]
 8008dae:	f012 0210 	ands.w	r2, r2, #16
 8008db2:	d113      	bne.n	8008ddc <_scanf_i+0x1b0>
 8008db4:	702a      	strb	r2, [r5, #0]
 8008db6:	6863      	ldr	r3, [r4, #4]
 8008db8:	9e01      	ldr	r6, [sp, #4]
 8008dba:	4639      	mov	r1, r7
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	47b0      	blx	r6
 8008dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8008dc4:	6821      	ldr	r1, [r4, #0]
 8008dc6:	1d1a      	adds	r2, r3, #4
 8008dc8:	f8c8 2000 	str.w	r2, [r8]
 8008dcc:	f011 0f20 	tst.w	r1, #32
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	d00f      	beq.n	8008df4 <_scanf_i+0x1c8>
 8008dd4:	6018      	str	r0, [r3, #0]
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	60e3      	str	r3, [r4, #12]
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	1bed      	subs	r5, r5, r7
 8008de0:	445d      	add	r5, fp
 8008de2:	442b      	add	r3, r5
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2000      	movs	r0, #0
 8008de8:	b007      	add	sp, #28
 8008dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dee:	f04f 0b00 	mov.w	fp, #0
 8008df2:	e7ca      	b.n	8008d8a <_scanf_i+0x15e>
 8008df4:	07ca      	lsls	r2, r1, #31
 8008df6:	bf4c      	ite	mi
 8008df8:	8018      	strhmi	r0, [r3, #0]
 8008dfa:	6018      	strpl	r0, [r3, #0]
 8008dfc:	e7eb      	b.n	8008dd6 <_scanf_i+0x1aa>
 8008dfe:	2001      	movs	r0, #1
 8008e00:	e7f2      	b.n	8008de8 <_scanf_i+0x1bc>
 8008e02:	bf00      	nop
 8008e04:	08009b84 	.word	0x08009b84
 8008e08:	08008401 	.word	0x08008401
 8008e0c:	080091a5 	.word	0x080091a5
 8008e10:	08009ce5 	.word	0x08009ce5

08008e14 <__sccl>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	780b      	ldrb	r3, [r1, #0]
 8008e18:	4604      	mov	r4, r0
 8008e1a:	2b5e      	cmp	r3, #94	@ 0x5e
 8008e1c:	bf0b      	itete	eq
 8008e1e:	784b      	ldrbeq	r3, [r1, #1]
 8008e20:	1c4a      	addne	r2, r1, #1
 8008e22:	1c8a      	addeq	r2, r1, #2
 8008e24:	2100      	movne	r1, #0
 8008e26:	bf08      	it	eq
 8008e28:	2101      	moveq	r1, #1
 8008e2a:	3801      	subs	r0, #1
 8008e2c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008e30:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008e34:	42a8      	cmp	r0, r5
 8008e36:	d1fb      	bne.n	8008e30 <__sccl+0x1c>
 8008e38:	b90b      	cbnz	r3, 8008e3e <__sccl+0x2a>
 8008e3a:	1e50      	subs	r0, r2, #1
 8008e3c:	bd70      	pop	{r4, r5, r6, pc}
 8008e3e:	f081 0101 	eor.w	r1, r1, #1
 8008e42:	54e1      	strb	r1, [r4, r3]
 8008e44:	4610      	mov	r0, r2
 8008e46:	4602      	mov	r2, r0
 8008e48:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e4c:	2d2d      	cmp	r5, #45	@ 0x2d
 8008e4e:	d005      	beq.n	8008e5c <__sccl+0x48>
 8008e50:	2d5d      	cmp	r5, #93	@ 0x5d
 8008e52:	d016      	beq.n	8008e82 <__sccl+0x6e>
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	d0f1      	beq.n	8008e3c <__sccl+0x28>
 8008e58:	462b      	mov	r3, r5
 8008e5a:	e7f2      	b.n	8008e42 <__sccl+0x2e>
 8008e5c:	7846      	ldrb	r6, [r0, #1]
 8008e5e:	2e5d      	cmp	r6, #93	@ 0x5d
 8008e60:	d0fa      	beq.n	8008e58 <__sccl+0x44>
 8008e62:	42b3      	cmp	r3, r6
 8008e64:	dcf8      	bgt.n	8008e58 <__sccl+0x44>
 8008e66:	3002      	adds	r0, #2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	3201      	adds	r2, #1
 8008e6c:	4296      	cmp	r6, r2
 8008e6e:	54a1      	strb	r1, [r4, r2]
 8008e70:	dcfb      	bgt.n	8008e6a <__sccl+0x56>
 8008e72:	1af2      	subs	r2, r6, r3
 8008e74:	3a01      	subs	r2, #1
 8008e76:	1c5d      	adds	r5, r3, #1
 8008e78:	42b3      	cmp	r3, r6
 8008e7a:	bfa8      	it	ge
 8008e7c:	2200      	movge	r2, #0
 8008e7e:	18ab      	adds	r3, r5, r2
 8008e80:	e7e1      	b.n	8008e46 <__sccl+0x32>
 8008e82:	4610      	mov	r0, r2
 8008e84:	e7da      	b.n	8008e3c <__sccl+0x28>
	...

08008e88 <__sflush_r>:
 8008e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e90:	0716      	lsls	r6, r2, #28
 8008e92:	4605      	mov	r5, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	d454      	bmi.n	8008f42 <__sflush_r+0xba>
 8008e98:	684b      	ldr	r3, [r1, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dc02      	bgt.n	8008ea4 <__sflush_r+0x1c>
 8008e9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dd48      	ble.n	8008f36 <__sflush_r+0xae>
 8008ea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	d045      	beq.n	8008f36 <__sflush_r+0xae>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008eb0:	682f      	ldr	r7, [r5, #0]
 8008eb2:	6a21      	ldr	r1, [r4, #32]
 8008eb4:	602b      	str	r3, [r5, #0]
 8008eb6:	d030      	beq.n	8008f1a <__sflush_r+0x92>
 8008eb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	0759      	lsls	r1, r3, #29
 8008ebe:	d505      	bpl.n	8008ecc <__sflush_r+0x44>
 8008ec0:	6863      	ldr	r3, [r4, #4]
 8008ec2:	1ad2      	subs	r2, r2, r3
 8008ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ec6:	b10b      	cbz	r3, 8008ecc <__sflush_r+0x44>
 8008ec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008eca:	1ad2      	subs	r2, r2, r3
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ed0:	6a21      	ldr	r1, [r4, #32]
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b0      	blx	r6
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	d106      	bne.n	8008eea <__sflush_r+0x62>
 8008edc:	6829      	ldr	r1, [r5, #0]
 8008ede:	291d      	cmp	r1, #29
 8008ee0:	d82b      	bhi.n	8008f3a <__sflush_r+0xb2>
 8008ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f8c <__sflush_r+0x104>)
 8008ee4:	410a      	asrs	r2, r1
 8008ee6:	07d6      	lsls	r6, r2, #31
 8008ee8:	d427      	bmi.n	8008f3a <__sflush_r+0xb2>
 8008eea:	2200      	movs	r2, #0
 8008eec:	6062      	str	r2, [r4, #4]
 8008eee:	04d9      	lsls	r1, r3, #19
 8008ef0:	6922      	ldr	r2, [r4, #16]
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	d504      	bpl.n	8008f00 <__sflush_r+0x78>
 8008ef6:	1c42      	adds	r2, r0, #1
 8008ef8:	d101      	bne.n	8008efe <__sflush_r+0x76>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	b903      	cbnz	r3, 8008f00 <__sflush_r+0x78>
 8008efe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f02:	602f      	str	r7, [r5, #0]
 8008f04:	b1b9      	cbz	r1, 8008f36 <__sflush_r+0xae>
 8008f06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f0a:	4299      	cmp	r1, r3
 8008f0c:	d002      	beq.n	8008f14 <__sflush_r+0x8c>
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f7ff fb7a 	bl	8008608 <_free_r>
 8008f14:	2300      	movs	r3, #0
 8008f16:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f18:	e00d      	b.n	8008f36 <__sflush_r+0xae>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	47b0      	blx	r6
 8008f20:	4602      	mov	r2, r0
 8008f22:	1c50      	adds	r0, r2, #1
 8008f24:	d1c9      	bne.n	8008eba <__sflush_r+0x32>
 8008f26:	682b      	ldr	r3, [r5, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0c6      	beq.n	8008eba <__sflush_r+0x32>
 8008f2c:	2b1d      	cmp	r3, #29
 8008f2e:	d001      	beq.n	8008f34 <__sflush_r+0xac>
 8008f30:	2b16      	cmp	r3, #22
 8008f32:	d11e      	bne.n	8008f72 <__sflush_r+0xea>
 8008f34:	602f      	str	r7, [r5, #0]
 8008f36:	2000      	movs	r0, #0
 8008f38:	e022      	b.n	8008f80 <__sflush_r+0xf8>
 8008f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3e:	b21b      	sxth	r3, r3
 8008f40:	e01b      	b.n	8008f7a <__sflush_r+0xf2>
 8008f42:	690f      	ldr	r7, [r1, #16]
 8008f44:	2f00      	cmp	r7, #0
 8008f46:	d0f6      	beq.n	8008f36 <__sflush_r+0xae>
 8008f48:	0793      	lsls	r3, r2, #30
 8008f4a:	680e      	ldr	r6, [r1, #0]
 8008f4c:	bf08      	it	eq
 8008f4e:	694b      	ldreq	r3, [r1, #20]
 8008f50:	600f      	str	r7, [r1, #0]
 8008f52:	bf18      	it	ne
 8008f54:	2300      	movne	r3, #0
 8008f56:	eba6 0807 	sub.w	r8, r6, r7
 8008f5a:	608b      	str	r3, [r1, #8]
 8008f5c:	f1b8 0f00 	cmp.w	r8, #0
 8008f60:	dde9      	ble.n	8008f36 <__sflush_r+0xae>
 8008f62:	6a21      	ldr	r1, [r4, #32]
 8008f64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f66:	4643      	mov	r3, r8
 8008f68:	463a      	mov	r2, r7
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b0      	blx	r6
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	dc08      	bgt.n	8008f84 <__sflush_r+0xfc>
 8008f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	4407      	add	r7, r0
 8008f86:	eba8 0800 	sub.w	r8, r8, r0
 8008f8a:	e7e7      	b.n	8008f5c <__sflush_r+0xd4>
 8008f8c:	dfbffffe 	.word	0xdfbffffe

08008f90 <_fflush_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	690b      	ldr	r3, [r1, #16]
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b913      	cbnz	r3, 8008fa0 <_fflush_r+0x10>
 8008f9a:	2500      	movs	r5, #0
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	b118      	cbz	r0, 8008faa <_fflush_r+0x1a>
 8008fa2:	6a03      	ldr	r3, [r0, #32]
 8008fa4:	b90b      	cbnz	r3, 8008faa <_fflush_r+0x1a>
 8008fa6:	f7ff f999 	bl	80082dc <__sinit>
 8008faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0f3      	beq.n	8008f9a <_fflush_r+0xa>
 8008fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008fb4:	07d0      	lsls	r0, r2, #31
 8008fb6:	d404      	bmi.n	8008fc2 <_fflush_r+0x32>
 8008fb8:	0599      	lsls	r1, r3, #22
 8008fba:	d402      	bmi.n	8008fc2 <_fflush_r+0x32>
 8008fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fbe:	f7ff fb20 	bl	8008602 <__retarget_lock_acquire_recursive>
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	f7ff ff5f 	bl	8008e88 <__sflush_r>
 8008fca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fcc:	07da      	lsls	r2, r3, #31
 8008fce:	4605      	mov	r5, r0
 8008fd0:	d4e4      	bmi.n	8008f9c <_fflush_r+0xc>
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	059b      	lsls	r3, r3, #22
 8008fd6:	d4e1      	bmi.n	8008f9c <_fflush_r+0xc>
 8008fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fda:	f7ff fb13 	bl	8008604 <__retarget_lock_release_recursive>
 8008fde:	e7dd      	b.n	8008f9c <_fflush_r+0xc>

08008fe0 <__malloc_lock>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	@ (8008fe8 <__malloc_lock+0x8>)
 8008fe2:	f7ff bb0e 	b.w	8008602 <__retarget_lock_acquire_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	200005a8 	.word	0x200005a8

08008fec <__malloc_unlock>:
 8008fec:	4801      	ldr	r0, [pc, #4]	@ (8008ff4 <__malloc_unlock+0x8>)
 8008fee:	f7ff bb09 	b.w	8008604 <__retarget_lock_release_recursive>
 8008ff2:	bf00      	nop
 8008ff4:	200005a8 	.word	0x200005a8

08008ff8 <__submore>:
 8008ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009000:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009004:	4299      	cmp	r1, r3
 8009006:	d11d      	bne.n	8009044 <__submore+0x4c>
 8009008:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800900c:	f7ff fd34 	bl	8008a78 <_malloc_r>
 8009010:	b918      	cbnz	r0, 800901a <__submore+0x22>
 8009012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800901e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009020:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009024:	6360      	str	r0, [r4, #52]	@ 0x34
 8009026:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800902a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800902e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009032:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009036:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800903a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800903e:	6020      	str	r0, [r4, #0]
 8009040:	2000      	movs	r0, #0
 8009042:	e7e8      	b.n	8009016 <__submore+0x1e>
 8009044:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009046:	0077      	lsls	r7, r6, #1
 8009048:	463a      	mov	r2, r7
 800904a:	f000 f80f 	bl	800906c <_realloc_r>
 800904e:	4605      	mov	r5, r0
 8009050:	2800      	cmp	r0, #0
 8009052:	d0de      	beq.n	8009012 <__submore+0x1a>
 8009054:	eb00 0806 	add.w	r8, r0, r6
 8009058:	4601      	mov	r1, r0
 800905a:	4632      	mov	r2, r6
 800905c:	4640      	mov	r0, r8
 800905e:	f000 f9cb 	bl	80093f8 <memcpy>
 8009062:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009066:	f8c4 8000 	str.w	r8, [r4]
 800906a:	e7e9      	b.n	8009040 <__submore+0x48>

0800906c <_realloc_r>:
 800906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009070:	4680      	mov	r8, r0
 8009072:	4615      	mov	r5, r2
 8009074:	460c      	mov	r4, r1
 8009076:	b921      	cbnz	r1, 8009082 <_realloc_r+0x16>
 8009078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	4611      	mov	r1, r2
 800907e:	f7ff bcfb 	b.w	8008a78 <_malloc_r>
 8009082:	b92a      	cbnz	r2, 8009090 <_realloc_r+0x24>
 8009084:	f7ff fac0 	bl	8008608 <_free_r>
 8009088:	2400      	movs	r4, #0
 800908a:	4620      	mov	r0, r4
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	f000 f9c0 	bl	8009414 <_malloc_usable_size_r>
 8009094:	4285      	cmp	r5, r0
 8009096:	4606      	mov	r6, r0
 8009098:	d802      	bhi.n	80090a0 <_realloc_r+0x34>
 800909a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800909e:	d8f4      	bhi.n	800908a <_realloc_r+0x1e>
 80090a0:	4629      	mov	r1, r5
 80090a2:	4640      	mov	r0, r8
 80090a4:	f7ff fce8 	bl	8008a78 <_malloc_r>
 80090a8:	4607      	mov	r7, r0
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0ec      	beq.n	8009088 <_realloc_r+0x1c>
 80090ae:	42b5      	cmp	r5, r6
 80090b0:	462a      	mov	r2, r5
 80090b2:	4621      	mov	r1, r4
 80090b4:	bf28      	it	cs
 80090b6:	4632      	movcs	r2, r6
 80090b8:	f000 f99e 	bl	80093f8 <memcpy>
 80090bc:	4621      	mov	r1, r4
 80090be:	4640      	mov	r0, r8
 80090c0:	f7ff faa2 	bl	8008608 <_free_r>
 80090c4:	463c      	mov	r4, r7
 80090c6:	e7e0      	b.n	800908a <_realloc_r+0x1e>

080090c8 <_strtoul_l.constprop.0>:
 80090c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090cc:	4e34      	ldr	r6, [pc, #208]	@ (80091a0 <_strtoul_l.constprop.0+0xd8>)
 80090ce:	4686      	mov	lr, r0
 80090d0:	460d      	mov	r5, r1
 80090d2:	4628      	mov	r0, r5
 80090d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090d8:	5d37      	ldrb	r7, [r6, r4]
 80090da:	f017 0708 	ands.w	r7, r7, #8
 80090de:	d1f8      	bne.n	80090d2 <_strtoul_l.constprop.0+0xa>
 80090e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80090e2:	d12f      	bne.n	8009144 <_strtoul_l.constprop.0+0x7c>
 80090e4:	782c      	ldrb	r4, [r5, #0]
 80090e6:	2701      	movs	r7, #1
 80090e8:	1c85      	adds	r5, r0, #2
 80090ea:	f033 0010 	bics.w	r0, r3, #16
 80090ee:	d109      	bne.n	8009104 <_strtoul_l.constprop.0+0x3c>
 80090f0:	2c30      	cmp	r4, #48	@ 0x30
 80090f2:	d12c      	bne.n	800914e <_strtoul_l.constprop.0+0x86>
 80090f4:	7828      	ldrb	r0, [r5, #0]
 80090f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80090fa:	2858      	cmp	r0, #88	@ 0x58
 80090fc:	d127      	bne.n	800914e <_strtoul_l.constprop.0+0x86>
 80090fe:	786c      	ldrb	r4, [r5, #1]
 8009100:	2310      	movs	r3, #16
 8009102:	3502      	adds	r5, #2
 8009104:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009108:	2600      	movs	r6, #0
 800910a:	fbb8 f8f3 	udiv	r8, r8, r3
 800910e:	fb03 f908 	mul.w	r9, r3, r8
 8009112:	ea6f 0909 	mvn.w	r9, r9
 8009116:	4630      	mov	r0, r6
 8009118:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800911c:	f1bc 0f09 	cmp.w	ip, #9
 8009120:	d81c      	bhi.n	800915c <_strtoul_l.constprop.0+0x94>
 8009122:	4664      	mov	r4, ip
 8009124:	42a3      	cmp	r3, r4
 8009126:	dd2a      	ble.n	800917e <_strtoul_l.constprop.0+0xb6>
 8009128:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800912c:	d007      	beq.n	800913e <_strtoul_l.constprop.0+0x76>
 800912e:	4580      	cmp	r8, r0
 8009130:	d322      	bcc.n	8009178 <_strtoul_l.constprop.0+0xb0>
 8009132:	d101      	bne.n	8009138 <_strtoul_l.constprop.0+0x70>
 8009134:	45a1      	cmp	r9, r4
 8009136:	db1f      	blt.n	8009178 <_strtoul_l.constprop.0+0xb0>
 8009138:	fb00 4003 	mla	r0, r0, r3, r4
 800913c:	2601      	movs	r6, #1
 800913e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009142:	e7e9      	b.n	8009118 <_strtoul_l.constprop.0+0x50>
 8009144:	2c2b      	cmp	r4, #43	@ 0x2b
 8009146:	bf04      	itt	eq
 8009148:	782c      	ldrbeq	r4, [r5, #0]
 800914a:	1c85      	addeq	r5, r0, #2
 800914c:	e7cd      	b.n	80090ea <_strtoul_l.constprop.0+0x22>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1d8      	bne.n	8009104 <_strtoul_l.constprop.0+0x3c>
 8009152:	2c30      	cmp	r4, #48	@ 0x30
 8009154:	bf0c      	ite	eq
 8009156:	2308      	moveq	r3, #8
 8009158:	230a      	movne	r3, #10
 800915a:	e7d3      	b.n	8009104 <_strtoul_l.constprop.0+0x3c>
 800915c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009160:	f1bc 0f19 	cmp.w	ip, #25
 8009164:	d801      	bhi.n	800916a <_strtoul_l.constprop.0+0xa2>
 8009166:	3c37      	subs	r4, #55	@ 0x37
 8009168:	e7dc      	b.n	8009124 <_strtoul_l.constprop.0+0x5c>
 800916a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800916e:	f1bc 0f19 	cmp.w	ip, #25
 8009172:	d804      	bhi.n	800917e <_strtoul_l.constprop.0+0xb6>
 8009174:	3c57      	subs	r4, #87	@ 0x57
 8009176:	e7d5      	b.n	8009124 <_strtoul_l.constprop.0+0x5c>
 8009178:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800917c:	e7df      	b.n	800913e <_strtoul_l.constprop.0+0x76>
 800917e:	1c73      	adds	r3, r6, #1
 8009180:	d106      	bne.n	8009190 <_strtoul_l.constprop.0+0xc8>
 8009182:	2322      	movs	r3, #34	@ 0x22
 8009184:	f8ce 3000 	str.w	r3, [lr]
 8009188:	4630      	mov	r0, r6
 800918a:	b932      	cbnz	r2, 800919a <_strtoul_l.constprop.0+0xd2>
 800918c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009190:	b107      	cbz	r7, 8009194 <_strtoul_l.constprop.0+0xcc>
 8009192:	4240      	negs	r0, r0
 8009194:	2a00      	cmp	r2, #0
 8009196:	d0f9      	beq.n	800918c <_strtoul_l.constprop.0+0xc4>
 8009198:	b106      	cbz	r6, 800919c <_strtoul_l.constprop.0+0xd4>
 800919a:	1e69      	subs	r1, r5, #1
 800919c:	6011      	str	r1, [r2, #0]
 800919e:	e7f5      	b.n	800918c <_strtoul_l.constprop.0+0xc4>
 80091a0:	08009bd1 	.word	0x08009bd1

080091a4 <_strtoul_r>:
 80091a4:	f7ff bf90 	b.w	80090c8 <_strtoul_l.constprop.0>

080091a8 <__swbuf_r>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	460e      	mov	r6, r1
 80091ac:	4614      	mov	r4, r2
 80091ae:	4605      	mov	r5, r0
 80091b0:	b118      	cbz	r0, 80091ba <__swbuf_r+0x12>
 80091b2:	6a03      	ldr	r3, [r0, #32]
 80091b4:	b90b      	cbnz	r3, 80091ba <__swbuf_r+0x12>
 80091b6:	f7ff f891 	bl	80082dc <__sinit>
 80091ba:	69a3      	ldr	r3, [r4, #24]
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	071a      	lsls	r2, r3, #28
 80091c2:	d501      	bpl.n	80091c8 <__swbuf_r+0x20>
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	b943      	cbnz	r3, 80091da <__swbuf_r+0x32>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f82a 	bl	8009224 <__swsetup_r>
 80091d0:	b118      	cbz	r0, 80091da <__swbuf_r+0x32>
 80091d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80091d6:	4638      	mov	r0, r7
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	6922      	ldr	r2, [r4, #16]
 80091de:	1a98      	subs	r0, r3, r2
 80091e0:	6963      	ldr	r3, [r4, #20]
 80091e2:	b2f6      	uxtb	r6, r6
 80091e4:	4283      	cmp	r3, r0
 80091e6:	4637      	mov	r7, r6
 80091e8:	dc05      	bgt.n	80091f6 <__swbuf_r+0x4e>
 80091ea:	4621      	mov	r1, r4
 80091ec:	4628      	mov	r0, r5
 80091ee:	f7ff fecf 	bl	8008f90 <_fflush_r>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d1ed      	bne.n	80091d2 <__swbuf_r+0x2a>
 80091f6:	68a3      	ldr	r3, [r4, #8]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	60a3      	str	r3, [r4, #8]
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	6022      	str	r2, [r4, #0]
 8009202:	701e      	strb	r6, [r3, #0]
 8009204:	6962      	ldr	r2, [r4, #20]
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	429a      	cmp	r2, r3
 800920a:	d004      	beq.n	8009216 <__swbuf_r+0x6e>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	07db      	lsls	r3, r3, #31
 8009210:	d5e1      	bpl.n	80091d6 <__swbuf_r+0x2e>
 8009212:	2e0a      	cmp	r6, #10
 8009214:	d1df      	bne.n	80091d6 <__swbuf_r+0x2e>
 8009216:	4621      	mov	r1, r4
 8009218:	4628      	mov	r0, r5
 800921a:	f7ff feb9 	bl	8008f90 <_fflush_r>
 800921e:	2800      	cmp	r0, #0
 8009220:	d0d9      	beq.n	80091d6 <__swbuf_r+0x2e>
 8009222:	e7d6      	b.n	80091d2 <__swbuf_r+0x2a>

08009224 <__swsetup_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4b29      	ldr	r3, [pc, #164]	@ (80092cc <__swsetup_r+0xa8>)
 8009228:	4605      	mov	r5, r0
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	460c      	mov	r4, r1
 800922e:	b118      	cbz	r0, 8009238 <__swsetup_r+0x14>
 8009230:	6a03      	ldr	r3, [r0, #32]
 8009232:	b90b      	cbnz	r3, 8009238 <__swsetup_r+0x14>
 8009234:	f7ff f852 	bl	80082dc <__sinit>
 8009238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923c:	0719      	lsls	r1, r3, #28
 800923e:	d422      	bmi.n	8009286 <__swsetup_r+0x62>
 8009240:	06da      	lsls	r2, r3, #27
 8009242:	d407      	bmi.n	8009254 <__swsetup_r+0x30>
 8009244:	2209      	movs	r2, #9
 8009246:	602a      	str	r2, [r5, #0]
 8009248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800924c:	81a3      	strh	r3, [r4, #12]
 800924e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009252:	e033      	b.n	80092bc <__swsetup_r+0x98>
 8009254:	0758      	lsls	r0, r3, #29
 8009256:	d512      	bpl.n	800927e <__swsetup_r+0x5a>
 8009258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800925a:	b141      	cbz	r1, 800926e <__swsetup_r+0x4a>
 800925c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d002      	beq.n	800926a <__swsetup_r+0x46>
 8009264:	4628      	mov	r0, r5
 8009266:	f7ff f9cf 	bl	8008608 <_free_r>
 800926a:	2300      	movs	r3, #0
 800926c:	6363      	str	r3, [r4, #52]	@ 0x34
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	2300      	movs	r3, #0
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0308 	orr.w	r3, r3, #8
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	b94b      	cbnz	r3, 800929e <__swsetup_r+0x7a>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009294:	d003      	beq.n	800929e <__swsetup_r+0x7a>
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f000 f83f 	bl	800931c <__smakebuf_r>
 800929e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a2:	f013 0201 	ands.w	r2, r3, #1
 80092a6:	d00a      	beq.n	80092be <__swsetup_r+0x9a>
 80092a8:	2200      	movs	r2, #0
 80092aa:	60a2      	str	r2, [r4, #8]
 80092ac:	6962      	ldr	r2, [r4, #20]
 80092ae:	4252      	negs	r2, r2
 80092b0:	61a2      	str	r2, [r4, #24]
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	b942      	cbnz	r2, 80092c8 <__swsetup_r+0xa4>
 80092b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092ba:	d1c5      	bne.n	8009248 <__swsetup_r+0x24>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	0799      	lsls	r1, r3, #30
 80092c0:	bf58      	it	pl
 80092c2:	6962      	ldrpl	r2, [r4, #20]
 80092c4:	60a2      	str	r2, [r4, #8]
 80092c6:	e7f4      	b.n	80092b2 <__swsetup_r+0x8e>
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7f7      	b.n	80092bc <__swsetup_r+0x98>
 80092cc:	2000009c 	.word	0x2000009c

080092d0 <__swhatbuf_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	460c      	mov	r4, r1
 80092d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d8:	2900      	cmp	r1, #0
 80092da:	b096      	sub	sp, #88	@ 0x58
 80092dc:	4615      	mov	r5, r2
 80092de:	461e      	mov	r6, r3
 80092e0:	da0d      	bge.n	80092fe <__swhatbuf_r+0x2e>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092e8:	f04f 0100 	mov.w	r1, #0
 80092ec:	bf14      	ite	ne
 80092ee:	2340      	movne	r3, #64	@ 0x40
 80092f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092f4:	2000      	movs	r0, #0
 80092f6:	6031      	str	r1, [r6, #0]
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	b016      	add	sp, #88	@ 0x58
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	466a      	mov	r2, sp
 8009300:	f000 f848 	bl	8009394 <_fstat_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	dbec      	blt.n	80092e2 <__swhatbuf_r+0x12>
 8009308:	9901      	ldr	r1, [sp, #4]
 800930a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800930e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009312:	4259      	negs	r1, r3
 8009314:	4159      	adcs	r1, r3
 8009316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800931a:	e7eb      	b.n	80092f4 <__swhatbuf_r+0x24>

0800931c <__smakebuf_r>:
 800931c:	898b      	ldrh	r3, [r1, #12]
 800931e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009320:	079d      	lsls	r5, r3, #30
 8009322:	4606      	mov	r6, r0
 8009324:	460c      	mov	r4, r1
 8009326:	d507      	bpl.n	8009338 <__smakebuf_r+0x1c>
 8009328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	2301      	movs	r3, #1
 8009332:	6163      	str	r3, [r4, #20]
 8009334:	b003      	add	sp, #12
 8009336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009338:	ab01      	add	r3, sp, #4
 800933a:	466a      	mov	r2, sp
 800933c:	f7ff ffc8 	bl	80092d0 <__swhatbuf_r>
 8009340:	9f00      	ldr	r7, [sp, #0]
 8009342:	4605      	mov	r5, r0
 8009344:	4639      	mov	r1, r7
 8009346:	4630      	mov	r0, r6
 8009348:	f7ff fb96 	bl	8008a78 <_malloc_r>
 800934c:	b948      	cbnz	r0, 8009362 <__smakebuf_r+0x46>
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	059a      	lsls	r2, r3, #22
 8009354:	d4ee      	bmi.n	8009334 <__smakebuf_r+0x18>
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	f043 0302 	orr.w	r3, r3, #2
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	e7e2      	b.n	8009328 <__smakebuf_r+0xc>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	6020      	str	r0, [r4, #0]
 8009366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009372:	b15b      	cbz	r3, 800938c <__smakebuf_r+0x70>
 8009374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f81d 	bl	80093b8 <_isatty_r>
 800937e:	b128      	cbz	r0, 800938c <__smakebuf_r+0x70>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	431d      	orrs	r5, r3
 8009390:	81a5      	strh	r5, [r4, #12]
 8009392:	e7cf      	b.n	8009334 <__smakebuf_r+0x18>

08009394 <_fstat_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_fstat_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	f7fa fb19 	bl	80039d8 <_fstat>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_fstat_r+0x1c>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_fstat_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	200005a4 	.word	0x200005a4

080093b8 <_isatty_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	@ (80093d4 <_isatty_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7fa fb18 	bl	80039f8 <_isatty>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_isatty_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_isatty_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	200005a4 	.word	0x200005a4

080093d8 <_sbrk_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d06      	ldr	r5, [pc, #24]	@ (80093f4 <_sbrk_r+0x1c>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7fa fb20 	bl	8003a28 <_sbrk>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_sbrk_r+0x1a>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_sbrk_r+0x1a>
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	200005a4 	.word	0x200005a4

080093f8 <memcpy>:
 80093f8:	440a      	add	r2, r1
 80093fa:	4291      	cmp	r1, r2
 80093fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009400:	d100      	bne.n	8009404 <memcpy+0xc>
 8009402:	4770      	bx	lr
 8009404:	b510      	push	{r4, lr}
 8009406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800940e:	4291      	cmp	r1, r2
 8009410:	d1f9      	bne.n	8009406 <memcpy+0xe>
 8009412:	bd10      	pop	{r4, pc}

08009414 <_malloc_usable_size_r>:
 8009414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009418:	1f18      	subs	r0, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	bfbc      	itt	lt
 800941e:	580b      	ldrlt	r3, [r1, r0]
 8009420:	18c0      	addlt	r0, r0, r3
 8009422:	4770      	bx	lr

08009424 <atan2>:
 8009424:	f000 b800 	b.w	8009428 <__ieee754_atan2>

08009428 <__ieee754_atan2>:
 8009428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800942c:	ec57 6b11 	vmov	r6, r7, d1
 8009430:	4273      	negs	r3, r6
 8009432:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80095b0 <__ieee754_atan2+0x188>
 8009436:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800943a:	4333      	orrs	r3, r6
 800943c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009440:	4543      	cmp	r3, r8
 8009442:	ec51 0b10 	vmov	r0, r1, d0
 8009446:	4635      	mov	r5, r6
 8009448:	d809      	bhi.n	800945e <__ieee754_atan2+0x36>
 800944a:	4244      	negs	r4, r0
 800944c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009450:	4304      	orrs	r4, r0
 8009452:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009456:	4544      	cmp	r4, r8
 8009458:	468e      	mov	lr, r1
 800945a:	4681      	mov	r9, r0
 800945c:	d907      	bls.n	800946e <__ieee754_atan2+0x46>
 800945e:	4632      	mov	r2, r6
 8009460:	463b      	mov	r3, r7
 8009462:	f7f6 ff3b 	bl	80002dc <__adddf3>
 8009466:	ec41 0b10 	vmov	d0, r0, r1
 800946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8009472:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8009476:	4334      	orrs	r4, r6
 8009478:	d103      	bne.n	8009482 <__ieee754_atan2+0x5a>
 800947a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800947e:	f000 b8c7 	b.w	8009610 <atan>
 8009482:	17bc      	asrs	r4, r7, #30
 8009484:	f004 0402 	and.w	r4, r4, #2
 8009488:	ea53 0909 	orrs.w	r9, r3, r9
 800948c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009490:	d107      	bne.n	80094a2 <__ieee754_atan2+0x7a>
 8009492:	2c02      	cmp	r4, #2
 8009494:	d05f      	beq.n	8009556 <__ieee754_atan2+0x12e>
 8009496:	2c03      	cmp	r4, #3
 8009498:	d1e5      	bne.n	8009466 <__ieee754_atan2+0x3e>
 800949a:	a141      	add	r1, pc, #260	@ (adr r1, 80095a0 <__ieee754_atan2+0x178>)
 800949c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094a0:	e7e1      	b.n	8009466 <__ieee754_atan2+0x3e>
 80094a2:	4315      	orrs	r5, r2
 80094a4:	d106      	bne.n	80094b4 <__ieee754_atan2+0x8c>
 80094a6:	f1be 0f00 	cmp.w	lr, #0
 80094aa:	da5f      	bge.n	800956c <__ieee754_atan2+0x144>
 80094ac:	a13e      	add	r1, pc, #248	@ (adr r1, 80095a8 <__ieee754_atan2+0x180>)
 80094ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094b2:	e7d8      	b.n	8009466 <__ieee754_atan2+0x3e>
 80094b4:	4542      	cmp	r2, r8
 80094b6:	d10f      	bne.n	80094d8 <__ieee754_atan2+0xb0>
 80094b8:	4293      	cmp	r3, r2
 80094ba:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80094be:	d107      	bne.n	80094d0 <__ieee754_atan2+0xa8>
 80094c0:	2c02      	cmp	r4, #2
 80094c2:	d84c      	bhi.n	800955e <__ieee754_atan2+0x136>
 80094c4:	4b34      	ldr	r3, [pc, #208]	@ (8009598 <__ieee754_atan2+0x170>)
 80094c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094ce:	e7ca      	b.n	8009466 <__ieee754_atan2+0x3e>
 80094d0:	2c02      	cmp	r4, #2
 80094d2:	d848      	bhi.n	8009566 <__ieee754_atan2+0x13e>
 80094d4:	4b31      	ldr	r3, [pc, #196]	@ (800959c <__ieee754_atan2+0x174>)
 80094d6:	e7f6      	b.n	80094c6 <__ieee754_atan2+0x9e>
 80094d8:	4543      	cmp	r3, r8
 80094da:	d0e4      	beq.n	80094a6 <__ieee754_atan2+0x7e>
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80094e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094e6:	da1e      	bge.n	8009526 <__ieee754_atan2+0xfe>
 80094e8:	2f00      	cmp	r7, #0
 80094ea:	da01      	bge.n	80094f0 <__ieee754_atan2+0xc8>
 80094ec:	323c      	adds	r2, #60	@ 0x3c
 80094ee:	db1e      	blt.n	800952e <__ieee754_atan2+0x106>
 80094f0:	4632      	mov	r2, r6
 80094f2:	463b      	mov	r3, r7
 80094f4:	f7f7 f9d2 	bl	800089c <__aeabi_ddiv>
 80094f8:	ec41 0b10 	vmov	d0, r0, r1
 80094fc:	f000 fa20 	bl	8009940 <fabs>
 8009500:	f000 f886 	bl	8009610 <atan>
 8009504:	ec51 0b10 	vmov	r0, r1, d0
 8009508:	2c01      	cmp	r4, #1
 800950a:	d013      	beq.n	8009534 <__ieee754_atan2+0x10c>
 800950c:	2c02      	cmp	r4, #2
 800950e:	d015      	beq.n	800953c <__ieee754_atan2+0x114>
 8009510:	2c00      	cmp	r4, #0
 8009512:	d0a8      	beq.n	8009466 <__ieee754_atan2+0x3e>
 8009514:	a318      	add	r3, pc, #96	@ (adr r3, 8009578 <__ieee754_atan2+0x150>)
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f7f6 fedd 	bl	80002d8 <__aeabi_dsub>
 800951e:	a318      	add	r3, pc, #96	@ (adr r3, 8009580 <__ieee754_atan2+0x158>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	e014      	b.n	8009550 <__ieee754_atan2+0x128>
 8009526:	a118      	add	r1, pc, #96	@ (adr r1, 8009588 <__ieee754_atan2+0x160>)
 8009528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952c:	e7ec      	b.n	8009508 <__ieee754_atan2+0xe0>
 800952e:	2000      	movs	r0, #0
 8009530:	2100      	movs	r1, #0
 8009532:	e7e9      	b.n	8009508 <__ieee754_atan2+0xe0>
 8009534:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009538:	4619      	mov	r1, r3
 800953a:	e794      	b.n	8009466 <__ieee754_atan2+0x3e>
 800953c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009578 <__ieee754_atan2+0x150>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f7f6 fec9 	bl	80002d8 <__aeabi_dsub>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	a10d      	add	r1, pc, #52	@ (adr r1, 8009580 <__ieee754_atan2+0x158>)
 800954c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009550:	f7f6 fec2 	bl	80002d8 <__aeabi_dsub>
 8009554:	e787      	b.n	8009466 <__ieee754_atan2+0x3e>
 8009556:	a10a      	add	r1, pc, #40	@ (adr r1, 8009580 <__ieee754_atan2+0x158>)
 8009558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800955c:	e783      	b.n	8009466 <__ieee754_atan2+0x3e>
 800955e:	a10c      	add	r1, pc, #48	@ (adr r1, 8009590 <__ieee754_atan2+0x168>)
 8009560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009564:	e77f      	b.n	8009466 <__ieee754_atan2+0x3e>
 8009566:	2000      	movs	r0, #0
 8009568:	2100      	movs	r1, #0
 800956a:	e77c      	b.n	8009466 <__ieee754_atan2+0x3e>
 800956c:	a106      	add	r1, pc, #24	@ (adr r1, 8009588 <__ieee754_atan2+0x160>)
 800956e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009572:	e778      	b.n	8009466 <__ieee754_atan2+0x3e>
 8009574:	f3af 8000 	nop.w
 8009578:	33145c07 	.word	0x33145c07
 800957c:	3ca1a626 	.word	0x3ca1a626
 8009580:	54442d18 	.word	0x54442d18
 8009584:	400921fb 	.word	0x400921fb
 8009588:	54442d18 	.word	0x54442d18
 800958c:	3ff921fb 	.word	0x3ff921fb
 8009590:	54442d18 	.word	0x54442d18
 8009594:	3fe921fb 	.word	0x3fe921fb
 8009598:	08009d08 	.word	0x08009d08
 800959c:	08009cf0 	.word	0x08009cf0
 80095a0:	54442d18 	.word	0x54442d18
 80095a4:	c00921fb 	.word	0xc00921fb
 80095a8:	54442d18 	.word	0x54442d18
 80095ac:	bff921fb 	.word	0xbff921fb
 80095b0:	7ff00000 	.word	0x7ff00000

080095b4 <sqrt>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	ed2d 8b02 	vpush	{d8}
 80095ba:	ec55 4b10 	vmov	r4, r5, d0
 80095be:	f000 f9c7 	bl	8009950 <__ieee754_sqrt>
 80095c2:	4622      	mov	r2, r4
 80095c4:	462b      	mov	r3, r5
 80095c6:	4620      	mov	r0, r4
 80095c8:	4629      	mov	r1, r5
 80095ca:	eeb0 8a40 	vmov.f32	s16, s0
 80095ce:	eef0 8a60 	vmov.f32	s17, s1
 80095d2:	f7f7 fad3 	bl	8000b7c <__aeabi_dcmpun>
 80095d6:	b990      	cbnz	r0, 80095fe <sqrt+0x4a>
 80095d8:	2200      	movs	r2, #0
 80095da:	2300      	movs	r3, #0
 80095dc:	4620      	mov	r0, r4
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f7 faa4 	bl	8000b2c <__aeabi_dcmplt>
 80095e4:	b158      	cbz	r0, 80095fe <sqrt+0x4a>
 80095e6:	f7fe ffe1 	bl	80085ac <__errno>
 80095ea:	2321      	movs	r3, #33	@ 0x21
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	2300      	movs	r3, #0
 80095f2:	4610      	mov	r0, r2
 80095f4:	4619      	mov	r1, r3
 80095f6:	f7f7 f951 	bl	800089c <__aeabi_ddiv>
 80095fa:	ec41 0b18 	vmov	d8, r0, r1
 80095fe:	eeb0 0a48 	vmov.f32	s0, s16
 8009602:	eef0 0a68 	vmov.f32	s1, s17
 8009606:	ecbd 8b02 	vpop	{d8}
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	0000      	movs	r0, r0
	...

08009610 <atan>:
 8009610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ec55 4b10 	vmov	r4, r5, d0
 8009618:	4bbf      	ldr	r3, [pc, #764]	@ (8009918 <atan+0x308>)
 800961a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800961e:	429e      	cmp	r6, r3
 8009620:	46ab      	mov	fp, r5
 8009622:	d918      	bls.n	8009656 <atan+0x46>
 8009624:	4bbd      	ldr	r3, [pc, #756]	@ (800991c <atan+0x30c>)
 8009626:	429e      	cmp	r6, r3
 8009628:	d801      	bhi.n	800962e <atan+0x1e>
 800962a:	d109      	bne.n	8009640 <atan+0x30>
 800962c:	b144      	cbz	r4, 8009640 <atan+0x30>
 800962e:	4622      	mov	r2, r4
 8009630:	462b      	mov	r3, r5
 8009632:	4620      	mov	r0, r4
 8009634:	4629      	mov	r1, r5
 8009636:	f7f6 fe51 	bl	80002dc <__adddf3>
 800963a:	4604      	mov	r4, r0
 800963c:	460d      	mov	r5, r1
 800963e:	e006      	b.n	800964e <atan+0x3e>
 8009640:	f1bb 0f00 	cmp.w	fp, #0
 8009644:	f340 812b 	ble.w	800989e <atan+0x28e>
 8009648:	a597      	add	r5, pc, #604	@ (adr r5, 80098a8 <atan+0x298>)
 800964a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800964e:	ec45 4b10 	vmov	d0, r4, r5
 8009652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009656:	4bb2      	ldr	r3, [pc, #712]	@ (8009920 <atan+0x310>)
 8009658:	429e      	cmp	r6, r3
 800965a:	d813      	bhi.n	8009684 <atan+0x74>
 800965c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009660:	429e      	cmp	r6, r3
 8009662:	d80c      	bhi.n	800967e <atan+0x6e>
 8009664:	a392      	add	r3, pc, #584	@ (adr r3, 80098b0 <atan+0x2a0>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	4620      	mov	r0, r4
 800966c:	4629      	mov	r1, r5
 800966e:	f7f6 fe35 	bl	80002dc <__adddf3>
 8009672:	4bac      	ldr	r3, [pc, #688]	@ (8009924 <atan+0x314>)
 8009674:	2200      	movs	r2, #0
 8009676:	f7f7 fa77 	bl	8000b68 <__aeabi_dcmpgt>
 800967a:	2800      	cmp	r0, #0
 800967c:	d1e7      	bne.n	800964e <atan+0x3e>
 800967e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009682:	e029      	b.n	80096d8 <atan+0xc8>
 8009684:	f000 f95c 	bl	8009940 <fabs>
 8009688:	4ba7      	ldr	r3, [pc, #668]	@ (8009928 <atan+0x318>)
 800968a:	429e      	cmp	r6, r3
 800968c:	ec55 4b10 	vmov	r4, r5, d0
 8009690:	f200 80bc 	bhi.w	800980c <atan+0x1fc>
 8009694:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009698:	429e      	cmp	r6, r3
 800969a:	f200 809e 	bhi.w	80097da <atan+0x1ca>
 800969e:	4622      	mov	r2, r4
 80096a0:	462b      	mov	r3, r5
 80096a2:	4620      	mov	r0, r4
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7f6 fe19 	bl	80002dc <__adddf3>
 80096aa:	4b9e      	ldr	r3, [pc, #632]	@ (8009924 <atan+0x314>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	f7f6 fe13 	bl	80002d8 <__aeabi_dsub>
 80096b2:	2200      	movs	r2, #0
 80096b4:	4606      	mov	r6, r0
 80096b6:	460f      	mov	r7, r1
 80096b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f6 fe0c 	bl	80002dc <__adddf3>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f7 f8e6 	bl	800089c <__aeabi_ddiv>
 80096d0:	f04f 0a00 	mov.w	sl, #0
 80096d4:	4604      	mov	r4, r0
 80096d6:	460d      	mov	r5, r1
 80096d8:	4622      	mov	r2, r4
 80096da:	462b      	mov	r3, r5
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f6 ffb2 	bl	8000648 <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4680      	mov	r8, r0
 80096ea:	4689      	mov	r9, r1
 80096ec:	f7f6 ffac 	bl	8000648 <__aeabi_dmul>
 80096f0:	a371      	add	r3, pc, #452	@ (adr r3, 80098b8 <atan+0x2a8>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	4606      	mov	r6, r0
 80096f8:	460f      	mov	r7, r1
 80096fa:	f7f6 ffa5 	bl	8000648 <__aeabi_dmul>
 80096fe:	a370      	add	r3, pc, #448	@ (adr r3, 80098c0 <atan+0x2b0>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f6 fdea 	bl	80002dc <__adddf3>
 8009708:	4632      	mov	r2, r6
 800970a:	463b      	mov	r3, r7
 800970c:	f7f6 ff9c 	bl	8000648 <__aeabi_dmul>
 8009710:	a36d      	add	r3, pc, #436	@ (adr r3, 80098c8 <atan+0x2b8>)
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	f7f6 fde1 	bl	80002dc <__adddf3>
 800971a:	4632      	mov	r2, r6
 800971c:	463b      	mov	r3, r7
 800971e:	f7f6 ff93 	bl	8000648 <__aeabi_dmul>
 8009722:	a36b      	add	r3, pc, #428	@ (adr r3, 80098d0 <atan+0x2c0>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fdd8 	bl	80002dc <__adddf3>
 800972c:	4632      	mov	r2, r6
 800972e:	463b      	mov	r3, r7
 8009730:	f7f6 ff8a 	bl	8000648 <__aeabi_dmul>
 8009734:	a368      	add	r3, pc, #416	@ (adr r3, 80098d8 <atan+0x2c8>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	f7f6 fdcf 	bl	80002dc <__adddf3>
 800973e:	4632      	mov	r2, r6
 8009740:	463b      	mov	r3, r7
 8009742:	f7f6 ff81 	bl	8000648 <__aeabi_dmul>
 8009746:	a366      	add	r3, pc, #408	@ (adr r3, 80098e0 <atan+0x2d0>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f7f6 fdc6 	bl	80002dc <__adddf3>
 8009750:	4642      	mov	r2, r8
 8009752:	464b      	mov	r3, r9
 8009754:	f7f6 ff78 	bl	8000648 <__aeabi_dmul>
 8009758:	a363      	add	r3, pc, #396	@ (adr r3, 80098e8 <atan+0x2d8>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	4680      	mov	r8, r0
 8009760:	4689      	mov	r9, r1
 8009762:	4630      	mov	r0, r6
 8009764:	4639      	mov	r1, r7
 8009766:	f7f6 ff6f 	bl	8000648 <__aeabi_dmul>
 800976a:	a361      	add	r3, pc, #388	@ (adr r3, 80098f0 <atan+0x2e0>)
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f7f6 fdb2 	bl	80002d8 <__aeabi_dsub>
 8009774:	4632      	mov	r2, r6
 8009776:	463b      	mov	r3, r7
 8009778:	f7f6 ff66 	bl	8000648 <__aeabi_dmul>
 800977c:	a35e      	add	r3, pc, #376	@ (adr r3, 80098f8 <atan+0x2e8>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f6 fda9 	bl	80002d8 <__aeabi_dsub>
 8009786:	4632      	mov	r2, r6
 8009788:	463b      	mov	r3, r7
 800978a:	f7f6 ff5d 	bl	8000648 <__aeabi_dmul>
 800978e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009900 <atan+0x2f0>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f6 fda0 	bl	80002d8 <__aeabi_dsub>
 8009798:	4632      	mov	r2, r6
 800979a:	463b      	mov	r3, r7
 800979c:	f7f6 ff54 	bl	8000648 <__aeabi_dmul>
 80097a0:	a359      	add	r3, pc, #356	@ (adr r3, 8009908 <atan+0x2f8>)
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f7f6 fd97 	bl	80002d8 <__aeabi_dsub>
 80097aa:	4632      	mov	r2, r6
 80097ac:	463b      	mov	r3, r7
 80097ae:	f7f6 ff4b 	bl	8000648 <__aeabi_dmul>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4640      	mov	r0, r8
 80097b8:	4649      	mov	r1, r9
 80097ba:	f7f6 fd8f 	bl	80002dc <__adddf3>
 80097be:	4622      	mov	r2, r4
 80097c0:	462b      	mov	r3, r5
 80097c2:	f7f6 ff41 	bl	8000648 <__aeabi_dmul>
 80097c6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	d148      	bne.n	8009862 <atan+0x252>
 80097d0:	4620      	mov	r0, r4
 80097d2:	4629      	mov	r1, r5
 80097d4:	f7f6 fd80 	bl	80002d8 <__aeabi_dsub>
 80097d8:	e72f      	b.n	800963a <atan+0x2a>
 80097da:	4b52      	ldr	r3, [pc, #328]	@ (8009924 <atan+0x314>)
 80097dc:	2200      	movs	r2, #0
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f6 fd79 	bl	80002d8 <__aeabi_dsub>
 80097e6:	4b4f      	ldr	r3, [pc, #316]	@ (8009924 <atan+0x314>)
 80097e8:	4606      	mov	r6, r0
 80097ea:	460f      	mov	r7, r1
 80097ec:	2200      	movs	r2, #0
 80097ee:	4620      	mov	r0, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	f7f6 fd73 	bl	80002dc <__adddf3>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4630      	mov	r0, r6
 80097fc:	4639      	mov	r1, r7
 80097fe:	f7f7 f84d 	bl	800089c <__aeabi_ddiv>
 8009802:	f04f 0a01 	mov.w	sl, #1
 8009806:	4604      	mov	r4, r0
 8009808:	460d      	mov	r5, r1
 800980a:	e765      	b.n	80096d8 <atan+0xc8>
 800980c:	4b47      	ldr	r3, [pc, #284]	@ (800992c <atan+0x31c>)
 800980e:	429e      	cmp	r6, r3
 8009810:	d21c      	bcs.n	800984c <atan+0x23c>
 8009812:	4b47      	ldr	r3, [pc, #284]	@ (8009930 <atan+0x320>)
 8009814:	2200      	movs	r2, #0
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	f7f6 fd5d 	bl	80002d8 <__aeabi_dsub>
 800981e:	4b44      	ldr	r3, [pc, #272]	@ (8009930 <atan+0x320>)
 8009820:	4606      	mov	r6, r0
 8009822:	460f      	mov	r7, r1
 8009824:	2200      	movs	r2, #0
 8009826:	4620      	mov	r0, r4
 8009828:	4629      	mov	r1, r5
 800982a:	f7f6 ff0d 	bl	8000648 <__aeabi_dmul>
 800982e:	4b3d      	ldr	r3, [pc, #244]	@ (8009924 <atan+0x314>)
 8009830:	2200      	movs	r2, #0
 8009832:	f7f6 fd53 	bl	80002dc <__adddf3>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4630      	mov	r0, r6
 800983c:	4639      	mov	r1, r7
 800983e:	f7f7 f82d 	bl	800089c <__aeabi_ddiv>
 8009842:	f04f 0a02 	mov.w	sl, #2
 8009846:	4604      	mov	r4, r0
 8009848:	460d      	mov	r5, r1
 800984a:	e745      	b.n	80096d8 <atan+0xc8>
 800984c:	4622      	mov	r2, r4
 800984e:	462b      	mov	r3, r5
 8009850:	4938      	ldr	r1, [pc, #224]	@ (8009934 <atan+0x324>)
 8009852:	2000      	movs	r0, #0
 8009854:	f7f7 f822 	bl	800089c <__aeabi_ddiv>
 8009858:	f04f 0a03 	mov.w	sl, #3
 800985c:	4604      	mov	r4, r0
 800985e:	460d      	mov	r5, r1
 8009860:	e73a      	b.n	80096d8 <atan+0xc8>
 8009862:	4b35      	ldr	r3, [pc, #212]	@ (8009938 <atan+0x328>)
 8009864:	4e35      	ldr	r6, [pc, #212]	@ (800993c <atan+0x32c>)
 8009866:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f7f6 fd33 	bl	80002d8 <__aeabi_dsub>
 8009872:	4622      	mov	r2, r4
 8009874:	462b      	mov	r3, r5
 8009876:	f7f6 fd2f 	bl	80002d8 <__aeabi_dsub>
 800987a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009886:	f7f6 fd27 	bl	80002d8 <__aeabi_dsub>
 800988a:	f1bb 0f00 	cmp.w	fp, #0
 800988e:	4604      	mov	r4, r0
 8009890:	460d      	mov	r5, r1
 8009892:	f6bf aedc 	bge.w	800964e <atan+0x3e>
 8009896:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800989a:	461d      	mov	r5, r3
 800989c:	e6d7      	b.n	800964e <atan+0x3e>
 800989e:	a51c      	add	r5, pc, #112	@ (adr r5, 8009910 <atan+0x300>)
 80098a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80098a4:	e6d3      	b.n	800964e <atan+0x3e>
 80098a6:	bf00      	nop
 80098a8:	54442d18 	.word	0x54442d18
 80098ac:	3ff921fb 	.word	0x3ff921fb
 80098b0:	8800759c 	.word	0x8800759c
 80098b4:	7e37e43c 	.word	0x7e37e43c
 80098b8:	e322da11 	.word	0xe322da11
 80098bc:	3f90ad3a 	.word	0x3f90ad3a
 80098c0:	24760deb 	.word	0x24760deb
 80098c4:	3fa97b4b 	.word	0x3fa97b4b
 80098c8:	a0d03d51 	.word	0xa0d03d51
 80098cc:	3fb10d66 	.word	0x3fb10d66
 80098d0:	c54c206e 	.word	0xc54c206e
 80098d4:	3fb745cd 	.word	0x3fb745cd
 80098d8:	920083ff 	.word	0x920083ff
 80098dc:	3fc24924 	.word	0x3fc24924
 80098e0:	5555550d 	.word	0x5555550d
 80098e4:	3fd55555 	.word	0x3fd55555
 80098e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80098ec:	bfa2b444 	.word	0xbfa2b444
 80098f0:	52defd9a 	.word	0x52defd9a
 80098f4:	3fadde2d 	.word	0x3fadde2d
 80098f8:	af749a6d 	.word	0xaf749a6d
 80098fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009900:	fe231671 	.word	0xfe231671
 8009904:	3fbc71c6 	.word	0x3fbc71c6
 8009908:	9998ebc4 	.word	0x9998ebc4
 800990c:	3fc99999 	.word	0x3fc99999
 8009910:	54442d18 	.word	0x54442d18
 8009914:	bff921fb 	.word	0xbff921fb
 8009918:	440fffff 	.word	0x440fffff
 800991c:	7ff00000 	.word	0x7ff00000
 8009920:	3fdbffff 	.word	0x3fdbffff
 8009924:	3ff00000 	.word	0x3ff00000
 8009928:	3ff2ffff 	.word	0x3ff2ffff
 800992c:	40038000 	.word	0x40038000
 8009930:	3ff80000 	.word	0x3ff80000
 8009934:	bff00000 	.word	0xbff00000
 8009938:	08009d20 	.word	0x08009d20
 800993c:	08009d40 	.word	0x08009d40

08009940 <fabs>:
 8009940:	ec51 0b10 	vmov	r0, r1, d0
 8009944:	4602      	mov	r2, r0
 8009946:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800994a:	ec43 2b10 	vmov	d0, r2, r3
 800994e:	4770      	bx	lr

08009950 <__ieee754_sqrt>:
 8009950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4a68      	ldr	r2, [pc, #416]	@ (8009af8 <__ieee754_sqrt+0x1a8>)
 8009956:	ec55 4b10 	vmov	r4, r5, d0
 800995a:	43aa      	bics	r2, r5
 800995c:	462b      	mov	r3, r5
 800995e:	4621      	mov	r1, r4
 8009960:	d110      	bne.n	8009984 <__ieee754_sqrt+0x34>
 8009962:	4622      	mov	r2, r4
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fe6e 	bl	8000648 <__aeabi_dmul>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4620      	mov	r0, r4
 8009972:	4629      	mov	r1, r5
 8009974:	f7f6 fcb2 	bl	80002dc <__adddf3>
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	ec45 4b10 	vmov	d0, r4, r5
 8009980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009984:	2d00      	cmp	r5, #0
 8009986:	dc0e      	bgt.n	80099a6 <__ieee754_sqrt+0x56>
 8009988:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800998c:	4322      	orrs	r2, r4
 800998e:	d0f5      	beq.n	800997c <__ieee754_sqrt+0x2c>
 8009990:	b19d      	cbz	r5, 80099ba <__ieee754_sqrt+0x6a>
 8009992:	4622      	mov	r2, r4
 8009994:	4620      	mov	r0, r4
 8009996:	4629      	mov	r1, r5
 8009998:	f7f6 fc9e 	bl	80002d8 <__aeabi_dsub>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	f7f6 ff7c 	bl	800089c <__aeabi_ddiv>
 80099a4:	e7e8      	b.n	8009978 <__ieee754_sqrt+0x28>
 80099a6:	152a      	asrs	r2, r5, #20
 80099a8:	d115      	bne.n	80099d6 <__ieee754_sqrt+0x86>
 80099aa:	2000      	movs	r0, #0
 80099ac:	e009      	b.n	80099c2 <__ieee754_sqrt+0x72>
 80099ae:	0acb      	lsrs	r3, r1, #11
 80099b0:	3a15      	subs	r2, #21
 80099b2:	0549      	lsls	r1, r1, #21
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0fa      	beq.n	80099ae <__ieee754_sqrt+0x5e>
 80099b8:	e7f7      	b.n	80099aa <__ieee754_sqrt+0x5a>
 80099ba:	462a      	mov	r2, r5
 80099bc:	e7fa      	b.n	80099b4 <__ieee754_sqrt+0x64>
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	3001      	adds	r0, #1
 80099c2:	02dc      	lsls	r4, r3, #11
 80099c4:	d5fb      	bpl.n	80099be <__ieee754_sqrt+0x6e>
 80099c6:	1e44      	subs	r4, r0, #1
 80099c8:	1b12      	subs	r2, r2, r4
 80099ca:	f1c0 0420 	rsb	r4, r0, #32
 80099ce:	fa21 f404 	lsr.w	r4, r1, r4
 80099d2:	4323      	orrs	r3, r4
 80099d4:	4081      	lsls	r1, r0
 80099d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80099de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099e2:	07d2      	lsls	r2, r2, #31
 80099e4:	bf5c      	itt	pl
 80099e6:	005b      	lslpl	r3, r3, #1
 80099e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80099ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099f0:	bf58      	it	pl
 80099f2:	0049      	lslpl	r1, r1, #1
 80099f4:	2600      	movs	r6, #0
 80099f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80099fa:	106d      	asrs	r5, r5, #1
 80099fc:	0049      	lsls	r1, r1, #1
 80099fe:	2016      	movs	r0, #22
 8009a00:	4632      	mov	r2, r6
 8009a02:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009a06:	1917      	adds	r7, r2, r4
 8009a08:	429f      	cmp	r7, r3
 8009a0a:	bfde      	ittt	le
 8009a0c:	193a      	addle	r2, r7, r4
 8009a0e:	1bdb      	suble	r3, r3, r7
 8009a10:	1936      	addle	r6, r6, r4
 8009a12:	0fcf      	lsrs	r7, r1, #31
 8009a14:	3801      	subs	r0, #1
 8009a16:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009a1a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009a22:	d1f0      	bne.n	8009a06 <__ieee754_sqrt+0xb6>
 8009a24:	4604      	mov	r4, r0
 8009a26:	2720      	movs	r7, #32
 8009a28:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	eb00 0e0c 	add.w	lr, r0, ip
 8009a32:	db02      	blt.n	8009a3a <__ieee754_sqrt+0xea>
 8009a34:	d113      	bne.n	8009a5e <__ieee754_sqrt+0x10e>
 8009a36:	458e      	cmp	lr, r1
 8009a38:	d811      	bhi.n	8009a5e <__ieee754_sqrt+0x10e>
 8009a3a:	f1be 0f00 	cmp.w	lr, #0
 8009a3e:	eb0e 000c 	add.w	r0, lr, ip
 8009a42:	da42      	bge.n	8009aca <__ieee754_sqrt+0x17a>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	db40      	blt.n	8009aca <__ieee754_sqrt+0x17a>
 8009a48:	f102 0801 	add.w	r8, r2, #1
 8009a4c:	1a9b      	subs	r3, r3, r2
 8009a4e:	458e      	cmp	lr, r1
 8009a50:	bf88      	it	hi
 8009a52:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8009a56:	eba1 010e 	sub.w	r1, r1, lr
 8009a5a:	4464      	add	r4, ip
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009a62:	3f01      	subs	r7, #1
 8009a64:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009a68:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009a70:	d1dc      	bne.n	8009a2c <__ieee754_sqrt+0xdc>
 8009a72:	4319      	orrs	r1, r3
 8009a74:	d01b      	beq.n	8009aae <__ieee754_sqrt+0x15e>
 8009a76:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009afc <__ieee754_sqrt+0x1ac>
 8009a7a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009b00 <__ieee754_sqrt+0x1b0>
 8009a7e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009a82:	e9db 2300 	ldrd	r2, r3, [fp]
 8009a86:	f7f6 fc27 	bl	80002d8 <__aeabi_dsub>
 8009a8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4640      	mov	r0, r8
 8009a94:	4649      	mov	r1, r9
 8009a96:	f7f7 f853 	bl	8000b40 <__aeabi_dcmple>
 8009a9a:	b140      	cbz	r0, 8009aae <__ieee754_sqrt+0x15e>
 8009a9c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8009aa0:	e9da 0100 	ldrd	r0, r1, [sl]
 8009aa4:	e9db 2300 	ldrd	r2, r3, [fp]
 8009aa8:	d111      	bne.n	8009ace <__ieee754_sqrt+0x17e>
 8009aaa:	3601      	adds	r6, #1
 8009aac:	463c      	mov	r4, r7
 8009aae:	1072      	asrs	r2, r6, #1
 8009ab0:	0863      	lsrs	r3, r4, #1
 8009ab2:	07f1      	lsls	r1, r6, #31
 8009ab4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009ab8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009abc:	bf48      	it	mi
 8009abe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009ac2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	e756      	b.n	8009978 <__ieee754_sqrt+0x28>
 8009aca:	4690      	mov	r8, r2
 8009acc:	e7be      	b.n	8009a4c <__ieee754_sqrt+0xfc>
 8009ace:	f7f6 fc05 	bl	80002dc <__adddf3>
 8009ad2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f7 f825 	bl	8000b2c <__aeabi_dcmplt>
 8009ae2:	b120      	cbz	r0, 8009aee <__ieee754_sqrt+0x19e>
 8009ae4:	1ca0      	adds	r0, r4, #2
 8009ae6:	bf08      	it	eq
 8009ae8:	3601      	addeq	r6, #1
 8009aea:	3402      	adds	r4, #2
 8009aec:	e7df      	b.n	8009aae <__ieee754_sqrt+0x15e>
 8009aee:	1c63      	adds	r3, r4, #1
 8009af0:	f023 0401 	bic.w	r4, r3, #1
 8009af4:	e7db      	b.n	8009aae <__ieee754_sqrt+0x15e>
 8009af6:	bf00      	nop
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	200000f8 	.word	0x200000f8
 8009b00:	200000f0 	.word	0x200000f0

08009b04 <_init>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	bf00      	nop
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr

08009b10 <_fini>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr
