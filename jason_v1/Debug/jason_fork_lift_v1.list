
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080098b8  080098b8  0000a8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af8  08009af8  0000b0a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009af8  08009af8  0000aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b00  08009b00  0000b0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b00  08009b00  0000ab00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b04  08009b04  0000ab04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08009b08  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200000a0  08009ba8  0000b0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08009ba8  0000b550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147c0  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f78  00000000  00000000  0001f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00022808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dee  00000000  00000000  00023a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fa6  00000000  00000000  00024816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174ce  00000000  00000000  000477bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc3a0  00000000  00000000  0005ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b02a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000570c  00000000  00000000  0013b070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800989c 	.word	0x0800989c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	0800989c 	.word	0x0800989c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <follow_auto_path>:

bool prev_auto_path_switch = false;

AutoPathSelection auto_path_selection = LEFT_PATH;

void follow_auto_path(AutoPathSelection auto_path_selection) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b092      	sub	sp, #72	@ 0x48
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  switch (auto_path_selection) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d057      	beq.n	8001088 <follow_auto_path+0xc0>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	f300 808a 	bgt.w	80010f2 <follow_auto_path+0x12a>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <follow_auto_path+0x20>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d035      	beq.n	8001052 <follow_auto_path+0x8a>
 8000fe6:	e084      	b.n	80010f2 <follow_auto_path+0x12a>
    case LEFT_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * 0.5, 0};
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fee:	4b5a      	ldr	r3, [pc, #360]	@ (8001158 <follow_auto_path+0x190>)
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 8000ff8:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8000ffc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001000:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001004:	eeb0 0a66 	vmov.f32	s0, s13
 8001008:	eef0 0a47 	vmov.f32	s1, s14
 800100c:	eeb0 1a67 	vmov.f32	s2, s15
 8001010:	f002 f866 	bl	80030e0 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_1);
 8001014:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001018:	f003 f9ae 	bl	8004378 <HAL_Delay>
      target_vel.x_vel = -ROBOT_MAX_X_VELOCITY * 0.5;
 800101c:	4b4f      	ldr	r3, [pc, #316]	@ (800115c <follow_auto_path+0x194>)
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
      target_vel.y_vel = 0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
      target_vel.z_vel = 0;
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 800102c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001030:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001034:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001038:	eeb0 0a66 	vmov.f32	s0, s13
 800103c:	eef0 0a47 	vmov.f32	s1, s14
 8001040:	eeb0 1a67 	vmov.f32	s2, s15
 8001044:	f002 f84c 	bl	80030e0 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_2);
 8001048:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104c:	f003 f994 	bl	8004378 <HAL_Delay>
      break;
 8001050:	e067      	b.n	8001122 <follow_auto_path+0x15a>
    }
    case MID_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * 0.5, 0};
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
 8001058:	4b3f      	ldr	r3, [pc, #252]	@ (8001158 <follow_auto_path+0x190>)
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      movement_control(target_vel);
 8001062:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001066:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800106a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800106e:	eeb0 0a66 	vmov.f32	s0, s13
 8001072:	eef0 0a47 	vmov.f32	s1, s14
 8001076:	eeb0 1a67 	vmov.f32	s2, s15
 800107a:	f002 f831 	bl	80030e0 <movement_control>
      HAL_Delay(MID_PATH_TIME_1);
 800107e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001082:	f003 f979 	bl	8004378 <HAL_Delay>
      break;
 8001086:	e04c      	b.n	8001122 <follow_auto_path+0x15a>
    }
    case RIGHT_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * 0.5, 0};
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <follow_auto_path+0x190>)
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 8001098:	edd7 6a06 	vldr	s13, [r7, #24]
 800109c:	ed97 7a07 	vldr	s14, [r7, #28]
 80010a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80010a4:	eeb0 0a66 	vmov.f32	s0, s13
 80010a8:	eef0 0a47 	vmov.f32	s1, s14
 80010ac:	eeb0 1a67 	vmov.f32	s2, s15
 80010b0:	f002 f816 	bl	80030e0 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_1);
 80010b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b8:	f003 f95e 	bl	8004378 <HAL_Delay>
      target_vel.x_vel = ROBOT_MAX_X_VELOCITY * 0.5;
 80010bc:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <follow_auto_path+0x190>)
 80010be:	61bb      	str	r3, [r7, #24]
      target_vel.y_vel = 0;
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
      target_vel.z_vel = 0;
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 80010cc:	edd7 6a06 	vldr	s13, [r7, #24]
 80010d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010d8:	eeb0 0a66 	vmov.f32	s0, s13
 80010dc:	eef0 0a47 	vmov.f32	s1, s14
 80010e0:	eeb0 1a67 	vmov.f32	s2, s15
 80010e4:	f001 fffc 	bl	80030e0 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_2);
 80010e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ec:	f003 f944 	bl	8004378 <HAL_Delay>
      break;
 80010f0:	e017      	b.n	8001122 <follow_auto_path+0x15a>
    }
    default: {
      BaseVelocity target_vel = {0, 0, 0};
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
      movement_control(target_vel);
 8001104:	edd7 6a03 	vldr	s13, [r7, #12]
 8001108:	ed97 7a04 	vldr	s14, [r7, #16]
 800110c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001110:	eeb0 0a66 	vmov.f32	s0, s13
 8001114:	eef0 0a47 	vmov.f32	s1, s14
 8001118:	eeb0 1a67 	vmov.f32	s2, s15
 800111c:	f001 ffe0 	bl	80030e0 <movement_control>
      break;
 8001120:	bf00      	nop
    }
  }
  BaseVelocity target_vel = {0, 0, 0};
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	@ 0x40
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	647b      	str	r3, [r7, #68]	@ 0x44
  movement_control(target_vel);
 8001134:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001138:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800113c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001140:	eeb0 0a66 	vmov.f32	s0, s13
 8001144:	eef0 0a47 	vmov.f32	s1, s14
 8001148:	eeb0 1a67 	vmov.f32	s2, s15
 800114c:	f001 ffc8 	bl	80030e0 <movement_control>
 8001150:	bf00      	nop
 8001152:	3748      	adds	r7, #72	@ 0x48
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	401942c4 	.word	0x401942c4
 800115c:	c01942c4 	.word	0xc01942c4

08001160 <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b098      	sub	sp, #96	@ 0x60
 8001164:	af08      	add	r7, sp, #32
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <parse_controller_data+0x16>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 8001176:	4887      	ldr	r0, [pc, #540]	@ (8001394 <parse_controller_data+0x234>)
 8001178:	f007 f88e 	bl	8008298 <puts>
    return 1;
 800117c:	2301      	movs	r3, #1
 800117e:	e105      	b.n	800138c <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 8001180:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001184:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	9306      	str	r3, [sp, #24]
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	9305      	str	r3, [sp, #20]
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	9304      	str	r3, [sp, #16]
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	9303      	str	r3, [sp, #12]
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	460b      	mov	r3, r1
 80011b4:	4978      	ldr	r1, [pc, #480]	@ (8001398 <parse_controller_data+0x238>)
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f006 fe60 	bl	8007e7c <siscanf>
 80011bc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 80011be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d004      	beq.n	80011ce <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 80011c4:	4875      	ldr	r0, [pc, #468]	@ (800139c <parse_controller_data+0x23c>)
 80011c6:	f007 f867 	bl	8008298 <puts>
    return 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	e0de      	b.n	800138c <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 80011ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf14      	ite	ne
 80011d8:	2301      	movne	r3, #1
 80011da:	2300      	moveq	r3, #0
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 80011e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 80011f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2da      	uxtb	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 800120a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf14      	ite	ne
 8001214:	2301      	movne	r3, #1
 8001216:	2300      	moveq	r3, #0
 8001218:	b2da      	uxtb	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 800121e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2da      	uxtb	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 8001232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 8001246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf14      	ite	ne
 8001250:	2301      	movne	r3, #1
 8001252:	2300      	moveq	r3, #0
 8001254:	b2da      	uxtb	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 800125a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf14      	ite	ne
 8001264:	2301      	movne	r3, #1
 8001266:	2300      	moveq	r3, #0
 8001268:	b2da      	uxtb	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 800126e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2da      	uxtb	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 8001282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2da      	uxtb	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 8001296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf14      	ite	ne
 80012a0:	2301      	movne	r3, #1
 80012a2:	2300      	moveq	r3, #0
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 80012aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf14      	ite	ne
 80012c8:	2301      	movne	r3, #1
 80012ca:	2300      	moveq	r3, #0
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 80012d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	220a      	movs	r2, #10
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 ff54 	bl	800819c <strtol>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 80012fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001300:	220a      	movs	r2, #10
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f006 ff49 	bl	800819c <strtol>
 800130a:	4603      	mov	r3, r0
 800130c:	b25a      	sxtb	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	220a      	movs	r2, #10
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f006 ff3e 	bl	800819c <strtol>
 8001320:	4603      	mov	r3, r0
 8001322:	b25a      	sxtb	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	220a      	movs	r2, #10
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f006 ff33 	bl	800819c <strtol>
 8001336:	4603      	mov	r3, r0
 8001338:	b25a      	sxtb	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	b29a      	uxth	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	b29a      	uxth	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf14      	ite	ne
 8001358:	2301      	movne	r3, #1
 800135a:	2300      	moveq	r3, #0
 800135c:	b2da      	uxtb	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	bf14      	ite	ne
 800136c:	2301      	movne	r3, #1
 800136e:	2300      	moveq	r3, #0
 8001370:	b2da      	uxtb	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2da      	uxtb	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	761a      	strb	r2, [r3, #24]

  return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3740      	adds	r7, #64	@ 0x40
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	080098b8 	.word	0x080098b8
 8001398:	080098d8 	.word	0x080098d8
 800139c:	08009900 	.word	0x08009900

080013a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	@ 0x28
 80013a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a49      	ldr	r2, [pc, #292]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013bc:	f043 0310 	orr.w	r3, r3, #16
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b44      	ldr	r3, [pc, #272]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a43      	ldr	r2, [pc, #268]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	4b3e      	ldr	r3, [pc, #248]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a3d      	ldr	r2, [pc, #244]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b3b      	ldr	r3, [pc, #236]	@ (80014e0 <MX_GPIO_Init+0x140>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <MX_GPIO_Init+0x140>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a37      	ldr	r2, [pc, #220]	@ (80014e0 <MX_GPIO_Init+0x140>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <MX_GPIO_Init+0x140>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <MX_GPIO_Init+0x140>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a31      	ldr	r2, [pc, #196]	@ (80014e0 <MX_GPIO_Init+0x140>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b2f      	ldr	r3, [pc, #188]	@ (80014e0 <MX_GPIO_Init+0x140>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2108      	movs	r1, #8
 8001432:	482c      	ldr	r0, [pc, #176]	@ (80014e4 <MX_GPIO_Init+0x144>)
 8001434:	f003 fa28 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 800143e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001442:	f003 fa21 	bl	8004888 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800144c:	4826      	ldr	r0, [pc, #152]	@ (80014e8 <MX_GPIO_Init+0x148>)
 800144e:	f003 fa1b 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001458:	4824      	ldr	r0, [pc, #144]	@ (80014ec <MX_GPIO_Init+0x14c>)
 800145a:	f003 fa15 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 800145e:	2308      	movs	r3, #8
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	481b      	ldr	r0, [pc, #108]	@ (80014e4 <MX_GPIO_Init+0x144>)
 8001476:	f003 f885 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 800147a:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 800147e:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001496:	f003 f875 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 800149a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	@ (80014e8 <MX_GPIO_Init+0x148>)
 80014b4:	f003 f866 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 80014b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4806      	ldr	r0, [pc, #24]	@ (80014ec <MX_GPIO_Init+0x14c>)
 80014d2:	f003 f857 	bl	8004584 <HAL_GPIO_Init>

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000800 	.word	0x48000800
 80014e8:	48001000 	.word	0x48001000
 80014ec:	48000c00 	.word	0x48000c00

080014f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b098      	sub	sp, #96	@ 0x60
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f6:	f002 fece 	bl	8004296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 fa7d 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fe:	f7ff ff4f 	bl	80013a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001502:	f002 f9a5 	bl	8003850 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001506:	f002 fa73 	bl	80039f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800150a:	f002 faff 	bl	8003b0c <MX_TIM4_Init>
  MX_TIM5_Init();
 800150e:	f002 fb53 	bl	8003bb8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001512:	f002 fba7 	bl	8003c64 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001516:	f002 f9f5 	bl	8003904 <MX_TIM2_Init>
  MX_UART4_Init();
 800151a:	f002 fd63 	bl	8003fe4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800151e:	f002 fdad 	bl	800407c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001522:	2100      	movs	r1, #0
 8001524:	48a4      	ldr	r0, [pc, #656]	@ (80017b8 <main+0x2c8>)
 8001526:	f004 fb29 	bl	8005b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800152a:	2104      	movs	r1, #4
 800152c:	48a2      	ldr	r0, [pc, #648]	@ (80017b8 <main+0x2c8>)
 800152e:	f004 fb25 	bl	8005b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001532:	210c      	movs	r1, #12
 8001534:	48a0      	ldr	r0, [pc, #640]	@ (80017b8 <main+0x2c8>)
 8001536:	f004 fb21 	bl	8005b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800153a:	210c      	movs	r1, #12
 800153c:	489f      	ldr	r0, [pc, #636]	@ (80017bc <main+0x2cc>)
 800153e:	f004 fb1d 	bl	8005b7c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001542:	489f      	ldr	r0, [pc, #636]	@ (80017c0 <main+0x2d0>)
 8001544:	f004 fa40 	bl	80059c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001548:	213c      	movs	r1, #60	@ 0x3c
 800154a:	489d      	ldr	r0, [pc, #628]	@ (80017c0 <main+0x2d0>)
 800154c:	f004 fcce 	bl	8005eec <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001550:	489c      	ldr	r0, [pc, #624]	@ (80017c4 <main+0x2d4>)
 8001552:	f004 fa39 	bl	80059c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001556:	213c      	movs	r1, #60	@ 0x3c
 8001558:	489a      	ldr	r0, [pc, #616]	@ (80017c4 <main+0x2d4>)
 800155a:	f004 fcc7 	bl	8005eec <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800155e:	489a      	ldr	r0, [pc, #616]	@ (80017c8 <main+0x2d8>)
 8001560:	f004 fa32 	bl	80059c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001564:	213c      	movs	r1, #60	@ 0x3c
 8001566:	4898      	ldr	r0, [pc, #608]	@ (80017c8 <main+0x2d8>)
 8001568:	f004 fcc0 	bl	8005eec <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800156c:	4897      	ldr	r0, [pc, #604]	@ (80017cc <main+0x2dc>)
 800156e:	f004 fa2b 	bl	80059c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8001572:	213c      	movs	r1, #60	@ 0x3c
 8001574:	4895      	ldr	r0, [pc, #596]	@ (80017cc <main+0x2dc>)
 8001576:	f004 fcb9 	bl	8005eec <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2108      	movs	r1, #8
 800157e:	4894      	ldr	r0, [pc, #592]	@ (80017d0 <main+0x2e0>)
 8001580:	f003 f982 	bl	8004888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800158a:	4892      	ldr	r0, [pc, #584]	@ (80017d4 <main+0x2e4>)
 800158c:	f003 f97c 	bl	8004888 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001596:	4890      	ldr	r0, [pc, #576]	@ (80017d8 <main+0x2e8>)
 8001598:	f003 f976 	bl	8004888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015a2:	488d      	ldr	r0, [pc, #564]	@ (80017d8 <main+0x2e8>)
 80015a4:	f003 f970 	bl	8004888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ae:	488a      	ldr	r0, [pc, #552]	@ (80017d8 <main+0x2e8>)
 80015b0:	f003 f96a 	bl	8004888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2180      	movs	r1, #128	@ 0x80
 80015b8:	4887      	ldr	r0, [pc, #540]	@ (80017d8 <main+0x2e8>)
 80015ba:	f003 f965 	bl	8004888 <HAL_GPIO_WritePin>

  servo_reset_all();
 80015be:	f002 f81d 	bl	80035fc <servo_reset_all>
  HAL_Delay(1000);
 80015c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015c6:	f002 fed7 	bl	8004378 <HAL_Delay>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2180      	movs	r1, #128	@ 0x80
 80015ce:	4882      	ldr	r0, [pc, #520]	@ (80017d8 <main+0x2e8>)
 80015d0:	f003 f95a 	bl	8004888 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f002 fecf 	bl	8004378 <HAL_Delay>
#if (TEST == 0)
    HAL_UART_Receive(&huart1, controller_buffer, sizeof(controller_buffer), 0xFFFF);
 80015da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015de:	2229      	movs	r2, #41	@ 0x29
 80015e0:	497e      	ldr	r1, [pc, #504]	@ (80017dc <main+0x2ec>)
 80015e2:	487f      	ldr	r0, [pc, #508]	@ (80017e0 <main+0x2f0>)
 80015e4:	f005 fd64 	bl	80070b0 <HAL_UART_Receive>
    parse_controller_data(controller_buffer, &controller_state);
 80015e8:	497e      	ldr	r1, [pc, #504]	@ (80017e4 <main+0x2f4>)
 80015ea:	487c      	ldr	r0, [pc, #496]	@ (80017dc <main+0x2ec>)
 80015ec:	f7ff fdb8 	bl	8001160 <parse_controller_data>
    if (controller_state.options_button) {  // turn on/off the robot
 80015f0:	4b7c      	ldr	r3, [pc, #496]	@ (80017e4 <main+0x2f4>)
 80015f2:	7e1b      	ldrb	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d019      	beq.n	800162c <main+0x13c>
      turn_on = !turn_on;
 80015f8:	4b7b      	ldr	r3, [pc, #492]	@ (80017e8 <main+0x2f8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f083 0301 	eor.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b75      	ldr	r3, [pc, #468]	@ (80017e8 <main+0x2f8>)
 8001614:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001616:	4b74      	ldr	r3, [pc, #464]	@ (80017e8 <main+0x2f8>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001626:	486c      	ldr	r0, [pc, #432]	@ (80017d8 <main+0x2e8>)
 8001628:	f003 f92e 	bl	8004888 <HAL_GPIO_WritePin>
    }

    if (turn_on) {
 800162c:	4b6e      	ldr	r3, [pc, #440]	@ (80017e8 <main+0x2f8>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0cf      	beq.n	80015d4 <main+0xe4>
      if (auto_path_selection == LEFT_PATH) {
 8001634:	4b6d      	ldr	r3, [pc, #436]	@ (80017ec <main+0x2fc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d111      	bne.n	8001660 <main+0x170>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001642:	4865      	ldr	r0, [pc, #404]	@ (80017d8 <main+0x2e8>)
 8001644:	f003 f920 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164e:	4862      	ldr	r0, [pc, #392]	@ (80017d8 <main+0x2e8>)
 8001650:	f003 f91a 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	485f      	ldr	r0, [pc, #380]	@ (80017d8 <main+0x2e8>)
 800165a:	f003 f915 	bl	8004888 <HAL_GPIO_WritePin>
 800165e:	e02a      	b.n	80016b6 <main+0x1c6>
      } else if (auto_path_selection == MID_PATH) {
 8001660:	4b62      	ldr	r3, [pc, #392]	@ (80017ec <main+0x2fc>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d111      	bne.n	800168c <main+0x19c>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800166e:	485a      	ldr	r0, [pc, #360]	@ (80017d8 <main+0x2e8>)
 8001670:	f003 f90a 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800167a:	4857      	ldr	r0, [pc, #348]	@ (80017d8 <main+0x2e8>)
 800167c:	f003 f904 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2180      	movs	r1, #128	@ 0x80
 8001684:	4854      	ldr	r0, [pc, #336]	@ (80017d8 <main+0x2e8>)
 8001686:	f003 f8ff 	bl	8004888 <HAL_GPIO_WritePin>
 800168a:	e014      	b.n	80016b6 <main+0x1c6>
      } else if (auto_path_selection == RIGHT_PATH) {
 800168c:	4b57      	ldr	r3, [pc, #348]	@ (80017ec <main+0x2fc>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d110      	bne.n	80016b6 <main+0x1c6>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800169a:	484f      	ldr	r0, [pc, #316]	@ (80017d8 <main+0x2e8>)
 800169c:	f003 f8f4 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016a6:	484c      	ldr	r0, [pc, #304]	@ (80017d8 <main+0x2e8>)
 80016a8:	f003 f8ee 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2180      	movs	r1, #128	@ 0x80
 80016b0:	4849      	ldr	r0, [pc, #292]	@ (80017d8 <main+0x2e8>)
 80016b2:	f003 f8e9 	bl	8004888 <HAL_GPIO_WritePin>
      }

      float rotation_vel = (controller_state.l2_pressure / 1024.0 + controller_state.r2_pressure / -1024.0) * 100.0;
 80016b6:	4b4b      	ldr	r3, [pc, #300]	@ (80017e4 <main+0x2f4>)
 80016b8:	8a5b      	ldrh	r3, [r3, #18]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff5a 	bl	8000574 <__aeabi_i2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <main+0x300>)
 80016c6:	f7ff f8e9 	bl	800089c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	461d      	mov	r5, r3
 80016d2:	4b44      	ldr	r3, [pc, #272]	@ (80017e4 <main+0x2f4>)
 80016d4:	8a9b      	ldrh	r3, [r3, #20]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff4c 	bl	8000574 <__aeabi_i2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b44      	ldr	r3, [pc, #272]	@ (80017f4 <main+0x304>)
 80016e2:	f7ff f8db 	bl	800089c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdf5 	bl	80002dc <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b3e      	ldr	r3, [pc, #248]	@ (80017f8 <main+0x308>)
 8001700:	f7fe ffa2 	bl	8000648 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fa94 	bl	8000c38 <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	65fb      	str	r3, [r7, #92]	@ 0x5c

      if (controller_state.ps_button && !prev_auto_path_enable) {  // auto, line following
 8001714:	4b33      	ldr	r3, [pc, #204]	@ (80017e4 <main+0x2f4>)
 8001716:	7d9b      	ldrb	r3, [r3, #22]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01e      	beq.n	800175a <main+0x26a>
 800171c:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <main+0x30c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f083 0301 	eor.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d017      	beq.n	800175a <main+0x26a>
        auto_path_enable = !auto_path_enable;
 800172a:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <main+0x310>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f083 0301 	eor.w	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <main+0x310>)
 8001746:	701a      	strb	r2, [r3, #0]
        if (auto_path_enable)
 8001748:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <main+0x310>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <main+0x26a>
          follow_auto_path(auto_path_selection);
 8001750:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <main+0x2fc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fc37 	bl	8000fc8 <follow_auto_path>
      }
      prev_auto_path_enable = controller_state.ps_button;
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <main+0x2f4>)
 800175c:	7d9a      	ldrb	r2, [r3, #22]
 800175e:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <main+0x30c>)
 8001760:	701a      	strb	r2, [r3, #0]

      if (controller_state.cross && !prev_auto_path_switch) {
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <main+0x2f4>)
 8001764:	799b      	ldrb	r3, [r3, #6]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d057      	beq.n	800181a <main+0x32a>
 800176a:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <main+0x314>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d050      	beq.n	800181a <main+0x32a>
        auto_path_switch = !auto_path_switch;
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <main+0x318>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <main+0x318>)
 8001794:	701a      	strb	r2, [r3, #0]
        if (auto_path_selection == LEFT_PATH)
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <main+0x2fc>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <main+0x2b6>
          auto_path_selection = MID_PATH;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <main+0x2fc>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e039      	b.n	800181a <main+0x32a>
        else if (auto_path_selection == MID_PATH)
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <main+0x2fc>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d12e      	bne.n	800180c <main+0x31c>
          auto_path_selection = RIGHT_PATH;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <main+0x2fc>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e031      	b.n	800181a <main+0x32a>
 80017b6:	bf00      	nop
 80017b8:	200001a8 	.word	0x200001a8
 80017bc:	2000015c 	.word	0x2000015c
 80017c0:	20000110 	.word	0x20000110
 80017c4:	200001f4 	.word	0x200001f4
 80017c8:	20000240 	.word	0x20000240
 80017cc:	2000028c 	.word	0x2000028c
 80017d0:	48000800 	.word	0x48000800
 80017d4:	48000c00 	.word	0x48000c00
 80017d8:	48001000 	.word	0x48001000
 80017dc:	200000c4 	.word	0x200000c4
 80017e0:	2000036c 	.word	0x2000036c
 80017e4:	200000f0 	.word	0x200000f0
 80017e8:	2000010b 	.word	0x2000010b
 80017ec:	200000c0 	.word	0x200000c0
 80017f0:	40900000 	.word	0x40900000
 80017f4:	c0900000 	.word	0xc0900000
 80017f8:	40590000 	.word	0x40590000
 80017fc:	200000bd 	.word	0x200000bd
 8001800:	200000bc 	.word	0x200000bc
 8001804:	200000bf 	.word	0x200000bf
 8001808:	200000be 	.word	0x200000be
        else if (auto_path_selection == RIGHT_PATH)
 800180c:	4b72      	ldr	r3, [pc, #456]	@ (80019d8 <main+0x4e8>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d102      	bne.n	800181a <main+0x32a>
          auto_path_selection = LEFT_PATH;
 8001814:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <main+0x4e8>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
      }  // auto, choose path, toggle left / right / straight forward
      prev_auto_path_switch = controller_state.cross;
 800181a:	4b70      	ldr	r3, [pc, #448]	@ (80019dc <main+0x4ec>)
 800181c:	799a      	ldrb	r2, [r3, #6]
 800181e:	4b70      	ldr	r3, [pc, #448]	@ (80019e0 <main+0x4f0>)
 8001820:	701a      	strb	r2, [r3, #0]
      //   else if (controller_state.r1)
      //     target_vel.z_vel = ROBOT_MAX_Z_VELOCITY * -0.5;
      //   movement_control(target_vel);
      // }

      if (controller_state.r1) {
 8001822:	4b6e      	ldr	r3, [pc, #440]	@ (80019dc <main+0x4ec>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <main+0x368>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * 0.35};
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	657b      	str	r3, [r7, #84]	@ 0x54
 8001836:	4b6b      	ldr	r3, [pc, #428]	@ (80019e4 <main+0x4f4>)
 8001838:	65bb      	str	r3, [r7, #88]	@ 0x58
        movement_control(target_vel);
 800183a:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800183e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001842:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001846:	eeb0 0a66 	vmov.f32	s0, s13
 800184a:	eef0 0a47 	vmov.f32	s1, s14
 800184e:	eeb0 1a67 	vmov.f32	s2, s15
 8001852:	f001 fc45 	bl	80030e0 <movement_control>
 8001856:	e090      	b.n	800197a <main+0x48a>
      } else if (controller_state.l1) {
 8001858:	4b60      	ldr	r3, [pc, #384]	@ (80019dc <main+0x4ec>)
 800185a:	78db      	ldrb	r3, [r3, #3]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d016      	beq.n	800188e <main+0x39e>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * -0.35};
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	647b      	str	r3, [r7, #68]	@ 0x44
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800186c:	4b5e      	ldr	r3, [pc, #376]	@ (80019e8 <main+0x4f8>)
 800186e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        movement_control(target_vel);
 8001870:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001874:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001878:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800187c:	eeb0 0a66 	vmov.f32	s0, s13
 8001880:	eef0 0a47 	vmov.f32	s1, s14
 8001884:	eeb0 1a67 	vmov.f32	s2, s15
 8001888:	f001 fc2a 	bl	80030e0 <movement_control>
 800188c:	e075      	b.n	800197a <main+0x48a>
      } else if (controller_state.up) {
 800188e:	4b53      	ldr	r3, [pc, #332]	@ (80019dc <main+0x4ec>)
 8001890:	7a9b      	ldrb	r3, [r3, #10]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d016      	beq.n	80018c4 <main+0x3d4>
        BaseVelocity target_vel = {0,
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800189c:	4b53      	ldr	r3, [pc, #332]	@ (80019ec <main+0x4fc>)
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	643b      	str	r3, [r7, #64]	@ 0x40
                                   ROBOT_MAX_Y_VELOCITY * 0.5,
                                   0};
        movement_control(target_vel);
 80018a6:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80018aa:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80018ae:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80018b2:	eeb0 0a66 	vmov.f32	s0, s13
 80018b6:	eef0 0a47 	vmov.f32	s1, s14
 80018ba:	eeb0 1a67 	vmov.f32	s2, s15
 80018be:	f001 fc0f 	bl	80030e0 <movement_control>
 80018c2:	e05a      	b.n	800197a <main+0x48a>
      } else if (controller_state.down) {
 80018c4:	4b45      	ldr	r3, [pc, #276]	@ (80019dc <main+0x4ec>)
 80018c6:	7adb      	ldrb	r3, [r3, #11]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d016      	beq.n	80018fa <main+0x40a>
        BaseVelocity target_vel = {0,
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d2:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <main+0x500>)
 80018d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
                                   ROBOT_MAX_Y_VELOCITY * -0.5,
                                   0};
        movement_control(target_vel);
 80018dc:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80018e0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80018e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018e8:	eeb0 0a66 	vmov.f32	s0, s13
 80018ec:	eef0 0a47 	vmov.f32	s1, s14
 80018f0:	eeb0 1a67 	vmov.f32	s2, s15
 80018f4:	f001 fbf4 	bl	80030e0 <movement_control>
 80018f8:	e03f      	b.n	800197a <main+0x48a>
      } else if (controller_state.left) {
 80018fa:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <main+0x4ec>)
 80018fc:	7b1b      	ldrb	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d016      	beq.n	8001930 <main+0x440>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * -0.5,
 8001902:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <main+0x500>)
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	@ 0x28
                                   0,
                                   0};
        movement_control(target_vel);
 8001912:	edd7 6a08 	vldr	s13, [r7, #32]
 8001916:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800191a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800191e:	eeb0 0a66 	vmov.f32	s0, s13
 8001922:	eef0 0a47 	vmov.f32	s1, s14
 8001926:	eeb0 1a67 	vmov.f32	s2, s15
 800192a:	f001 fbd9 	bl	80030e0 <movement_control>
 800192e:	e024      	b.n	800197a <main+0x48a>
      } else if (controller_state.right) {
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <main+0x4ec>)
 8001932:	7b5b      	ldrb	r3, [r3, #13]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d016      	beq.n	8001966 <main+0x476>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * 0.5,
 8001938:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <main+0x4fc>)
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
                                   0,
                                   0};
        movement_control(target_vel);
 8001948:	edd7 6a05 	vldr	s13, [r7, #20]
 800194c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001950:	edd7 7a07 	vldr	s15, [r7, #28]
 8001954:	eeb0 0a66 	vmov.f32	s0, s13
 8001958:	eef0 0a47 	vmov.f32	s1, s14
 800195c:	eeb0 1a67 	vmov.f32	s2, s15
 8001960:	f001 fbbe 	bl	80030e0 <movement_control>
 8001964:	e009      	b.n	800197a <main+0x48a>
      } else {
        WheelPWM target_pwm = {0, 0, 0, 0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
        wheels_control(target_pwm);
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001976:	f000 fd23 	bl	80023c0 <wheels_control>
      }

      if (controller_state.triangle) {
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <main+0x4ec>)
 800197c:	7a1b      	ldrb	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <main+0x4a4>
        catch_move_down();
 8001982:	f000 f889 	bl	8001a98 <catch_move_down>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800198c:	4819      	ldr	r0, [pc, #100]	@ (80019f4 <main+0x504>)
 800198e:	f002 ff7b 	bl	8004888 <HAL_GPIO_WritePin>
 8001992:	e012      	b.n	80019ba <main+0x4ca>
      } else if (controller_state.cross)
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <main+0x4ec>)
 8001996:	799b      	ldrb	r3, [r3, #6]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <main+0x4b2>
        catch_move_up();
 800199c:	f000 f8a4 	bl	8001ae8 <catch_move_up>
 80019a0:	e00b      	b.n	80019ba <main+0x4ca>
      else if (controller_state.share_button) {
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <main+0x4ec>)
 80019a4:	7ddb      	ldrb	r3, [r3, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <main+0x4ca>
        catch_reset();
 80019aa:	f000 f8c5 	bl	8001b38 <catch_reset>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b4:	480f      	ldr	r0, [pc, #60]	@ (80019f4 <main+0x504>)
 80019b6:	f002 ff67 	bl	8004888 <HAL_GPIO_WritePin>
      }

      if (controller_state.circle)
 80019ba:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <main+0x4ec>)
 80019bc:	79db      	ldrb	r3, [r3, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <main+0x4d8>
        container_move_down();
 80019c2:	f000 f8c5 	bl	8001b50 <container_move_down>
 80019c6:	e605      	b.n	80015d4 <main+0xe4>
      else if (controller_state.square)
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <main+0x4ec>)
 80019ca:	7a5b      	ldrb	r3, [r3, #9]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f43f ae01 	beq.w	80015d4 <main+0xe4>
        container_reset();
 80019d2:	f000 f8eb 	bl	8001bac <container_reset>
    HAL_Delay(1);
 80019d6:	e5fd      	b.n	80015d4 <main+0xe4>
 80019d8:	200000c0 	.word	0x200000c0
 80019dc:	200000f0 	.word	0x200000f0
 80019e0:	200000bf 	.word	0x200000bf
 80019e4:	3ff5d14e 	.word	0x3ff5d14e
 80019e8:	bff5d14e 	.word	0xbff5d14e
 80019ec:	401942c4 	.word	0x401942c4
 80019f0:	c01942c4 	.word	0xc01942c4
 80019f4:	48001000 	.word	0x48001000

080019f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b094      	sub	sp, #80	@ 0x50
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	2238      	movs	r2, #56	@ 0x38
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f006 fc4e 	bl	80082a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f002 ff4c 	bl	80048b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a28:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001a32:	2302      	movs	r3, #2
 8001a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a36:	2355      	movs	r3, #85	@ 0x55
 8001a38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a46:	f107 0318 	add.w	r3, r7, #24
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 ffe8 	bl	8004a20 <HAL_RCC_OscConfig>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0x62>
    Error_Handler();
 8001a56:	f000 f818 	bl	8001a8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5a:	230f      	movs	r3, #15
 8001a5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2104      	movs	r1, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fae6 	bl	8005044 <HAL_RCC_ClockConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0x8a>
    Error_Handler();
 8001a7e:	f000 f804 	bl	8001a8a <Error_Handler>
  }
}
 8001a82:	bf00      	nop
 8001a84:	3750      	adds	r7, #80	@ 0x50
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8e:	b672      	cpsid	i
}
 8001a90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001a92:	bf00      	nop
 8001a94:	e7fd      	b.n	8001a92 <Error_Handler+0x8>
	...

08001a98 <catch_move_down>:
#include "mech.h"

// TODO: move to movement.c
Direction_Encoder direction_encoder = FRONT_BACK;

void catch_move_down(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), SERVO_ID5_MAX_POS, SHORTEST_TIME_ROTATE(5, 90));
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <catch_move_down+0x44>)
 8001a9e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001aa2:	3b5a      	subs	r3, #90	@ 0x5a
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bfb8      	it	lt
 8001aa8:	425b      	neglt	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd62 	bl	8000574 <__aeabi_i2d>
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <catch_move_down+0x48>)
 8001ab6:	f7fe fdc7 	bl	8000648 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f899 	bl	8000bf8 <__aeabi_d2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	f240 317a 	movw	r1, #890	@ 0x37a
 8001ad0:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <catch_move_down+0x4c>)
 8001ad2:	f001 fbb1 	bl	8003238 <servo_move>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	40080000 	.word	0x40080000
 8001ae4:	20000018 	.word	0x20000018

08001ae8 <catch_move_up>:

void catch_move_up(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), SERVO_ID5_MIN_POS, SHORTEST_TIME_ROTATE(5, 100));
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <catch_move_up+0x44>)
 8001aee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001af2:	3b64      	subs	r3, #100	@ 0x64
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bfb8      	it	lt
 8001af8:	425b      	neglt	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd3a 	bl	8000574 <__aeabi_i2d>
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <catch_move_up+0x48>)
 8001b06:	f7fe fd9f 	bl	8000648 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f871 	bl	8000bf8 <__aeabi_d2uiz>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f240 119f 	movw	r1, #415	@ 0x19f
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <catch_move_up+0x4c>)
 8001b22:	f001 fb89 	bl	8003238 <servo_move>
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	40080000 	.word	0x40080000
 8001b34:	20000018 	.word	0x20000018

08001b38 <catch_reset>:

void catch_reset(void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), INITIAL_POS, 180);
 8001b3c:	22b4      	movs	r2, #180	@ 0xb4
 8001b3e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001b42:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <catch_reset+0x14>)
 8001b44:	f001 fb78 	bl	8003238 <servo_move>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000018 	.word	0x20000018

08001b50 <container_move_down>:

void container_move_down(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  if (servos[4].current_pos != SERVO_ID5_MIN_POS)
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <container_move_down+0x50>)
 8001b56:	8b5b      	ldrh	r3, [r3, #26]
 8001b58:	f240 129f 	movw	r2, #415	@ 0x19f
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d01c      	beq.n	8001b9a <container_move_down+0x4a>
    servo_move(&(servos[5]), SERVO_ID6_MIN_POS, SHORTEST_TIME_ROTATE(6, 30));
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <container_move_down+0x50>)
 8001b62:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001b66:	3b1e      	subs	r3, #30
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bfb8      	it	lt
 8001b6c:	425b      	neglt	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fd00 	bl	8000574 <__aeabi_i2d>
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <container_move_down+0x54>)
 8001b7a:	f7fe fd65 	bl	8000648 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f837 	bl	8000bf8 <__aeabi_d2uiz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001b94:	4804      	ldr	r0, [pc, #16]	@ (8001ba8 <container_move_down+0x58>)
 8001b96:	f001 fb4f 	bl	8003238 <servo_move>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	40080000 	.word	0x40080000
 8001ba8:	2000001e 	.word	0x2000001e

08001bac <container_reset>:

void container_reset(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  if (servos[4].current_pos != SERVO_ID5_MIN_POS)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <container_reset+0x50>)
 8001bb2:	8b5b      	ldrh	r3, [r3, #26]
 8001bb4:	f240 129f 	movw	r2, #415	@ 0x19f
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d01c      	beq.n	8001bf6 <container_reset+0x4a>
    servo_move(&(servos[5]), INITIAL_POS, SHORTEST_TIME_ROTATE(6, 30));
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <container_reset+0x50>)
 8001bbe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001bc2:	3b1e      	subs	r3, #30
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bfb8      	it	lt
 8001bc8:	425b      	neglt	r3, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcd2 	bl	8000574 <__aeabi_i2d>
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <container_reset+0x54>)
 8001bd6:	f7fe fd37 	bl	8000648 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f809 	bl	8000bf8 <__aeabi_d2uiz>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <container_reset+0x58>)
 8001bf2:	f001 fb21 	bl	8003238 <servo_move>
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	40080000 	.word	0x40080000
 8001c04:	2000001e 	.word	0x2000001e

08001c08 <base2wheel>:
#include "movement.h"

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b094      	sub	sp, #80	@ 0x50
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	eef0 6a40 	vmov.f32	s13, s0
 8001c12:	eeb0 7a60 	vmov.f32	s14, s1
 8001c16:	eef0 7a41 	vmov.f32	s15, s2
 8001c1a:	edc7 6a05 	vstr	s13, [r7, #20]
 8001c1e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001c22:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = 0, front_right = 0, rear_left = 0, rear_right = 0;
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (base_vel.z_vel == 0) {
 8001c3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	f040 809d 	bne.w	8001d88 <base2wheel+0x180>
    front_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001c4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	ee17 0a90 	vmov	r0, s15
 8001c6e:	f7fe fc93 	bl	8000598 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	ec43 2b10 	vmov	d0, r2, r3
 8001c7a:	f007 fb67 	bl	800934c <sqrt>
 8001c7e:	ec51 0b10 	vmov	r0, r1, d0
 8001c82:	a38b      	add	r3, pc, #556	@ (adr r3, 8001eb0 <base2wheel+0x2a8>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fe08 	bl	800089c <__aeabi_ddiv>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe ffd0 	bl	8000c38 <__aeabi_d2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001c9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca8:	edd7 6a06 	vldr	s13, [r7, #24]
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb8:	ee17 0a90 	vmov	r0, s15
 8001cbc:	f7fe fc6c 	bl	8000598 <__aeabi_f2d>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	ec43 2b10 	vmov	d0, r2, r3
 8001cc8:	f007 fb40 	bl	800934c <sqrt>
 8001ccc:	ec51 0b10 	vmov	r0, r1, d0
 8001cd0:	a377      	add	r3, pc, #476	@ (adr r3, 8001eb0 <base2wheel+0x2a8>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe fde1 	bl	800089c <__aeabi_ddiv>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ffa9 	bl	8000c38 <__aeabi_d2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001cea:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf6:	edd7 6a06 	vldr	s13, [r7, #24]
 8001cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	ee17 0a90 	vmov	r0, s15
 8001d0a:	f7fe fc45 	bl	8000598 <__aeabi_f2d>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	ec43 2b10 	vmov	d0, r2, r3
 8001d16:	f007 fb19 	bl	800934c <sqrt>
 8001d1a:	ec51 0b10 	vmov	r0, r1, d0
 8001d1e:	a364      	add	r3, pc, #400	@ (adr r3, 8001eb0 <base2wheel+0x2a8>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fdba 	bl	800089c <__aeabi_ddiv>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe ff82 	bl	8000c38 <__aeabi_d2f>
 8001d34:	4603      	mov	r3, r0
 8001d36:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001d38:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	ee17 0a90 	vmov	r0, s15
 8001d58:	f7fe fc1e 	bl	8000598 <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b10 	vmov	d0, r2, r3
 8001d64:	f007 faf2 	bl	800934c <sqrt>
 8001d68:	ec51 0b10 	vmov	r0, r1, d0
 8001d6c:	a350      	add	r3, pc, #320	@ (adr r3, 8001eb0 <base2wheel+0x2a8>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fd93 	bl	800089c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff5b 	bl	8000c38 <__aeabi_d2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d86:	e04d      	b.n	8001e24 <base2wheel+0x21c>
  } else {
    front_left = base_vel.z_vel / RADIUS_WHEEL;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fc04 	bl	8000598 <__aeabi_f2d>
 8001d90:	a347      	add	r3, pc, #284	@ (adr r3, 8001eb0 <base2wheel+0x2a8>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fd81 	bl	800089c <__aeabi_ddiv>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe ff49 	bl	8000c38 <__aeabi_d2f>
 8001da6:	4603      	mov	r3, r0
 8001da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = -base_vel.z_vel / RADIUS_WHEEL;
 8001daa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dae:	eef1 7a67 	vneg.f32	s15, s15
 8001db2:	ee17 3a90 	vmov	r3, s15
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbee 	bl	8000598 <__aeabi_f2d>
 8001dbc:	a33c      	add	r3, pc, #240	@ (adr r3, 8001eb0 <base2wheel+0x2a8>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fd6b 	bl	800089c <__aeabi_ddiv>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe ff33 	bl	8000c38 <__aeabi_d2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = base_vel.z_vel / RADIUS_WHEEL;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbdd 	bl	8000598 <__aeabi_f2d>
 8001dde:	a334      	add	r3, pc, #208	@ (adr r3, 8001eb0 <base2wheel+0x2a8>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	f7fe fd5a 	bl	800089c <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe ff22 	bl	8000c38 <__aeabi_d2f>
 8001df4:	4603      	mov	r3, r0
 8001df6:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = -base_vel.z_vel / RADIUS_WHEEL;
 8001df8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dfc:	eef1 7a67 	vneg.f32	s15, s15
 8001e00:	ee17 3a90 	vmov	r3, s15
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fbc7 	bl	8000598 <__aeabi_f2d>
 8001e0a:	a329      	add	r3, pc, #164	@ (adr r3, 8001eb0 <base2wheel+0x2a8>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fd44 	bl	800089c <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7fe ff0c 	bl	8000c38 <__aeabi_d2f>
 8001e20:	4603      	mov	r3, r0
 8001e22:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  if (base_vel.x_vel < 0 || base_vel.y_vel < 0) {
 8001e24:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	d406      	bmi.n	8001e40 <base2wheel+0x238>
 8001e32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	d517      	bpl.n	8001e70 <base2wheel+0x268>
    front_left = -front_left;
 8001e40:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001e44:	eef1 7a67 	vneg.f32	s15, s15
 8001e48:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    front_right = -front_right;
 8001e4c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001e50:	eef1 7a67 	vneg.f32	s15, s15
 8001e54:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    rear_left = -rear_left;
 8001e58:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e5c:	eef1 7a67 	vneg.f32	s15, s15
 8001e60:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    rear_right = -rear_right;
 8001e64:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001e68:	eef1 7a67 	vneg.f32	s15, s15
 8001e6c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  }
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8001e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e88:	ee06 0a10 	vmov	s12, r0
 8001e8c:	ee06 1a90 	vmov	s13, r1
 8001e90:	ee07 2a10 	vmov	s14, r2
 8001e94:	ee07 3a90 	vmov	s15, r3
}
 8001e98:	eeb0 0a46 	vmov.f32	s0, s12
 8001e9c:	eef0 0a66 	vmov.f32	s1, s13
 8001ea0:	eeb0 1a47 	vmov.f32	s2, s14
 8001ea4:	eef0 1a67 	vmov.f32	s3, s15
 8001ea8:	3750      	adds	r7, #80	@ 0x50
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	020c49ba 	.word	0x020c49ba
 8001eb4:	3f96872b 	.word	0x3f96872b

08001eb8 <wheel2pwm>:
  // float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  // float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  // return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b08e      	sub	sp, #56	@ 0x38
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6178      	str	r0, [r7, #20]
 8001ec0:	eeb0 6a40 	vmov.f32	s12, s0
 8001ec4:	eef0 6a60 	vmov.f32	s13, s1
 8001ec8:	eeb0 7a41 	vmov.f32	s14, s2
 8001ecc:	eef0 7a61 	vmov.f32	s15, s3
 8001ed0:	ed87 6a01 	vstr	s12, [r7, #4]
 8001ed4:	edc7 6a02 	vstr	s13, [r7, #8]
 8001ed8:	ed87 7a03 	vstr	s14, [r7, #12]
 8001edc:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb58 	bl	8000598 <__aeabi_f2d>
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b92      	ldr	r3, [pc, #584]	@ (8002138 <wheel2pwm+0x280>)
 8001eee:	f7fe fbab 	bl	8000648 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	a38b      	add	r3, pc, #556	@ (adr r3, 8002128 <wheel2pwm+0x270>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fccc 	bl	800089c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	a388      	add	r3, pc, #544	@ (adr r3, 8002130 <wheel2pwm+0x278>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe fcc3 	bl	800089c <__aeabi_ddiv>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4b86      	ldr	r3, [pc, #536]	@ (800213c <wheel2pwm+0x284>)
 8001f24:	f7fe fb90 	bl	8000648 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	461d      	mov	r5, r3
 8001f30:	4b83      	ldr	r3, [pc, #524]	@ (8002140 <wheel2pwm+0x288>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fb0d 	bl	8000554 <__aeabi_ui2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4620      	mov	r0, r4
 8001f40:	4629      	mov	r1, r5
 8001f42:	f7fe fb81 	bl	8000648 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b7a      	ldr	r3, [pc, #488]	@ (800213c <wheel2pwm+0x284>)
 8001f54:	f7fe fca2 	bl	800089c <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fe22 	bl	8000ba8 <__aeabi_d2iz>
 8001f64:	4603      	mov	r3, r0
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fb14 	bl	8000598 <__aeabi_f2d>
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	4b70      	ldr	r3, [pc, #448]	@ (8002138 <wheel2pwm+0x280>)
 8001f76:	f7fe fb67 	bl	8000648 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	a369      	add	r3, pc, #420	@ (adr r3, 8002128 <wheel2pwm+0x270>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fc88 	bl	800089c <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	a366      	add	r3, pc, #408	@ (adr r3, 8002130 <wheel2pwm+0x278>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fc7f 	bl	800089c <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	4b64      	ldr	r3, [pc, #400]	@ (800213c <wheel2pwm+0x284>)
 8001fac:	f7fe fb4c 	bl	8000648 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	4b61      	ldr	r3, [pc, #388]	@ (8002140 <wheel2pwm+0x288>)
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fac9 	bl	8000554 <__aeabi_ui2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe fb3d 	bl	8000648 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b58      	ldr	r3, [pc, #352]	@ (800213c <wheel2pwm+0x284>)
 8001fdc:	f7fe fc5e 	bl	800089c <__aeabi_ddiv>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fdde 	bl	8000ba8 <__aeabi_d2iz>
 8001fec:	4603      	mov	r3, r0
 8001fee:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fad0 	bl	8000598 <__aeabi_f2d>
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8002138 <wheel2pwm+0x280>)
 8001ffe:	f7fe fb23 	bl	8000648 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4610      	mov	r0, r2
 8002008:	4619      	mov	r1, r3
 800200a:	a347      	add	r3, pc, #284	@ (adr r3, 8002128 <wheel2pwm+0x270>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	f7fe fc44 	bl	800089c <__aeabi_ddiv>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	a344      	add	r3, pc, #272	@ (adr r3, 8002130 <wheel2pwm+0x278>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fc3b 	bl	800089c <__aeabi_ddiv>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4b42      	ldr	r3, [pc, #264]	@ (800213c <wheel2pwm+0x284>)
 8002034:	f7fe fb08 	bl	8000648 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4614      	mov	r4, r2
 800203e:	461d      	mov	r5, r3
 8002040:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_ui2d>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe faf8 	bl	8000648 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	4b35      	ldr	r3, [pc, #212]	@ (800213c <wheel2pwm+0x284>)
 8002066:	f7fe fc19 	bl	800089c <__aeabi_ddiv>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fd99 	bl	8000ba8 <__aeabi_d2iz>
 8002076:	4603      	mov	r3, r0
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa8b 	bl	8000598 <__aeabi_f2d>
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b2c      	ldr	r3, [pc, #176]	@ (8002138 <wheel2pwm+0x280>)
 8002088:	f7fe fade 	bl	8000648 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	a324      	add	r3, pc, #144	@ (adr r3, 8002128 <wheel2pwm+0x270>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fbff 	bl	800089c <__aeabi_ddiv>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	a322      	add	r3, pc, #136	@ (adr r3, 8002130 <wheel2pwm+0x278>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f7fe fbf6 	bl	800089c <__aeabi_ddiv>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <wheel2pwm+0x284>)
 80020be:	f7fe fac3 	bl	8000648 <__aeabi_dmul>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4614      	mov	r4, r2
 80020c8:	461d      	mov	r5, r3
 80020ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <wheel2pwm+0x288>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa40 	bl	8000554 <__aeabi_ui2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe fab4 	bl	8000648 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	4b13      	ldr	r3, [pc, #76]	@ (800213c <wheel2pwm+0x284>)
 80020ee:	f7fe fbd5 	bl	800089c <__aeabi_ddiv>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fd55 	bl	8000ba8 <__aeabi_d2iz>
 80020fe:	4603      	mov	r3, r0
 8002100:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002118:	60da      	str	r2, [r3, #12]
}
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	3738      	adds	r7, #56	@ 0x38
 800211e:	46bd      	mov	sp, r7
 8002120:	bdb0      	pop	{r4, r5, r7, pc}
 8002122:	bf00      	nop
 8002124:	f3af 8000 	nop.w
 8002128:	54442d18 	.word	0x54442d18
 800212c:	401921fb 	.word	0x401921fb
 8002130:	980a206e 	.word	0x980a206e
 8002134:	40a733a9 	.word	0x40a733a9
 8002138:	404e0000 	.word	0x404e0000
 800213c:	40590000 	.word	0x40590000
 8002140:	40000400 	.word	0x40000400

08002144 <wheel_control>:

void wheel_control(Wheel wheel, int speed) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8002156:	4293      	cmp	r3, r2
 8002158:	dd03      	ble.n	8002162 <wheel_control+0x1e>
    speed = 16800;
 800215a:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	e005      	b.n	800216e <wheel_control+0x2a>
  else if (speed < -16800)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	4a94      	ldr	r2, [pc, #592]	@ (80023b8 <wheel_control+0x274>)
 8002166:	4293      	cmp	r3, r2
 8002168:	da01      	bge.n	800216e <wheel_control+0x2a>
    speed = -16800;
 800216a:	4b93      	ldr	r3, [pc, #588]	@ (80023b8 <wheel_control+0x274>)
 800216c:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2b03      	cmp	r3, #3
 8002172:	f200 80e8 	bhi.w	8002346 <wheel_control+0x202>
 8002176:	a201      	add	r2, pc, #4	@ (adr r2, 800217c <wheel_control+0x38>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	0800218d 	.word	0x0800218d
 8002180:	080021f5 	.word	0x080021f5
 8002184:	08002269 	.word	0x08002269
 8002188:	080022d3 	.word	0x080022d3
    case FRONT_LEFT:
      if (speed > 0) {
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	dd0c      	ble.n	80021ac <wheel_control+0x68>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	2120      	movs	r1, #32
 8002196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800219a:	f002 fb75 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	2110      	movs	r1, #16
 80021a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a6:	f002 fb6f 	bl	8004888 <HAL_GPIO_WritePin>
 80021aa:	e01b      	b.n	80021e4 <wheel_control+0xa0>
      } else if (speed < 0) {
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da0c      	bge.n	80021cc <wheel_control+0x88>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	2120      	movs	r1, #32
 80021b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ba:	f002 fb65 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	2110      	movs	r1, #16
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c6:	f002 fb5f 	bl	8004888 <HAL_GPIO_WritePin>
 80021ca:	e00b      	b.n	80021e4 <wheel_control+0xa0>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2120      	movs	r1, #32
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d4:	f002 fb58 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	2110      	movs	r1, #16
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e0:	f002 fb52 	bl	8004888 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80021ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80021ee:	4b73      	ldr	r3, [pc, #460]	@ (80023bc <wheel_control+0x278>)
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80021f2:	e0dc      	b.n	80023ae <wheel_control+0x26a>
    case FRONT_RIGHT:
      if (speed < 0) {
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da0e      	bge.n	8002218 <wheel_control+0xd4>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002204:	f002 fb40 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_SET);
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800220e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002212:	f002 fb39 	bl	8004888 <HAL_GPIO_WritePin>
 8002216:	e01f      	b.n	8002258 <wheel_control+0x114>
      } else if (speed > 0) {
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	dd0e      	ble.n	800223c <wheel_control+0xf8>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_SET);
 800221e:	2201      	movs	r2, #1
 8002220:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002228:	f002 fb2e 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002236:	f002 fb27 	bl	8004888 <HAL_GPIO_WritePin>
 800223a:	e00d      	b.n	8002258 <wheel_control+0x114>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002246:	f002 fb1f 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002254:	f002 fb18 	bl	8004888 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800225e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002262:	4b56      	ldr	r3, [pc, #344]	@ (80023bc <wheel_control+0x278>)
 8002264:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8002266:	e0a2      	b.n	80023ae <wheel_control+0x26a>
    case REAR_LEFT:
      if (speed > 0) {
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	dd0c      	ble.n	8002288 <wheel_control+0x144>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	2140      	movs	r1, #64	@ 0x40
 8002272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002276:	f002 fb07 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	2180      	movs	r1, #128	@ 0x80
 800227e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002282:	f002 fb01 	bl	8004888 <HAL_GPIO_WritePin>
 8002286:	e01b      	b.n	80022c0 <wheel_control+0x17c>
      } else if (speed < 0) {
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	da0c      	bge.n	80022a8 <wheel_control+0x164>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2140      	movs	r1, #64	@ 0x40
 8002292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002296:	f002 faf7 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a2:	f002 faf1 	bl	8004888 <HAL_GPIO_WritePin>
 80022a6:	e00b      	b.n	80022c0 <wheel_control+0x17c>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2140      	movs	r1, #64	@ 0x40
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b0:	f002 faea 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	@ 0x80
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022bc:	f002 fae4 	bl	8004888 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80022c6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80022ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022ce:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80022d0:	e06d      	b.n	80023ae <wheel_control+0x26a>
    case REAR_RIGHT:
      if (speed < 0) {
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da0e      	bge.n	80022f6 <wheel_control+0x1b2>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e2:	f002 fad1 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f0:	f002 faca 	bl	8004888 <HAL_GPIO_WritePin>
 80022f4:	e01f      	b.n	8002336 <wheel_control+0x1f2>
      } else if (speed > 0) {
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	dd0e      	ble.n	800231a <wheel_control+0x1d6>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002306:	f002 fabf 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002314:	f002 fab8 	bl	8004888 <HAL_GPIO_WritePin>
 8002318:	e00d      	b.n	8002336 <wheel_control+0x1f2>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002324:	f002 fab0 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800232e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002332:	f002 faa9 	bl	8004888 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800233c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002340:	4b1e      	ldr	r3, [pc, #120]	@ (80023bc <wheel_control+0x278>)
 8002342:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8002344:	e033      	b.n	80023ae <wheel_control+0x26a>
    default:
      if (speed > 0) {
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	dd0c      	ble.n	8002366 <wheel_control+0x222>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2120      	movs	r1, #32
 8002350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002354:	f002 fa98 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	2110      	movs	r1, #16
 800235c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002360:	f002 fa92 	bl	8004888 <HAL_GPIO_WritePin>
 8002364:	e01b      	b.n	800239e <wheel_control+0x25a>
      } else if (speed < 0) {
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da0c      	bge.n	8002386 <wheel_control+0x242>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 800236c:	2201      	movs	r2, #1
 800236e:	2120      	movs	r1, #32
 8002370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002374:	f002 fa88 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	2110      	movs	r1, #16
 800237c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002380:	f002 fa82 	bl	8004888 <HAL_GPIO_WritePin>
 8002384:	e00b      	b.n	800239e <wheel_control+0x25a>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	2120      	movs	r1, #32
 800238a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800238e:	f002 fa7b 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8002392:	2200      	movs	r2, #0
 8002394:	2110      	movs	r1, #16
 8002396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800239a:	f002 fa75 	bl	8004888 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80023a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <wheel_control+0x278>)
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80023ac:	bf00      	nop
  }
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	ffffbe60 	.word	0xffffbe60
 80023bc:	40000400 	.word	0x40000400

080023c0 <wheels_control>:

void wheels_control(WheelPWM pwm) {
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	463c      	mov	r4, r7
 80023c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7ff feb7 	bl	8002144 <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4619      	mov	r1, r3
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff feb2 	bl	8002144 <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4619      	mov	r1, r3
 80023e4:	2002      	movs	r0, #2
 80023e6:	f7ff fead 	bl	8002144 <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4619      	mov	r1, r3
 80023ee:	2003      	movs	r0, #3
 80023f0:	f7ff fea8 	bl	8002144 <wheel_control>
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}
 80023fc:	0000      	movs	r0, r0
	...

08002400 <rotate_motor>:

void rotate_motor(BaseVelocity base_vel) {
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	eef0 6a40 	vmov.f32	s13, s0
 800240a:	eeb0 7a60 	vmov.f32	s14, s1
 800240e:	eef0 7a41 	vmov.f32	s15, s2
 8002412:	edc7 6a01 	vstr	s13, [r7, #4]
 8002416:	ed87 7a02 	vstr	s14, [r7, #8]
 800241a:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 800241e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002422:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	d075      	beq.n	8002518 <rotate_motor+0x118>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(1, 45));
 800242c:	4bd6      	ldr	r3, [pc, #856]	@ (8002788 <rotate_motor+0x388>)
 800242e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002432:	3b2d      	subs	r3, #45	@ 0x2d
 8002434:	2b00      	cmp	r3, #0
 8002436:	bfb8      	it	lt
 8002438:	425b      	neglt	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f89a 	bl	8000574 <__aeabi_i2d>
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	4bd1      	ldr	r3, [pc, #836]	@ (800278c <rotate_motor+0x38c>)
 8002446:	f7fe f8ff 	bl	8000648 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fbd1 	bl	8000bf8 <__aeabi_d2uiz>
 8002456:	4603      	mov	r3, r0
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	f240 21a9 	movw	r1, #681	@ 0x2a9
 8002460:	48c9      	ldr	r0, [pc, #804]	@ (8002788 <rotate_motor+0x388>)
 8002462:	f000 fee9 	bl	8003238 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(2, -45));
 8002466:	4bc8      	ldr	r3, [pc, #800]	@ (8002788 <rotate_motor+0x388>)
 8002468:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800246c:	332d      	adds	r3, #45	@ 0x2d
 800246e:	2b00      	cmp	r3, #0
 8002470:	bfb8      	it	lt
 8002472:	425b      	neglt	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f87d 	bl	8000574 <__aeabi_i2d>
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	4bc3      	ldr	r3, [pc, #780]	@ (800278c <rotate_motor+0x38c>)
 8002480:	f7fe f8e2 	bl	8000648 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	f7fe fbb4 	bl	8000bf8 <__aeabi_d2uiz>
 8002490:	4603      	mov	r3, r0
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	f240 1131 	movw	r1, #305	@ 0x131
 800249a:	48bd      	ldr	r0, [pc, #756]	@ (8002790 <rotate_motor+0x390>)
 800249c:	f000 fecc 	bl	8003238 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(3, 45));
 80024a0:	4bb9      	ldr	r3, [pc, #740]	@ (8002788 <rotate_motor+0x388>)
 80024a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80024a6:	3b2d      	subs	r3, #45	@ 0x2d
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bfb8      	it	lt
 80024ac:	425b      	neglt	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f860 	bl	8000574 <__aeabi_i2d>
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	4bb4      	ldr	r3, [pc, #720]	@ (800278c <rotate_motor+0x38c>)
 80024ba:	f7fe f8c5 	bl	8000648 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fb97 	bl	8000bf8 <__aeabi_d2uiz>
 80024ca:	4603      	mov	r3, r0
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	f240 21b1 	movw	r1, #689	@ 0x2b1
 80024d4:	48af      	ldr	r0, [pc, #700]	@ (8002794 <rotate_motor+0x394>)
 80024d6:	f000 feaf 	bl	8003238 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(4, -45));
 80024da:	4bab      	ldr	r3, [pc, #684]	@ (8002788 <rotate_motor+0x388>)
 80024dc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80024e0:	332d      	adds	r3, #45	@ 0x2d
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bfb8      	it	lt
 80024e6:	425b      	neglt	r3, r3
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f843 	bl	8000574 <__aeabi_i2d>
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4ba6      	ldr	r3, [pc, #664]	@ (800278c <rotate_motor+0x38c>)
 80024f4:	f7fe f8a8 	bl	8000648 <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7fe fb7a 	bl	8000bf8 <__aeabi_d2uiz>
 8002504:	4603      	mov	r3, r0
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	f240 113b 	movw	r1, #315	@ 0x13b
 800250e:	48a2      	ldr	r0, [pc, #648]	@ (8002798 <rotate_motor+0x398>)
 8002510:	f000 fe92 	bl	8003238 <servo_move>
    return;
 8002514:	f000 bdc6 	b.w	80030a4 <rotate_motor+0xca4>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f83c 	bl	8000598 <__aeabi_f2d>
 8002520:	4604      	mov	r4, r0
 8002522:	460d      	mov	r5, r1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f836 	bl	8000598 <__aeabi_f2d>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	ec43 2b11 	vmov	d1, r2, r3
 8002534:	ec45 4b10 	vmov	d0, r4, r5
 8002538:	f006 fe40 	bl	80091bc <atan2>
 800253c:	ec51 0b10 	vmov	r0, r1, d0
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b95      	ldr	r3, [pc, #596]	@ (800279c <rotate_motor+0x39c>)
 8002546:	f7fe f87f 	bl	8000648 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	a38b      	add	r3, pc, #556	@ (adr r3, 8002780 <rotate_motor+0x380>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fe f9a0 	bl	800089c <__aeabi_ddiv>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe fb68 	bl	8000c38 <__aeabi_d2f>
 8002568:	4603      	mov	r3, r0
 800256a:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 800256c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002570:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	d17c      	bne.n	8002674 <rotate_motor+0x274>
 800257a:	edd7 7a02 	vldr	s15, [r7, #8]
 800257e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	d075      	beq.n	8002674 <rotate_motor+0x274>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(1, 90));
 8002588:	4b7f      	ldr	r3, [pc, #508]	@ (8002788 <rotate_motor+0x388>)
 800258a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800258e:	3b5a      	subs	r3, #90	@ 0x5a
 8002590:	2b00      	cmp	r3, #0
 8002592:	bfb8      	it	lt
 8002594:	425b      	neglt	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffec 	bl	8000574 <__aeabi_i2d>
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	4b7a      	ldr	r3, [pc, #488]	@ (800278c <rotate_motor+0x38c>)
 80025a2:	f7fe f851 	bl	8000648 <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7fe fb23 	bl	8000bf8 <__aeabi_d2uiz>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80025bc:	4872      	ldr	r0, [pc, #456]	@ (8002788 <rotate_motor+0x388>)
 80025be:	f000 fe3b 	bl	8003238 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(2, 90));
 80025c2:	4b71      	ldr	r3, [pc, #452]	@ (8002788 <rotate_motor+0x388>)
 80025c4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80025c8:	3b5a      	subs	r3, #90	@ 0x5a
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bfb8      	it	lt
 80025ce:	425b      	neglt	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffcf 	bl	8000574 <__aeabi_i2d>
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	4b6c      	ldr	r3, [pc, #432]	@ (800278c <rotate_motor+0x38c>)
 80025dc:	f7fe f834 	bl	8000648 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe fb06 	bl	8000bf8 <__aeabi_d2uiz>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80025f6:	4866      	ldr	r0, [pc, #408]	@ (8002790 <rotate_motor+0x390>)
 80025f8:	f000 fe1e 	bl	8003238 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(3, 90));
 80025fc:	4b62      	ldr	r3, [pc, #392]	@ (8002788 <rotate_motor+0x388>)
 80025fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002602:	3b5a      	subs	r3, #90	@ 0x5a
 8002604:	2b00      	cmp	r3, #0
 8002606:	bfb8      	it	lt
 8002608:	425b      	neglt	r3, r3
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ffb2 	bl	8000574 <__aeabi_i2d>
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	4b5d      	ldr	r3, [pc, #372]	@ (800278c <rotate_motor+0x38c>)
 8002616:	f7fe f817 	bl	8000648 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fae9 	bl	8000bf8 <__aeabi_d2uiz>
 8002626:	4603      	mov	r3, r0
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002630:	4859      	ldr	r0, [pc, #356]	@ (8002798 <rotate_motor+0x398>)
 8002632:	f000 fe01 	bl	8003238 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(4, 90));
 8002636:	4b54      	ldr	r3, [pc, #336]	@ (8002788 <rotate_motor+0x388>)
 8002638:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800263c:	3b5a      	subs	r3, #90	@ 0x5a
 800263e:	2b00      	cmp	r3, #0
 8002640:	bfb8      	it	lt
 8002642:	425b      	neglt	r3, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff95 	bl	8000574 <__aeabi_i2d>
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b4f      	ldr	r3, [pc, #316]	@ (800278c <rotate_motor+0x38c>)
 8002650:	f7fd fffa 	bl	8000648 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe facc 	bl	8000bf8 <__aeabi_d2uiz>
 8002660:	4603      	mov	r3, r0
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800266a:	484a      	ldr	r0, [pc, #296]	@ (8002794 <rotate_motor+0x394>)
 800266c:	f000 fde4 	bl	8003238 <servo_move>
 8002670:	f000 bd18 	b.w	80030a4 <rotate_motor+0xca4>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 8002674:	edd7 7a01 	vldr	s15, [r7, #4]
 8002678:	eef5 7a40 	vcmp.f32	s15, #0.0
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	f000 8092 	beq.w	80027a8 <rotate_motor+0x3a8>
 8002684:	edd7 7a02 	vldr	s15, [r7, #8]
 8002688:	eef5 7a40 	vcmp.f32	s15, #0.0
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	f040 808a 	bne.w	80027a8 <rotate_motor+0x3a8>
    servo_move(&(servos[0]), SERVO_ID1_MIN_POS, SHORTEST_TIME_ROTATE(1, 90));
 8002694:	4b3c      	ldr	r3, [pc, #240]	@ (8002788 <rotate_motor+0x388>)
 8002696:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800269a:	3b5a      	subs	r3, #90	@ 0x5a
 800269c:	2b00      	cmp	r3, #0
 800269e:	bfb8      	it	lt
 80026a0:	425b      	neglt	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff66 	bl	8000574 <__aeabi_i2d>
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	4b37      	ldr	r3, [pc, #220]	@ (800278c <rotate_motor+0x38c>)
 80026ae:	f7fd ffcb 	bl	8000648 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7fe fa9d 	bl	8000bf8 <__aeabi_d2uiz>
 80026be:	4603      	mov	r3, r0
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	2164      	movs	r1, #100	@ 0x64
 80026c6:	4830      	ldr	r0, [pc, #192]	@ (8002788 <rotate_motor+0x388>)
 80026c8:	f000 fdb6 	bl	8003238 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(2, 90));
 80026cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <rotate_motor+0x388>)
 80026ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026d2:	3b5a      	subs	r3, #90	@ 0x5a
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bfb8      	it	lt
 80026d8:	425b      	neglt	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff4a 	bl	8000574 <__aeabi_i2d>
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	4b29      	ldr	r3, [pc, #164]	@ (800278c <rotate_motor+0x38c>)
 80026e6:	f7fd ffaf 	bl	8000648 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe fa81 	bl	8000bf8 <__aeabi_d2uiz>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	f240 3166 	movw	r1, #870	@ 0x366
 8002700:	4823      	ldr	r0, [pc, #140]	@ (8002790 <rotate_motor+0x390>)
 8002702:	f000 fd99 	bl	8003238 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MIN_POS, SHORTEST_TIME_ROTATE(3, 90));
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <rotate_motor+0x388>)
 8002708:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800270c:	3b5a      	subs	r3, #90	@ 0x5a
 800270e:	2b00      	cmp	r3, #0
 8002710:	bfb8      	it	lt
 8002712:	425b      	neglt	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ff2d 	bl	8000574 <__aeabi_i2d>
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <rotate_motor+0x38c>)
 8002720:	f7fd ff92 	bl	8000648 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f7fe fa64 	bl	8000bf8 <__aeabi_d2uiz>
 8002730:	4603      	mov	r3, r0
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	2182      	movs	r1, #130	@ 0x82
 8002738:	4817      	ldr	r0, [pc, #92]	@ (8002798 <rotate_motor+0x398>)
 800273a:	f000 fd7d 	bl	8003238 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(4, 90));
 800273e:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <rotate_motor+0x388>)
 8002740:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002744:	3b5a      	subs	r3, #90	@ 0x5a
 8002746:	2b00      	cmp	r3, #0
 8002748:	bfb8      	it	lt
 800274a:	425b      	neglt	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd ff11 	bl	8000574 <__aeabi_i2d>
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <rotate_motor+0x38c>)
 8002758:	f7fd ff76 	bl	8000648 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa48 	bl	8000bf8 <__aeabi_d2uiz>
 8002768:	4603      	mov	r3, r0
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	f240 316e 	movw	r1, #878	@ 0x36e
 8002772:	4808      	ldr	r0, [pc, #32]	@ (8002794 <rotate_motor+0x394>)
 8002774:	f000 fd60 	bl	8003238 <servo_move>
 8002778:	f000 bc94 	b.w	80030a4 <rotate_motor+0xca4>
 800277c:	f3af 8000 	nop.w
 8002780:	54442d18 	.word	0x54442d18
 8002784:	400921fb 	.word	0x400921fb
 8002788:	20000000 	.word	0x20000000
 800278c:	40080000 	.word	0x40080000
 8002790:	20000006 	.word	0x20000006
 8002794:	20000012 	.word	0x20000012
 8002798:	2000000c 	.word	0x2000000c
 800279c:	40668000 	.word	0x40668000
 80027a0:	43340000 	.word	0x43340000
 80027a4:	42b40000 	.word	0x42b40000
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {  // quadrant 2 or 4
 80027a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	d506      	bpl.n	80027c4 <rotate_motor+0x3c4>
 80027b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	dc0f      	bgt.n	80027e4 <rotate_motor+0x3e4>
 80027c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	f340 822d 	ble.w	8002c2e <rotate_motor+0x82e>
 80027d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e0:	f140 8225 	bpl.w	8002c2e <rotate_motor+0x82e>
    if (angle < 0)
 80027e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80027e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f0:	d507      	bpl.n	8002802 <rotate_motor+0x402>
      angle += 180;
 80027f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027f6:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80027a0 <rotate_motor+0x3a0>
 80027fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027fe:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 8002802:	edd7 7a05 	vldr	s15, [r7, #20]
 8002806:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80027a4 <rotate_motor+0x3a4>
 800280a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800280e:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 8002812:	edd7 7a05 	vldr	s15, [r7, #20]
 8002816:	eef1 7a67 	vneg.f32	s15, s15
 800281a:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 800281e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282a:	dd22      	ble.n	8002872 <rotate_motor+0x472>
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f7fd feb3 	bl	8000598 <__aeabi_f2d>
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	4bce      	ldr	r3, [pc, #824]	@ (8002b70 <rotate_motor+0x770>)
 8002838:	f7fe f830 	bl	800089c <__aeabi_ddiv>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	a3c0      	add	r3, pc, #768	@ (adr r3, 8002b48 <rotate_motor+0x748>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd fefd 	bl	8000648 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	4bc6      	ldr	r3, [pc, #792]	@ (8002b74 <rotate_motor+0x774>)
 800285c:	f7fd fd3e 	bl	80002dc <__adddf3>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f7fe f9c6 	bl	8000bf8 <__aeabi_d2uiz>
 800286c:	4603      	mov	r3, r0
 800286e:	b29c      	uxth	r4, r3
 8002870:	e021      	b.n	80028b6 <rotate_motor+0x4b6>
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7fd fe90 	bl	8000598 <__aeabi_f2d>
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4bbc      	ldr	r3, [pc, #752]	@ (8002b70 <rotate_motor+0x770>)
 800287e:	f7fe f80d 	bl	800089c <__aeabi_ddiv>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	4bba      	ldr	r3, [pc, #744]	@ (8002b78 <rotate_motor+0x778>)
 8002890:	f7fd feda 	bl	8000648 <__aeabi_dmul>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	4bb4      	ldr	r3, [pc, #720]	@ (8002b74 <rotate_motor+0x774>)
 80028a2:	f7fd fd1b 	bl	80002dc <__adddf3>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe f9a3 	bl	8000bf8 <__aeabi_d2uiz>
 80028b2:	4603      	mov	r3, r0
 80028b4:	b29c      	uxth	r4, r3
 80028b6:	4bb1      	ldr	r3, [pc, #708]	@ (8002b7c <rotate_motor+0x77c>)
 80028b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028bc:	335a      	adds	r3, #90	@ 0x5a
 80028be:	ee07 3a90 	vmov	s15, r3
 80028c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ca:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8002b80 <rotate_motor+0x780>
 80028ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028da:	ee17 3a90 	vmov	r3, s15
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bfb8      	it	lt
 80028e2:	425b      	neglt	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe45 	bl	8000574 <__aeabi_i2d>
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002b84 <rotate_motor+0x784>)
 80028f0:	f7fd feaa 	bl	8000648 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f7fe f97c 	bl	8000bf8 <__aeabi_d2uiz>
 8002900:	4603      	mov	r3, r0
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	4621      	mov	r1, r4
 8002908:	489c      	ldr	r0, [pc, #624]	@ (8002b7c <rotate_motor+0x77c>)
 800290a:	f000 fc95 	bl	8003238 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 800290e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	dd22      	ble.n	8002962 <rotate_motor+0x562>
 800291c:	6978      	ldr	r0, [r7, #20]
 800291e:	f7fd fe3b 	bl	8000598 <__aeabi_f2d>
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b92      	ldr	r3, [pc, #584]	@ (8002b70 <rotate_motor+0x770>)
 8002928:	f7fd ffb8 	bl	800089c <__aeabi_ddiv>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	a386      	add	r3, pc, #536	@ (adr r3, 8002b50 <rotate_motor+0x750>)
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f7fd fe85 	bl	8000648 <__aeabi_dmul>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	4b8a      	ldr	r3, [pc, #552]	@ (8002b74 <rotate_motor+0x774>)
 800294c:	f7fd fcc6 	bl	80002dc <__adddf3>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f7fe f94e 	bl	8000bf8 <__aeabi_d2uiz>
 800295c:	4603      	mov	r3, r0
 800295e:	b29c      	uxth	r4, r3
 8002960:	e021      	b.n	80029a6 <rotate_motor+0x5a6>
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7fd fe18 	bl	8000598 <__aeabi_f2d>
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	4b80      	ldr	r3, [pc, #512]	@ (8002b70 <rotate_motor+0x770>)
 800296e:	f7fd ff95 	bl	800089c <__aeabi_ddiv>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	a377      	add	r3, pc, #476	@ (adr r3, 8002b58 <rotate_motor+0x758>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fe62 	bl	8000648 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4b78      	ldr	r3, [pc, #480]	@ (8002b74 <rotate_motor+0x774>)
 8002992:	f7fd fca3 	bl	80002dc <__adddf3>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f92b 	bl	8000bf8 <__aeabi_d2uiz>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b29c      	uxth	r4, r3
 80029a6:	4b75      	ldr	r3, [pc, #468]	@ (8002b7c <rotate_motor+0x77c>)
 80029a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80029ac:	335a      	adds	r3, #90	@ 0x5a
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029ba:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b80 <rotate_motor+0x780>
 80029be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ca:	ee17 3a90 	vmov	r3, s15
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bfb8      	it	lt
 80029d2:	425b      	neglt	r3, r3
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdcd 	bl	8000574 <__aeabi_i2d>
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	4b69      	ldr	r3, [pc, #420]	@ (8002b84 <rotate_motor+0x784>)
 80029e0:	f7fd fe32 	bl	8000648 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f904 	bl	8000bf8 <__aeabi_d2uiz>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	4863      	ldr	r0, [pc, #396]	@ (8002b88 <rotate_motor+0x788>)
 80029fa:	f000 fc1d 	bl	8003238 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 80029fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	dd22      	ble.n	8002a52 <rotate_motor+0x652>
 8002a0c:	6978      	ldr	r0, [r7, #20]
 8002a0e:	f7fd fdc3 	bl	8000598 <__aeabi_f2d>
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	4b56      	ldr	r3, [pc, #344]	@ (8002b70 <rotate_motor+0x770>)
 8002a18:	f7fd ff40 	bl	800089c <__aeabi_ddiv>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	a34e      	add	r3, pc, #312	@ (adr r3, 8002b60 <rotate_motor+0x760>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fe0d 	bl	8000648 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b74 <rotate_motor+0x774>)
 8002a3c:	f7fd fc4e 	bl	80002dc <__adddf3>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f7fe f8d6 	bl	8000bf8 <__aeabi_d2uiz>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	b29c      	uxth	r4, r3
 8002a50:	e021      	b.n	8002a96 <rotate_motor+0x696>
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7fd fda0 	bl	8000598 <__aeabi_f2d>
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	4b44      	ldr	r3, [pc, #272]	@ (8002b70 <rotate_motor+0x770>)
 8002a5e:	f7fd ff1d 	bl	800089c <__aeabi_ddiv>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	a339      	add	r3, pc, #228	@ (adr r3, 8002b50 <rotate_motor+0x750>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fdea 	bl	8000648 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	4b3c      	ldr	r3, [pc, #240]	@ (8002b74 <rotate_motor+0x774>)
 8002a82:	f7fd fc2b 	bl	80002dc <__adddf3>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f7fe f8b3 	bl	8000bf8 <__aeabi_d2uiz>
 8002a92:	4603      	mov	r3, r0
 8002a94:	b29c      	uxth	r4, r3
 8002a96:	4b39      	ldr	r3, [pc, #228]	@ (8002b7c <rotate_motor+0x77c>)
 8002a98:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002a9c:	335a      	adds	r3, #90	@ 0x5a
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aaa:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002b80 <rotate_motor+0x780>
 8002aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aba:	ee17 3a90 	vmov	r3, s15
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bfb8      	it	lt
 8002ac2:	425b      	neglt	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd55 	bl	8000574 <__aeabi_i2d>
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	4b2d      	ldr	r3, [pc, #180]	@ (8002b84 <rotate_motor+0x784>)
 8002ad0:	f7fd fdba 	bl	8000648 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	f7fe f88c 	bl	8000bf8 <__aeabi_d2uiz>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	4828      	ldr	r0, [pc, #160]	@ (8002b8c <rotate_motor+0x78c>)
 8002aea:	f000 fba5 	bl	8003238 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afa:	dd49      	ble.n	8002b90 <rotate_motor+0x790>
 8002afc:	6978      	ldr	r0, [r7, #20]
 8002afe:	f7fd fd4b 	bl	8000598 <__aeabi_f2d>
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <rotate_motor+0x770>)
 8002b08:	f7fd fec8 	bl	800089c <__aeabi_ddiv>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	a314      	add	r3, pc, #80	@ (adr r3, 8002b68 <rotate_motor+0x768>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f7fd fd95 	bl	8000648 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <rotate_motor+0x774>)
 8002b2c:	f7fd fbd6 	bl	80002dc <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7fe f85e 	bl	8000bf8 <__aeabi_d2uiz>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	b29c      	uxth	r4, r3
 8002b40:	e048      	b.n	8002bd4 <rotate_motor+0x7d4>
 8002b42:	bf00      	nop
 8002b44:	f3af 8000 	nop.w
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	4076a000 	.word	0x4076a000
 8002b50:	00000000 	.word	0x00000000
 8002b54:	40772000 	.word	0x40772000
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	40786000 	.word	0x40786000
 8002b60:	00000000 	.word	0x00000000
 8002b64:	4076c000 	.word	0x4076c000
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	4077a000 	.word	0x4077a000
 8002b70:	40568000 	.word	0x40568000
 8002b74:	407f4000 	.word	0x407f4000
 8002b78:	40790000 	.word	0x40790000
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	42b40000 	.word	0x42b40000
 8002b84:	40080000 	.word	0x40080000
 8002b88:	20000006 	.word	0x20000006
 8002b8c:	2000000c 	.word	0x2000000c
 8002b90:	6978      	ldr	r0, [r7, #20]
 8002b92:	f7fd fd01 	bl	8000598 <__aeabi_f2d>
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4bd5      	ldr	r3, [pc, #852]	@ (8002ef0 <rotate_motor+0xaf0>)
 8002b9c:	f7fd fe7e 	bl	800089c <__aeabi_ddiv>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	4bd1      	ldr	r3, [pc, #836]	@ (8002ef4 <rotate_motor+0xaf4>)
 8002bae:	f7fd fd4b 	bl	8000648 <__aeabi_dmul>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	4bce      	ldr	r3, [pc, #824]	@ (8002ef8 <rotate_motor+0xaf8>)
 8002bc0:	f7fd fb8c 	bl	80002dc <__adddf3>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f7fe f814 	bl	8000bf8 <__aeabi_d2uiz>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	b29c      	uxth	r4, r3
 8002bd4:	4bc9      	ldr	r3, [pc, #804]	@ (8002efc <rotate_motor+0xafc>)
 8002bd6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002bda:	335a      	adds	r3, #90	@ 0x5a
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002be8:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8002f00 <rotate_motor+0xb00>
 8002bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf8:	ee17 3a90 	vmov	r3, s15
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bfb8      	it	lt
 8002c00:	425b      	neglt	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fcb6 	bl	8000574 <__aeabi_i2d>
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	4bbd      	ldr	r3, [pc, #756]	@ (8002f04 <rotate_motor+0xb04>)
 8002c0e:	f7fd fd1b 	bl	8000648 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f7fd ffed 	bl	8000bf8 <__aeabi_d2uiz>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	4621      	mov	r1, r4
 8002c26:	48b8      	ldr	r0, [pc, #736]	@ (8002f08 <rotate_motor+0xb08>)
 8002c28:	f000 fb06 	bl	8003238 <servo_move>
 8002c2c:	e23a      	b.n	80030a4 <rotate_motor+0xca4>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {  // quadrant 1 or 3
 8002c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	d506      	bpl.n	8002c4a <rotate_motor+0x84a>
 8002c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	d40f      	bmi.n	8002c6a <rotate_motor+0x86a>
 8002c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c56:	f340 8225 	ble.w	80030a4 <rotate_motor+0xca4>
 8002c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c66:	f340 821d 	ble.w	80030a4 <rotate_motor+0xca4>
    if (angle < 0)
 8002c6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c76:	d507      	bpl.n	8002c88 <rotate_motor+0x888>
      angle += 180;
 8002c78:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c7c:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8002f0c <rotate_motor+0xb0c>
 8002c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c84:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 8002c88:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8002f00 <rotate_motor+0xb00>
 8002c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c94:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 8002c98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	dd22      	ble.n	8002cec <rotate_motor+0x8ec>
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7fd fc76 	bl	8000598 <__aeabi_f2d>
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8002ef0 <rotate_motor+0xaf0>)
 8002cb2:	f7fd fdf3 	bl	800089c <__aeabi_ddiv>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	a384      	add	r3, pc, #528	@ (adr r3, 8002ed0 <rotate_motor+0xad0>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fcc0 	bl	8000648 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	4b88      	ldr	r3, [pc, #544]	@ (8002ef8 <rotate_motor+0xaf8>)
 8002cd6:	f7fd fb01 	bl	80002dc <__adddf3>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd ff89 	bl	8000bf8 <__aeabi_d2uiz>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	b29c      	uxth	r4, r3
 8002cea:	e021      	b.n	8002d30 <rotate_motor+0x930>
 8002cec:	6978      	ldr	r0, [r7, #20]
 8002cee:	f7fd fc53 	bl	8000598 <__aeabi_f2d>
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ef0 <rotate_motor+0xaf0>)
 8002cf8:	f7fd fdd0 	bl	800089c <__aeabi_ddiv>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	4b81      	ldr	r3, [pc, #516]	@ (8002f10 <rotate_motor+0xb10>)
 8002d0a:	f7fd fc9d 	bl	8000648 <__aeabi_dmul>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	4b77      	ldr	r3, [pc, #476]	@ (8002ef8 <rotate_motor+0xaf8>)
 8002d1c:	f7fd fade 	bl	80002dc <__adddf3>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	f7fd ff66 	bl	8000bf8 <__aeabi_d2uiz>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	b29c      	uxth	r4, r3
 8002d30:	4b72      	ldr	r3, [pc, #456]	@ (8002efc <rotate_motor+0xafc>)
 8002d32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d36:	335a      	adds	r3, #90	@ 0x5a
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d44:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002f00 <rotate_motor+0xb00>
 8002d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d54:	ee17 3a90 	vmov	r3, s15
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bfb8      	it	lt
 8002d5c:	425b      	neglt	r3, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fc08 	bl	8000574 <__aeabi_i2d>
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	4b66      	ldr	r3, [pc, #408]	@ (8002f04 <rotate_motor+0xb04>)
 8002d6a:	f7fd fc6d 	bl	8000648 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd ff3f 	bl	8000bf8 <__aeabi_d2uiz>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4621      	mov	r1, r4
 8002d82:	485e      	ldr	r0, [pc, #376]	@ (8002efc <rotate_motor+0xafc>)
 8002d84:	f000 fa58 	bl	8003238 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8002d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	dd22      	ble.n	8002ddc <rotate_motor+0x9dc>
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7fd fbfe 	bl	8000598 <__aeabi_f2d>
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	4b53      	ldr	r3, [pc, #332]	@ (8002ef0 <rotate_motor+0xaf0>)
 8002da2:	f7fd fd7b 	bl	800089c <__aeabi_ddiv>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	a34a      	add	r3, pc, #296	@ (adr r3, 8002ed8 <rotate_motor+0xad8>)
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f7fd fc48 	bl	8000648 <__aeabi_dmul>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef8 <rotate_motor+0xaf8>)
 8002dc6:	f7fd fa89 	bl	80002dc <__adddf3>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd ff11 	bl	8000bf8 <__aeabi_d2uiz>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	b29c      	uxth	r4, r3
 8002dda:	e021      	b.n	8002e20 <rotate_motor+0xa20>
 8002ddc:	6978      	ldr	r0, [r7, #20]
 8002dde:	f7fd fbdb 	bl	8000598 <__aeabi_f2d>
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	4b42      	ldr	r3, [pc, #264]	@ (8002ef0 <rotate_motor+0xaf0>)
 8002de8:	f7fd fd58 	bl	800089c <__aeabi_ddiv>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	a33a      	add	r3, pc, #232	@ (adr r3, 8002ee0 <rotate_motor+0xae0>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f7fd fc25 	bl	8000648 <__aeabi_dmul>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef8 <rotate_motor+0xaf8>)
 8002e0c:	f7fd fa66 	bl	80002dc <__adddf3>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd feee 	bl	8000bf8 <__aeabi_d2uiz>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	b29c      	uxth	r4, r3
 8002e20:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <rotate_motor+0xafc>)
 8002e22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e26:	335a      	adds	r3, #90	@ 0x5a
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e30:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e34:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002f00 <rotate_motor+0xb00>
 8002e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e44:	ee17 3a90 	vmov	r3, s15
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bfb8      	it	lt
 8002e4c:	425b      	neglt	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb90 	bl	8000574 <__aeabi_i2d>
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	4b2a      	ldr	r3, [pc, #168]	@ (8002f04 <rotate_motor+0xb04>)
 8002e5a:	f7fd fbf5 	bl	8000648 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f7fd fec7 	bl	8000bf8 <__aeabi_d2uiz>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4621      	mov	r1, r4
 8002e72:	4828      	ldr	r0, [pc, #160]	@ (8002f14 <rotate_motor+0xb14>)
 8002e74:	f000 f9e0 	bl	8003238 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 8002e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	dd48      	ble.n	8002f18 <rotate_motor+0xb18>
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f7fd fb86 	bl	8000598 <__aeabi_f2d>
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <rotate_motor+0xaf0>)
 8002e92:	f7fd fd03 	bl	800089c <__aeabi_ddiv>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	a312      	add	r3, pc, #72	@ (adr r3, 8002ee8 <rotate_motor+0xae8>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fbd0 	bl	8000648 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <rotate_motor+0xaf8>)
 8002eb6:	f7fd fa11 	bl	80002dc <__adddf3>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f7fd fe99 	bl	8000bf8 <__aeabi_d2uiz>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b29c      	uxth	r4, r3
 8002eca:	e047      	b.n	8002f5c <rotate_motor+0xb5c>
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	00000000 	.word	0x00000000
 8002ed4:	4076a000 	.word	0x4076a000
 8002ed8:	00000000 	.word	0x00000000
 8002edc:	40772000 	.word	0x40772000
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	40786000 	.word	0x40786000
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	4076c000 	.word	0x4076c000
 8002ef0:	40568000 	.word	0x40568000
 8002ef4:	40768000 	.word	0x40768000
 8002ef8:	407f4000 	.word	0x407f4000
 8002efc:	20000000 	.word	0x20000000
 8002f00:	42b40000 	.word	0x42b40000
 8002f04:	40080000 	.word	0x40080000
 8002f08:	20000012 	.word	0x20000012
 8002f0c:	43340000 	.word	0x43340000
 8002f10:	40790000 	.word	0x40790000
 8002f14:	20000006 	.word	0x20000006
 8002f18:	6978      	ldr	r0, [r7, #20]
 8002f1a:	f7fd fb3d 	bl	8000598 <__aeabi_f2d>
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	4b67      	ldr	r3, [pc, #412]	@ (80030c0 <rotate_motor+0xcc0>)
 8002f24:	f7fd fcba 	bl	800089c <__aeabi_ddiv>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	a35f      	add	r3, pc, #380	@ (adr r3, 80030b0 <rotate_motor+0xcb0>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd fb87 	bl	8000648 <__aeabi_dmul>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	4b5f      	ldr	r3, [pc, #380]	@ (80030c4 <rotate_motor+0xcc4>)
 8002f48:	f7fd f9c8 	bl	80002dc <__adddf3>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7fd fe50 	bl	8000bf8 <__aeabi_d2uiz>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	b29c      	uxth	r4, r3
 8002f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80030c8 <rotate_motor+0xcc8>)
 8002f5e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f62:	335a      	adds	r3, #90	@ 0x5a
 8002f64:	ee07 3a90 	vmov	s15, r3
 8002f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f70:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80030cc <rotate_motor+0xccc>
 8002f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f80:	ee17 3a90 	vmov	r3, s15
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bfb8      	it	lt
 8002f88:	425b      	neglt	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd faf2 	bl	8000574 <__aeabi_i2d>
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	4b4e      	ldr	r3, [pc, #312]	@ (80030d0 <rotate_motor+0xcd0>)
 8002f96:	f7fd fb57 	bl	8000648 <__aeabi_dmul>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fe29 	bl	8000bf8 <__aeabi_d2uiz>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	4621      	mov	r1, r4
 8002fae:	4849      	ldr	r0, [pc, #292]	@ (80030d4 <rotate_motor+0xcd4>)
 8002fb0:	f000 f942 	bl	8003238 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc0:	dd22      	ble.n	8003008 <rotate_motor+0xc08>
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7fd fae8 	bl	8000598 <__aeabi_f2d>
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80030c0 <rotate_motor+0xcc0>)
 8002fce:	f7fd fc65 	bl	800089c <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	a337      	add	r3, pc, #220	@ (adr r3, 80030b8 <rotate_motor+0xcb8>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f7fd fb32 	bl	8000648 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <rotate_motor+0xcc4>)
 8002ff2:	f7fd f973 	bl	80002dc <__adddf3>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f7fd fdfb 	bl	8000bf8 <__aeabi_d2uiz>
 8003002:	4603      	mov	r3, r0
 8003004:	b29c      	uxth	r4, r3
 8003006:	e021      	b.n	800304c <rotate_motor+0xc4c>
 8003008:	6978      	ldr	r0, [r7, #20]
 800300a:	f7fd fac5 	bl	8000598 <__aeabi_f2d>
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <rotate_motor+0xcc0>)
 8003014:	f7fd fc42 	bl	800089c <__aeabi_ddiv>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	4b2c      	ldr	r3, [pc, #176]	@ (80030d8 <rotate_motor+0xcd8>)
 8003026:	f7fd fb0f 	bl	8000648 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	4b23      	ldr	r3, [pc, #140]	@ (80030c4 <rotate_motor+0xcc4>)
 8003038:	f7fd f950 	bl	80002dc <__adddf3>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f7fd fdd8 	bl	8000bf8 <__aeabi_d2uiz>
 8003048:	4603      	mov	r3, r0
 800304a:	b29c      	uxth	r4, r3
 800304c:	4b1e      	ldr	r3, [pc, #120]	@ (80030c8 <rotate_motor+0xcc8>)
 800304e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003052:	335a      	adds	r3, #90	@ 0x5a
 8003054:	ee07 3a90 	vmov	s15, r3
 8003058:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800305c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003060:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80030cc <rotate_motor+0xccc>
 8003064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003070:	ee17 3a90 	vmov	r3, s15
 8003074:	2b00      	cmp	r3, #0
 8003076:	bfb8      	it	lt
 8003078:	425b      	neglt	r3, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa7a 	bl	8000574 <__aeabi_i2d>
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <rotate_motor+0xcd0>)
 8003086:	f7fd fadf 	bl	8000648 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fdb1 	bl	8000bf8 <__aeabi_d2uiz>
 8003096:	4603      	mov	r3, r0
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	4621      	mov	r1, r4
 800309e:	480f      	ldr	r0, [pc, #60]	@ (80030dc <rotate_motor+0xcdc>)
 80030a0:	f000 f8ca 	bl	8003238 <servo_move>
  }
}
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bdb0      	pop	{r4, r5, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	f3af 8000 	nop.w
 80030b0:	00000000 	.word	0x00000000
 80030b4:	40772000 	.word	0x40772000
 80030b8:	00000000 	.word	0x00000000
 80030bc:	4077a000 	.word	0x4077a000
 80030c0:	40568000 	.word	0x40568000
 80030c4:	407f4000 	.word	0x407f4000
 80030c8:	20000000 	.word	0x20000000
 80030cc:	42b40000 	.word	0x42b40000
 80030d0:	40080000 	.word	0x40080000
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	40768000 	.word	0x40768000
 80030dc:	20000012 	.word	0x20000012

080030e0 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	@ 0x30
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	eef0 6a40 	vmov.f32	s13, s0
 80030ea:	eeb0 7a60 	vmov.f32	s14, s1
 80030ee:	eef0 7a41 	vmov.f32	s15, s2
 80030f2:	edc7 6a01 	vstr	s13, [r7, #4]
 80030f6:	ed87 7a02 	vstr	s14, [r7, #8]
 80030fa:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.x_vel != 0 && direction_encoder != LEFT_RIGHT || base_vel.y_vel != 0 && direction_encoder != FRONT_BACK) {
 80030fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003102:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	d003      	beq.n	8003114 <movement_control+0x34>
 800310c:	4b49      	ldr	r3, [pc, #292]	@ (8003234 <movement_control+0x154>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10a      	bne.n	800312a <movement_control+0x4a>
 8003114:	edd7 7a02 	vldr	s15, [r7, #8]
 8003118:	eef5 7a40 	vcmp.f32	s15, #0.0
 800311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003120:	d01f      	beq.n	8003162 <movement_control+0x82>
 8003122:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <movement_control+0x154>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01b      	beq.n	8003162 <movement_control+0x82>
    rotate_motor(base_vel);
 800312a:	edd7 6a01 	vldr	s13, [r7, #4]
 800312e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003132:	edd7 7a03 	vldr	s15, [r7, #12]
 8003136:	eeb0 0a66 	vmov.f32	s0, s13
 800313a:	eef0 0a47 	vmov.f32	s1, s14
 800313e:	eeb0 1a67 	vmov.f32	s2, s15
 8003142:	f7ff f95d 	bl	8002400 <rotate_motor>
    direction_encoder = base_vel.x_vel != 0 ? LEFT_RIGHT : FRONT_BACK;
 8003146:	edd7 7a01 	vldr	s15, [r7, #4]
 800314a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800314e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	4b35      	ldr	r3, [pc, #212]	@ (8003234 <movement_control+0x154>)
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e01b      	b.n	800319a <movement_control+0xba>
  } else if (base_vel.z_vel != 0 && direction_encoder != ROTATE) {
 8003162:	edd7 7a03 	vldr	s15, [r7, #12]
 8003166:	eef5 7a40 	vcmp.f32	s15, #0.0
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	d014      	beq.n	800319a <movement_control+0xba>
 8003170:	4b30      	ldr	r3, [pc, #192]	@ (8003234 <movement_control+0x154>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d010      	beq.n	800319a <movement_control+0xba>
    rotate_motor(base_vel);
 8003178:	edd7 6a01 	vldr	s13, [r7, #4]
 800317c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003180:	edd7 7a03 	vldr	s15, [r7, #12]
 8003184:	eeb0 0a66 	vmov.f32	s0, s13
 8003188:	eef0 0a47 	vmov.f32	s1, s14
 800318c:	eeb0 1a67 	vmov.f32	s2, s15
 8003190:	f7ff f936 	bl	8002400 <rotate_motor>
    direction_encoder = ROTATE;
 8003194:	4b27      	ldr	r3, [pc, #156]	@ (8003234 <movement_control+0x154>)
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
  }

  WheelVelocity target_vel = base2wheel(base_vel);
 800319a:	edd7 6a01 	vldr	s13, [r7, #4]
 800319e:	ed97 7a02 	vldr	s14, [r7, #8]
 80031a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a6:	eeb0 0a66 	vmov.f32	s0, s13
 80031aa:	eef0 0a47 	vmov.f32	s1, s14
 80031ae:	eeb0 1a67 	vmov.f32	s2, s15
 80031b2:	f7fe fd29 	bl	8001c08 <base2wheel>
 80031b6:	eeb0 6a40 	vmov.f32	s12, s0
 80031ba:	eef0 6a60 	vmov.f32	s13, s1
 80031be:	eeb0 7a41 	vmov.f32	s14, s2
 80031c2:	eef0 7a61 	vmov.f32	s15, s3
 80031c6:	ed87 6a08 	vstr	s12, [r7, #32]
 80031ca:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 80031ce:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 80031d2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
if (direction_encoder == LEFT_RIGHT) {
 80031d6:	4b17      	ldr	r3, [pc, #92]	@ (8003234 <movement_control+0x154>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d10b      	bne.n	80031f6 <movement_control+0x116>
  target_vel.front_left *= -1;
 80031de:	edd7 7a08 	vldr	s15, [r7, #32]
 80031e2:	eef1 7a67 	vneg.f32	s15, s15
 80031e6:	edc7 7a08 	vstr	s15, [r7, #32]
  target_vel.rear_left *= -1;
 80031ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80031ee:	eef1 7a67 	vneg.f32	s15, s15
 80031f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
}


  WheelPWM target_pwm = wheel2pwm(target_vel);
 80031f6:	f107 0310 	add.w	r3, r7, #16
 80031fa:	ed97 6a08 	vldr	s12, [r7, #32]
 80031fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003202:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003206:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800320a:	eeb0 0a46 	vmov.f32	s0, s12
 800320e:	eef0 0a66 	vmov.f32	s1, s13
 8003212:	eeb0 1a47 	vmov.f32	s2, s14
 8003216:	eef0 1a67 	vmov.f32	s3, s15
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fe4c 	bl	8001eb8 <wheel2pwm>
  wheels_control(target_pwm);
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003226:	f7ff f8cb 	bl	80023c0 <wheels_control>
}
 800322a:	bf00      	nop
 800322c:	3730      	adds	r7, #48	@ 0x30
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	2000010a 	.word	0x2000010a

08003238 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
 8003244:	4613      	mov	r3, r2
 8003246:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8003248:	2355      	movs	r3, #85	@ 0x55
 800324a:	737b      	strb	r3, [r7, #13]
 800324c:	7b7b      	ldrb	r3, [r7, #13]
 800324e:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8003250:	2308      	movs	r3, #8
 8003252:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 8003254:	2303      	movs	r3, #3
 8003256:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8003258:	2301      	movs	r3, #1
 800325a:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 800325c:	883b      	ldrh	r3, [r7, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 8003262:	883b      	ldrh	r3, [r7, #0]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	b29b      	uxth	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 8003282:	f107 010c 	add.w	r1, r7, #12
 8003286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800328a:	220a      	movs	r2, #10
 800328c:	48ce      	ldr	r0, [pc, #824]	@ (80035c8 <servo_move+0x390>)
 800328e:	f003 fe81 	bl	8006f94 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	887a      	ldrh	r2, [r7, #2]
 8003296:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	3b01      	subs	r3, #1
 800329e:	2b05      	cmp	r3, #5
 80032a0:	f200 81a6 	bhi.w	80035f0 <servo_move+0x3b8>
 80032a4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <servo_move+0x74>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032c5 	.word	0x080032c5
 80032b0:	08003345 	.word	0x08003345
 80032b4:	080033c5 	.word	0x080033c5
 80032b8:	08003445 	.word	0x08003445
 80032bc:	080034c5 	.word	0x080034c5
 80032c0:	08003545 	.word	0x08003545
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80032ca:	d91c      	bls.n	8003306 <servo_move+0xce>
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f94e 	bl	8000574 <__aeabi_i2d>
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	4bbb      	ldr	r3, [pc, #748]	@ (80035cc <servo_move+0x394>)
 80032de:	f7fd f9b3 	bl	8000648 <__aeabi_dmul>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	a3a7      	add	r3, pc, #668	@ (adr r3, 8003588 <servo_move+0x350>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fd fad4 	bl	800089c <__aeabi_ddiv>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7fd fc54 	bl	8000ba8 <__aeabi_d2iz>
 8003300:	4603      	mov	r3, r0
 8003302:	b21b      	sxth	r3, r3
 8003304:	e01b      	b.n	800333e <servo_move+0x106>
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f931 	bl	8000574 <__aeabi_i2d>
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	4bae      	ldr	r3, [pc, #696]	@ (80035d0 <servo_move+0x398>)
 8003318:	f7fd f996 	bl	8000648 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	4baa      	ldr	r3, [pc, #680]	@ (80035d4 <servo_move+0x39c>)
 800332a:	f7fd fab7 	bl	800089c <__aeabi_ddiv>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fc37 	bl	8000ba8 <__aeabi_d2iz>
 800333a:	4603      	mov	r3, r0
 800333c:	b21b      	sxth	r3, r3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	8093      	strh	r3, [r2, #4]
      break;
 8003342:	e156      	b.n	80035f2 <servo_move+0x3ba>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800334a:	d91c      	bls.n	8003386 <servo_move+0x14e>
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f90e 	bl	8000574 <__aeabi_i2d>
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	4b9b      	ldr	r3, [pc, #620]	@ (80035cc <servo_move+0x394>)
 800335e:	f7fd f973 	bl	8000648 <__aeabi_dmul>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	a389      	add	r3, pc, #548	@ (adr r3, 8003590 <servo_move+0x358>)
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f7fd fa94 	bl	800089c <__aeabi_ddiv>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fc14 	bl	8000ba8 <__aeabi_d2iz>
 8003380:	4603      	mov	r3, r0
 8003382:	b21b      	sxth	r3, r3
 8003384:	e01b      	b.n	80033be <servo_move+0x186>
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd f8f1 	bl	8000574 <__aeabi_i2d>
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	4b8e      	ldr	r3, [pc, #568]	@ (80035d0 <servo_move+0x398>)
 8003398:	f7fd f956 	bl	8000648 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	a37c      	add	r3, pc, #496	@ (adr r3, 8003598 <servo_move+0x360>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fd fa77 	bl	800089c <__aeabi_ddiv>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f7fd fbf7 	bl	8000ba8 <__aeabi_d2iz>
 80033ba:	4603      	mov	r3, r0
 80033bc:	b21b      	sxth	r3, r3
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	8093      	strh	r3, [r2, #4]
      break;
 80033c2:	e116      	b.n	80035f2 <servo_move+0x3ba>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80033ca:	d91c      	bls.n	8003406 <servo_move+0x1ce>
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f8ce 	bl	8000574 <__aeabi_i2d>
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	4b7b      	ldr	r3, [pc, #492]	@ (80035cc <servo_move+0x394>)
 80033de:	f7fd f933 	bl	8000648 <__aeabi_dmul>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	a36d      	add	r3, pc, #436	@ (adr r3, 80035a0 <servo_move+0x368>)
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f7fd fa54 	bl	800089c <__aeabi_ddiv>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4610      	mov	r0, r2
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7fd fbd4 	bl	8000ba8 <__aeabi_d2iz>
 8003400:	4603      	mov	r3, r0
 8003402:	b21b      	sxth	r3, r3
 8003404:	e01b      	b.n	800343e <servo_move+0x206>
 8003406:	887b      	ldrh	r3, [r7, #2]
 8003408:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd f8b1 	bl	8000574 <__aeabi_i2d>
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	4b6e      	ldr	r3, [pc, #440]	@ (80035d0 <servo_move+0x398>)
 8003418:	f7fd f916 	bl	8000648 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	a360      	add	r3, pc, #384	@ (adr r3, 80035a8 <servo_move+0x370>)
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f7fd fa37 	bl	800089c <__aeabi_ddiv>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	f7fd fbb7 	bl	8000ba8 <__aeabi_d2iz>
 800343a:	4603      	mov	r3, r0
 800343c:	b21b      	sxth	r3, r3
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	8093      	strh	r3, [r2, #4]
      break;
 8003442:	e0d6      	b.n	80035f2 <servo_move+0x3ba>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800344a:	d91c      	bls.n	8003486 <servo_move+0x24e>
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd f88e 	bl	8000574 <__aeabi_i2d>
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	4b5b      	ldr	r3, [pc, #364]	@ (80035cc <servo_move+0x394>)
 800345e:	f7fd f8f3 	bl	8000648 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	a351      	add	r3, pc, #324	@ (adr r3, 80035b0 <servo_move+0x378>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd fa14 	bl	800089c <__aeabi_ddiv>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f7fd fb94 	bl	8000ba8 <__aeabi_d2iz>
 8003480:	4603      	mov	r3, r0
 8003482:	b21b      	sxth	r3, r3
 8003484:	e01b      	b.n	80034be <servo_move+0x286>
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd f871 	bl	8000574 <__aeabi_i2d>
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	4b4e      	ldr	r3, [pc, #312]	@ (80035d0 <servo_move+0x398>)
 8003498:	f7fd f8d6 	bl	8000648 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	4b4b      	ldr	r3, [pc, #300]	@ (80035d8 <servo_move+0x3a0>)
 80034aa:	f7fd f9f7 	bl	800089c <__aeabi_ddiv>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	f7fd fb77 	bl	8000ba8 <__aeabi_d2iz>
 80034ba:	4603      	mov	r3, r0
 80034bc:	b21b      	sxth	r3, r3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	8093      	strh	r3, [r2, #4]
      break;
 80034c2:	e096      	b.n	80035f2 <servo_move+0x3ba>
    case 5:
      target_servo->current_degree = SERVO_ID5_POS_TO_ANGLE(target_pos);
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80034ca:	d91c      	bls.n	8003506 <servo_move+0x2ce>
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd f84e 	bl	8000574 <__aeabi_i2d>
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	4b3b      	ldr	r3, [pc, #236]	@ (80035cc <servo_move+0x394>)
 80034de:	f7fd f8b3 	bl	8000648 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	a333      	add	r3, pc, #204	@ (adr r3, 80035b8 <servo_move+0x380>)
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f7fd f9d4 	bl	800089c <__aeabi_ddiv>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	f7fd fb54 	bl	8000ba8 <__aeabi_d2iz>
 8003500:	4603      	mov	r3, r0
 8003502:	b21b      	sxth	r3, r3
 8003504:	e01b      	b.n	800353e <servo_move+0x306>
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f831 	bl	8000574 <__aeabi_i2d>
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	4b31      	ldr	r3, [pc, #196]	@ (80035dc <servo_move+0x3a4>)
 8003518:	f7fd f896 	bl	8000648 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	a326      	add	r3, pc, #152	@ (adr r3, 80035c0 <servo_move+0x388>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f7fd f9b7 	bl	800089c <__aeabi_ddiv>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	f7fd fb37 	bl	8000ba8 <__aeabi_d2iz>
 800353a:	4603      	mov	r3, r0
 800353c:	b21b      	sxth	r3, r3
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	8093      	strh	r3, [r2, #4]
      break;
 8003542:	e056      	b.n	80035f2 <servo_move+0x3ba>
    case 6:
      target_servo->current_degree = SERVO_ID6_POS_TO_ANGLE(target_pos);
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800354a:	d84d      	bhi.n	80035e8 <servo_move+0x3b0>
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd f80e 	bl	8000574 <__aeabi_i2d>
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <servo_move+0x3a8>)
 800355e:	f7fd f873 	bl	8000648 <__aeabi_dmul>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	4b1d      	ldr	r3, [pc, #116]	@ (80035e4 <servo_move+0x3ac>)
 8003570:	f7fd f994 	bl	800089c <__aeabi_ddiv>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	f7fd fb14 	bl	8000ba8 <__aeabi_d2iz>
 8003580:	4603      	mov	r3, r0
 8003582:	b21a      	sxth	r2, r3
 8003584:	e031      	b.n	80035ea <servo_move+0x3b2>
 8003586:	bf00      	nop
 8003588:	00000000 	.word	0x00000000
 800358c:	4076a000 	.word	0x4076a000
 8003590:	00000000 	.word	0x00000000
 8003594:	40772000 	.word	0x40772000
 8003598:	00000000 	.word	0x00000000
 800359c:	c0786000 	.word	0xc0786000
 80035a0:	00000000 	.word	0x00000000
 80035a4:	4076c000 	.word	0x4076c000
 80035a8:	00000000 	.word	0x00000000
 80035ac:	c0772000 	.word	0xc0772000
 80035b0:	00000000 	.word	0x00000000
 80035b4:	4077a000 	.word	0x4077a000
 80035b8:	00000000 	.word	0x00000000
 80035bc:	40786000 	.word	0x40786000
 80035c0:	00000000 	.word	0x00000000
 80035c4:	c0554000 	.word	0xc0554000
 80035c8:	200002d8 	.word	0x200002d8
 80035cc:	40568000 	.word	0x40568000
 80035d0:	c0568000 	.word	0xc0568000
 80035d4:	c0790000 	.word	0xc0790000
 80035d8:	c0768000 	.word	0xc0768000
 80035dc:	c0240000 	.word	0xc0240000
 80035e0:	c03e0000 	.word	0xc03e0000
 80035e4:	c05e0000 	.word	0xc05e0000
 80035e8:	2200      	movs	r2, #0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	809a      	strh	r2, [r3, #4]
      break;
 80035ee:	e000      	b.n	80035f2 <servo_move+0x3ba>
    default:
      break;
 80035f0:	bf00      	nop
  }
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop

080035fc <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	e010      	b.n	800362a <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4a0a      	ldr	r2, [pc, #40]	@ (800363c <servo_reset_all+0x40>)
 8003614:	4413      	add	r3, r2
 8003616:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800361a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fe0a 	bl	8003238 <servo_move>
  for (int i = 0; i < 6; i++)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3301      	adds	r3, #1
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b05      	cmp	r3, #5
 800362e:	ddeb      	ble.n	8003608 <servo_reset_all+0xc>
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003646:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <HAL_MspInit+0x44>)
 8003648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364a:	4a0e      	ldr	r2, [pc, #56]	@ (8003684 <HAL_MspInit+0x44>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6613      	str	r3, [r2, #96]	@ 0x60
 8003652:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <HAL_MspInit+0x44>)
 8003654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <HAL_MspInit+0x44>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <HAL_MspInit+0x44>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003668:	6593      	str	r3, [r2, #88]	@ 0x58
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_MspInit+0x44>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003676:	f001 f9c3 	bl	8004a00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000

08003688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <NMI_Handler+0x4>

08003690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <HardFault_Handler+0x4>

08003698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <MemManage_Handler+0x4>

080036a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <BusFault_Handler+0x4>

080036a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <UsageFault_Handler+0x4>

080036b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036de:	f000 fe2d 	bl	800433c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e00a      	b.n	800370e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036f8:	f3af 8000 	nop.w
 80036fc:	4601      	mov	r1, r0
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	60ba      	str	r2, [r7, #8]
 8003704:	b2ca      	uxtb	r2, r1
 8003706:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3301      	adds	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	429a      	cmp	r2, r3
 8003714:	dbf0      	blt.n	80036f8 <_read+0x12>
  }

  return len;
 8003716:	687b      	ldr	r3, [r7, #4]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e009      	b.n	8003746 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	60ba      	str	r2, [r7, #8]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3301      	adds	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	dbf1      	blt.n	8003732 <_write+0x12>
  }
  return len;
 800374e:	687b      	ldr	r3, [r7, #4]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <_close>:

int _close(int file)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003780:	605a      	str	r2, [r3, #4]
  return 0;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <_isatty>:

int _isatty(int file)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003798:	2301      	movs	r3, #1
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c8:	4a14      	ldr	r2, [pc, #80]	@ (800381c <_sbrk+0x5c>)
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <_sbrk+0x60>)
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037d4:	4b13      	ldr	r3, [pc, #76]	@ (8003824 <_sbrk+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <_sbrk+0x64>)
 80037de:	4a12      	ldr	r2, [pc, #72]	@ (8003828 <_sbrk+0x68>)
 80037e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037e2:	4b10      	ldr	r3, [pc, #64]	@ (8003824 <_sbrk+0x64>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d207      	bcs.n	8003800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037f0:	f004 fda8 	bl	8008344 <__errno>
 80037f4:	4603      	mov	r3, r0
 80037f6:	220c      	movs	r2, #12
 80037f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037fe:	e009      	b.n	8003814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003800:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <_sbrk+0x64>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003806:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <_sbrk+0x64>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	4a05      	ldr	r2, [pc, #20]	@ (8003824 <_sbrk+0x64>)
 8003810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20020000 	.word	0x20020000
 8003820:	00000400 	.word	0x00000400
 8003824:	2000010c 	.word	0x2000010c
 8003828:	20000550 	.word	0x20000550

0800382c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <SystemInit+0x20>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	4a05      	ldr	r2, [pc, #20]	@ (800384c <SystemInit+0x20>)
 8003838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800383c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08c      	sub	sp, #48	@ 0x30
 8003854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	2224      	movs	r2, #36	@ 0x24
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f004 fd22 	bl	80082a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003864:	463b      	mov	r3, r7
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800386e:	4b23      	ldr	r3, [pc, #140]	@ (80038fc <MX_TIM1_Init+0xac>)
 8003870:	4a23      	ldr	r2, [pc, #140]	@ (8003900 <MX_TIM1_Init+0xb0>)
 8003872:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003874:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <MX_TIM1_Init+0xac>)
 8003876:	2200      	movs	r2, #0
 8003878:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387a:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <MX_TIM1_Init+0xac>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003880:	4b1e      	ldr	r3, [pc, #120]	@ (80038fc <MX_TIM1_Init+0xac>)
 8003882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003888:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <MX_TIM1_Init+0xac>)
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800388e:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <MX_TIM1_Init+0xac>)
 8003890:	2200      	movs	r2, #0
 8003892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003894:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <MX_TIM1_Init+0xac>)
 8003896:	2280      	movs	r2, #128	@ 0x80
 8003898:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800389a:	2303      	movs	r3, #3
 800389c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038a2:	2301      	movs	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80038aa:	230a      	movs	r3, #10
 80038ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038ae:	2300      	movs	r3, #0
 80038b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038b2:	2301      	movs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038b6:	2300      	movs	r3, #0
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80038ba:	230a      	movs	r3, #10
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	4619      	mov	r1, r3
 80038c4:	480d      	ldr	r0, [pc, #52]	@ (80038fc <MX_TIM1_Init+0xac>)
 80038c6:	f002 fa6b 	bl	8005da0 <HAL_TIM_Encoder_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80038d0:	f7fe f8db 	bl	8001a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80038d8:	2300      	movs	r3, #0
 80038da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038e0:	463b      	mov	r3, r7
 80038e2:	4619      	mov	r1, r3
 80038e4:	4805      	ldr	r0, [pc, #20]	@ (80038fc <MX_TIM1_Init+0xac>)
 80038e6:	f003 fa6f 	bl	8006dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80038f0:	f7fe f8cb 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80038f4:	bf00      	nop
 80038f6:	3730      	adds	r7, #48	@ 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000110 	.word	0x20000110
 8003900:	40012c00 	.word	0x40012c00

08003904 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08e      	sub	sp, #56	@ 0x38
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800390a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003918:	f107 031c 	add.w	r3, r7, #28
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003924:	463b      	mov	r3, r7
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	611a      	str	r2, [r3, #16]
 8003932:	615a      	str	r2, [r3, #20]
 8003934:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003936:	4b2d      	ldr	r3, [pc, #180]	@ (80039ec <MX_TIM2_Init+0xe8>)
 8003938:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800393c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800393e:	4b2b      	ldr	r3, [pc, #172]	@ (80039ec <MX_TIM2_Init+0xe8>)
 8003940:	2200      	movs	r2, #0
 8003942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003944:	4b29      	ldr	r3, [pc, #164]	@ (80039ec <MX_TIM2_Init+0xe8>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 800394a:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <MX_TIM2_Init+0xe8>)
 800394c:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8003950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003952:	4b26      	ldr	r3, [pc, #152]	@ (80039ec <MX_TIM2_Init+0xe8>)
 8003954:	2200      	movs	r2, #0
 8003956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003958:	4b24      	ldr	r3, [pc, #144]	@ (80039ec <MX_TIM2_Init+0xe8>)
 800395a:	2280      	movs	r2, #128	@ 0x80
 800395c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800395e:	4823      	ldr	r0, [pc, #140]	@ (80039ec <MX_TIM2_Init+0xe8>)
 8003960:	f001 ffda 	bl	8005918 <HAL_TIM_Base_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800396a:	f7fe f88e 	bl	8001a8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800396e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003974:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003978:	4619      	mov	r1, r3
 800397a:	481c      	ldr	r0, [pc, #112]	@ (80039ec <MX_TIM2_Init+0xe8>)
 800397c:	f002 fc78 	bl	8006270 <HAL_TIM_ConfigClockSource>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003986:	f7fe f880 	bl	8001a8a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800398a:	4818      	ldr	r0, [pc, #96]	@ (80039ec <MX_TIM2_Init+0xe8>)
 800398c:	f002 f894 	bl	8005ab8 <HAL_TIM_PWM_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003996:	f7fe f878 	bl	8001a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039a2:	f107 031c 	add.w	r3, r7, #28
 80039a6:	4619      	mov	r1, r3
 80039a8:	4810      	ldr	r0, [pc, #64]	@ (80039ec <MX_TIM2_Init+0xe8>)
 80039aa:	f003 fa0d 	bl	8006dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80039b4:	f7fe f869 	bl	8001a8a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039b8:	2360      	movs	r3, #96	@ 0x60
 80039ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039c8:	463b      	mov	r3, r7
 80039ca:	220c      	movs	r2, #12
 80039cc:	4619      	mov	r1, r3
 80039ce:	4807      	ldr	r0, [pc, #28]	@ (80039ec <MX_TIM2_Init+0xe8>)
 80039d0:	f002 fb3a 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80039da:	f7fe f856 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80039de:	4803      	ldr	r0, [pc, #12]	@ (80039ec <MX_TIM2_Init+0xe8>)
 80039e0:	f000 faa4 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 80039e4:	bf00      	nop
 80039e6:	3738      	adds	r7, #56	@ 0x38
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	2000015c 	.word	0x2000015c

080039f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	@ 0x38
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a04:	f107 031c 	add.w	r3, r7, #28
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a10:	463b      	mov	r3, r7
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]
 8003a18:	609a      	str	r2, [r3, #8]
 8003a1a:	60da      	str	r2, [r3, #12]
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	615a      	str	r2, [r3, #20]
 8003a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a22:	4b38      	ldr	r3, [pc, #224]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a24:	4a38      	ldr	r2, [pc, #224]	@ (8003b08 <MX_TIM3_Init+0x118>)
 8003a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8003a28:	4b36      	ldr	r3, [pc, #216]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2e:	4b35      	ldr	r3, [pc, #212]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8003a34:	4b33      	ldr	r3, [pc, #204]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a36:	f244 129f 	movw	r2, #16799	@ 0x419f
 8003a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a3c:	4b31      	ldr	r3, [pc, #196]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a42:	4b30      	ldr	r3, [pc, #192]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a44:	2280      	movs	r2, #128	@ 0x80
 8003a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a48:	482e      	ldr	r0, [pc, #184]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a4a:	f001 ff65 	bl	8005918 <HAL_TIM_Base_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003a54:	f7fe f819 	bl	8001a8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a62:	4619      	mov	r1, r3
 8003a64:	4827      	ldr	r0, [pc, #156]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a66:	f002 fc03 	bl	8006270 <HAL_TIM_ConfigClockSource>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003a70:	f7fe f80b 	bl	8001a8a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a74:	4823      	ldr	r0, [pc, #140]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a76:	f002 f81f 	bl	8005ab8 <HAL_TIM_PWM_Init>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003a80:	f7fe f803 	bl	8001a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	4619      	mov	r1, r3
 8003a92:	481c      	ldr	r0, [pc, #112]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003a94:	f003 f998 	bl	8006dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003a9e:	f7fd fff4 	bl	8001a8a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aa2:	2360      	movs	r3, #96	@ 0x60
 8003aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4812      	ldr	r0, [pc, #72]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003aba:	f002 fac5 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003ac4:	f7fd ffe1 	bl	8001a8a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ac8:	463b      	mov	r3, r7
 8003aca:	2204      	movs	r2, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	480d      	ldr	r0, [pc, #52]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003ad0:	f002 faba 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003ada:	f7fd ffd6 	bl	8001a8a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ade:	463b      	mov	r3, r7
 8003ae0:	220c      	movs	r2, #12
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4807      	ldr	r0, [pc, #28]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003ae6:	f002 faaf 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003af0:	f7fd ffcb 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003af4:	4803      	ldr	r0, [pc, #12]	@ (8003b04 <MX_TIM3_Init+0x114>)
 8003af6:	f000 fa19 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 8003afa:	bf00      	nop
 8003afc:	3738      	adds	r7, #56	@ 0x38
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200001a8 	.word	0x200001a8
 8003b08:	40000400 	.word	0x40000400

08003b0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08c      	sub	sp, #48	@ 0x30
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b12:	f107 030c 	add.w	r3, r7, #12
 8003b16:	2224      	movs	r2, #36	@ 0x24
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 fbc4 	bl	80082a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b20:	463b      	mov	r3, r7
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b2a:	4b21      	ldr	r3, [pc, #132]	@ (8003bb0 <MX_TIM4_Init+0xa4>)
 8003b2c:	4a21      	ldr	r2, [pc, #132]	@ (8003bb4 <MX_TIM4_Init+0xa8>)
 8003b2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003b30:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb0 <MX_TIM4_Init+0xa4>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b36:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb0 <MX_TIM4_Init+0xa4>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb0 <MX_TIM4_Init+0xa4>)
 8003b3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b44:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <MX_TIM4_Init+0xa4>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b4a:	4b19      	ldr	r3, [pc, #100]	@ (8003bb0 <MX_TIM4_Init+0xa4>)
 8003b4c:	2280      	movs	r2, #128	@ 0x80
 8003b4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b50:	2303      	movs	r3, #3
 8003b52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003b60:	230a      	movs	r3, #10
 8003b62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003b70:	230a      	movs	r3, #10
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	4619      	mov	r1, r3
 8003b7a:	480d      	ldr	r0, [pc, #52]	@ (8003bb0 <MX_TIM4_Init+0xa4>)
 8003b7c:	f002 f910 	bl	8005da0 <HAL_TIM_Encoder_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003b86:	f7fd ff80 	bl	8001a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b92:	463b      	mov	r3, r7
 8003b94:	4619      	mov	r1, r3
 8003b96:	4806      	ldr	r0, [pc, #24]	@ (8003bb0 <MX_TIM4_Init+0xa4>)
 8003b98:	f003 f916 	bl	8006dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003ba2:	f7fd ff72 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ba6:	bf00      	nop
 8003ba8:	3730      	adds	r7, #48	@ 0x30
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200001f4 	.word	0x200001f4
 8003bb4:	40000800 	.word	0x40000800

08003bb8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	@ 0x30
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	2224      	movs	r2, #36	@ 0x24
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f004 fb6e 	bl	80082a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bcc:	463b      	mov	r3, r7
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003bd6:	4b21      	ldr	r3, [pc, #132]	@ (8003c5c <MX_TIM5_Init+0xa4>)
 8003bd8:	4a21      	ldr	r2, [pc, #132]	@ (8003c60 <MX_TIM5_Init+0xa8>)
 8003bda:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c5c <MX_TIM5_Init+0xa4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c5c <MX_TIM5_Init+0xa4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003be8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c5c <MX_TIM5_Init+0xa4>)
 8003bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <MX_TIM5_Init+0xa4>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bf6:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <MX_TIM5_Init+0xa4>)
 8003bf8:	2280      	movs	r2, #128	@ 0x80
 8003bfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c04:	2301      	movs	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003c0c:	230a      	movs	r3, #10
 8003c0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c10:	2300      	movs	r3, #0
 8003c12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c14:	2301      	movs	r3, #1
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003c1c:	230a      	movs	r3, #10
 8003c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003c20:	f107 030c 	add.w	r3, r7, #12
 8003c24:	4619      	mov	r1, r3
 8003c26:	480d      	ldr	r0, [pc, #52]	@ (8003c5c <MX_TIM5_Init+0xa4>)
 8003c28:	f002 f8ba 	bl	8005da0 <HAL_TIM_Encoder_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003c32:	f7fd ff2a 	bl	8001a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c3e:	463b      	mov	r3, r7
 8003c40:	4619      	mov	r1, r3
 8003c42:	4806      	ldr	r0, [pc, #24]	@ (8003c5c <MX_TIM5_Init+0xa4>)
 8003c44:	f003 f8c0 	bl	8006dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003c4e:	f7fd ff1c 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003c52:	bf00      	nop
 8003c54:	3730      	adds	r7, #48	@ 0x30
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000240 	.word	0x20000240
 8003c60:	40000c00 	.word	0x40000c00

08003c64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08c      	sub	sp, #48	@ 0x30
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	2224      	movs	r2, #36	@ 0x24
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f004 fb18 	bl	80082a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c78:	463b      	mov	r3, r7
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003c82:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003c84:	4a23      	ldr	r2, [pc, #140]	@ (8003d14 <MX_TIM8_Init+0xb0>)
 8003c86:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003c88:	4b21      	ldr	r3, [pc, #132]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8e:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003c94:	4b1e      	ldr	r3, [pc, #120]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003c96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ca8:	4b19      	ldr	r3, [pc, #100]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003caa:	2280      	movs	r2, #128	@ 0x80
 8003cac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003cbe:	230a      	movs	r3, #10
 8003cc0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003cce:	230a      	movs	r3, #10
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	480d      	ldr	r0, [pc, #52]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003cda:	f002 f861 	bl	8005da0 <HAL_TIM_Encoder_Init>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003ce4:	f7fd fed1 	bl	8001a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003cec:	2300      	movs	r3, #0
 8003cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4805      	ldr	r0, [pc, #20]	@ (8003d10 <MX_TIM8_Init+0xac>)
 8003cfa:	f003 f865 	bl	8006dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003d04:	f7fd fec1 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003d08:	bf00      	nop
 8003d0a:	3730      	adds	r7, #48	@ 0x30
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	2000028c 	.word	0x2000028c
 8003d14:	40013400 	.word	0x40013400

08003d18 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b090      	sub	sp, #64	@ 0x40
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a5d      	ldr	r2, [pc, #372]	@ (8003eac <HAL_TIM_Encoder_MspInit+0x194>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d128      	bne.n	8003d8c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003d40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d46:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d52:	4b57      	ldr	r3, [pc, #348]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	4a56      	ldr	r2, [pc, #344]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003d58:	f043 0304 	orr.w	r3, r3, #4
 8003d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d5e:	4b54      	ldr	r3, [pc, #336]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d76:	2300      	movs	r3, #0
 8003d78:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d82:	4619      	mov	r1, r3
 8003d84:	484b      	ldr	r0, [pc, #300]	@ (8003eb4 <HAL_TIM_Encoder_MspInit+0x19c>)
 8003d86:	f000 fbfd 	bl	8004584 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003d8a:	e08a      	b.n	8003ea2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a49      	ldr	r2, [pc, #292]	@ (8003eb8 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d129      	bne.n	8003dea <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d96:	4b46      	ldr	r3, [pc, #280]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	4a45      	ldr	r2, [pc, #276]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da2:	4b43      	ldr	r3, [pc, #268]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dae:	4b40      	ldr	r3, [pc, #256]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db2:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003db4:	f043 0308 	orr.w	r3, r3, #8
 8003db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dba:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003dc6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003de0:	4619      	mov	r1, r3
 8003de2:	4836      	ldr	r0, [pc, #216]	@ (8003ebc <HAL_TIM_Encoder_MspInit+0x1a4>)
 8003de4:	f000 fbce 	bl	8004584 <HAL_GPIO_Init>
}
 8003de8:	e05b      	b.n	8003ea2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a34      	ldr	r2, [pc, #208]	@ (8003ec0 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d129      	bne.n	8003e48 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003df4:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df8:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003dfa:	f043 0308 	orr.w	r3, r3, #8
 8003dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e00:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0c:	4b28      	ldr	r3, [pc, #160]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e10:	4a27      	ldr	r2, [pc, #156]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e18:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e24:	2303      	movs	r3, #3
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e30:	2300      	movs	r3, #0
 8003e32:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003e34:	2302      	movs	r3, #2
 8003e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e42:	f000 fb9f 	bl	8004584 <HAL_GPIO_Init>
}
 8003e46:	e02c      	b.n	8003ea2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d127      	bne.n	8003ea2 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e52:	4b17      	ldr	r3, [pc, #92]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	4a16      	ldr	r2, [pc, #88]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e5e:	4b14      	ldr	r3, [pc, #80]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6a:	4b11      	ldr	r3, [pc, #68]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e76:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e82:	23c0      	movs	r3, #192	@ 0xc0
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	2302      	movs	r3, #2
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003e92:	2304      	movs	r3, #4
 8003e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4805      	ldr	r0, [pc, #20]	@ (8003eb4 <HAL_TIM_Encoder_MspInit+0x19c>)
 8003e9e:	f000 fb71 	bl	8004584 <HAL_GPIO_Init>
}
 8003ea2:	bf00      	nop
 8003ea4:	3740      	adds	r7, #64	@ 0x40
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	48000800 	.word	0x48000800
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	48000c00 	.word	0x48000c00
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40013400 	.word	0x40013400

08003ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eda:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_TIM_Base_MspInit+0x5c>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ede:	4a11      	ldr	r2, [pc, #68]	@ (8003f24 <HAL_TIM_Base_MspInit+0x5c>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f24 <HAL_TIM_Base_MspInit+0x5c>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003ef2:	e010      	b.n	8003f16 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8003f28 <HAL_TIM_Base_MspInit+0x60>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10b      	bne.n	8003f16 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003efe:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <HAL_TIM_Base_MspInit+0x5c>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	4a08      	ldr	r2, [pc, #32]	@ (8003f24 <HAL_TIM_Base_MspInit+0x5c>)
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <HAL_TIM_Base_MspInit+0x5c>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40000400 	.word	0x40000400

08003f2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	@ 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4c:	d11c      	bne.n	8003f88 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f4e:	4b21      	ldr	r3, [pc, #132]	@ (8003fd4 <HAL_TIM_MspPostInit+0xa8>)
 8003f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f52:	4a20      	ldr	r2, [pc, #128]	@ (8003fd4 <HAL_TIM_MspPostInit+0xa8>)
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <HAL_TIM_MspPostInit+0xa8>)
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f66:	2340      	movs	r3, #64	@ 0x40
 8003f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003f76:	2302      	movs	r3, #2
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4815      	ldr	r0, [pc, #84]	@ (8003fd8 <HAL_TIM_MspPostInit+0xac>)
 8003f82:	f000 faff 	bl	8004584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f86:	e020      	b.n	8003fca <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a13      	ldr	r2, [pc, #76]	@ (8003fdc <HAL_TIM_MspPostInit+0xb0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d11b      	bne.n	8003fca <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f92:	4b10      	ldr	r3, [pc, #64]	@ (8003fd4 <HAL_TIM_MspPostInit+0xa8>)
 8003f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f96:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd4 <HAL_TIM_MspPostInit+0xa8>)
 8003f98:	f043 0310 	orr.w	r3, r3, #16
 8003f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <HAL_TIM_MspPostInit+0xa8>)
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003faa:	232c      	movs	r3, #44	@ 0x2c
 8003fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4806      	ldr	r0, [pc, #24]	@ (8003fe0 <HAL_TIM_MspPostInit+0xb4>)
 8003fc6:	f000 fadd 	bl	8004584 <HAL_GPIO_Init>
}
 8003fca:	bf00      	nop
 8003fcc:	3728      	adds	r7, #40	@ 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	48000c00 	.word	0x48000c00
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	48001000 	.word	0x48001000

08003fe4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003fe8:	4b22      	ldr	r3, [pc, #136]	@ (8004074 <MX_UART4_Init+0x90>)
 8003fea:	4a23      	ldr	r2, [pc, #140]	@ (8004078 <MX_UART4_Init+0x94>)
 8003fec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003fee:	4b21      	ldr	r3, [pc, #132]	@ (8004074 <MX_UART4_Init+0x90>)
 8003ff0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003ff4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8004074 <MX_UART4_Init+0x90>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <MX_UART4_Init+0x90>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004002:	4b1c      	ldr	r3, [pc, #112]	@ (8004074 <MX_UART4_Init+0x90>)
 8004004:	2200      	movs	r2, #0
 8004006:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004008:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <MX_UART4_Init+0x90>)
 800400a:	220c      	movs	r2, #12
 800400c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800400e:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <MX_UART4_Init+0x90>)
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004014:	4b17      	ldr	r3, [pc, #92]	@ (8004074 <MX_UART4_Init+0x90>)
 8004016:	2200      	movs	r2, #0
 8004018:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800401a:	4b16      	ldr	r3, [pc, #88]	@ (8004074 <MX_UART4_Init+0x90>)
 800401c:	2200      	movs	r2, #0
 800401e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004020:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <MX_UART4_Init+0x90>)
 8004022:	2200      	movs	r2, #0
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004026:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <MX_UART4_Init+0x90>)
 8004028:	2200      	movs	r2, #0
 800402a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800402c:	4811      	ldr	r0, [pc, #68]	@ (8004074 <MX_UART4_Init+0x90>)
 800402e:	f002 ff61 	bl	8006ef4 <HAL_UART_Init>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8004038:	f7fd fd27 	bl	8001a8a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800403c:	2100      	movs	r1, #0
 800403e:	480d      	ldr	r0, [pc, #52]	@ (8004074 <MX_UART4_Init+0x90>)
 8004040:	f003 fe52 	bl	8007ce8 <HAL_UARTEx_SetTxFifoThreshold>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800404a:	f7fd fd1e 	bl	8001a8a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800404e:	2100      	movs	r1, #0
 8004050:	4808      	ldr	r0, [pc, #32]	@ (8004074 <MX_UART4_Init+0x90>)
 8004052:	f003 fe87 	bl	8007d64 <HAL_UARTEx_SetRxFifoThreshold>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800405c:	f7fd fd15 	bl	8001a8a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004060:	4804      	ldr	r0, [pc, #16]	@ (8004074 <MX_UART4_Init+0x90>)
 8004062:	f003 fe08 	bl	8007c76 <HAL_UARTEx_DisableFifoMode>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800406c:	f7fd fd0d 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004070:	bf00      	nop
 8004072:	bd80      	pop	{r7, pc}
 8004074:	200002d8 	.word	0x200002d8
 8004078:	40004c00 	.word	0x40004c00

0800407c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004080:	4b22      	ldr	r3, [pc, #136]	@ (800410c <MX_USART1_UART_Init+0x90>)
 8004082:	4a23      	ldr	r2, [pc, #140]	@ (8004110 <MX_USART1_UART_Init+0x94>)
 8004084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004086:	4b21      	ldr	r3, [pc, #132]	@ (800410c <MX_USART1_UART_Init+0x90>)
 8004088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800408c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800408e:	4b1f      	ldr	r3, [pc, #124]	@ (800410c <MX_USART1_UART_Init+0x90>)
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004094:	4b1d      	ldr	r3, [pc, #116]	@ (800410c <MX_USART1_UART_Init+0x90>)
 8004096:	2200      	movs	r2, #0
 8004098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800409a:	4b1c      	ldr	r3, [pc, #112]	@ (800410c <MX_USART1_UART_Init+0x90>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040a0:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040a2:	220c      	movs	r2, #12
 80040a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040a6:	4b19      	ldr	r3, [pc, #100]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040ac:	4b17      	ldr	r3, [pc, #92]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040b2:	4b16      	ldr	r3, [pc, #88]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040b8:	4b14      	ldr	r3, [pc, #80]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040be:	4b13      	ldr	r3, [pc, #76]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040c4:	4811      	ldr	r0, [pc, #68]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040c6:	f002 ff15 	bl	8006ef4 <HAL_UART_Init>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80040d0:	f7fd fcdb 	bl	8001a8a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040d4:	2100      	movs	r1, #0
 80040d6:	480d      	ldr	r0, [pc, #52]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040d8:	f003 fe06 	bl	8007ce8 <HAL_UARTEx_SetTxFifoThreshold>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80040e2:	f7fd fcd2 	bl	8001a8a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040e6:	2100      	movs	r1, #0
 80040e8:	4808      	ldr	r0, [pc, #32]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040ea:	f003 fe3b 	bl	8007d64 <HAL_UARTEx_SetRxFifoThreshold>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80040f4:	f7fd fcc9 	bl	8001a8a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80040f8:	4804      	ldr	r0, [pc, #16]	@ (800410c <MX_USART1_UART_Init+0x90>)
 80040fa:	f003 fdbc 	bl	8007c76 <HAL_UARTEx_DisableFifoMode>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004104:	f7fd fcc1 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004108:	bf00      	nop
 800410a:	bd80      	pop	{r7, pc}
 800410c:	2000036c 	.word	0x2000036c
 8004110:	40013800 	.word	0x40013800

08004114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0a0      	sub	sp, #128	@ 0x80
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800412c:	f107 0318 	add.w	r3, r7, #24
 8004130:	2254      	movs	r2, #84	@ 0x54
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f004 f8b7 	bl	80082a8 <memset>
  if(uartHandle->Instance==UART4)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3d      	ldr	r2, [pc, #244]	@ (8004234 <HAL_UART_MspInit+0x120>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d137      	bne.n	80041b4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004144:	2308      	movs	r3, #8
 8004146:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004148:	2300      	movs	r3, #0
 800414a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800414c:	f107 0318 	add.w	r3, r7, #24
 8004150:	4618      	mov	r0, r3
 8004152:	f001 f993 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800415c:	f7fd fc95 	bl	8001a8a <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004160:	4b35      	ldr	r3, [pc, #212]	@ (8004238 <HAL_UART_MspInit+0x124>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004164:	4a34      	ldr	r2, [pc, #208]	@ (8004238 <HAL_UART_MspInit+0x124>)
 8004166:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800416a:	6593      	str	r3, [r2, #88]	@ 0x58
 800416c:	4b32      	ldr	r3, [pc, #200]	@ (8004238 <HAL_UART_MspInit+0x124>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004170:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004178:	4b2f      	ldr	r3, [pc, #188]	@ (8004238 <HAL_UART_MspInit+0x124>)
 800417a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417c:	4a2e      	ldr	r2, [pc, #184]	@ (8004238 <HAL_UART_MspInit+0x124>)
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004184:	4b2c      	ldr	r3, [pc, #176]	@ (8004238 <HAL_UART_MspInit+0x124>)
 8004186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004190:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004194:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004196:	2302      	movs	r3, #2
 8004198:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419a:	2300      	movs	r3, #0
 800419c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419e:	2300      	movs	r3, #0
 80041a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80041a2:	2305      	movs	r3, #5
 80041a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80041aa:	4619      	mov	r1, r3
 80041ac:	4823      	ldr	r0, [pc, #140]	@ (800423c <HAL_UART_MspInit+0x128>)
 80041ae:	f000 f9e9 	bl	8004584 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80041b2:	e03a      	b.n	800422a <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a21      	ldr	r2, [pc, #132]	@ (8004240 <HAL_UART_MspInit+0x12c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d135      	bne.n	800422a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041be:	2301      	movs	r3, #1
 80041c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041c6:	f107 0318 	add.w	r3, r7, #24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 f956 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80041d6:	f7fd fc58 	bl	8001a8a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80041da:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <HAL_UART_MspInit+0x124>)
 80041dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041de:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <HAL_UART_MspInit+0x124>)
 80041e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_UART_MspInit+0x124>)
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f2:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <HAL_UART_MspInit+0x124>)
 80041f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f6:	4a10      	ldr	r2, [pc, #64]	@ (8004238 <HAL_UART_MspInit+0x124>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004238 <HAL_UART_MspInit+0x124>)
 8004200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800420a:	2330      	movs	r3, #48	@ 0x30
 800420c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420e:	2302      	movs	r3, #2
 8004210:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004216:	2300      	movs	r3, #0
 8004218:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800421a:	2307      	movs	r3, #7
 800421c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800421e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004222:	4619      	mov	r1, r3
 8004224:	4805      	ldr	r0, [pc, #20]	@ (800423c <HAL_UART_MspInit+0x128>)
 8004226:	f000 f9ad 	bl	8004584 <HAL_GPIO_Init>
}
 800422a:	bf00      	nop
 800422c:	3780      	adds	r7, #128	@ 0x80
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40004c00 	.word	0x40004c00
 8004238:	40021000 	.word	0x40021000
 800423c:	48000800 	.word	0x48000800
 8004240:	40013800 	.word	0x40013800

08004244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004244:	480d      	ldr	r0, [pc, #52]	@ (800427c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004246:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004248:	f7ff faf0 	bl	800382c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800424c:	480c      	ldr	r0, [pc, #48]	@ (8004280 <LoopForever+0x6>)
  ldr r1, =_edata
 800424e:	490d      	ldr	r1, [pc, #52]	@ (8004284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004250:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <LoopForever+0xe>)
  movs r3, #0
 8004252:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004254:	e002      	b.n	800425c <LoopCopyDataInit>

08004256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800425a:	3304      	adds	r3, #4

0800425c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800425c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800425e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004260:	d3f9      	bcc.n	8004256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004262:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004264:	4c0a      	ldr	r4, [pc, #40]	@ (8004290 <LoopForever+0x16>)
  movs r3, #0
 8004266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004268:	e001      	b.n	800426e <LoopFillZerobss>

0800426a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800426a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800426c:	3204      	adds	r2, #4

0800426e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800426e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004270:	d3fb      	bcc.n	800426a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004272:	f004 f86d 	bl	8008350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004276:	f7fd f93b 	bl	80014f0 <main>

0800427a <LoopForever>:

LoopForever:
    b LoopForever
 800427a:	e7fe      	b.n	800427a <LoopForever>
  ldr   r0, =_estack
 800427c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004284:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004288:	08009b08 	.word	0x08009b08
  ldr r2, =_sbss
 800428c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004290:	20000550 	.word	0x20000550

08004294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004294:	e7fe      	b.n	8004294 <ADC1_2_IRQHandler>

08004296 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a0:	2003      	movs	r0, #3
 80042a2:	f000 f93d 	bl	8004520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042a6:	200f      	movs	r0, #15
 80042a8:	f000 f80e 	bl	80042c8 <HAL_InitTick>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	71fb      	strb	r3, [r7, #7]
 80042b6:	e001      	b.n	80042bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042b8:	f7ff f9c2 	bl	8003640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042bc:	79fb      	ldrb	r3, [r7, #7]

}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80042d4:	4b16      	ldr	r3, [pc, #88]	@ (8004330 <HAL_InitTick+0x68>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d022      	beq.n	8004322 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80042dc:	4b15      	ldr	r3, [pc, #84]	@ (8004334 <HAL_InitTick+0x6c>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b13      	ldr	r3, [pc, #76]	@ (8004330 <HAL_InitTick+0x68>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80042e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f93a 	bl	800456a <HAL_SYSTICK_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10f      	bne.n	800431c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b0f      	cmp	r3, #15
 8004300:	d809      	bhi.n	8004316 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004302:	2200      	movs	r2, #0
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800430a:	f000 f914 	bl	8004536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800430e:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <HAL_InitTick+0x70>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e007      	b.n	8004326 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	e004      	b.n	8004326 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e001      	b.n	8004326 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	2000002c 	.word	0x2000002c
 8004334:	20000024 	.word	0x20000024
 8004338:	20000028 	.word	0x20000028

0800433c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_IncTick+0x1c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_IncTick+0x20>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4413      	add	r3, r2
 800434a:	4a03      	ldr	r2, [pc, #12]	@ (8004358 <HAL_IncTick+0x1c>)
 800434c:	6013      	str	r3, [r2, #0]
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	20000400 	.word	0x20000400
 800435c:	2000002c 	.word	0x2000002c

08004360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return uwTick;
 8004364:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <HAL_GetTick+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000400 	.word	0x20000400

08004378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004380:	f7ff ffee 	bl	8004360 <HAL_GetTick>
 8004384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004390:	d004      	beq.n	800439c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004392:	4b09      	ldr	r3, [pc, #36]	@ (80043b8 <HAL_Delay+0x40>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800439c:	bf00      	nop
 800439e:	f7ff ffdf 	bl	8004360 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d8f7      	bhi.n	800439e <HAL_Delay+0x26>
  {
  }
}
 80043ae:	bf00      	nop
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	2000002c 	.word	0x2000002c

080043bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <__NVIC_SetPriorityGrouping+0x44>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043d8:	4013      	ands	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ee:	4a04      	ldr	r2, [pc, #16]	@ (8004400 <__NVIC_SetPriorityGrouping+0x44>)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	60d3      	str	r3, [r2, #12]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <__NVIC_GetPriorityGrouping+0x18>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	f003 0307 	and.w	r3, r3, #7
}
 8004412:	4618      	mov	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004430:	2b00      	cmp	r3, #0
 8004432:	db0a      	blt.n	800444a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	490c      	ldr	r1, [pc, #48]	@ (800446c <__NVIC_SetPriority+0x4c>)
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	0112      	lsls	r2, r2, #4
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	440b      	add	r3, r1
 8004444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004448:	e00a      	b.n	8004460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4908      	ldr	r1, [pc, #32]	@ (8004470 <__NVIC_SetPriority+0x50>)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	3b04      	subs	r3, #4
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	440b      	add	r3, r1
 800445e:	761a      	strb	r2, [r3, #24]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	e000e100 	.word	0xe000e100
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	@ 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f1c3 0307 	rsb	r3, r3, #7
 800448e:	2b04      	cmp	r3, #4
 8004490:	bf28      	it	cs
 8004492:	2304      	movcs	r3, #4
 8004494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3304      	adds	r3, #4
 800449a:	2b06      	cmp	r3, #6
 800449c:	d902      	bls.n	80044a4 <NVIC_EncodePriority+0x30>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3b03      	subs	r3, #3
 80044a2:	e000      	b.n	80044a6 <NVIC_EncodePriority+0x32>
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43da      	mvns	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	401a      	ands	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	43d9      	mvns	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044cc:	4313      	orrs	r3, r2
         );
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	@ 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ec:	d301      	bcc.n	80044f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ee:	2301      	movs	r3, #1
 80044f0:	e00f      	b.n	8004512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044f2:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <SysTick_Config+0x40>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044fa:	210f      	movs	r1, #15
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004500:	f7ff ff8e 	bl	8004420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004504:	4b05      	ldr	r3, [pc, #20]	@ (800451c <SysTick_Config+0x40>)
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800450a:	4b04      	ldr	r3, [pc, #16]	@ (800451c <SysTick_Config+0x40>)
 800450c:	2207      	movs	r2, #7
 800450e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	e000e010 	.word	0xe000e010

08004520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ff47 	bl	80043bc <__NVIC_SetPriorityGrouping>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	4603      	mov	r3, r0
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004544:	f7ff ff5e 	bl	8004404 <__NVIC_GetPriorityGrouping>
 8004548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f7ff ff90 	bl	8004474 <NVIC_EncodePriority>
 8004554:	4602      	mov	r2, r0
 8004556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff5f 	bl	8004420 <__NVIC_SetPriority>
}
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ffb2 	bl	80044dc <SysTick_Config>
 8004578:	4603      	mov	r3, r0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004592:	e15a      	b.n	800484a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2101      	movs	r1, #1
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 814c 	beq.w	8004844 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d005      	beq.n	80045c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d130      	bne.n	8004626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	2203      	movs	r2, #3
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045fa:	2201      	movs	r2, #1
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 0201 	and.w	r2, r3, #1
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b03      	cmp	r3, #3
 8004630:	d017      	beq.n	8004662 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d123      	bne.n	80046b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	08da      	lsrs	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3208      	adds	r2, #8
 8004676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	220f      	movs	r2, #15
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	08da      	lsrs	r2, r3, #3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3208      	adds	r2, #8
 80046b0:	6939      	ldr	r1, [r7, #16]
 80046b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	2203      	movs	r2, #3
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 0203 	and.w	r2, r3, #3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80a6 	beq.w	8004844 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004868 <HAL_GPIO_Init+0x2e4>)
 80046fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004868 <HAL_GPIO_Init+0x2e4>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6613      	str	r3, [r2, #96]	@ 0x60
 8004704:	4b58      	ldr	r3, [pc, #352]	@ (8004868 <HAL_GPIO_Init+0x2e4>)
 8004706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004710:	4a56      	ldr	r2, [pc, #344]	@ (800486c <HAL_GPIO_Init+0x2e8>)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	089b      	lsrs	r3, r3, #2
 8004716:	3302      	adds	r3, #2
 8004718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	220f      	movs	r2, #15
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800473a:	d01f      	beq.n	800477c <HAL_GPIO_Init+0x1f8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a4c      	ldr	r2, [pc, #304]	@ (8004870 <HAL_GPIO_Init+0x2ec>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d019      	beq.n	8004778 <HAL_GPIO_Init+0x1f4>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a4b      	ldr	r2, [pc, #300]	@ (8004874 <HAL_GPIO_Init+0x2f0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d013      	beq.n	8004774 <HAL_GPIO_Init+0x1f0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a4a      	ldr	r2, [pc, #296]	@ (8004878 <HAL_GPIO_Init+0x2f4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00d      	beq.n	8004770 <HAL_GPIO_Init+0x1ec>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a49      	ldr	r2, [pc, #292]	@ (800487c <HAL_GPIO_Init+0x2f8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <HAL_GPIO_Init+0x1e8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a48      	ldr	r2, [pc, #288]	@ (8004880 <HAL_GPIO_Init+0x2fc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d101      	bne.n	8004768 <HAL_GPIO_Init+0x1e4>
 8004764:	2305      	movs	r3, #5
 8004766:	e00a      	b.n	800477e <HAL_GPIO_Init+0x1fa>
 8004768:	2306      	movs	r3, #6
 800476a:	e008      	b.n	800477e <HAL_GPIO_Init+0x1fa>
 800476c:	2304      	movs	r3, #4
 800476e:	e006      	b.n	800477e <HAL_GPIO_Init+0x1fa>
 8004770:	2303      	movs	r3, #3
 8004772:	e004      	b.n	800477e <HAL_GPIO_Init+0x1fa>
 8004774:	2302      	movs	r3, #2
 8004776:	e002      	b.n	800477e <HAL_GPIO_Init+0x1fa>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_GPIO_Init+0x1fa>
 800477c:	2300      	movs	r3, #0
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	f002 0203 	and.w	r2, r2, #3
 8004784:	0092      	lsls	r2, r2, #2
 8004786:	4093      	lsls	r3, r2
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800478e:	4937      	ldr	r1, [pc, #220]	@ (800486c <HAL_GPIO_Init+0x2e8>)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	3302      	adds	r3, #2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800479c:	4b39      	ldr	r3, [pc, #228]	@ (8004884 <HAL_GPIO_Init+0x300>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047c0:	4a30      	ldr	r2, [pc, #192]	@ (8004884 <HAL_GPIO_Init+0x300>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004884 <HAL_GPIO_Init+0x300>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047ea:	4a26      	ldr	r2, [pc, #152]	@ (8004884 <HAL_GPIO_Init+0x300>)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047f0:	4b24      	ldr	r3, [pc, #144]	@ (8004884 <HAL_GPIO_Init+0x300>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004814:	4a1b      	ldr	r2, [pc, #108]	@ (8004884 <HAL_GPIO_Init+0x300>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800481a:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <HAL_GPIO_Init+0x300>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	43db      	mvns	r3, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800483e:	4a11      	ldr	r2, [pc, #68]	@ (8004884 <HAL_GPIO_Init+0x300>)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3301      	adds	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f ae9d 	bne.w	8004594 <HAL_GPIO_Init+0x10>
  }
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	40021000 	.word	0x40021000
 800486c:	40010000 	.word	0x40010000
 8004870:	48000400 	.word	0x48000400
 8004874:	48000800 	.word	0x48000800
 8004878:	48000c00 	.word	0x48000c00
 800487c:	48001000 	.word	0x48001000
 8004880:	48001400 	.word	0x48001400
 8004884:	40010400 	.word	0x40010400

08004888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]
 8004894:	4613      	mov	r3, r2
 8004896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004898:	787b      	ldrb	r3, [r7, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048a4:	e002      	b.n	80048ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d141      	bne.n	800494a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048c6:	4b4b      	ldr	r3, [pc, #300]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d2:	d131      	bne.n	8004938 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d4:	4b47      	ldr	r3, [pc, #284]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048da:	4a46      	ldr	r2, [pc, #280]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e4:	4b43      	ldr	r3, [pc, #268]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048ec:	4a41      	ldr	r2, [pc, #260]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048f4:	4b40      	ldr	r3, [pc, #256]	@ (80049f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2232      	movs	r2, #50	@ 0x32
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	4a3f      	ldr	r2, [pc, #252]	@ (80049fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	0c9b      	lsrs	r3, r3, #18
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800490a:	e002      	b.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b01      	subs	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004912:	4b38      	ldr	r3, [pc, #224]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800491e:	d102      	bne.n	8004926 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f2      	bne.n	800490c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004926:	4b33      	ldr	r3, [pc, #204]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004932:	d158      	bne.n	80049e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e057      	b.n	80049e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004938:	4b2e      	ldr	r3, [pc, #184]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800493e:	4a2d      	ldr	r2, [pc, #180]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004944:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004948:	e04d      	b.n	80049e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004950:	d141      	bne.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004952:	4b28      	ldr	r3, [pc, #160]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495e:	d131      	bne.n	80049c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004960:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004966:	4a23      	ldr	r2, [pc, #140]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004970:	4b20      	ldr	r3, [pc, #128]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004978:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800497e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004980:	4b1d      	ldr	r3, [pc, #116]	@ (80049f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2232      	movs	r2, #50	@ 0x32
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	4a1c      	ldr	r2, [pc, #112]	@ (80049fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	0c9b      	lsrs	r3, r3, #18
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004996:	e002      	b.n	800499e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b01      	subs	r3, #1
 800499c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800499e:	4b15      	ldr	r3, [pc, #84]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049aa:	d102      	bne.n	80049b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f2      	bne.n	8004998 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049be:	d112      	bne.n	80049e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e011      	b.n	80049e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049c4:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ca:	4a0a      	ldr	r2, [pc, #40]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049d4:	e007      	b.n	80049e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049d6:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049de:	4a05      	ldr	r2, [pc, #20]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40007000 	.word	0x40007000
 80049f8:	20000024 	.word	0x20000024
 80049fc:	431bde83 	.word	0x431bde83

08004a00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a0e:	6093      	str	r3, [r2, #8]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40007000 	.word	0x40007000

08004a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e2fe      	b.n	8005030 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d075      	beq.n	8004b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3e:	4b97      	ldr	r3, [pc, #604]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a48:	4b94      	ldr	r3, [pc, #592]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	d102      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3e>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d002      	beq.n	8004a64 <HAL_RCC_OscConfig+0x44>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	4b8d      	ldr	r3, [pc, #564]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05b      	beq.n	8004b28 <HAL_RCC_OscConfig+0x108>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d157      	bne.n	8004b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e2d9      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a84:	d106      	bne.n	8004a94 <HAL_RCC_OscConfig+0x74>
 8004a86:	4b85      	ldr	r3, [pc, #532]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a84      	ldr	r2, [pc, #528]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e01d      	b.n	8004ad0 <HAL_RCC_OscConfig+0xb0>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x98>
 8004a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7b      	ldr	r2, [pc, #492]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e00b      	b.n	8004ad0 <HAL_RCC_OscConfig+0xb0>
 8004ab8:	4b78      	ldr	r3, [pc, #480]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a77      	ldr	r2, [pc, #476]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b75      	ldr	r3, [pc, #468]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a74      	ldr	r2, [pc, #464]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7ff fc42 	bl	8004360 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7ff fc3e 	bl	8004360 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e29e      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004af2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xc0>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7ff fc2e 	bl	8004360 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7ff fc2a 	bl	8004360 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e28a      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b1a:	4b60      	ldr	r3, [pc, #384]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0xe8>
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d075      	beq.n	8004c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b36:	4b59      	ldr	r3, [pc, #356]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b40:	4b56      	ldr	r3, [pc, #344]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d102      	bne.n	8004b56 <HAL_RCC_OscConfig+0x136>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d002      	beq.n	8004b5c <HAL_RCC_OscConfig+0x13c>
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d11f      	bne.n	8004b9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_OscConfig+0x154>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e25d      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b74:	4b49      	ldr	r3, [pc, #292]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	061b      	lsls	r3, r3, #24
 8004b82:	4946      	ldr	r1, [pc, #280]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b88:	4b45      	ldr	r3, [pc, #276]	@ (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fb9b 	bl	80042c8 <HAL_InitTick>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d043      	beq.n	8004c20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e249      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d023      	beq.n	8004bec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7ff fbd6 	bl	8004360 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb8:	f7ff fbd2 	bl	8004360 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e232      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bca:	4b34      	ldr	r3, [pc, #208]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd6:	4b31      	ldr	r3, [pc, #196]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	492d      	ldr	r1, [pc, #180]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]
 8004bea:	e01a      	b.n	8004c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bec:	4b2b      	ldr	r3, [pc, #172]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7ff fbb2 	bl	8004360 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c00:	f7ff fbae 	bl	8004360 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e20e      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c12:	4b22      	ldr	r3, [pc, #136]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x1e0>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d041      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b19      	ldr	r3, [pc, #100]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3c:	4a17      	ldr	r2, [pc, #92]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c46:	f7ff fb8b 	bl	8004360 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4e:	f7ff fb87 	bl	8004360 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e1e7      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c60:	4b0e      	ldr	r3, [pc, #56]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0ef      	beq.n	8004c4e <HAL_RCC_OscConfig+0x22e>
 8004c6e:	e020      	b.n	8004cb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b0a      	ldr	r3, [pc, #40]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c76:	4a09      	ldr	r2, [pc, #36]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c80:	f7ff fb6e 	bl	8004360 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c86:	e00d      	b.n	8004ca4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c88:	f7ff fb6a 	bl	8004360 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d906      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1ca      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1ea      	bne.n	8004c88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80a6 	beq.w	8004e0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cc4:	4b84      	ldr	r3, [pc, #528]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x2b4>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x2b6>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00d      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cde:	4a7e      	ldr	r2, [pc, #504]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf6:	4b79      	ldr	r3, [pc, #484]	@ (8004edc <HAL_RCC_OscConfig+0x4bc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d118      	bne.n	8004d34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d02:	4b76      	ldr	r3, [pc, #472]	@ (8004edc <HAL_RCC_OscConfig+0x4bc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a75      	ldr	r2, [pc, #468]	@ (8004edc <HAL_RCC_OscConfig+0x4bc>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0e:	f7ff fb27 	bl	8004360 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7ff fb23 	bl	8004360 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e183      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d28:	4b6c      	ldr	r3, [pc, #432]	@ (8004edc <HAL_RCC_OscConfig+0x4bc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d108      	bne.n	8004d4e <HAL_RCC_OscConfig+0x32e>
 8004d3c:	4b66      	ldr	r3, [pc, #408]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	4a65      	ldr	r2, [pc, #404]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d4c:	e024      	b.n	8004d98 <HAL_RCC_OscConfig+0x378>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	d110      	bne.n	8004d78 <HAL_RCC_OscConfig+0x358>
 8004d56:	4b60      	ldr	r3, [pc, #384]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d5e:	f043 0304 	orr.w	r3, r3, #4
 8004d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d66:	4b5c      	ldr	r3, [pc, #368]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d76:	e00f      	b.n	8004d98 <HAL_RCC_OscConfig+0x378>
 8004d78:	4b57      	ldr	r3, [pc, #348]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7e:	4a56      	ldr	r2, [pc, #344]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d88:	4b53      	ldr	r3, [pc, #332]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	4a52      	ldr	r2, [pc, #328]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004d90:	f023 0304 	bic.w	r3, r3, #4
 8004d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d016      	beq.n	8004dce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7ff fade 	bl	8004360 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7ff fada 	bl	8004360 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e138      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dbe:	4b46      	ldr	r3, [pc, #280]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0ed      	beq.n	8004da8 <HAL_RCC_OscConfig+0x388>
 8004dcc:	e015      	b.n	8004dfa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dce:	f7ff fac7 	bl	8004360 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7ff fac3 	bl	8004360 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e121      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dec:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1ed      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dfa:	7ffb      	ldrb	r3, [r7, #31]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d105      	bne.n	8004e0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e00:	4b35      	ldr	r3, [pc, #212]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e04:	4a34      	ldr	r2, [pc, #208]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d03c      	beq.n	8004e92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01c      	beq.n	8004e5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e20:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e26:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e30:	f7ff fa96 	bl	8004360 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e38:	f7ff fa92 	bl	8004360 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0f2      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e4a:	4b23      	ldr	r3, [pc, #140]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ef      	beq.n	8004e38 <HAL_RCC_OscConfig+0x418>
 8004e58:	e01b      	b.n	8004e92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e60:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6a:	f7ff fa79 	bl	8004360 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e72:	f7ff fa75 	bl	8004360 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e0d5      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e84:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ef      	bne.n	8004e72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80c9 	beq.w	800502e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 030c 	and.w	r3, r3, #12
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	f000 8083 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d15e      	bne.n	8004f70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a08      	ldr	r2, [pc, #32]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b8>)
 8004eb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7ff fa4f 	bl	8004360 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec4:	e00c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7ff fa4b 	bl	8004360 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d905      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0ab      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee0:	4b55      	ldr	r3, [pc, #340]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ec      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eec:	4b52      	ldr	r3, [pc, #328]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	4b52      	ldr	r3, [pc, #328]	@ (800503c <HAL_RCC_OscConfig+0x61c>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6a11      	ldr	r1, [r2, #32]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004efc:	3a01      	subs	r2, #1
 8004efe:	0112      	lsls	r2, r2, #4
 8004f00:	4311      	orrs	r1, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f06:	0212      	lsls	r2, r2, #8
 8004f08:	4311      	orrs	r1, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f0e:	0852      	lsrs	r2, r2, #1
 8004f10:	3a01      	subs	r2, #1
 8004f12:	0552      	lsls	r2, r2, #21
 8004f14:	4311      	orrs	r1, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f1a:	0852      	lsrs	r2, r2, #1
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	0652      	lsls	r2, r2, #25
 8004f20:	4311      	orrs	r1, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f26:	06d2      	lsls	r2, r2, #27
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	4943      	ldr	r1, [pc, #268]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f30:	4b41      	ldr	r3, [pc, #260]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a40      	ldr	r2, [pc, #256]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a3d      	ldr	r2, [pc, #244]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7ff fa0a 	bl	8004360 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f50:	f7ff fa06 	bl	8004360 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e066      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f62:	4b35      	ldr	r3, [pc, #212]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x530>
 8004f6e:	e05e      	b.n	800502e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f70:	4b31      	ldr	r3, [pc, #196]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a30      	ldr	r2, [pc, #192]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7ff f9f0 	bl	8004360 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7ff f9ec 	bl	8004360 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e04c      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f96:	4b28      	ldr	r3, [pc, #160]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004fa2:	4b25      	ldr	r3, [pc, #148]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	4924      	ldr	r1, [pc, #144]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004fa8:	4b25      	ldr	r3, [pc, #148]	@ (8005040 <HAL_RCC_OscConfig+0x620>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	60cb      	str	r3, [r1, #12]
 8004fae:	e03e      	b.n	800502e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e039      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005038 <HAL_RCC_OscConfig+0x618>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 0203 	and.w	r2, r3, #3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d12c      	bne.n	800502a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d123      	bne.n	800502a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d11b      	bne.n	800502a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d113      	bne.n	800502a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	3b01      	subs	r3, #1
 8005010:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005012:	429a      	cmp	r2, r3
 8005014:	d109      	bne.n	800502a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	3b01      	subs	r3, #1
 8005024:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	019f800c 	.word	0x019f800c
 8005040:	feeefffc 	.word	0xfeeefffc

08005044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e11e      	b.n	800529a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800505c:	4b91      	ldr	r3, [pc, #580]	@ (80052a4 <HAL_RCC_ClockConfig+0x260>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d910      	bls.n	800508c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b8e      	ldr	r3, [pc, #568]	@ (80052a4 <HAL_RCC_ClockConfig+0x260>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 020f 	bic.w	r2, r3, #15
 8005072:	498c      	ldr	r1, [pc, #560]	@ (80052a4 <HAL_RCC_ClockConfig+0x260>)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	4b8a      	ldr	r3, [pc, #552]	@ (80052a4 <HAL_RCC_ClockConfig+0x260>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e106      	b.n	800529a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d073      	beq.n	8005180 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b03      	cmp	r3, #3
 800509e:	d129      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a0:	4b81      	ldr	r3, [pc, #516]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0f4      	b.n	800529a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80050b0:	f000 f99e 	bl	80053f0 <RCC_GetSysClockFreqFromPLLSource>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4a7c      	ldr	r2, [pc, #496]	@ (80052ac <HAL_RCC_ClockConfig+0x268>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d93f      	bls.n	800513e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050be:	4b7a      	ldr	r3, [pc, #488]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d033      	beq.n	800513e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d12f      	bne.n	800513e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050de:	4b72      	ldr	r3, [pc, #456]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050e6:	4a70      	ldr	r2, [pc, #448]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80050e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e024      	b.n	800513e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d107      	bne.n	800510c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050fc:	4b6a      	ldr	r3, [pc, #424]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0c6      	b.n	800529a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800510c:	4b66      	ldr	r3, [pc, #408]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0be      	b.n	800529a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800511c:	f000 f8ce 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8005120:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	4a61      	ldr	r2, [pc, #388]	@ (80052ac <HAL_RCC_ClockConfig+0x268>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d909      	bls.n	800513e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800512a:	4b5f      	ldr	r3, [pc, #380]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005132:	4a5d      	ldr	r2, [pc, #372]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800513a:	2380      	movs	r3, #128	@ 0x80
 800513c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800513e:	4b5a      	ldr	r3, [pc, #360]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 0203 	bic.w	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4957      	ldr	r1, [pc, #348]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800514c:	4313      	orrs	r3, r2
 800514e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005150:	f7ff f906 	bl	8004360 <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	e00a      	b.n	800516e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005158:	f7ff f902 	bl	8004360 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e095      	b.n	800529a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	4b4e      	ldr	r3, [pc, #312]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 020c 	and.w	r2, r3, #12
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	429a      	cmp	r2, r3
 800517e:	d1eb      	bne.n	8005158 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d023      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005198:	4b43      	ldr	r3, [pc, #268]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a42      	ldr	r2, [pc, #264]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800519e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051b0:	4b3d      	ldr	r3, [pc, #244]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051b8:	4a3b      	ldr	r2, [pc, #236]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80051ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c0:	4b39      	ldr	r3, [pc, #228]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4936      	ldr	r1, [pc, #216]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b80      	cmp	r3, #128	@ 0x80
 80051d8:	d105      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051da:	4b33      	ldr	r3, [pc, #204]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4a32      	ldr	r2, [pc, #200]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 80051e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051e6:	4b2f      	ldr	r3, [pc, #188]	@ (80052a4 <HAL_RCC_ClockConfig+0x260>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d21d      	bcs.n	8005230 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f4:	4b2b      	ldr	r3, [pc, #172]	@ (80052a4 <HAL_RCC_ClockConfig+0x260>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 020f 	bic.w	r2, r3, #15
 80051fc:	4929      	ldr	r1, [pc, #164]	@ (80052a4 <HAL_RCC_ClockConfig+0x260>)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005204:	f7ff f8ac 	bl	8004360 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800520a:	e00a      	b.n	8005222 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520c:	f7ff f8a8 	bl	8004360 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e03b      	b.n	800529a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b20      	ldr	r3, [pc, #128]	@ (80052a4 <HAL_RCC_ClockConfig+0x260>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d1ed      	bne.n	800520c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800523c:	4b1a      	ldr	r3, [pc, #104]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4917      	ldr	r1, [pc, #92]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525a:	4b13      	ldr	r3, [pc, #76]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	490f      	ldr	r1, [pc, #60]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800526e:	f000 f825 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8005272:	4602      	mov	r2, r0
 8005274:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <HAL_RCC_ClockConfig+0x264>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	490c      	ldr	r1, [pc, #48]	@ (80052b0 <HAL_RCC_ClockConfig+0x26c>)
 8005280:	5ccb      	ldrb	r3, [r1, r3]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	4a0a      	ldr	r2, [pc, #40]	@ (80052b4 <HAL_RCC_ClockConfig+0x270>)
 800528c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800528e:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <HAL_RCC_ClockConfig+0x274>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff f818 	bl	80042c8 <HAL_InitTick>
 8005298:	4603      	mov	r3, r0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40022000 	.word	0x40022000
 80052a8:	40021000 	.word	0x40021000
 80052ac:	04c4b400 	.word	0x04c4b400
 80052b0:	08009928 	.word	0x08009928
 80052b4:	20000024 	.word	0x20000024
 80052b8:	20000028 	.word	0x20000028

080052bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d102      	bne.n	80052d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005378 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e047      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052d4:	4b27      	ldr	r3, [pc, #156]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d102      	bne.n	80052e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052e0:	4b26      	ldr	r3, [pc, #152]	@ (800537c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	e03e      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052e6:	4b23      	ldr	r3, [pc, #140]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d136      	bne.n	8005360 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052f2:	4b20      	ldr	r3, [pc, #128]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	3301      	adds	r3, #1
 8005308:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d10c      	bne.n	800532a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005310:	4a1a      	ldr	r2, [pc, #104]	@ (800537c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	4a16      	ldr	r2, [pc, #88]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xb8>)
 800531a:	68d2      	ldr	r2, [r2, #12]
 800531c:	0a12      	lsrs	r2, r2, #8
 800531e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	617b      	str	r3, [r7, #20]
      break;
 8005328:	e00c      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800532a:	4a13      	ldr	r2, [pc, #76]	@ (8005378 <HAL_RCC_GetSysClockFreq+0xbc>)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	4a10      	ldr	r2, [pc, #64]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005334:	68d2      	ldr	r2, [r2, #12]
 8005336:	0a12      	lsrs	r2, r2, #8
 8005338:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]
      break;
 8005342:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005344:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	0e5b      	lsrs	r3, r3, #25
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	3301      	adds	r3, #1
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	e001      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005364:	693b      	ldr	r3, [r7, #16]
}
 8005366:	4618      	mov	r0, r3
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000
 8005378:	00f42400 	.word	0x00f42400
 800537c:	007a1200 	.word	0x007a1200

08005380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005384:	4b03      	ldr	r3, [pc, #12]	@ (8005394 <HAL_RCC_GetHCLKFreq+0x14>)
 8005386:	681b      	ldr	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000024 	.word	0x20000024

08005398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800539c:	f7ff fff0 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4904      	ldr	r1, [pc, #16]	@ (80053c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000
 80053c0:	08009938 	.word	0x08009938

080053c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053c8:	f7ff ffda 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b06      	ldr	r3, [pc, #24]	@ (80053e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0adb      	lsrs	r3, r3, #11
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4904      	ldr	r1, [pc, #16]	@ (80053ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40021000 	.word	0x40021000
 80053ec:	08009938 	.word	0x08009938

080053f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d10c      	bne.n	800542e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005414:	4a17      	ldr	r2, [pc, #92]	@ (8005474 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800541e:	68d2      	ldr	r2, [r2, #12]
 8005420:	0a12      	lsrs	r2, r2, #8
 8005422:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	617b      	str	r3, [r7, #20]
    break;
 800542c:	e00c      	b.n	8005448 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800542e:	4a12      	ldr	r2, [pc, #72]	@ (8005478 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	fbb2 f3f3 	udiv	r3, r2, r3
 8005436:	4a0e      	ldr	r2, [pc, #56]	@ (8005470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005438:	68d2      	ldr	r2, [r2, #12]
 800543a:	0a12      	lsrs	r2, r2, #8
 800543c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	617b      	str	r3, [r7, #20]
    break;
 8005446:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005448:	4b09      	ldr	r3, [pc, #36]	@ (8005470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	0e5b      	lsrs	r3, r3, #25
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	3301      	adds	r3, #1
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005462:	687b      	ldr	r3, [r7, #4]
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40021000 	.word	0x40021000
 8005474:	007a1200 	.word	0x007a1200
 8005478:	00f42400 	.word	0x00f42400

0800547c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005484:	2300      	movs	r3, #0
 8005486:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005488:	2300      	movs	r3, #0
 800548a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8098 	beq.w	80055ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800549a:	2300      	movs	r3, #0
 800549c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800549e:	4b43      	ldr	r3, [pc, #268]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10d      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054aa:	4b40      	ldr	r3, [pc, #256]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ae:	4a3f      	ldr	r2, [pc, #252]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80054b6:	4b3d      	ldr	r3, [pc, #244]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c2:	2301      	movs	r3, #1
 80054c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c6:	4b3a      	ldr	r3, [pc, #232]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a39      	ldr	r2, [pc, #228]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054d2:	f7fe ff45 	bl	8004360 <HAL_GetTick>
 80054d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054d8:	e009      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054da:	f7fe ff41 	bl	8004360 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d902      	bls.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	74fb      	strb	r3, [r7, #19]
        break;
 80054ec:	e005      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ee:	4b30      	ldr	r3, [pc, #192]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0ef      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d159      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005500:	4b2a      	ldr	r3, [pc, #168]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800550a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01e      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	429a      	cmp	r2, r3
 800551a:	d019      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800551c:	4b23      	ldr	r3, [pc, #140]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005526:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005528:	4b20      	ldr	r3, [pc, #128]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	4a1f      	ldr	r2, [pc, #124]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005538:	4b1c      	ldr	r3, [pc, #112]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553e:	4a1b      	ldr	r2, [pc, #108]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005548:	4a18      	ldr	r2, [pc, #96]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fe ff01 	bl	8004360 <HAL_GetTick>
 800555e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005560:	e00b      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fe fefd 	bl	8004360 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d902      	bls.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	74fb      	strb	r3, [r7, #19]
            break;
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0ec      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800558e:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005594:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559c:	4903      	ldr	r1, [pc, #12]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80055a4:	e008      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055a6:	7cfb      	ldrb	r3, [r7, #19]
 80055a8:	74bb      	strb	r3, [r7, #18]
 80055aa:	e005      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	7cfb      	ldrb	r3, [r7, #19]
 80055b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b8:	7c7b      	ldrb	r3, [r7, #17]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d105      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055be:	4ba7      	ldr	r3, [pc, #668]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c2:	4aa6      	ldr	r2, [pc, #664]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055d6:	4ba1      	ldr	r3, [pc, #644]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055dc:	f023 0203 	bic.w	r2, r3, #3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	499d      	ldr	r1, [pc, #628]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055f8:	4b98      	ldr	r3, [pc, #608]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fe:	f023 020c 	bic.w	r2, r3, #12
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	4995      	ldr	r1, [pc, #596]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800561a:	4b90      	ldr	r3, [pc, #576]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005620:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	498c      	ldr	r1, [pc, #560]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800563c:	4b87      	ldr	r3, [pc, #540]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005642:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	4984      	ldr	r1, [pc, #528]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800565e:	4b7f      	ldr	r3, [pc, #508]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	497b      	ldr	r1, [pc, #492]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005680:	4b76      	ldr	r3, [pc, #472]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	4973      	ldr	r1, [pc, #460]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056a2:	4b6e      	ldr	r3, [pc, #440]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	496a      	ldr	r1, [pc, #424]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056c4:	4b65      	ldr	r3, [pc, #404]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	4962      	ldr	r1, [pc, #392]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056e6:	4b5d      	ldr	r3, [pc, #372]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	4959      	ldr	r1, [pc, #356]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005708:	4b54      	ldr	r3, [pc, #336]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800570e:	f023 0203 	bic.w	r2, r3, #3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005716:	4951      	ldr	r1, [pc, #324]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800572a:	4b4c      	ldr	r3, [pc, #304]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	4948      	ldr	r1, [pc, #288]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d015      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800574c:	4b43      	ldr	r3, [pc, #268]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	4940      	ldr	r1, [pc, #256]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576a:	d105      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576c:	4b3b      	ldr	r3, [pc, #236]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a3a      	ldr	r2, [pc, #232]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005776:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005784:	4b35      	ldr	r3, [pc, #212]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005792:	4932      	ldr	r1, [pc, #200]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057a2:	d105      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a4:	4b2d      	ldr	r3, [pc, #180]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4a2c      	ldr	r2, [pc, #176]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057bc:	4b27      	ldr	r3, [pc, #156]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	4924      	ldr	r1, [pc, #144]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057da:	d105      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057dc:	4b1f      	ldr	r3, [pc, #124]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a1e      	ldr	r2, [pc, #120]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f4:	4b19      	ldr	r3, [pc, #100]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005802:	4916      	ldr	r1, [pc, #88]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005812:	d105      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005814:	4b11      	ldr	r3, [pc, #68]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4a10      	ldr	r2, [pc, #64]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800581e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d019      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800582c:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005832:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	4908      	ldr	r1, [pc, #32]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800584a:	d109      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800584c:	4b03      	ldr	r3, [pc, #12]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	4a02      	ldr	r2, [pc, #8]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005856:	60d3      	str	r3, [r2, #12]
 8005858:	e002      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800585a:	bf00      	nop
 800585c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d015      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800586c:	4b29      	ldr	r3, [pc, #164]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005872:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	4926      	ldr	r1, [pc, #152]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800588a:	d105      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800588c:	4b21      	ldr	r3, [pc, #132]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4a20      	ldr	r2, [pc, #128]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005896:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d015      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80058a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b2:	4918      	ldr	r1, [pc, #96]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c2:	d105      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058c4:	4b13      	ldr	r3, [pc, #76]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a12      	ldr	r2, [pc, #72]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d015      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ea:	490a      	ldr	r1, [pc, #40]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fc:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4a04      	ldr	r2, [pc, #16]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005906:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005908:	7cbb      	ldrb	r3, [r7, #18]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40021000 	.word	0x40021000

08005918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e049      	b.n	80059be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fe fac2 	bl	8003ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f000 fd96 	bl	8006488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d001      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e054      	b.n	8005a8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a26      	ldr	r2, [pc, #152]	@ (8005a98 <HAL_TIM_Base_Start_IT+0xd0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d022      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x80>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0a:	d01d      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x80>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a22      	ldr	r2, [pc, #136]	@ (8005a9c <HAL_TIM_Base_Start_IT+0xd4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x80>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a21      	ldr	r2, [pc, #132]	@ (8005aa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x80>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x80>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x80>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <HAL_TIM_Base_Start_IT+0xe4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x80>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d115      	bne.n	8005a74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	4b19      	ldr	r3, [pc, #100]	@ (8005ab4 <HAL_TIM_Base_Start_IT+0xec>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d015      	beq.n	8005a86 <HAL_TIM_Base_Start_IT+0xbe>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a60:	d011      	beq.n	8005a86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0201 	orr.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a72:	e008      	b.n	8005a86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e000      	b.n	8005a88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40013400 	.word	0x40013400
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40015000 	.word	0x40015000
 8005ab4:	00010007 	.word	0x00010007

08005ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e049      	b.n	8005b5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f841 	bl	8005b66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f000 fcc6 	bl	8006488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_TIM_PWM_Start+0x24>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	e03c      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d109      	bne.n	8005bba <HAL_TIM_PWM_Start+0x3e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e02f      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d109      	bne.n	8005bd4 <HAL_TIM_PWM_Start+0x58>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e022      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b0c      	cmp	r3, #12
 8005bd8:	d109      	bne.n	8005bee <HAL_TIM_PWM_Start+0x72>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	bf14      	ite	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	2300      	moveq	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	e015      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d109      	bne.n	8005c08 <HAL_TIM_PWM_Start+0x8c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	bf14      	ite	ne
 8005c00:	2301      	movne	r3, #1
 8005c02:	2300      	moveq	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e008      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e0a6      	b.n	8005d70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_PWM_Start+0xb6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c30:	e023      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_PWM_Start+0xc6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c40:	e01b      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_PWM_Start+0xd6>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c50:	e013      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Start+0xe6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c60:	e00b      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_PWM_Start+0xf6>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c70:	e003      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f87a 	bl	8006d7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d78 <HAL_TIM_PWM_Start+0x1fc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d018      	beq.n	8005cc4 <HAL_TIM_PWM_Start+0x148>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a39      	ldr	r2, [pc, #228]	@ (8005d7c <HAL_TIM_PWM_Start+0x200>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <HAL_TIM_PWM_Start+0x148>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a37      	ldr	r2, [pc, #220]	@ (8005d80 <HAL_TIM_PWM_Start+0x204>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_TIM_PWM_Start+0x148>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a36      	ldr	r2, [pc, #216]	@ (8005d84 <HAL_TIM_PWM_Start+0x208>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_TIM_PWM_Start+0x148>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a34      	ldr	r2, [pc, #208]	@ (8005d88 <HAL_TIM_PWM_Start+0x20c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_PWM_Start+0x148>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a33      	ldr	r2, [pc, #204]	@ (8005d8c <HAL_TIM_PWM_Start+0x210>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_PWM_Start+0x14c>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <HAL_TIM_PWM_Start+0x14e>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a25      	ldr	r2, [pc, #148]	@ (8005d78 <HAL_TIM_PWM_Start+0x1fc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x1b2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf0:	d01d      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x1b2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a26      	ldr	r2, [pc, #152]	@ (8005d90 <HAL_TIM_PWM_Start+0x214>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d018      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x1b2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a24      	ldr	r2, [pc, #144]	@ (8005d94 <HAL_TIM_PWM_Start+0x218>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x1b2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a23      	ldr	r2, [pc, #140]	@ (8005d98 <HAL_TIM_PWM_Start+0x21c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x1b2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a19      	ldr	r2, [pc, #100]	@ (8005d7c <HAL_TIM_PWM_Start+0x200>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x1b2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a18      	ldr	r2, [pc, #96]	@ (8005d80 <HAL_TIM_PWM_Start+0x204>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x1b2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a18      	ldr	r2, [pc, #96]	@ (8005d8c <HAL_TIM_PWM_Start+0x210>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d115      	bne.n	8005d5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	4b19      	ldr	r3, [pc, #100]	@ (8005d9c <HAL_TIM_PWM_Start+0x220>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b06      	cmp	r3, #6
 8005d3e:	d015      	beq.n	8005d6c <HAL_TIM_PWM_Start+0x1f0>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d46:	d011      	beq.n	8005d6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	e008      	b.n	8005d6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0201 	orr.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	e000      	b.n	8005d6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40012c00 	.word	0x40012c00
 8005d7c:	40013400 	.word	0x40013400
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40014400 	.word	0x40014400
 8005d88:	40014800 	.word	0x40014800
 8005d8c:	40015000 	.word	0x40015000
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	00010007 	.word	0x00010007

08005da0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e097      	b.n	8005ee4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fd ffa5 	bl	8003d18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005de4:	f023 0307 	bic.w	r3, r3, #7
 8005de8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f000 fb47 	bl	8006488 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	4313      	orrs	r3, r2
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e40:	f023 030c 	bic.w	r3, r3, #12
 8005e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	011a      	lsls	r2, r3, #4
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	031b      	lsls	r3, r3, #12
 8005e70:	4313      	orrs	r3, r2
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	4313      	orrs	r3, r2
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005efc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d110      	bne.n	8005f3e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f22:	7b7b      	ldrb	r3, [r7, #13]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d001      	beq.n	8005f2c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e089      	b.n	8006040 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f3c:	e031      	b.n	8005fa2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d110      	bne.n	8005f66 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d102      	bne.n	8005f50 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f4a:	7b3b      	ldrb	r3, [r7, #12]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d001      	beq.n	8005f54 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e075      	b.n	8006040 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f64:	e01d      	b.n	8005fa2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d108      	bne.n	8005f7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d105      	bne.n	8005f7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f72:	7b7b      	ldrb	r3, [r7, #13]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d102      	bne.n	8005f7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f78:	7b3b      	ldrb	r3, [r7, #12]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d001      	beq.n	8005f82 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e05e      	b.n	8006040 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d010      	beq.n	8005fd0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005fae:	e01f      	b.n	8005ff0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fedf 	bl	8006d7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0202 	orr.w	r2, r2, #2
 8005fcc:	60da      	str	r2, [r3, #12]
      break;
 8005fce:	e02e      	b.n	800602e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fecf 	bl	8006d7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0204 	orr.w	r2, r2, #4
 8005fec:	60da      	str	r2, [r3, #12]
      break;
 8005fee:	e01e      	b.n	800602e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 febf 	bl	8006d7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2201      	movs	r2, #1
 8006004:	2104      	movs	r1, #4
 8006006:	4618      	mov	r0, r3
 8006008:	f000 feb8 	bl	8006d7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0202 	orr.w	r2, r2, #2
 800601a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0204 	orr.w	r2, r2, #4
 800602a:	60da      	str	r2, [r3, #12]
      break;
 800602c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006062:	2302      	movs	r3, #2
 8006064:	e0ff      	b.n	8006266 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b14      	cmp	r3, #20
 8006072:	f200 80f0 	bhi.w	8006256 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006076:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060d1 	.word	0x080060d1
 8006080:	08006257 	.word	0x08006257
 8006084:	08006257 	.word	0x08006257
 8006088:	08006257 	.word	0x08006257
 800608c:	08006111 	.word	0x08006111
 8006090:	08006257 	.word	0x08006257
 8006094:	08006257 	.word	0x08006257
 8006098:	08006257 	.word	0x08006257
 800609c:	08006153 	.word	0x08006153
 80060a0:	08006257 	.word	0x08006257
 80060a4:	08006257 	.word	0x08006257
 80060a8:	08006257 	.word	0x08006257
 80060ac:	08006193 	.word	0x08006193
 80060b0:	08006257 	.word	0x08006257
 80060b4:	08006257 	.word	0x08006257
 80060b8:	08006257 	.word	0x08006257
 80060bc:	080061d5 	.word	0x080061d5
 80060c0:	08006257 	.word	0x08006257
 80060c4:	08006257 	.word	0x08006257
 80060c8:	08006257 	.word	0x08006257
 80060cc:	08006215 	.word	0x08006215
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fa8a 	bl	80065f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0208 	orr.w	r2, r2, #8
 80060ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0204 	bic.w	r2, r2, #4
 80060fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6999      	ldr	r1, [r3, #24]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	619a      	str	r2, [r3, #24]
      break;
 800610e:	e0a5      	b.n	800625c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fb04 	bl	8006724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800612a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800613a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6999      	ldr	r1, [r3, #24]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	021a      	lsls	r2, r3, #8
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	619a      	str	r2, [r3, #24]
      break;
 8006150:	e084      	b.n	800625c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fb77 	bl	800684c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0208 	orr.w	r2, r2, #8
 800616c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0204 	bic.w	r2, r2, #4
 800617c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69d9      	ldr	r1, [r3, #28]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	61da      	str	r2, [r3, #28]
      break;
 8006190:	e064      	b.n	800625c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fbe9 	bl	8006970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	021a      	lsls	r2, r3, #8
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	61da      	str	r2, [r3, #28]
      break;
 80061d2:	e043      	b.n	800625c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fc5c 	bl	8006a98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0208 	orr.w	r2, r2, #8
 80061ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0204 	bic.w	r2, r2, #4
 80061fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006212:	e023      	b.n	800625c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fca6 	bl	8006b6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800622e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800623e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	021a      	lsls	r2, r3, #8
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006254:	e002      	b.n	800625c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
      break;
 800625a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006264:	7dfb      	ldrb	r3, [r7, #23]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop

08006270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIM_ConfigClockSource+0x1c>
 8006288:	2302      	movs	r3, #2
 800628a:	e0ee      	b.n	800646a <HAL_TIM_ConfigClockSource+0x1fa>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80062aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a6b      	ldr	r2, [pc, #428]	@ (8006474 <HAL_TIM_ConfigClockSource+0x204>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	f000 80b9 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 80062cc:	4a69      	ldr	r2, [pc, #420]	@ (8006474 <HAL_TIM_ConfigClockSource+0x204>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	f200 80be 	bhi.w	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 80062d4:	4a68      	ldr	r2, [pc, #416]	@ (8006478 <HAL_TIM_ConfigClockSource+0x208>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	f000 80b1 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 80062dc:	4a66      	ldr	r2, [pc, #408]	@ (8006478 <HAL_TIM_ConfigClockSource+0x208>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	f200 80b6 	bhi.w	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 80062e4:	4a65      	ldr	r2, [pc, #404]	@ (800647c <HAL_TIM_ConfigClockSource+0x20c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	f000 80a9 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 80062ec:	4a63      	ldr	r2, [pc, #396]	@ (800647c <HAL_TIM_ConfigClockSource+0x20c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	f200 80ae 	bhi.w	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 80062f4:	4a62      	ldr	r2, [pc, #392]	@ (8006480 <HAL_TIM_ConfigClockSource+0x210>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	f000 80a1 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 80062fc:	4a60      	ldr	r2, [pc, #384]	@ (8006480 <HAL_TIM_ConfigClockSource+0x210>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	f200 80a6 	bhi.w	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006304:	4a5f      	ldr	r2, [pc, #380]	@ (8006484 <HAL_TIM_ConfigClockSource+0x214>)
 8006306:	4293      	cmp	r3, r2
 8006308:	f000 8099 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 800630c:	4a5d      	ldr	r2, [pc, #372]	@ (8006484 <HAL_TIM_ConfigClockSource+0x214>)
 800630e:	4293      	cmp	r3, r2
 8006310:	f200 809e 	bhi.w	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006314:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006318:	f000 8091 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 800631c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006320:	f200 8096 	bhi.w	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006328:	f000 8089 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 800632c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006330:	f200 808e 	bhi.w	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006338:	d03e      	beq.n	80063b8 <HAL_TIM_ConfigClockSource+0x148>
 800633a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800633e:	f200 8087 	bhi.w	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006346:	f000 8086 	beq.w	8006456 <HAL_TIM_ConfigClockSource+0x1e6>
 800634a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800634e:	d87f      	bhi.n	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006350:	2b70      	cmp	r3, #112	@ 0x70
 8006352:	d01a      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x11a>
 8006354:	2b70      	cmp	r3, #112	@ 0x70
 8006356:	d87b      	bhi.n	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006358:	2b60      	cmp	r3, #96	@ 0x60
 800635a:	d050      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x18e>
 800635c:	2b60      	cmp	r3, #96	@ 0x60
 800635e:	d877      	bhi.n	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006360:	2b50      	cmp	r3, #80	@ 0x50
 8006362:	d03c      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x16e>
 8006364:	2b50      	cmp	r3, #80	@ 0x50
 8006366:	d873      	bhi.n	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006368:	2b40      	cmp	r3, #64	@ 0x40
 800636a:	d058      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x1ae>
 800636c:	2b40      	cmp	r3, #64	@ 0x40
 800636e:	d86f      	bhi.n	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006370:	2b30      	cmp	r3, #48	@ 0x30
 8006372:	d064      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 8006374:	2b30      	cmp	r3, #48	@ 0x30
 8006376:	d86b      	bhi.n	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006378:	2b20      	cmp	r3, #32
 800637a:	d060      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 800637c:	2b20      	cmp	r3, #32
 800637e:	d867      	bhi.n	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
 8006380:	2b00      	cmp	r3, #0
 8006382:	d05c      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 8006384:	2b10      	cmp	r3, #16
 8006386:	d05a      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x1ce>
 8006388:	e062      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800639a:	f000 fccf 	bl	8006d3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	609a      	str	r2, [r3, #8]
      break;
 80063b6:	e04f      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063c8:	f000 fcb8 	bl	8006d3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063da:	609a      	str	r2, [r3, #8]
      break;
 80063dc:	e03c      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	461a      	mov	r2, r3
 80063ec:	f000 fc2a 	bl	8006c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2150      	movs	r1, #80	@ 0x50
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fc83 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 80063fc:	e02c      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800640a:	461a      	mov	r2, r3
 800640c:	f000 fc49 	bl	8006ca2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2160      	movs	r1, #96	@ 0x60
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fc73 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 800641c:	e01c      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800642a:	461a      	mov	r2, r3
 800642c:	f000 fc0a 	bl	8006c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2140      	movs	r1, #64	@ 0x40
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fc63 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 800643c:	e00c      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f000 fc5a 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 800644e:	e003      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
      break;
 8006454:	e000      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8006456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	00100070 	.word	0x00100070
 8006478:	00100050 	.word	0x00100050
 800647c:	00100040 	.word	0x00100040
 8006480:	00100030 	.word	0x00100030
 8006484:	00100020 	.word	0x00100020

08006488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a4c      	ldr	r2, [pc, #304]	@ (80065cc <TIM_Base_SetConfig+0x144>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d017      	beq.n	80064d0 <TIM_Base_SetConfig+0x48>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a6:	d013      	beq.n	80064d0 <TIM_Base_SetConfig+0x48>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a49      	ldr	r2, [pc, #292]	@ (80065d0 <TIM_Base_SetConfig+0x148>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00f      	beq.n	80064d0 <TIM_Base_SetConfig+0x48>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a48      	ldr	r2, [pc, #288]	@ (80065d4 <TIM_Base_SetConfig+0x14c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_Base_SetConfig+0x48>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a47      	ldr	r2, [pc, #284]	@ (80065d8 <TIM_Base_SetConfig+0x150>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_Base_SetConfig+0x48>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a46      	ldr	r2, [pc, #280]	@ (80065dc <TIM_Base_SetConfig+0x154>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_Base_SetConfig+0x48>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a45      	ldr	r2, [pc, #276]	@ (80065e0 <TIM_Base_SetConfig+0x158>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d108      	bne.n	80064e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a39      	ldr	r2, [pc, #228]	@ (80065cc <TIM_Base_SetConfig+0x144>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d023      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f0:	d01f      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a36      	ldr	r2, [pc, #216]	@ (80065d0 <TIM_Base_SetConfig+0x148>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01b      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a35      	ldr	r2, [pc, #212]	@ (80065d4 <TIM_Base_SetConfig+0x14c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d017      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a34      	ldr	r2, [pc, #208]	@ (80065d8 <TIM_Base_SetConfig+0x150>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a33      	ldr	r2, [pc, #204]	@ (80065dc <TIM_Base_SetConfig+0x154>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a33      	ldr	r2, [pc, #204]	@ (80065e4 <TIM_Base_SetConfig+0x15c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a32      	ldr	r2, [pc, #200]	@ (80065e8 <TIM_Base_SetConfig+0x160>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a31      	ldr	r2, [pc, #196]	@ (80065ec <TIM_Base_SetConfig+0x164>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_Base_SetConfig+0xaa>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2c      	ldr	r2, [pc, #176]	@ (80065e0 <TIM_Base_SetConfig+0x158>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d108      	bne.n	8006544 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a18      	ldr	r2, [pc, #96]	@ (80065cc <TIM_Base_SetConfig+0x144>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d013      	beq.n	8006598 <TIM_Base_SetConfig+0x110>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1a      	ldr	r2, [pc, #104]	@ (80065dc <TIM_Base_SetConfig+0x154>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00f      	beq.n	8006598 <TIM_Base_SetConfig+0x110>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a1a      	ldr	r2, [pc, #104]	@ (80065e4 <TIM_Base_SetConfig+0x15c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00b      	beq.n	8006598 <TIM_Base_SetConfig+0x110>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a19      	ldr	r2, [pc, #100]	@ (80065e8 <TIM_Base_SetConfig+0x160>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <TIM_Base_SetConfig+0x110>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a18      	ldr	r2, [pc, #96]	@ (80065ec <TIM_Base_SetConfig+0x164>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_Base_SetConfig+0x110>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a13      	ldr	r2, [pc, #76]	@ (80065e0 <TIM_Base_SetConfig+0x158>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d103      	bne.n	80065a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d105      	bne.n	80065be <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f023 0201 	bic.w	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	611a      	str	r2, [r3, #16]
  }
}
 80065be:	bf00      	nop
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800
 80065d8:	40000c00 	.word	0x40000c00
 80065dc:	40013400 	.word	0x40013400
 80065e0:	40015000 	.word	0x40015000
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800

080065f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f023 0201 	bic.w	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800661e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 0302 	bic.w	r3, r3, #2
 800663c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a30      	ldr	r2, [pc, #192]	@ (800670c <TIM_OC1_SetConfig+0x11c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <TIM_OC1_SetConfig+0x88>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2f      	ldr	r2, [pc, #188]	@ (8006710 <TIM_OC1_SetConfig+0x120>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00f      	beq.n	8006678 <TIM_OC1_SetConfig+0x88>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a2e      	ldr	r2, [pc, #184]	@ (8006714 <TIM_OC1_SetConfig+0x124>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_OC1_SetConfig+0x88>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a2d      	ldr	r2, [pc, #180]	@ (8006718 <TIM_OC1_SetConfig+0x128>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_OC1_SetConfig+0x88>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a2c      	ldr	r2, [pc, #176]	@ (800671c <TIM_OC1_SetConfig+0x12c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_OC1_SetConfig+0x88>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a2b      	ldr	r2, [pc, #172]	@ (8006720 <TIM_OC1_SetConfig+0x130>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d10c      	bne.n	8006692 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0308 	bic.w	r3, r3, #8
 800667e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 0304 	bic.w	r3, r3, #4
 8006690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1d      	ldr	r2, [pc, #116]	@ (800670c <TIM_OC1_SetConfig+0x11c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <TIM_OC1_SetConfig+0xd2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1c      	ldr	r2, [pc, #112]	@ (8006710 <TIM_OC1_SetConfig+0x120>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_OC1_SetConfig+0xd2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006714 <TIM_OC1_SetConfig+0x124>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_OC1_SetConfig+0xd2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006718 <TIM_OC1_SetConfig+0x128>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_OC1_SetConfig+0xd2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a19      	ldr	r2, [pc, #100]	@ (800671c <TIM_OC1_SetConfig+0x12c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC1_SetConfig+0xd2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a18      	ldr	r2, [pc, #96]	@ (8006720 <TIM_OC1_SetConfig+0x130>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d111      	bne.n	80066e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40014000 	.word	0x40014000
 8006718:	40014400 	.word	0x40014400
 800671c:	40014800 	.word	0x40014800
 8006720:	40015000 	.word	0x40015000

08006724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f023 0210 	bic.w	r2, r3, #16
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800675e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0320 	bic.w	r3, r3, #32
 8006772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a2c      	ldr	r2, [pc, #176]	@ (8006834 <TIM_OC2_SetConfig+0x110>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_OC2_SetConfig+0x74>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a2b      	ldr	r2, [pc, #172]	@ (8006838 <TIM_OC2_SetConfig+0x114>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC2_SetConfig+0x74>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a2a      	ldr	r2, [pc, #168]	@ (800683c <TIM_OC2_SetConfig+0x118>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10d      	bne.n	80067b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800679e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006834 <TIM_OC2_SetConfig+0x110>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <TIM_OC2_SetConfig+0xc0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1e      	ldr	r2, [pc, #120]	@ (8006838 <TIM_OC2_SetConfig+0x114>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00f      	beq.n	80067e4 <TIM_OC2_SetConfig+0xc0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006840 <TIM_OC2_SetConfig+0x11c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00b      	beq.n	80067e4 <TIM_OC2_SetConfig+0xc0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006844 <TIM_OC2_SetConfig+0x120>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d007      	beq.n	80067e4 <TIM_OC2_SetConfig+0xc0>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <TIM_OC2_SetConfig+0x124>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_OC2_SetConfig+0xc0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a17      	ldr	r2, [pc, #92]	@ (800683c <TIM_OC2_SetConfig+0x118>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d113      	bne.n	800680c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40013400 	.word	0x40013400
 800683c:	40015000 	.word	0x40015000
 8006840:	40014000 	.word	0x40014000
 8006844:	40014400 	.word	0x40014400
 8006848:	40014800 	.word	0x40014800

0800684c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800687a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006958 <TIM_OC3_SetConfig+0x10c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d007      	beq.n	80068be <TIM_OC3_SetConfig+0x72>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2a      	ldr	r2, [pc, #168]	@ (800695c <TIM_OC3_SetConfig+0x110>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d003      	beq.n	80068be <TIM_OC3_SetConfig+0x72>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a29      	ldr	r2, [pc, #164]	@ (8006960 <TIM_OC3_SetConfig+0x114>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d10d      	bne.n	80068da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006958 <TIM_OC3_SetConfig+0x10c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <TIM_OC3_SetConfig+0xbe>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a1d      	ldr	r2, [pc, #116]	@ (800695c <TIM_OC3_SetConfig+0x110>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00f      	beq.n	800690a <TIM_OC3_SetConfig+0xbe>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006964 <TIM_OC3_SetConfig+0x118>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00b      	beq.n	800690a <TIM_OC3_SetConfig+0xbe>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006968 <TIM_OC3_SetConfig+0x11c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_OC3_SetConfig+0xbe>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1b      	ldr	r2, [pc, #108]	@ (800696c <TIM_OC3_SetConfig+0x120>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_OC3_SetConfig+0xbe>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a16      	ldr	r2, [pc, #88]	@ (8006960 <TIM_OC3_SetConfig+0x114>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d113      	bne.n	8006932 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	621a      	str	r2, [r3, #32]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40012c00 	.word	0x40012c00
 800695c:	40013400 	.word	0x40013400
 8006960:	40015000 	.word	0x40015000
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	031b      	lsls	r3, r3, #12
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006a80 <TIM_OC4_SetConfig+0x110>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <TIM_OC4_SetConfig+0x74>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a84 <TIM_OC4_SetConfig+0x114>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_OC4_SetConfig+0x74>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a2a      	ldr	r2, [pc, #168]	@ (8006a88 <TIM_OC4_SetConfig+0x118>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d10d      	bne.n	8006a00 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	031b      	lsls	r3, r3, #12
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a1f      	ldr	r2, [pc, #124]	@ (8006a80 <TIM_OC4_SetConfig+0x110>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <TIM_OC4_SetConfig+0xc0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006a84 <TIM_OC4_SetConfig+0x114>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_OC4_SetConfig+0xc0>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a1e      	ldr	r2, [pc, #120]	@ (8006a8c <TIM_OC4_SetConfig+0x11c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_OC4_SetConfig+0xc0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a90 <TIM_OC4_SetConfig+0x120>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC4_SetConfig+0xc0>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a1c      	ldr	r2, [pc, #112]	@ (8006a94 <TIM_OC4_SetConfig+0x124>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC4_SetConfig+0xc0>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a17      	ldr	r2, [pc, #92]	@ (8006a88 <TIM_OC4_SetConfig+0x118>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d113      	bne.n	8006a58 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a36:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a3e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	019b      	lsls	r3, r3, #6
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40013400 	.word	0x40013400
 8006a88:	40015000 	.word	0x40015000
 8006a8c:	40014000 	.word	0x40014000
 8006a90:	40014400 	.word	0x40014400
 8006a94:	40014800 	.word	0x40014800

08006a98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006adc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a19      	ldr	r2, [pc, #100]	@ (8006b54 <TIM_OC5_SetConfig+0xbc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <TIM_OC5_SetConfig+0x82>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a18      	ldr	r2, [pc, #96]	@ (8006b58 <TIM_OC5_SetConfig+0xc0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00f      	beq.n	8006b1a <TIM_OC5_SetConfig+0x82>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a17      	ldr	r2, [pc, #92]	@ (8006b5c <TIM_OC5_SetConfig+0xc4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00b      	beq.n	8006b1a <TIM_OC5_SetConfig+0x82>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <TIM_OC5_SetConfig+0xc8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d007      	beq.n	8006b1a <TIM_OC5_SetConfig+0x82>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a15      	ldr	r2, [pc, #84]	@ (8006b64 <TIM_OC5_SetConfig+0xcc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_OC5_SetConfig+0x82>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a14      	ldr	r2, [pc, #80]	@ (8006b68 <TIM_OC5_SetConfig+0xd0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d109      	bne.n	8006b2e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	621a      	str	r2, [r3, #32]
}
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40013400 	.word	0x40013400
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40014400 	.word	0x40014400
 8006b64:	40014800 	.word	0x40014800
 8006b68:	40015000 	.word	0x40015000

08006b6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	051b      	lsls	r3, r3, #20
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c2c <TIM_OC6_SetConfig+0xc0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d013      	beq.n	8006bf0 <TIM_OC6_SetConfig+0x84>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a19      	ldr	r2, [pc, #100]	@ (8006c30 <TIM_OC6_SetConfig+0xc4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00f      	beq.n	8006bf0 <TIM_OC6_SetConfig+0x84>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a18      	ldr	r2, [pc, #96]	@ (8006c34 <TIM_OC6_SetConfig+0xc8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00b      	beq.n	8006bf0 <TIM_OC6_SetConfig+0x84>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a17      	ldr	r2, [pc, #92]	@ (8006c38 <TIM_OC6_SetConfig+0xcc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d007      	beq.n	8006bf0 <TIM_OC6_SetConfig+0x84>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a16      	ldr	r2, [pc, #88]	@ (8006c3c <TIM_OC6_SetConfig+0xd0>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d003      	beq.n	8006bf0 <TIM_OC6_SetConfig+0x84>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a15      	ldr	r2, [pc, #84]	@ (8006c40 <TIM_OC6_SetConfig+0xd4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d109      	bne.n	8006c04 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	029b      	lsls	r3, r3, #10
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40013400 	.word	0x40013400
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40014400 	.word	0x40014400
 8006c3c:	40014800 	.word	0x40014800
 8006c40:	40015000 	.word	0x40015000

08006c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0201 	bic.w	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f023 030a 	bic.w	r3, r3, #10
 8006c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b087      	sub	sp, #28
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f023 0210 	bic.w	r2, r3, #16
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	031b      	lsls	r3, r3, #12
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f043 0307 	orr.w	r3, r3, #7
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	609a      	str	r2, [r3, #8]
}
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	609a      	str	r2, [r3, #8]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	2201      	movs	r2, #1
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	401a      	ands	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	fa01 f303 	lsl.w	r3, r1, r3
 8006db4:	431a      	orrs	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e074      	b.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a34      	ldr	r2, [pc, #208]	@ (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a33      	ldr	r2, [pc, #204]	@ (8006edc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a31      	ldr	r2, [pc, #196]	@ (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d108      	bne.n	8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a21      	ldr	r2, [pc, #132]	@ (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d022      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e60:	d01d      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1f      	ldr	r2, [pc, #124]	@ (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d018      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a15      	ldr	r2, [pc, #84]	@ (8006edc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a18      	ldr	r2, [pc, #96]	@ (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a11      	ldr	r2, [pc, #68]	@ (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d10c      	bne.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40012c00 	.word	0x40012c00
 8006edc:	40013400 	.word	0x40013400
 8006ee0:	40015000 	.word	0x40015000
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40000c00 	.word	0x40000c00
 8006ef0:	40014000 	.word	0x40014000

08006ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e042      	b.n	8006f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fd f8fb 	bl	8004114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2224      	movs	r2, #36	@ 0x24
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fc7a 	bl	8007838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f97b 	bl	8007240 <UART_SetConfig>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e01b      	b.n	8006f8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fcf9 	bl	800797c <UART_CheckIdleState>
 8006f8a:	4603      	mov	r3, r0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	@ 0x28
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d17b      	bne.n	80070a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_UART_Transmit+0x26>
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e074      	b.n	80070a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2221      	movs	r2, #33	@ 0x21
 8006fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fce:	f7fd f9c7 	bl	8004360 <HAL_GetTick>
 8006fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fec:	d108      	bne.n	8007000 <HAL_UART_Transmit+0x6c>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	e003      	b.n	8007008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007008:	e030      	b.n	800706c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2200      	movs	r2, #0
 8007012:	2180      	movs	r1, #128	@ 0x80
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fd5b 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e03d      	b.n	80070a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10b      	bne.n	800704a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007040:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	3302      	adds	r3, #2
 8007046:	61bb      	str	r3, [r7, #24]
 8007048:	e007      	b.n	800705a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	781a      	ldrb	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	3301      	adds	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1c8      	bne.n	800700a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2200      	movs	r2, #0
 8007080:	2140      	movs	r1, #64	@ 0x40
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fd24 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e006      	b.n	80070a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e000      	b.n	80070a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070a6:	2302      	movs	r3, #2
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3720      	adds	r7, #32
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	@ 0x28
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	f040 80b5 	bne.w	8007236 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_UART_Receive+0x28>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e0ad      	b.n	8007238 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2222      	movs	r2, #34	@ 0x22
 80070e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070f2:	f7fd f935 	bl	8004360 <HAL_GetTick>
 80070f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	88fa      	ldrh	r2, [r7, #6]
 8007104:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007110:	d10e      	bne.n	8007130 <HAL_UART_Receive+0x80>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <HAL_UART_Receive+0x76>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007120:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007124:	e02d      	b.n	8007182 <HAL_UART_Receive+0xd2>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	22ff      	movs	r2, #255	@ 0xff
 800712a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800712e:	e028      	b.n	8007182 <HAL_UART_Receive+0xd2>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <HAL_UART_Receive+0xa4>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <HAL_UART_Receive+0x9a>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	22ff      	movs	r2, #255	@ 0xff
 8007144:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007148:	e01b      	b.n	8007182 <HAL_UART_Receive+0xd2>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	227f      	movs	r2, #127	@ 0x7f
 800714e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007152:	e016      	b.n	8007182 <HAL_UART_Receive+0xd2>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715c:	d10d      	bne.n	800717a <HAL_UART_Receive+0xca>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <HAL_UART_Receive+0xc0>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	227f      	movs	r2, #127	@ 0x7f
 800716a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800716e:	e008      	b.n	8007182 <HAL_UART_Receive+0xd2>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	223f      	movs	r2, #63	@ 0x3f
 8007174:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007178:	e003      	b.n	8007182 <HAL_UART_Receive+0xd2>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007188:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007192:	d108      	bne.n	80071a6 <HAL_UART_Receive+0xf6>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e003      	b.n	80071ae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80071ae:	e036      	b.n	800721e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2200      	movs	r2, #0
 80071b8:	2120      	movs	r1, #32
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fc88 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e032      	b.n	8007238 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10c      	bne.n	80071f2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	b29a      	uxth	r2, r3
 80071e0:	8a7b      	ldrh	r3, [r7, #18]
 80071e2:	4013      	ands	r3, r2
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	3302      	adds	r3, #2
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	e00c      	b.n	800720c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	8a7b      	ldrh	r3, [r7, #18]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	4013      	ands	r3, r2
 8007200:	b2da      	uxtb	r2, r3
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	3301      	adds	r3, #1
 800720a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1c2      	bne.n	80071b0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	e000      	b.n	8007238 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007236:	2302      	movs	r3, #2
  }
}
 8007238:	4618      	mov	r0, r3
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007244:	b08c      	sub	sp, #48	@ 0x30
 8007246:	af00      	add	r7, sp, #0
 8007248:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	431a      	orrs	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	431a      	orrs	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	4313      	orrs	r3, r2
 8007266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4baa      	ldr	r3, [pc, #680]	@ (8007518 <UART_SetConfig+0x2d8>)
 8007270:	4013      	ands	r3, r2
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007278:	430b      	orrs	r3, r1
 800727a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a9f      	ldr	r2, [pc, #636]	@ (800751c <UART_SetConfig+0x2dc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a8:	4313      	orrs	r3, r2
 80072aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80072b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	6812      	ldr	r2, [r2, #0]
 80072be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ca:	f023 010f 	bic.w	r1, r3, #15
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a90      	ldr	r2, [pc, #576]	@ (8007520 <UART_SetConfig+0x2e0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d125      	bne.n	8007330 <UART_SetConfig+0xf0>
 80072e4:	4b8f      	ldr	r3, [pc, #572]	@ (8007524 <UART_SetConfig+0x2e4>)
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d81a      	bhi.n	8007328 <UART_SetConfig+0xe8>
 80072f2:	a201      	add	r2, pc, #4	@ (adr r2, 80072f8 <UART_SetConfig+0xb8>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	08007309 	.word	0x08007309
 80072fc:	08007319 	.word	0x08007319
 8007300:	08007311 	.word	0x08007311
 8007304:	08007321 	.word	0x08007321
 8007308:	2301      	movs	r3, #1
 800730a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730e:	e116      	b.n	800753e <UART_SetConfig+0x2fe>
 8007310:	2302      	movs	r3, #2
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007316:	e112      	b.n	800753e <UART_SetConfig+0x2fe>
 8007318:	2304      	movs	r3, #4
 800731a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731e:	e10e      	b.n	800753e <UART_SetConfig+0x2fe>
 8007320:	2308      	movs	r3, #8
 8007322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007326:	e10a      	b.n	800753e <UART_SetConfig+0x2fe>
 8007328:	2310      	movs	r3, #16
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800732e:	e106      	b.n	800753e <UART_SetConfig+0x2fe>
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a7c      	ldr	r2, [pc, #496]	@ (8007528 <UART_SetConfig+0x2e8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d138      	bne.n	80073ac <UART_SetConfig+0x16c>
 800733a:	4b7a      	ldr	r3, [pc, #488]	@ (8007524 <UART_SetConfig+0x2e4>)
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007340:	f003 030c 	and.w	r3, r3, #12
 8007344:	2b0c      	cmp	r3, #12
 8007346:	d82d      	bhi.n	80073a4 <UART_SetConfig+0x164>
 8007348:	a201      	add	r2, pc, #4	@ (adr r2, 8007350 <UART_SetConfig+0x110>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	08007385 	.word	0x08007385
 8007354:	080073a5 	.word	0x080073a5
 8007358:	080073a5 	.word	0x080073a5
 800735c:	080073a5 	.word	0x080073a5
 8007360:	08007395 	.word	0x08007395
 8007364:	080073a5 	.word	0x080073a5
 8007368:	080073a5 	.word	0x080073a5
 800736c:	080073a5 	.word	0x080073a5
 8007370:	0800738d 	.word	0x0800738d
 8007374:	080073a5 	.word	0x080073a5
 8007378:	080073a5 	.word	0x080073a5
 800737c:	080073a5 	.word	0x080073a5
 8007380:	0800739d 	.word	0x0800739d
 8007384:	2300      	movs	r3, #0
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738a:	e0d8      	b.n	800753e <UART_SetConfig+0x2fe>
 800738c:	2302      	movs	r3, #2
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007392:	e0d4      	b.n	800753e <UART_SetConfig+0x2fe>
 8007394:	2304      	movs	r3, #4
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800739a:	e0d0      	b.n	800753e <UART_SetConfig+0x2fe>
 800739c:	2308      	movs	r3, #8
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a2:	e0cc      	b.n	800753e <UART_SetConfig+0x2fe>
 80073a4:	2310      	movs	r3, #16
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073aa:	e0c8      	b.n	800753e <UART_SetConfig+0x2fe>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a5e      	ldr	r2, [pc, #376]	@ (800752c <UART_SetConfig+0x2ec>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d125      	bne.n	8007402 <UART_SetConfig+0x1c2>
 80073b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007524 <UART_SetConfig+0x2e4>)
 80073b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073c0:	2b30      	cmp	r3, #48	@ 0x30
 80073c2:	d016      	beq.n	80073f2 <UART_SetConfig+0x1b2>
 80073c4:	2b30      	cmp	r3, #48	@ 0x30
 80073c6:	d818      	bhi.n	80073fa <UART_SetConfig+0x1ba>
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d00a      	beq.n	80073e2 <UART_SetConfig+0x1a2>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d814      	bhi.n	80073fa <UART_SetConfig+0x1ba>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <UART_SetConfig+0x19a>
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d008      	beq.n	80073ea <UART_SetConfig+0x1aa>
 80073d8:	e00f      	b.n	80073fa <UART_SetConfig+0x1ba>
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e0:	e0ad      	b.n	800753e <UART_SetConfig+0x2fe>
 80073e2:	2302      	movs	r3, #2
 80073e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e8:	e0a9      	b.n	800753e <UART_SetConfig+0x2fe>
 80073ea:	2304      	movs	r3, #4
 80073ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f0:	e0a5      	b.n	800753e <UART_SetConfig+0x2fe>
 80073f2:	2308      	movs	r3, #8
 80073f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f8:	e0a1      	b.n	800753e <UART_SetConfig+0x2fe>
 80073fa:	2310      	movs	r3, #16
 80073fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007400:	e09d      	b.n	800753e <UART_SetConfig+0x2fe>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a4a      	ldr	r2, [pc, #296]	@ (8007530 <UART_SetConfig+0x2f0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d125      	bne.n	8007458 <UART_SetConfig+0x218>
 800740c:	4b45      	ldr	r3, [pc, #276]	@ (8007524 <UART_SetConfig+0x2e4>)
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007412:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007416:	2bc0      	cmp	r3, #192	@ 0xc0
 8007418:	d016      	beq.n	8007448 <UART_SetConfig+0x208>
 800741a:	2bc0      	cmp	r3, #192	@ 0xc0
 800741c:	d818      	bhi.n	8007450 <UART_SetConfig+0x210>
 800741e:	2b80      	cmp	r3, #128	@ 0x80
 8007420:	d00a      	beq.n	8007438 <UART_SetConfig+0x1f8>
 8007422:	2b80      	cmp	r3, #128	@ 0x80
 8007424:	d814      	bhi.n	8007450 <UART_SetConfig+0x210>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <UART_SetConfig+0x1f0>
 800742a:	2b40      	cmp	r3, #64	@ 0x40
 800742c:	d008      	beq.n	8007440 <UART_SetConfig+0x200>
 800742e:	e00f      	b.n	8007450 <UART_SetConfig+0x210>
 8007430:	2300      	movs	r3, #0
 8007432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007436:	e082      	b.n	800753e <UART_SetConfig+0x2fe>
 8007438:	2302      	movs	r3, #2
 800743a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743e:	e07e      	b.n	800753e <UART_SetConfig+0x2fe>
 8007440:	2304      	movs	r3, #4
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007446:	e07a      	b.n	800753e <UART_SetConfig+0x2fe>
 8007448:	2308      	movs	r3, #8
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800744e:	e076      	b.n	800753e <UART_SetConfig+0x2fe>
 8007450:	2310      	movs	r3, #16
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007456:	e072      	b.n	800753e <UART_SetConfig+0x2fe>
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a35      	ldr	r2, [pc, #212]	@ (8007534 <UART_SetConfig+0x2f4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d12a      	bne.n	80074b8 <UART_SetConfig+0x278>
 8007462:	4b30      	ldr	r3, [pc, #192]	@ (8007524 <UART_SetConfig+0x2e4>)
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007468:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800746c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007470:	d01a      	beq.n	80074a8 <UART_SetConfig+0x268>
 8007472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007476:	d81b      	bhi.n	80074b0 <UART_SetConfig+0x270>
 8007478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800747c:	d00c      	beq.n	8007498 <UART_SetConfig+0x258>
 800747e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007482:	d815      	bhi.n	80074b0 <UART_SetConfig+0x270>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <UART_SetConfig+0x250>
 8007488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800748c:	d008      	beq.n	80074a0 <UART_SetConfig+0x260>
 800748e:	e00f      	b.n	80074b0 <UART_SetConfig+0x270>
 8007490:	2300      	movs	r3, #0
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007496:	e052      	b.n	800753e <UART_SetConfig+0x2fe>
 8007498:	2302      	movs	r3, #2
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749e:	e04e      	b.n	800753e <UART_SetConfig+0x2fe>
 80074a0:	2304      	movs	r3, #4
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a6:	e04a      	b.n	800753e <UART_SetConfig+0x2fe>
 80074a8:	2308      	movs	r3, #8
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ae:	e046      	b.n	800753e <UART_SetConfig+0x2fe>
 80074b0:	2310      	movs	r3, #16
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b6:	e042      	b.n	800753e <UART_SetConfig+0x2fe>
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a17      	ldr	r2, [pc, #92]	@ (800751c <UART_SetConfig+0x2dc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d13a      	bne.n	8007538 <UART_SetConfig+0x2f8>
 80074c2:	4b18      	ldr	r3, [pc, #96]	@ (8007524 <UART_SetConfig+0x2e4>)
 80074c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074d0:	d01a      	beq.n	8007508 <UART_SetConfig+0x2c8>
 80074d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074d6:	d81b      	bhi.n	8007510 <UART_SetConfig+0x2d0>
 80074d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074dc:	d00c      	beq.n	80074f8 <UART_SetConfig+0x2b8>
 80074de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e2:	d815      	bhi.n	8007510 <UART_SetConfig+0x2d0>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <UART_SetConfig+0x2b0>
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ec:	d008      	beq.n	8007500 <UART_SetConfig+0x2c0>
 80074ee:	e00f      	b.n	8007510 <UART_SetConfig+0x2d0>
 80074f0:	2300      	movs	r3, #0
 80074f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f6:	e022      	b.n	800753e <UART_SetConfig+0x2fe>
 80074f8:	2302      	movs	r3, #2
 80074fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fe:	e01e      	b.n	800753e <UART_SetConfig+0x2fe>
 8007500:	2304      	movs	r3, #4
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007506:	e01a      	b.n	800753e <UART_SetConfig+0x2fe>
 8007508:	2308      	movs	r3, #8
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750e:	e016      	b.n	800753e <UART_SetConfig+0x2fe>
 8007510:	2310      	movs	r3, #16
 8007512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007516:	e012      	b.n	800753e <UART_SetConfig+0x2fe>
 8007518:	cfff69f3 	.word	0xcfff69f3
 800751c:	40008000 	.word	0x40008000
 8007520:	40013800 	.word	0x40013800
 8007524:	40021000 	.word	0x40021000
 8007528:	40004400 	.word	0x40004400
 800752c:	40004800 	.word	0x40004800
 8007530:	40004c00 	.word	0x40004c00
 8007534:	40005000 	.word	0x40005000
 8007538:	2310      	movs	r3, #16
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4aae      	ldr	r2, [pc, #696]	@ (80077fc <UART_SetConfig+0x5bc>)
 8007544:	4293      	cmp	r3, r2
 8007546:	f040 8097 	bne.w	8007678 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800754a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800754e:	2b08      	cmp	r3, #8
 8007550:	d823      	bhi.n	800759a <UART_SetConfig+0x35a>
 8007552:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <UART_SetConfig+0x318>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	0800757d 	.word	0x0800757d
 800755c:	0800759b 	.word	0x0800759b
 8007560:	08007585 	.word	0x08007585
 8007564:	0800759b 	.word	0x0800759b
 8007568:	0800758b 	.word	0x0800758b
 800756c:	0800759b 	.word	0x0800759b
 8007570:	0800759b 	.word	0x0800759b
 8007574:	0800759b 	.word	0x0800759b
 8007578:	08007593 	.word	0x08007593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800757c:	f7fd ff0c 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007582:	e010      	b.n	80075a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007584:	4b9e      	ldr	r3, [pc, #632]	@ (8007800 <UART_SetConfig+0x5c0>)
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007588:	e00d      	b.n	80075a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800758a:	f7fd fe97 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800758e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007590:	e009      	b.n	80075a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007598:	e005      	b.n	80075a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8130 	beq.w	800780e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b2:	4a94      	ldr	r2, [pc, #592]	@ (8007804 <UART_SetConfig+0x5c4>)
 80075b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075b8:	461a      	mov	r2, r3
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	4613      	mov	r3, r2
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	4413      	add	r3, r2
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d305      	bcc.n	80075de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d903      	bls.n	80075e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075e4:	e113      	b.n	800780e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	2200      	movs	r2, #0
 80075ea:	60bb      	str	r3, [r7, #8]
 80075ec:	60fa      	str	r2, [r7, #12]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	4a84      	ldr	r2, [pc, #528]	@ (8007804 <UART_SetConfig+0x5c4>)
 80075f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2200      	movs	r2, #0
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007604:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007608:	f7f9 fb66 	bl	8000cd8 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4610      	mov	r0, r2
 8007612:	4619      	mov	r1, r3
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	020b      	lsls	r3, r1, #8
 800761e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007622:	0202      	lsls	r2, r0, #8
 8007624:	6979      	ldr	r1, [r7, #20]
 8007626:	6849      	ldr	r1, [r1, #4]
 8007628:	0849      	lsrs	r1, r1, #1
 800762a:	2000      	movs	r0, #0
 800762c:	460c      	mov	r4, r1
 800762e:	4605      	mov	r5, r0
 8007630:	eb12 0804 	adds.w	r8, r2, r4
 8007634:	eb43 0905 	adc.w	r9, r3, r5
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	469a      	mov	sl, r3
 8007640:	4693      	mov	fp, r2
 8007642:	4652      	mov	r2, sl
 8007644:	465b      	mov	r3, fp
 8007646:	4640      	mov	r0, r8
 8007648:	4649      	mov	r1, r9
 800764a:	f7f9 fb45 	bl	8000cd8 <__aeabi_uldivmod>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4613      	mov	r3, r2
 8007654:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800765c:	d308      	bcc.n	8007670 <UART_SetConfig+0x430>
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007664:	d204      	bcs.n	8007670 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6a3a      	ldr	r2, [r7, #32]
 800766c:	60da      	str	r2, [r3, #12]
 800766e:	e0ce      	b.n	800780e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007676:	e0ca      	b.n	800780e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007680:	d166      	bne.n	8007750 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007682:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007686:	2b08      	cmp	r3, #8
 8007688:	d827      	bhi.n	80076da <UART_SetConfig+0x49a>
 800768a:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0x450>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076bd 	.word	0x080076bd
 8007698:	080076c5 	.word	0x080076c5
 800769c:	080076db 	.word	0x080076db
 80076a0:	080076cb 	.word	0x080076cb
 80076a4:	080076db 	.word	0x080076db
 80076a8:	080076db 	.word	0x080076db
 80076ac:	080076db 	.word	0x080076db
 80076b0:	080076d3 	.word	0x080076d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b4:	f7fd fe70 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 80076b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076ba:	e014      	b.n	80076e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076bc:	f7fd fe82 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 80076c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076c2:	e010      	b.n	80076e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076c4:	4b4e      	ldr	r3, [pc, #312]	@ (8007800 <UART_SetConfig+0x5c0>)
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076c8:	e00d      	b.n	80076e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ca:	f7fd fdf7 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 80076ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076d0:	e009      	b.n	80076e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076d8:	e005      	b.n	80076e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8090 	beq.w	800780e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f2:	4a44      	ldr	r2, [pc, #272]	@ (8007804 <UART_SetConfig+0x5c4>)
 80076f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007700:	005a      	lsls	r2, r3, #1
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	441a      	add	r2, r3
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	2b0f      	cmp	r3, #15
 8007718:	d916      	bls.n	8007748 <UART_SetConfig+0x508>
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007720:	d212      	bcs.n	8007748 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f023 030f 	bic.w	r3, r3, #15
 800772a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	085b      	lsrs	r3, r3, #1
 8007730:	b29b      	uxth	r3, r3
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	b29a      	uxth	r2, r3
 8007738:	8bfb      	ldrh	r3, [r7, #30]
 800773a:	4313      	orrs	r3, r2
 800773c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	8bfa      	ldrh	r2, [r7, #30]
 8007744:	60da      	str	r2, [r3, #12]
 8007746:	e062      	b.n	800780e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800774e:	e05e      	b.n	800780e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007750:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007754:	2b08      	cmp	r3, #8
 8007756:	d828      	bhi.n	80077aa <UART_SetConfig+0x56a>
 8007758:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <UART_SetConfig+0x520>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007785 	.word	0x08007785
 8007764:	0800778d 	.word	0x0800778d
 8007768:	08007795 	.word	0x08007795
 800776c:	080077ab 	.word	0x080077ab
 8007770:	0800779b 	.word	0x0800779b
 8007774:	080077ab 	.word	0x080077ab
 8007778:	080077ab 	.word	0x080077ab
 800777c:	080077ab 	.word	0x080077ab
 8007780:	080077a3 	.word	0x080077a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007784:	f7fd fe08 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8007788:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800778a:	e014      	b.n	80077b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800778c:	f7fd fe1a 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 8007790:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007792:	e010      	b.n	80077b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007794:	4b1a      	ldr	r3, [pc, #104]	@ (8007800 <UART_SetConfig+0x5c0>)
 8007796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007798:	e00d      	b.n	80077b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800779a:	f7fd fd8f 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800779e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077a0:	e009      	b.n	80077b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077a8:	e005      	b.n	80077b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077b4:	bf00      	nop
    }

    if (pclk != 0U)
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d028      	beq.n	800780e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c0:	4a10      	ldr	r2, [pc, #64]	@ (8007804 <UART_SetConfig+0x5c4>)
 80077c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	441a      	add	r2, r3
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	fbb2 f3f3 	udiv	r3, r2, r3
 80077de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	2b0f      	cmp	r3, #15
 80077e4:	d910      	bls.n	8007808 <UART_SetConfig+0x5c8>
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077ec:	d20c      	bcs.n	8007808 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60da      	str	r2, [r3, #12]
 80077f8:	e009      	b.n	800780e <UART_SetConfig+0x5ce>
 80077fa:	bf00      	nop
 80077fc:	40008000 	.word	0x40008000
 8007800:	00f42400 	.word	0x00f42400
 8007804:	08009940 	.word	0x08009940
      }
      else
      {
        ret = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2201      	movs	r2, #1
 8007812:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2201      	movs	r2, #1
 800781a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2200      	movs	r2, #0
 8007822:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2200      	movs	r2, #0
 8007828:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800782a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800782e:	4618      	mov	r0, r3
 8007830:	3730      	adds	r7, #48	@ 0x30
 8007832:	46bd      	mov	sp, r7
 8007834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007844:	f003 0308 	and.w	r3, r3, #8
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00a      	beq.n	8007862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01a      	beq.n	800794e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007936:	d10a      	bne.n	800794e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	605a      	str	r2, [r3, #4]
  }
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b098      	sub	sp, #96	@ 0x60
 8007980:	af02      	add	r7, sp, #8
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800798c:	f7fc fce8 	bl	8004360 <HAL_GetTick>
 8007990:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b08      	cmp	r3, #8
 800799e:	d12f      	bne.n	8007a00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079a8:	2200      	movs	r2, #0
 80079aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f88e 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d022      	beq.n	8007a00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e6      	bne.n	80079ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e063      	b.n	8007ac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d149      	bne.n	8007aa2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a16:	2200      	movs	r2, #0
 8007a18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f857 	bl	8007ad0 <UART_WaitOnFlagUntilTimeout>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d03c      	beq.n	8007aa2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	623b      	str	r3, [r7, #32]
   return(result);
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a46:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e6      	bne.n	8007a28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f023 0301 	bic.w	r3, r3, #1
 8007a70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a7a:	61fa      	str	r2, [r7, #28]
 8007a7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	69b9      	ldr	r1, [r7, #24]
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	617b      	str	r3, [r7, #20]
   return(result);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e012      	b.n	8007ac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3758      	adds	r7, #88	@ 0x58
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae0:	e04f      	b.n	8007b82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ae8:	d04b      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aea:	f7fc fc39 	bl	8004360 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d302      	bcc.n	8007b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e04e      	b.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d037      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b80      	cmp	r3, #128	@ 0x80
 8007b16:	d034      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b40      	cmp	r3, #64	@ 0x40
 8007b1c:	d031      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d110      	bne.n	8007b4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2208      	movs	r2, #8
 8007b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f838 	bl	8007baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2208      	movs	r2, #8
 8007b3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e029      	b.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b5c:	d111      	bne.n	8007b82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 f81e 	bl	8007baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e00f      	b.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d0a0      	beq.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b095      	sub	sp, #84	@ 0x54
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e6      	bne.n	8007bb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3308      	adds	r3, #8
 8007bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bfa:	f023 0301 	bic.w	r3, r3, #1
 8007bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c10:	e841 2300 	strex	r3, r2, [r1]
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e3      	bne.n	8007be4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d118      	bne.n	8007c56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f023 0310 	bic.w	r3, r3, #16
 8007c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6979      	ldr	r1, [r7, #20]
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e6      	bne.n	8007c24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c6a:	bf00      	nop
 8007c6c:	3754      	adds	r7, #84	@ 0x54
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_UARTEx_DisableFifoMode+0x16>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e027      	b.n	8007cdc <HAL_UARTEx_DisableFifoMode+0x66>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2224      	movs	r2, #36	@ 0x24
 8007c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007cba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e02d      	b.n	8007d5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2224      	movs	r2, #36	@ 0x24
 8007d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0201 	bic.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f84f 	bl	8007de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e02d      	b.n	8007dd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2224      	movs	r2, #36	@ 0x24
 8007d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0201 	bic.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f811 	bl	8007de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d108      	bne.n	8007e02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e00:	e031      	b.n	8007e66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e02:	2308      	movs	r3, #8
 8007e04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e06:	2308      	movs	r3, #8
 8007e08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	0e5b      	lsrs	r3, r3, #25
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 0307 	and.w	r3, r3, #7
 8007e18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	0f5b      	lsrs	r3, r3, #29
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	7b3a      	ldrb	r2, [r7, #12]
 8007e2e:	4911      	ldr	r1, [pc, #68]	@ (8007e74 <UARTEx_SetNbDataToProcess+0x94>)
 8007e30:	5c8a      	ldrb	r2, [r1, r2]
 8007e32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e36:	7b3a      	ldrb	r2, [r7, #12]
 8007e38:	490f      	ldr	r1, [pc, #60]	@ (8007e78 <UARTEx_SetNbDataToProcess+0x98>)
 8007e3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	7b7a      	ldrb	r2, [r7, #13]
 8007e4c:	4909      	ldr	r1, [pc, #36]	@ (8007e74 <UARTEx_SetNbDataToProcess+0x94>)
 8007e4e:	5c8a      	ldrb	r2, [r1, r2]
 8007e50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e54:	7b7a      	ldrb	r2, [r7, #13]
 8007e56:	4908      	ldr	r1, [pc, #32]	@ (8007e78 <UARTEx_SetNbDataToProcess+0x98>)
 8007e58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e66:	bf00      	nop
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	08009958 	.word	0x08009958
 8007e78:	08009960 	.word	0x08009960

08007e7c <siscanf>:
 8007e7c:	b40e      	push	{r1, r2, r3}
 8007e7e:	b530      	push	{r4, r5, lr}
 8007e80:	b09c      	sub	sp, #112	@ 0x70
 8007e82:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007e84:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007e88:	f854 5b04 	ldr.w	r5, [r4], #4
 8007e8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007e90:	9002      	str	r0, [sp, #8]
 8007e92:	9006      	str	r0, [sp, #24]
 8007e94:	f7f8 f9c4 	bl	8000220 <strlen>
 8007e98:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec8 <siscanf+0x4c>)
 8007e9a:	9003      	str	r0, [sp, #12]
 8007e9c:	9007      	str	r0, [sp, #28]
 8007e9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ea0:	480a      	ldr	r0, [pc, #40]	@ (8007ecc <siscanf+0x50>)
 8007ea2:	9401      	str	r4, [sp, #4]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ea8:	9314      	str	r3, [sp, #80]	@ 0x50
 8007eaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007eae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007eb2:	462a      	mov	r2, r5
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	a902      	add	r1, sp, #8
 8007eb8:	6800      	ldr	r0, [r0, #0]
 8007eba:	f000 fb13 	bl	80084e4 <__ssvfiscanf_r>
 8007ebe:	b01c      	add	sp, #112	@ 0x70
 8007ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec4:	b003      	add	sp, #12
 8007ec6:	4770      	bx	lr
 8007ec8:	08007ef3 	.word	0x08007ef3
 8007ecc:	2000003c 	.word	0x2000003c

08007ed0 <__sread>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	f000 fa10 	bl	80082fc <_read_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	bfab      	itete	ge
 8007ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee4:	181b      	addge	r3, r3, r0
 8007ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eea:	bfac      	ite	ge
 8007eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eee:	81a3      	strhlt	r3, [r4, #12]
 8007ef0:	bd10      	pop	{r4, pc}

08007ef2 <__seofread>:
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	4770      	bx	lr

08007ef6 <__swrite>:
 8007ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efa:	461f      	mov	r7, r3
 8007efc:	898b      	ldrh	r3, [r1, #12]
 8007efe:	05db      	lsls	r3, r3, #23
 8007f00:	4605      	mov	r5, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	4616      	mov	r6, r2
 8007f06:	d505      	bpl.n	8007f14 <__swrite+0x1e>
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f000 f9e2 	bl	80082d8 <_lseek_r>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	4632      	mov	r2, r6
 8007f22:	463b      	mov	r3, r7
 8007f24:	4628      	mov	r0, r5
 8007f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2a:	f000 b9f9 	b.w	8008320 <_write_r>

08007f2e <__sseek>:
 8007f2e:	b510      	push	{r4, lr}
 8007f30:	460c      	mov	r4, r1
 8007f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f36:	f000 f9cf 	bl	80082d8 <_lseek_r>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	bf15      	itete	ne
 8007f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f4a:	81a3      	strheq	r3, [r4, #12]
 8007f4c:	bf18      	it	ne
 8007f4e:	81a3      	strhne	r3, [r4, #12]
 8007f50:	bd10      	pop	{r4, pc}

08007f52 <__sclose>:
 8007f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f56:	f000 b9af 	b.w	80082b8 <_close_r>
	...

08007f5c <std>:
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	4604      	mov	r4, r0
 8007f62:	e9c0 3300 	strd	r3, r3, [r0]
 8007f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f6a:	6083      	str	r3, [r0, #8]
 8007f6c:	8181      	strh	r1, [r0, #12]
 8007f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f70:	81c2      	strh	r2, [r0, #14]
 8007f72:	6183      	str	r3, [r0, #24]
 8007f74:	4619      	mov	r1, r3
 8007f76:	2208      	movs	r2, #8
 8007f78:	305c      	adds	r0, #92	@ 0x5c
 8007f7a:	f000 f995 	bl	80082a8 <memset>
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <std+0x58>)
 8007f80:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f82:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb8 <std+0x5c>)
 8007f84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f86:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <std+0x60>)
 8007f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <std+0x64>)
 8007f8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <std+0x68>)
 8007f90:	6224      	str	r4, [r4, #32]
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d006      	beq.n	8007fa4 <std+0x48>
 8007f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f9a:	4294      	cmp	r4, r2
 8007f9c:	d002      	beq.n	8007fa4 <std+0x48>
 8007f9e:	33d0      	adds	r3, #208	@ 0xd0
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	d105      	bne.n	8007fb0 <std+0x54>
 8007fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fac:	f000 b9f4 	b.w	8008398 <__retarget_lock_init_recursive>
 8007fb0:	bd10      	pop	{r4, pc}
 8007fb2:	bf00      	nop
 8007fb4:	08007ed1 	.word	0x08007ed1
 8007fb8:	08007ef7 	.word	0x08007ef7
 8007fbc:	08007f2f 	.word	0x08007f2f
 8007fc0:	08007f53 	.word	0x08007f53
 8007fc4:	20000404 	.word	0x20000404

08007fc8 <stdio_exit_handler>:
 8007fc8:	4a02      	ldr	r2, [pc, #8]	@ (8007fd4 <stdio_exit_handler+0xc>)
 8007fca:	4903      	ldr	r1, [pc, #12]	@ (8007fd8 <stdio_exit_handler+0x10>)
 8007fcc:	4803      	ldr	r0, [pc, #12]	@ (8007fdc <stdio_exit_handler+0x14>)
 8007fce:	f000 b8ef 	b.w	80081b0 <_fwalk_sglue>
 8007fd2:	bf00      	nop
 8007fd4:	20000030 	.word	0x20000030
 8007fd8:	08008d29 	.word	0x08008d29
 8007fdc:	20000040 	.word	0x20000040

08007fe0 <cleanup_stdio>:
 8007fe0:	6841      	ldr	r1, [r0, #4]
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <cleanup_stdio+0x34>)
 8007fe4:	4299      	cmp	r1, r3
 8007fe6:	b510      	push	{r4, lr}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	d001      	beq.n	8007ff0 <cleanup_stdio+0x10>
 8007fec:	f000 fe9c 	bl	8008d28 <_fflush_r>
 8007ff0:	68a1      	ldr	r1, [r4, #8]
 8007ff2:	4b09      	ldr	r3, [pc, #36]	@ (8008018 <cleanup_stdio+0x38>)
 8007ff4:	4299      	cmp	r1, r3
 8007ff6:	d002      	beq.n	8007ffe <cleanup_stdio+0x1e>
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fe95 	bl	8008d28 <_fflush_r>
 8007ffe:	68e1      	ldr	r1, [r4, #12]
 8008000:	4b06      	ldr	r3, [pc, #24]	@ (800801c <cleanup_stdio+0x3c>)
 8008002:	4299      	cmp	r1, r3
 8008004:	d004      	beq.n	8008010 <cleanup_stdio+0x30>
 8008006:	4620      	mov	r0, r4
 8008008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800800c:	f000 be8c 	b.w	8008d28 <_fflush_r>
 8008010:	bd10      	pop	{r4, pc}
 8008012:	bf00      	nop
 8008014:	20000404 	.word	0x20000404
 8008018:	2000046c 	.word	0x2000046c
 800801c:	200004d4 	.word	0x200004d4

08008020 <global_stdio_init.part.0>:
 8008020:	b510      	push	{r4, lr}
 8008022:	4b0b      	ldr	r3, [pc, #44]	@ (8008050 <global_stdio_init.part.0+0x30>)
 8008024:	4c0b      	ldr	r4, [pc, #44]	@ (8008054 <global_stdio_init.part.0+0x34>)
 8008026:	4a0c      	ldr	r2, [pc, #48]	@ (8008058 <global_stdio_init.part.0+0x38>)
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	4620      	mov	r0, r4
 800802c:	2200      	movs	r2, #0
 800802e:	2104      	movs	r1, #4
 8008030:	f7ff ff94 	bl	8007f5c <std>
 8008034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008038:	2201      	movs	r2, #1
 800803a:	2109      	movs	r1, #9
 800803c:	f7ff ff8e 	bl	8007f5c <std>
 8008040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008044:	2202      	movs	r2, #2
 8008046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800804a:	2112      	movs	r1, #18
 800804c:	f7ff bf86 	b.w	8007f5c <std>
 8008050:	2000053c 	.word	0x2000053c
 8008054:	20000404 	.word	0x20000404
 8008058:	08007fc9 	.word	0x08007fc9

0800805c <__sfp_lock_acquire>:
 800805c:	4801      	ldr	r0, [pc, #4]	@ (8008064 <__sfp_lock_acquire+0x8>)
 800805e:	f000 b99c 	b.w	800839a <__retarget_lock_acquire_recursive>
 8008062:	bf00      	nop
 8008064:	20000545 	.word	0x20000545

08008068 <__sfp_lock_release>:
 8008068:	4801      	ldr	r0, [pc, #4]	@ (8008070 <__sfp_lock_release+0x8>)
 800806a:	f000 b997 	b.w	800839c <__retarget_lock_release_recursive>
 800806e:	bf00      	nop
 8008070:	20000545 	.word	0x20000545

08008074 <__sinit>:
 8008074:	b510      	push	{r4, lr}
 8008076:	4604      	mov	r4, r0
 8008078:	f7ff fff0 	bl	800805c <__sfp_lock_acquire>
 800807c:	6a23      	ldr	r3, [r4, #32]
 800807e:	b11b      	cbz	r3, 8008088 <__sinit+0x14>
 8008080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008084:	f7ff bff0 	b.w	8008068 <__sfp_lock_release>
 8008088:	4b04      	ldr	r3, [pc, #16]	@ (800809c <__sinit+0x28>)
 800808a:	6223      	str	r3, [r4, #32]
 800808c:	4b04      	ldr	r3, [pc, #16]	@ (80080a0 <__sinit+0x2c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1f5      	bne.n	8008080 <__sinit+0xc>
 8008094:	f7ff ffc4 	bl	8008020 <global_stdio_init.part.0>
 8008098:	e7f2      	b.n	8008080 <__sinit+0xc>
 800809a:	bf00      	nop
 800809c:	08007fe1 	.word	0x08007fe1
 80080a0:	2000053c 	.word	0x2000053c

080080a4 <_strtol_l.constprop.0>:
 80080a4:	2b24      	cmp	r3, #36	@ 0x24
 80080a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080aa:	4686      	mov	lr, r0
 80080ac:	4690      	mov	r8, r2
 80080ae:	d801      	bhi.n	80080b4 <_strtol_l.constprop.0+0x10>
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d106      	bne.n	80080c2 <_strtol_l.constprop.0+0x1e>
 80080b4:	f000 f946 	bl	8008344 <__errno>
 80080b8:	2316      	movs	r3, #22
 80080ba:	6003      	str	r3, [r0, #0]
 80080bc:	2000      	movs	r0, #0
 80080be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c2:	4834      	ldr	r0, [pc, #208]	@ (8008194 <_strtol_l.constprop.0+0xf0>)
 80080c4:	460d      	mov	r5, r1
 80080c6:	462a      	mov	r2, r5
 80080c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080cc:	5d06      	ldrb	r6, [r0, r4]
 80080ce:	f016 0608 	ands.w	r6, r6, #8
 80080d2:	d1f8      	bne.n	80080c6 <_strtol_l.constprop.0+0x22>
 80080d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80080d6:	d12d      	bne.n	8008134 <_strtol_l.constprop.0+0x90>
 80080d8:	782c      	ldrb	r4, [r5, #0]
 80080da:	2601      	movs	r6, #1
 80080dc:	1c95      	adds	r5, r2, #2
 80080de:	f033 0210 	bics.w	r2, r3, #16
 80080e2:	d109      	bne.n	80080f8 <_strtol_l.constprop.0+0x54>
 80080e4:	2c30      	cmp	r4, #48	@ 0x30
 80080e6:	d12a      	bne.n	800813e <_strtol_l.constprop.0+0x9a>
 80080e8:	782a      	ldrb	r2, [r5, #0]
 80080ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80080ee:	2a58      	cmp	r2, #88	@ 0x58
 80080f0:	d125      	bne.n	800813e <_strtol_l.constprop.0+0x9a>
 80080f2:	786c      	ldrb	r4, [r5, #1]
 80080f4:	2310      	movs	r3, #16
 80080f6:	3502      	adds	r5, #2
 80080f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80080fc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008100:	2200      	movs	r2, #0
 8008102:	fbbc f9f3 	udiv	r9, ip, r3
 8008106:	4610      	mov	r0, r2
 8008108:	fb03 ca19 	mls	sl, r3, r9, ip
 800810c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008110:	2f09      	cmp	r7, #9
 8008112:	d81b      	bhi.n	800814c <_strtol_l.constprop.0+0xa8>
 8008114:	463c      	mov	r4, r7
 8008116:	42a3      	cmp	r3, r4
 8008118:	dd27      	ble.n	800816a <_strtol_l.constprop.0+0xc6>
 800811a:	1c57      	adds	r7, r2, #1
 800811c:	d007      	beq.n	800812e <_strtol_l.constprop.0+0x8a>
 800811e:	4581      	cmp	r9, r0
 8008120:	d320      	bcc.n	8008164 <_strtol_l.constprop.0+0xc0>
 8008122:	d101      	bne.n	8008128 <_strtol_l.constprop.0+0x84>
 8008124:	45a2      	cmp	sl, r4
 8008126:	db1d      	blt.n	8008164 <_strtol_l.constprop.0+0xc0>
 8008128:	fb00 4003 	mla	r0, r0, r3, r4
 800812c:	2201      	movs	r2, #1
 800812e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008132:	e7eb      	b.n	800810c <_strtol_l.constprop.0+0x68>
 8008134:	2c2b      	cmp	r4, #43	@ 0x2b
 8008136:	bf04      	itt	eq
 8008138:	782c      	ldrbeq	r4, [r5, #0]
 800813a:	1c95      	addeq	r5, r2, #2
 800813c:	e7cf      	b.n	80080de <_strtol_l.constprop.0+0x3a>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1da      	bne.n	80080f8 <_strtol_l.constprop.0+0x54>
 8008142:	2c30      	cmp	r4, #48	@ 0x30
 8008144:	bf0c      	ite	eq
 8008146:	2308      	moveq	r3, #8
 8008148:	230a      	movne	r3, #10
 800814a:	e7d5      	b.n	80080f8 <_strtol_l.constprop.0+0x54>
 800814c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008150:	2f19      	cmp	r7, #25
 8008152:	d801      	bhi.n	8008158 <_strtol_l.constprop.0+0xb4>
 8008154:	3c37      	subs	r4, #55	@ 0x37
 8008156:	e7de      	b.n	8008116 <_strtol_l.constprop.0+0x72>
 8008158:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800815c:	2f19      	cmp	r7, #25
 800815e:	d804      	bhi.n	800816a <_strtol_l.constprop.0+0xc6>
 8008160:	3c57      	subs	r4, #87	@ 0x57
 8008162:	e7d8      	b.n	8008116 <_strtol_l.constprop.0+0x72>
 8008164:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008168:	e7e1      	b.n	800812e <_strtol_l.constprop.0+0x8a>
 800816a:	1c53      	adds	r3, r2, #1
 800816c:	d108      	bne.n	8008180 <_strtol_l.constprop.0+0xdc>
 800816e:	2322      	movs	r3, #34	@ 0x22
 8008170:	f8ce 3000 	str.w	r3, [lr]
 8008174:	4660      	mov	r0, ip
 8008176:	f1b8 0f00 	cmp.w	r8, #0
 800817a:	d0a0      	beq.n	80080be <_strtol_l.constprop.0+0x1a>
 800817c:	1e69      	subs	r1, r5, #1
 800817e:	e006      	b.n	800818e <_strtol_l.constprop.0+0xea>
 8008180:	b106      	cbz	r6, 8008184 <_strtol_l.constprop.0+0xe0>
 8008182:	4240      	negs	r0, r0
 8008184:	f1b8 0f00 	cmp.w	r8, #0
 8008188:	d099      	beq.n	80080be <_strtol_l.constprop.0+0x1a>
 800818a:	2a00      	cmp	r2, #0
 800818c:	d1f6      	bne.n	800817c <_strtol_l.constprop.0+0xd8>
 800818e:	f8c8 1000 	str.w	r1, [r8]
 8008192:	e794      	b.n	80080be <_strtol_l.constprop.0+0x1a>
 8008194:	08009969 	.word	0x08009969

08008198 <_strtol_r>:
 8008198:	f7ff bf84 	b.w	80080a4 <_strtol_l.constprop.0>

0800819c <strtol>:
 800819c:	4613      	mov	r3, r2
 800819e:	460a      	mov	r2, r1
 80081a0:	4601      	mov	r1, r0
 80081a2:	4802      	ldr	r0, [pc, #8]	@ (80081ac <strtol+0x10>)
 80081a4:	6800      	ldr	r0, [r0, #0]
 80081a6:	f7ff bf7d 	b.w	80080a4 <_strtol_l.constprop.0>
 80081aa:	bf00      	nop
 80081ac:	2000003c 	.word	0x2000003c

080081b0 <_fwalk_sglue>:
 80081b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4607      	mov	r7, r0
 80081b6:	4688      	mov	r8, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	2600      	movs	r6, #0
 80081bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081c0:	f1b9 0901 	subs.w	r9, r9, #1
 80081c4:	d505      	bpl.n	80081d2 <_fwalk_sglue+0x22>
 80081c6:	6824      	ldr	r4, [r4, #0]
 80081c8:	2c00      	cmp	r4, #0
 80081ca:	d1f7      	bne.n	80081bc <_fwalk_sglue+0xc>
 80081cc:	4630      	mov	r0, r6
 80081ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d907      	bls.n	80081e8 <_fwalk_sglue+0x38>
 80081d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081dc:	3301      	adds	r3, #1
 80081de:	d003      	beq.n	80081e8 <_fwalk_sglue+0x38>
 80081e0:	4629      	mov	r1, r5
 80081e2:	4638      	mov	r0, r7
 80081e4:	47c0      	blx	r8
 80081e6:	4306      	orrs	r6, r0
 80081e8:	3568      	adds	r5, #104	@ 0x68
 80081ea:	e7e9      	b.n	80081c0 <_fwalk_sglue+0x10>

080081ec <_puts_r>:
 80081ec:	6a03      	ldr	r3, [r0, #32]
 80081ee:	b570      	push	{r4, r5, r6, lr}
 80081f0:	6884      	ldr	r4, [r0, #8]
 80081f2:	4605      	mov	r5, r0
 80081f4:	460e      	mov	r6, r1
 80081f6:	b90b      	cbnz	r3, 80081fc <_puts_r+0x10>
 80081f8:	f7ff ff3c 	bl	8008074 <__sinit>
 80081fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081fe:	07db      	lsls	r3, r3, #31
 8008200:	d405      	bmi.n	800820e <_puts_r+0x22>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	0598      	lsls	r0, r3, #22
 8008206:	d402      	bmi.n	800820e <_puts_r+0x22>
 8008208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800820a:	f000 f8c6 	bl	800839a <__retarget_lock_acquire_recursive>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	0719      	lsls	r1, r3, #28
 8008212:	d502      	bpl.n	800821a <_puts_r+0x2e>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d135      	bne.n	8008286 <_puts_r+0x9a>
 800821a:	4621      	mov	r1, r4
 800821c:	4628      	mov	r0, r5
 800821e:	f000 fecd 	bl	8008fbc <__swsetup_r>
 8008222:	b380      	cbz	r0, 8008286 <_puts_r+0x9a>
 8008224:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800822a:	07da      	lsls	r2, r3, #31
 800822c:	d405      	bmi.n	800823a <_puts_r+0x4e>
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	059b      	lsls	r3, r3, #22
 8008232:	d402      	bmi.n	800823a <_puts_r+0x4e>
 8008234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008236:	f000 f8b1 	bl	800839c <__retarget_lock_release_recursive>
 800823a:	4628      	mov	r0, r5
 800823c:	bd70      	pop	{r4, r5, r6, pc}
 800823e:	2b00      	cmp	r3, #0
 8008240:	da04      	bge.n	800824c <_puts_r+0x60>
 8008242:	69a2      	ldr	r2, [r4, #24]
 8008244:	429a      	cmp	r2, r3
 8008246:	dc17      	bgt.n	8008278 <_puts_r+0x8c>
 8008248:	290a      	cmp	r1, #10
 800824a:	d015      	beq.n	8008278 <_puts_r+0x8c>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	6022      	str	r2, [r4, #0]
 8008252:	7019      	strb	r1, [r3, #0]
 8008254:	68a3      	ldr	r3, [r4, #8]
 8008256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800825a:	3b01      	subs	r3, #1
 800825c:	60a3      	str	r3, [r4, #8]
 800825e:	2900      	cmp	r1, #0
 8008260:	d1ed      	bne.n	800823e <_puts_r+0x52>
 8008262:	2b00      	cmp	r3, #0
 8008264:	da11      	bge.n	800828a <_puts_r+0x9e>
 8008266:	4622      	mov	r2, r4
 8008268:	210a      	movs	r1, #10
 800826a:	4628      	mov	r0, r5
 800826c:	f000 fe68 	bl	8008f40 <__swbuf_r>
 8008270:	3001      	adds	r0, #1
 8008272:	d0d7      	beq.n	8008224 <_puts_r+0x38>
 8008274:	250a      	movs	r5, #10
 8008276:	e7d7      	b.n	8008228 <_puts_r+0x3c>
 8008278:	4622      	mov	r2, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f000 fe60 	bl	8008f40 <__swbuf_r>
 8008280:	3001      	adds	r0, #1
 8008282:	d1e7      	bne.n	8008254 <_puts_r+0x68>
 8008284:	e7ce      	b.n	8008224 <_puts_r+0x38>
 8008286:	3e01      	subs	r6, #1
 8008288:	e7e4      	b.n	8008254 <_puts_r+0x68>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	6022      	str	r2, [r4, #0]
 8008290:	220a      	movs	r2, #10
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e7ee      	b.n	8008274 <_puts_r+0x88>
	...

08008298 <puts>:
 8008298:	4b02      	ldr	r3, [pc, #8]	@ (80082a4 <puts+0xc>)
 800829a:	4601      	mov	r1, r0
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	f7ff bfa5 	b.w	80081ec <_puts_r>
 80082a2:	bf00      	nop
 80082a4:	2000003c 	.word	0x2000003c

080082a8 <memset>:
 80082a8:	4402      	add	r2, r0
 80082aa:	4603      	mov	r3, r0
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d100      	bne.n	80082b2 <memset+0xa>
 80082b0:	4770      	bx	lr
 80082b2:	f803 1b01 	strb.w	r1, [r3], #1
 80082b6:	e7f9      	b.n	80082ac <memset+0x4>

080082b8 <_close_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4d06      	ldr	r5, [pc, #24]	@ (80082d4 <_close_r+0x1c>)
 80082bc:	2300      	movs	r3, #0
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	602b      	str	r3, [r5, #0]
 80082c4:	f7fb fa48 	bl	8003758 <_close>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_close_r+0x1a>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_close_r+0x1a>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	20000540 	.word	0x20000540

080082d8 <_lseek_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d07      	ldr	r5, [pc, #28]	@ (80082f8 <_lseek_r+0x20>)
 80082dc:	4604      	mov	r4, r0
 80082de:	4608      	mov	r0, r1
 80082e0:	4611      	mov	r1, r2
 80082e2:	2200      	movs	r2, #0
 80082e4:	602a      	str	r2, [r5, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f7fb fa5d 	bl	80037a6 <_lseek>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d102      	bne.n	80082f6 <_lseek_r+0x1e>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	b103      	cbz	r3, 80082f6 <_lseek_r+0x1e>
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	20000540 	.word	0x20000540

080082fc <_read_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4d07      	ldr	r5, [pc, #28]	@ (800831c <_read_r+0x20>)
 8008300:	4604      	mov	r4, r0
 8008302:	4608      	mov	r0, r1
 8008304:	4611      	mov	r1, r2
 8008306:	2200      	movs	r2, #0
 8008308:	602a      	str	r2, [r5, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	f7fb f9eb 	bl	80036e6 <_read>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_read_r+0x1e>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_read_r+0x1e>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	20000540 	.word	0x20000540

08008320 <_write_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d07      	ldr	r5, [pc, #28]	@ (8008340 <_write_r+0x20>)
 8008324:	4604      	mov	r4, r0
 8008326:	4608      	mov	r0, r1
 8008328:	4611      	mov	r1, r2
 800832a:	2200      	movs	r2, #0
 800832c:	602a      	str	r2, [r5, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	f7fb f9f6 	bl	8003720 <_write>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_write_r+0x1e>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_write_r+0x1e>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	20000540 	.word	0x20000540

08008344 <__errno>:
 8008344:	4b01      	ldr	r3, [pc, #4]	@ (800834c <__errno+0x8>)
 8008346:	6818      	ldr	r0, [r3, #0]
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	2000003c 	.word	0x2000003c

08008350 <__libc_init_array>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	4d0d      	ldr	r5, [pc, #52]	@ (8008388 <__libc_init_array+0x38>)
 8008354:	4c0d      	ldr	r4, [pc, #52]	@ (800838c <__libc_init_array+0x3c>)
 8008356:	1b64      	subs	r4, r4, r5
 8008358:	10a4      	asrs	r4, r4, #2
 800835a:	2600      	movs	r6, #0
 800835c:	42a6      	cmp	r6, r4
 800835e:	d109      	bne.n	8008374 <__libc_init_array+0x24>
 8008360:	4d0b      	ldr	r5, [pc, #44]	@ (8008390 <__libc_init_array+0x40>)
 8008362:	4c0c      	ldr	r4, [pc, #48]	@ (8008394 <__libc_init_array+0x44>)
 8008364:	f001 fa9a 	bl	800989c <_init>
 8008368:	1b64      	subs	r4, r4, r5
 800836a:	10a4      	asrs	r4, r4, #2
 800836c:	2600      	movs	r6, #0
 800836e:	42a6      	cmp	r6, r4
 8008370:	d105      	bne.n	800837e <__libc_init_array+0x2e>
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	f855 3b04 	ldr.w	r3, [r5], #4
 8008378:	4798      	blx	r3
 800837a:	3601      	adds	r6, #1
 800837c:	e7ee      	b.n	800835c <__libc_init_array+0xc>
 800837e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008382:	4798      	blx	r3
 8008384:	3601      	adds	r6, #1
 8008386:	e7f2      	b.n	800836e <__libc_init_array+0x1e>
 8008388:	08009b00 	.word	0x08009b00
 800838c:	08009b00 	.word	0x08009b00
 8008390:	08009b00 	.word	0x08009b00
 8008394:	08009b04 	.word	0x08009b04

08008398 <__retarget_lock_init_recursive>:
 8008398:	4770      	bx	lr

0800839a <__retarget_lock_acquire_recursive>:
 800839a:	4770      	bx	lr

0800839c <__retarget_lock_release_recursive>:
 800839c:	4770      	bx	lr
	...

080083a0 <_free_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4605      	mov	r5, r0
 80083a4:	2900      	cmp	r1, #0
 80083a6:	d041      	beq.n	800842c <_free_r+0x8c>
 80083a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ac:	1f0c      	subs	r4, r1, #4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfb8      	it	lt
 80083b2:	18e4      	addlt	r4, r4, r3
 80083b4:	f000 fce0 	bl	8008d78 <__malloc_lock>
 80083b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008430 <_free_r+0x90>)
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	b933      	cbnz	r3, 80083cc <_free_r+0x2c>
 80083be:	6063      	str	r3, [r4, #4]
 80083c0:	6014      	str	r4, [r2, #0]
 80083c2:	4628      	mov	r0, r5
 80083c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c8:	f000 bcdc 	b.w	8008d84 <__malloc_unlock>
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	d908      	bls.n	80083e2 <_free_r+0x42>
 80083d0:	6820      	ldr	r0, [r4, #0]
 80083d2:	1821      	adds	r1, r4, r0
 80083d4:	428b      	cmp	r3, r1
 80083d6:	bf01      	itttt	eq
 80083d8:	6819      	ldreq	r1, [r3, #0]
 80083da:	685b      	ldreq	r3, [r3, #4]
 80083dc:	1809      	addeq	r1, r1, r0
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	e7ed      	b.n	80083be <_free_r+0x1e>
 80083e2:	461a      	mov	r2, r3
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b10b      	cbz	r3, 80083ec <_free_r+0x4c>
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d9fa      	bls.n	80083e2 <_free_r+0x42>
 80083ec:	6811      	ldr	r1, [r2, #0]
 80083ee:	1850      	adds	r0, r2, r1
 80083f0:	42a0      	cmp	r0, r4
 80083f2:	d10b      	bne.n	800840c <_free_r+0x6c>
 80083f4:	6820      	ldr	r0, [r4, #0]
 80083f6:	4401      	add	r1, r0
 80083f8:	1850      	adds	r0, r2, r1
 80083fa:	4283      	cmp	r3, r0
 80083fc:	6011      	str	r1, [r2, #0]
 80083fe:	d1e0      	bne.n	80083c2 <_free_r+0x22>
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	6053      	str	r3, [r2, #4]
 8008406:	4408      	add	r0, r1
 8008408:	6010      	str	r0, [r2, #0]
 800840a:	e7da      	b.n	80083c2 <_free_r+0x22>
 800840c:	d902      	bls.n	8008414 <_free_r+0x74>
 800840e:	230c      	movs	r3, #12
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	e7d6      	b.n	80083c2 <_free_r+0x22>
 8008414:	6820      	ldr	r0, [r4, #0]
 8008416:	1821      	adds	r1, r4, r0
 8008418:	428b      	cmp	r3, r1
 800841a:	bf04      	itt	eq
 800841c:	6819      	ldreq	r1, [r3, #0]
 800841e:	685b      	ldreq	r3, [r3, #4]
 8008420:	6063      	str	r3, [r4, #4]
 8008422:	bf04      	itt	eq
 8008424:	1809      	addeq	r1, r1, r0
 8008426:	6021      	streq	r1, [r4, #0]
 8008428:	6054      	str	r4, [r2, #4]
 800842a:	e7ca      	b.n	80083c2 <_free_r+0x22>
 800842c:	bd38      	pop	{r3, r4, r5, pc}
 800842e:	bf00      	nop
 8008430:	2000054c 	.word	0x2000054c

08008434 <_sungetc_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	1c4b      	adds	r3, r1, #1
 8008438:	4614      	mov	r4, r2
 800843a:	d103      	bne.n	8008444 <_sungetc_r+0x10>
 800843c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008440:	4628      	mov	r0, r5
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	8993      	ldrh	r3, [r2, #12]
 8008446:	f023 0320 	bic.w	r3, r3, #32
 800844a:	8193      	strh	r3, [r2, #12]
 800844c:	6853      	ldr	r3, [r2, #4]
 800844e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008450:	b2cd      	uxtb	r5, r1
 8008452:	b18a      	cbz	r2, 8008478 <_sungetc_r+0x44>
 8008454:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008456:	429a      	cmp	r2, r3
 8008458:	dd08      	ble.n	800846c <_sungetc_r+0x38>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	1e5a      	subs	r2, r3, #1
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008464:	6863      	ldr	r3, [r4, #4]
 8008466:	3301      	adds	r3, #1
 8008468:	6063      	str	r3, [r4, #4]
 800846a:	e7e9      	b.n	8008440 <_sungetc_r+0xc>
 800846c:	4621      	mov	r1, r4
 800846e:	f000 fc8f 	bl	8008d90 <__submore>
 8008472:	2800      	cmp	r0, #0
 8008474:	d0f1      	beq.n	800845a <_sungetc_r+0x26>
 8008476:	e7e1      	b.n	800843c <_sungetc_r+0x8>
 8008478:	6921      	ldr	r1, [r4, #16]
 800847a:	6822      	ldr	r2, [r4, #0]
 800847c:	b141      	cbz	r1, 8008490 <_sungetc_r+0x5c>
 800847e:	4291      	cmp	r1, r2
 8008480:	d206      	bcs.n	8008490 <_sungetc_r+0x5c>
 8008482:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008486:	42a9      	cmp	r1, r5
 8008488:	d102      	bne.n	8008490 <_sungetc_r+0x5c>
 800848a:	3a01      	subs	r2, #1
 800848c:	6022      	str	r2, [r4, #0]
 800848e:	e7ea      	b.n	8008466 <_sungetc_r+0x32>
 8008490:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008494:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008498:	6363      	str	r3, [r4, #52]	@ 0x34
 800849a:	2303      	movs	r3, #3
 800849c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800849e:	4623      	mov	r3, r4
 80084a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	2301      	movs	r3, #1
 80084a8:	e7de      	b.n	8008468 <_sungetc_r+0x34>

080084aa <__ssrefill_r>:
 80084aa:	b510      	push	{r4, lr}
 80084ac:	460c      	mov	r4, r1
 80084ae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80084b0:	b169      	cbz	r1, 80084ce <__ssrefill_r+0x24>
 80084b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084b6:	4299      	cmp	r1, r3
 80084b8:	d001      	beq.n	80084be <__ssrefill_r+0x14>
 80084ba:	f7ff ff71 	bl	80083a0 <_free_r>
 80084be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084c0:	6063      	str	r3, [r4, #4]
 80084c2:	2000      	movs	r0, #0
 80084c4:	6360      	str	r0, [r4, #52]	@ 0x34
 80084c6:	b113      	cbz	r3, 80084ce <__ssrefill_r+0x24>
 80084c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd10      	pop	{r4, pc}
 80084ce:	6923      	ldr	r3, [r4, #16]
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	2300      	movs	r3, #0
 80084d4:	6063      	str	r3, [r4, #4]
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	f043 0320 	orr.w	r3, r3, #32
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084e2:	e7f3      	b.n	80084cc <__ssrefill_r+0x22>

080084e4 <__ssvfiscanf_r>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	460c      	mov	r4, r1
 80084ea:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80084ee:	2100      	movs	r1, #0
 80084f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80084f4:	49a5      	ldr	r1, [pc, #660]	@ (800878c <__ssvfiscanf_r+0x2a8>)
 80084f6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80084f8:	f10d 0804 	add.w	r8, sp, #4
 80084fc:	49a4      	ldr	r1, [pc, #656]	@ (8008790 <__ssvfiscanf_r+0x2ac>)
 80084fe:	4fa5      	ldr	r7, [pc, #660]	@ (8008794 <__ssvfiscanf_r+0x2b0>)
 8008500:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008504:	4606      	mov	r6, r0
 8008506:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	7813      	ldrb	r3, [r2, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8158 	beq.w	80087c2 <__ssvfiscanf_r+0x2de>
 8008512:	5cf9      	ldrb	r1, [r7, r3]
 8008514:	f011 0108 	ands.w	r1, r1, #8
 8008518:	f102 0501 	add.w	r5, r2, #1
 800851c:	d019      	beq.n	8008552 <__ssvfiscanf_r+0x6e>
 800851e:	6863      	ldr	r3, [r4, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	dd0f      	ble.n	8008544 <__ssvfiscanf_r+0x60>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	5cba      	ldrb	r2, [r7, r2]
 800852a:	0712      	lsls	r2, r2, #28
 800852c:	d401      	bmi.n	8008532 <__ssvfiscanf_r+0x4e>
 800852e:	462a      	mov	r2, r5
 8008530:	e7eb      	b.n	800850a <__ssvfiscanf_r+0x26>
 8008532:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008534:	3201      	adds	r2, #1
 8008536:	9245      	str	r2, [sp, #276]	@ 0x114
 8008538:	6862      	ldr	r2, [r4, #4]
 800853a:	3301      	adds	r3, #1
 800853c:	3a01      	subs	r2, #1
 800853e:	6062      	str	r2, [r4, #4]
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	e7ec      	b.n	800851e <__ssvfiscanf_r+0x3a>
 8008544:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008546:	4621      	mov	r1, r4
 8008548:	4630      	mov	r0, r6
 800854a:	4798      	blx	r3
 800854c:	2800      	cmp	r0, #0
 800854e:	d0e9      	beq.n	8008524 <__ssvfiscanf_r+0x40>
 8008550:	e7ed      	b.n	800852e <__ssvfiscanf_r+0x4a>
 8008552:	2b25      	cmp	r3, #37	@ 0x25
 8008554:	d012      	beq.n	800857c <__ssvfiscanf_r+0x98>
 8008556:	4699      	mov	r9, r3
 8008558:	6863      	ldr	r3, [r4, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f340 8093 	ble.w	8008686 <__ssvfiscanf_r+0x1a2>
 8008560:	6822      	ldr	r2, [r4, #0]
 8008562:	7813      	ldrb	r3, [r2, #0]
 8008564:	454b      	cmp	r3, r9
 8008566:	f040 812c 	bne.w	80087c2 <__ssvfiscanf_r+0x2de>
 800856a:	6863      	ldr	r3, [r4, #4]
 800856c:	3b01      	subs	r3, #1
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008572:	3201      	adds	r2, #1
 8008574:	3301      	adds	r3, #1
 8008576:	6022      	str	r2, [r4, #0]
 8008578:	9345      	str	r3, [sp, #276]	@ 0x114
 800857a:	e7d8      	b.n	800852e <__ssvfiscanf_r+0x4a>
 800857c:	9141      	str	r1, [sp, #260]	@ 0x104
 800857e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008580:	7853      	ldrb	r3, [r2, #1]
 8008582:	2b2a      	cmp	r3, #42	@ 0x2a
 8008584:	bf02      	ittt	eq
 8008586:	2310      	moveq	r3, #16
 8008588:	1c95      	addeq	r5, r2, #2
 800858a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800858c:	220a      	movs	r2, #10
 800858e:	46a9      	mov	r9, r5
 8008590:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008594:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008598:	2b09      	cmp	r3, #9
 800859a:	d91e      	bls.n	80085da <__ssvfiscanf_r+0xf6>
 800859c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008798 <__ssvfiscanf_r+0x2b4>
 80085a0:	2203      	movs	r2, #3
 80085a2:	4650      	mov	r0, sl
 80085a4:	f7f7 fe44 	bl	8000230 <memchr>
 80085a8:	b138      	cbz	r0, 80085ba <__ssvfiscanf_r+0xd6>
 80085aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80085ac:	eba0 000a 	sub.w	r0, r0, sl
 80085b0:	2301      	movs	r3, #1
 80085b2:	4083      	lsls	r3, r0
 80085b4:	4313      	orrs	r3, r2
 80085b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80085b8:	464d      	mov	r5, r9
 80085ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085be:	2b78      	cmp	r3, #120	@ 0x78
 80085c0:	d806      	bhi.n	80085d0 <__ssvfiscanf_r+0xec>
 80085c2:	2b57      	cmp	r3, #87	@ 0x57
 80085c4:	d810      	bhi.n	80085e8 <__ssvfiscanf_r+0x104>
 80085c6:	2b25      	cmp	r3, #37	@ 0x25
 80085c8:	d0c5      	beq.n	8008556 <__ssvfiscanf_r+0x72>
 80085ca:	d857      	bhi.n	800867c <__ssvfiscanf_r+0x198>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d065      	beq.n	800869c <__ssvfiscanf_r+0x1b8>
 80085d0:	2303      	movs	r3, #3
 80085d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80085d4:	230a      	movs	r3, #10
 80085d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80085d8:	e078      	b.n	80086cc <__ssvfiscanf_r+0x1e8>
 80085da:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80085dc:	fb02 1103 	mla	r1, r2, r3, r1
 80085e0:	3930      	subs	r1, #48	@ 0x30
 80085e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80085e4:	464d      	mov	r5, r9
 80085e6:	e7d2      	b.n	800858e <__ssvfiscanf_r+0xaa>
 80085e8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80085ec:	2a20      	cmp	r2, #32
 80085ee:	d8ef      	bhi.n	80085d0 <__ssvfiscanf_r+0xec>
 80085f0:	a101      	add	r1, pc, #4	@ (adr r1, 80085f8 <__ssvfiscanf_r+0x114>)
 80085f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	080086ab 	.word	0x080086ab
 80085fc:	080085d1 	.word	0x080085d1
 8008600:	080085d1 	.word	0x080085d1
 8008604:	08008705 	.word	0x08008705
 8008608:	080085d1 	.word	0x080085d1
 800860c:	080085d1 	.word	0x080085d1
 8008610:	080085d1 	.word	0x080085d1
 8008614:	080085d1 	.word	0x080085d1
 8008618:	080085d1 	.word	0x080085d1
 800861c:	080085d1 	.word	0x080085d1
 8008620:	080085d1 	.word	0x080085d1
 8008624:	0800871b 	.word	0x0800871b
 8008628:	08008701 	.word	0x08008701
 800862c:	08008683 	.word	0x08008683
 8008630:	08008683 	.word	0x08008683
 8008634:	08008683 	.word	0x08008683
 8008638:	080085d1 	.word	0x080085d1
 800863c:	080086bd 	.word	0x080086bd
 8008640:	080085d1 	.word	0x080085d1
 8008644:	080085d1 	.word	0x080085d1
 8008648:	080085d1 	.word	0x080085d1
 800864c:	080085d1 	.word	0x080085d1
 8008650:	0800872b 	.word	0x0800872b
 8008654:	080086c5 	.word	0x080086c5
 8008658:	080086a3 	.word	0x080086a3
 800865c:	080085d1 	.word	0x080085d1
 8008660:	080085d1 	.word	0x080085d1
 8008664:	08008727 	.word	0x08008727
 8008668:	080085d1 	.word	0x080085d1
 800866c:	08008701 	.word	0x08008701
 8008670:	080085d1 	.word	0x080085d1
 8008674:	080085d1 	.word	0x080085d1
 8008678:	080086ab 	.word	0x080086ab
 800867c:	3b45      	subs	r3, #69	@ 0x45
 800867e:	2b02      	cmp	r3, #2
 8008680:	d8a6      	bhi.n	80085d0 <__ssvfiscanf_r+0xec>
 8008682:	2305      	movs	r3, #5
 8008684:	e021      	b.n	80086ca <__ssvfiscanf_r+0x1e6>
 8008686:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008688:	4621      	mov	r1, r4
 800868a:	4630      	mov	r0, r6
 800868c:	4798      	blx	r3
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f af66 	beq.w	8008560 <__ssvfiscanf_r+0x7c>
 8008694:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008696:	2800      	cmp	r0, #0
 8008698:	f040 808b 	bne.w	80087b2 <__ssvfiscanf_r+0x2ce>
 800869c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086a0:	e08b      	b.n	80087ba <__ssvfiscanf_r+0x2d6>
 80086a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80086a4:	f042 0220 	orr.w	r2, r2, #32
 80086a8:	9241      	str	r2, [sp, #260]	@ 0x104
 80086aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80086ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80086b2:	2210      	movs	r2, #16
 80086b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80086b6:	9242      	str	r2, [sp, #264]	@ 0x108
 80086b8:	d902      	bls.n	80086c0 <__ssvfiscanf_r+0x1dc>
 80086ba:	e005      	b.n	80086c8 <__ssvfiscanf_r+0x1e4>
 80086bc:	2300      	movs	r3, #0
 80086be:	9342      	str	r3, [sp, #264]	@ 0x108
 80086c0:	2303      	movs	r3, #3
 80086c2:	e002      	b.n	80086ca <__ssvfiscanf_r+0x1e6>
 80086c4:	2308      	movs	r3, #8
 80086c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80086c8:	2304      	movs	r3, #4
 80086ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd39      	ble.n	8008746 <__ssvfiscanf_r+0x262>
 80086d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086d4:	0659      	lsls	r1, r3, #25
 80086d6:	d404      	bmi.n	80086e2 <__ssvfiscanf_r+0x1fe>
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	781a      	ldrb	r2, [r3, #0]
 80086dc:	5cba      	ldrb	r2, [r7, r2]
 80086de:	0712      	lsls	r2, r2, #28
 80086e0:	d438      	bmi.n	8008754 <__ssvfiscanf_r+0x270>
 80086e2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	dc47      	bgt.n	8008778 <__ssvfiscanf_r+0x294>
 80086e8:	466b      	mov	r3, sp
 80086ea:	4622      	mov	r2, r4
 80086ec:	a941      	add	r1, sp, #260	@ 0x104
 80086ee:	4630      	mov	r0, r6
 80086f0:	f000 f90e 	bl	8008910 <_scanf_chars>
 80086f4:	2801      	cmp	r0, #1
 80086f6:	d064      	beq.n	80087c2 <__ssvfiscanf_r+0x2de>
 80086f8:	2802      	cmp	r0, #2
 80086fa:	f47f af18 	bne.w	800852e <__ssvfiscanf_r+0x4a>
 80086fe:	e7c9      	b.n	8008694 <__ssvfiscanf_r+0x1b0>
 8008700:	220a      	movs	r2, #10
 8008702:	e7d7      	b.n	80086b4 <__ssvfiscanf_r+0x1d0>
 8008704:	4629      	mov	r1, r5
 8008706:	4640      	mov	r0, r8
 8008708:	f000 fa50 	bl	8008bac <__sccl>
 800870c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800870e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008712:	9341      	str	r3, [sp, #260]	@ 0x104
 8008714:	4605      	mov	r5, r0
 8008716:	2301      	movs	r3, #1
 8008718:	e7d7      	b.n	80086ca <__ssvfiscanf_r+0x1e6>
 800871a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800871c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008720:	9341      	str	r3, [sp, #260]	@ 0x104
 8008722:	2300      	movs	r3, #0
 8008724:	e7d1      	b.n	80086ca <__ssvfiscanf_r+0x1e6>
 8008726:	2302      	movs	r3, #2
 8008728:	e7cf      	b.n	80086ca <__ssvfiscanf_r+0x1e6>
 800872a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800872c:	06c3      	lsls	r3, r0, #27
 800872e:	f53f aefe 	bmi.w	800852e <__ssvfiscanf_r+0x4a>
 8008732:	9b00      	ldr	r3, [sp, #0]
 8008734:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008736:	1d19      	adds	r1, r3, #4
 8008738:	9100      	str	r1, [sp, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	07c0      	lsls	r0, r0, #31
 800873e:	bf4c      	ite	mi
 8008740:	801a      	strhmi	r2, [r3, #0]
 8008742:	601a      	strpl	r2, [r3, #0]
 8008744:	e6f3      	b.n	800852e <__ssvfiscanf_r+0x4a>
 8008746:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008748:	4621      	mov	r1, r4
 800874a:	4630      	mov	r0, r6
 800874c:	4798      	blx	r3
 800874e:	2800      	cmp	r0, #0
 8008750:	d0bf      	beq.n	80086d2 <__ssvfiscanf_r+0x1ee>
 8008752:	e79f      	b.n	8008694 <__ssvfiscanf_r+0x1b0>
 8008754:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008756:	3201      	adds	r2, #1
 8008758:	9245      	str	r2, [sp, #276]	@ 0x114
 800875a:	6862      	ldr	r2, [r4, #4]
 800875c:	3a01      	subs	r2, #1
 800875e:	2a00      	cmp	r2, #0
 8008760:	6062      	str	r2, [r4, #4]
 8008762:	dd02      	ble.n	800876a <__ssvfiscanf_r+0x286>
 8008764:	3301      	adds	r3, #1
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	e7b6      	b.n	80086d8 <__ssvfiscanf_r+0x1f4>
 800876a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800876c:	4621      	mov	r1, r4
 800876e:	4630      	mov	r0, r6
 8008770:	4798      	blx	r3
 8008772:	2800      	cmp	r0, #0
 8008774:	d0b0      	beq.n	80086d8 <__ssvfiscanf_r+0x1f4>
 8008776:	e78d      	b.n	8008694 <__ssvfiscanf_r+0x1b0>
 8008778:	2b04      	cmp	r3, #4
 800877a:	dc0f      	bgt.n	800879c <__ssvfiscanf_r+0x2b8>
 800877c:	466b      	mov	r3, sp
 800877e:	4622      	mov	r2, r4
 8008780:	a941      	add	r1, sp, #260	@ 0x104
 8008782:	4630      	mov	r0, r6
 8008784:	f000 f91e 	bl	80089c4 <_scanf_i>
 8008788:	e7b4      	b.n	80086f4 <__ssvfiscanf_r+0x210>
 800878a:	bf00      	nop
 800878c:	08008435 	.word	0x08008435
 8008790:	080084ab 	.word	0x080084ab
 8008794:	08009969 	.word	0x08009969
 8008798:	08009a69 	.word	0x08009a69
 800879c:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <__ssvfiscanf_r+0x2e4>)
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f43f aec5 	beq.w	800852e <__ssvfiscanf_r+0x4a>
 80087a4:	466b      	mov	r3, sp
 80087a6:	4622      	mov	r2, r4
 80087a8:	a941      	add	r1, sp, #260	@ 0x104
 80087aa:	4630      	mov	r0, r6
 80087ac:	f3af 8000 	nop.w
 80087b0:	e7a0      	b.n	80086f4 <__ssvfiscanf_r+0x210>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	065b      	lsls	r3, r3, #25
 80087b6:	f53f af71 	bmi.w	800869c <__ssvfiscanf_r+0x1b8>
 80087ba:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80087be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80087c4:	e7f9      	b.n	80087ba <__ssvfiscanf_r+0x2d6>
 80087c6:	bf00      	nop
 80087c8:	00000000 	.word	0x00000000

080087cc <sbrk_aligned>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	4e0f      	ldr	r6, [pc, #60]	@ (800880c <sbrk_aligned+0x40>)
 80087d0:	460c      	mov	r4, r1
 80087d2:	6831      	ldr	r1, [r6, #0]
 80087d4:	4605      	mov	r5, r0
 80087d6:	b911      	cbnz	r1, 80087de <sbrk_aligned+0x12>
 80087d8:	f000 fcca 	bl	8009170 <_sbrk_r>
 80087dc:	6030      	str	r0, [r6, #0]
 80087de:	4621      	mov	r1, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	f000 fcc5 	bl	8009170 <_sbrk_r>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	d103      	bne.n	80087f2 <sbrk_aligned+0x26>
 80087ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80087ee:	4620      	mov	r0, r4
 80087f0:	bd70      	pop	{r4, r5, r6, pc}
 80087f2:	1cc4      	adds	r4, r0, #3
 80087f4:	f024 0403 	bic.w	r4, r4, #3
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d0f8      	beq.n	80087ee <sbrk_aligned+0x22>
 80087fc:	1a21      	subs	r1, r4, r0
 80087fe:	4628      	mov	r0, r5
 8008800:	f000 fcb6 	bl	8009170 <_sbrk_r>
 8008804:	3001      	adds	r0, #1
 8008806:	d1f2      	bne.n	80087ee <sbrk_aligned+0x22>
 8008808:	e7ef      	b.n	80087ea <sbrk_aligned+0x1e>
 800880a:	bf00      	nop
 800880c:	20000548 	.word	0x20000548

08008810 <_malloc_r>:
 8008810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008814:	1ccd      	adds	r5, r1, #3
 8008816:	f025 0503 	bic.w	r5, r5, #3
 800881a:	3508      	adds	r5, #8
 800881c:	2d0c      	cmp	r5, #12
 800881e:	bf38      	it	cc
 8008820:	250c      	movcc	r5, #12
 8008822:	2d00      	cmp	r5, #0
 8008824:	4606      	mov	r6, r0
 8008826:	db01      	blt.n	800882c <_malloc_r+0x1c>
 8008828:	42a9      	cmp	r1, r5
 800882a:	d904      	bls.n	8008836 <_malloc_r+0x26>
 800882c:	230c      	movs	r3, #12
 800882e:	6033      	str	r3, [r6, #0]
 8008830:	2000      	movs	r0, #0
 8008832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800890c <_malloc_r+0xfc>
 800883a:	f000 fa9d 	bl	8008d78 <__malloc_lock>
 800883e:	f8d8 3000 	ldr.w	r3, [r8]
 8008842:	461c      	mov	r4, r3
 8008844:	bb44      	cbnz	r4, 8008898 <_malloc_r+0x88>
 8008846:	4629      	mov	r1, r5
 8008848:	4630      	mov	r0, r6
 800884a:	f7ff ffbf 	bl	80087cc <sbrk_aligned>
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	4604      	mov	r4, r0
 8008852:	d158      	bne.n	8008906 <_malloc_r+0xf6>
 8008854:	f8d8 4000 	ldr.w	r4, [r8]
 8008858:	4627      	mov	r7, r4
 800885a:	2f00      	cmp	r7, #0
 800885c:	d143      	bne.n	80088e6 <_malloc_r+0xd6>
 800885e:	2c00      	cmp	r4, #0
 8008860:	d04b      	beq.n	80088fa <_malloc_r+0xea>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	4639      	mov	r1, r7
 8008866:	4630      	mov	r0, r6
 8008868:	eb04 0903 	add.w	r9, r4, r3
 800886c:	f000 fc80 	bl	8009170 <_sbrk_r>
 8008870:	4581      	cmp	r9, r0
 8008872:	d142      	bne.n	80088fa <_malloc_r+0xea>
 8008874:	6821      	ldr	r1, [r4, #0]
 8008876:	1a6d      	subs	r5, r5, r1
 8008878:	4629      	mov	r1, r5
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff ffa6 	bl	80087cc <sbrk_aligned>
 8008880:	3001      	adds	r0, #1
 8008882:	d03a      	beq.n	80088fa <_malloc_r+0xea>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	442b      	add	r3, r5
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	f8d8 3000 	ldr.w	r3, [r8]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	bb62      	cbnz	r2, 80088ec <_malloc_r+0xdc>
 8008892:	f8c8 7000 	str.w	r7, [r8]
 8008896:	e00f      	b.n	80088b8 <_malloc_r+0xa8>
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	1b52      	subs	r2, r2, r5
 800889c:	d420      	bmi.n	80088e0 <_malloc_r+0xd0>
 800889e:	2a0b      	cmp	r2, #11
 80088a0:	d917      	bls.n	80088d2 <_malloc_r+0xc2>
 80088a2:	1961      	adds	r1, r4, r5
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	6025      	str	r5, [r4, #0]
 80088a8:	bf18      	it	ne
 80088aa:	6059      	strne	r1, [r3, #4]
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	bf08      	it	eq
 80088b0:	f8c8 1000 	streq.w	r1, [r8]
 80088b4:	5162      	str	r2, [r4, r5]
 80088b6:	604b      	str	r3, [r1, #4]
 80088b8:	4630      	mov	r0, r6
 80088ba:	f000 fa63 	bl	8008d84 <__malloc_unlock>
 80088be:	f104 000b 	add.w	r0, r4, #11
 80088c2:	1d23      	adds	r3, r4, #4
 80088c4:	f020 0007 	bic.w	r0, r0, #7
 80088c8:	1ac2      	subs	r2, r0, r3
 80088ca:	bf1c      	itt	ne
 80088cc:	1a1b      	subne	r3, r3, r0
 80088ce:	50a3      	strne	r3, [r4, r2]
 80088d0:	e7af      	b.n	8008832 <_malloc_r+0x22>
 80088d2:	6862      	ldr	r2, [r4, #4]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	bf0c      	ite	eq
 80088d8:	f8c8 2000 	streq.w	r2, [r8]
 80088dc:	605a      	strne	r2, [r3, #4]
 80088de:	e7eb      	b.n	80088b8 <_malloc_r+0xa8>
 80088e0:	4623      	mov	r3, r4
 80088e2:	6864      	ldr	r4, [r4, #4]
 80088e4:	e7ae      	b.n	8008844 <_malloc_r+0x34>
 80088e6:	463c      	mov	r4, r7
 80088e8:	687f      	ldr	r7, [r7, #4]
 80088ea:	e7b6      	b.n	800885a <_malloc_r+0x4a>
 80088ec:	461a      	mov	r2, r3
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	d1fb      	bne.n	80088ec <_malloc_r+0xdc>
 80088f4:	2300      	movs	r3, #0
 80088f6:	6053      	str	r3, [r2, #4]
 80088f8:	e7de      	b.n	80088b8 <_malloc_r+0xa8>
 80088fa:	230c      	movs	r3, #12
 80088fc:	6033      	str	r3, [r6, #0]
 80088fe:	4630      	mov	r0, r6
 8008900:	f000 fa40 	bl	8008d84 <__malloc_unlock>
 8008904:	e794      	b.n	8008830 <_malloc_r+0x20>
 8008906:	6005      	str	r5, [r0, #0]
 8008908:	e7d6      	b.n	80088b8 <_malloc_r+0xa8>
 800890a:	bf00      	nop
 800890c:	2000054c 	.word	0x2000054c

08008910 <_scanf_chars>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	4615      	mov	r5, r2
 8008916:	688a      	ldr	r2, [r1, #8]
 8008918:	4680      	mov	r8, r0
 800891a:	460c      	mov	r4, r1
 800891c:	b932      	cbnz	r2, 800892c <_scanf_chars+0x1c>
 800891e:	698a      	ldr	r2, [r1, #24]
 8008920:	2a00      	cmp	r2, #0
 8008922:	bf14      	ite	ne
 8008924:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008928:	2201      	moveq	r2, #1
 800892a:	608a      	str	r2, [r1, #8]
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80089c0 <_scanf_chars+0xb0>
 8008932:	06d1      	lsls	r1, r2, #27
 8008934:	bf5f      	itttt	pl
 8008936:	681a      	ldrpl	r2, [r3, #0]
 8008938:	1d11      	addpl	r1, r2, #4
 800893a:	6019      	strpl	r1, [r3, #0]
 800893c:	6816      	ldrpl	r6, [r2, #0]
 800893e:	2700      	movs	r7, #0
 8008940:	69a0      	ldr	r0, [r4, #24]
 8008942:	b188      	cbz	r0, 8008968 <_scanf_chars+0x58>
 8008944:	2801      	cmp	r0, #1
 8008946:	d107      	bne.n	8008958 <_scanf_chars+0x48>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	6963      	ldr	r3, [r4, #20]
 800894e:	5c9b      	ldrb	r3, [r3, r2]
 8008950:	b953      	cbnz	r3, 8008968 <_scanf_chars+0x58>
 8008952:	2f00      	cmp	r7, #0
 8008954:	d031      	beq.n	80089ba <_scanf_chars+0xaa>
 8008956:	e022      	b.n	800899e <_scanf_chars+0x8e>
 8008958:	2802      	cmp	r0, #2
 800895a:	d120      	bne.n	800899e <_scanf_chars+0x8e>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008964:	071b      	lsls	r3, r3, #28
 8008966:	d41a      	bmi.n	800899e <_scanf_chars+0x8e>
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	06da      	lsls	r2, r3, #27
 800896c:	bf5e      	ittt	pl
 800896e:	682b      	ldrpl	r3, [r5, #0]
 8008970:	781b      	ldrbpl	r3, [r3, #0]
 8008972:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008976:	682a      	ldr	r2, [r5, #0]
 8008978:	686b      	ldr	r3, [r5, #4]
 800897a:	3201      	adds	r2, #1
 800897c:	602a      	str	r2, [r5, #0]
 800897e:	68a2      	ldr	r2, [r4, #8]
 8008980:	3b01      	subs	r3, #1
 8008982:	3a01      	subs	r2, #1
 8008984:	606b      	str	r3, [r5, #4]
 8008986:	3701      	adds	r7, #1
 8008988:	60a2      	str	r2, [r4, #8]
 800898a:	b142      	cbz	r2, 800899e <_scanf_chars+0x8e>
 800898c:	2b00      	cmp	r3, #0
 800898e:	dcd7      	bgt.n	8008940 <_scanf_chars+0x30>
 8008990:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008994:	4629      	mov	r1, r5
 8008996:	4640      	mov	r0, r8
 8008998:	4798      	blx	r3
 800899a:	2800      	cmp	r0, #0
 800899c:	d0d0      	beq.n	8008940 <_scanf_chars+0x30>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	f013 0310 	ands.w	r3, r3, #16
 80089a4:	d105      	bne.n	80089b2 <_scanf_chars+0xa2>
 80089a6:	68e2      	ldr	r2, [r4, #12]
 80089a8:	3201      	adds	r2, #1
 80089aa:	60e2      	str	r2, [r4, #12]
 80089ac:	69a2      	ldr	r2, [r4, #24]
 80089ae:	b102      	cbz	r2, 80089b2 <_scanf_chars+0xa2>
 80089b0:	7033      	strb	r3, [r6, #0]
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	443b      	add	r3, r7
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	2000      	movs	r0, #0
 80089ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089be:	bf00      	nop
 80089c0:	08009969 	.word	0x08009969

080089c4 <_scanf_i>:
 80089c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c8:	4698      	mov	r8, r3
 80089ca:	4b74      	ldr	r3, [pc, #464]	@ (8008b9c <_scanf_i+0x1d8>)
 80089cc:	460c      	mov	r4, r1
 80089ce:	4682      	mov	sl, r0
 80089d0:	4616      	mov	r6, r2
 80089d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089d6:	b087      	sub	sp, #28
 80089d8:	ab03      	add	r3, sp, #12
 80089da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089de:	4b70      	ldr	r3, [pc, #448]	@ (8008ba0 <_scanf_i+0x1dc>)
 80089e0:	69a1      	ldr	r1, [r4, #24]
 80089e2:	4a70      	ldr	r2, [pc, #448]	@ (8008ba4 <_scanf_i+0x1e0>)
 80089e4:	2903      	cmp	r1, #3
 80089e6:	bf08      	it	eq
 80089e8:	461a      	moveq	r2, r3
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	9201      	str	r2, [sp, #4]
 80089ee:	1e5a      	subs	r2, r3, #1
 80089f0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80089f4:	bf88      	it	hi
 80089f6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80089fa:	4627      	mov	r7, r4
 80089fc:	bf82      	ittt	hi
 80089fe:	eb03 0905 	addhi.w	r9, r3, r5
 8008a02:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a06:	60a3      	strhi	r3, [r4, #8]
 8008a08:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008a0c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008a10:	bf98      	it	ls
 8008a12:	f04f 0900 	movls.w	r9, #0
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	463d      	mov	r5, r7
 8008a1a:	f04f 0b00 	mov.w	fp, #0
 8008a1e:	6831      	ldr	r1, [r6, #0]
 8008a20:	ab03      	add	r3, sp, #12
 8008a22:	7809      	ldrb	r1, [r1, #0]
 8008a24:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f7f7 fc01 	bl	8000230 <memchr>
 8008a2e:	b328      	cbz	r0, 8008a7c <_scanf_i+0xb8>
 8008a30:	f1bb 0f01 	cmp.w	fp, #1
 8008a34:	d159      	bne.n	8008aea <_scanf_i+0x126>
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	b92a      	cbnz	r2, 8008a46 <_scanf_i+0x82>
 8008a3a:	6822      	ldr	r2, [r4, #0]
 8008a3c:	2108      	movs	r1, #8
 8008a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a42:	6061      	str	r1, [r4, #4]
 8008a44:	6022      	str	r2, [r4, #0]
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008a4c:	6022      	str	r2, [r4, #0]
 8008a4e:	68a2      	ldr	r2, [r4, #8]
 8008a50:	1e51      	subs	r1, r2, #1
 8008a52:	60a1      	str	r1, [r4, #8]
 8008a54:	b192      	cbz	r2, 8008a7c <_scanf_i+0xb8>
 8008a56:	6832      	ldr	r2, [r6, #0]
 8008a58:	1c51      	adds	r1, r2, #1
 8008a5a:	6031      	str	r1, [r6, #0]
 8008a5c:	7812      	ldrb	r2, [r2, #0]
 8008a5e:	f805 2b01 	strb.w	r2, [r5], #1
 8008a62:	6872      	ldr	r2, [r6, #4]
 8008a64:	3a01      	subs	r2, #1
 8008a66:	2a00      	cmp	r2, #0
 8008a68:	6072      	str	r2, [r6, #4]
 8008a6a:	dc07      	bgt.n	8008a7c <_scanf_i+0xb8>
 8008a6c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008a70:	4631      	mov	r1, r6
 8008a72:	4650      	mov	r0, sl
 8008a74:	4790      	blx	r2
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f040 8085 	bne.w	8008b86 <_scanf_i+0x1c2>
 8008a7c:	f10b 0b01 	add.w	fp, fp, #1
 8008a80:	f1bb 0f03 	cmp.w	fp, #3
 8008a84:	d1cb      	bne.n	8008a1e <_scanf_i+0x5a>
 8008a86:	6863      	ldr	r3, [r4, #4]
 8008a88:	b90b      	cbnz	r3, 8008a8e <_scanf_i+0xca>
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	6063      	str	r3, [r4, #4]
 8008a8e:	6863      	ldr	r3, [r4, #4]
 8008a90:	4945      	ldr	r1, [pc, #276]	@ (8008ba8 <_scanf_i+0x1e4>)
 8008a92:	6960      	ldr	r0, [r4, #20]
 8008a94:	1ac9      	subs	r1, r1, r3
 8008a96:	f000 f889 	bl	8008bac <__sccl>
 8008a9a:	f04f 0b00 	mov.w	fp, #0
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	6822      	ldr	r2, [r4, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d03d      	beq.n	8008b22 <_scanf_i+0x15e>
 8008aa6:	6831      	ldr	r1, [r6, #0]
 8008aa8:	6960      	ldr	r0, [r4, #20]
 8008aaa:	f891 c000 	ldrb.w	ip, [r1]
 8008aae:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d035      	beq.n	8008b22 <_scanf_i+0x15e>
 8008ab6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008aba:	d124      	bne.n	8008b06 <_scanf_i+0x142>
 8008abc:	0510      	lsls	r0, r2, #20
 8008abe:	d522      	bpl.n	8008b06 <_scanf_i+0x142>
 8008ac0:	f10b 0b01 	add.w	fp, fp, #1
 8008ac4:	f1b9 0f00 	cmp.w	r9, #0
 8008ac8:	d003      	beq.n	8008ad2 <_scanf_i+0x10e>
 8008aca:	3301      	adds	r3, #1
 8008acc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008ad0:	60a3      	str	r3, [r4, #8]
 8008ad2:	6873      	ldr	r3, [r6, #4]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	6073      	str	r3, [r6, #4]
 8008ada:	dd1b      	ble.n	8008b14 <_scanf_i+0x150>
 8008adc:	6833      	ldr	r3, [r6, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	6033      	str	r3, [r6, #0]
 8008ae2:	68a3      	ldr	r3, [r4, #8]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	60a3      	str	r3, [r4, #8]
 8008ae8:	e7d9      	b.n	8008a9e <_scanf_i+0xda>
 8008aea:	f1bb 0f02 	cmp.w	fp, #2
 8008aee:	d1ae      	bne.n	8008a4e <_scanf_i+0x8a>
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008af6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008afa:	d1bf      	bne.n	8008a7c <_scanf_i+0xb8>
 8008afc:	2110      	movs	r1, #16
 8008afe:	6061      	str	r1, [r4, #4]
 8008b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b04:	e7a2      	b.n	8008a4c <_scanf_i+0x88>
 8008b06:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008b0a:	6022      	str	r2, [r4, #0]
 8008b0c:	780b      	ldrb	r3, [r1, #0]
 8008b0e:	f805 3b01 	strb.w	r3, [r5], #1
 8008b12:	e7de      	b.n	8008ad2 <_scanf_i+0x10e>
 8008b14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008b18:	4631      	mov	r1, r6
 8008b1a:	4650      	mov	r0, sl
 8008b1c:	4798      	blx	r3
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d0df      	beq.n	8008ae2 <_scanf_i+0x11e>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	05d9      	lsls	r1, r3, #23
 8008b26:	d50d      	bpl.n	8008b44 <_scanf_i+0x180>
 8008b28:	42bd      	cmp	r5, r7
 8008b2a:	d909      	bls.n	8008b40 <_scanf_i+0x17c>
 8008b2c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b34:	4632      	mov	r2, r6
 8008b36:	4650      	mov	r0, sl
 8008b38:	4798      	blx	r3
 8008b3a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8008b3e:	464d      	mov	r5, r9
 8008b40:	42bd      	cmp	r5, r7
 8008b42:	d028      	beq.n	8008b96 <_scanf_i+0x1d2>
 8008b44:	6822      	ldr	r2, [r4, #0]
 8008b46:	f012 0210 	ands.w	r2, r2, #16
 8008b4a:	d113      	bne.n	8008b74 <_scanf_i+0x1b0>
 8008b4c:	702a      	strb	r2, [r5, #0]
 8008b4e:	6863      	ldr	r3, [r4, #4]
 8008b50:	9e01      	ldr	r6, [sp, #4]
 8008b52:	4639      	mov	r1, r7
 8008b54:	4650      	mov	r0, sl
 8008b56:	47b0      	blx	r6
 8008b58:	f8d8 3000 	ldr.w	r3, [r8]
 8008b5c:	6821      	ldr	r1, [r4, #0]
 8008b5e:	1d1a      	adds	r2, r3, #4
 8008b60:	f8c8 2000 	str.w	r2, [r8]
 8008b64:	f011 0f20 	tst.w	r1, #32
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	d00f      	beq.n	8008b8c <_scanf_i+0x1c8>
 8008b6c:	6018      	str	r0, [r3, #0]
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	3301      	adds	r3, #1
 8008b72:	60e3      	str	r3, [r4, #12]
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	1bed      	subs	r5, r5, r7
 8008b78:	445d      	add	r5, fp
 8008b7a:	442b      	add	r3, r5
 8008b7c:	6123      	str	r3, [r4, #16]
 8008b7e:	2000      	movs	r0, #0
 8008b80:	b007      	add	sp, #28
 8008b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b86:	f04f 0b00 	mov.w	fp, #0
 8008b8a:	e7ca      	b.n	8008b22 <_scanf_i+0x15e>
 8008b8c:	07ca      	lsls	r2, r1, #31
 8008b8e:	bf4c      	ite	mi
 8008b90:	8018      	strhmi	r0, [r3, #0]
 8008b92:	6018      	strpl	r0, [r3, #0]
 8008b94:	e7eb      	b.n	8008b6e <_scanf_i+0x1aa>
 8008b96:	2001      	movs	r0, #1
 8008b98:	e7f2      	b.n	8008b80 <_scanf_i+0x1bc>
 8008b9a:	bf00      	nop
 8008b9c:	0800991c 	.word	0x0800991c
 8008ba0:	08008199 	.word	0x08008199
 8008ba4:	08008f3d 	.word	0x08008f3d
 8008ba8:	08009a7d 	.word	0x08009a7d

08008bac <__sccl>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	780b      	ldrb	r3, [r1, #0]
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	2b5e      	cmp	r3, #94	@ 0x5e
 8008bb4:	bf0b      	itete	eq
 8008bb6:	784b      	ldrbeq	r3, [r1, #1]
 8008bb8:	1c4a      	addne	r2, r1, #1
 8008bba:	1c8a      	addeq	r2, r1, #2
 8008bbc:	2100      	movne	r1, #0
 8008bbe:	bf08      	it	eq
 8008bc0:	2101      	moveq	r1, #1
 8008bc2:	3801      	subs	r0, #1
 8008bc4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008bc8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008bcc:	42a8      	cmp	r0, r5
 8008bce:	d1fb      	bne.n	8008bc8 <__sccl+0x1c>
 8008bd0:	b90b      	cbnz	r3, 8008bd6 <__sccl+0x2a>
 8008bd2:	1e50      	subs	r0, r2, #1
 8008bd4:	bd70      	pop	{r4, r5, r6, pc}
 8008bd6:	f081 0101 	eor.w	r1, r1, #1
 8008bda:	54e1      	strb	r1, [r4, r3]
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4602      	mov	r2, r0
 8008be0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008be4:	2d2d      	cmp	r5, #45	@ 0x2d
 8008be6:	d005      	beq.n	8008bf4 <__sccl+0x48>
 8008be8:	2d5d      	cmp	r5, #93	@ 0x5d
 8008bea:	d016      	beq.n	8008c1a <__sccl+0x6e>
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	d0f1      	beq.n	8008bd4 <__sccl+0x28>
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	e7f2      	b.n	8008bda <__sccl+0x2e>
 8008bf4:	7846      	ldrb	r6, [r0, #1]
 8008bf6:	2e5d      	cmp	r6, #93	@ 0x5d
 8008bf8:	d0fa      	beq.n	8008bf0 <__sccl+0x44>
 8008bfa:	42b3      	cmp	r3, r6
 8008bfc:	dcf8      	bgt.n	8008bf0 <__sccl+0x44>
 8008bfe:	3002      	adds	r0, #2
 8008c00:	461a      	mov	r2, r3
 8008c02:	3201      	adds	r2, #1
 8008c04:	4296      	cmp	r6, r2
 8008c06:	54a1      	strb	r1, [r4, r2]
 8008c08:	dcfb      	bgt.n	8008c02 <__sccl+0x56>
 8008c0a:	1af2      	subs	r2, r6, r3
 8008c0c:	3a01      	subs	r2, #1
 8008c0e:	1c5d      	adds	r5, r3, #1
 8008c10:	42b3      	cmp	r3, r6
 8008c12:	bfa8      	it	ge
 8008c14:	2200      	movge	r2, #0
 8008c16:	18ab      	adds	r3, r5, r2
 8008c18:	e7e1      	b.n	8008bde <__sccl+0x32>
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	e7da      	b.n	8008bd4 <__sccl+0x28>
	...

08008c20 <__sflush_r>:
 8008c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c28:	0716      	lsls	r6, r2, #28
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	d454      	bmi.n	8008cda <__sflush_r+0xba>
 8008c30:	684b      	ldr	r3, [r1, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dc02      	bgt.n	8008c3c <__sflush_r+0x1c>
 8008c36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dd48      	ble.n	8008cce <__sflush_r+0xae>
 8008c3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c3e:	2e00      	cmp	r6, #0
 8008c40:	d045      	beq.n	8008cce <__sflush_r+0xae>
 8008c42:	2300      	movs	r3, #0
 8008c44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c48:	682f      	ldr	r7, [r5, #0]
 8008c4a:	6a21      	ldr	r1, [r4, #32]
 8008c4c:	602b      	str	r3, [r5, #0]
 8008c4e:	d030      	beq.n	8008cb2 <__sflush_r+0x92>
 8008c50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	0759      	lsls	r1, r3, #29
 8008c56:	d505      	bpl.n	8008c64 <__sflush_r+0x44>
 8008c58:	6863      	ldr	r3, [r4, #4]
 8008c5a:	1ad2      	subs	r2, r2, r3
 8008c5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c5e:	b10b      	cbz	r3, 8008c64 <__sflush_r+0x44>
 8008c60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c62:	1ad2      	subs	r2, r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c68:	6a21      	ldr	r1, [r4, #32]
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b0      	blx	r6
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	d106      	bne.n	8008c82 <__sflush_r+0x62>
 8008c74:	6829      	ldr	r1, [r5, #0]
 8008c76:	291d      	cmp	r1, #29
 8008c78:	d82b      	bhi.n	8008cd2 <__sflush_r+0xb2>
 8008c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8008d24 <__sflush_r+0x104>)
 8008c7c:	410a      	asrs	r2, r1
 8008c7e:	07d6      	lsls	r6, r2, #31
 8008c80:	d427      	bmi.n	8008cd2 <__sflush_r+0xb2>
 8008c82:	2200      	movs	r2, #0
 8008c84:	6062      	str	r2, [r4, #4]
 8008c86:	04d9      	lsls	r1, r3, #19
 8008c88:	6922      	ldr	r2, [r4, #16]
 8008c8a:	6022      	str	r2, [r4, #0]
 8008c8c:	d504      	bpl.n	8008c98 <__sflush_r+0x78>
 8008c8e:	1c42      	adds	r2, r0, #1
 8008c90:	d101      	bne.n	8008c96 <__sflush_r+0x76>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	b903      	cbnz	r3, 8008c98 <__sflush_r+0x78>
 8008c96:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c9a:	602f      	str	r7, [r5, #0]
 8008c9c:	b1b9      	cbz	r1, 8008cce <__sflush_r+0xae>
 8008c9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ca2:	4299      	cmp	r1, r3
 8008ca4:	d002      	beq.n	8008cac <__sflush_r+0x8c>
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7ff fb7a 	bl	80083a0 <_free_r>
 8008cac:	2300      	movs	r3, #0
 8008cae:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cb0:	e00d      	b.n	8008cce <__sflush_r+0xae>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b0      	blx	r6
 8008cb8:	4602      	mov	r2, r0
 8008cba:	1c50      	adds	r0, r2, #1
 8008cbc:	d1c9      	bne.n	8008c52 <__sflush_r+0x32>
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0c6      	beq.n	8008c52 <__sflush_r+0x32>
 8008cc4:	2b1d      	cmp	r3, #29
 8008cc6:	d001      	beq.n	8008ccc <__sflush_r+0xac>
 8008cc8:	2b16      	cmp	r3, #22
 8008cca:	d11e      	bne.n	8008d0a <__sflush_r+0xea>
 8008ccc:	602f      	str	r7, [r5, #0]
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e022      	b.n	8008d18 <__sflush_r+0xf8>
 8008cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd6:	b21b      	sxth	r3, r3
 8008cd8:	e01b      	b.n	8008d12 <__sflush_r+0xf2>
 8008cda:	690f      	ldr	r7, [r1, #16]
 8008cdc:	2f00      	cmp	r7, #0
 8008cde:	d0f6      	beq.n	8008cce <__sflush_r+0xae>
 8008ce0:	0793      	lsls	r3, r2, #30
 8008ce2:	680e      	ldr	r6, [r1, #0]
 8008ce4:	bf08      	it	eq
 8008ce6:	694b      	ldreq	r3, [r1, #20]
 8008ce8:	600f      	str	r7, [r1, #0]
 8008cea:	bf18      	it	ne
 8008cec:	2300      	movne	r3, #0
 8008cee:	eba6 0807 	sub.w	r8, r6, r7
 8008cf2:	608b      	str	r3, [r1, #8]
 8008cf4:	f1b8 0f00 	cmp.w	r8, #0
 8008cf8:	dde9      	ble.n	8008cce <__sflush_r+0xae>
 8008cfa:	6a21      	ldr	r1, [r4, #32]
 8008cfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cfe:	4643      	mov	r3, r8
 8008d00:	463a      	mov	r2, r7
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b0      	blx	r6
 8008d06:	2800      	cmp	r0, #0
 8008d08:	dc08      	bgt.n	8008d1c <__sflush_r+0xfc>
 8008d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1c:	4407      	add	r7, r0
 8008d1e:	eba8 0800 	sub.w	r8, r8, r0
 8008d22:	e7e7      	b.n	8008cf4 <__sflush_r+0xd4>
 8008d24:	dfbffffe 	.word	0xdfbffffe

08008d28 <_fflush_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	690b      	ldr	r3, [r1, #16]
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	b913      	cbnz	r3, 8008d38 <_fflush_r+0x10>
 8008d32:	2500      	movs	r5, #0
 8008d34:	4628      	mov	r0, r5
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	b118      	cbz	r0, 8008d42 <_fflush_r+0x1a>
 8008d3a:	6a03      	ldr	r3, [r0, #32]
 8008d3c:	b90b      	cbnz	r3, 8008d42 <_fflush_r+0x1a>
 8008d3e:	f7ff f999 	bl	8008074 <__sinit>
 8008d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0f3      	beq.n	8008d32 <_fflush_r+0xa>
 8008d4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d4c:	07d0      	lsls	r0, r2, #31
 8008d4e:	d404      	bmi.n	8008d5a <_fflush_r+0x32>
 8008d50:	0599      	lsls	r1, r3, #22
 8008d52:	d402      	bmi.n	8008d5a <_fflush_r+0x32>
 8008d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d56:	f7ff fb20 	bl	800839a <__retarget_lock_acquire_recursive>
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	f7ff ff5f 	bl	8008c20 <__sflush_r>
 8008d62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d64:	07da      	lsls	r2, r3, #31
 8008d66:	4605      	mov	r5, r0
 8008d68:	d4e4      	bmi.n	8008d34 <_fflush_r+0xc>
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	059b      	lsls	r3, r3, #22
 8008d6e:	d4e1      	bmi.n	8008d34 <_fflush_r+0xc>
 8008d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d72:	f7ff fb13 	bl	800839c <__retarget_lock_release_recursive>
 8008d76:	e7dd      	b.n	8008d34 <_fflush_r+0xc>

08008d78 <__malloc_lock>:
 8008d78:	4801      	ldr	r0, [pc, #4]	@ (8008d80 <__malloc_lock+0x8>)
 8008d7a:	f7ff bb0e 	b.w	800839a <__retarget_lock_acquire_recursive>
 8008d7e:	bf00      	nop
 8008d80:	20000544 	.word	0x20000544

08008d84 <__malloc_unlock>:
 8008d84:	4801      	ldr	r0, [pc, #4]	@ (8008d8c <__malloc_unlock+0x8>)
 8008d86:	f7ff bb09 	b.w	800839c <__retarget_lock_release_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	20000544 	.word	0x20000544

08008d90 <__submore>:
 8008d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d94:	460c      	mov	r4, r1
 8008d96:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008d98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d9c:	4299      	cmp	r1, r3
 8008d9e:	d11d      	bne.n	8008ddc <__submore+0x4c>
 8008da0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008da4:	f7ff fd34 	bl	8008810 <_malloc_r>
 8008da8:	b918      	cbnz	r0, 8008db2 <__submore+0x22>
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008db6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008db8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008dbc:	6360      	str	r0, [r4, #52]	@ 0x34
 8008dbe:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008dc2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008dc6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008dca:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008dce:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008dd2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e7e8      	b.n	8008dae <__submore+0x1e>
 8008ddc:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008dde:	0077      	lsls	r7, r6, #1
 8008de0:	463a      	mov	r2, r7
 8008de2:	f000 f80f 	bl	8008e04 <_realloc_r>
 8008de6:	4605      	mov	r5, r0
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d0de      	beq.n	8008daa <__submore+0x1a>
 8008dec:	eb00 0806 	add.w	r8, r0, r6
 8008df0:	4601      	mov	r1, r0
 8008df2:	4632      	mov	r2, r6
 8008df4:	4640      	mov	r0, r8
 8008df6:	f000 f9cb 	bl	8009190 <memcpy>
 8008dfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008dfe:	f8c4 8000 	str.w	r8, [r4]
 8008e02:	e7e9      	b.n	8008dd8 <__submore+0x48>

08008e04 <_realloc_r>:
 8008e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e08:	4680      	mov	r8, r0
 8008e0a:	4615      	mov	r5, r2
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	b921      	cbnz	r1, 8008e1a <_realloc_r+0x16>
 8008e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	4611      	mov	r1, r2
 8008e16:	f7ff bcfb 	b.w	8008810 <_malloc_r>
 8008e1a:	b92a      	cbnz	r2, 8008e28 <_realloc_r+0x24>
 8008e1c:	f7ff fac0 	bl	80083a0 <_free_r>
 8008e20:	2400      	movs	r4, #0
 8008e22:	4620      	mov	r0, r4
 8008e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e28:	f000 f9c0 	bl	80091ac <_malloc_usable_size_r>
 8008e2c:	4285      	cmp	r5, r0
 8008e2e:	4606      	mov	r6, r0
 8008e30:	d802      	bhi.n	8008e38 <_realloc_r+0x34>
 8008e32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e36:	d8f4      	bhi.n	8008e22 <_realloc_r+0x1e>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	f7ff fce8 	bl	8008810 <_malloc_r>
 8008e40:	4607      	mov	r7, r0
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d0ec      	beq.n	8008e20 <_realloc_r+0x1c>
 8008e46:	42b5      	cmp	r5, r6
 8008e48:	462a      	mov	r2, r5
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	bf28      	it	cs
 8008e4e:	4632      	movcs	r2, r6
 8008e50:	f000 f99e 	bl	8009190 <memcpy>
 8008e54:	4621      	mov	r1, r4
 8008e56:	4640      	mov	r0, r8
 8008e58:	f7ff faa2 	bl	80083a0 <_free_r>
 8008e5c:	463c      	mov	r4, r7
 8008e5e:	e7e0      	b.n	8008e22 <_realloc_r+0x1e>

08008e60 <_strtoul_l.constprop.0>:
 8008e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e64:	4e34      	ldr	r6, [pc, #208]	@ (8008f38 <_strtoul_l.constprop.0+0xd8>)
 8008e66:	4686      	mov	lr, r0
 8008e68:	460d      	mov	r5, r1
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e70:	5d37      	ldrb	r7, [r6, r4]
 8008e72:	f017 0708 	ands.w	r7, r7, #8
 8008e76:	d1f8      	bne.n	8008e6a <_strtoul_l.constprop.0+0xa>
 8008e78:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e7a:	d12f      	bne.n	8008edc <_strtoul_l.constprop.0+0x7c>
 8008e7c:	782c      	ldrb	r4, [r5, #0]
 8008e7e:	2701      	movs	r7, #1
 8008e80:	1c85      	adds	r5, r0, #2
 8008e82:	f033 0010 	bics.w	r0, r3, #16
 8008e86:	d109      	bne.n	8008e9c <_strtoul_l.constprop.0+0x3c>
 8008e88:	2c30      	cmp	r4, #48	@ 0x30
 8008e8a:	d12c      	bne.n	8008ee6 <_strtoul_l.constprop.0+0x86>
 8008e8c:	7828      	ldrb	r0, [r5, #0]
 8008e8e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008e92:	2858      	cmp	r0, #88	@ 0x58
 8008e94:	d127      	bne.n	8008ee6 <_strtoul_l.constprop.0+0x86>
 8008e96:	786c      	ldrb	r4, [r5, #1]
 8008e98:	2310      	movs	r3, #16
 8008e9a:	3502      	adds	r5, #2
 8008e9c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	fbb8 f8f3 	udiv	r8, r8, r3
 8008ea6:	fb03 f908 	mul.w	r9, r3, r8
 8008eaa:	ea6f 0909 	mvn.w	r9, r9
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008eb4:	f1bc 0f09 	cmp.w	ip, #9
 8008eb8:	d81c      	bhi.n	8008ef4 <_strtoul_l.constprop.0+0x94>
 8008eba:	4664      	mov	r4, ip
 8008ebc:	42a3      	cmp	r3, r4
 8008ebe:	dd2a      	ble.n	8008f16 <_strtoul_l.constprop.0+0xb6>
 8008ec0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8008ec4:	d007      	beq.n	8008ed6 <_strtoul_l.constprop.0+0x76>
 8008ec6:	4580      	cmp	r8, r0
 8008ec8:	d322      	bcc.n	8008f10 <_strtoul_l.constprop.0+0xb0>
 8008eca:	d101      	bne.n	8008ed0 <_strtoul_l.constprop.0+0x70>
 8008ecc:	45a1      	cmp	r9, r4
 8008ece:	db1f      	blt.n	8008f10 <_strtoul_l.constprop.0+0xb0>
 8008ed0:	fb00 4003 	mla	r0, r0, r3, r4
 8008ed4:	2601      	movs	r6, #1
 8008ed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eda:	e7e9      	b.n	8008eb0 <_strtoul_l.constprop.0+0x50>
 8008edc:	2c2b      	cmp	r4, #43	@ 0x2b
 8008ede:	bf04      	itt	eq
 8008ee0:	782c      	ldrbeq	r4, [r5, #0]
 8008ee2:	1c85      	addeq	r5, r0, #2
 8008ee4:	e7cd      	b.n	8008e82 <_strtoul_l.constprop.0+0x22>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1d8      	bne.n	8008e9c <_strtoul_l.constprop.0+0x3c>
 8008eea:	2c30      	cmp	r4, #48	@ 0x30
 8008eec:	bf0c      	ite	eq
 8008eee:	2308      	moveq	r3, #8
 8008ef0:	230a      	movne	r3, #10
 8008ef2:	e7d3      	b.n	8008e9c <_strtoul_l.constprop.0+0x3c>
 8008ef4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008ef8:	f1bc 0f19 	cmp.w	ip, #25
 8008efc:	d801      	bhi.n	8008f02 <_strtoul_l.constprop.0+0xa2>
 8008efe:	3c37      	subs	r4, #55	@ 0x37
 8008f00:	e7dc      	b.n	8008ebc <_strtoul_l.constprop.0+0x5c>
 8008f02:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008f06:	f1bc 0f19 	cmp.w	ip, #25
 8008f0a:	d804      	bhi.n	8008f16 <_strtoul_l.constprop.0+0xb6>
 8008f0c:	3c57      	subs	r4, #87	@ 0x57
 8008f0e:	e7d5      	b.n	8008ebc <_strtoul_l.constprop.0+0x5c>
 8008f10:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8008f14:	e7df      	b.n	8008ed6 <_strtoul_l.constprop.0+0x76>
 8008f16:	1c73      	adds	r3, r6, #1
 8008f18:	d106      	bne.n	8008f28 <_strtoul_l.constprop.0+0xc8>
 8008f1a:	2322      	movs	r3, #34	@ 0x22
 8008f1c:	f8ce 3000 	str.w	r3, [lr]
 8008f20:	4630      	mov	r0, r6
 8008f22:	b932      	cbnz	r2, 8008f32 <_strtoul_l.constprop.0+0xd2>
 8008f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f28:	b107      	cbz	r7, 8008f2c <_strtoul_l.constprop.0+0xcc>
 8008f2a:	4240      	negs	r0, r0
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	d0f9      	beq.n	8008f24 <_strtoul_l.constprop.0+0xc4>
 8008f30:	b106      	cbz	r6, 8008f34 <_strtoul_l.constprop.0+0xd4>
 8008f32:	1e69      	subs	r1, r5, #1
 8008f34:	6011      	str	r1, [r2, #0]
 8008f36:	e7f5      	b.n	8008f24 <_strtoul_l.constprop.0+0xc4>
 8008f38:	08009969 	.word	0x08009969

08008f3c <_strtoul_r>:
 8008f3c:	f7ff bf90 	b.w	8008e60 <_strtoul_l.constprop.0>

08008f40 <__swbuf_r>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	460e      	mov	r6, r1
 8008f44:	4614      	mov	r4, r2
 8008f46:	4605      	mov	r5, r0
 8008f48:	b118      	cbz	r0, 8008f52 <__swbuf_r+0x12>
 8008f4a:	6a03      	ldr	r3, [r0, #32]
 8008f4c:	b90b      	cbnz	r3, 8008f52 <__swbuf_r+0x12>
 8008f4e:	f7ff f891 	bl	8008074 <__sinit>
 8008f52:	69a3      	ldr	r3, [r4, #24]
 8008f54:	60a3      	str	r3, [r4, #8]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	071a      	lsls	r2, r3, #28
 8008f5a:	d501      	bpl.n	8008f60 <__swbuf_r+0x20>
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	b943      	cbnz	r3, 8008f72 <__swbuf_r+0x32>
 8008f60:	4621      	mov	r1, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 f82a 	bl	8008fbc <__swsetup_r>
 8008f68:	b118      	cbz	r0, 8008f72 <__swbuf_r+0x32>
 8008f6a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008f6e:	4638      	mov	r0, r7
 8008f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	6922      	ldr	r2, [r4, #16]
 8008f76:	1a98      	subs	r0, r3, r2
 8008f78:	6963      	ldr	r3, [r4, #20]
 8008f7a:	b2f6      	uxtb	r6, r6
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	4637      	mov	r7, r6
 8008f80:	dc05      	bgt.n	8008f8e <__swbuf_r+0x4e>
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f7ff fecf 	bl	8008d28 <_fflush_r>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1ed      	bne.n	8008f6a <__swbuf_r+0x2a>
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	60a3      	str	r3, [r4, #8]
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	6022      	str	r2, [r4, #0]
 8008f9a:	701e      	strb	r6, [r3, #0]
 8008f9c:	6962      	ldr	r2, [r4, #20]
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d004      	beq.n	8008fae <__swbuf_r+0x6e>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	07db      	lsls	r3, r3, #31
 8008fa8:	d5e1      	bpl.n	8008f6e <__swbuf_r+0x2e>
 8008faa:	2e0a      	cmp	r6, #10
 8008fac:	d1df      	bne.n	8008f6e <__swbuf_r+0x2e>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f7ff feb9 	bl	8008d28 <_fflush_r>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d0d9      	beq.n	8008f6e <__swbuf_r+0x2e>
 8008fba:	e7d6      	b.n	8008f6a <__swbuf_r+0x2a>

08008fbc <__swsetup_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4b29      	ldr	r3, [pc, #164]	@ (8009064 <__swsetup_r+0xa8>)
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	b118      	cbz	r0, 8008fd0 <__swsetup_r+0x14>
 8008fc8:	6a03      	ldr	r3, [r0, #32]
 8008fca:	b90b      	cbnz	r3, 8008fd0 <__swsetup_r+0x14>
 8008fcc:	f7ff f852 	bl	8008074 <__sinit>
 8008fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd4:	0719      	lsls	r1, r3, #28
 8008fd6:	d422      	bmi.n	800901e <__swsetup_r+0x62>
 8008fd8:	06da      	lsls	r2, r3, #27
 8008fda:	d407      	bmi.n	8008fec <__swsetup_r+0x30>
 8008fdc:	2209      	movs	r2, #9
 8008fde:	602a      	str	r2, [r5, #0]
 8008fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fea:	e033      	b.n	8009054 <__swsetup_r+0x98>
 8008fec:	0758      	lsls	r0, r3, #29
 8008fee:	d512      	bpl.n	8009016 <__swsetup_r+0x5a>
 8008ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ff2:	b141      	cbz	r1, 8009006 <__swsetup_r+0x4a>
 8008ff4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ff8:	4299      	cmp	r1, r3
 8008ffa:	d002      	beq.n	8009002 <__swsetup_r+0x46>
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	f7ff f9cf 	bl	80083a0 <_free_r>
 8009002:	2300      	movs	r3, #0
 8009004:	6363      	str	r3, [r4, #52]	@ 0x34
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800900c:	81a3      	strh	r3, [r4, #12]
 800900e:	2300      	movs	r3, #0
 8009010:	6063      	str	r3, [r4, #4]
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	f043 0308 	orr.w	r3, r3, #8
 800901c:	81a3      	strh	r3, [r4, #12]
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	b94b      	cbnz	r3, 8009036 <__swsetup_r+0x7a>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800902c:	d003      	beq.n	8009036 <__swsetup_r+0x7a>
 800902e:	4621      	mov	r1, r4
 8009030:	4628      	mov	r0, r5
 8009032:	f000 f83f 	bl	80090b4 <__smakebuf_r>
 8009036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903a:	f013 0201 	ands.w	r2, r3, #1
 800903e:	d00a      	beq.n	8009056 <__swsetup_r+0x9a>
 8009040:	2200      	movs	r2, #0
 8009042:	60a2      	str	r2, [r4, #8]
 8009044:	6962      	ldr	r2, [r4, #20]
 8009046:	4252      	negs	r2, r2
 8009048:	61a2      	str	r2, [r4, #24]
 800904a:	6922      	ldr	r2, [r4, #16]
 800904c:	b942      	cbnz	r2, 8009060 <__swsetup_r+0xa4>
 800904e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009052:	d1c5      	bne.n	8008fe0 <__swsetup_r+0x24>
 8009054:	bd38      	pop	{r3, r4, r5, pc}
 8009056:	0799      	lsls	r1, r3, #30
 8009058:	bf58      	it	pl
 800905a:	6962      	ldrpl	r2, [r4, #20]
 800905c:	60a2      	str	r2, [r4, #8]
 800905e:	e7f4      	b.n	800904a <__swsetup_r+0x8e>
 8009060:	2000      	movs	r0, #0
 8009062:	e7f7      	b.n	8009054 <__swsetup_r+0x98>
 8009064:	2000003c 	.word	0x2000003c

08009068 <__swhatbuf_r>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	460c      	mov	r4, r1
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	2900      	cmp	r1, #0
 8009072:	b096      	sub	sp, #88	@ 0x58
 8009074:	4615      	mov	r5, r2
 8009076:	461e      	mov	r6, r3
 8009078:	da0d      	bge.n	8009096 <__swhatbuf_r+0x2e>
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009080:	f04f 0100 	mov.w	r1, #0
 8009084:	bf14      	ite	ne
 8009086:	2340      	movne	r3, #64	@ 0x40
 8009088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800908c:	2000      	movs	r0, #0
 800908e:	6031      	str	r1, [r6, #0]
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	b016      	add	sp, #88	@ 0x58
 8009094:	bd70      	pop	{r4, r5, r6, pc}
 8009096:	466a      	mov	r2, sp
 8009098:	f000 f848 	bl	800912c <_fstat_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	dbec      	blt.n	800907a <__swhatbuf_r+0x12>
 80090a0:	9901      	ldr	r1, [sp, #4]
 80090a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090aa:	4259      	negs	r1, r3
 80090ac:	4159      	adcs	r1, r3
 80090ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090b2:	e7eb      	b.n	800908c <__swhatbuf_r+0x24>

080090b4 <__smakebuf_r>:
 80090b4:	898b      	ldrh	r3, [r1, #12]
 80090b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090b8:	079d      	lsls	r5, r3, #30
 80090ba:	4606      	mov	r6, r0
 80090bc:	460c      	mov	r4, r1
 80090be:	d507      	bpl.n	80090d0 <__smakebuf_r+0x1c>
 80090c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	2301      	movs	r3, #1
 80090ca:	6163      	str	r3, [r4, #20]
 80090cc:	b003      	add	sp, #12
 80090ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d0:	ab01      	add	r3, sp, #4
 80090d2:	466a      	mov	r2, sp
 80090d4:	f7ff ffc8 	bl	8009068 <__swhatbuf_r>
 80090d8:	9f00      	ldr	r7, [sp, #0]
 80090da:	4605      	mov	r5, r0
 80090dc:	4639      	mov	r1, r7
 80090de:	4630      	mov	r0, r6
 80090e0:	f7ff fb96 	bl	8008810 <_malloc_r>
 80090e4:	b948      	cbnz	r0, 80090fa <__smakebuf_r+0x46>
 80090e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ea:	059a      	lsls	r2, r3, #22
 80090ec:	d4ee      	bmi.n	80090cc <__smakebuf_r+0x18>
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	f043 0302 	orr.w	r3, r3, #2
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	e7e2      	b.n	80090c0 <__smakebuf_r+0xc>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	6020      	str	r0, [r4, #0]
 80090fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800910a:	b15b      	cbz	r3, 8009124 <__smakebuf_r+0x70>
 800910c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009110:	4630      	mov	r0, r6
 8009112:	f000 f81d 	bl	8009150 <_isatty_r>
 8009116:	b128      	cbz	r0, 8009124 <__smakebuf_r+0x70>
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	f023 0303 	bic.w	r3, r3, #3
 800911e:	f043 0301 	orr.w	r3, r3, #1
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	431d      	orrs	r5, r3
 8009128:	81a5      	strh	r5, [r4, #12]
 800912a:	e7cf      	b.n	80090cc <__smakebuf_r+0x18>

0800912c <_fstat_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	@ (800914c <_fstat_r+0x20>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	4611      	mov	r1, r2
 8009138:	602b      	str	r3, [r5, #0]
 800913a:	f7fa fb19 	bl	8003770 <_fstat>
 800913e:	1c43      	adds	r3, r0, #1
 8009140:	d102      	bne.n	8009148 <_fstat_r+0x1c>
 8009142:	682b      	ldr	r3, [r5, #0]
 8009144:	b103      	cbz	r3, 8009148 <_fstat_r+0x1c>
 8009146:	6023      	str	r3, [r4, #0]
 8009148:	bd38      	pop	{r3, r4, r5, pc}
 800914a:	bf00      	nop
 800914c:	20000540 	.word	0x20000540

08009150 <_isatty_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d06      	ldr	r5, [pc, #24]	@ (800916c <_isatty_r+0x1c>)
 8009154:	2300      	movs	r3, #0
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	f7fa fb18 	bl	8003790 <_isatty>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_isatty_r+0x1a>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_isatty_r+0x1a>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	20000540 	.word	0x20000540

08009170 <_sbrk_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d06      	ldr	r5, [pc, #24]	@ (800918c <_sbrk_r+0x1c>)
 8009174:	2300      	movs	r3, #0
 8009176:	4604      	mov	r4, r0
 8009178:	4608      	mov	r0, r1
 800917a:	602b      	str	r3, [r5, #0]
 800917c:	f7fa fb20 	bl	80037c0 <_sbrk>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_sbrk_r+0x1a>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	b103      	cbz	r3, 800918a <_sbrk_r+0x1a>
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	20000540 	.word	0x20000540

08009190 <memcpy>:
 8009190:	440a      	add	r2, r1
 8009192:	4291      	cmp	r1, r2
 8009194:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009198:	d100      	bne.n	800919c <memcpy+0xc>
 800919a:	4770      	bx	lr
 800919c:	b510      	push	{r4, lr}
 800919e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a6:	4291      	cmp	r1, r2
 80091a8:	d1f9      	bne.n	800919e <memcpy+0xe>
 80091aa:	bd10      	pop	{r4, pc}

080091ac <_malloc_usable_size_r>:
 80091ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b0:	1f18      	subs	r0, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bfbc      	itt	lt
 80091b6:	580b      	ldrlt	r3, [r1, r0]
 80091b8:	18c0      	addlt	r0, r0, r3
 80091ba:	4770      	bx	lr

080091bc <atan2>:
 80091bc:	f000 b800 	b.w	80091c0 <__ieee754_atan2>

080091c0 <__ieee754_atan2>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	ec57 6b11 	vmov	r6, r7, d1
 80091c8:	4273      	negs	r3, r6
 80091ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009348 <__ieee754_atan2+0x188>
 80091ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80091d2:	4333      	orrs	r3, r6
 80091d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80091d8:	4543      	cmp	r3, r8
 80091da:	ec51 0b10 	vmov	r0, r1, d0
 80091de:	4635      	mov	r5, r6
 80091e0:	d809      	bhi.n	80091f6 <__ieee754_atan2+0x36>
 80091e2:	4244      	negs	r4, r0
 80091e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80091e8:	4304      	orrs	r4, r0
 80091ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80091ee:	4544      	cmp	r4, r8
 80091f0:	468e      	mov	lr, r1
 80091f2:	4681      	mov	r9, r0
 80091f4:	d907      	bls.n	8009206 <__ieee754_atan2+0x46>
 80091f6:	4632      	mov	r2, r6
 80091f8:	463b      	mov	r3, r7
 80091fa:	f7f7 f86f 	bl	80002dc <__adddf3>
 80091fe:	ec41 0b10 	vmov	d0, r0, r1
 8009202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009206:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800920a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800920e:	4334      	orrs	r4, r6
 8009210:	d103      	bne.n	800921a <__ieee754_atan2+0x5a>
 8009212:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009216:	f000 b8c7 	b.w	80093a8 <atan>
 800921a:	17bc      	asrs	r4, r7, #30
 800921c:	f004 0402 	and.w	r4, r4, #2
 8009220:	ea53 0909 	orrs.w	r9, r3, r9
 8009224:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009228:	d107      	bne.n	800923a <__ieee754_atan2+0x7a>
 800922a:	2c02      	cmp	r4, #2
 800922c:	d05f      	beq.n	80092ee <__ieee754_atan2+0x12e>
 800922e:	2c03      	cmp	r4, #3
 8009230:	d1e5      	bne.n	80091fe <__ieee754_atan2+0x3e>
 8009232:	a141      	add	r1, pc, #260	@ (adr r1, 8009338 <__ieee754_atan2+0x178>)
 8009234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009238:	e7e1      	b.n	80091fe <__ieee754_atan2+0x3e>
 800923a:	4315      	orrs	r5, r2
 800923c:	d106      	bne.n	800924c <__ieee754_atan2+0x8c>
 800923e:	f1be 0f00 	cmp.w	lr, #0
 8009242:	da5f      	bge.n	8009304 <__ieee754_atan2+0x144>
 8009244:	a13e      	add	r1, pc, #248	@ (adr r1, 8009340 <__ieee754_atan2+0x180>)
 8009246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924a:	e7d8      	b.n	80091fe <__ieee754_atan2+0x3e>
 800924c:	4542      	cmp	r2, r8
 800924e:	d10f      	bne.n	8009270 <__ieee754_atan2+0xb0>
 8009250:	4293      	cmp	r3, r2
 8009252:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8009256:	d107      	bne.n	8009268 <__ieee754_atan2+0xa8>
 8009258:	2c02      	cmp	r4, #2
 800925a:	d84c      	bhi.n	80092f6 <__ieee754_atan2+0x136>
 800925c:	4b34      	ldr	r3, [pc, #208]	@ (8009330 <__ieee754_atan2+0x170>)
 800925e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009266:	e7ca      	b.n	80091fe <__ieee754_atan2+0x3e>
 8009268:	2c02      	cmp	r4, #2
 800926a:	d848      	bhi.n	80092fe <__ieee754_atan2+0x13e>
 800926c:	4b31      	ldr	r3, [pc, #196]	@ (8009334 <__ieee754_atan2+0x174>)
 800926e:	e7f6      	b.n	800925e <__ieee754_atan2+0x9e>
 8009270:	4543      	cmp	r3, r8
 8009272:	d0e4      	beq.n	800923e <__ieee754_atan2+0x7e>
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800927a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800927e:	da1e      	bge.n	80092be <__ieee754_atan2+0xfe>
 8009280:	2f00      	cmp	r7, #0
 8009282:	da01      	bge.n	8009288 <__ieee754_atan2+0xc8>
 8009284:	323c      	adds	r2, #60	@ 0x3c
 8009286:	db1e      	blt.n	80092c6 <__ieee754_atan2+0x106>
 8009288:	4632      	mov	r2, r6
 800928a:	463b      	mov	r3, r7
 800928c:	f7f7 fb06 	bl	800089c <__aeabi_ddiv>
 8009290:	ec41 0b10 	vmov	d0, r0, r1
 8009294:	f000 fa20 	bl	80096d8 <fabs>
 8009298:	f000 f886 	bl	80093a8 <atan>
 800929c:	ec51 0b10 	vmov	r0, r1, d0
 80092a0:	2c01      	cmp	r4, #1
 80092a2:	d013      	beq.n	80092cc <__ieee754_atan2+0x10c>
 80092a4:	2c02      	cmp	r4, #2
 80092a6:	d015      	beq.n	80092d4 <__ieee754_atan2+0x114>
 80092a8:	2c00      	cmp	r4, #0
 80092aa:	d0a8      	beq.n	80091fe <__ieee754_atan2+0x3e>
 80092ac:	a318      	add	r3, pc, #96	@ (adr r3, 8009310 <__ieee754_atan2+0x150>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	f7f7 f811 	bl	80002d8 <__aeabi_dsub>
 80092b6:	a318      	add	r3, pc, #96	@ (adr r3, 8009318 <__ieee754_atan2+0x158>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	e014      	b.n	80092e8 <__ieee754_atan2+0x128>
 80092be:	a118      	add	r1, pc, #96	@ (adr r1, 8009320 <__ieee754_atan2+0x160>)
 80092c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c4:	e7ec      	b.n	80092a0 <__ieee754_atan2+0xe0>
 80092c6:	2000      	movs	r0, #0
 80092c8:	2100      	movs	r1, #0
 80092ca:	e7e9      	b.n	80092a0 <__ieee754_atan2+0xe0>
 80092cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092d0:	4619      	mov	r1, r3
 80092d2:	e794      	b.n	80091fe <__ieee754_atan2+0x3e>
 80092d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009310 <__ieee754_atan2+0x150>)
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f7f6 fffd 	bl	80002d8 <__aeabi_dsub>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	a10d      	add	r1, pc, #52	@ (adr r1, 8009318 <__ieee754_atan2+0x158>)
 80092e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092e8:	f7f6 fff6 	bl	80002d8 <__aeabi_dsub>
 80092ec:	e787      	b.n	80091fe <__ieee754_atan2+0x3e>
 80092ee:	a10a      	add	r1, pc, #40	@ (adr r1, 8009318 <__ieee754_atan2+0x158>)
 80092f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f4:	e783      	b.n	80091fe <__ieee754_atan2+0x3e>
 80092f6:	a10c      	add	r1, pc, #48	@ (adr r1, 8009328 <__ieee754_atan2+0x168>)
 80092f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fc:	e77f      	b.n	80091fe <__ieee754_atan2+0x3e>
 80092fe:	2000      	movs	r0, #0
 8009300:	2100      	movs	r1, #0
 8009302:	e77c      	b.n	80091fe <__ieee754_atan2+0x3e>
 8009304:	a106      	add	r1, pc, #24	@ (adr r1, 8009320 <__ieee754_atan2+0x160>)
 8009306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800930a:	e778      	b.n	80091fe <__ieee754_atan2+0x3e>
 800930c:	f3af 8000 	nop.w
 8009310:	33145c07 	.word	0x33145c07
 8009314:	3ca1a626 	.word	0x3ca1a626
 8009318:	54442d18 	.word	0x54442d18
 800931c:	400921fb 	.word	0x400921fb
 8009320:	54442d18 	.word	0x54442d18
 8009324:	3ff921fb 	.word	0x3ff921fb
 8009328:	54442d18 	.word	0x54442d18
 800932c:	3fe921fb 	.word	0x3fe921fb
 8009330:	08009aa0 	.word	0x08009aa0
 8009334:	08009a88 	.word	0x08009a88
 8009338:	54442d18 	.word	0x54442d18
 800933c:	c00921fb 	.word	0xc00921fb
 8009340:	54442d18 	.word	0x54442d18
 8009344:	bff921fb 	.word	0xbff921fb
 8009348:	7ff00000 	.word	0x7ff00000

0800934c <sqrt>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	ed2d 8b02 	vpush	{d8}
 8009352:	ec55 4b10 	vmov	r4, r5, d0
 8009356:	f000 f9c7 	bl	80096e8 <__ieee754_sqrt>
 800935a:	4622      	mov	r2, r4
 800935c:	462b      	mov	r3, r5
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	eeb0 8a40 	vmov.f32	s16, s0
 8009366:	eef0 8a60 	vmov.f32	s17, s1
 800936a:	f7f7 fc07 	bl	8000b7c <__aeabi_dcmpun>
 800936e:	b990      	cbnz	r0, 8009396 <sqrt+0x4a>
 8009370:	2200      	movs	r2, #0
 8009372:	2300      	movs	r3, #0
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f7 fbd8 	bl	8000b2c <__aeabi_dcmplt>
 800937c:	b158      	cbz	r0, 8009396 <sqrt+0x4a>
 800937e:	f7fe ffe1 	bl	8008344 <__errno>
 8009382:	2321      	movs	r3, #33	@ 0x21
 8009384:	6003      	str	r3, [r0, #0]
 8009386:	2200      	movs	r2, #0
 8009388:	2300      	movs	r3, #0
 800938a:	4610      	mov	r0, r2
 800938c:	4619      	mov	r1, r3
 800938e:	f7f7 fa85 	bl	800089c <__aeabi_ddiv>
 8009392:	ec41 0b18 	vmov	d8, r0, r1
 8009396:	eeb0 0a48 	vmov.f32	s0, s16
 800939a:	eef0 0a68 	vmov.f32	s1, s17
 800939e:	ecbd 8b02 	vpop	{d8}
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	0000      	movs	r0, r0
	...

080093a8 <atan>:
 80093a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	ec55 4b10 	vmov	r4, r5, d0
 80093b0:	4bbf      	ldr	r3, [pc, #764]	@ (80096b0 <atan+0x308>)
 80093b2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80093b6:	429e      	cmp	r6, r3
 80093b8:	46ab      	mov	fp, r5
 80093ba:	d918      	bls.n	80093ee <atan+0x46>
 80093bc:	4bbd      	ldr	r3, [pc, #756]	@ (80096b4 <atan+0x30c>)
 80093be:	429e      	cmp	r6, r3
 80093c0:	d801      	bhi.n	80093c6 <atan+0x1e>
 80093c2:	d109      	bne.n	80093d8 <atan+0x30>
 80093c4:	b144      	cbz	r4, 80093d8 <atan+0x30>
 80093c6:	4622      	mov	r2, r4
 80093c8:	462b      	mov	r3, r5
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	f7f6 ff85 	bl	80002dc <__adddf3>
 80093d2:	4604      	mov	r4, r0
 80093d4:	460d      	mov	r5, r1
 80093d6:	e006      	b.n	80093e6 <atan+0x3e>
 80093d8:	f1bb 0f00 	cmp.w	fp, #0
 80093dc:	f340 812b 	ble.w	8009636 <atan+0x28e>
 80093e0:	a597      	add	r5, pc, #604	@ (adr r5, 8009640 <atan+0x298>)
 80093e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093e6:	ec45 4b10 	vmov	d0, r4, r5
 80093ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ee:	4bb2      	ldr	r3, [pc, #712]	@ (80096b8 <atan+0x310>)
 80093f0:	429e      	cmp	r6, r3
 80093f2:	d813      	bhi.n	800941c <atan+0x74>
 80093f4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80093f8:	429e      	cmp	r6, r3
 80093fa:	d80c      	bhi.n	8009416 <atan+0x6e>
 80093fc:	a392      	add	r3, pc, #584	@ (adr r3, 8009648 <atan+0x2a0>)
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	4620      	mov	r0, r4
 8009404:	4629      	mov	r1, r5
 8009406:	f7f6 ff69 	bl	80002dc <__adddf3>
 800940a:	4bac      	ldr	r3, [pc, #688]	@ (80096bc <atan+0x314>)
 800940c:	2200      	movs	r2, #0
 800940e:	f7f7 fbab 	bl	8000b68 <__aeabi_dcmpgt>
 8009412:	2800      	cmp	r0, #0
 8009414:	d1e7      	bne.n	80093e6 <atan+0x3e>
 8009416:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800941a:	e029      	b.n	8009470 <atan+0xc8>
 800941c:	f000 f95c 	bl	80096d8 <fabs>
 8009420:	4ba7      	ldr	r3, [pc, #668]	@ (80096c0 <atan+0x318>)
 8009422:	429e      	cmp	r6, r3
 8009424:	ec55 4b10 	vmov	r4, r5, d0
 8009428:	f200 80bc 	bhi.w	80095a4 <atan+0x1fc>
 800942c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009430:	429e      	cmp	r6, r3
 8009432:	f200 809e 	bhi.w	8009572 <atan+0x1ca>
 8009436:	4622      	mov	r2, r4
 8009438:	462b      	mov	r3, r5
 800943a:	4620      	mov	r0, r4
 800943c:	4629      	mov	r1, r5
 800943e:	f7f6 ff4d 	bl	80002dc <__adddf3>
 8009442:	4b9e      	ldr	r3, [pc, #632]	@ (80096bc <atan+0x314>)
 8009444:	2200      	movs	r2, #0
 8009446:	f7f6 ff47 	bl	80002d8 <__aeabi_dsub>
 800944a:	2200      	movs	r2, #0
 800944c:	4606      	mov	r6, r0
 800944e:	460f      	mov	r7, r1
 8009450:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	f7f6 ff40 	bl	80002dc <__adddf3>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 fa1a 	bl	800089c <__aeabi_ddiv>
 8009468:	f04f 0a00 	mov.w	sl, #0
 800946c:	4604      	mov	r4, r0
 800946e:	460d      	mov	r5, r1
 8009470:	4622      	mov	r2, r4
 8009472:	462b      	mov	r3, r5
 8009474:	4620      	mov	r0, r4
 8009476:	4629      	mov	r1, r5
 8009478:	f7f7 f8e6 	bl	8000648 <__aeabi_dmul>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4680      	mov	r8, r0
 8009482:	4689      	mov	r9, r1
 8009484:	f7f7 f8e0 	bl	8000648 <__aeabi_dmul>
 8009488:	a371      	add	r3, pc, #452	@ (adr r3, 8009650 <atan+0x2a8>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	f7f7 f8d9 	bl	8000648 <__aeabi_dmul>
 8009496:	a370      	add	r3, pc, #448	@ (adr r3, 8009658 <atan+0x2b0>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f6 ff1e 	bl	80002dc <__adddf3>
 80094a0:	4632      	mov	r2, r6
 80094a2:	463b      	mov	r3, r7
 80094a4:	f7f7 f8d0 	bl	8000648 <__aeabi_dmul>
 80094a8:	a36d      	add	r3, pc, #436	@ (adr r3, 8009660 <atan+0x2b8>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f7f6 ff15 	bl	80002dc <__adddf3>
 80094b2:	4632      	mov	r2, r6
 80094b4:	463b      	mov	r3, r7
 80094b6:	f7f7 f8c7 	bl	8000648 <__aeabi_dmul>
 80094ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8009668 <atan+0x2c0>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f6 ff0c 	bl	80002dc <__adddf3>
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	f7f7 f8be 	bl	8000648 <__aeabi_dmul>
 80094cc:	a368      	add	r3, pc, #416	@ (adr r3, 8009670 <atan+0x2c8>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f7f6 ff03 	bl	80002dc <__adddf3>
 80094d6:	4632      	mov	r2, r6
 80094d8:	463b      	mov	r3, r7
 80094da:	f7f7 f8b5 	bl	8000648 <__aeabi_dmul>
 80094de:	a366      	add	r3, pc, #408	@ (adr r3, 8009678 <atan+0x2d0>)
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	f7f6 fefa 	bl	80002dc <__adddf3>
 80094e8:	4642      	mov	r2, r8
 80094ea:	464b      	mov	r3, r9
 80094ec:	f7f7 f8ac 	bl	8000648 <__aeabi_dmul>
 80094f0:	a363      	add	r3, pc, #396	@ (adr r3, 8009680 <atan+0x2d8>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	4680      	mov	r8, r0
 80094f8:	4689      	mov	r9, r1
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f7 f8a3 	bl	8000648 <__aeabi_dmul>
 8009502:	a361      	add	r3, pc, #388	@ (adr r3, 8009688 <atan+0x2e0>)
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	f7f6 fee6 	bl	80002d8 <__aeabi_dsub>
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	f7f7 f89a 	bl	8000648 <__aeabi_dmul>
 8009514:	a35e      	add	r3, pc, #376	@ (adr r3, 8009690 <atan+0x2e8>)
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f7f6 fedd 	bl	80002d8 <__aeabi_dsub>
 800951e:	4632      	mov	r2, r6
 8009520:	463b      	mov	r3, r7
 8009522:	f7f7 f891 	bl	8000648 <__aeabi_dmul>
 8009526:	a35c      	add	r3, pc, #368	@ (adr r3, 8009698 <atan+0x2f0>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f7f6 fed4 	bl	80002d8 <__aeabi_dsub>
 8009530:	4632      	mov	r2, r6
 8009532:	463b      	mov	r3, r7
 8009534:	f7f7 f888 	bl	8000648 <__aeabi_dmul>
 8009538:	a359      	add	r3, pc, #356	@ (adr r3, 80096a0 <atan+0x2f8>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f6 fecb 	bl	80002d8 <__aeabi_dsub>
 8009542:	4632      	mov	r2, r6
 8009544:	463b      	mov	r3, r7
 8009546:	f7f7 f87f 	bl	8000648 <__aeabi_dmul>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4640      	mov	r0, r8
 8009550:	4649      	mov	r1, r9
 8009552:	f7f6 fec3 	bl	80002dc <__adddf3>
 8009556:	4622      	mov	r2, r4
 8009558:	462b      	mov	r3, r5
 800955a:	f7f7 f875 	bl	8000648 <__aeabi_dmul>
 800955e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	d148      	bne.n	80095fa <atan+0x252>
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f6 feb4 	bl	80002d8 <__aeabi_dsub>
 8009570:	e72f      	b.n	80093d2 <atan+0x2a>
 8009572:	4b52      	ldr	r3, [pc, #328]	@ (80096bc <atan+0x314>)
 8009574:	2200      	movs	r2, #0
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	f7f6 fead 	bl	80002d8 <__aeabi_dsub>
 800957e:	4b4f      	ldr	r3, [pc, #316]	@ (80096bc <atan+0x314>)
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	2200      	movs	r2, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f6 fea7 	bl	80002dc <__adddf3>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f7 f981 	bl	800089c <__aeabi_ddiv>
 800959a:	f04f 0a01 	mov.w	sl, #1
 800959e:	4604      	mov	r4, r0
 80095a0:	460d      	mov	r5, r1
 80095a2:	e765      	b.n	8009470 <atan+0xc8>
 80095a4:	4b47      	ldr	r3, [pc, #284]	@ (80096c4 <atan+0x31c>)
 80095a6:	429e      	cmp	r6, r3
 80095a8:	d21c      	bcs.n	80095e4 <atan+0x23c>
 80095aa:	4b47      	ldr	r3, [pc, #284]	@ (80096c8 <atan+0x320>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	4620      	mov	r0, r4
 80095b0:	4629      	mov	r1, r5
 80095b2:	f7f6 fe91 	bl	80002d8 <__aeabi_dsub>
 80095b6:	4b44      	ldr	r3, [pc, #272]	@ (80096c8 <atan+0x320>)
 80095b8:	4606      	mov	r6, r0
 80095ba:	460f      	mov	r7, r1
 80095bc:	2200      	movs	r2, #0
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f7 f841 	bl	8000648 <__aeabi_dmul>
 80095c6:	4b3d      	ldr	r3, [pc, #244]	@ (80096bc <atan+0x314>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	f7f6 fe87 	bl	80002dc <__adddf3>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4630      	mov	r0, r6
 80095d4:	4639      	mov	r1, r7
 80095d6:	f7f7 f961 	bl	800089c <__aeabi_ddiv>
 80095da:	f04f 0a02 	mov.w	sl, #2
 80095de:	4604      	mov	r4, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	e745      	b.n	8009470 <atan+0xc8>
 80095e4:	4622      	mov	r2, r4
 80095e6:	462b      	mov	r3, r5
 80095e8:	4938      	ldr	r1, [pc, #224]	@ (80096cc <atan+0x324>)
 80095ea:	2000      	movs	r0, #0
 80095ec:	f7f7 f956 	bl	800089c <__aeabi_ddiv>
 80095f0:	f04f 0a03 	mov.w	sl, #3
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	e73a      	b.n	8009470 <atan+0xc8>
 80095fa:	4b35      	ldr	r3, [pc, #212]	@ (80096d0 <atan+0x328>)
 80095fc:	4e35      	ldr	r6, [pc, #212]	@ (80096d4 <atan+0x32c>)
 80095fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fe67 	bl	80002d8 <__aeabi_dsub>
 800960a:	4622      	mov	r2, r4
 800960c:	462b      	mov	r3, r5
 800960e:	f7f6 fe63 	bl	80002d8 <__aeabi_dsub>
 8009612:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800961e:	f7f6 fe5b 	bl	80002d8 <__aeabi_dsub>
 8009622:	f1bb 0f00 	cmp.w	fp, #0
 8009626:	4604      	mov	r4, r0
 8009628:	460d      	mov	r5, r1
 800962a:	f6bf aedc 	bge.w	80093e6 <atan+0x3e>
 800962e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009632:	461d      	mov	r5, r3
 8009634:	e6d7      	b.n	80093e6 <atan+0x3e>
 8009636:	a51c      	add	r5, pc, #112	@ (adr r5, 80096a8 <atan+0x300>)
 8009638:	e9d5 4500 	ldrd	r4, r5, [r5]
 800963c:	e6d3      	b.n	80093e6 <atan+0x3e>
 800963e:	bf00      	nop
 8009640:	54442d18 	.word	0x54442d18
 8009644:	3ff921fb 	.word	0x3ff921fb
 8009648:	8800759c 	.word	0x8800759c
 800964c:	7e37e43c 	.word	0x7e37e43c
 8009650:	e322da11 	.word	0xe322da11
 8009654:	3f90ad3a 	.word	0x3f90ad3a
 8009658:	24760deb 	.word	0x24760deb
 800965c:	3fa97b4b 	.word	0x3fa97b4b
 8009660:	a0d03d51 	.word	0xa0d03d51
 8009664:	3fb10d66 	.word	0x3fb10d66
 8009668:	c54c206e 	.word	0xc54c206e
 800966c:	3fb745cd 	.word	0x3fb745cd
 8009670:	920083ff 	.word	0x920083ff
 8009674:	3fc24924 	.word	0x3fc24924
 8009678:	5555550d 	.word	0x5555550d
 800967c:	3fd55555 	.word	0x3fd55555
 8009680:	2c6a6c2f 	.word	0x2c6a6c2f
 8009684:	bfa2b444 	.word	0xbfa2b444
 8009688:	52defd9a 	.word	0x52defd9a
 800968c:	3fadde2d 	.word	0x3fadde2d
 8009690:	af749a6d 	.word	0xaf749a6d
 8009694:	3fb3b0f2 	.word	0x3fb3b0f2
 8009698:	fe231671 	.word	0xfe231671
 800969c:	3fbc71c6 	.word	0x3fbc71c6
 80096a0:	9998ebc4 	.word	0x9998ebc4
 80096a4:	3fc99999 	.word	0x3fc99999
 80096a8:	54442d18 	.word	0x54442d18
 80096ac:	bff921fb 	.word	0xbff921fb
 80096b0:	440fffff 	.word	0x440fffff
 80096b4:	7ff00000 	.word	0x7ff00000
 80096b8:	3fdbffff 	.word	0x3fdbffff
 80096bc:	3ff00000 	.word	0x3ff00000
 80096c0:	3ff2ffff 	.word	0x3ff2ffff
 80096c4:	40038000 	.word	0x40038000
 80096c8:	3ff80000 	.word	0x3ff80000
 80096cc:	bff00000 	.word	0xbff00000
 80096d0:	08009ab8 	.word	0x08009ab8
 80096d4:	08009ad8 	.word	0x08009ad8

080096d8 <fabs>:
 80096d8:	ec51 0b10 	vmov	r0, r1, d0
 80096dc:	4602      	mov	r2, r0
 80096de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80096e2:	ec43 2b10 	vmov	d0, r2, r3
 80096e6:	4770      	bx	lr

080096e8 <__ieee754_sqrt>:
 80096e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	4a68      	ldr	r2, [pc, #416]	@ (8009890 <__ieee754_sqrt+0x1a8>)
 80096ee:	ec55 4b10 	vmov	r4, r5, d0
 80096f2:	43aa      	bics	r2, r5
 80096f4:	462b      	mov	r3, r5
 80096f6:	4621      	mov	r1, r4
 80096f8:	d110      	bne.n	800971c <__ieee754_sqrt+0x34>
 80096fa:	4622      	mov	r2, r4
 80096fc:	4620      	mov	r0, r4
 80096fe:	4629      	mov	r1, r5
 8009700:	f7f6 ffa2 	bl	8000648 <__aeabi_dmul>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4620      	mov	r0, r4
 800970a:	4629      	mov	r1, r5
 800970c:	f7f6 fde6 	bl	80002dc <__adddf3>
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	ec45 4b10 	vmov	d0, r4, r5
 8009718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971c:	2d00      	cmp	r5, #0
 800971e:	dc0e      	bgt.n	800973e <__ieee754_sqrt+0x56>
 8009720:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009724:	4322      	orrs	r2, r4
 8009726:	d0f5      	beq.n	8009714 <__ieee754_sqrt+0x2c>
 8009728:	b19d      	cbz	r5, 8009752 <__ieee754_sqrt+0x6a>
 800972a:	4622      	mov	r2, r4
 800972c:	4620      	mov	r0, r4
 800972e:	4629      	mov	r1, r5
 8009730:	f7f6 fdd2 	bl	80002d8 <__aeabi_dsub>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	f7f7 f8b0 	bl	800089c <__aeabi_ddiv>
 800973c:	e7e8      	b.n	8009710 <__ieee754_sqrt+0x28>
 800973e:	152a      	asrs	r2, r5, #20
 8009740:	d115      	bne.n	800976e <__ieee754_sqrt+0x86>
 8009742:	2000      	movs	r0, #0
 8009744:	e009      	b.n	800975a <__ieee754_sqrt+0x72>
 8009746:	0acb      	lsrs	r3, r1, #11
 8009748:	3a15      	subs	r2, #21
 800974a:	0549      	lsls	r1, r1, #21
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0fa      	beq.n	8009746 <__ieee754_sqrt+0x5e>
 8009750:	e7f7      	b.n	8009742 <__ieee754_sqrt+0x5a>
 8009752:	462a      	mov	r2, r5
 8009754:	e7fa      	b.n	800974c <__ieee754_sqrt+0x64>
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	3001      	adds	r0, #1
 800975a:	02dc      	lsls	r4, r3, #11
 800975c:	d5fb      	bpl.n	8009756 <__ieee754_sqrt+0x6e>
 800975e:	1e44      	subs	r4, r0, #1
 8009760:	1b12      	subs	r2, r2, r4
 8009762:	f1c0 0420 	rsb	r4, r0, #32
 8009766:	fa21 f404 	lsr.w	r4, r1, r4
 800976a:	4323      	orrs	r3, r4
 800976c:	4081      	lsls	r1, r0
 800976e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009772:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800977a:	07d2      	lsls	r2, r2, #31
 800977c:	bf5c      	itt	pl
 800977e:	005b      	lslpl	r3, r3, #1
 8009780:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009784:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009788:	bf58      	it	pl
 800978a:	0049      	lslpl	r1, r1, #1
 800978c:	2600      	movs	r6, #0
 800978e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009792:	106d      	asrs	r5, r5, #1
 8009794:	0049      	lsls	r1, r1, #1
 8009796:	2016      	movs	r0, #22
 8009798:	4632      	mov	r2, r6
 800979a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800979e:	1917      	adds	r7, r2, r4
 80097a0:	429f      	cmp	r7, r3
 80097a2:	bfde      	ittt	le
 80097a4:	193a      	addle	r2, r7, r4
 80097a6:	1bdb      	suble	r3, r3, r7
 80097a8:	1936      	addle	r6, r6, r4
 80097aa:	0fcf      	lsrs	r7, r1, #31
 80097ac:	3801      	subs	r0, #1
 80097ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80097b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80097b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80097ba:	d1f0      	bne.n	800979e <__ieee754_sqrt+0xb6>
 80097bc:	4604      	mov	r4, r0
 80097be:	2720      	movs	r7, #32
 80097c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80097c4:	429a      	cmp	r2, r3
 80097c6:	eb00 0e0c 	add.w	lr, r0, ip
 80097ca:	db02      	blt.n	80097d2 <__ieee754_sqrt+0xea>
 80097cc:	d113      	bne.n	80097f6 <__ieee754_sqrt+0x10e>
 80097ce:	458e      	cmp	lr, r1
 80097d0:	d811      	bhi.n	80097f6 <__ieee754_sqrt+0x10e>
 80097d2:	f1be 0f00 	cmp.w	lr, #0
 80097d6:	eb0e 000c 	add.w	r0, lr, ip
 80097da:	da42      	bge.n	8009862 <__ieee754_sqrt+0x17a>
 80097dc:	2800      	cmp	r0, #0
 80097de:	db40      	blt.n	8009862 <__ieee754_sqrt+0x17a>
 80097e0:	f102 0801 	add.w	r8, r2, #1
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	458e      	cmp	lr, r1
 80097e8:	bf88      	it	hi
 80097ea:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80097ee:	eba1 010e 	sub.w	r1, r1, lr
 80097f2:	4464      	add	r4, ip
 80097f4:	4642      	mov	r2, r8
 80097f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80097fa:	3f01      	subs	r7, #1
 80097fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009800:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009804:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009808:	d1dc      	bne.n	80097c4 <__ieee754_sqrt+0xdc>
 800980a:	4319      	orrs	r1, r3
 800980c:	d01b      	beq.n	8009846 <__ieee754_sqrt+0x15e>
 800980e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009894 <__ieee754_sqrt+0x1ac>
 8009812:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009898 <__ieee754_sqrt+0x1b0>
 8009816:	e9da 0100 	ldrd	r0, r1, [sl]
 800981a:	e9db 2300 	ldrd	r2, r3, [fp]
 800981e:	f7f6 fd5b 	bl	80002d8 <__aeabi_dsub>
 8009822:	e9da 8900 	ldrd	r8, r9, [sl]
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f7 f987 	bl	8000b40 <__aeabi_dcmple>
 8009832:	b140      	cbz	r0, 8009846 <__ieee754_sqrt+0x15e>
 8009834:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8009838:	e9da 0100 	ldrd	r0, r1, [sl]
 800983c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009840:	d111      	bne.n	8009866 <__ieee754_sqrt+0x17e>
 8009842:	3601      	adds	r6, #1
 8009844:	463c      	mov	r4, r7
 8009846:	1072      	asrs	r2, r6, #1
 8009848:	0863      	lsrs	r3, r4, #1
 800984a:	07f1      	lsls	r1, r6, #31
 800984c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009850:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009854:	bf48      	it	mi
 8009856:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800985a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800985e:	4618      	mov	r0, r3
 8009860:	e756      	b.n	8009710 <__ieee754_sqrt+0x28>
 8009862:	4690      	mov	r8, r2
 8009864:	e7be      	b.n	80097e4 <__ieee754_sqrt+0xfc>
 8009866:	f7f6 fd39 	bl	80002dc <__adddf3>
 800986a:	e9da 8900 	ldrd	r8, r9, [sl]
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4640      	mov	r0, r8
 8009874:	4649      	mov	r1, r9
 8009876:	f7f7 f959 	bl	8000b2c <__aeabi_dcmplt>
 800987a:	b120      	cbz	r0, 8009886 <__ieee754_sqrt+0x19e>
 800987c:	1ca0      	adds	r0, r4, #2
 800987e:	bf08      	it	eq
 8009880:	3601      	addeq	r6, #1
 8009882:	3402      	adds	r4, #2
 8009884:	e7df      	b.n	8009846 <__ieee754_sqrt+0x15e>
 8009886:	1c63      	adds	r3, r4, #1
 8009888:	f023 0401 	bic.w	r4, r3, #1
 800988c:	e7db      	b.n	8009846 <__ieee754_sqrt+0x15e>
 800988e:	bf00      	nop
 8009890:	7ff00000 	.word	0x7ff00000
 8009894:	20000098 	.word	0x20000098
 8009898:	20000090 	.word	0x20000090

0800989c <_init>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr

080098a8 <_fini>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	bf00      	nop
 80098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ae:	bc08      	pop	{r3}
 80098b0:	469e      	mov	lr, r3
 80098b2:	4770      	bx	lr
