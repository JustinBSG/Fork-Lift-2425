
jason_fork_lift_fan_g4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080052b8  080052b8  000062b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005354  08005354  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800535c  0800535c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005360  08005360  00006360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005364  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000005c  080053c0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  080053c0  000073f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012643  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277b  00000000  00000000  000196cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001be50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cab  00000000  00000000  0001ce98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2b  00000000  00000000  0001db43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001418e  00000000  00000000  0002086e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da1af  00000000  00000000  000349fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ebab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  0010ebf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00113518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080052a0 	.word	0x080052a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080052a0 	.word	0x080052a0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <communication_send_data>:
  .servo_id1_ccr = 0,
  .servo_id2_ccr = 0,
  .servo_id3_ccr = 0,
  .servo_id4_ccr = 0};

void communication_send_data(CommunicationState* data) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af04      	add	r7, sp, #16
 80005c6:	6078      	str	r0, [r7, #4]
  if (data == NULL) 
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d01f      	beq.n	800060e <communication_send_data+0x4e>
    return;
  
  snprintf(communication_buffer, sizeof(communication_buffer),
           "%05u,%05u,%05u,%05u", 
           data->servo_id1_ccr,
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	881b      	ldrh	r3, [r3, #0]
  snprintf(communication_buffer, sizeof(communication_buffer),
 80005d2:	4618      	mov	r0, r3
           data->servo_id2_ccr,
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	885b      	ldrh	r3, [r3, #2]
  snprintf(communication_buffer, sizeof(communication_buffer),
 80005d8:	461a      	mov	r2, r3
           data->servo_id3_ccr,
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	889b      	ldrh	r3, [r3, #4]
  snprintf(communication_buffer, sizeof(communication_buffer),
 80005de:	4619      	mov	r1, r3
           data->servo_id4_ccr);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	88db      	ldrh	r3, [r3, #6]
  snprintf(communication_buffer, sizeof(communication_buffer),
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <communication_send_data+0x58>)
 80005ee:	2119      	movs	r1, #25
 80005f0:	480a      	ldr	r0, [pc, #40]	@ (800061c <communication_send_data+0x5c>)
 80005f2:	f004 f9a1 	bl	8004938 <sniprintf>

  HAL_UART_Transmit(&huart4, (uint8_t*)communication_buffer, strlen(communication_buffer), HAL_MAX_DELAY);
 80005f6:	4809      	ldr	r0, [pc, #36]	@ (800061c <communication_send_data+0x5c>)
 80005f8:	f7ff fe12 	bl	8000220 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000604:	4905      	ldr	r1, [pc, #20]	@ (800061c <communication_send_data+0x5c>)
 8000606:	4806      	ldr	r0, [pc, #24]	@ (8000620 <communication_send_data+0x60>)
 8000608:	f003 faea 	bl	8003be0 <HAL_UART_Transmit>
 800060c:	e000      	b.n	8000610 <communication_send_data+0x50>
    return;
 800060e:	bf00      	nop
}
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	080052b8 	.word	0x080052b8
 800061c:	20000078 	.word	0x20000078
 8000620:	20000184 	.word	0x20000184

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063a:	4b3e      	ldr	r3, [pc, #248]	@ (8000734 <MX_GPIO_Init+0x110>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a3d      	ldr	r2, [pc, #244]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b3b      	ldr	r3, [pc, #236]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0310 	and.w	r3, r3, #16
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b38      	ldr	r3, [pc, #224]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a37      	ldr	r2, [pc, #220]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <MX_GPIO_Init+0x110>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a31      	ldr	r2, [pc, #196]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a2b      	ldr	r2, [pc, #172]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <MX_GPIO_Init+0x110>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b26      	ldr	r3, [pc, #152]	@ (8000734 <MX_GPIO_Init+0x110>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a25      	ldr	r2, [pc, #148]	@ (8000734 <MX_GPIO_Init+0x110>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <MX_GPIO_Init+0x110>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C_IN2_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2130      	movs	r1, #48	@ 0x30
 80006b6:	4820      	ldr	r0, [pc, #128]	@ (8000738 <MX_GPIO_Init+0x114>)
 80006b8:	f001 f846 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_IN2_Pin|A_IN1_Pin|C_IN1_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f242 0103 	movw	r1, #8195	@ 0x2003
 80006c2:	481e      	ldr	r0, [pc, #120]	@ (800073c <MX_GPIO_Init+0x118>)
 80006c4:	f001 f840 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 518c 	mov.w	r1, #4480	@ 0x1180
 80006ce:	481c      	ldr	r0, [pc, #112]	@ (8000740 <MX_GPIO_Init+0x11c>)
 80006d0:	f001 f83a 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C_IN2_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin|D_IN1_Pin;
 80006d4:	2330      	movs	r3, #48	@ 0x30
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_GPIO_Init+0x114>)
 80006ec:	f000 feaa 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin A_IN1_Pin C_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin|A_IN1_Pin|C_IN1_Pin;
 80006f0:	f242 0303 	movw	r3, #8195	@ 0x2003
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_GPIO_Init+0x118>)
 800070a:	f000 fe9b 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 800070e:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	@ (8000740 <MX_GPIO_Init+0x11c>)
 8000728:	f000 fe8c 	bl	8001444 <HAL_GPIO_Init>

}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	48000800 	.word	0x48000800
 800073c:	48000400 	.word	0x48000400
 8000740:	48001000 	.word	0x48001000

08000744 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fd05 	bl	8001156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f840 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff ff68 	bl	8000624 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000754:	f000 f928 	bl	80009a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000758:	f000 f9e2 	bl	8000b20 <MX_TIM2_Init>
  MX_TIM3_Init();
 800075c:	f000 fa62 	bl	8000c24 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000760:	f000 fbea 	bl	8000f38 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000764:	f000 fb9c 	bl	8000ea0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000768:	2100      	movs	r1, #0
 800076a:	4815      	ldr	r0, [pc, #84]	@ (80007c0 <main+0x7c>)
 800076c:	f002 f8ec 	bl	8002948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000770:	2104      	movs	r1, #4
 8000772:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <main+0x7c>)
 8000774:	f002 f8e8 	bl	8002948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000778:	2108      	movs	r1, #8
 800077a:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <main+0x80>)
 800077c:	f002 f8e4 	bl	8002948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000780:	210c      	movs	r1, #12
 8000782:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <main+0x80>)
 8000784:	f002 f8e0 	bl	8002948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000788:	2100      	movs	r1, #0
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <main+0x84>)
 800078c:	f002 f8dc 	bl	8002948 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fd51 	bl	8001238 <HAL_Delay>

    // test fan
    // TIM3->CCR1 = 1500; // 2.475V // PE2

    // test communication
    communication_state.servo_id1_ccr = 123;
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <main+0x88>)
 8000798:	227b      	movs	r2, #123	@ 0x7b
 800079a:	801a      	strh	r2, [r3, #0]
    communication_state.servo_id2_ccr = 456;
 800079c:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <main+0x88>)
 800079e:	f44f 72e4 	mov.w	r2, #456	@ 0x1c8
 80007a2:	805a      	strh	r2, [r3, #2]
    communication_state.servo_id3_ccr = 789;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <main+0x88>)
 80007a6:	f240 3215 	movw	r2, #789	@ 0x315
 80007aa:	809a      	strh	r2, [r3, #4]
    communication_state.servo_id4_ccr = 1011;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <main+0x88>)
 80007ae:	f240 32f3 	movw	r2, #1011	@ 0x3f3
 80007b2:	80da      	strh	r2, [r3, #6]
    communication_send_data(&communication_state);
 80007b4:	4805      	ldr	r0, [pc, #20]	@ (80007cc <main+0x88>)
 80007b6:	f7ff ff03 	bl	80005c0 <communication_send_data>
    HAL_Delay(1);
 80007ba:	bf00      	nop
 80007bc:	e7e8      	b.n	8000790 <main+0x4c>
 80007be:	bf00      	nop
 80007c0:	200000a0 	.word	0x200000a0
 80007c4:	200000ec 	.word	0x200000ec
 80007c8:	20000138 	.word	0x20000138
 80007cc:	20000094 	.word	0x20000094

080007d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2238      	movs	r2, #56	@ 0x38
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 f8de 	bl	80049a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007f6:	f000 ffbf 	bl	8001778 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000808:	2303      	movs	r3, #3
 800080a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800080c:	2301      	movs	r3, #1
 800080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000810:	2314      	movs	r3, #20
 8000812:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	4618      	mov	r0, r3
 8000826:	f001 f85b 	bl	80018e0 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x64>
    Error_Handler();
 8000830:	f000 f818 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000834:	230f      	movs	r3, #15
 8000836:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2303      	movs	r3, #3
 800083a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2102      	movs	r1, #2
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fb59 	bl	8001f04 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x8c>
    Error_Handler();
 8000858:	f000 f804 	bl	8000864 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	@ 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087a:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <HAL_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	@ 0x60
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_MspInit+0x44>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	@ 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008a6:	f001 f80b 	bl	80018c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 fc75 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	@ (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f004 f832 	bl	80049b0 <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	@ (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20020000 	.word	0x20020000
 8000978:	00000400 	.word	0x00000400
 800097c:	2000009c 	.word	0x2000009c
 8000980:	200003f8 	.word	0x200003f8

08000984 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	@ 0x70
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2234      	movs	r2, #52	@ 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 ffdc 	bl	80049a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000b18 <MX_TIM1_Init+0x170>)
 80009ea:	4a4c      	ldr	r2, [pc, #304]	@ (8000b1c <MX_TIM1_Init+0x174>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80009ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000b18 <MX_TIM1_Init+0x170>)
 80009f0:	224f      	movs	r2, #79	@ 0x4f
 80009f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b48      	ldr	r3, [pc, #288]	@ (8000b18 <MX_TIM1_Init+0x170>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80009fa:	4b47      	ldr	r3, [pc, #284]	@ (8000b18 <MX_TIM1_Init+0x170>)
 80009fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a08:	4b43      	ldr	r3, [pc, #268]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a14:	4840      	ldr	r0, [pc, #256]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000a16:	f001 fedf 	bl	80027d8 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f7ff ff20 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a2a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4839      	ldr	r0, [pc, #228]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000a32:	f002 f9af 	bl	8002d94 <HAL_TIM_ConfigClockSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a3c:	f7ff ff12 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a40:	4835      	ldr	r0, [pc, #212]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000a42:	f001 ff20 	bl	8002886 <HAL_TIM_PWM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a4c:	f7ff ff0a 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a60:	4619      	mov	r1, r3
 8000a62:	482d      	ldr	r0, [pc, #180]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000a64:	f002 ff42 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a6e:	f7ff fef9 	bl	8000864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a72:	2360      	movs	r3, #96	@ 0x60
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4820      	ldr	r0, [pc, #128]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000a98:	f002 f868 	bl	8002b6c <HAL_TIM_PWM_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000aa2:	f7ff fedf 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aaa:	2204      	movs	r2, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	481a      	ldr	r0, [pc, #104]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000ab0:	f002 f85c 	bl	8002b6c <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000aba:	f7ff fed3 	bl	8000864 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000afc:	f002 ff8c 	bl	8003a18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000b06:	f7ff fead 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b0a:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <MX_TIM1_Init+0x170>)
 8000b0c:	f000 f948 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 8000b10:	bf00      	nop
 8000b12:	3770      	adds	r7, #112	@ 0x70
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000a0 	.word	0x200000a0
 8000b1c:	40012c00 	.word	0x40012c00

08000b20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b52:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000b54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000b5a:	4b31      	ldr	r3, [pc, #196]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000b5c:	224f      	movs	r2, #79	@ 0x4f
 8000b5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000b66:	4b2e      	ldr	r3, [pc, #184]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000b68:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b74:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b7a:	4829      	ldr	r0, [pc, #164]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000b7c:	f001 fe2c 	bl	80027d8 <HAL_TIM_Base_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b86:	f7ff fe6d 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4822      	ldr	r0, [pc, #136]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000b98:	f002 f8fc 	bl	8002d94 <HAL_TIM_ConfigClockSource>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ba2:	f7ff fe5f 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ba6:	481e      	ldr	r0, [pc, #120]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000ba8:	f001 fe6d 	bl	8002886 <HAL_TIM_PWM_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bb2:	f7ff fe57 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4816      	ldr	r0, [pc, #88]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000bc6:	f002 fe91 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bd0:	f7ff fe48 	bl	8000864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd4:	2360      	movs	r3, #96	@ 0x60
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	2208      	movs	r2, #8
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000bec:	f001 ffbe 	bl	8002b6c <HAL_TIM_PWM_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bf6:	f7ff fe35 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000c02:	f001 ffb3 	bl	8002b6c <HAL_TIM_PWM_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c0c:	f7ff fe2a 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c10:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <MX_TIM2_Init+0x100>)
 8000c12:	f000 f8c5 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 8000c16:	bf00      	nop
 8000c18:	3738      	adds	r7, #56	@ 0x38
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000ec 	.word	0x200000ec

08000c24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	@ 0x38
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000c58:	4a2d      	ldr	r2, [pc, #180]	@ (8000d10 <MX_TIM3_Init+0xec>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000c5e:	224f      	movs	r2, #79	@ 0x4f
 8000c60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000c6a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000c6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c7c:	4823      	ldr	r0, [pc, #140]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000c7e:	f001 fdab 	bl	80027d8 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c88:	f7ff fdec 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c96:	4619      	mov	r1, r3
 8000c98:	481c      	ldr	r0, [pc, #112]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000c9a:	f002 f87b 	bl	8002d94 <HAL_TIM_ConfigClockSource>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ca4:	f7ff fdde 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ca8:	4818      	ldr	r0, [pc, #96]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000caa:	f001 fdec 	bl	8002886 <HAL_TIM_PWM_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000cb4:	f7ff fdd6 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4811      	ldr	r0, [pc, #68]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000cc8:	f002 fe10 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000cd2:	f7ff fdc7 	bl	8000864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd6:	2360      	movs	r3, #96	@ 0x60
 8000cd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4619      	mov	r1, r3
 8000cec:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000cee:	f001 ff3d 	bl	8002b6c <HAL_TIM_PWM_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cf8:	f7ff fdb4 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cfc:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <MX_TIM3_Init+0xe8>)
 8000cfe:	f000 f84f 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 8000d02:	bf00      	nop
 8000d04:	3738      	adds	r7, #56	@ 0x38
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000138 	.word	0x20000138
 8000d10:	40000400 	.word	0x40000400

08000d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1c      	ldr	r2, [pc, #112]	@ (8000d94 <HAL_TIM_Base_MspInit+0x80>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10c      	bne.n	8000d40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d3e:	e022      	b.n	8000d86 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d48:	d10c      	bne.n	8000d64 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
}
 8000d62:	e010      	b.n	8000d86 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <HAL_TIM_Base_MspInit+0x88>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10b      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	4a09      	ldr	r2, [pc, #36]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <HAL_TIM_Base_MspInit+0x84>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	bf00      	nop
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40012c00 	.word	0x40012c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40000400 	.word	0x40000400

08000da0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a33      	ldr	r2, [pc, #204]	@ (8000e8c <HAL_TIM_MspPostInit+0xec>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d11c      	bne.n	8000dfc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a32      	ldr	r2, [pc, #200]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b30      	ldr	r3, [pc, #192]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dea:	2302      	movs	r3, #2
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4827      	ldr	r0, [pc, #156]	@ (8000e94 <HAL_TIM_MspPostInit+0xf4>)
 8000df6:	f000 fb25 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dfa:	e043      	b.n	8000e84 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e04:	d11d      	bne.n	8000e42 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	4a21      	ldr	r2, [pc, #132]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e12:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f000 fb02 	bl	8001444 <HAL_GPIO_Init>
}
 8000e40:	e020      	b.n	8000e84 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <HAL_TIM_MspPostInit+0xf8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d11b      	bne.n	8000e84 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4c:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	4a0f      	ldr	r2, [pc, #60]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_TIM_MspPostInit+0xf0>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e64:	2304      	movs	r3, #4
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e74:	2302      	movs	r3, #2
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <HAL_TIM_MspPostInit+0xfc>)
 8000e80:	f000 fae0 	bl	8001444 <HAL_GPIO_Init>
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40012c00 	.word	0x40012c00
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000800 	.word	0x48000800
 8000e98:	40000400 	.word	0x40000400
 8000e9c:	48001000 	.word	0x48001000

08000ea0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000ea6:	4a23      	ldr	r2, [pc, #140]	@ (8000f34 <MX_UART4_Init+0x94>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ee8:	4811      	ldr	r0, [pc, #68]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000eea:	f002 fe29 	bl	8003b40 <HAL_UART_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ef4:	f7ff fcb6 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000efc:	f003 fc52 	bl	80047a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f06:	f7ff fcad 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000f0e:	f003 fc87 	bl	8004820 <HAL_UARTEx_SetRxFifoThreshold>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f18:	f7ff fca4 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <MX_UART4_Init+0x90>)
 8000f1e:	f003 fc08 	bl	8004732 <HAL_UARTEx_DisableFifoMode>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f28:	f7ff fc9c 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000184 	.word	0x20000184
 8000f34:	40004c00 	.word	0x40004c00

08000f38 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f3e:	4a23      	ldr	r2, [pc, #140]	@ (8000fcc <MX_USART1_UART_Init+0x94>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f42:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f80:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f82:	f002 fddd 	bl	8003b40 <HAL_UART_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f8c:	f7ff fc6a 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000f94:	f003 fc06 	bl	80047a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f9e:	f7ff fc61 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4808      	ldr	r0, [pc, #32]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000fa6:	f003 fc3b 	bl	8004820 <HAL_UARTEx_SetRxFifoThreshold>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fb0:	f7ff fc58 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <MX_USART1_UART_Init+0x90>)
 8000fb6:	f003 fbbc 	bl	8004732 <HAL_UARTEx_DisableFifoMode>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fc0:	f7ff fc50 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000218 	.word	0x20000218
 8000fcc:	40013800 	.word	0x40013800

08000fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0a0      	sub	sp, #128	@ 0x80
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	2254      	movs	r2, #84	@ 0x54
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fcd5 	bl	80049a0 <memset>
  if(uartHandle->Instance==UART4)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80010f4 <HAL_UART_MspInit+0x124>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d137      	bne.n	8001070 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001000:	2308      	movs	r3, #8
 8001002:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4618      	mov	r0, r3
 800100e:	f001 f995 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff fc24 	bl	8000864 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	4a35      	ldr	r2, [pc, #212]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 8001022:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001026:	6593      	str	r3, [r2, #88]	@ 0x58
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001038:	4a2f      	ldr	r2, [pc, #188]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800104c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001050:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800105e:	2305      	movs	r3, #5
 8001060:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001066:	4619      	mov	r1, r3
 8001068:	4824      	ldr	r0, [pc, #144]	@ (80010fc <HAL_UART_MspInit+0x12c>)
 800106a:	f000 f9eb 	bl	8001444 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800106e:	e03c      	b.n	80010ea <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <HAL_UART_MspInit+0x130>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d137      	bne.n	80010ea <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800107a:	2301      	movs	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	4618      	mov	r0, r3
 8001088:	f001 f958 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001092:	f7ff fbe7 	bl	8000864 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	4a11      	ldr	r2, [pc, #68]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <HAL_UART_MspInit+0x128>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d8:	2307      	movs	r3, #7
 80010da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e6:	f000 f9ad 	bl	8001444 <HAL_GPIO_Init>
}
 80010ea:	bf00      	nop
 80010ec:	3780      	adds	r7, #128	@ 0x80
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40004c00 	.word	0x40004c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000800 	.word	0x48000800
 8001100:	40013800 	.word	0x40013800

08001104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001106:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001108:	f7ff fc3c 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <LoopForever+0x6>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <LoopForever+0xe>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	@ (8001150 <LoopForever+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f003 fc43 	bl	80049bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001136:	f7ff fb05 	bl	8000744 <main>

0800113a <LoopForever>:

LoopForever:
    b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
  ldr   r0, =_estack
 800113c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001148:	08005364 	.word	0x08005364
  ldr r2, =_sbss
 800114c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001150:	200003f8 	.word	0x200003f8

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>

08001156 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f93d 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f80e 	bl	8001188 <HAL_InitTick>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	e001      	b.n	800117c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001178:	f7ff fb7a 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800117c:	79fb      	ldrb	r3, [r7, #7]

}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_InitTick+0x68>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d022      	beq.n	80011e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_InitTick+0x6c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <HAL_InitTick+0x68>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f93a 	bl	800142a <HAL_SYSTICK_Config>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10f      	bne.n	80011dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d809      	bhi.n	80011d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c2:	2200      	movs	r2, #0
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ca:	f000 f914 	bl	80013f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_InitTick+0x70>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e007      	b.n	80011e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e004      	b.n	80011e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e001      	b.n	80011e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_IncTick+0x1c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_IncTick+0x20>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4413      	add	r3, r2
 800120a:	4a03      	ldr	r2, [pc, #12]	@ (8001218 <HAL_IncTick+0x1c>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	200002ac 	.word	0x200002ac
 800121c:	20000008 	.word	0x20000008

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200002ac 	.word	0x200002ac

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001250:	d004      	beq.n	800125c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_Delay+0x40>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125c:	bf00      	nop
 800125e:	f7ff ffdf 	bl	8001220 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	429a      	cmp	r2, r3
 800126c:	d8f7      	bhi.n	800125e <HAL_Delay+0x26>
  {
  }
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000008 	.word	0x20000008

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	@ (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	@ (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	@ 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	@ 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013c0:	f7ff ff8e 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff47 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff5e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff90 	bl	8001334 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb2 	bl	800139c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001452:	e15a      	b.n	800170a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 814c 	beq.w	8001704 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d005      	beq.n	8001484 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001480:	2b02      	cmp	r3, #2
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 0201 	and.w	r2, r3, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d017      	beq.n	8001522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d123      	bne.n	8001576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0203 	and.w	r2, r3, #3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80a6 	beq.w	8001704 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001728 <HAL_GPIO_Init+0x2e4>)
 80015ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001728 <HAL_GPIO_Init+0x2e4>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <HAL_GPIO_Init+0x2e4>)
 80015c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d0:	4a56      	ldr	r2, [pc, #344]	@ (800172c <HAL_GPIO_Init+0x2e8>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015fa:	d01f      	beq.n	800163c <HAL_GPIO_Init+0x1f8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001730 <HAL_GPIO_Init+0x2ec>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d019      	beq.n	8001638 <HAL_GPIO_Init+0x1f4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <HAL_GPIO_Init+0x2f0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d013      	beq.n	8001634 <HAL_GPIO_Init+0x1f0>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a4a      	ldr	r2, [pc, #296]	@ (8001738 <HAL_GPIO_Init+0x2f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00d      	beq.n	8001630 <HAL_GPIO_Init+0x1ec>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a49      	ldr	r2, [pc, #292]	@ (800173c <HAL_GPIO_Init+0x2f8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d007      	beq.n	800162c <HAL_GPIO_Init+0x1e8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a48      	ldr	r2, [pc, #288]	@ (8001740 <HAL_GPIO_Init+0x2fc>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_GPIO_Init+0x1e4>
 8001624:	2305      	movs	r3, #5
 8001626:	e00a      	b.n	800163e <HAL_GPIO_Init+0x1fa>
 8001628:	2306      	movs	r3, #6
 800162a:	e008      	b.n	800163e <HAL_GPIO_Init+0x1fa>
 800162c:	2304      	movs	r3, #4
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x1fa>
 8001630:	2303      	movs	r3, #3
 8001632:	e004      	b.n	800163e <HAL_GPIO_Init+0x1fa>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x1fa>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_GPIO_Init+0x1fa>
 800163c:	2300      	movs	r3, #0
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	f002 0203 	and.w	r2, r2, #3
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	4093      	lsls	r3, r2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164e:	4937      	ldr	r1, [pc, #220]	@ (800172c <HAL_GPIO_Init+0x2e8>)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800165c:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_GPIO_Init+0x300>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001680:	4a30      	ldr	r2, [pc, #192]	@ (8001744 <HAL_GPIO_Init+0x300>)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <HAL_GPIO_Init+0x300>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016aa:	4a26      	ldr	r2, [pc, #152]	@ (8001744 <HAL_GPIO_Init+0x300>)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_GPIO_Init+0x300>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <HAL_GPIO_Init+0x300>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_GPIO_Init+0x300>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016fe:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <HAL_GPIO_Init+0x300>)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	f47f ae9d 	bne.w	8001454 <HAL_GPIO_Init+0x10>
  }
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000
 8001730:	48000400 	.word	0x48000400
 8001734:	48000800 	.word	0x48000800
 8001738:	48000c00 	.word	0x48000c00
 800173c:	48001000 	.word	0x48001000
 8001740:	48001400 	.word	0x48001400
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001764:	e002      	b.n	800176c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d141      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001786:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800178e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001792:	d131      	bne.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001794:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800179a:	4a46      	ldr	r2, [pc, #280]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	4b43      	ldr	r3, [pc, #268]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017ac:	4a41      	ldr	r2, [pc, #260]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017b4:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2232      	movs	r2, #50	@ 0x32
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a3f      	ldr	r2, [pc, #252]	@ (80018bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ca:	e002      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d2:	4b38      	ldr	r3, [pc, #224]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017de:	d102      	bne.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f2      	bne.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017e6:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f2:	d158      	bne.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e057      	b.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017f8:	4b2e      	ldr	r3, [pc, #184]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017fe:	4a2d      	ldr	r2, [pc, #180]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001808:	e04d      	b.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001810:	d141      	bne.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001812:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800181a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800181e:	d131      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001826:	4a23      	ldr	r2, [pc, #140]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001830:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001838:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001840:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2232      	movs	r2, #50	@ 0x32
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	4a1c      	ldr	r2, [pc, #112]	@ (80018bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	0c9b      	lsrs	r3, r3, #18
 8001852:	3301      	adds	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001856:	e002      	b.n	800185e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3b01      	subs	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800186a:	d102      	bne.n	8001872 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f2      	bne.n	8001858 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800187a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800187e:	d112      	bne.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e011      	b.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001890:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001894:	e007      	b.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40007000 	.word	0x40007000
 80018b8:	20000000 	.word	0x20000000
 80018bc:	431bde83 	.word	0x431bde83

080018c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ce:	6093      	str	r3, [r2, #8]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e2fe      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d075      	beq.n	80019ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fe:	4b97      	ldr	r3, [pc, #604]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001908:	4b94      	ldr	r3, [pc, #592]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0x3e>
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d002      	beq.n	8001924 <HAL_RCC_OscConfig+0x44>
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b08      	cmp	r3, #8
 8001922:	d10b      	bne.n	800193c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	4b8d      	ldr	r3, [pc, #564]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d05b      	beq.n	80019e8 <HAL_RCC_OscConfig+0x108>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d157      	bne.n	80019e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e2d9      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001944:	d106      	bne.n	8001954 <HAL_RCC_OscConfig+0x74>
 8001946:	4b85      	ldr	r3, [pc, #532]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a84      	ldr	r2, [pc, #528]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e01d      	b.n	8001990 <HAL_RCC_OscConfig+0xb0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x98>
 800195e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7e      	ldr	r2, [pc, #504]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0xb0>
 8001978:	4b78      	ldr	r3, [pc, #480]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a77      	ldr	r2, [pc, #476]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b75      	ldr	r3, [pc, #468]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a74      	ldr	r2, [pc, #464]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800198e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fc42 	bl	8001220 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fc3e 	bl	8001220 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	@ 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e29e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0xc0>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fc2e 	bl	8001220 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fc2a 	bl	8001220 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	@ 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e28a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019da:	4b60      	ldr	r3, [pc, #384]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0xe8>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d075      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f6:	4b59      	ldr	r3, [pc, #356]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a00:	4b56      	ldr	r3, [pc, #344]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_OscConfig+0x136>
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d002      	beq.n	8001a1c <HAL_RCC_OscConfig+0x13c>
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d11f      	bne.n	8001a5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_OscConfig+0x154>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e25d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b49      	ldr	r3, [pc, #292]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	061b      	lsls	r3, r3, #24
 8001a42:	4946      	ldr	r1, [pc, #280]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a48:	4b45      	ldr	r3, [pc, #276]	@ (8001b60 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fb9b 	bl	8001188 <HAL_InitTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d043      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e249      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d023      	beq.n	8001aac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a64:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a3c      	ldr	r2, [pc, #240]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fbd6 	bl	8001220 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fbd2 	bl	8001220 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e232      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8a:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	061b      	lsls	r3, r3, #24
 8001aa4:	492d      	ldr	r1, [pc, #180]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
 8001aaa:	e01a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fbb2 	bl	8001220 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fbae 	bl	8001220 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e20e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad2:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1e0>
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d041      	beq.n	8001b72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d01c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001afc:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff fb8b 	bl	8001220 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fb87 	bl	8001220 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1e7      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b20:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ef      	beq.n	8001b0e <HAL_RCC_OscConfig+0x22e>
 8001b2e:	e020      	b.n	8001b72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b36:	4a09      	ldr	r2, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff fb6e 	bl	8001220 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b46:	e00d      	b.n	8001b64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b48:	f7ff fb6a 	bl	8001220 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d906      	bls.n	8001b64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1ca      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b64:	4b8c      	ldr	r3, [pc, #560]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ea      	bne.n	8001b48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a6 	beq.w	8001ccc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b84:	4b84      	ldr	r3, [pc, #528]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2b4>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x2b6>
 8001b94:	2300      	movs	r3, #0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb6:	4b79      	ldr	r3, [pc, #484]	@ (8001d9c <HAL_RCC_OscConfig+0x4bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc2:	4b76      	ldr	r3, [pc, #472]	@ (8001d9c <HAL_RCC_OscConfig+0x4bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	@ (8001d9c <HAL_RCC_OscConfig+0x4bc>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fb27 	bl	8001220 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7ff fb23 	bl	8001220 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e183      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d9c <HAL_RCC_OscConfig+0x4bc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d108      	bne.n	8001c0e <HAL_RCC_OscConfig+0x32e>
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c02:	4a65      	ldr	r2, [pc, #404]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c0c:	e024      	b.n	8001c58 <HAL_RCC_OscConfig+0x378>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d110      	bne.n	8001c38 <HAL_RCC_OscConfig+0x358>
 8001c16:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c26:	4b5c      	ldr	r3, [pc, #368]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c36:	e00f      	b.n	8001c58 <HAL_RCC_OscConfig+0x378>
 8001c38:	4b57      	ldr	r3, [pc, #348]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3e:	4a56      	ldr	r2, [pc, #344]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c48:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4e:	4a52      	ldr	r2, [pc, #328]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d016      	beq.n	8001c8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff fade 	bl	8001220 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff fada 	bl	8001220 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e138      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c7e:	4b46      	ldr	r3, [pc, #280]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ed      	beq.n	8001c68 <HAL_RCC_OscConfig+0x388>
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fac7 	bl	8001220 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff fac3 	bl	8001220 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e121      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cac:	4b3a      	ldr	r3, [pc, #232]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ed      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	4a34      	ldr	r2, [pc, #208]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fa96 	bl	8001220 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cf8:	f7ff fa92 	bl	8001220 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0f2      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d0a:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ef      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x418>
 8001d18:	e01b      	b.n	8001d52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d20:	4a1d      	ldr	r2, [pc, #116]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fa79 	bl	8001220 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d32:	f7ff fa75 	bl	8001220 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0d5      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ef      	bne.n	8001d32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80c9 	beq.w	8001eee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	f000 8083 	beq.w	8001e70 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d15e      	bne.n	8001e30 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a08      	ldr	r2, [pc, #32]	@ (8001d98 <HAL_RCC_OscConfig+0x4b8>)
 8001d78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fa4f 	bl	8001220 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d84:	e00c      	b.n	8001da0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7ff fa4b 	bl	8001220 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d905      	bls.n	8001da0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0ab      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	4b55      	ldr	r3, [pc, #340]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ec      	bne.n	8001d86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4b52      	ldr	r3, [pc, #328]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b52      	ldr	r3, [pc, #328]	@ (8001efc <HAL_RCC_OscConfig+0x61c>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6a11      	ldr	r1, [r2, #32]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001dc6:	0212      	lsls	r2, r2, #8
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dce:	0852      	lsrs	r2, r2, #1
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	0552      	lsls	r2, r2, #21
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dda:	0852      	lsrs	r2, r2, #1
 8001ddc:	3a01      	subs	r2, #1
 8001dde:	0652      	lsls	r2, r2, #25
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001de6:	06d2      	lsls	r2, r2, #27
 8001de8:	430a      	orrs	r2, r1
 8001dea:	4943      	ldr	r1, [pc, #268]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b41      	ldr	r3, [pc, #260]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a40      	ldr	r2, [pc, #256]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a3d      	ldr	r2, [pc, #244]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fa0a 	bl	8001220 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff fa06 	bl	8001220 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e066      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	4b35      	ldr	r3, [pc, #212]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x530>
 8001e2e:	e05e      	b.n	8001eee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a30      	ldr	r2, [pc, #192]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f9f0 	bl	8001220 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f9ec 	bl	8001220 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e04c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e56:	4b28      	ldr	r3, [pc, #160]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	4924      	ldr	r1, [pc, #144]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e68:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60cb      	str	r3, [r1, #12]
 8001e6e:	e03e      	b.n	8001eee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e039      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d12c      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d123      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d11b      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d113      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	019f800c 	.word	0x019f800c
 8001f00:	feeefffc 	.word	0xfeeefffc

08001f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e11e      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b91      	ldr	r3, [pc, #580]	@ (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	@ (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 020f 	bic.w	r2, r3, #15
 8001f32:	498c      	ldr	r1, [pc, #560]	@ (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b8a      	ldr	r3, [pc, #552]	@ (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e106      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d073      	beq.n	8002040 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d129      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	4b81      	ldr	r3, [pc, #516]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0f4      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f70:	f000 f99e 	bl	80022b0 <RCC_GetSysClockFreqFromPLLSource>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4a7c      	ldr	r2, [pc, #496]	@ (800216c <HAL_RCC_ClockConfig+0x268>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d93f      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d033      	beq.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12f      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9e:	4b72      	ldr	r3, [pc, #456]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fa6:	4a70      	ldr	r2, [pc, #448]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e024      	b.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0c6      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b66      	ldr	r3, [pc, #408]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0be      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fdc:	f000 f8ce 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4a61      	ldr	r2, [pc, #388]	@ (800216c <HAL_RCC_ClockConfig+0x268>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d909      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fea:	4b5f      	ldr	r3, [pc, #380]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ff2:	4a5d      	ldr	r2, [pc, #372]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4957      	ldr	r1, [pc, #348]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7ff f906 	bl	8001220 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff f902 	bl	8001220 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e095      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b4e      	ldr	r3, [pc, #312]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a42      	ldr	r2, [pc, #264]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800205e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002062:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002070:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002078:	4a3b      	ldr	r2, [pc, #236]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800207a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800207e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4936      	ldr	r1, [pc, #216]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
 8002092:	e008      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b80      	cmp	r3, #128	@ 0x80
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800209a:	4b33      	ldr	r3, [pc, #204]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a32      	ldr	r2, [pc, #200]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 80020a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d21d      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 020f 	bic.w	r2, r3, #15
 80020bc:	4929      	ldr	r1, [pc, #164]	@ (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020c4:	f7ff f8ac 	bl	8001220 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff f8a8 	bl	8001220 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e03b      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1ed      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4917      	ldr	r1, [pc, #92]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490f      	ldr	r1, [pc, #60]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212e:	f000 f825 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8002132:	4602      	mov	r2, r0
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	490c      	ldr	r1, [pc, #48]	@ (8002170 <HAL_RCC_ClockConfig+0x26c>)
 8002140:	5ccb      	ldrb	r3, [r1, r3]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <HAL_RCC_ClockConfig+0x270>)
 800214c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_RCC_ClockConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f818 	bl	8001188 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	04c4b400 	.word	0x04c4b400
 8002170:	080052e0 	.word	0x080052e0
 8002174:	20000000 	.word	0x20000000
 8002178:	20000004 	.word	0x20000004

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002182:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d102      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800218e:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e047      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002194:	4b27      	ldr	r3, [pc, #156]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a0:	4b26      	ldr	r3, [pc, #152]	@ (800223c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e03e      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021a6:	4b23      	ldr	r3, [pc, #140]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d136      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021b2:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3301      	adds	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d0:	4a1a      	ldr	r2, [pc, #104]	@ (800223c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a16      	ldr	r2, [pc, #88]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	68d2      	ldr	r2, [r2, #12]
 80021dc:	0a12      	lsrs	r2, r2, #8
 80021de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
      break;
 80021e8:	e00c      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ea:	4a13      	ldr	r2, [pc, #76]	@ (8002238 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4a10      	ldr	r2, [pc, #64]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	0a12      	lsrs	r2, r2, #8
 80021f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
      break;
 8002202:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0e5b      	lsrs	r3, r3, #25
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e001      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002224:	693b      	ldr	r3, [r7, #16]
}
 8002226:	4618      	mov	r0, r3
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200

08002240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4904      	ldr	r1, [pc, #16]	@ (8002280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	080052f0 	.word	0x080052f0

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002288:	f7ff ffda 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0adb      	lsrs	r3, r3, #11
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4904      	ldr	r1, [pc, #16]	@ (80022ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080052f0 	.word	0x080052f0

080022b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3301      	adds	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d10c      	bne.n	80022ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022d4:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022de:	68d2      	ldr	r2, [r2, #12]
 80022e0:	0a12      	lsrs	r2, r2, #8
 80022e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
    break;
 80022ec:	e00c      	b.n	8002308 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022f8:	68d2      	ldr	r2, [r2, #12]
 80022fa:	0a12      	lsrs	r2, r2, #8
 80022fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    break;
 8002306:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0e5b      	lsrs	r3, r3, #25
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	3301      	adds	r3, #1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002322:	687b      	ldr	r3, [r7, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40021000 	.word	0x40021000
 8002334:	007a1200 	.word	0x007a1200
 8002338:	00f42400 	.word	0x00f42400

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002344:	2300      	movs	r3, #0
 8002346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002348:	2300      	movs	r3, #0
 800234a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8098 	beq.w	800248a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b43      	ldr	r3, [pc, #268]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b40      	ldr	r3, [pc, #256]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	4a3f      	ldr	r2, [pc, #252]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	@ 0x58
 8002376:	4b3d      	ldr	r3, [pc, #244]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002386:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a39      	ldr	r2, [pc, #228]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002392:	f7fe ff45 	bl	8001220 <HAL_GetTick>
 8002396:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002398:	e009      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7fe ff41 	bl	8001220 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d902      	bls.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	74fb      	strb	r3, [r7, #19]
        break;
 80023ac:	e005      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ae:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ef      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d159      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c0:	4b2a      	ldr	r3, [pc, #168]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01e      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d019      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023dc:	4b23      	ldr	r3, [pc, #140]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e8:	4b20      	ldr	r3, [pc, #128]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	4a1f      	ldr	r2, [pc, #124]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f8:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fe:	4a1b      	ldr	r2, [pc, #108]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002408:	4a18      	ldr	r2, [pc, #96]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe ff01 	bl	8001220 <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002420:	e00b      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fefd 	bl	8001220 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d902      	bls.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	74fb      	strb	r3, [r7, #19]
            break;
 8002438:	e006      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ec      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244e:	4b07      	ldr	r3, [pc, #28]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245c:	4903      	ldr	r1, [pc, #12]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002464:	e008      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	74bb      	strb	r3, [r7, #18]
 800246a:	e005      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002478:	7c7b      	ldrb	r3, [r7, #17]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4ba7      	ldr	r3, [pc, #668]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	4aa6      	ldr	r2, [pc, #664]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002488:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002496:	4ba1      	ldr	r3, [pc, #644]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249c:	f023 0203 	bic.w	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	499d      	ldr	r1, [pc, #628]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b8:	4b98      	ldr	r3, [pc, #608]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	f023 020c 	bic.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	4995      	ldr	r1, [pc, #596]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024da:	4b90      	ldr	r3, [pc, #576]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	498c      	ldr	r1, [pc, #560]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024fc:	4b87      	ldr	r3, [pc, #540]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	4984      	ldr	r1, [pc, #528]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800251e:	4b7f      	ldr	r3, [pc, #508]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002524:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	497b      	ldr	r1, [pc, #492]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002540:	4b76      	ldr	r3, [pc, #472]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4973      	ldr	r1, [pc, #460]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002562:	4b6e      	ldr	r3, [pc, #440]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002568:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	496a      	ldr	r1, [pc, #424]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002584:	4b65      	ldr	r3, [pc, #404]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4962      	ldr	r1, [pc, #392]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a6:	4b5d      	ldr	r3, [pc, #372]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	4959      	ldr	r1, [pc, #356]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025c8:	4b54      	ldr	r3, [pc, #336]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	4951      	ldr	r1, [pc, #324]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ea:	4b4c      	ldr	r3, [pc, #304]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	4948      	ldr	r1, [pc, #288]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800260c:	4b43      	ldr	r3, [pc, #268]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4940      	ldr	r1, [pc, #256]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262c:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a3a      	ldr	r2, [pc, #232]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002636:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002644:	4b35      	ldr	r3, [pc, #212]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002652:	4932      	ldr	r1, [pc, #200]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a2c      	ldr	r2, [pc, #176]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800266e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800267c:	4b27      	ldr	r3, [pc, #156]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002682:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268a:	4924      	ldr	r1, [pc, #144]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800269a:	d105      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a1e      	ldr	r2, [pc, #120]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c2:	4916      	ldr	r1, [pc, #88]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a10      	ldr	r2, [pc, #64]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d019      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	4908      	ldr	r1, [pc, #32]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800270a:	d109      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270c:	4b03      	ldr	r3, [pc, #12]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a02      	ldr	r2, [pc, #8]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002716:	60d3      	str	r3, [r2, #12]
 8002718:	e002      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800272c:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	4926      	ldr	r1, [pc, #152]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800274c:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a20      	ldr	r2, [pc, #128]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002756:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002772:	4918      	ldr	r1, [pc, #96]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002784:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800279c:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800279e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027aa:	490a      	ldr	r1, [pc, #40]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027ba:	d105      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a04      	ldr	r2, [pc, #16]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000

080027d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e049      	b.n	800287e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fa88 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f000 fbc8 	bl	8002fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e049      	b.n	800292c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f841 	bl	8002934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 fb71 	bl	8002fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_TIM_PWM_Start+0x24>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e03c      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b04      	cmp	r3, #4
 8002970:	d109      	bne.n	8002986 <HAL_TIM_PWM_Start+0x3e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e02f      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d109      	bne.n	80029a0 <HAL_TIM_PWM_Start+0x58>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e022      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d109      	bne.n	80029ba <HAL_TIM_PWM_Start+0x72>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	bf14      	ite	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	2300      	moveq	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	e015      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d109      	bne.n	80029d4 <HAL_TIM_PWM_Start+0x8c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e008      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0a6      	b.n	8002b3c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_TIM_PWM_Start+0xb6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029fc:	e023      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0xc6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a0c:	e01b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0xd6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a1c:	e013      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xe6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a2c:	e00b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0xf6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a3c:	e003      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 ff26 	bl	80038a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a3a      	ldr	r2, [pc, #232]	@ (8002b44 <HAL_TIM_PWM_Start+0x1fc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d018      	beq.n	8002a90 <HAL_TIM_PWM_Start+0x148>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a39      	ldr	r2, [pc, #228]	@ (8002b48 <HAL_TIM_PWM_Start+0x200>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <HAL_TIM_PWM_Start+0x148>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a37      	ldr	r2, [pc, #220]	@ (8002b4c <HAL_TIM_PWM_Start+0x204>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00e      	beq.n	8002a90 <HAL_TIM_PWM_Start+0x148>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a36      	ldr	r2, [pc, #216]	@ (8002b50 <HAL_TIM_PWM_Start+0x208>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d009      	beq.n	8002a90 <HAL_TIM_PWM_Start+0x148>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a34      	ldr	r2, [pc, #208]	@ (8002b54 <HAL_TIM_PWM_Start+0x20c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_TIM_PWM_Start+0x148>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a33      	ldr	r2, [pc, #204]	@ (8002b58 <HAL_TIM_PWM_Start+0x210>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_TIM_PWM_Start+0x14c>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_TIM_PWM_Start+0x14e>
 8002a94:	2300      	movs	r3, #0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aa8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a25      	ldr	r2, [pc, #148]	@ (8002b44 <HAL_TIM_PWM_Start+0x1fc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d022      	beq.n	8002afa <HAL_TIM_PWM_Start+0x1b2>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002abc:	d01d      	beq.n	8002afa <HAL_TIM_PWM_Start+0x1b2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a26      	ldr	r2, [pc, #152]	@ (8002b5c <HAL_TIM_PWM_Start+0x214>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d018      	beq.n	8002afa <HAL_TIM_PWM_Start+0x1b2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a24      	ldr	r2, [pc, #144]	@ (8002b60 <HAL_TIM_PWM_Start+0x218>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_TIM_PWM_Start+0x1b2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a23      	ldr	r2, [pc, #140]	@ (8002b64 <HAL_TIM_PWM_Start+0x21c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00e      	beq.n	8002afa <HAL_TIM_PWM_Start+0x1b2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <HAL_TIM_PWM_Start+0x200>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_TIM_PWM_Start+0x1b2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a18      	ldr	r2, [pc, #96]	@ (8002b4c <HAL_TIM_PWM_Start+0x204>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_TIM_PWM_Start+0x1b2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a18      	ldr	r2, [pc, #96]	@ (8002b58 <HAL_TIM_PWM_Start+0x210>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d115      	bne.n	8002b26 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <HAL_TIM_PWM_Start+0x220>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d015      	beq.n	8002b38 <HAL_TIM_PWM_Start+0x1f0>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b12:	d011      	beq.n	8002b38 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	e008      	b.n	8002b38 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e000      	b.n	8002b3a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40013400 	.word	0x40013400
 8002b4c:	40014000 	.word	0x40014000
 8002b50:	40014400 	.word	0x40014400
 8002b54:	40014800 	.word	0x40014800
 8002b58:	40015000 	.word	0x40015000
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	00010007 	.word	0x00010007

08002b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0ff      	b.n	8002d8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b14      	cmp	r3, #20
 8002b96:	f200 80f0 	bhi.w	8002d7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bf5 	.word	0x08002bf5
 8002ba4:	08002d7b 	.word	0x08002d7b
 8002ba8:	08002d7b 	.word	0x08002d7b
 8002bac:	08002d7b 	.word	0x08002d7b
 8002bb0:	08002c35 	.word	0x08002c35
 8002bb4:	08002d7b 	.word	0x08002d7b
 8002bb8:	08002d7b 	.word	0x08002d7b
 8002bbc:	08002d7b 	.word	0x08002d7b
 8002bc0:	08002c77 	.word	0x08002c77
 8002bc4:	08002d7b 	.word	0x08002d7b
 8002bc8:	08002d7b 	.word	0x08002d7b
 8002bcc:	08002d7b 	.word	0x08002d7b
 8002bd0:	08002cb7 	.word	0x08002cb7
 8002bd4:	08002d7b 	.word	0x08002d7b
 8002bd8:	08002d7b 	.word	0x08002d7b
 8002bdc:	08002d7b 	.word	0x08002d7b
 8002be0:	08002cf9 	.word	0x08002cf9
 8002be4:	08002d7b 	.word	0x08002d7b
 8002be8:	08002d7b 	.word	0x08002d7b
 8002bec:	08002d7b 	.word	0x08002d7b
 8002bf0:	08002d39 	.word	0x08002d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fa8a 	bl	8003114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0208 	orr.w	r2, r2, #8
 8002c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6999      	ldr	r1, [r3, #24]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	619a      	str	r2, [r3, #24]
      break;
 8002c32:	e0a5      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fb04 	bl	8003248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6999      	ldr	r1, [r3, #24]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	021a      	lsls	r2, r3, #8
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]
      break;
 8002c74:	e084      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fb77 	bl	8003370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0208 	orr.w	r2, r2, #8
 8002c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0204 	bic.w	r2, r2, #4
 8002ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69d9      	ldr	r1, [r3, #28]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	61da      	str	r2, [r3, #28]
      break;
 8002cb4:	e064      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fbe9 	bl	8003494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69d9      	ldr	r1, [r3, #28]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	021a      	lsls	r2, r3, #8
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	61da      	str	r2, [r3, #28]
      break;
 8002cf6:	e043      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fc5c 	bl	80035bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002d36:	e023      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fca6 	bl	8003690 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002d78:	e002      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop

08002d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0ee      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x1fa>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002dce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6b      	ldr	r2, [pc, #428]	@ (8002f98 <HAL_TIM_ConfigClockSource+0x204>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f000 80b9 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002df0:	4a69      	ldr	r2, [pc, #420]	@ (8002f98 <HAL_TIM_ConfigClockSource+0x204>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	f200 80be 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002df8:	4a68      	ldr	r2, [pc, #416]	@ (8002f9c <HAL_TIM_ConfigClockSource+0x208>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f000 80b1 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002e00:	4a66      	ldr	r2, [pc, #408]	@ (8002f9c <HAL_TIM_ConfigClockSource+0x208>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	f200 80b6 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e08:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_TIM_ConfigClockSource+0x20c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f000 80a9 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002e10:	4a63      	ldr	r2, [pc, #396]	@ (8002fa0 <HAL_TIM_ConfigClockSource+0x20c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f200 80ae 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e18:	4a62      	ldr	r2, [pc, #392]	@ (8002fa4 <HAL_TIM_ConfigClockSource+0x210>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f000 80a1 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002e20:	4a60      	ldr	r2, [pc, #384]	@ (8002fa4 <HAL_TIM_ConfigClockSource+0x210>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	f200 80a6 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e28:	4a5f      	ldr	r2, [pc, #380]	@ (8002fa8 <HAL_TIM_ConfigClockSource+0x214>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	f000 8099 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002e30:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa8 <HAL_TIM_ConfigClockSource+0x214>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	f200 809e 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002e3c:	f000 8091 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002e40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002e44:	f200 8096 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e4c:	f000 8089 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e54:	f200 808e 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5c:	d03e      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x148>
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e62:	f200 8087 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6a:	f000 8086 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1e6>
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e72:	d87f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e74:	2b70      	cmp	r3, #112	@ 0x70
 8002e76:	d01a      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x11a>
 8002e78:	2b70      	cmp	r3, #112	@ 0x70
 8002e7a:	d87b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e7c:	2b60      	cmp	r3, #96	@ 0x60
 8002e7e:	d050      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x18e>
 8002e80:	2b60      	cmp	r3, #96	@ 0x60
 8002e82:	d877      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e84:	2b50      	cmp	r3, #80	@ 0x50
 8002e86:	d03c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x16e>
 8002e88:	2b50      	cmp	r3, #80	@ 0x50
 8002e8a:	d873      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d058      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8002e90:	2b40      	cmp	r3, #64	@ 0x40
 8002e92:	d86f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d064      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002e98:	2b30      	cmp	r3, #48	@ 0x30
 8002e9a:	d86b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d060      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d867      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05c      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d05a      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x1ce>
 8002eac:	e062      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ebe:	f000 fccf 	bl	8003860 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
      break;
 8002eda:	e04f      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	f000 fcb8 	bl	8003860 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002efe:	609a      	str	r2, [r3, #8]
      break;
 8002f00:	e03c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f000 fc2a 	bl	8003768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2150      	movs	r1, #80	@ 0x50
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fc83 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 8002f20:	e02c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f000 fc49 	bl	80037c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2160      	movs	r1, #96	@ 0x60
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fc73 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 8002f40:	e01c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 fc0a 	bl	8003768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2140      	movs	r1, #64	@ 0x40
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fc63 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 8002f60:	e00c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f000 fc5a 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 8002f72:	e003      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e000      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8002f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	00100070 	.word	0x00100070
 8002f9c:	00100050 	.word	0x00100050
 8002fa0:	00100040 	.word	0x00100040
 8002fa4:	00100030 	.word	0x00100030
 8002fa8:	00100020 	.word	0x00100020

08002fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a4c      	ldr	r2, [pc, #304]	@ (80030f0 <TIM_Base_SetConfig+0x144>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d017      	beq.n	8002ff4 <TIM_Base_SetConfig+0x48>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fca:	d013      	beq.n	8002ff4 <TIM_Base_SetConfig+0x48>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a49      	ldr	r2, [pc, #292]	@ (80030f4 <TIM_Base_SetConfig+0x148>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00f      	beq.n	8002ff4 <TIM_Base_SetConfig+0x48>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a48      	ldr	r2, [pc, #288]	@ (80030f8 <TIM_Base_SetConfig+0x14c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <TIM_Base_SetConfig+0x48>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a47      	ldr	r2, [pc, #284]	@ (80030fc <TIM_Base_SetConfig+0x150>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d007      	beq.n	8002ff4 <TIM_Base_SetConfig+0x48>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a46      	ldr	r2, [pc, #280]	@ (8003100 <TIM_Base_SetConfig+0x154>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <TIM_Base_SetConfig+0x48>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a45      	ldr	r2, [pc, #276]	@ (8003104 <TIM_Base_SetConfig+0x158>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d108      	bne.n	8003006 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a39      	ldr	r2, [pc, #228]	@ (80030f0 <TIM_Base_SetConfig+0x144>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d023      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003014:	d01f      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a36      	ldr	r2, [pc, #216]	@ (80030f4 <TIM_Base_SetConfig+0x148>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01b      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a35      	ldr	r2, [pc, #212]	@ (80030f8 <TIM_Base_SetConfig+0x14c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d017      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a34      	ldr	r2, [pc, #208]	@ (80030fc <TIM_Base_SetConfig+0x150>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a33      	ldr	r2, [pc, #204]	@ (8003100 <TIM_Base_SetConfig+0x154>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00f      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a33      	ldr	r2, [pc, #204]	@ (8003108 <TIM_Base_SetConfig+0x15c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00b      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a32      	ldr	r2, [pc, #200]	@ (800310c <TIM_Base_SetConfig+0x160>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a31      	ldr	r2, [pc, #196]	@ (8003110 <TIM_Base_SetConfig+0x164>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <TIM_Base_SetConfig+0xaa>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2c      	ldr	r2, [pc, #176]	@ (8003104 <TIM_Base_SetConfig+0x158>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800305c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a18      	ldr	r2, [pc, #96]	@ (80030f0 <TIM_Base_SetConfig+0x144>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d013      	beq.n	80030bc <TIM_Base_SetConfig+0x110>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a1a      	ldr	r2, [pc, #104]	@ (8003100 <TIM_Base_SetConfig+0x154>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00f      	beq.n	80030bc <TIM_Base_SetConfig+0x110>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a1a      	ldr	r2, [pc, #104]	@ (8003108 <TIM_Base_SetConfig+0x15c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00b      	beq.n	80030bc <TIM_Base_SetConfig+0x110>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a19      	ldr	r2, [pc, #100]	@ (800310c <TIM_Base_SetConfig+0x160>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <TIM_Base_SetConfig+0x110>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <TIM_Base_SetConfig+0x164>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_Base_SetConfig+0x110>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a13      	ldr	r2, [pc, #76]	@ (8003104 <TIM_Base_SetConfig+0x158>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d103      	bne.n	80030c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d105      	bne.n	80030e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f023 0201 	bic.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]
  }
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40000c00 	.word	0x40000c00
 8003100:	40013400 	.word	0x40013400
 8003104:	40015000 	.word	0x40015000
 8003108:	40014000 	.word	0x40014000
 800310c:	40014400 	.word	0x40014400
 8003110:	40014800 	.word	0x40014800

08003114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 0201 	bic.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0303 	bic.w	r3, r3, #3
 800314e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f023 0302 	bic.w	r3, r3, #2
 8003160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a30      	ldr	r2, [pc, #192]	@ (8003230 <TIM_OC1_SetConfig+0x11c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d013      	beq.n	800319c <TIM_OC1_SetConfig+0x88>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a2f      	ldr	r2, [pc, #188]	@ (8003234 <TIM_OC1_SetConfig+0x120>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00f      	beq.n	800319c <TIM_OC1_SetConfig+0x88>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a2e      	ldr	r2, [pc, #184]	@ (8003238 <TIM_OC1_SetConfig+0x124>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00b      	beq.n	800319c <TIM_OC1_SetConfig+0x88>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a2d      	ldr	r2, [pc, #180]	@ (800323c <TIM_OC1_SetConfig+0x128>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <TIM_OC1_SetConfig+0x88>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a2c      	ldr	r2, [pc, #176]	@ (8003240 <TIM_OC1_SetConfig+0x12c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_OC1_SetConfig+0x88>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <TIM_OC1_SetConfig+0x130>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d10c      	bne.n	80031b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f023 0308 	bic.w	r3, r3, #8
 80031a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003230 <TIM_OC1_SetConfig+0x11c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <TIM_OC1_SetConfig+0xd2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003234 <TIM_OC1_SetConfig+0x120>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <TIM_OC1_SetConfig+0xd2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <TIM_OC1_SetConfig+0x124>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_OC1_SetConfig+0xd2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <TIM_OC1_SetConfig+0x128>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_OC1_SetConfig+0xd2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <TIM_OC1_SetConfig+0x12c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_OC1_SetConfig+0xd2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a18      	ldr	r2, [pc, #96]	@ (8003244 <TIM_OC1_SetConfig+0x130>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d111      	bne.n	800320a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	621a      	str	r2, [r3, #32]
}
 8003224:	bf00      	nop
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40013400 	.word	0x40013400
 8003238:	40014000 	.word	0x40014000
 800323c:	40014400 	.word	0x40014400
 8003240:	40014800 	.word	0x40014800
 8003244:	40015000 	.word	0x40015000

08003248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f023 0210 	bic.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0320 	bic.w	r3, r3, #32
 8003296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003358 <TIM_OC2_SetConfig+0x110>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_OC2_SetConfig+0x74>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a2b      	ldr	r2, [pc, #172]	@ (800335c <TIM_OC2_SetConfig+0x114>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_OC2_SetConfig+0x74>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003360 <TIM_OC2_SetConfig+0x118>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10d      	bne.n	80032d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a1f      	ldr	r2, [pc, #124]	@ (8003358 <TIM_OC2_SetConfig+0x110>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <TIM_OC2_SetConfig+0xc0>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <TIM_OC2_SetConfig+0x114>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00f      	beq.n	8003308 <TIM_OC2_SetConfig+0xc0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003364 <TIM_OC2_SetConfig+0x11c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00b      	beq.n	8003308 <TIM_OC2_SetConfig+0xc0>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003368 <TIM_OC2_SetConfig+0x120>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <TIM_OC2_SetConfig+0xc0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <TIM_OC2_SetConfig+0x124>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_OC2_SetConfig+0xc0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a17      	ldr	r2, [pc, #92]	@ (8003360 <TIM_OC2_SetConfig+0x118>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d113      	bne.n	8003330 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800330e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40013400 	.word	0x40013400
 8003360:	40015000 	.word	0x40015000
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2b      	ldr	r2, [pc, #172]	@ (800347c <TIM_OC3_SetConfig+0x10c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <TIM_OC3_SetConfig+0x72>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003480 <TIM_OC3_SetConfig+0x110>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_OC3_SetConfig+0x72>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a29      	ldr	r2, [pc, #164]	@ (8003484 <TIM_OC3_SetConfig+0x114>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10d      	bne.n	80033fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1e      	ldr	r2, [pc, #120]	@ (800347c <TIM_OC3_SetConfig+0x10c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <TIM_OC3_SetConfig+0xbe>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <TIM_OC3_SetConfig+0x110>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00f      	beq.n	800342e <TIM_OC3_SetConfig+0xbe>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <TIM_OC3_SetConfig+0x118>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00b      	beq.n	800342e <TIM_OC3_SetConfig+0xbe>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <TIM_OC3_SetConfig+0x11c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <TIM_OC3_SetConfig+0xbe>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1b      	ldr	r2, [pc, #108]	@ (8003490 <TIM_OC3_SetConfig+0x120>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_OC3_SetConfig+0xbe>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a16      	ldr	r2, [pc, #88]	@ (8003484 <TIM_OC3_SetConfig+0x114>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d113      	bne.n	8003456 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800343c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	621a      	str	r2, [r3, #32]
}
 8003470:	bf00      	nop
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40013400 	.word	0x40013400
 8003484:	40015000 	.word	0x40015000
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800

08003494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	031b      	lsls	r3, r3, #12
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a2c      	ldr	r2, [pc, #176]	@ (80035a4 <TIM_OC4_SetConfig+0x110>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_OC4_SetConfig+0x74>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a2b      	ldr	r2, [pc, #172]	@ (80035a8 <TIM_OC4_SetConfig+0x114>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_OC4_SetConfig+0x74>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a2a      	ldr	r2, [pc, #168]	@ (80035ac <TIM_OC4_SetConfig+0x118>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10d      	bne.n	8003524 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800350e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	031b      	lsls	r3, r3, #12
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1f      	ldr	r2, [pc, #124]	@ (80035a4 <TIM_OC4_SetConfig+0x110>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <TIM_OC4_SetConfig+0xc0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a1e      	ldr	r2, [pc, #120]	@ (80035a8 <TIM_OC4_SetConfig+0x114>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00f      	beq.n	8003554 <TIM_OC4_SetConfig+0xc0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a1e      	ldr	r2, [pc, #120]	@ (80035b0 <TIM_OC4_SetConfig+0x11c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_OC4_SetConfig+0xc0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <TIM_OC4_SetConfig+0x120>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_OC4_SetConfig+0xc0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a1c      	ldr	r2, [pc, #112]	@ (80035b8 <TIM_OC4_SetConfig+0x124>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_OC4_SetConfig+0xc0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a17      	ldr	r2, [pc, #92]	@ (80035ac <TIM_OC4_SetConfig+0x118>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d113      	bne.n	800357c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800355a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003562:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	019b      	lsls	r3, r3, #6
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40013400 	.word	0x40013400
 80035ac:	40015000 	.word	0x40015000
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800

080035bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003600:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <TIM_OC5_SetConfig+0xbc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <TIM_OC5_SetConfig+0x82>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a18      	ldr	r2, [pc, #96]	@ (800367c <TIM_OC5_SetConfig+0xc0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00f      	beq.n	800363e <TIM_OC5_SetConfig+0x82>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <TIM_OC5_SetConfig+0xc4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_OC5_SetConfig+0x82>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <TIM_OC5_SetConfig+0xc8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_OC5_SetConfig+0x82>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a15      	ldr	r2, [pc, #84]	@ (8003688 <TIM_OC5_SetConfig+0xcc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_OC5_SetConfig+0x82>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <TIM_OC5_SetConfig+0xd0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d109      	bne.n	8003652 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003644:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	621a      	str	r2, [r3, #32]
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40013400 	.word	0x40013400
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800
 800368c:	40015000 	.word	0x40015000

08003690 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	051b      	lsls	r3, r3, #20
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003750 <TIM_OC6_SetConfig+0xc0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <TIM_OC6_SetConfig+0x84>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <TIM_OC6_SetConfig+0xc4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00f      	beq.n	8003714 <TIM_OC6_SetConfig+0x84>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a18      	ldr	r2, [pc, #96]	@ (8003758 <TIM_OC6_SetConfig+0xc8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00b      	beq.n	8003714 <TIM_OC6_SetConfig+0x84>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <TIM_OC6_SetConfig+0xcc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <TIM_OC6_SetConfig+0x84>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <TIM_OC6_SetConfig+0xd0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_OC6_SetConfig+0x84>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <TIM_OC6_SetConfig+0xd4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d109      	bne.n	8003728 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800371a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	029b      	lsls	r3, r3, #10
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40013400 	.word	0x40013400
 8003758:	40014000 	.word	0x40014000
 800375c:	40014400 	.word	0x40014400
 8003760:	40014800 	.word	0x40014800
 8003764:	40015000 	.word	0x40015000

08003768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f023 0201 	bic.w	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 030a 	bic.w	r3, r3, #10
 80037a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b087      	sub	sp, #28
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f023 0210 	bic.w	r2, r3, #16
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	031b      	lsls	r3, r3, #12
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003802:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800383c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	f043 0307 	orr.w	r3, r3, #7
 800384c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800387a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	021a      	lsls	r2, r3, #8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	431a      	orrs	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2201      	movs	r2, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	401a      	ands	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003900:	2302      	movs	r3, #2
 8003902:	e074      	b.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a34      	ldr	r2, [pc, #208]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a33      	ldr	r2, [pc, #204]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a31      	ldr	r2, [pc, #196]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003948:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800395a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a21      	ldr	r2, [pc, #132]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003984:	d01d      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d018      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	@ (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a15      	ldr	r2, [pc, #84]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a18      	ldr	r2, [pc, #96]	@ (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a11      	ldr	r2, [pc, #68]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10c      	bne.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40013400 	.word	0x40013400
 8003a04:	40015000 	.word	0x40015000
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40000800 	.word	0x40000800
 8003a10:	40000c00 	.word	0x40000c00
 8003a14:	40014000 	.word	0x40014000

08003a18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e078      	b.n	8003b26 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a19      	ldr	r2, [pc, #100]	@ (8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d11c      	bne.n	8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	051b      	lsls	r3, r3, #20
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40013400 	.word	0x40013400
 8003b3c:	40015000 	.word	0x40015000

08003b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e042      	b.n	8003bd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fd fa33 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2224      	movs	r2, #36	@ 0x24
 8003b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fbb2 	bl	80042f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f8b3 	bl	8003cfc <UART_SetConfig>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01b      	b.n	8003bd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fc31 	bl	8004438 <UART_CheckIdleState>
 8003bd6:	4603      	mov	r3, r0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	@ 0x28
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d17b      	bne.n	8003cf2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_UART_Transmit+0x26>
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e074      	b.n	8003cf4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2221      	movs	r2, #33	@ 0x21
 8003c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1a:	f7fd fb01 	bl	8001220 <HAL_GetTick>
 8003c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c38:	d108      	bne.n	8003c4c <HAL_UART_Transmit+0x6c>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e003      	b.n	8003c54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c54:	e030      	b.n	8003cb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2180      	movs	r1, #128	@ 0x80
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fc93 	bl	800458c <UART_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e03d      	b.n	8003cf4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3302      	adds	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e007      	b.n	8003ca6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1c8      	bne.n	8003c56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2140      	movs	r1, #64	@ 0x40
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fc5c 	bl	800458c <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e006      	b.n	8003cf4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b08c      	sub	sp, #48	@ 0x30
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4baa      	ldr	r3, [pc, #680]	@ (8003fd4 <UART_SetConfig+0x2d8>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a9f      	ldr	r2, [pc, #636]	@ (8003fd8 <UART_SetConfig+0x2dc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d64:	4313      	orrs	r3, r2
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d86:	f023 010f 	bic.w	r1, r3, #15
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a90      	ldr	r2, [pc, #576]	@ (8003fdc <UART_SetConfig+0x2e0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d125      	bne.n	8003dec <UART_SetConfig+0xf0>
 8003da0:	4b8f      	ldr	r3, [pc, #572]	@ (8003fe0 <UART_SetConfig+0x2e4>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d81a      	bhi.n	8003de4 <UART_SetConfig+0xe8>
 8003dae:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <UART_SetConfig+0xb8>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd5 	.word	0x08003dd5
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dca:	e116      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd2:	e112      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dda:	e10e      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de2:	e10a      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dea:	e106      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe4 <UART_SetConfig+0x2e8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d138      	bne.n	8003e68 <UART_SetConfig+0x16c>
 8003df6:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe0 <UART_SetConfig+0x2e4>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b0c      	cmp	r3, #12
 8003e02:	d82d      	bhi.n	8003e60 <UART_SetConfig+0x164>
 8003e04:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0x110>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e61 	.word	0x08003e61
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e49 	.word	0x08003e49
 8003e30:	08003e61 	.word	0x08003e61
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e46:	e0d8      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e4e:	e0d4      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e50:	2304      	movs	r3, #4
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e56:	e0d0      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e58:	2308      	movs	r3, #8
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5e:	e0cc      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e60:	2310      	movs	r3, #16
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e66:	e0c8      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fe8 <UART_SetConfig+0x2ec>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d125      	bne.n	8003ebe <UART_SetConfig+0x1c2>
 8003e72:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe0 <UART_SetConfig+0x2e4>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e7c:	2b30      	cmp	r3, #48	@ 0x30
 8003e7e:	d016      	beq.n	8003eae <UART_SetConfig+0x1b2>
 8003e80:	2b30      	cmp	r3, #48	@ 0x30
 8003e82:	d818      	bhi.n	8003eb6 <UART_SetConfig+0x1ba>
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d00a      	beq.n	8003e9e <UART_SetConfig+0x1a2>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d814      	bhi.n	8003eb6 <UART_SetConfig+0x1ba>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <UART_SetConfig+0x19a>
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d008      	beq.n	8003ea6 <UART_SetConfig+0x1aa>
 8003e94:	e00f      	b.n	8003eb6 <UART_SetConfig+0x1ba>
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e9c:	e0ad      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ea4:	e0a9      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eac:	e0a5      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb4:	e0a1      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ebc:	e09d      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8003fec <UART_SetConfig+0x2f0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d125      	bne.n	8003f14 <UART_SetConfig+0x218>
 8003ec8:	4b45      	ldr	r3, [pc, #276]	@ (8003fe0 <UART_SetConfig+0x2e4>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ed4:	d016      	beq.n	8003f04 <UART_SetConfig+0x208>
 8003ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ed8:	d818      	bhi.n	8003f0c <UART_SetConfig+0x210>
 8003eda:	2b80      	cmp	r3, #128	@ 0x80
 8003edc:	d00a      	beq.n	8003ef4 <UART_SetConfig+0x1f8>
 8003ede:	2b80      	cmp	r3, #128	@ 0x80
 8003ee0:	d814      	bhi.n	8003f0c <UART_SetConfig+0x210>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <UART_SetConfig+0x1f0>
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d008      	beq.n	8003efc <UART_SetConfig+0x200>
 8003eea:	e00f      	b.n	8003f0c <UART_SetConfig+0x210>
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef2:	e082      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efa:	e07e      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003efc:	2304      	movs	r3, #4
 8003efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f02:	e07a      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f04:	2308      	movs	r3, #8
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0a:	e076      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f12:	e072      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a35      	ldr	r2, [pc, #212]	@ (8003ff0 <UART_SetConfig+0x2f4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d12a      	bne.n	8003f74 <UART_SetConfig+0x278>
 8003f1e:	4b30      	ldr	r3, [pc, #192]	@ (8003fe0 <UART_SetConfig+0x2e4>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f2c:	d01a      	beq.n	8003f64 <UART_SetConfig+0x268>
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f32:	d81b      	bhi.n	8003f6c <UART_SetConfig+0x270>
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f38:	d00c      	beq.n	8003f54 <UART_SetConfig+0x258>
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3e:	d815      	bhi.n	8003f6c <UART_SetConfig+0x270>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <UART_SetConfig+0x250>
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f48:	d008      	beq.n	8003f5c <UART_SetConfig+0x260>
 8003f4a:	e00f      	b.n	8003f6c <UART_SetConfig+0x270>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f52:	e052      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f54:	2302      	movs	r3, #2
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5a:	e04e      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f62:	e04a      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f64:	2308      	movs	r3, #8
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6a:	e046      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f72:	e042      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	@ (8003fd8 <UART_SetConfig+0x2dc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d13a      	bne.n	8003ff4 <UART_SetConfig+0x2f8>
 8003f7e:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <UART_SetConfig+0x2e4>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f8c:	d01a      	beq.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f92:	d81b      	bhi.n	8003fcc <UART_SetConfig+0x2d0>
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f98:	d00c      	beq.n	8003fb4 <UART_SetConfig+0x2b8>
 8003f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9e:	d815      	bhi.n	8003fcc <UART_SetConfig+0x2d0>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <UART_SetConfig+0x2b0>
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa8:	d008      	beq.n	8003fbc <UART_SetConfig+0x2c0>
 8003faa:	e00f      	b.n	8003fcc <UART_SetConfig+0x2d0>
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fb2:	e022      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fba:	e01e      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc2:	e01a      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fca:	e016      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd2:	e012      	b.n	8003ffa <UART_SetConfig+0x2fe>
 8003fd4:	cfff69f3 	.word	0xcfff69f3
 8003fd8:	40008000 	.word	0x40008000
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40004400 	.word	0x40004400
 8003fe8:	40004800 	.word	0x40004800
 8003fec:	40004c00 	.word	0x40004c00
 8003ff0:	40005000 	.word	0x40005000
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4aae      	ldr	r2, [pc, #696]	@ (80042b8 <UART_SetConfig+0x5bc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	f040 8097 	bne.w	8004134 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004006:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800400a:	2b08      	cmp	r3, #8
 800400c:	d823      	bhi.n	8004056 <UART_SetConfig+0x35a>
 800400e:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <UART_SetConfig+0x318>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004039 	.word	0x08004039
 8004018:	08004057 	.word	0x08004057
 800401c:	08004041 	.word	0x08004041
 8004020:	08004057 	.word	0x08004057
 8004024:	08004047 	.word	0x08004047
 8004028:	08004057 	.word	0x08004057
 800402c:	08004057 	.word	0x08004057
 8004030:	08004057 	.word	0x08004057
 8004034:	0800404f 	.word	0x0800404f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7fe f90e 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 800403c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800403e:	e010      	b.n	8004062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004040:	4b9e      	ldr	r3, [pc, #632]	@ (80042bc <UART_SetConfig+0x5c0>)
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004044:	e00d      	b.n	8004062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004046:	f7fe f899 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800404a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800404c:	e009      	b.n	8004062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004054:	e005      	b.n	8004062 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8130 	beq.w	80042ca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	4a94      	ldr	r2, [pc, #592]	@ (80042c0 <UART_SetConfig+0x5c4>)
 8004070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004074:	461a      	mov	r2, r3
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	fbb3 f3f2 	udiv	r3, r3, r2
 800407c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	429a      	cmp	r2, r3
 800408c:	d305      	bcc.n	800409a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	429a      	cmp	r2, r3
 8004098:	d903      	bls.n	80040a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040a0:	e113      	b.n	80042ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	2200      	movs	r2, #0
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	60fa      	str	r2, [r7, #12]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	4a84      	ldr	r2, [pc, #528]	@ (80042c0 <UART_SetConfig+0x5c4>)
 80040b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040c4:	f7fc f904 	bl	80002d0 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	020b      	lsls	r3, r1, #8
 80040da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040de:	0202      	lsls	r2, r0, #8
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	6849      	ldr	r1, [r1, #4]
 80040e4:	0849      	lsrs	r1, r1, #1
 80040e6:	2000      	movs	r0, #0
 80040e8:	460c      	mov	r4, r1
 80040ea:	4605      	mov	r5, r0
 80040ec:	eb12 0804 	adds.w	r8, r2, r4
 80040f0:	eb43 0905 	adc.w	r9, r3, r5
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	469a      	mov	sl, r3
 80040fc:	4693      	mov	fp, r2
 80040fe:	4652      	mov	r2, sl
 8004100:	465b      	mov	r3, fp
 8004102:	4640      	mov	r0, r8
 8004104:	4649      	mov	r1, r9
 8004106:	f7fc f8e3 	bl	80002d0 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4613      	mov	r3, r2
 8004110:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004118:	d308      	bcc.n	800412c <UART_SetConfig+0x430>
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004120:	d204      	bcs.n	800412c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	e0ce      	b.n	80042ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004132:	e0ca      	b.n	80042ca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800413c:	d166      	bne.n	800420c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800413e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004142:	2b08      	cmp	r3, #8
 8004144:	d827      	bhi.n	8004196 <UART_SetConfig+0x49a>
 8004146:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <UART_SetConfig+0x450>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004171 	.word	0x08004171
 8004150:	08004179 	.word	0x08004179
 8004154:	08004181 	.word	0x08004181
 8004158:	08004197 	.word	0x08004197
 800415c:	08004187 	.word	0x08004187
 8004160:	08004197 	.word	0x08004197
 8004164:	08004197 	.word	0x08004197
 8004168:	08004197 	.word	0x08004197
 800416c:	0800418f 	.word	0x0800418f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004170:	f7fe f872 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8004174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004176:	e014      	b.n	80041a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004178:	f7fe f884 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 800417c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800417e:	e010      	b.n	80041a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004180:	4b4e      	ldr	r3, [pc, #312]	@ (80042bc <UART_SetConfig+0x5c0>)
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004184:	e00d      	b.n	80041a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004186:	f7fd fff9 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800418a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800418c:	e009      	b.n	80041a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004194:	e005      	b.n	80041a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8090 	beq.w	80042ca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	4a44      	ldr	r2, [pc, #272]	@ (80042c0 <UART_SetConfig+0x5c4>)
 80041b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041b4:	461a      	mov	r2, r3
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041bc:	005a      	lsls	r2, r3, #1
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	441a      	add	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d916      	bls.n	8004204 <UART_SetConfig+0x508>
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041dc:	d212      	bcs.n	8004204 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f023 030f 	bic.w	r3, r3, #15
 80041e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	8bfb      	ldrh	r3, [r7, #30]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	8bfa      	ldrh	r2, [r7, #30]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	e062      	b.n	80042ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800420a:	e05e      	b.n	80042ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800420c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004210:	2b08      	cmp	r3, #8
 8004212:	d828      	bhi.n	8004266 <UART_SetConfig+0x56a>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <UART_SetConfig+0x520>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004241 	.word	0x08004241
 8004220:	08004249 	.word	0x08004249
 8004224:	08004251 	.word	0x08004251
 8004228:	08004267 	.word	0x08004267
 800422c:	08004257 	.word	0x08004257
 8004230:	08004267 	.word	0x08004267
 8004234:	08004267 	.word	0x08004267
 8004238:	08004267 	.word	0x08004267
 800423c:	0800425f 	.word	0x0800425f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7fe f80a 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8004244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004246:	e014      	b.n	8004272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004248:	f7fe f81c 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 800424c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800424e:	e010      	b.n	8004272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004250:	4b1a      	ldr	r3, [pc, #104]	@ (80042bc <UART_SetConfig+0x5c0>)
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004254:	e00d      	b.n	8004272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004256:	f7fd ff91 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800425a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800425c:	e009      	b.n	8004272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004264:	e005      	b.n	8004272 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004270:	bf00      	nop
    }

    if (pclk != 0U)
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d028      	beq.n	80042ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	4a10      	ldr	r2, [pc, #64]	@ (80042c0 <UART_SetConfig+0x5c4>)
 800427e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004282:	461a      	mov	r2, r3
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	fbb3 f2f2 	udiv	r2, r3, r2
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	441a      	add	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	d910      	bls.n	80042c4 <UART_SetConfig+0x5c8>
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a8:	d20c      	bcs.n	80042c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60da      	str	r2, [r3, #12]
 80042b4:	e009      	b.n	80042ca <UART_SetConfig+0x5ce>
 80042b6:	bf00      	nop
 80042b8:	40008000 	.word	0x40008000
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	080052f8 	.word	0x080052f8
      }
      else
      {
        ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2200      	movs	r2, #0
 80042e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3730      	adds	r7, #48	@ 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01a      	beq.n	800440a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043f2:	d10a      	bne.n	800440a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b098      	sub	sp, #96	@ 0x60
 800443c:	af02      	add	r7, sp, #8
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004448:	f7fc feea 	bl	8001220 <HAL_GetTick>
 800444c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d12f      	bne.n	80044bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800445c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004464:	2200      	movs	r2, #0
 8004466:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f88e 	bl	800458c <UART_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d022      	beq.n	80044bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800448a:	653b      	str	r3, [r7, #80]	@ 0x50
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004494:	647b      	str	r3, [r7, #68]	@ 0x44
 8004496:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800449a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e6      	bne.n	8004476 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e063      	b.n	8004584 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d149      	bne.n	800455e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d2:	2200      	movs	r2, #0
 80044d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f857 	bl	800458c <UART_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d03c      	beq.n	800455e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	623b      	str	r3, [r7, #32]
   return(result);
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004502:	633b      	str	r3, [r7, #48]	@ 0x30
 8004504:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e6      	bne.n	80044e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	60fb      	str	r3, [r7, #12]
   return(result);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004536:	61fa      	str	r2, [r7, #28]
 8004538:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	617b      	str	r3, [r7, #20]
   return(result);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e5      	bne.n	8004516 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e012      	b.n	8004584 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3758      	adds	r7, #88	@ 0x58
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459c:	e04f      	b.n	800463e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045a4:	d04b      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7fc fe3b 	bl	8001220 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <UART_WaitOnFlagUntilTimeout+0x30>
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e04e      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d037      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b80      	cmp	r3, #128	@ 0x80
 80045d2:	d034      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b40      	cmp	r3, #64	@ 0x40
 80045d8:	d031      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d110      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2208      	movs	r2, #8
 80045ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f838 	bl	8004666 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2208      	movs	r2, #8
 80045fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e029      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004618:	d111      	bne.n	800463e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f81e 	bl	8004666 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e00f      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	429a      	cmp	r2, r3
 800465a:	d0a0      	beq.n	800459e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004666:	b480      	push	{r7}
 8004668:	b095      	sub	sp, #84	@ 0x54
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800468c:	643b      	str	r3, [r7, #64]	@ 0x40
 800468e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e6      	bne.n	800466e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3308      	adds	r3, #8
 80046a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e3      	bne.n	80046a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d118      	bne.n	8004712 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f023 0310 	bic.w	r3, r3, #16
 80046f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6979      	ldr	r1, [r7, #20]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	613b      	str	r3, [r7, #16]
   return(result);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e6      	bne.n	80046e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004726:	bf00      	nop
 8004728:	3754      	adds	r7, #84	@ 0x54
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_UARTEx_DisableFifoMode+0x16>
 8004744:	2302      	movs	r3, #2
 8004746:	e027      	b.n	8004798 <HAL_UARTEx_DisableFifoMode+0x66>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	@ 0x24
 8004754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004776:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e02d      	b.n	8004818 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	@ 0x24
 80047c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f84f 	bl	800489c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004834:	2302      	movs	r3, #2
 8004836:	e02d      	b.n	8004894 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2224      	movs	r2, #36	@ 0x24
 8004844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f811 	bl	800489c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d108      	bne.n	80048be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048bc:	e031      	b.n	8004922 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048be:	2308      	movs	r3, #8
 80048c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048c2:	2308      	movs	r3, #8
 80048c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	0e5b      	lsrs	r3, r3, #25
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	0f5b      	lsrs	r3, r3, #29
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048e6:	7bbb      	ldrb	r3, [r7, #14]
 80048e8:	7b3a      	ldrb	r2, [r7, #12]
 80048ea:	4911      	ldr	r1, [pc, #68]	@ (8004930 <UARTEx_SetNbDataToProcess+0x94>)
 80048ec:	5c8a      	ldrb	r2, [r1, r2]
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048f2:	7b3a      	ldrb	r2, [r7, #12]
 80048f4:	490f      	ldr	r1, [pc, #60]	@ (8004934 <UARTEx_SetNbDataToProcess+0x98>)
 80048f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	7b7a      	ldrb	r2, [r7, #13]
 8004908:	4909      	ldr	r1, [pc, #36]	@ (8004930 <UARTEx_SetNbDataToProcess+0x94>)
 800490a:	5c8a      	ldrb	r2, [r1, r2]
 800490c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004910:	7b7a      	ldrb	r2, [r7, #13]
 8004912:	4908      	ldr	r1, [pc, #32]	@ (8004934 <UARTEx_SetNbDataToProcess+0x98>)
 8004914:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004916:	fb93 f3f2 	sdiv	r3, r3, r2
 800491a:	b29a      	uxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	08005310 	.word	0x08005310
 8004934:	08005318 	.word	0x08005318

08004938 <sniprintf>:
 8004938:	b40c      	push	{r2, r3}
 800493a:	b530      	push	{r4, r5, lr}
 800493c:	4b17      	ldr	r3, [pc, #92]	@ (800499c <sniprintf+0x64>)
 800493e:	1e0c      	subs	r4, r1, #0
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	b09d      	sub	sp, #116	@ 0x74
 8004944:	da08      	bge.n	8004958 <sniprintf+0x20>
 8004946:	238b      	movs	r3, #139	@ 0x8b
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800494e:	b01d      	add	sp, #116	@ 0x74
 8004950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004954:	b002      	add	sp, #8
 8004956:	4770      	bx	lr
 8004958:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800495c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004960:	bf14      	ite	ne
 8004962:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004966:	4623      	moveq	r3, r4
 8004968:	9304      	str	r3, [sp, #16]
 800496a:	9307      	str	r3, [sp, #28]
 800496c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004970:	9002      	str	r0, [sp, #8]
 8004972:	9006      	str	r0, [sp, #24]
 8004974:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004978:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800497a:	ab21      	add	r3, sp, #132	@ 0x84
 800497c:	a902      	add	r1, sp, #8
 800497e:	4628      	mov	r0, r5
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	f000 f8e7 	bl	8004b54 <_svfiprintf_r>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	bfbc      	itt	lt
 800498a:	238b      	movlt	r3, #139	@ 0x8b
 800498c:	602b      	strlt	r3, [r5, #0]
 800498e:	2c00      	cmp	r4, #0
 8004990:	d0dd      	beq.n	800494e <sniprintf+0x16>
 8004992:	9b02      	ldr	r3, [sp, #8]
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e7d9      	b.n	800494e <sniprintf+0x16>
 800499a:	bf00      	nop
 800499c:	2000000c 	.word	0x2000000c

080049a0 <memset>:
 80049a0:	4402      	add	r2, r0
 80049a2:	4603      	mov	r3, r0
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d100      	bne.n	80049aa <memset+0xa>
 80049a8:	4770      	bx	lr
 80049aa:	f803 1b01 	strb.w	r1, [r3], #1
 80049ae:	e7f9      	b.n	80049a4 <memset+0x4>

080049b0 <__errno>:
 80049b0:	4b01      	ldr	r3, [pc, #4]	@ (80049b8 <__errno+0x8>)
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	2000000c 	.word	0x2000000c

080049bc <__libc_init_array>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4d0d      	ldr	r5, [pc, #52]	@ (80049f4 <__libc_init_array+0x38>)
 80049c0:	4c0d      	ldr	r4, [pc, #52]	@ (80049f8 <__libc_init_array+0x3c>)
 80049c2:	1b64      	subs	r4, r4, r5
 80049c4:	10a4      	asrs	r4, r4, #2
 80049c6:	2600      	movs	r6, #0
 80049c8:	42a6      	cmp	r6, r4
 80049ca:	d109      	bne.n	80049e0 <__libc_init_array+0x24>
 80049cc:	4d0b      	ldr	r5, [pc, #44]	@ (80049fc <__libc_init_array+0x40>)
 80049ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004a00 <__libc_init_array+0x44>)
 80049d0:	f000 fc66 	bl	80052a0 <_init>
 80049d4:	1b64      	subs	r4, r4, r5
 80049d6:	10a4      	asrs	r4, r4, #2
 80049d8:	2600      	movs	r6, #0
 80049da:	42a6      	cmp	r6, r4
 80049dc:	d105      	bne.n	80049ea <__libc_init_array+0x2e>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e4:	4798      	blx	r3
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7ee      	b.n	80049c8 <__libc_init_array+0xc>
 80049ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ee:	4798      	blx	r3
 80049f0:	3601      	adds	r6, #1
 80049f2:	e7f2      	b.n	80049da <__libc_init_array+0x1e>
 80049f4:	0800535c 	.word	0x0800535c
 80049f8:	0800535c 	.word	0x0800535c
 80049fc:	0800535c 	.word	0x0800535c
 8004a00:	08005360 	.word	0x08005360

08004a04 <__retarget_lock_acquire_recursive>:
 8004a04:	4770      	bx	lr

08004a06 <__retarget_lock_release_recursive>:
 8004a06:	4770      	bx	lr

08004a08 <_free_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	d041      	beq.n	8004a94 <_free_r+0x8c>
 8004a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a14:	1f0c      	subs	r4, r1, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfb8      	it	lt
 8004a1a:	18e4      	addlt	r4, r4, r3
 8004a1c:	f000 fbc6 	bl	80051ac <__malloc_lock>
 8004a20:	4a1d      	ldr	r2, [pc, #116]	@ (8004a98 <_free_r+0x90>)
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	b933      	cbnz	r3, 8004a34 <_free_r+0x2c>
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	6014      	str	r4, [r2, #0]
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a30:	f000 bbc2 	b.w	80051b8 <__malloc_unlock>
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d908      	bls.n	8004a4a <_free_r+0x42>
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	1821      	adds	r1, r4, r0
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	bf01      	itttt	eq
 8004a40:	6819      	ldreq	r1, [r3, #0]
 8004a42:	685b      	ldreq	r3, [r3, #4]
 8004a44:	1809      	addeq	r1, r1, r0
 8004a46:	6021      	streq	r1, [r4, #0]
 8004a48:	e7ed      	b.n	8004a26 <_free_r+0x1e>
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	b10b      	cbz	r3, 8004a54 <_free_r+0x4c>
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	d9fa      	bls.n	8004a4a <_free_r+0x42>
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	1850      	adds	r0, r2, r1
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d10b      	bne.n	8004a74 <_free_r+0x6c>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	4401      	add	r1, r0
 8004a60:	1850      	adds	r0, r2, r1
 8004a62:	4283      	cmp	r3, r0
 8004a64:	6011      	str	r1, [r2, #0]
 8004a66:	d1e0      	bne.n	8004a2a <_free_r+0x22>
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	6053      	str	r3, [r2, #4]
 8004a6e:	4408      	add	r0, r1
 8004a70:	6010      	str	r0, [r2, #0]
 8004a72:	e7da      	b.n	8004a2a <_free_r+0x22>
 8004a74:	d902      	bls.n	8004a7c <_free_r+0x74>
 8004a76:	230c      	movs	r3, #12
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	e7d6      	b.n	8004a2a <_free_r+0x22>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	1821      	adds	r1, r4, r0
 8004a80:	428b      	cmp	r3, r1
 8004a82:	bf04      	itt	eq
 8004a84:	6819      	ldreq	r1, [r3, #0]
 8004a86:	685b      	ldreq	r3, [r3, #4]
 8004a88:	6063      	str	r3, [r4, #4]
 8004a8a:	bf04      	itt	eq
 8004a8c:	1809      	addeq	r1, r1, r0
 8004a8e:	6021      	streq	r1, [r4, #0]
 8004a90:	6054      	str	r4, [r2, #4]
 8004a92:	e7ca      	b.n	8004a2a <_free_r+0x22>
 8004a94:	bd38      	pop	{r3, r4, r5, pc}
 8004a96:	bf00      	nop
 8004a98:	200003f4 	.word	0x200003f4

08004a9c <__ssputs_r>:
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	688e      	ldr	r6, [r1, #8]
 8004aa2:	461f      	mov	r7, r3
 8004aa4:	42be      	cmp	r6, r7
 8004aa6:	680b      	ldr	r3, [r1, #0]
 8004aa8:	4682      	mov	sl, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	4690      	mov	r8, r2
 8004aae:	d82d      	bhi.n	8004b0c <__ssputs_r+0x70>
 8004ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ab8:	d026      	beq.n	8004b08 <__ssputs_r+0x6c>
 8004aba:	6965      	ldr	r5, [r4, #20]
 8004abc:	6909      	ldr	r1, [r1, #16]
 8004abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac2:	eba3 0901 	sub.w	r9, r3, r1
 8004ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aca:	1c7b      	adds	r3, r7, #1
 8004acc:	444b      	add	r3, r9
 8004ace:	106d      	asrs	r5, r5, #1
 8004ad0:	429d      	cmp	r5, r3
 8004ad2:	bf38      	it	cc
 8004ad4:	461d      	movcc	r5, r3
 8004ad6:	0553      	lsls	r3, r2, #21
 8004ad8:	d527      	bpl.n	8004b2a <__ssputs_r+0x8e>
 8004ada:	4629      	mov	r1, r5
 8004adc:	f000 f958 	bl	8004d90 <_malloc_r>
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	b360      	cbz	r0, 8004b3e <__ssputs_r+0xa2>
 8004ae4:	6921      	ldr	r1, [r4, #16]
 8004ae6:	464a      	mov	r2, r9
 8004ae8:	f000 fbc4 	bl	8005274 <memcpy>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	6126      	str	r6, [r4, #16]
 8004afa:	6165      	str	r5, [r4, #20]
 8004afc:	444e      	add	r6, r9
 8004afe:	eba5 0509 	sub.w	r5, r5, r9
 8004b02:	6026      	str	r6, [r4, #0]
 8004b04:	60a5      	str	r5, [r4, #8]
 8004b06:	463e      	mov	r6, r7
 8004b08:	42be      	cmp	r6, r7
 8004b0a:	d900      	bls.n	8004b0e <__ssputs_r+0x72>
 8004b0c:	463e      	mov	r6, r7
 8004b0e:	6820      	ldr	r0, [r4, #0]
 8004b10:	4632      	mov	r2, r6
 8004b12:	4641      	mov	r1, r8
 8004b14:	f000 fb84 	bl	8005220 <memmove>
 8004b18:	68a3      	ldr	r3, [r4, #8]
 8004b1a:	1b9b      	subs	r3, r3, r6
 8004b1c:	60a3      	str	r3, [r4, #8]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	4433      	add	r3, r6
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	2000      	movs	r0, #0
 8004b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	f000 fb4a 	bl	80051c4 <_realloc_r>
 8004b30:	4606      	mov	r6, r0
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d1e0      	bne.n	8004af8 <__ssputs_r+0x5c>
 8004b36:	6921      	ldr	r1, [r4, #16]
 8004b38:	4650      	mov	r0, sl
 8004b3a:	f7ff ff65 	bl	8004a08 <_free_r>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	f8ca 3000 	str.w	r3, [sl]
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b50:	e7e9      	b.n	8004b26 <__ssputs_r+0x8a>
	...

08004b54 <_svfiprintf_r>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	4698      	mov	r8, r3
 8004b5a:	898b      	ldrh	r3, [r1, #12]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	b09d      	sub	sp, #116	@ 0x74
 8004b60:	4607      	mov	r7, r0
 8004b62:	460d      	mov	r5, r1
 8004b64:	4614      	mov	r4, r2
 8004b66:	d510      	bpl.n	8004b8a <_svfiprintf_r+0x36>
 8004b68:	690b      	ldr	r3, [r1, #16]
 8004b6a:	b973      	cbnz	r3, 8004b8a <_svfiprintf_r+0x36>
 8004b6c:	2140      	movs	r1, #64	@ 0x40
 8004b6e:	f000 f90f 	bl	8004d90 <_malloc_r>
 8004b72:	6028      	str	r0, [r5, #0]
 8004b74:	6128      	str	r0, [r5, #16]
 8004b76:	b930      	cbnz	r0, 8004b86 <_svfiprintf_r+0x32>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b80:	b01d      	add	sp, #116	@ 0x74
 8004b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b86:	2340      	movs	r3, #64	@ 0x40
 8004b88:	616b      	str	r3, [r5, #20]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b8e:	2320      	movs	r3, #32
 8004b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b98:	2330      	movs	r3, #48	@ 0x30
 8004b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d38 <_svfiprintf_r+0x1e4>
 8004b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ba2:	f04f 0901 	mov.w	r9, #1
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	469a      	mov	sl, r3
 8004baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bae:	b10a      	cbz	r2, 8004bb4 <_svfiprintf_r+0x60>
 8004bb0:	2a25      	cmp	r2, #37	@ 0x25
 8004bb2:	d1f9      	bne.n	8004ba8 <_svfiprintf_r+0x54>
 8004bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb8:	d00b      	beq.n	8004bd2 <_svfiprintf_r+0x7e>
 8004bba:	465b      	mov	r3, fp
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	f7ff ff6b 	bl	8004a9c <__ssputs_r>
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	f000 80a7 	beq.w	8004d1a <_svfiprintf_r+0x1c6>
 8004bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bce:	445a      	add	r2, fp
 8004bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 809f 	beq.w	8004d1a <_svfiprintf_r+0x1c6>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be6:	f10a 0a01 	add.w	sl, sl, #1
 8004bea:	9304      	str	r3, [sp, #16]
 8004bec:	9307      	str	r3, [sp, #28]
 8004bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bf4:	4654      	mov	r4, sl
 8004bf6:	2205      	movs	r2, #5
 8004bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfc:	484e      	ldr	r0, [pc, #312]	@ (8004d38 <_svfiprintf_r+0x1e4>)
 8004bfe:	f7fb fb17 	bl	8000230 <memchr>
 8004c02:	9a04      	ldr	r2, [sp, #16]
 8004c04:	b9d8      	cbnz	r0, 8004c3e <_svfiprintf_r+0xea>
 8004c06:	06d0      	lsls	r0, r2, #27
 8004c08:	bf44      	itt	mi
 8004c0a:	2320      	movmi	r3, #32
 8004c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c10:	0711      	lsls	r1, r2, #28
 8004c12:	bf44      	itt	mi
 8004c14:	232b      	movmi	r3, #43	@ 0x2b
 8004c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c20:	d015      	beq.n	8004c4e <_svfiprintf_r+0xfa>
 8004c22:	9a07      	ldr	r2, [sp, #28]
 8004c24:	4654      	mov	r4, sl
 8004c26:	2000      	movs	r0, #0
 8004c28:	f04f 0c0a 	mov.w	ip, #10
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c32:	3b30      	subs	r3, #48	@ 0x30
 8004c34:	2b09      	cmp	r3, #9
 8004c36:	d94b      	bls.n	8004cd0 <_svfiprintf_r+0x17c>
 8004c38:	b1b0      	cbz	r0, 8004c68 <_svfiprintf_r+0x114>
 8004c3a:	9207      	str	r2, [sp, #28]
 8004c3c:	e014      	b.n	8004c68 <_svfiprintf_r+0x114>
 8004c3e:	eba0 0308 	sub.w	r3, r0, r8
 8004c42:	fa09 f303 	lsl.w	r3, r9, r3
 8004c46:	4313      	orrs	r3, r2
 8004c48:	9304      	str	r3, [sp, #16]
 8004c4a:	46a2      	mov	sl, r4
 8004c4c:	e7d2      	b.n	8004bf4 <_svfiprintf_r+0xa0>
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	1d19      	adds	r1, r3, #4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	9103      	str	r1, [sp, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfbb      	ittet	lt
 8004c5a:	425b      	neglt	r3, r3
 8004c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c60:	9307      	strge	r3, [sp, #28]
 8004c62:	9307      	strlt	r3, [sp, #28]
 8004c64:	bfb8      	it	lt
 8004c66:	9204      	strlt	r2, [sp, #16]
 8004c68:	7823      	ldrb	r3, [r4, #0]
 8004c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c6c:	d10a      	bne.n	8004c84 <_svfiprintf_r+0x130>
 8004c6e:	7863      	ldrb	r3, [r4, #1]
 8004c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c72:	d132      	bne.n	8004cda <_svfiprintf_r+0x186>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	1d1a      	adds	r2, r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	9203      	str	r2, [sp, #12]
 8004c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c80:	3402      	adds	r4, #2
 8004c82:	9305      	str	r3, [sp, #20]
 8004c84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d48 <_svfiprintf_r+0x1f4>
 8004c88:	7821      	ldrb	r1, [r4, #0]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	f7fb facf 	bl	8000230 <memchr>
 8004c92:	b138      	cbz	r0, 8004ca4 <_svfiprintf_r+0x150>
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	eba0 000a 	sub.w	r0, r0, sl
 8004c9a:	2240      	movs	r2, #64	@ 0x40
 8004c9c:	4082      	lsls	r2, r0
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	3401      	adds	r4, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca8:	4824      	ldr	r0, [pc, #144]	@ (8004d3c <_svfiprintf_r+0x1e8>)
 8004caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cae:	2206      	movs	r2, #6
 8004cb0:	f7fb fabe 	bl	8000230 <memchr>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d036      	beq.n	8004d26 <_svfiprintf_r+0x1d2>
 8004cb8:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <_svfiprintf_r+0x1ec>)
 8004cba:	bb1b      	cbnz	r3, 8004d04 <_svfiprintf_r+0x1b0>
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	3307      	adds	r3, #7
 8004cc0:	f023 0307 	bic.w	r3, r3, #7
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	9303      	str	r3, [sp, #12]
 8004cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cca:	4433      	add	r3, r6
 8004ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cce:	e76a      	b.n	8004ba6 <_svfiprintf_r+0x52>
 8004cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e7a8      	b.n	8004c2c <_svfiprintf_r+0xd8>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	3401      	adds	r4, #1
 8004cde:	9305      	str	r3, [sp, #20]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f04f 0c0a 	mov.w	ip, #10
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cec:	3a30      	subs	r2, #48	@ 0x30
 8004cee:	2a09      	cmp	r2, #9
 8004cf0:	d903      	bls.n	8004cfa <_svfiprintf_r+0x1a6>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0c6      	beq.n	8004c84 <_svfiprintf_r+0x130>
 8004cf6:	9105      	str	r1, [sp, #20]
 8004cf8:	e7c4      	b.n	8004c84 <_svfiprintf_r+0x130>
 8004cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cfe:	4604      	mov	r4, r0
 8004d00:	2301      	movs	r3, #1
 8004d02:	e7f0      	b.n	8004ce6 <_svfiprintf_r+0x192>
 8004d04:	ab03      	add	r3, sp, #12
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <_svfiprintf_r+0x1f0>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f3af 8000 	nop.w
 8004d14:	1c42      	adds	r2, r0, #1
 8004d16:	4606      	mov	r6, r0
 8004d18:	d1d6      	bne.n	8004cc8 <_svfiprintf_r+0x174>
 8004d1a:	89ab      	ldrh	r3, [r5, #12]
 8004d1c:	065b      	lsls	r3, r3, #25
 8004d1e:	f53f af2d 	bmi.w	8004b7c <_svfiprintf_r+0x28>
 8004d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d24:	e72c      	b.n	8004b80 <_svfiprintf_r+0x2c>
 8004d26:	ab03      	add	r3, sp, #12
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <_svfiprintf_r+0x1f0>)
 8004d2e:	a904      	add	r1, sp, #16
 8004d30:	4638      	mov	r0, r7
 8004d32:	f000 f91b 	bl	8004f6c <_printf_i>
 8004d36:	e7ed      	b.n	8004d14 <_svfiprintf_r+0x1c0>
 8004d38:	08005320 	.word	0x08005320
 8004d3c:	0800532a 	.word	0x0800532a
 8004d40:	00000000 	.word	0x00000000
 8004d44:	08004a9d 	.word	0x08004a9d
 8004d48:	08005326 	.word	0x08005326

08004d4c <sbrk_aligned>:
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8004d8c <sbrk_aligned+0x40>)
 8004d50:	460c      	mov	r4, r1
 8004d52:	6831      	ldr	r1, [r6, #0]
 8004d54:	4605      	mov	r5, r0
 8004d56:	b911      	cbnz	r1, 8004d5e <sbrk_aligned+0x12>
 8004d58:	f000 fa7c 	bl	8005254 <_sbrk_r>
 8004d5c:	6030      	str	r0, [r6, #0]
 8004d5e:	4621      	mov	r1, r4
 8004d60:	4628      	mov	r0, r5
 8004d62:	f000 fa77 	bl	8005254 <_sbrk_r>
 8004d66:	1c43      	adds	r3, r0, #1
 8004d68:	d103      	bne.n	8004d72 <sbrk_aligned+0x26>
 8004d6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004d6e:	4620      	mov	r0, r4
 8004d70:	bd70      	pop	{r4, r5, r6, pc}
 8004d72:	1cc4      	adds	r4, r0, #3
 8004d74:	f024 0403 	bic.w	r4, r4, #3
 8004d78:	42a0      	cmp	r0, r4
 8004d7a:	d0f8      	beq.n	8004d6e <sbrk_aligned+0x22>
 8004d7c:	1a21      	subs	r1, r4, r0
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 fa68 	bl	8005254 <_sbrk_r>
 8004d84:	3001      	adds	r0, #1
 8004d86:	d1f2      	bne.n	8004d6e <sbrk_aligned+0x22>
 8004d88:	e7ef      	b.n	8004d6a <sbrk_aligned+0x1e>
 8004d8a:	bf00      	nop
 8004d8c:	200003f0 	.word	0x200003f0

08004d90 <_malloc_r>:
 8004d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d94:	1ccd      	adds	r5, r1, #3
 8004d96:	f025 0503 	bic.w	r5, r5, #3
 8004d9a:	3508      	adds	r5, #8
 8004d9c:	2d0c      	cmp	r5, #12
 8004d9e:	bf38      	it	cc
 8004da0:	250c      	movcc	r5, #12
 8004da2:	2d00      	cmp	r5, #0
 8004da4:	4606      	mov	r6, r0
 8004da6:	db01      	blt.n	8004dac <_malloc_r+0x1c>
 8004da8:	42a9      	cmp	r1, r5
 8004daa:	d904      	bls.n	8004db6 <_malloc_r+0x26>
 8004dac:	230c      	movs	r3, #12
 8004dae:	6033      	str	r3, [r6, #0]
 8004db0:	2000      	movs	r0, #0
 8004db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e8c <_malloc_r+0xfc>
 8004dba:	f000 f9f7 	bl	80051ac <__malloc_lock>
 8004dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc2:	461c      	mov	r4, r3
 8004dc4:	bb44      	cbnz	r4, 8004e18 <_malloc_r+0x88>
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f7ff ffbf 	bl	8004d4c <sbrk_aligned>
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	d158      	bne.n	8004e86 <_malloc_r+0xf6>
 8004dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8004dd8:	4627      	mov	r7, r4
 8004dda:	2f00      	cmp	r7, #0
 8004ddc:	d143      	bne.n	8004e66 <_malloc_r+0xd6>
 8004dde:	2c00      	cmp	r4, #0
 8004de0:	d04b      	beq.n	8004e7a <_malloc_r+0xea>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	4639      	mov	r1, r7
 8004de6:	4630      	mov	r0, r6
 8004de8:	eb04 0903 	add.w	r9, r4, r3
 8004dec:	f000 fa32 	bl	8005254 <_sbrk_r>
 8004df0:	4581      	cmp	r9, r0
 8004df2:	d142      	bne.n	8004e7a <_malloc_r+0xea>
 8004df4:	6821      	ldr	r1, [r4, #0]
 8004df6:	1a6d      	subs	r5, r5, r1
 8004df8:	4629      	mov	r1, r5
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f7ff ffa6 	bl	8004d4c <sbrk_aligned>
 8004e00:	3001      	adds	r0, #1
 8004e02:	d03a      	beq.n	8004e7a <_malloc_r+0xea>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	442b      	add	r3, r5
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	bb62      	cbnz	r2, 8004e6c <_malloc_r+0xdc>
 8004e12:	f8c8 7000 	str.w	r7, [r8]
 8004e16:	e00f      	b.n	8004e38 <_malloc_r+0xa8>
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	1b52      	subs	r2, r2, r5
 8004e1c:	d420      	bmi.n	8004e60 <_malloc_r+0xd0>
 8004e1e:	2a0b      	cmp	r2, #11
 8004e20:	d917      	bls.n	8004e52 <_malloc_r+0xc2>
 8004e22:	1961      	adds	r1, r4, r5
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	6025      	str	r5, [r4, #0]
 8004e28:	bf18      	it	ne
 8004e2a:	6059      	strne	r1, [r3, #4]
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	bf08      	it	eq
 8004e30:	f8c8 1000 	streq.w	r1, [r8]
 8004e34:	5162      	str	r2, [r4, r5]
 8004e36:	604b      	str	r3, [r1, #4]
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 f9bd 	bl	80051b8 <__malloc_unlock>
 8004e3e:	f104 000b 	add.w	r0, r4, #11
 8004e42:	1d23      	adds	r3, r4, #4
 8004e44:	f020 0007 	bic.w	r0, r0, #7
 8004e48:	1ac2      	subs	r2, r0, r3
 8004e4a:	bf1c      	itt	ne
 8004e4c:	1a1b      	subne	r3, r3, r0
 8004e4e:	50a3      	strne	r3, [r4, r2]
 8004e50:	e7af      	b.n	8004db2 <_malloc_r+0x22>
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	bf0c      	ite	eq
 8004e58:	f8c8 2000 	streq.w	r2, [r8]
 8004e5c:	605a      	strne	r2, [r3, #4]
 8004e5e:	e7eb      	b.n	8004e38 <_malloc_r+0xa8>
 8004e60:	4623      	mov	r3, r4
 8004e62:	6864      	ldr	r4, [r4, #4]
 8004e64:	e7ae      	b.n	8004dc4 <_malloc_r+0x34>
 8004e66:	463c      	mov	r4, r7
 8004e68:	687f      	ldr	r7, [r7, #4]
 8004e6a:	e7b6      	b.n	8004dda <_malloc_r+0x4a>
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	d1fb      	bne.n	8004e6c <_malloc_r+0xdc>
 8004e74:	2300      	movs	r3, #0
 8004e76:	6053      	str	r3, [r2, #4]
 8004e78:	e7de      	b.n	8004e38 <_malloc_r+0xa8>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	6033      	str	r3, [r6, #0]
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f000 f99a 	bl	80051b8 <__malloc_unlock>
 8004e84:	e794      	b.n	8004db0 <_malloc_r+0x20>
 8004e86:	6005      	str	r5, [r0, #0]
 8004e88:	e7d6      	b.n	8004e38 <_malloc_r+0xa8>
 8004e8a:	bf00      	nop
 8004e8c:	200003f4 	.word	0x200003f4

08004e90 <_printf_common>:
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	4616      	mov	r6, r2
 8004e96:	4698      	mov	r8, r3
 8004e98:	688a      	ldr	r2, [r1, #8]
 8004e9a:	690b      	ldr	r3, [r1, #16]
 8004e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	bfb8      	it	lt
 8004ea4:	4613      	movlt	r3, r2
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004eac:	4607      	mov	r7, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b10a      	cbz	r2, 8004eb6 <_printf_common+0x26>
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	0699      	lsls	r1, r3, #26
 8004eba:	bf42      	ittt	mi
 8004ebc:	6833      	ldrmi	r3, [r6, #0]
 8004ebe:	3302      	addmi	r3, #2
 8004ec0:	6033      	strmi	r3, [r6, #0]
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	f015 0506 	ands.w	r5, r5, #6
 8004ec8:	d106      	bne.n	8004ed8 <_printf_common+0x48>
 8004eca:	f104 0a19 	add.w	sl, r4, #25
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	6832      	ldr	r2, [r6, #0]
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	42ab      	cmp	r3, r5
 8004ed6:	dc26      	bgt.n	8004f26 <_printf_common+0x96>
 8004ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004edc:	6822      	ldr	r2, [r4, #0]
 8004ede:	3b00      	subs	r3, #0
 8004ee0:	bf18      	it	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	0692      	lsls	r2, r2, #26
 8004ee6:	d42b      	bmi.n	8004f40 <_printf_common+0xb0>
 8004ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004eec:	4641      	mov	r1, r8
 8004eee:	4638      	mov	r0, r7
 8004ef0:	47c8      	blx	r9
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d01e      	beq.n	8004f34 <_printf_common+0xa4>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	6922      	ldr	r2, [r4, #16]
 8004efa:	f003 0306 	and.w	r3, r3, #6
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	bf02      	ittt	eq
 8004f02:	68e5      	ldreq	r5, [r4, #12]
 8004f04:	6833      	ldreq	r3, [r6, #0]
 8004f06:	1aed      	subeq	r5, r5, r3
 8004f08:	68a3      	ldr	r3, [r4, #8]
 8004f0a:	bf0c      	ite	eq
 8004f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f10:	2500      	movne	r5, #0
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bfc4      	itt	gt
 8004f16:	1a9b      	subgt	r3, r3, r2
 8004f18:	18ed      	addgt	r5, r5, r3
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	341a      	adds	r4, #26
 8004f1e:	42b5      	cmp	r5, r6
 8004f20:	d11a      	bne.n	8004f58 <_printf_common+0xc8>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e008      	b.n	8004f38 <_printf_common+0xa8>
 8004f26:	2301      	movs	r3, #1
 8004f28:	4652      	mov	r2, sl
 8004f2a:	4641      	mov	r1, r8
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	47c8      	blx	r9
 8004f30:	3001      	adds	r0, #1
 8004f32:	d103      	bne.n	8004f3c <_printf_common+0xac>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	e7c6      	b.n	8004ece <_printf_common+0x3e>
 8004f40:	18e1      	adds	r1, r4, r3
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	2030      	movs	r0, #48	@ 0x30
 8004f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f4a:	4422      	add	r2, r4
 8004f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f54:	3302      	adds	r3, #2
 8004f56:	e7c7      	b.n	8004ee8 <_printf_common+0x58>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	4638      	mov	r0, r7
 8004f60:	47c8      	blx	r9
 8004f62:	3001      	adds	r0, #1
 8004f64:	d0e6      	beq.n	8004f34 <_printf_common+0xa4>
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7d9      	b.n	8004f1e <_printf_common+0x8e>
	...

08004f6c <_printf_i>:
 8004f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f70:	7e0f      	ldrb	r7, [r1, #24]
 8004f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f74:	2f78      	cmp	r7, #120	@ 0x78
 8004f76:	4691      	mov	r9, r2
 8004f78:	4680      	mov	r8, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	469a      	mov	sl, r3
 8004f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f82:	d807      	bhi.n	8004f94 <_printf_i+0x28>
 8004f84:	2f62      	cmp	r7, #98	@ 0x62
 8004f86:	d80a      	bhi.n	8004f9e <_printf_i+0x32>
 8004f88:	2f00      	cmp	r7, #0
 8004f8a:	f000 80d2 	beq.w	8005132 <_printf_i+0x1c6>
 8004f8e:	2f58      	cmp	r7, #88	@ 0x58
 8004f90:	f000 80b9 	beq.w	8005106 <_printf_i+0x19a>
 8004f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f9c:	e03a      	b.n	8005014 <_printf_i+0xa8>
 8004f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fa2:	2b15      	cmp	r3, #21
 8004fa4:	d8f6      	bhi.n	8004f94 <_printf_i+0x28>
 8004fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8004fac <_printf_i+0x40>)
 8004fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fac:	08005005 	.word	0x08005005
 8004fb0:	08005019 	.word	0x08005019
 8004fb4:	08004f95 	.word	0x08004f95
 8004fb8:	08004f95 	.word	0x08004f95
 8004fbc:	08004f95 	.word	0x08004f95
 8004fc0:	08004f95 	.word	0x08004f95
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08004f95 	.word	0x08004f95
 8004fcc:	08004f95 	.word	0x08004f95
 8004fd0:	08004f95 	.word	0x08004f95
 8004fd4:	08004f95 	.word	0x08004f95
 8004fd8:	08005119 	.word	0x08005119
 8004fdc:	08005043 	.word	0x08005043
 8004fe0:	080050d3 	.word	0x080050d3
 8004fe4:	08004f95 	.word	0x08004f95
 8004fe8:	08004f95 	.word	0x08004f95
 8004fec:	0800513b 	.word	0x0800513b
 8004ff0:	08004f95 	.word	0x08004f95
 8004ff4:	08005043 	.word	0x08005043
 8004ff8:	08004f95 	.word	0x08004f95
 8004ffc:	08004f95 	.word	0x08004f95
 8005000:	080050db 	.word	0x080050db
 8005004:	6833      	ldr	r3, [r6, #0]
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6032      	str	r2, [r6, #0]
 800500c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005014:	2301      	movs	r3, #1
 8005016:	e09d      	b.n	8005154 <_printf_i+0x1e8>
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	1d19      	adds	r1, r3, #4
 800501e:	6031      	str	r1, [r6, #0]
 8005020:	0606      	lsls	r6, r0, #24
 8005022:	d501      	bpl.n	8005028 <_printf_i+0xbc>
 8005024:	681d      	ldr	r5, [r3, #0]
 8005026:	e003      	b.n	8005030 <_printf_i+0xc4>
 8005028:	0645      	lsls	r5, r0, #25
 800502a:	d5fb      	bpl.n	8005024 <_printf_i+0xb8>
 800502c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005030:	2d00      	cmp	r5, #0
 8005032:	da03      	bge.n	800503c <_printf_i+0xd0>
 8005034:	232d      	movs	r3, #45	@ 0x2d
 8005036:	426d      	negs	r5, r5
 8005038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800503c:	4859      	ldr	r0, [pc, #356]	@ (80051a4 <_printf_i+0x238>)
 800503e:	230a      	movs	r3, #10
 8005040:	e011      	b.n	8005066 <_printf_i+0xfa>
 8005042:	6821      	ldr	r1, [r4, #0]
 8005044:	6833      	ldr	r3, [r6, #0]
 8005046:	0608      	lsls	r0, r1, #24
 8005048:	f853 5b04 	ldr.w	r5, [r3], #4
 800504c:	d402      	bmi.n	8005054 <_printf_i+0xe8>
 800504e:	0649      	lsls	r1, r1, #25
 8005050:	bf48      	it	mi
 8005052:	b2ad      	uxthmi	r5, r5
 8005054:	2f6f      	cmp	r7, #111	@ 0x6f
 8005056:	4853      	ldr	r0, [pc, #332]	@ (80051a4 <_printf_i+0x238>)
 8005058:	6033      	str	r3, [r6, #0]
 800505a:	bf14      	ite	ne
 800505c:	230a      	movne	r3, #10
 800505e:	2308      	moveq	r3, #8
 8005060:	2100      	movs	r1, #0
 8005062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005066:	6866      	ldr	r6, [r4, #4]
 8005068:	60a6      	str	r6, [r4, #8]
 800506a:	2e00      	cmp	r6, #0
 800506c:	bfa2      	ittt	ge
 800506e:	6821      	ldrge	r1, [r4, #0]
 8005070:	f021 0104 	bicge.w	r1, r1, #4
 8005074:	6021      	strge	r1, [r4, #0]
 8005076:	b90d      	cbnz	r5, 800507c <_printf_i+0x110>
 8005078:	2e00      	cmp	r6, #0
 800507a:	d04b      	beq.n	8005114 <_printf_i+0x1a8>
 800507c:	4616      	mov	r6, r2
 800507e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005082:	fb03 5711 	mls	r7, r3, r1, r5
 8005086:	5dc7      	ldrb	r7, [r0, r7]
 8005088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800508c:	462f      	mov	r7, r5
 800508e:	42bb      	cmp	r3, r7
 8005090:	460d      	mov	r5, r1
 8005092:	d9f4      	bls.n	800507e <_printf_i+0x112>
 8005094:	2b08      	cmp	r3, #8
 8005096:	d10b      	bne.n	80050b0 <_printf_i+0x144>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	07df      	lsls	r7, r3, #31
 800509c:	d508      	bpl.n	80050b0 <_printf_i+0x144>
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	6861      	ldr	r1, [r4, #4]
 80050a2:	4299      	cmp	r1, r3
 80050a4:	bfde      	ittt	le
 80050a6:	2330      	movle	r3, #48	@ 0x30
 80050a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80050b0:	1b92      	subs	r2, r2, r6
 80050b2:	6122      	str	r2, [r4, #16]
 80050b4:	f8cd a000 	str.w	sl, [sp]
 80050b8:	464b      	mov	r3, r9
 80050ba:	aa03      	add	r2, sp, #12
 80050bc:	4621      	mov	r1, r4
 80050be:	4640      	mov	r0, r8
 80050c0:	f7ff fee6 	bl	8004e90 <_printf_common>
 80050c4:	3001      	adds	r0, #1
 80050c6:	d14a      	bne.n	800515e <_printf_i+0x1f2>
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050cc:	b004      	add	sp, #16
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	f043 0320 	orr.w	r3, r3, #32
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	4833      	ldr	r0, [pc, #204]	@ (80051a8 <_printf_i+0x23c>)
 80050dc:	2778      	movs	r7, #120	@ 0x78
 80050de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	6831      	ldr	r1, [r6, #0]
 80050e6:	061f      	lsls	r7, r3, #24
 80050e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80050ec:	d402      	bmi.n	80050f4 <_printf_i+0x188>
 80050ee:	065f      	lsls	r7, r3, #25
 80050f0:	bf48      	it	mi
 80050f2:	b2ad      	uxthmi	r5, r5
 80050f4:	6031      	str	r1, [r6, #0]
 80050f6:	07d9      	lsls	r1, r3, #31
 80050f8:	bf44      	itt	mi
 80050fa:	f043 0320 	orrmi.w	r3, r3, #32
 80050fe:	6023      	strmi	r3, [r4, #0]
 8005100:	b11d      	cbz	r5, 800510a <_printf_i+0x19e>
 8005102:	2310      	movs	r3, #16
 8005104:	e7ac      	b.n	8005060 <_printf_i+0xf4>
 8005106:	4827      	ldr	r0, [pc, #156]	@ (80051a4 <_printf_i+0x238>)
 8005108:	e7e9      	b.n	80050de <_printf_i+0x172>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	f023 0320 	bic.w	r3, r3, #32
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	e7f6      	b.n	8005102 <_printf_i+0x196>
 8005114:	4616      	mov	r6, r2
 8005116:	e7bd      	b.n	8005094 <_printf_i+0x128>
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	6825      	ldr	r5, [r4, #0]
 800511c:	6961      	ldr	r1, [r4, #20]
 800511e:	1d18      	adds	r0, r3, #4
 8005120:	6030      	str	r0, [r6, #0]
 8005122:	062e      	lsls	r6, r5, #24
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	d501      	bpl.n	800512c <_printf_i+0x1c0>
 8005128:	6019      	str	r1, [r3, #0]
 800512a:	e002      	b.n	8005132 <_printf_i+0x1c6>
 800512c:	0668      	lsls	r0, r5, #25
 800512e:	d5fb      	bpl.n	8005128 <_printf_i+0x1bc>
 8005130:	8019      	strh	r1, [r3, #0]
 8005132:	2300      	movs	r3, #0
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	4616      	mov	r6, r2
 8005138:	e7bc      	b.n	80050b4 <_printf_i+0x148>
 800513a:	6833      	ldr	r3, [r6, #0]
 800513c:	1d1a      	adds	r2, r3, #4
 800513e:	6032      	str	r2, [r6, #0]
 8005140:	681e      	ldr	r6, [r3, #0]
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	2100      	movs	r1, #0
 8005146:	4630      	mov	r0, r6
 8005148:	f7fb f872 	bl	8000230 <memchr>
 800514c:	b108      	cbz	r0, 8005152 <_printf_i+0x1e6>
 800514e:	1b80      	subs	r0, r0, r6
 8005150:	6060      	str	r0, [r4, #4]
 8005152:	6863      	ldr	r3, [r4, #4]
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	2300      	movs	r3, #0
 8005158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800515c:	e7aa      	b.n	80050b4 <_printf_i+0x148>
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	4632      	mov	r2, r6
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	47d0      	blx	sl
 8005168:	3001      	adds	r0, #1
 800516a:	d0ad      	beq.n	80050c8 <_printf_i+0x15c>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	079b      	lsls	r3, r3, #30
 8005170:	d413      	bmi.n	800519a <_printf_i+0x22e>
 8005172:	68e0      	ldr	r0, [r4, #12]
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	4298      	cmp	r0, r3
 8005178:	bfb8      	it	lt
 800517a:	4618      	movlt	r0, r3
 800517c:	e7a6      	b.n	80050cc <_printf_i+0x160>
 800517e:	2301      	movs	r3, #1
 8005180:	4632      	mov	r2, r6
 8005182:	4649      	mov	r1, r9
 8005184:	4640      	mov	r0, r8
 8005186:	47d0      	blx	sl
 8005188:	3001      	adds	r0, #1
 800518a:	d09d      	beq.n	80050c8 <_printf_i+0x15c>
 800518c:	3501      	adds	r5, #1
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	9903      	ldr	r1, [sp, #12]
 8005192:	1a5b      	subs	r3, r3, r1
 8005194:	42ab      	cmp	r3, r5
 8005196:	dcf2      	bgt.n	800517e <_printf_i+0x212>
 8005198:	e7eb      	b.n	8005172 <_printf_i+0x206>
 800519a:	2500      	movs	r5, #0
 800519c:	f104 0619 	add.w	r6, r4, #25
 80051a0:	e7f5      	b.n	800518e <_printf_i+0x222>
 80051a2:	bf00      	nop
 80051a4:	08005331 	.word	0x08005331
 80051a8:	08005342 	.word	0x08005342

080051ac <__malloc_lock>:
 80051ac:	4801      	ldr	r0, [pc, #4]	@ (80051b4 <__malloc_lock+0x8>)
 80051ae:	f7ff bc29 	b.w	8004a04 <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	200003ec 	.word	0x200003ec

080051b8 <__malloc_unlock>:
 80051b8:	4801      	ldr	r0, [pc, #4]	@ (80051c0 <__malloc_unlock+0x8>)
 80051ba:	f7ff bc24 	b.w	8004a06 <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	200003ec 	.word	0x200003ec

080051c4 <_realloc_r>:
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	4680      	mov	r8, r0
 80051ca:	4615      	mov	r5, r2
 80051cc:	460c      	mov	r4, r1
 80051ce:	b921      	cbnz	r1, 80051da <_realloc_r+0x16>
 80051d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	4611      	mov	r1, r2
 80051d6:	f7ff bddb 	b.w	8004d90 <_malloc_r>
 80051da:	b92a      	cbnz	r2, 80051e8 <_realloc_r+0x24>
 80051dc:	f7ff fc14 	bl	8004a08 <_free_r>
 80051e0:	2400      	movs	r4, #0
 80051e2:	4620      	mov	r0, r4
 80051e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051e8:	f000 f852 	bl	8005290 <_malloc_usable_size_r>
 80051ec:	4285      	cmp	r5, r0
 80051ee:	4606      	mov	r6, r0
 80051f0:	d802      	bhi.n	80051f8 <_realloc_r+0x34>
 80051f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80051f6:	d8f4      	bhi.n	80051e2 <_realloc_r+0x1e>
 80051f8:	4629      	mov	r1, r5
 80051fa:	4640      	mov	r0, r8
 80051fc:	f7ff fdc8 	bl	8004d90 <_malloc_r>
 8005200:	4607      	mov	r7, r0
 8005202:	2800      	cmp	r0, #0
 8005204:	d0ec      	beq.n	80051e0 <_realloc_r+0x1c>
 8005206:	42b5      	cmp	r5, r6
 8005208:	462a      	mov	r2, r5
 800520a:	4621      	mov	r1, r4
 800520c:	bf28      	it	cs
 800520e:	4632      	movcs	r2, r6
 8005210:	f000 f830 	bl	8005274 <memcpy>
 8005214:	4621      	mov	r1, r4
 8005216:	4640      	mov	r0, r8
 8005218:	f7ff fbf6 	bl	8004a08 <_free_r>
 800521c:	463c      	mov	r4, r7
 800521e:	e7e0      	b.n	80051e2 <_realloc_r+0x1e>

08005220 <memmove>:
 8005220:	4288      	cmp	r0, r1
 8005222:	b510      	push	{r4, lr}
 8005224:	eb01 0402 	add.w	r4, r1, r2
 8005228:	d902      	bls.n	8005230 <memmove+0x10>
 800522a:	4284      	cmp	r4, r0
 800522c:	4623      	mov	r3, r4
 800522e:	d807      	bhi.n	8005240 <memmove+0x20>
 8005230:	1e43      	subs	r3, r0, #1
 8005232:	42a1      	cmp	r1, r4
 8005234:	d008      	beq.n	8005248 <memmove+0x28>
 8005236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800523a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800523e:	e7f8      	b.n	8005232 <memmove+0x12>
 8005240:	4402      	add	r2, r0
 8005242:	4601      	mov	r1, r0
 8005244:	428a      	cmp	r2, r1
 8005246:	d100      	bne.n	800524a <memmove+0x2a>
 8005248:	bd10      	pop	{r4, pc}
 800524a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800524e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005252:	e7f7      	b.n	8005244 <memmove+0x24>

08005254 <_sbrk_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	@ (8005270 <_sbrk_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb fb5a 	bl	8000918 <_sbrk>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_sbrk_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_sbrk_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	200003e8 	.word	0x200003e8

08005274 <memcpy>:
 8005274:	440a      	add	r2, r1
 8005276:	4291      	cmp	r1, r2
 8005278:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800527c:	d100      	bne.n	8005280 <memcpy+0xc>
 800527e:	4770      	bx	lr
 8005280:	b510      	push	{r4, lr}
 8005282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800528a:	4291      	cmp	r1, r2
 800528c:	d1f9      	bne.n	8005282 <memcpy+0xe>
 800528e:	bd10      	pop	{r4, pc}

08005290 <_malloc_usable_size_r>:
 8005290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005294:	1f18      	subs	r0, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	bfbc      	itt	lt
 800529a:	580b      	ldrlt	r3, [r1, r0]
 800529c:	18c0      	addlt	r0, r0, r3
 800529e:	4770      	bx	lr

080052a0 <_init>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	bf00      	nop
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr

080052ac <_fini>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr
