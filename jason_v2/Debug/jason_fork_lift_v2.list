
jason_fork_lift_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000903c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08009220  08009220  0000a220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009460  08009460  0000b0f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009460  08009460  0000a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009468  08009468  0000b0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009468  08009468  0000a468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800946c  0800946c  0000a46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  08009470  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  200000f0  08009560  0000b0f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  08009560  0000b5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014db5  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa8  00000000  00000000  0001fed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00022e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd0  00000000  00000000  00024088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fdc  00000000  00000000  00024e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017437  00000000  00000000  00047e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc01e  00000000  00000000  0005f26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c0  00000000  00000000  0013b2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f0 	.word	0x200000f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009204 	.word	0x08009204

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f4 	.word	0x200000f4
 800021c:	08009204 	.word	0x08009204

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b098      	sub	sp, #96	@ 0x60
 8000fcc:	af08      	add	r7, sp, #32
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <parse_controller_data+0x16>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 8000fde:	4887      	ldr	r0, [pc, #540]	@ (80011fc <parse_controller_data+0x234>)
 8000fe0:	f006 fe0e 	bl	8007c00 <puts>
    return 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e105      	b.n	80011f4 <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 8000fe8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000fec:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	9306      	str	r3, [sp, #24]
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	9305      	str	r3, [sp, #20]
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	9304      	str	r3, [sp, #16]
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	460b      	mov	r3, r1
 800101c:	4978      	ldr	r1, [pc, #480]	@ (8001200 <parse_controller_data+0x238>)
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f006 fbe0 	bl	80077e4 <siscanf>
 8001024:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 8001026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001028:	2b09      	cmp	r3, #9
 800102a:	d004      	beq.n	8001036 <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 800102c:	4875      	ldr	r0, [pc, #468]	@ (8001204 <parse_controller_data+0x23c>)
 800102e:	f006 fde7 	bl	8007c00 <puts>
    return 2;
 8001032:	2302      	movs	r3, #2
 8001034:	e0de      	b.n	80011f4 <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 8001036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2da      	uxtb	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 800104a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2da      	uxtb	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 800105e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	b2da      	uxtb	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 8001072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2da      	uxtb	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 8001086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2da      	uxtb	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 800109a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 80010ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 80010c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 80010d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf14      	ite	ne
 80010e0:	2301      	movne	r3, #1
 80010e2:	2300      	moveq	r3, #0
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 80010ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf14      	ite	ne
 80010f4:	2301      	movne	r3, #1
 80010f6:	2300      	moveq	r3, #0
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 80010fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf14      	ite	ne
 8001108:	2301      	movne	r3, #1
 800110a:	2300      	moveq	r3, #0
 800110c:	b2da      	uxtb	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 8001112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2da      	uxtb	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 8001126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2da      	uxtb	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 800113a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 800114e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001152:	220a      	movs	r2, #10
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f006 fcd4 	bl	8007b04 <strtol>
 800115c:	4603      	mov	r3, r0
 800115e:	b25a      	sxtb	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 8001164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001168:	220a      	movs	r2, #10
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f006 fcc9 	bl	8007b04 <strtol>
 8001172:	4603      	mov	r3, r0
 8001174:	b25a      	sxtb	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	220a      	movs	r2, #10
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f006 fcbe 	bl	8007b04 <strtol>
 8001188:	4603      	mov	r3, r0
 800118a:	b25a      	sxtb	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	220a      	movs	r2, #10
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f006 fcb3 	bl	8007b04 <strtol>
 800119e:	4603      	mov	r3, r0
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	761a      	strb	r2, [r3, #24]

  return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3740      	adds	r7, #64	@ 0x40
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08009220 	.word	0x08009220
 8001200:	08009240 	.word	0x08009240
 8001204:	08009268 	.word	0x08009268

08001208 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 800121a:	f002 fd55 	bl	8003cc8 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f240 8095 	bls.w	800135e <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	429a      	cmp	r2, r3
 800123c:	d102      	bne.n	8001244 <update_encoder+0x3c>
    num_pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e035      	b.n	80012b0 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	429a      	cmp	r2, r3
 800124c:	dd18      	ble.n	8001280 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b10      	cmp	r3, #16
 800125c:	d10a      	bne.n	8001274 <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6892      	ldr	r2, [r2, #8]
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e01d      	b.n	80012b0 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e017      	b.n	80012b0 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b10      	cmp	r3, #16
 800128e:	d105      	bne.n	800129c <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e009      	b.n	80012b0 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6892      	ldr	r2, [r2, #8]
 80012a8:	1a9a      	subs	r2, r3, r2
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4413      	add	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	8a9b      	ldrh	r3, [r3, #20]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012ca:	ee16 0a90 	vmov	r0, s13
 80012ce:	f7ff f963 	bl	8000598 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	f7ff f801 	bl	80002dc <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a322      	add	r3, pc, #136	@ (adr r3, 800136c <update_encoder+0x164>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f9ae 	bl	8000648 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fca0 	bl	8000c38 <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	edd7 7a02 	vldr	s15, [r7, #8]
 800130c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f7ff f93e 	bl	8000598 <__aeabi_f2d>
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <update_encoder+0x160>)
 8001322:	f7ff f991 	bl	8000648 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	461d      	mov	r5, r3
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff f910 	bl	8000554 <__aeabi_ui2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7ff faae 	bl	800089c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc76 	bl	8000c38 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 8001352:	f002 fcb9 	bl	8003cc8 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	e000      	b.n	8001360 <update_encoder+0x158>
    return;
 800135e:	bf00      	nop
}
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bdb0      	pop	{r4, r5, r7, pc}
 8001366:	bf00      	nop
 8001368:	408f4000 	.word	0x408f4000
 800136c:	54442d18 	.word	0x54442d18
 8001370:	400921fb 	.word	0x400921fb

08001374 <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b095      	sub	sp, #84	@ 0x54
 8001378:	af00      	add	r7, sp, #0
 800137a:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d107      	bne.n	8001392 <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 8001382:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e030      	b.n	80013f4 <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 8001392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013a4:	e00d      	b.n	80013c2 <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 80013a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	4413      	add	r3, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff26 	bl	8001208 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80013bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013be:	3301      	adds	r3, #1
 80013c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	ddee      	ble.n	80013a6 <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3318      	adds	r3, #24
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3330      	adds	r3, #48	@ 0x30
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3348      	adds	r3, #72	@ 0x48
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 80013e6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80013ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80013f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80013f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013fc:	ee06 0a10 	vmov	s12, r0
 8001400:	ee06 1a90 	vmov	s13, r1
 8001404:	ee07 2a10 	vmov	s14, r2
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb0 0a46 	vmov.f32	s0, s12
 8001410:	eef0 0a66 	vmov.f32	s1, s13
 8001414:	eeb0 1a47 	vmov.f32	s2, s14
 8001418:	eef0 1a67 	vmov.f32	s3, s15
 800141c:	3754      	adds	r7, #84	@ 0x54
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
	...

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4b50      	ldr	r3, [pc, #320]	@ (800157c <MX_GPIO_Init+0x158>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a4f      	ldr	r2, [pc, #316]	@ (800157c <MX_GPIO_Init+0x158>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b4d      	ldr	r3, [pc, #308]	@ (800157c <MX_GPIO_Init+0x158>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b4a      	ldr	r3, [pc, #296]	@ (800157c <MX_GPIO_Init+0x158>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a49      	ldr	r2, [pc, #292]	@ (800157c <MX_GPIO_Init+0x158>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b47      	ldr	r3, [pc, #284]	@ (800157c <MX_GPIO_Init+0x158>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b44      	ldr	r3, [pc, #272]	@ (800157c <MX_GPIO_Init+0x158>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a43      	ldr	r2, [pc, #268]	@ (800157c <MX_GPIO_Init+0x158>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <MX_GPIO_Init+0x158>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b3e      	ldr	r3, [pc, #248]	@ (800157c <MX_GPIO_Init+0x158>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a3d      	ldr	r2, [pc, #244]	@ (800157c <MX_GPIO_Init+0x158>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <MX_GPIO_Init+0x158>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b38      	ldr	r3, [pc, #224]	@ (800157c <MX_GPIO_Init+0x158>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a37      	ldr	r2, [pc, #220]	@ (800157c <MX_GPIO_Init+0x158>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b35      	ldr	r3, [pc, #212]	@ (800157c <MX_GPIO_Init+0x158>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2108      	movs	r1, #8
 80014b6:	4832      	ldr	r0, [pc, #200]	@ (8001580 <MX_GPIO_Init+0x15c>)
 80014b8:	f002 fe9a 	bl	80041f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f002 fe93 	bl	80041f0 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80014d0:	482c      	ldr	r0, [pc, #176]	@ (8001584 <MX_GPIO_Init+0x160>)
 80014d2:	f002 fe8d 	bl	80041f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014dc:	482a      	ldr	r0, [pc, #168]	@ (8001588 <MX_GPIO_Init+0x164>)
 80014de:	f002 fe87 	bl	80041f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 80014e2:	2308      	movs	r3, #8
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4821      	ldr	r0, [pc, #132]	@ (8001580 <MX_GPIO_Init+0x15c>)
 80014fa:	f002 fcf7 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80014fe:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8001502:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151a:	f002 fce7 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 800151e:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4813      	ldr	r0, [pc, #76]	@ (8001584 <MX_GPIO_Init+0x160>)
 8001538:	f002 fcd8 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 800153c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <MX_GPIO_Init+0x164>)
 8001556:	f002 fcc9 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800155a:	2340      	movs	r3, #64	@ 0x40
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	@ (8001588 <MX_GPIO_Init+0x164>)
 8001570:	f002 fcbc 	bl	8003eec <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	48000800 	.word	0x48000800
 8001584:	48001000 	.word	0x48001000
 8001588:	48000c00 	.word	0x48000c00

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b092      	sub	sp, #72	@ 0x48
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001592:	f002 fb34 	bl	8003bfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001596:	f000 f96d 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f7ff ff43 	bl	8001424 <MX_GPIO_Init>
  MX_TIM1_Init();
 800159e:	f001 fe0b 	bl	80031b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015a2:	f001 fee5 	bl	8003370 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015a6:	f001 ff65 	bl	8003474 <MX_TIM4_Init>
  MX_TIM5_Init();
 80015aa:	f001 ffb9 	bl	8003520 <MX_TIM5_Init>
  MX_TIM8_Init();
 80015ae:	f002 f80d 	bl	80035cc <MX_TIM8_Init>
  MX_TIM2_Init();
 80015b2:	f001 fe5b 	bl	800326c <MX_TIM2_Init>
  MX_UART4_Init();
 80015b6:	f002 f9c9 	bl	800394c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80015ba:	f002 fa13 	bl	80039e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015be:	210c      	movs	r1, #12
 80015c0:	4899      	ldr	r0, [pc, #612]	@ (8001828 <main+0x29c>)
 80015c2:	f003 ff8f 	bl	80054e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015c6:	2100      	movs	r1, #0
 80015c8:	4898      	ldr	r0, [pc, #608]	@ (800182c <main+0x2a0>)
 80015ca:	f003 ff8b 	bl	80054e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015ce:	2104      	movs	r1, #4
 80015d0:	4896      	ldr	r0, [pc, #600]	@ (800182c <main+0x2a0>)
 80015d2:	f003 ff87 	bl	80054e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015d6:	2104      	movs	r1, #4
 80015d8:	4893      	ldr	r0, [pc, #588]	@ (8001828 <main+0x29c>)
 80015da:	f003 ff83 	bl	80054e4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80015de:	4894      	ldr	r0, [pc, #592]	@ (8001830 <main+0x2a4>)
 80015e0:	f003 fea6 	bl	8005330 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80015e4:	213c      	movs	r1, #60	@ 0x3c
 80015e6:	4892      	ldr	r0, [pc, #584]	@ (8001830 <main+0x2a4>)
 80015e8:	f004 f934 	bl	8005854 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80015ec:	4891      	ldr	r0, [pc, #580]	@ (8001834 <main+0x2a8>)
 80015ee:	f003 fe9f 	bl	8005330 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80015f2:	213c      	movs	r1, #60	@ 0x3c
 80015f4:	488f      	ldr	r0, [pc, #572]	@ (8001834 <main+0x2a8>)
 80015f6:	f004 f92d 	bl	8005854 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80015fa:	488f      	ldr	r0, [pc, #572]	@ (8001838 <main+0x2ac>)
 80015fc:	f003 fe98 	bl	8005330 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001600:	213c      	movs	r1, #60	@ 0x3c
 8001602:	488d      	ldr	r0, [pc, #564]	@ (8001838 <main+0x2ac>)
 8001604:	f004 f926 	bl	8005854 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8001608:	488c      	ldr	r0, [pc, #560]	@ (800183c <main+0x2b0>)
 800160a:	f003 fe91 	bl	8005330 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800160e:	213c      	movs	r1, #60	@ 0x3c
 8001610:	488a      	ldr	r0, [pc, #552]	@ (800183c <main+0x2b0>)
 8001612:	f004 f91f 	bl	8005854 <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2108      	movs	r1, #8
 800161a:	4889      	ldr	r0, [pc, #548]	@ (8001840 <main+0x2b4>)
 800161c:	f002 fde8 	bl	80041f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001626:	4887      	ldr	r0, [pc, #540]	@ (8001844 <main+0x2b8>)
 8001628:	f002 fde2 	bl	80041f0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001632:	4885      	ldr	r0, [pc, #532]	@ (8001848 <main+0x2bc>)
 8001634:	f002 fddc 	bl	80041f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800163e:	4882      	ldr	r0, [pc, #520]	@ (8001848 <main+0x2bc>)
 8001640:	f002 fdd6 	bl	80041f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164a:	487f      	ldr	r0, [pc, #508]	@ (8001848 <main+0x2bc>)
 800164c:	f002 fdd0 	bl	80041f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	487c      	ldr	r0, [pc, #496]	@ (8001848 <main+0x2bc>)
 8001656:	f002 fdcb 	bl	80041f0 <HAL_GPIO_WritePin>

  servo_reset_all();
 800165a:	f001 fc83 	bl	8002f64 <servo_reset_all>
  HAL_Delay(1000);
 800165e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001662:	f002 fb3d 	bl	8003ce0 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f002 fb3a 	bl	8003ce0 <HAL_Delay>
    read_current_velocity(encoders);
 800166c:	4877      	ldr	r0, [pc, #476]	@ (800184c <main+0x2c0>)
 800166e:	f7ff fe81 	bl	8001374 <read_current_velocity>
    //     test_base_vel.y_vel = 0;
    //     test_base_vel.z_vel = 0;
    //     break;
    // }

    HAL_UART_Receive(&huart1, (uint8_t *)&controller_buffer, sizeof(controller_buffer), 0xFFFF);
 8001672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001676:	2229      	movs	r2, #41	@ 0x29
 8001678:	4975      	ldr	r1, [pc, #468]	@ (8001850 <main+0x2c4>)
 800167a:	4876      	ldr	r0, [pc, #472]	@ (8001854 <main+0x2c8>)
 800167c:	f005 f9cc 	bl	8006a18 <HAL_UART_Receive>
    parse_controller_data(controller_buffer, &controller_state);
 8001680:	4975      	ldr	r1, [pc, #468]	@ (8001858 <main+0x2cc>)
 8001682:	4873      	ldr	r0, [pc, #460]	@ (8001850 <main+0x2c4>)
 8001684:	f7ff fca0 	bl	8000fc8 <parse_controller_data>

    if (controller_state.options_button && !prev_turn_on) {
 8001688:	4b73      	ldr	r3, [pc, #460]	@ (8001858 <main+0x2cc>)
 800168a:	7e1b      	ldrb	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <main+0x146>
 8001690:	4b72      	ldr	r3, [pc, #456]	@ (800185c <main+0x2d0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d019      	beq.n	80016d2 <main+0x146>
      turn_on = !turn_on;
 800169e:	4b70      	ldr	r3, [pc, #448]	@ (8001860 <main+0x2d4>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bf14      	ite	ne
 80016a6:	2301      	movne	r3, #1
 80016a8:	2300      	moveq	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f083 0301 	eor.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b69      	ldr	r3, [pc, #420]	@ (8001860 <main+0x2d4>)
 80016ba:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80016bc:	4b68      	ldr	r3, [pc, #416]	@ (8001860 <main+0x2d4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f083 0301 	eor.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016cc:	485e      	ldr	r0, [pc, #376]	@ (8001848 <main+0x2bc>)
 80016ce:	f002 fd8f 	bl	80041f0 <HAL_GPIO_WritePin>
    }
    prev_turn_on = controller_state.options_button;
 80016d2:	4b61      	ldr	r3, [pc, #388]	@ (8001858 <main+0x2cc>)
 80016d4:	7e1a      	ldrb	r2, [r3, #24]
 80016d6:	4b61      	ldr	r3, [pc, #388]	@ (800185c <main+0x2d0>)
 80016d8:	701a      	strb	r2, [r3, #0]
    if (turn_on) {
 80016da:	4b61      	ldr	r3, [pc, #388]	@ (8001860 <main+0x2d4>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0c1      	beq.n	8001666 <main+0xda>
      if (controller_state.r1) {
 80016e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001858 <main+0x2cc>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <main+0x18c>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * 0.35};
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80016f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001864 <main+0x2d8>)
 80016f8:	647b      	str	r3, [r7, #68]	@ 0x44
        movement_control(target_vel);
 80016fa:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80016fe:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001702:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001706:	eeb0 0a66 	vmov.f32	s0, s13
 800170a:	eef0 0a47 	vmov.f32	s1, s14
 800170e:	eeb0 1a67 	vmov.f32	s2, s15
 8001712:	f001 fa09 	bl	8002b28 <movement_control>
 8001716:	e7a6      	b.n	8001666 <main+0xda>
      } else if (controller_state.l1) {
 8001718:	4b4f      	ldr	r3, [pc, #316]	@ (8001858 <main+0x2cc>)
 800171a:	78db      	ldrb	r3, [r3, #3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d016      	beq.n	800174e <main+0x1c2>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * -0.35};
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	@ 0x30
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
 800172c:	4b4e      	ldr	r3, [pc, #312]	@ (8001868 <main+0x2dc>)
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
        movement_control(target_vel);
 8001730:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001734:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001738:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800173c:	eeb0 0a66 	vmov.f32	s0, s13
 8001740:	eef0 0a47 	vmov.f32	s1, s14
 8001744:	eeb0 1a67 	vmov.f32	s2, s15
 8001748:	f001 f9ee 	bl	8002b28 <movement_control>
 800174c:	e78b      	b.n	8001666 <main+0xda>
      } else if (controller_state.up) {
 800174e:	4b42      	ldr	r3, [pc, #264]	@ (8001858 <main+0x2cc>)
 8001750:	7a9b      	ldrb	r3, [r3, #10]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d016      	beq.n	8001784 <main+0x1f8>
        BaseVelocity target_vel = {0,
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
 800175c:	4b43      	ldr	r3, [pc, #268]	@ (800186c <main+0x2e0>)
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   ROBOT_MAX_Y_VELOCITY * 0.75,
                                   0};
        movement_control(target_vel);
 8001766:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800176a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800176e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001772:	eeb0 0a66 	vmov.f32	s0, s13
 8001776:	eef0 0a47 	vmov.f32	s1, s14
 800177a:	eeb0 1a67 	vmov.f32	s2, s15
 800177e:	f001 f9d3 	bl	8002b28 <movement_control>
 8001782:	e770      	b.n	8001666 <main+0xda>
      } else if (controller_state.down) {
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <main+0x2cc>)
 8001786:	7adb      	ldrb	r3, [r3, #11]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d016      	beq.n	80017ba <main+0x22e>
        BaseVelocity target_vel = {0,
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	4b37      	ldr	r3, [pc, #220]	@ (8001870 <main+0x2e4>)
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
                                   ROBOT_MAX_Y_VELOCITY * -0.75,
                                   0};
        movement_control(target_vel);
 800179c:	edd7 6a06 	vldr	s13, [r7, #24]
 80017a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80017a8:	eeb0 0a66 	vmov.f32	s0, s13
 80017ac:	eef0 0a47 	vmov.f32	s1, s14
 80017b0:	eeb0 1a67 	vmov.f32	s2, s15
 80017b4:	f001 f9b8 	bl	8002b28 <movement_control>
 80017b8:	e755      	b.n	8001666 <main+0xda>
      } else if (controller_state.left) {
 80017ba:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <main+0x2cc>)
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <main+0x264>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * -0.75,
 80017c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <main+0x2e4>)
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
                                   0,
                                   0};
        movement_control(target_vel);
 80017d2:	edd7 6a03 	vldr	s13, [r7, #12]
 80017d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80017da:	edd7 7a05 	vldr	s15, [r7, #20]
 80017de:	eeb0 0a66 	vmov.f32	s0, s13
 80017e2:	eef0 0a47 	vmov.f32	s1, s14
 80017e6:	eeb0 1a67 	vmov.f32	s2, s15
 80017ea:	f001 f99d 	bl	8002b28 <movement_control>
 80017ee:	e73a      	b.n	8001666 <main+0xda>
      } else if (controller_state.right) {
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <main+0x2cc>)
 80017f2:	7b5b      	ldrb	r3, [r3, #13]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f43f af36 	beq.w	8001666 <main+0xda>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * 0.75,
 80017fa:	4b1c      	ldr	r3, [pc, #112]	@ (800186c <main+0x2e0>)
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
                                   0,
                                   0};
        movement_control(target_vel);
 800180a:	edd7 6a00 	vldr	s13, [r7]
 800180e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001812:	edd7 7a02 	vldr	s15, [r7, #8]
 8001816:	eeb0 0a66 	vmov.f32	s0, s13
 800181a:	eef0 0a47 	vmov.f32	s1, s14
 800181e:	eeb0 1a67 	vmov.f32	s2, s15
 8001822:	f001 f981 	bl	8002b28 <movement_control>
    HAL_Delay(1);
 8001826:	e71e      	b.n	8001666 <main+0xda>
 8001828:	20000204 	.word	0x20000204
 800182c:	200001b8 	.word	0x200001b8
 8001830:	2000016c 	.word	0x2000016c
 8001834:	20000250 	.word	0x20000250
 8001838:	2000029c 	.word	0x2000029c
 800183c:	200002e8 	.word	0x200002e8
 8001840:	48000800 	.word	0x48000800
 8001844:	48000c00 	.word	0x48000c00
 8001848:	48001000 	.word	0x48001000
 800184c:	20000000 	.word	0x20000000
 8001850:	2000010c 	.word	0x2000010c
 8001854:	200003c8 	.word	0x200003c8
 8001858:	20000138 	.word	0x20000138
 800185c:	20000166 	.word	0x20000166
 8001860:	20000165 	.word	0x20000165
 8001864:	402de9e2 	.word	0x402de9e2
 8001868:	c02de9e2 	.word	0xc02de9e2
 800186c:	40a29fbe 	.word	0x40a29fbe
 8001870:	c0a29fbe 	.word	0xc0a29fbe

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b094      	sub	sp, #80	@ 0x50
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2238      	movs	r2, #56	@ 0x38
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f006 f9c4 	bl	8007c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001896:	2000      	movs	r0, #0
 8001898:	f002 fcc2 	bl	8004220 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	2303      	movs	r3, #3
 80018ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018b2:	2355      	movs	r3, #85	@ 0x55
 80018b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018be:	2302      	movs	r3, #2
 80018c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f107 0318 	add.w	r3, r7, #24
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fd5e 	bl	8004388 <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80018d2:	f000 f818 	bl	8001906 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2303      	movs	r3, #3
 80018dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2104      	movs	r1, #4
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f85c 	bl	80049ac <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018fa:	f000 f804 	bl	8001906 <Error_Handler>
  }
}
 80018fe:	bf00      	nop
 8001900:	3750      	adds	r7, #80	@ 0x50
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190a:	b672      	cpsid	i
}
 800190c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800190e:	bf00      	nop
 8001910:	e7fd      	b.n	800190e <Error_Handler+0x8>
 8001912:	0000      	movs	r0, r0
 8001914:	0000      	movs	r0, r0
	...

08001918 <base2wheel>:
#include "movement.h"

extern WheelVelocity test_vel;
extern WheelPWM test_pwm;

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	@ 0x50
 800191c:	af00      	add	r7, sp, #0
 800191e:	eef0 6a40 	vmov.f32	s13, s0
 8001922:	eeb0 7a60 	vmov.f32	s14, s1
 8001926:	eef0 7a41 	vmov.f32	s15, s2
 800192a:	edc7 6a05 	vstr	s13, [r7, #20]
 800192e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001932:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = 0, front_right = 0, rear_left = 0, rear_right = 0;
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	647b      	str	r3, [r7, #68]	@ 0x44
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (base_vel.z_vel == 0) {
 800194e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001952:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	f040 809d 	bne.w	8001a98 <base2wheel+0x180>
    front_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 800195e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001962:	edd7 7a05 	vldr	s15, [r7, #20]
 8001966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196a:	edd7 6a06 	vldr	s13, [r7, #24]
 800196e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197a:	ee17 0a90 	vmov	r0, s15
 800197e:	f7fe fe0b 	bl	8000598 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	ec43 2b10 	vmov	d0, r2, r3
 800198a:	f007 f993 	bl	8008cb4 <sqrt>
 800198e:	ec51 0b10 	vmov	r0, r1, d0
 8001992:	a38b      	add	r3, pc, #556	@ (adr r3, 8001bc0 <base2wheel+0x2a8>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe ff80 	bl	800089c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f948 	bl	8000c38 <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 80019ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80019b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b8:	edd7 6a06 	vldr	s13, [r7, #24]
 80019bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	ee17 0a90 	vmov	r0, s15
 80019cc:	f7fe fde4 	bl	8000598 <__aeabi_f2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	ec43 2b10 	vmov	d0, r2, r3
 80019d8:	f007 f96c 	bl	8008cb4 <sqrt>
 80019dc:	ec51 0b10 	vmov	r0, r1, d0
 80019e0:	a377      	add	r3, pc, #476	@ (adr r3, 8001bc0 <base2wheel+0x2a8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe ff59 	bl	800089c <__aeabi_ddiv>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f921 	bl	8000c38 <__aeabi_d2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 80019fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80019fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a06:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a16:	ee17 0a90 	vmov	r0, s15
 8001a1a:	f7fe fdbd 	bl	8000598 <__aeabi_f2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b10 	vmov	d0, r2, r3
 8001a26:	f007 f945 	bl	8008cb4 <sqrt>
 8001a2a:	ec51 0b10 	vmov	r0, r1, d0
 8001a2e:	a364      	add	r3, pc, #400	@ (adr r3, 8001bc0 <base2wheel+0x2a8>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe ff32 	bl	800089c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8fa 	bl	8000c38 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001a48:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a54:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	ee17 0a90 	vmov	r0, s15
 8001a68:	f7fe fd96 	bl	8000598 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	ec43 2b10 	vmov	d0, r2, r3
 8001a74:	f007 f91e 	bl	8008cb4 <sqrt>
 8001a78:	ec51 0b10 	vmov	r0, r1, d0
 8001a7c:	a350      	add	r3, pc, #320	@ (adr r3, 8001bc0 <base2wheel+0x2a8>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe ff0b 	bl	800089c <__aeabi_ddiv>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f8d3 	bl	8000c38 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a96:	e04d      	b.n	8001b34 <base2wheel+0x21c>
  } else {
    front_left = base_vel.z_vel / RADIUS_WHEEL;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd7c 	bl	8000598 <__aeabi_f2d>
 8001aa0:	a347      	add	r3, pc, #284	@ (adr r3, 8001bc0 <base2wheel+0x2a8>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fef9 	bl	800089c <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7ff f8c1 	bl	8000c38 <__aeabi_d2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = -base_vel.z_vel / RADIUS_WHEEL;
 8001aba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001abe:	eef1 7a67 	vneg.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd66 	bl	8000598 <__aeabi_f2d>
 8001acc:	a33c      	add	r3, pc, #240	@ (adr r3, 8001bc0 <base2wheel+0x2a8>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fee3 	bl	800089c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f8ab 	bl	8000c38 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = base_vel.z_vel / RADIUS_WHEEL;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd55 	bl	8000598 <__aeabi_f2d>
 8001aee:	a334      	add	r3, pc, #208	@ (adr r3, 8001bc0 <base2wheel+0x2a8>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fed2 	bl	800089c <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f89a 	bl	8000c38 <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = -base_vel.z_vel / RADIUS_WHEEL;
 8001b08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b0c:	eef1 7a67 	vneg.f32	s15, s15
 8001b10:	ee17 3a90 	vmov	r3, s15
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fd3f 	bl	8000598 <__aeabi_f2d>
 8001b1a:	a329      	add	r3, pc, #164	@ (adr r3, 8001bc0 <base2wheel+0x2a8>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe febc 	bl	800089c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff f884 	bl	8000c38 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  if (base_vel.x_vel < 0 || base_vel.y_vel < 0) {
 8001b34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	d406      	bmi.n	8001b50 <base2wheel+0x238>
 8001b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	d517      	bpl.n	8001b80 <base2wheel+0x268>
    front_left = -front_left;
 8001b50:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001b54:	eef1 7a67 	vneg.f32	s15, s15
 8001b58:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    front_right = -front_right;
 8001b5c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b60:	eef1 7a67 	vneg.f32	s15, s15
 8001b64:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    rear_left = -rear_left;
 8001b68:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b6c:	eef1 7a67 	vneg.f32	s15, s15
 8001b70:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    rear_right = -rear_right;
 8001b74:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b78:	eef1 7a67 	vneg.f32	s15, s15
 8001b7c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  }
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8001b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b98:	ee06 0a10 	vmov	s12, r0
 8001b9c:	ee06 1a90 	vmov	s13, r1
 8001ba0:	ee07 2a10 	vmov	s14, r2
 8001ba4:	ee07 3a90 	vmov	s15, r3
}
 8001ba8:	eeb0 0a46 	vmov.f32	s0, s12
 8001bac:	eef0 0a66 	vmov.f32	s1, s13
 8001bb0:	eeb0 1a47 	vmov.f32	s2, s14
 8001bb4:	eef0 1a67 	vmov.f32	s3, s15
 8001bb8:	3750      	adds	r7, #80	@ 0x50
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	020c49ba 	.word	0x020c49ba
 8001bc4:	3f96872b 	.word	0x3f96872b

08001bc8 <wheel2pwm>:
  // float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  // float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  // return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b08e      	sub	sp, #56	@ 0x38
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6178      	str	r0, [r7, #20]
 8001bd0:	eeb0 6a40 	vmov.f32	s12, s0
 8001bd4:	eef0 6a60 	vmov.f32	s13, s1
 8001bd8:	eeb0 7a41 	vmov.f32	s14, s2
 8001bdc:	eef0 7a61 	vmov.f32	s15, s3
 8001be0:	ed87 6a01 	vstr	s12, [r7, #4]
 8001be4:	edc7 6a02 	vstr	s13, [r7, #8]
 8001be8:	ed87 7a03 	vstr	s14, [r7, #12]
 8001bec:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fcd0 	bl	8000598 <__aeabi_f2d>
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b92      	ldr	r3, [pc, #584]	@ (8001e48 <wheel2pwm+0x280>)
 8001bfe:	f7fe fd23 	bl	8000648 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	a38b      	add	r3, pc, #556	@ (adr r3, 8001e38 <wheel2pwm+0x270>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fe44 	bl	800089c <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	a388      	add	r3, pc, #544	@ (adr r3, 8001e40 <wheel2pwm+0x278>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fe3b 	bl	800089c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b86      	ldr	r3, [pc, #536]	@ (8001e4c <wheel2pwm+0x284>)
 8001c34:	f7fe fd08 	bl	8000648 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	461d      	mov	r5, r3
 8001c40:	4b83      	ldr	r3, [pc, #524]	@ (8001e50 <wheel2pwm+0x288>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc85 	bl	8000554 <__aeabi_ui2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7fe fcf9 	bl	8000648 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b7a      	ldr	r3, [pc, #488]	@ (8001e4c <wheel2pwm+0x284>)
 8001c64:	f7fe fe1a 	bl	800089c <__aeabi_ddiv>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe ff9a 	bl	8000ba8 <__aeabi_d2iz>
 8001c74:	4603      	mov	r3, r0
 8001c76:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc8c 	bl	8000598 <__aeabi_f2d>
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4b70      	ldr	r3, [pc, #448]	@ (8001e48 <wheel2pwm+0x280>)
 8001c86:	f7fe fcdf 	bl	8000648 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	a369      	add	r3, pc, #420	@ (adr r3, 8001e38 <wheel2pwm+0x270>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fe00 	bl	800089c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	a366      	add	r3, pc, #408	@ (adr r3, 8001e40 <wheel2pwm+0x278>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fdf7 	bl	800089c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b64      	ldr	r3, [pc, #400]	@ (8001e4c <wheel2pwm+0x284>)
 8001cbc:	f7fe fcc4 	bl	8000648 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	4b61      	ldr	r3, [pc, #388]	@ (8001e50 <wheel2pwm+0x288>)
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc41 	bl	8000554 <__aeabi_ui2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7fe fcb5 	bl	8000648 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b58      	ldr	r3, [pc, #352]	@ (8001e4c <wheel2pwm+0x284>)
 8001cec:	f7fe fdd6 	bl	800089c <__aeabi_ddiv>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe ff56 	bl	8000ba8 <__aeabi_d2iz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc48 	bl	8000598 <__aeabi_f2d>
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e48 <wheel2pwm+0x280>)
 8001d0e:	f7fe fc9b 	bl	8000648 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	a347      	add	r3, pc, #284	@ (adr r3, 8001e38 <wheel2pwm+0x270>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fdbc 	bl	800089c <__aeabi_ddiv>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	a344      	add	r3, pc, #272	@ (adr r3, 8001e40 <wheel2pwm+0x278>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fdb3 	bl	800089c <__aeabi_ddiv>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	4b42      	ldr	r3, [pc, #264]	@ (8001e4c <wheel2pwm+0x284>)
 8001d44:	f7fe fc80 	bl	8000648 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbfc 	bl	8000554 <__aeabi_ui2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fc70 	bl	8000648 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <wheel2pwm+0x284>)
 8001d76:	f7fe fd91 	bl	800089c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe ff11 	bl	8000ba8 <__aeabi_d2iz>
 8001d86:	4603      	mov	r3, r0
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fc03 	bl	8000598 <__aeabi_f2d>
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <wheel2pwm+0x280>)
 8001d98:	f7fe fc56 	bl	8000648 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	a324      	add	r3, pc, #144	@ (adr r3, 8001e38 <wheel2pwm+0x270>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fd77 	bl	800089c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	a322      	add	r3, pc, #136	@ (adr r3, 8001e40 <wheel2pwm+0x278>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	f7fe fd6e 	bl	800089c <__aeabi_ddiv>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <wheel2pwm+0x284>)
 8001dce:	f7fe fc3b 	bl	8000648 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	461d      	mov	r5, r3
 8001dda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fbb7 	bl	8000554 <__aeabi_ui2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4620      	mov	r0, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	f7fe fc2b 	bl	8000648 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <wheel2pwm+0x284>)
 8001e00:	f7fe fd4c 	bl	800089c <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fecc 	bl	8000ba8 <__aeabi_d2iz>
 8001e10:	4603      	mov	r3, r0
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	3738      	adds	r7, #56	@ 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bdb0      	pop	{r4, r5, r7, pc}
 8001e34:	f3af 8000 	nop.w
 8001e38:	54442d18 	.word	0x54442d18
 8001e3c:	401921fb 	.word	0x401921fb
 8001e40:	c473d1cb 	.word	0xc473d1cb
 8001e44:	40b069b0 	.word	0x40b069b0
 8001e48:	404e0000 	.word	0x404e0000
 8001e4c:	40590000 	.word	0x40590000
 8001e50:	40000400 	.word	0x40000400
 8001e54:	00000000 	.word	0x00000000

08001e58 <rotate_motor>:
  test_pwm.front_right = pwm.front_right;
  test_pwm.rear_left = pwm.rear_left;
  test_pwm.rear_right = pwm.rear_right;
}

void rotate_motor(BaseVelocity base_vel) {
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	eef0 6a40 	vmov.f32	s13, s0
 8001e62:	eeb0 7a60 	vmov.f32	s14, s1
 8001e66:	eef0 7a41 	vmov.f32	s15, s2
 8001e6a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001e6e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001e72:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 8001e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d075      	beq.n	8001f70 <rotate_motor+0x118>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(1, 45));
 8001e84:	4bd6      	ldr	r3, [pc, #856]	@ (80021e0 <rotate_motor+0x388>)
 8001e86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e8a:	3b2d      	subs	r3, #45	@ 0x2d
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bfb8      	it	lt
 8001e90:	425b      	neglt	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb6e 	bl	8000574 <__aeabi_i2d>
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4bd1      	ldr	r3, [pc, #836]	@ (80021e4 <rotate_motor+0x38c>)
 8001e9e:	f7fe fbd3 	bl	8000648 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fea5 	bl	8000bf8 <__aeabi_d2uiz>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 8001eb8:	48c9      	ldr	r0, [pc, #804]	@ (80021e0 <rotate_motor+0x388>)
 8001eba:	f000 fee9 	bl	8002c90 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(2, -45));
 8001ebe:	4bc8      	ldr	r3, [pc, #800]	@ (80021e0 <rotate_motor+0x388>)
 8001ec0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ec4:	332d      	adds	r3, #45	@ 0x2d
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bfb8      	it	lt
 8001eca:	425b      	neglt	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb51 	bl	8000574 <__aeabi_i2d>
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	4bc3      	ldr	r3, [pc, #780]	@ (80021e4 <rotate_motor+0x38c>)
 8001ed8:	f7fe fbb6 	bl	8000648 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f7fe fe88 	bl	8000bf8 <__aeabi_d2uiz>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8001ef2:	48bd      	ldr	r0, [pc, #756]	@ (80021e8 <rotate_motor+0x390>)
 8001ef4:	f000 fecc 	bl	8002c90 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(3, 45));
 8001ef8:	4bb9      	ldr	r3, [pc, #740]	@ (80021e0 <rotate_motor+0x388>)
 8001efa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001efe:	3b2d      	subs	r3, #45	@ 0x2d
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bfb8      	it	lt
 8001f04:	425b      	neglt	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb34 	bl	8000574 <__aeabi_i2d>
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4bb4      	ldr	r3, [pc, #720]	@ (80021e4 <rotate_motor+0x38c>)
 8001f12:	f7fe fb99 	bl	8000648 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fe6b 	bl	8000bf8 <__aeabi_d2uiz>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8001f2c:	48af      	ldr	r0, [pc, #700]	@ (80021ec <rotate_motor+0x394>)
 8001f2e:	f000 feaf 	bl	8002c90 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(4, -45));
 8001f32:	4bab      	ldr	r3, [pc, #684]	@ (80021e0 <rotate_motor+0x388>)
 8001f34:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f38:	332d      	adds	r3, #45	@ 0x2d
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bfb8      	it	lt
 8001f3e:	425b      	neglt	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fb17 	bl	8000574 <__aeabi_i2d>
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4ba6      	ldr	r3, [pc, #664]	@ (80021e4 <rotate_motor+0x38c>)
 8001f4c:	f7fe fb7c 	bl	8000648 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe4e 	bl	8000bf8 <__aeabi_d2uiz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	f240 113b 	movw	r1, #315	@ 0x13b
 8001f66:	48a2      	ldr	r0, [pc, #648]	@ (80021f0 <rotate_motor+0x398>)
 8001f68:	f000 fe92 	bl	8002c90 <servo_move>
    return;
 8001f6c:	f000 bdc0 	b.w	8002af0 <rotate_motor+0xc98>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fb10 	bl	8000598 <__aeabi_f2d>
 8001f78:	4604      	mov	r4, r0
 8001f7a:	460d      	mov	r5, r1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fb0a 	bl	8000598 <__aeabi_f2d>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	ec43 2b11 	vmov	d1, r2, r3
 8001f8c:	ec45 4b10 	vmov	d0, r4, r5
 8001f90:	f006 fdc8 	bl	8008b24 <atan2>
 8001f94:	ec51 0b10 	vmov	r0, r1, d0
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b95      	ldr	r3, [pc, #596]	@ (80021f4 <rotate_motor+0x39c>)
 8001f9e:	f7fe fb53 	bl	8000648 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	a38b      	add	r3, pc, #556	@ (adr r3, 80021d8 <rotate_motor+0x380>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe fc74 	bl	800089c <__aeabi_ddiv>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fe3c 	bl	8000c38 <__aeabi_d2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 8001fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	d17c      	bne.n	80020cc <rotate_motor+0x274>
 8001fd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d075      	beq.n	80020cc <rotate_motor+0x274>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(1, 90));
 8001fe0:	4b7f      	ldr	r3, [pc, #508]	@ (80021e0 <rotate_motor+0x388>)
 8001fe2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fe6:	3b5a      	subs	r3, #90	@ 0x5a
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bfb8      	it	lt
 8001fec:	425b      	neglt	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fac0 	bl	8000574 <__aeabi_i2d>
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	4b7a      	ldr	r3, [pc, #488]	@ (80021e4 <rotate_motor+0x38c>)
 8001ffa:	f7fe fb25 	bl	8000648 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fdf7 	bl	8000bf8 <__aeabi_d2uiz>
 800200a:	4603      	mov	r3, r0
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002014:	4872      	ldr	r0, [pc, #456]	@ (80021e0 <rotate_motor+0x388>)
 8002016:	f000 fe3b 	bl	8002c90 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(2, 90));
 800201a:	4b71      	ldr	r3, [pc, #452]	@ (80021e0 <rotate_motor+0x388>)
 800201c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002020:	3b5a      	subs	r3, #90	@ 0x5a
 8002022:	2b00      	cmp	r3, #0
 8002024:	bfb8      	it	lt
 8002026:	425b      	neglt	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe faa3 	bl	8000574 <__aeabi_i2d>
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4b6c      	ldr	r3, [pc, #432]	@ (80021e4 <rotate_motor+0x38c>)
 8002034:	f7fe fb08 	bl	8000648 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f7fe fdda 	bl	8000bf8 <__aeabi_d2uiz>
 8002044:	4603      	mov	r3, r0
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800204e:	4866      	ldr	r0, [pc, #408]	@ (80021e8 <rotate_motor+0x390>)
 8002050:	f000 fe1e 	bl	8002c90 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(3, 90));
 8002054:	4b62      	ldr	r3, [pc, #392]	@ (80021e0 <rotate_motor+0x388>)
 8002056:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800205a:	3b5a      	subs	r3, #90	@ 0x5a
 800205c:	2b00      	cmp	r3, #0
 800205e:	bfb8      	it	lt
 8002060:	425b      	neglt	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa86 	bl	8000574 <__aeabi_i2d>
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b5d      	ldr	r3, [pc, #372]	@ (80021e4 <rotate_motor+0x38c>)
 800206e:	f7fe faeb 	bl	8000648 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fdbd 	bl	8000bf8 <__aeabi_d2uiz>
 800207e:	4603      	mov	r3, r0
 8002080:	b29b      	uxth	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002088:	4859      	ldr	r0, [pc, #356]	@ (80021f0 <rotate_motor+0x398>)
 800208a:	f000 fe01 	bl	8002c90 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(4, 90));
 800208e:	4b54      	ldr	r3, [pc, #336]	@ (80021e0 <rotate_motor+0x388>)
 8002090:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002094:	3b5a      	subs	r3, #90	@ 0x5a
 8002096:	2b00      	cmp	r3, #0
 8002098:	bfb8      	it	lt
 800209a:	425b      	neglt	r3, r3
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa69 	bl	8000574 <__aeabi_i2d>
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <rotate_motor+0x38c>)
 80020a8:	f7fe face 	bl	8000648 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fda0 	bl	8000bf8 <__aeabi_d2uiz>
 80020b8:	4603      	mov	r3, r0
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80020c2:	484a      	ldr	r0, [pc, #296]	@ (80021ec <rotate_motor+0x394>)
 80020c4:	f000 fde4 	bl	8002c90 <servo_move>
 80020c8:	f000 bd12 	b.w	8002af0 <rotate_motor+0xc98>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 80020cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	f000 8092 	beq.w	8002200 <rotate_motor+0x3a8>
 80020dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	f040 808a 	bne.w	8002200 <rotate_motor+0x3a8>
    servo_move(&(servos[0]), SERVO_ID1_MIN_POS, SHORTEST_TIME_ROTATE(1, 90));
 80020ec:	4b3c      	ldr	r3, [pc, #240]	@ (80021e0 <rotate_motor+0x388>)
 80020ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020f2:	3b5a      	subs	r3, #90	@ 0x5a
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bfb8      	it	lt
 80020f8:	425b      	neglt	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa3a 	bl	8000574 <__aeabi_i2d>
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	4b37      	ldr	r3, [pc, #220]	@ (80021e4 <rotate_motor+0x38c>)
 8002106:	f7fe fa9f 	bl	8000648 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fd71 	bl	8000bf8 <__aeabi_d2uiz>
 8002116:	4603      	mov	r3, r0
 8002118:	b29b      	uxth	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	2187      	movs	r1, #135	@ 0x87
 800211e:	4830      	ldr	r0, [pc, #192]	@ (80021e0 <rotate_motor+0x388>)
 8002120:	f000 fdb6 	bl	8002c90 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(2, 90));
 8002124:	4b2e      	ldr	r3, [pc, #184]	@ (80021e0 <rotate_motor+0x388>)
 8002126:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800212a:	3b5a      	subs	r3, #90	@ 0x5a
 800212c:	2b00      	cmp	r3, #0
 800212e:	bfb8      	it	lt
 8002130:	425b      	neglt	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa1e 	bl	8000574 <__aeabi_i2d>
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b29      	ldr	r3, [pc, #164]	@ (80021e4 <rotate_motor+0x38c>)
 800213e:	f7fe fa83 	bl	8000648 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fd55 	bl	8000bf8 <__aeabi_d2uiz>
 800214e:	4603      	mov	r3, r0
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8002158:	4823      	ldr	r0, [pc, #140]	@ (80021e8 <rotate_motor+0x390>)
 800215a:	f000 fd99 	bl	8002c90 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MIN_POS, SHORTEST_TIME_ROTATE(3, 90));
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <rotate_motor+0x388>)
 8002160:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002164:	3b5a      	subs	r3, #90	@ 0x5a
 8002166:	2b00      	cmp	r3, #0
 8002168:	bfb8      	it	lt
 800216a:	425b      	neglt	r3, r3
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fa01 	bl	8000574 <__aeabi_i2d>
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <rotate_motor+0x38c>)
 8002178:	f7fe fa66 	bl	8000648 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	f7fe fd38 	bl	8000bf8 <__aeabi_d2uiz>
 8002188:	4603      	mov	r3, r0
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	2182      	movs	r1, #130	@ 0x82
 8002190:	4817      	ldr	r0, [pc, #92]	@ (80021f0 <rotate_motor+0x398>)
 8002192:	f000 fd7d 	bl	8002c90 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(4, 90));
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <rotate_motor+0x388>)
 8002198:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800219c:	3b5a      	subs	r3, #90	@ 0x5a
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bfb8      	it	lt
 80021a2:	425b      	neglt	r3, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9e5 	bl	8000574 <__aeabi_i2d>
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b0d      	ldr	r3, [pc, #52]	@ (80021e4 <rotate_motor+0x38c>)
 80021b0:	f7fe fa4a 	bl	8000648 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7fe fd1c 	bl	8000bf8 <__aeabi_d2uiz>
 80021c0:	4603      	mov	r3, r0
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 80021ca:	4808      	ldr	r0, [pc, #32]	@ (80021ec <rotate_motor+0x394>)
 80021cc:	f000 fd60 	bl	8002c90 <servo_move>
 80021d0:	f000 bc8e 	b.w	8002af0 <rotate_motor+0xc98>
 80021d4:	f3af 8000 	nop.w
 80021d8:	54442d18 	.word	0x54442d18
 80021dc:	400921fb 	.word	0x400921fb
 80021e0:	20000060 	.word	0x20000060
 80021e4:	40080000 	.word	0x40080000
 80021e8:	20000066 	.word	0x20000066
 80021ec:	20000072 	.word	0x20000072
 80021f0:	2000006c 	.word	0x2000006c
 80021f4:	40668000 	.word	0x40668000
 80021f8:	43340000 	.word	0x43340000
 80021fc:	42b40000 	.word	0x42b40000
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {  // quadrant 2 or 4
 8002200:	edd7 7a01 	vldr	s15, [r7, #4]
 8002204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	d506      	bpl.n	800221c <rotate_motor+0x3c4>
 800220e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	dc0f      	bgt.n	800223c <rotate_motor+0x3e4>
 800221c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	f340 822b 	ble.w	8002682 <rotate_motor+0x82a>
 800222c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002230:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	f140 8223 	bpl.w	8002682 <rotate_motor+0x82a>
    if (angle < 0)
 800223c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002248:	d507      	bpl.n	800225a <rotate_motor+0x402>
      angle += 180;
 800224a:	edd7 7a05 	vldr	s15, [r7, #20]
 800224e:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80021f8 <rotate_motor+0x3a0>
 8002252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002256:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 800225a:	edd7 7a05 	vldr	s15, [r7, #20]
 800225e:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80021fc <rotate_motor+0x3a4>
 8002262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002266:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 800226a:	edd7 7a05 	vldr	s15, [r7, #20]
 800226e:	eef1 7a67 	vneg.f32	s15, s15
 8002272:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 8002276:	edd7 7a05 	vldr	s15, [r7, #20]
 800227a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	dd22      	ble.n	80022ca <rotate_motor+0x472>
 8002284:	6978      	ldr	r0, [r7, #20]
 8002286:	f7fe f987 	bl	8000598 <__aeabi_f2d>
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	4bcc      	ldr	r3, [pc, #816]	@ (80025c0 <rotate_motor+0x768>)
 8002290:	f7fe fb04 	bl	800089c <__aeabi_ddiv>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	a3c0      	add	r3, pc, #768	@ (adr r3, 80025a0 <rotate_motor+0x748>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fe f9d1 	bl	8000648 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	4bc4      	ldr	r3, [pc, #784]	@ (80025c4 <rotate_motor+0x76c>)
 80022b4:	f7fe f812 	bl	80002dc <__adddf3>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fc9a 	bl	8000bf8 <__aeabi_d2uiz>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b29c      	uxth	r4, r3
 80022c8:	e021      	b.n	800230e <rotate_motor+0x4b6>
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7fe f964 	bl	8000598 <__aeabi_f2d>
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	4bba      	ldr	r3, [pc, #744]	@ (80025c0 <rotate_motor+0x768>)
 80022d6:	f7fe fae1 	bl	800089c <__aeabi_ddiv>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	a3b1      	add	r3, pc, #708	@ (adr r3, 80025a8 <rotate_motor+0x750>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe f9ae 	bl	8000648 <__aeabi_dmul>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	4bb2      	ldr	r3, [pc, #712]	@ (80025c4 <rotate_motor+0x76c>)
 80022fa:	f7fd ffef 	bl	80002dc <__adddf3>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fc77 	bl	8000bf8 <__aeabi_d2uiz>
 800230a:	4603      	mov	r3, r0
 800230c:	b29c      	uxth	r4, r3
 800230e:	4bae      	ldr	r3, [pc, #696]	@ (80025c8 <rotate_motor+0x770>)
 8002310:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002314:	335a      	adds	r3, #90	@ 0x5a
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800231e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002322:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 80025cc <rotate_motor+0x774>
 8002326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800232a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002332:	ee17 3a90 	vmov	r3, s15
 8002336:	2b00      	cmp	r3, #0
 8002338:	bfb8      	it	lt
 800233a:	425b      	neglt	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f919 	bl	8000574 <__aeabi_i2d>
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4ba2      	ldr	r3, [pc, #648]	@ (80025d0 <rotate_motor+0x778>)
 8002348:	f7fe f97e 	bl	8000648 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe fc50 	bl	8000bf8 <__aeabi_d2uiz>
 8002358:	4603      	mov	r3, r0
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4621      	mov	r1, r4
 8002360:	4899      	ldr	r0, [pc, #612]	@ (80025c8 <rotate_motor+0x770>)
 8002362:	f000 fc95 	bl	8002c90 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8002366:	edd7 7a05 	vldr	s15, [r7, #20]
 800236a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	dd22      	ble.n	80023ba <rotate_motor+0x562>
 8002374:	6978      	ldr	r0, [r7, #20]
 8002376:	f7fe f90f 	bl	8000598 <__aeabi_f2d>
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	4b90      	ldr	r3, [pc, #576]	@ (80025c0 <rotate_motor+0x768>)
 8002380:	f7fe fa8c 	bl	800089c <__aeabi_ddiv>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	4b90      	ldr	r3, [pc, #576]	@ (80025d4 <rotate_motor+0x77c>)
 8002392:	f7fe f959 	bl	8000648 <__aeabi_dmul>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	4b88      	ldr	r3, [pc, #544]	@ (80025c4 <rotate_motor+0x76c>)
 80023a4:	f7fd ff9a 	bl	80002dc <__adddf3>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fc22 	bl	8000bf8 <__aeabi_d2uiz>
 80023b4:	4603      	mov	r3, r0
 80023b6:	b29c      	uxth	r4, r3
 80023b8:	e021      	b.n	80023fe <rotate_motor+0x5a6>
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f7fe f8ec 	bl	8000598 <__aeabi_f2d>
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	4b7e      	ldr	r3, [pc, #504]	@ (80025c0 <rotate_motor+0x768>)
 80023c6:	f7fe fa69 	bl	800089c <__aeabi_ddiv>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	a377      	add	r3, pc, #476	@ (adr r3, 80025b0 <rotate_motor+0x758>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe f936 	bl	8000648 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	4b76      	ldr	r3, [pc, #472]	@ (80025c4 <rotate_motor+0x76c>)
 80023ea:	f7fd ff77 	bl	80002dc <__adddf3>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe fbff 	bl	8000bf8 <__aeabi_d2uiz>
 80023fa:	4603      	mov	r3, r0
 80023fc:	b29c      	uxth	r4, r3
 80023fe:	4b72      	ldr	r3, [pc, #456]	@ (80025c8 <rotate_motor+0x770>)
 8002400:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002404:	335a      	adds	r3, #90	@ 0x5a
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800240e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002412:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80025cc <rotate_motor+0x774>
 8002416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800241a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002422:	ee17 3a90 	vmov	r3, s15
 8002426:	2b00      	cmp	r3, #0
 8002428:	bfb8      	it	lt
 800242a:	425b      	neglt	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f8a1 	bl	8000574 <__aeabi_i2d>
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b66      	ldr	r3, [pc, #408]	@ (80025d0 <rotate_motor+0x778>)
 8002438:	f7fe f906 	bl	8000648 <__aeabi_dmul>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fbd8 	bl	8000bf8 <__aeabi_d2uiz>
 8002448:	4603      	mov	r3, r0
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4621      	mov	r1, r4
 8002450:	4861      	ldr	r0, [pc, #388]	@ (80025d8 <rotate_motor+0x780>)
 8002452:	f000 fc1d 	bl	8002c90 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 8002456:	edd7 7a05 	vldr	s15, [r7, #20]
 800245a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	dd22      	ble.n	80024aa <rotate_motor+0x652>
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f7fe f897 	bl	8000598 <__aeabi_f2d>
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b54      	ldr	r3, [pc, #336]	@ (80025c0 <rotate_motor+0x768>)
 8002470:	f7fe fa14 	bl	800089c <__aeabi_ddiv>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	a34c      	add	r3, pc, #304	@ (adr r3, 80025b0 <rotate_motor+0x758>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe f8e1 	bl	8000648 <__aeabi_dmul>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b4c      	ldr	r3, [pc, #304]	@ (80025c4 <rotate_motor+0x76c>)
 8002494:	f7fd ff22 	bl	80002dc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fbaa 	bl	8000bf8 <__aeabi_d2uiz>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b29c      	uxth	r4, r3
 80024a8:	e021      	b.n	80024ee <rotate_motor+0x696>
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7fe f874 	bl	8000598 <__aeabi_f2d>
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	4b42      	ldr	r3, [pc, #264]	@ (80025c0 <rotate_motor+0x768>)
 80024b6:	f7fe f9f1 	bl	800089c <__aeabi_ddiv>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	a33d      	add	r3, pc, #244	@ (adr r3, 80025b8 <rotate_motor+0x760>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f8be 	bl	8000648 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <rotate_motor+0x76c>)
 80024da:	f7fd feff 	bl	80002dc <__adddf3>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe fb87 	bl	8000bf8 <__aeabi_d2uiz>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b29c      	uxth	r4, r3
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <rotate_motor+0x770>)
 80024f0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80024f4:	335a      	adds	r3, #90	@ 0x5a
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002502:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80025cc <rotate_motor+0x774>
 8002506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002512:	ee17 3a90 	vmov	r3, s15
 8002516:	2b00      	cmp	r3, #0
 8002518:	bfb8      	it	lt
 800251a:	425b      	neglt	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f829 	bl	8000574 <__aeabi_i2d>
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <rotate_motor+0x778>)
 8002528:	f7fe f88e 	bl	8000648 <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f7fe fb60 	bl	8000bf8 <__aeabi_d2uiz>
 8002538:	4603      	mov	r3, r0
 800253a:	b29b      	uxth	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	4621      	mov	r1, r4
 8002540:	4826      	ldr	r0, [pc, #152]	@ (80025dc <rotate_motor+0x784>)
 8002542:	f000 fba5 	bl	8002c90 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002546:	edd7 7a05 	vldr	s15, [r7, #20]
 800254a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	dd47      	ble.n	80025e4 <rotate_motor+0x78c>
 8002554:	6978      	ldr	r0, [r7, #20]
 8002556:	f7fe f81f 	bl	8000598 <__aeabi_f2d>
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <rotate_motor+0x768>)
 8002560:	f7fe f99c 	bl	800089c <__aeabi_ddiv>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <rotate_motor+0x788>)
 8002572:	f7fe f869 	bl	8000648 <__aeabi_dmul>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <rotate_motor+0x76c>)
 8002584:	f7fd feaa 	bl	80002dc <__adddf3>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f7fe fb32 	bl	8000bf8 <__aeabi_d2uiz>
 8002594:	4603      	mov	r3, r0
 8002596:	b29c      	uxth	r4, r3
 8002598:	e046      	b.n	8002628 <rotate_motor+0x7d0>
 800259a:	bf00      	nop
 800259c:	f3af 8000 	nop.w
 80025a0:	00000000 	.word	0x00000000
 80025a4:	40781000 	.word	0x40781000
 80025a8:	00000000 	.word	0x00000000
 80025ac:	4076d000 	.word	0x4076d000
 80025b0:	00000000 	.word	0x00000000
 80025b4:	40777000 	.word	0x40777000
 80025b8:	00000000 	.word	0x00000000
 80025bc:	40772000 	.word	0x40772000
 80025c0:	40568000 	.word	0x40568000
 80025c4:	407f4000 	.word	0x407f4000
 80025c8:	20000060 	.word	0x20000060
 80025cc:	42b40000 	.word	0x42b40000
 80025d0:	40080000 	.word	0x40080000
 80025d4:	40774000 	.word	0x40774000
 80025d8:	20000066 	.word	0x20000066
 80025dc:	2000006c 	.word	0x2000006c
 80025e0:	40778000 	.word	0x40778000
 80025e4:	6978      	ldr	r0, [r7, #20]
 80025e6:	f7fd ffd7 	bl	8000598 <__aeabi_f2d>
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4bd4      	ldr	r3, [pc, #848]	@ (8002940 <rotate_motor+0xae8>)
 80025f0:	f7fe f954 	bl	800089c <__aeabi_ddiv>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	a3c8      	add	r3, pc, #800	@ (adr r3, 8002920 <rotate_motor+0xac8>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fe f821 	bl	8000648 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	4bcc      	ldr	r3, [pc, #816]	@ (8002944 <rotate_motor+0xaec>)
 8002614:	f7fd fe62 	bl	80002dc <__adddf3>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe faea 	bl	8000bf8 <__aeabi_d2uiz>
 8002624:	4603      	mov	r3, r0
 8002626:	b29c      	uxth	r4, r3
 8002628:	4bc7      	ldr	r3, [pc, #796]	@ (8002948 <rotate_motor+0xaf0>)
 800262a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800262e:	335a      	adds	r3, #90	@ 0x5a
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002638:	edd7 7a05 	vldr	s15, [r7, #20]
 800263c:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 800294c <rotate_motor+0xaf4>
 8002640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800264c:	ee17 3a90 	vmov	r3, s15
 8002650:	2b00      	cmp	r3, #0
 8002652:	bfb8      	it	lt
 8002654:	425b      	neglt	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd ff8c 	bl	8000574 <__aeabi_i2d>
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	4bbb      	ldr	r3, [pc, #748]	@ (8002950 <rotate_motor+0xaf8>)
 8002662:	f7fd fff1 	bl	8000648 <__aeabi_dmul>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fe fac3 	bl	8000bf8 <__aeabi_d2uiz>
 8002672:	4603      	mov	r3, r0
 8002674:	b29b      	uxth	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	4621      	mov	r1, r4
 800267a:	48b6      	ldr	r0, [pc, #728]	@ (8002954 <rotate_motor+0xafc>)
 800267c:	f000 fb08 	bl	8002c90 <servo_move>
 8002680:	e236      	b.n	8002af0 <rotate_motor+0xc98>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {  // quadrant 1 or 3
 8002682:	edd7 7a01 	vldr	s15, [r7, #4]
 8002686:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d506      	bpl.n	800269e <rotate_motor+0x846>
 8002690:	edd7 7a02 	vldr	s15, [r7, #8]
 8002694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269c:	d40f      	bmi.n	80026be <rotate_motor+0x866>
 800269e:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026aa:	f340 8221 	ble.w	8002af0 <rotate_motor+0xc98>
 80026ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80026b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	f340 8219 	ble.w	8002af0 <rotate_motor+0xc98>
    if (angle < 0)
 80026be:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	d507      	bpl.n	80026dc <rotate_motor+0x884>
      angle += 180;
 80026cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80026d0:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8002958 <rotate_motor+0xb00>
 80026d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026d8:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 80026dc:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800294c <rotate_motor+0xaf4>
 80026e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e8:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 80026ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	dd22      	ble.n	8002740 <rotate_motor+0x8e8>
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7fd ff4c 	bl	8000598 <__aeabi_f2d>
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	4b8e      	ldr	r3, [pc, #568]	@ (8002940 <rotate_motor+0xae8>)
 8002706:	f7fe f8c9 	bl	800089c <__aeabi_ddiv>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	a385      	add	r3, pc, #532	@ (adr r3, 8002928 <rotate_motor+0xad0>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd ff96 	bl	8000648 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b86      	ldr	r3, [pc, #536]	@ (8002944 <rotate_motor+0xaec>)
 800272a:	f7fd fdd7 	bl	80002dc <__adddf3>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe fa5f 	bl	8000bf8 <__aeabi_d2uiz>
 800273a:	4603      	mov	r3, r0
 800273c:	b29c      	uxth	r4, r3
 800273e:	e021      	b.n	8002784 <rotate_motor+0x92c>
 8002740:	6978      	ldr	r0, [r7, #20]
 8002742:	f7fd ff29 	bl	8000598 <__aeabi_f2d>
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b7d      	ldr	r3, [pc, #500]	@ (8002940 <rotate_motor+0xae8>)
 800274c:	f7fe f8a6 	bl	800089c <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	a375      	add	r3, pc, #468	@ (adr r3, 8002930 <rotate_motor+0xad8>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd ff73 	bl	8000648 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b75      	ldr	r3, [pc, #468]	@ (8002944 <rotate_motor+0xaec>)
 8002770:	f7fd fdb4 	bl	80002dc <__adddf3>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7fe fa3c 	bl	8000bf8 <__aeabi_d2uiz>
 8002780:	4603      	mov	r3, r0
 8002782:	b29c      	uxth	r4, r3
 8002784:	4b70      	ldr	r3, [pc, #448]	@ (8002948 <rotate_motor+0xaf0>)
 8002786:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800278a:	335a      	adds	r3, #90	@ 0x5a
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002794:	edd7 7a05 	vldr	s15, [r7, #20]
 8002798:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800294c <rotate_motor+0xaf4>
 800279c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027a8:	ee17 3a90 	vmov	r3, s15
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bfb8      	it	lt
 80027b0:	425b      	neglt	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fede 	bl	8000574 <__aeabi_i2d>
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	4b64      	ldr	r3, [pc, #400]	@ (8002950 <rotate_motor+0xaf8>)
 80027be:	f7fd ff43 	bl	8000648 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7fe fa15 	bl	8000bf8 <__aeabi_d2uiz>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	4621      	mov	r1, r4
 80027d6:	485c      	ldr	r0, [pc, #368]	@ (8002948 <rotate_motor+0xaf0>)
 80027d8:	f000 fa5a 	bl	8002c90 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 80027dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80027e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	dd22      	ble.n	8002830 <rotate_motor+0x9d8>
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7fd fed4 	bl	8000598 <__aeabi_f2d>
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	4b52      	ldr	r3, [pc, #328]	@ (8002940 <rotate_motor+0xae8>)
 80027f6:	f7fe f851 	bl	800089c <__aeabi_ddiv>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	4b55      	ldr	r3, [pc, #340]	@ (800295c <rotate_motor+0xb04>)
 8002808:	f7fd ff1e 	bl	8000648 <__aeabi_dmul>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	4b4a      	ldr	r3, [pc, #296]	@ (8002944 <rotate_motor+0xaec>)
 800281a:	f7fd fd5f 	bl	80002dc <__adddf3>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	f7fe f9e7 	bl	8000bf8 <__aeabi_d2uiz>
 800282a:	4603      	mov	r3, r0
 800282c:	b29c      	uxth	r4, r3
 800282e:	e021      	b.n	8002874 <rotate_motor+0xa1c>
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f7fd feb1 	bl	8000598 <__aeabi_f2d>
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <rotate_motor+0xae8>)
 800283c:	f7fe f82e 	bl	800089c <__aeabi_ddiv>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	a33b      	add	r3, pc, #236	@ (adr r3, 8002938 <rotate_motor+0xae0>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f7fd fefb 	bl	8000648 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <rotate_motor+0xaec>)
 8002860:	f7fd fd3c 	bl	80002dc <__adddf3>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	f7fe f9c4 	bl	8000bf8 <__aeabi_d2uiz>
 8002870:	4603      	mov	r3, r0
 8002872:	b29c      	uxth	r4, r3
 8002874:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <rotate_motor+0xaf0>)
 8002876:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800287a:	335a      	adds	r3, #90	@ 0x5a
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002884:	edd7 7a05 	vldr	s15, [r7, #20]
 8002888:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800294c <rotate_motor+0xaf4>
 800288c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002898:	ee17 3a90 	vmov	r3, s15
 800289c:	2b00      	cmp	r3, #0
 800289e:	bfb8      	it	lt
 80028a0:	425b      	neglt	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fe66 	bl	8000574 <__aeabi_i2d>
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	4b28      	ldr	r3, [pc, #160]	@ (8002950 <rotate_motor+0xaf8>)
 80028ae:	f7fd fecb 	bl	8000648 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f99d 	bl	8000bf8 <__aeabi_d2uiz>
 80028be:	4603      	mov	r3, r0
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	4621      	mov	r1, r4
 80028c6:	4826      	ldr	r0, [pc, #152]	@ (8002960 <rotate_motor+0xb08>)
 80028c8:	f000 f9e2 	bl	8002c90 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 80028cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd44      	ble.n	8002964 <rotate_motor+0xb0c>
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7fd fe5c 	bl	8000598 <__aeabi_f2d>
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <rotate_motor+0xae8>)
 80028e6:	f7fd ffd9 	bl	800089c <__aeabi_ddiv>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	a311      	add	r3, pc, #68	@ (adr r3, 8002938 <rotate_motor+0xae0>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f7fd fea6 	bl	8000648 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <rotate_motor+0xaec>)
 800290a:	f7fd fce7 	bl	80002dc <__adddf3>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f96f 	bl	8000bf8 <__aeabi_d2uiz>
 800291a:	4603      	mov	r3, r0
 800291c:	b29c      	uxth	r4, r3
 800291e:	e043      	b.n	80029a8 <rotate_motor+0xb50>
 8002920:	00000000 	.word	0x00000000
 8002924:	40775000 	.word	0x40775000
 8002928:	00000000 	.word	0x00000000
 800292c:	40781000 	.word	0x40781000
 8002930:	00000000 	.word	0x00000000
 8002934:	4076d000 	.word	0x4076d000
 8002938:	00000000 	.word	0x00000000
 800293c:	40777000 	.word	0x40777000
 8002940:	40568000 	.word	0x40568000
 8002944:	407f4000 	.word	0x407f4000
 8002948:	20000060 	.word	0x20000060
 800294c:	42b40000 	.word	0x42b40000
 8002950:	40080000 	.word	0x40080000
 8002954:	20000072 	.word	0x20000072
 8002958:	43340000 	.word	0x43340000
 800295c:	40774000 	.word	0x40774000
 8002960:	20000066 	.word	0x20000066
 8002964:	6978      	ldr	r0, [r7, #20]
 8002966:	f7fd fe17 	bl	8000598 <__aeabi_f2d>
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4b66      	ldr	r3, [pc, #408]	@ (8002b08 <rotate_motor+0xcb0>)
 8002970:	f7fd ff94 	bl	800089c <__aeabi_ddiv>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	a35e      	add	r3, pc, #376	@ (adr r3, 8002af8 <rotate_motor+0xca0>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fd fe61 	bl	8000648 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	4b5e      	ldr	r3, [pc, #376]	@ (8002b0c <rotate_motor+0xcb4>)
 8002994:	f7fd fca2 	bl	80002dc <__adddf3>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f7fe f92a 	bl	8000bf8 <__aeabi_d2uiz>
 80029a4:	4603      	mov	r3, r0
 80029a6:	b29c      	uxth	r4, r3
 80029a8:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <rotate_motor+0xcb8>)
 80029aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80029ae:	335a      	adds	r3, #90	@ 0x5a
 80029b0:	ee07 3a90 	vmov	s15, r3
 80029b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80029bc:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8002b14 <rotate_motor+0xcbc>
 80029c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029cc:	ee17 3a90 	vmov	r3, s15
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bfb8      	it	lt
 80029d4:	425b      	neglt	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fdcc 	bl	8000574 <__aeabi_i2d>
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002b18 <rotate_motor+0xcc0>)
 80029e2:	f7fd fe31 	bl	8000648 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f7fe f903 	bl	8000bf8 <__aeabi_d2uiz>
 80029f2:	4603      	mov	r3, r0
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	4621      	mov	r1, r4
 80029fa:	4848      	ldr	r0, [pc, #288]	@ (8002b1c <rotate_motor+0xcc4>)
 80029fc:	f000 f948 	bl	8002c90 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002a00:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	dd22      	ble.n	8002a54 <rotate_motor+0xbfc>
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7fd fdc2 	bl	8000598 <__aeabi_f2d>
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <rotate_motor+0xcb0>)
 8002a1a:	f7fd ff3f 	bl	800089c <__aeabi_ddiv>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <rotate_motor+0xcc8>)
 8002a2c:	f7fd fe0c 	bl	8000648 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <rotate_motor+0xcb4>)
 8002a3e:	f7fd fc4d 	bl	80002dc <__adddf3>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7fe f8d5 	bl	8000bf8 <__aeabi_d2uiz>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	b29c      	uxth	r4, r3
 8002a52:	e021      	b.n	8002a98 <rotate_motor+0xc40>
 8002a54:	6978      	ldr	r0, [r7, #20]
 8002a56:	f7fd fd9f 	bl	8000598 <__aeabi_f2d>
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <rotate_motor+0xcb0>)
 8002a60:	f7fd ff1c 	bl	800089c <__aeabi_ddiv>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	a324      	add	r3, pc, #144	@ (adr r3, 8002b00 <rotate_motor+0xca8>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fde9 	bl	8000648 <__aeabi_dmul>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <rotate_motor+0xcb4>)
 8002a84:	f7fd fc2a 	bl	80002dc <__adddf3>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f8b2 	bl	8000bf8 <__aeabi_d2uiz>
 8002a94:	4603      	mov	r3, r0
 8002a96:	b29c      	uxth	r4, r3
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <rotate_motor+0xcb8>)
 8002a9a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002a9e:	335a      	adds	r3, #90	@ 0x5a
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aac:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8002b14 <rotate_motor+0xcbc>
 8002ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002abc:	ee17 3a90 	vmov	r3, s15
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bfb8      	it	lt
 8002ac4:	425b      	neglt	r3, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fd54 	bl	8000574 <__aeabi_i2d>
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <rotate_motor+0xcc0>)
 8002ad2:	f7fd fdb9 	bl	8000648 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f7fe f88b 	bl	8000bf8 <__aeabi_d2uiz>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4621      	mov	r1, r4
 8002aea:	480e      	ldr	r0, [pc, #56]	@ (8002b24 <rotate_motor+0xccc>)
 8002aec:	f000 f8d0 	bl	8002c90 <servo_move>
  }
}
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	00000000 	.word	0x00000000
 8002afc:	40772000 	.word	0x40772000
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40775000 	.word	0x40775000
 8002b08:	40568000 	.word	0x40568000
 8002b0c:	407f4000 	.word	0x407f4000
 8002b10:	20000060 	.word	0x20000060
 8002b14:	42b40000 	.word	0x42b40000
 8002b18:	40080000 	.word	0x40080000
 8002b1c:	2000006c 	.word	0x2000006c
 8002b20:	40778000 	.word	0x40778000
 8002b24:	20000072 	.word	0x20000072

08002b28 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	@ 0x30
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	eef0 6a40 	vmov.f32	s13, s0
 8002b32:	eeb0 7a60 	vmov.f32	s14, s1
 8002b36:	eef0 7a41 	vmov.f32	s15, s2
 8002b3a:	edc7 6a01 	vstr	s13, [r7, #4]
 8002b3e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002b42:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.x_vel != 0 && direction_encoder != LEFT_RIGHT || base_vel.y_vel != 0 && direction_encoder != FRONT_BACK) {
 8002b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	d003      	beq.n	8002b5c <movement_control+0x34>
 8002b54:	4b4c      	ldr	r3, [pc, #304]	@ (8002c88 <movement_control+0x160>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10a      	bne.n	8002b72 <movement_control+0x4a>
 8002b5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	d01f      	beq.n	8002baa <movement_control+0x82>
 8002b6a:	4b47      	ldr	r3, [pc, #284]	@ (8002c88 <movement_control+0x160>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01b      	beq.n	8002baa <movement_control+0x82>
    rotate_motor(base_vel);
 8002b72:	edd7 6a01 	vldr	s13, [r7, #4]
 8002b76:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b7e:	eeb0 0a66 	vmov.f32	s0, s13
 8002b82:	eef0 0a47 	vmov.f32	s1, s14
 8002b86:	eeb0 1a67 	vmov.f32	s2, s15
 8002b8a:	f7ff f965 	bl	8001e58 <rotate_motor>
    direction_encoder = base_vel.x_vel != 0 ? LEFT_RIGHT : FRONT_BACK;
 8002b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b38      	ldr	r3, [pc, #224]	@ (8002c88 <movement_control+0x160>)
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e01b      	b.n	8002be2 <movement_control+0xba>
  } else if (base_vel.z_vel != 0 && direction_encoder != ROTATE) {
 8002baa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d014      	beq.n	8002be2 <movement_control+0xba>
 8002bb8:	4b33      	ldr	r3, [pc, #204]	@ (8002c88 <movement_control+0x160>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d010      	beq.n	8002be2 <movement_control+0xba>
    rotate_motor(base_vel);
 8002bc0:	edd7 6a01 	vldr	s13, [r7, #4]
 8002bc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bcc:	eeb0 0a66 	vmov.f32	s0, s13
 8002bd0:	eef0 0a47 	vmov.f32	s1, s14
 8002bd4:	eeb0 1a67 	vmov.f32	s2, s15
 8002bd8:	f7ff f93e 	bl	8001e58 <rotate_motor>
    direction_encoder = ROTATE;
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <movement_control+0x160>)
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
  }

  WheelVelocity target_vel = base2wheel(base_vel);
 8002be2:	edd7 6a01 	vldr	s13, [r7, #4]
 8002be6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bee:	eeb0 0a66 	vmov.f32	s0, s13
 8002bf2:	eef0 0a47 	vmov.f32	s1, s14
 8002bf6:	eeb0 1a67 	vmov.f32	s2, s15
 8002bfa:	f7fe fe8d 	bl	8001918 <base2wheel>
 8002bfe:	eeb0 6a40 	vmov.f32	s12, s0
 8002c02:	eef0 6a60 	vmov.f32	s13, s1
 8002c06:	eeb0 7a41 	vmov.f32	s14, s2
 8002c0a:	eef0 7a61 	vmov.f32	s15, s3
 8002c0e:	ed87 6a08 	vstr	s12, [r7, #32]
 8002c12:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002c16:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8002c1a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  test_vel.front_left = target_vel.front_left;
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	4a1a      	ldr	r2, [pc, #104]	@ (8002c8c <movement_control+0x164>)
 8002c22:	6013      	str	r3, [r2, #0]
  test_vel.front_right = target_vel.front_right;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	4a19      	ldr	r2, [pc, #100]	@ (8002c8c <movement_control+0x164>)
 8002c28:	6053      	str	r3, [r2, #4]
  test_vel.rear_left = target_vel.rear_left;
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	4a17      	ldr	r2, [pc, #92]	@ (8002c8c <movement_control+0x164>)
 8002c2e:	6093      	str	r3, [r2, #8]
  test_vel.rear_right = target_vel.rear_right;
 8002c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c32:	4a16      	ldr	r2, [pc, #88]	@ (8002c8c <movement_control+0x164>)
 8002c34:	60d3      	str	r3, [r2, #12]
if (direction_encoder == LEFT_RIGHT) {
 8002c36:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <movement_control+0x160>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10b      	bne.n	8002c56 <movement_control+0x12e>
  target_vel.front_left *= -1;
 8002c3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c42:	eef1 7a67 	vneg.f32	s15, s15
 8002c46:	edc7 7a08 	vstr	s15, [r7, #32]
  target_vel.rear_left *= -1;
 8002c4a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002c4e:	eef1 7a67 	vneg.f32	s15, s15
 8002c52:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
}

  WheelPWM target_pwm = wheel2pwm(target_vel);
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	ed97 6a08 	vldr	s12, [r7, #32]
 8002c5e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002c62:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002c66:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002c6a:	eeb0 0a46 	vmov.f32	s0, s12
 8002c6e:	eef0 0a66 	vmov.f32	s1, s13
 8002c72:	eeb0 1a47 	vmov.f32	s2, s14
 8002c76:	eef0 1a67 	vmov.f32	s3, s15
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe ffa4 	bl	8001bc8 <wheel2pwm>
  // wheels_control(target_pwm);
}
 8002c80:	bf00      	nop
 8002c82:	3730      	adds	r7, #48	@ 0x30
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000164 	.word	0x20000164
 8002c8c:	20000154 	.word	0x20000154

08002c90 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8002ca0:	2355      	movs	r3, #85	@ 0x55
 8002ca2:	737b      	strb	r3, [r7, #13]
 8002ca4:	7b7b      	ldrb	r3, [r7, #13]
 8002ca6:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 8002cac:	2303      	movs	r3, #3
 8002cae:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 8002cb4:	883b      	ldrh	r3, [r7, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 8002cba:	883b      	ldrh	r3, [r7, #0]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8002cd0:	887b      	ldrh	r3, [r7, #2]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 8002cda:	f107 010c 	add.w	r1, r7, #12
 8002cde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ce2:	220a      	movs	r2, #10
 8002ce4:	489a      	ldr	r0, [pc, #616]	@ (8002f50 <servo_move+0x2c0>)
 8002ce6:	f003 fe09 	bl	80068fc <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	887a      	ldrh	r2, [r7, #2]
 8002cee:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	f200 810c 	bhi.w	8002f14 <servo_move+0x284>
 8002cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <servo_move+0x74>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d15 	.word	0x08002d15
 8002d08:	08002d95 	.word	0x08002d95
 8002d0c:	08002e15 	.word	0x08002e15
 8002d10:	08002e95 	.word	0x08002e95
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d1a:	d91c      	bls.n	8002d56 <servo_move+0xc6>
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fc26 	bl	8000574 <__aeabi_i2d>
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	4b89      	ldr	r3, [pc, #548]	@ (8002f54 <servo_move+0x2c4>)
 8002d2e:	f7fd fc8b 	bl	8000648 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	a379      	add	r3, pc, #484	@ (adr r3, 8002f20 <servo_move+0x290>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fdac 	bl	800089c <__aeabi_ddiv>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f7fd ff2c 	bl	8000ba8 <__aeabi_d2iz>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	e01b      	b.n	8002d8e <servo_move+0xfe>
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fc09 	bl	8000574 <__aeabi_i2d>
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b7c      	ldr	r3, [pc, #496]	@ (8002f58 <servo_move+0x2c8>)
 8002d68:	f7fd fc6e 	bl	8000648 <__aeabi_dmul>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	a36c      	add	r3, pc, #432	@ (adr r3, 8002f28 <servo_move+0x298>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fd8f 	bl	800089c <__aeabi_ddiv>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd ff0f 	bl	8000ba8 <__aeabi_d2iz>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	8093      	strh	r3, [r2, #4]
      break;
 8002d92:	e0c0      	b.n	8002f16 <servo_move+0x286>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d9a:	d91c      	bls.n	8002dd6 <servo_move+0x146>
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fbe6 	bl	8000574 <__aeabi_i2d>
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4b69      	ldr	r3, [pc, #420]	@ (8002f54 <servo_move+0x2c4>)
 8002dae:	f7fd fc4b 	bl	8000648 <__aeabi_dmul>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	4b67      	ldr	r3, [pc, #412]	@ (8002f5c <servo_move+0x2cc>)
 8002dc0:	f7fd fd6c 	bl	800089c <__aeabi_ddiv>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f7fd feec 	bl	8000ba8 <__aeabi_d2iz>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b21b      	sxth	r3, r3
 8002dd4:	e01b      	b.n	8002e0e <servo_move+0x17e>
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fbc9 	bl	8000574 <__aeabi_i2d>
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f58 <servo_move+0x2c8>)
 8002de8:	f7fd fc2e 	bl	8000648 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	a34e      	add	r3, pc, #312	@ (adr r3, 8002f30 <servo_move+0x2a0>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f7fd fd4f 	bl	800089c <__aeabi_ddiv>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7fd fecf 	bl	8000ba8 <__aeabi_d2iz>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	8093      	strh	r3, [r2, #4]
      break;
 8002e12:	e080      	b.n	8002f16 <servo_move+0x286>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002e1a:	d91c      	bls.n	8002e56 <servo_move+0x1c6>
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fba6 	bl	8000574 <__aeabi_i2d>
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	4b49      	ldr	r3, [pc, #292]	@ (8002f54 <servo_move+0x2c4>)
 8002e2e:	f7fd fc0b 	bl	8000648 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002f38 <servo_move+0x2a8>)
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	f7fd fd2c 	bl	800089c <__aeabi_ddiv>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f7fd feac 	bl	8000ba8 <__aeabi_d2iz>
 8002e50:	4603      	mov	r3, r0
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	e01b      	b.n	8002e8e <servo_move+0x1fe>
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb89 	bl	8000574 <__aeabi_i2d>
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <servo_move+0x2c8>)
 8002e68:	f7fd fbee 	bl	8000648 <__aeabi_dmul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	a332      	add	r3, pc, #200	@ (adr r3, 8002f40 <servo_move+0x2b0>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd fd0f 	bl	800089c <__aeabi_ddiv>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd fe8f 	bl	8000ba8 <__aeabi_d2iz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	8093      	strh	r3, [r2, #4]
      break;
 8002e92:	e040      	b.n	8002f16 <servo_move+0x286>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002e9a:	d91c      	bls.n	8002ed6 <servo_move+0x246>
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fb66 	bl	8000574 <__aeabi_i2d>
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	4b29      	ldr	r3, [pc, #164]	@ (8002f54 <servo_move+0x2c4>)
 8002eae:	f7fd fbcb 	bl	8000648 <__aeabi_dmul>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <servo_move+0x2d0>)
 8002ec0:	f7fd fcec 	bl	800089c <__aeabi_ddiv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fd fe6c 	bl	8000ba8 <__aeabi_d2iz>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	e01b      	b.n	8002f0e <servo_move+0x27e>
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fb49 	bl	8000574 <__aeabi_i2d>
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f58 <servo_move+0x2c8>)
 8002ee8:	f7fd fbae 	bl	8000648 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	a314      	add	r3, pc, #80	@ (adr r3, 8002f48 <servo_move+0x2b8>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fccf 	bl	800089c <__aeabi_ddiv>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe4f 	bl	8000ba8 <__aeabi_d2iz>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	8093      	strh	r3, [r2, #4]
      break;
 8002f12:	e000      	b.n	8002f16 <servo_move+0x286>
    default:
      break;
 8002f14:	bf00      	nop
  }
}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40781000 	.word	0x40781000
 8002f28:	00000000 	.word	0x00000000
 8002f2c:	c076d000 	.word	0xc076d000
 8002f30:	00000000 	.word	0x00000000
 8002f34:	c0777000 	.word	0xc0777000
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	40777000 	.word	0x40777000
 8002f40:	00000000 	.word	0x00000000
 8002f44:	c0772000 	.word	0xc0772000
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	c0775000 	.word	0xc0775000
 8002f50:	20000334 	.word	0x20000334
 8002f54:	40568000 	.word	0x40568000
 8002f58:	c0568000 	.word	0xc0568000
 8002f5c:	40774000 	.word	0x40774000
 8002f60:	40778000 	.word	0x40778000

08002f64 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  for (int i = 0; i < 4; i++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	e010      	b.n	8002f92 <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <servo_reset_all+0x40>)
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002f82:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fe82 	bl	8002c90 <servo_move>
  for (int i = 0; i < 4; i++)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	ddeb      	ble.n	8002f70 <servo_reset_all+0xc>
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000060 	.word	0x20000060

08002fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <HAL_MspInit+0x44>)
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002fec <HAL_MspInit+0x44>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <HAL_MspInit+0x44>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_MspInit+0x44>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	4a08      	ldr	r2, [pc, #32]	@ (8002fec <HAL_MspInit+0x44>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fd2:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_MspInit+0x44>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002fde:	f001 f9c3 	bl	8004368 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <HardFault_Handler+0x4>

08003000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <MemManage_Handler+0x4>

08003008 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <BusFault_Handler+0x4>

08003010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <UsageFault_Handler+0x4>

08003018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003046:	f000 fe2d 	bl	8003ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}

0800304e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e00a      	b.n	8003076 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003060:	f3af 8000 	nop.w
 8003064:	4601      	mov	r1, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	60ba      	str	r2, [r7, #8]
 800306c:	b2ca      	uxtb	r2, r1
 800306e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3301      	adds	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	dbf0      	blt.n	8003060 <_read+0x12>
  }

  return len;
 800307e:	687b      	ldr	r3, [r7, #4]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e009      	b.n	80030ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	60ba      	str	r2, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3301      	adds	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	dbf1      	blt.n	800309a <_write+0x12>
  }
  return len;
 80030b6:	687b      	ldr	r3, [r7, #4]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_close>:

int _close(int file)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030e8:	605a      	str	r2, [r3, #4]
  return 0;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <_isatty>:

int _isatty(int file)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003100:	2301      	movs	r3, #1
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003130:	4a14      	ldr	r2, [pc, #80]	@ (8003184 <_sbrk+0x5c>)
 8003132:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <_sbrk+0x60>)
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800313c:	4b13      	ldr	r3, [pc, #76]	@ (800318c <_sbrk+0x64>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <_sbrk+0x64>)
 8003146:	4a12      	ldr	r2, [pc, #72]	@ (8003190 <_sbrk+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d207      	bcs.n	8003168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003158:	f004 fda8 	bl	8007cac <__errno>
 800315c:	4603      	mov	r3, r0
 800315e:	220c      	movs	r2, #12
 8003160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003166:	e009      	b.n	800317c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003168:	4b08      	ldr	r3, [pc, #32]	@ (800318c <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800316e:	4b07      	ldr	r3, [pc, #28]	@ (800318c <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	4a05      	ldr	r2, [pc, #20]	@ (800318c <_sbrk+0x64>)
 8003178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20020000 	.word	0x20020000
 8003188:	00000400 	.word	0x00000400
 800318c:	20000168 	.word	0x20000168
 8003190:	200005b0 	.word	0x200005b0

08003194 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <SystemInit+0x20>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319e:	4a05      	ldr	r2, [pc, #20]	@ (80031b4 <SystemInit+0x20>)
 80031a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	@ 0x30
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	2224      	movs	r2, #36	@ 0x24
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 fd22 	bl	8007c10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031cc:	463b      	mov	r3, r7
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031d6:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <MX_TIM1_Init+0xac>)
 80031d8:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <MX_TIM1_Init+0xb0>)
 80031da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031dc:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <MX_TIM1_Init+0xac>)
 80031de:	2200      	movs	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e2:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <MX_TIM1_Init+0xac>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <MX_TIM1_Init+0xac>)
 80031ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <MX_TIM1_Init+0xac>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <MX_TIM1_Init+0xac>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031fc:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <MX_TIM1_Init+0xac>)
 80031fe:	2280      	movs	r2, #128	@ 0x80
 8003200:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003202:	2303      	movs	r3, #3
 8003204:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800320a:	2301      	movs	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003212:	230a      	movs	r3, #10
 8003214:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800321a:	2301      	movs	r3, #1
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800321e:	2300      	movs	r3, #0
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003222:	230a      	movs	r3, #10
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003226:	f107 030c 	add.w	r3, r7, #12
 800322a:	4619      	mov	r1, r3
 800322c:	480d      	ldr	r0, [pc, #52]	@ (8003264 <MX_TIM1_Init+0xac>)
 800322e:	f002 fa6b 	bl	8005708 <HAL_TIM_Encoder_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003238:	f7fe fb65 	bl	8001906 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323c:	2300      	movs	r3, #0
 800323e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003240:	2300      	movs	r3, #0
 8003242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003248:	463b      	mov	r3, r7
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	@ (8003264 <MX_TIM1_Init+0xac>)
 800324e:	f003 fa6f 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003258:	f7fe fb55 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	3730      	adds	r7, #48	@ 0x30
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000016c 	.word	0x2000016c
 8003268:	40012c00 	.word	0x40012c00

0800326c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08e      	sub	sp, #56	@ 0x38
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003280:	f107 031c 	add.w	r3, r7, #28
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800328c:	463b      	mov	r3, r7
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	611a      	str	r2, [r3, #16]
 800329a:	615a      	str	r2, [r3, #20]
 800329c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800329e:	4b33      	ldr	r3, [pc, #204]	@ (800336c <MX_TIM2_Init+0x100>)
 80032a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032a6:	4b31      	ldr	r3, [pc, #196]	@ (800336c <MX_TIM2_Init+0x100>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ac:	4b2f      	ldr	r3, [pc, #188]	@ (800336c <MX_TIM2_Init+0x100>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 80032b2:	4b2e      	ldr	r3, [pc, #184]	@ (800336c <MX_TIM2_Init+0x100>)
 80032b4:	f244 129f 	movw	r2, #16799	@ 0x419f
 80032b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ba:	4b2c      	ldr	r3, [pc, #176]	@ (800336c <MX_TIM2_Init+0x100>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032c0:	4b2a      	ldr	r3, [pc, #168]	@ (800336c <MX_TIM2_Init+0x100>)
 80032c2:	2280      	movs	r2, #128	@ 0x80
 80032c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032c6:	4829      	ldr	r0, [pc, #164]	@ (800336c <MX_TIM2_Init+0x100>)
 80032c8:	f001 ffda 	bl	8005280 <HAL_TIM_Base_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80032d2:	f7fe fb18 	bl	8001906 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032e0:	4619      	mov	r1, r3
 80032e2:	4822      	ldr	r0, [pc, #136]	@ (800336c <MX_TIM2_Init+0x100>)
 80032e4:	f002 fc78 	bl	8005bd8 <HAL_TIM_ConfigClockSource>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80032ee:	f7fe fb0a 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032f2:	481e      	ldr	r0, [pc, #120]	@ (800336c <MX_TIM2_Init+0x100>)
 80032f4:	f002 f894 	bl	8005420 <HAL_TIM_PWM_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80032fe:	f7fe fb02 	bl	8001906 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800330a:	f107 031c 	add.w	r3, r7, #28
 800330e:	4619      	mov	r1, r3
 8003310:	4816      	ldr	r0, [pc, #88]	@ (800336c <MX_TIM2_Init+0x100>)
 8003312:	f003 fa0d 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800331c:	f7fe faf3 	bl	8001906 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003320:	2360      	movs	r3, #96	@ 0x60
 8003322:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003330:	463b      	mov	r3, r7
 8003332:	2200      	movs	r2, #0
 8003334:	4619      	mov	r1, r3
 8003336:	480d      	ldr	r0, [pc, #52]	@ (800336c <MX_TIM2_Init+0x100>)
 8003338:	f002 fb3a 	bl	80059b0 <HAL_TIM_PWM_ConfigChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003342:	f7fe fae0 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003346:	463b      	mov	r3, r7
 8003348:	2204      	movs	r2, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4807      	ldr	r0, [pc, #28]	@ (800336c <MX_TIM2_Init+0x100>)
 800334e:	f002 fb2f 	bl	80059b0 <HAL_TIM_PWM_ConfigChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003358:	f7fe fad5 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800335c:	4803      	ldr	r0, [pc, #12]	@ (800336c <MX_TIM2_Init+0x100>)
 800335e:	f000 fa99 	bl	8003894 <HAL_TIM_MspPostInit>

}
 8003362:	bf00      	nop
 8003364:	3738      	adds	r7, #56	@ 0x38
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200001b8 	.word	0x200001b8

08003370 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08e      	sub	sp, #56	@ 0x38
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003376:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003390:	463b      	mov	r3, r7
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	611a      	str	r2, [r3, #16]
 800339e:	615a      	str	r2, [r3, #20]
 80033a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033a2:	4b32      	ldr	r3, [pc, #200]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033a4:	4a32      	ldr	r2, [pc, #200]	@ (8003470 <MX_TIM3_Init+0x100>)
 80033a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80033a8:	4b30      	ldr	r3, [pc, #192]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ae:	4b2f      	ldr	r3, [pc, #188]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 80033b4:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033b6:	f244 129f 	movw	r2, #16799	@ 0x419f
 80033ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033bc:	4b2b      	ldr	r3, [pc, #172]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033c2:	4b2a      	ldr	r3, [pc, #168]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033c4:	2280      	movs	r2, #128	@ 0x80
 80033c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033c8:	4828      	ldr	r0, [pc, #160]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033ca:	f001 ff59 	bl	8005280 <HAL_TIM_Base_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80033d4:	f7fe fa97 	bl	8001906 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033e2:	4619      	mov	r1, r3
 80033e4:	4821      	ldr	r0, [pc, #132]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033e6:	f002 fbf7 	bl	8005bd8 <HAL_TIM_ConfigClockSource>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80033f0:	f7fe fa89 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033f4:	481d      	ldr	r0, [pc, #116]	@ (800346c <MX_TIM3_Init+0xfc>)
 80033f6:	f002 f813 	bl	8005420 <HAL_TIM_PWM_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003400:	f7fe fa81 	bl	8001906 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4619      	mov	r1, r3
 8003412:	4816      	ldr	r0, [pc, #88]	@ (800346c <MX_TIM3_Init+0xfc>)
 8003414:	f003 f98c 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800341e:	f7fe fa72 	bl	8001906 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003422:	2360      	movs	r3, #96	@ 0x60
 8003424:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003432:	463b      	mov	r3, r7
 8003434:	2204      	movs	r2, #4
 8003436:	4619      	mov	r1, r3
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <MX_TIM3_Init+0xfc>)
 800343a:	f002 fab9 	bl	80059b0 <HAL_TIM_PWM_ConfigChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003444:	f7fe fa5f 	bl	8001906 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003448:	463b      	mov	r3, r7
 800344a:	220c      	movs	r2, #12
 800344c:	4619      	mov	r1, r3
 800344e:	4807      	ldr	r0, [pc, #28]	@ (800346c <MX_TIM3_Init+0xfc>)
 8003450:	f002 faae 	bl	80059b0 <HAL_TIM_PWM_ConfigChannel>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800345a:	f7fe fa54 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800345e:	4803      	ldr	r0, [pc, #12]	@ (800346c <MX_TIM3_Init+0xfc>)
 8003460:	f000 fa18 	bl	8003894 <HAL_TIM_MspPostInit>

}
 8003464:	bf00      	nop
 8003466:	3738      	adds	r7, #56	@ 0x38
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000204 	.word	0x20000204
 8003470:	40000400 	.word	0x40000400

08003474 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	@ 0x30
 8003478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	2224      	movs	r2, #36	@ 0x24
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fbc4 	bl	8007c10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003488:	463b      	mov	r3, r7
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003492:	4b21      	ldr	r3, [pc, #132]	@ (8003518 <MX_TIM4_Init+0xa4>)
 8003494:	4a21      	ldr	r2, [pc, #132]	@ (800351c <MX_TIM4_Init+0xa8>)
 8003496:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003498:	4b1f      	ldr	r3, [pc, #124]	@ (8003518 <MX_TIM4_Init+0xa4>)
 800349a:	2200      	movs	r2, #0
 800349c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349e:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <MX_TIM4_Init+0xa4>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003518 <MX_TIM4_Init+0xa4>)
 80034a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <MX_TIM4_Init+0xa4>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <MX_TIM4_Init+0xa4>)
 80034b4:	2280      	movs	r2, #128	@ 0x80
 80034b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034b8:	2303      	movs	r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034c0:	2301      	movs	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80034c8:	230a      	movs	r3, #10
 80034ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034cc:	2300      	movs	r3, #0
 80034ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034d0:	2301      	movs	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80034d8:	230a      	movs	r3, #10
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	4619      	mov	r1, r3
 80034e2:	480d      	ldr	r0, [pc, #52]	@ (8003518 <MX_TIM4_Init+0xa4>)
 80034e4:	f002 f910 	bl	8005708 <HAL_TIM_Encoder_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80034ee:	f7fe fa0a 	bl	8001906 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034fa:	463b      	mov	r3, r7
 80034fc:	4619      	mov	r1, r3
 80034fe:	4806      	ldr	r0, [pc, #24]	@ (8003518 <MX_TIM4_Init+0xa4>)
 8003500:	f003 f916 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800350a:	f7fe f9fc 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	3730      	adds	r7, #48	@ 0x30
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000250 	.word	0x20000250
 800351c:	40000800 	.word	0x40000800

08003520 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	@ 0x30
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	2224      	movs	r2, #36	@ 0x24
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f004 fb6e 	bl	8007c10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003534:	463b      	mov	r3, r7
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800353e:	4b21      	ldr	r3, [pc, #132]	@ (80035c4 <MX_TIM5_Init+0xa4>)
 8003540:	4a21      	ldr	r2, [pc, #132]	@ (80035c8 <MX_TIM5_Init+0xa8>)
 8003542:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003544:	4b1f      	ldr	r3, [pc, #124]	@ (80035c4 <MX_TIM5_Init+0xa4>)
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800354a:	4b1e      	ldr	r3, [pc, #120]	@ (80035c4 <MX_TIM5_Init+0xa4>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003550:	4b1c      	ldr	r3, [pc, #112]	@ (80035c4 <MX_TIM5_Init+0xa4>)
 8003552:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003556:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003558:	4b1a      	ldr	r3, [pc, #104]	@ (80035c4 <MX_TIM5_Init+0xa4>)
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800355e:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <MX_TIM5_Init+0xa4>)
 8003560:	2280      	movs	r2, #128	@ 0x80
 8003562:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003564:	2303      	movs	r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800356c:	2301      	movs	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003574:	230a      	movs	r3, #10
 8003576:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003578:	2300      	movs	r3, #0
 800357a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003580:	2300      	movs	r3, #0
 8003582:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003584:	230a      	movs	r3, #10
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	4619      	mov	r1, r3
 800358e:	480d      	ldr	r0, [pc, #52]	@ (80035c4 <MX_TIM5_Init+0xa4>)
 8003590:	f002 f8ba 	bl	8005708 <HAL_TIM_Encoder_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800359a:	f7fe f9b4 	bl	8001906 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80035a6:	463b      	mov	r3, r7
 80035a8:	4619      	mov	r1, r3
 80035aa:	4806      	ldr	r0, [pc, #24]	@ (80035c4 <MX_TIM5_Init+0xa4>)
 80035ac:	f003 f8c0 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80035b6:	f7fe f9a6 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80035ba:	bf00      	nop
 80035bc:	3730      	adds	r7, #48	@ 0x30
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	2000029c 	.word	0x2000029c
 80035c8:	40000c00 	.word	0x40000c00

080035cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08c      	sub	sp, #48	@ 0x30
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035d2:	f107 030c 	add.w	r3, r7, #12
 80035d6:	2224      	movs	r2, #36	@ 0x24
 80035d8:	2100      	movs	r1, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	f004 fb18 	bl	8007c10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e0:	463b      	mov	r3, r7
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80035ea:	4b23      	ldr	r3, [pc, #140]	@ (8003678 <MX_TIM8_Init+0xac>)
 80035ec:	4a23      	ldr	r2, [pc, #140]	@ (800367c <MX_TIM8_Init+0xb0>)
 80035ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80035f0:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <MX_TIM8_Init+0xac>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f6:	4b20      	ldr	r3, [pc, #128]	@ (8003678 <MX_TIM8_Init+0xac>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80035fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <MX_TIM8_Init+0xac>)
 80035fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003602:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003604:	4b1c      	ldr	r3, [pc, #112]	@ (8003678 <MX_TIM8_Init+0xac>)
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800360a:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <MX_TIM8_Init+0xac>)
 800360c:	2200      	movs	r2, #0
 800360e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003610:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <MX_TIM8_Init+0xac>)
 8003612:	2280      	movs	r2, #128	@ 0x80
 8003614:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003616:	2303      	movs	r3, #3
 8003618:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800361e:	2301      	movs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003626:	230a      	movs	r3, #10
 8003628:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800362e:	2301      	movs	r3, #1
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003632:	2300      	movs	r3, #0
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003636:	230a      	movs	r3, #10
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	4619      	mov	r1, r3
 8003640:	480d      	ldr	r0, [pc, #52]	@ (8003678 <MX_TIM8_Init+0xac>)
 8003642:	f002 f861 	bl	8005708 <HAL_TIM_Encoder_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800364c:	f7fe f95b 	bl	8001906 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003654:	2300      	movs	r3, #0
 8003656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800365c:	463b      	mov	r3, r7
 800365e:	4619      	mov	r1, r3
 8003660:	4805      	ldr	r0, [pc, #20]	@ (8003678 <MX_TIM8_Init+0xac>)
 8003662:	f003 f865 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800366c:	f7fe f94b 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003670:	bf00      	nop
 8003672:	3730      	adds	r7, #48	@ 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200002e8 	.word	0x200002e8
 800367c:	40013400 	.word	0x40013400

08003680 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b090      	sub	sp, #64	@ 0x40
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5d      	ldr	r2, [pc, #372]	@ (8003814 <HAL_TIM_Encoder_MspInit+0x194>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d128      	bne.n	80036f4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80036a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80036a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80036ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ba:	4b57      	ldr	r3, [pc, #348]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	4a56      	ldr	r2, [pc, #344]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036c6:	4b54      	ldr	r3, [pc, #336]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036d2:	2303      	movs	r3, #3
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80036e2:	2302      	movs	r3, #2
 80036e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036ea:	4619      	mov	r1, r3
 80036ec:	484b      	ldr	r0, [pc, #300]	@ (800381c <HAL_TIM_Encoder_MspInit+0x19c>)
 80036ee:	f000 fbfd 	bl	8003eec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80036f2:	e08a      	b.n	800380a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a49      	ldr	r2, [pc, #292]	@ (8003820 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d129      	bne.n	8003752 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036fe:	4b46      	ldr	r3, [pc, #280]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	4a45      	ldr	r2, [pc, #276]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	6593      	str	r3, [r2, #88]	@ 0x58
 800370a:	4b43      	ldr	r3, [pc, #268]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003716:	4b40      	ldr	r3, [pc, #256]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	4a3f      	ldr	r2, [pc, #252]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003722:	4b3d      	ldr	r3, [pc, #244]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800372e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003740:	2302      	movs	r3, #2
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003748:	4619      	mov	r1, r3
 800374a:	4836      	ldr	r0, [pc, #216]	@ (8003824 <HAL_TIM_Encoder_MspInit+0x1a4>)
 800374c:	f000 fbce 	bl	8003eec <HAL_GPIO_Init>
}
 8003750:	e05b      	b.n	800380a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a34      	ldr	r2, [pc, #208]	@ (8003828 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d129      	bne.n	80037b0 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800375c:	4b2e      	ldr	r3, [pc, #184]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	4a2d      	ldr	r2, [pc, #180]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 8003762:	f043 0308 	orr.w	r3, r3, #8
 8003766:	6593      	str	r3, [r2, #88]	@ 0x58
 8003768:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	4b28      	ldr	r3, [pc, #160]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 8003776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003778:	4a27      	ldr	r2, [pc, #156]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003780:	4b25      	ldr	r3, [pc, #148]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 8003782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800378c:	2303      	movs	r3, #3
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800379c:	2302      	movs	r3, #2
 800379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037a4:	4619      	mov	r1, r3
 80037a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037aa:	f000 fb9f 	bl	8003eec <HAL_GPIO_Init>
}
 80037ae:	e02c      	b.n	800380a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	@ (800382c <HAL_TIM_Encoder_MspInit+0x1ac>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d127      	bne.n	800380a <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80037ba:	4b17      	ldr	r3, [pc, #92]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80037bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037be:	4a16      	ldr	r2, [pc, #88]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80037c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80037c6:	4b14      	ldr	r3, [pc, #80]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80037c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d2:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80037d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d6:	4a10      	ldr	r2, [pc, #64]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037de:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x198>)
 80037e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ea:	23c0      	movs	r3, #192	@ 0xc0
 80037ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	2300      	movs	r3, #0
 80037f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80037fa:	2304      	movs	r3, #4
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003802:	4619      	mov	r1, r3
 8003804:	4805      	ldr	r0, [pc, #20]	@ (800381c <HAL_TIM_Encoder_MspInit+0x19c>)
 8003806:	f000 fb71 	bl	8003eec <HAL_GPIO_Init>
}
 800380a:	bf00      	nop
 800380c:	3740      	adds	r7, #64	@ 0x40
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40021000 	.word	0x40021000
 800381c:	48000800 	.word	0x48000800
 8003820:	40000800 	.word	0x40000800
 8003824:	48000c00 	.word	0x48000c00
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40013400 	.word	0x40013400

08003830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003840:	d10c      	bne.n	800385c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_TIM_Base_MspInit+0x5c>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	4a11      	ldr	r2, [pc, #68]	@ (800388c <HAL_TIM_Base_MspInit+0x5c>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6593      	str	r3, [r2, #88]	@ 0x58
 800384e:	4b0f      	ldr	r3, [pc, #60]	@ (800388c <HAL_TIM_Base_MspInit+0x5c>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800385a:	e010      	b.n	800387e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0b      	ldr	r2, [pc, #44]	@ (8003890 <HAL_TIM_Base_MspInit+0x60>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10b      	bne.n	800387e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003866:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_TIM_Base_MspInit+0x5c>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	4a08      	ldr	r2, [pc, #32]	@ (800388c <HAL_TIM_Base_MspInit+0x5c>)
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	6593      	str	r3, [r2, #88]	@ 0x58
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_TIM_Base_MspInit+0x5c>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	40000400 	.word	0x40000400

08003894 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b4:	d11c      	bne.n	80038f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b6:	4b21      	ldr	r3, [pc, #132]	@ (800393c <HAL_TIM_MspPostInit+0xa8>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	4a20      	ldr	r2, [pc, #128]	@ (800393c <HAL_TIM_MspPostInit+0xa8>)
 80038bc:	f043 0308 	orr.w	r3, r3, #8
 80038c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c2:	4b1e      	ldr	r3, [pc, #120]	@ (800393c <HAL_TIM_MspPostInit+0xa8>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80038ce:	2318      	movs	r3, #24
 80038d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80038de:	2302      	movs	r3, #2
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038e2:	f107 0314 	add.w	r3, r7, #20
 80038e6:	4619      	mov	r1, r3
 80038e8:	4815      	ldr	r0, [pc, #84]	@ (8003940 <HAL_TIM_MspPostInit+0xac>)
 80038ea:	f000 faff 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80038ee:	e020      	b.n	8003932 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a13      	ldr	r2, [pc, #76]	@ (8003944 <HAL_TIM_MspPostInit+0xb0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d11b      	bne.n	8003932 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038fa:	4b10      	ldr	r3, [pc, #64]	@ (800393c <HAL_TIM_MspPostInit+0xa8>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fe:	4a0f      	ldr	r2, [pc, #60]	@ (800393c <HAL_TIM_MspPostInit+0xa8>)
 8003900:	f043 0310 	orr.w	r3, r3, #16
 8003904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <HAL_TIM_MspPostInit+0xa8>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003912:	2328      	movs	r3, #40	@ 0x28
 8003914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003922:	2302      	movs	r3, #2
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4619      	mov	r1, r3
 800392c:	4806      	ldr	r0, [pc, #24]	@ (8003948 <HAL_TIM_MspPostInit+0xb4>)
 800392e:	f000 fadd 	bl	8003eec <HAL_GPIO_Init>
}
 8003932:	bf00      	nop
 8003934:	3728      	adds	r7, #40	@ 0x28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	48000c00 	.word	0x48000c00
 8003944:	40000400 	.word	0x40000400
 8003948:	48001000 	.word	0x48001000

0800394c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003950:	4b22      	ldr	r3, [pc, #136]	@ (80039dc <MX_UART4_Init+0x90>)
 8003952:	4a23      	ldr	r2, [pc, #140]	@ (80039e0 <MX_UART4_Init+0x94>)
 8003954:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003956:	4b21      	ldr	r3, [pc, #132]	@ (80039dc <MX_UART4_Init+0x90>)
 8003958:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800395c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800395e:	4b1f      	ldr	r3, [pc, #124]	@ (80039dc <MX_UART4_Init+0x90>)
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003964:	4b1d      	ldr	r3, [pc, #116]	@ (80039dc <MX_UART4_Init+0x90>)
 8003966:	2200      	movs	r2, #0
 8003968:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800396a:	4b1c      	ldr	r3, [pc, #112]	@ (80039dc <MX_UART4_Init+0x90>)
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003970:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <MX_UART4_Init+0x90>)
 8003972:	220c      	movs	r2, #12
 8003974:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003976:	4b19      	ldr	r3, [pc, #100]	@ (80039dc <MX_UART4_Init+0x90>)
 8003978:	2200      	movs	r2, #0
 800397a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800397c:	4b17      	ldr	r3, [pc, #92]	@ (80039dc <MX_UART4_Init+0x90>)
 800397e:	2200      	movs	r2, #0
 8003980:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003982:	4b16      	ldr	r3, [pc, #88]	@ (80039dc <MX_UART4_Init+0x90>)
 8003984:	2200      	movs	r2, #0
 8003986:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003988:	4b14      	ldr	r3, [pc, #80]	@ (80039dc <MX_UART4_Init+0x90>)
 800398a:	2200      	movs	r2, #0
 800398c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800398e:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <MX_UART4_Init+0x90>)
 8003990:	2200      	movs	r2, #0
 8003992:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003994:	4811      	ldr	r0, [pc, #68]	@ (80039dc <MX_UART4_Init+0x90>)
 8003996:	f002 ff61 	bl	800685c <HAL_UART_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80039a0:	f7fd ffb1 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039a4:	2100      	movs	r1, #0
 80039a6:	480d      	ldr	r0, [pc, #52]	@ (80039dc <MX_UART4_Init+0x90>)
 80039a8:	f003 fe52 	bl	8007650 <HAL_UARTEx_SetTxFifoThreshold>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80039b2:	f7fd ffa8 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039b6:	2100      	movs	r1, #0
 80039b8:	4808      	ldr	r0, [pc, #32]	@ (80039dc <MX_UART4_Init+0x90>)
 80039ba:	f003 fe87 	bl	80076cc <HAL_UARTEx_SetRxFifoThreshold>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80039c4:	f7fd ff9f 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80039c8:	4804      	ldr	r0, [pc, #16]	@ (80039dc <MX_UART4_Init+0x90>)
 80039ca:	f003 fe08 	bl	80075de <HAL_UARTEx_DisableFifoMode>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80039d4:	f7fd ff97 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80039d8:	bf00      	nop
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000334 	.word	0x20000334
 80039e0:	40004c00 	.word	0x40004c00

080039e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039e8:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 80039ea:	4a23      	ldr	r2, [pc, #140]	@ (8003a78 <MX_USART1_UART_Init+0x94>)
 80039ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039ee:	4b21      	ldr	r3, [pc, #132]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 80039f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a02:	4b1c      	ldr	r3, [pc, #112]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a08:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a0a:	220c      	movs	r2, #12
 8003a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a0e:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a14:	4b17      	ldr	r3, [pc, #92]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a1a:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a20:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a26:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a2c:	4811      	ldr	r0, [pc, #68]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a2e:	f002 ff15 	bl	800685c <HAL_UART_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003a38:	f7fd ff65 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	480d      	ldr	r0, [pc, #52]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a40:	f003 fe06 	bl	8007650 <HAL_UARTEx_SetTxFifoThreshold>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003a4a:	f7fd ff5c 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4808      	ldr	r0, [pc, #32]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a52:	f003 fe3b 	bl	80076cc <HAL_UARTEx_SetRxFifoThreshold>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003a5c:	f7fd ff53 	bl	8001906 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a60:	4804      	ldr	r0, [pc, #16]	@ (8003a74 <MX_USART1_UART_Init+0x90>)
 8003a62:	f003 fdbc 	bl	80075de <HAL_UARTEx_DisableFifoMode>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a6c:	f7fd ff4b 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200003c8 	.word	0x200003c8
 8003a78:	40013800 	.word	0x40013800

08003a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b0a0      	sub	sp, #128	@ 0x80
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a94:	f107 0318 	add.w	r3, r7, #24
 8003a98:	2254      	movs	r2, #84	@ 0x54
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f004 f8b7 	bl	8007c10 <memset>
  if(uartHandle->Instance==UART4)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8003b9c <HAL_UART_MspInit+0x120>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d137      	bne.n	8003b1c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003aac:	2308      	movs	r3, #8
 8003aae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ab4:	f107 0318 	add.w	r3, r7, #24
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 f993 	bl	8004de4 <HAL_RCCEx_PeriphCLKConfig>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ac4:	f7fd ff1f 	bl	8001906 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ac8:	4b35      	ldr	r3, [pc, #212]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	4a34      	ldr	r2, [pc, #208]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003ace:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad4:	4b32      	ldr	r3, [pc, #200]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aec:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003af8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003afc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	2300      	movs	r3, #0
 8003b08:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003b0a:	2305      	movs	r3, #5
 8003b0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b12:	4619      	mov	r1, r3
 8003b14:	4823      	ldr	r0, [pc, #140]	@ (8003ba4 <HAL_UART_MspInit+0x128>)
 8003b16:	f000 f9e9 	bl	8003eec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b1a:	e03a      	b.n	8003b92 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a21      	ldr	r2, [pc, #132]	@ (8003ba8 <HAL_UART_MspInit+0x12c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d135      	bne.n	8003b92 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b26:	2301      	movs	r3, #1
 8003b28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b2e:	f107 0318 	add.w	r3, r7, #24
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 f956 	bl	8004de4 <HAL_RCCEx_PeriphCLKConfig>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003b3e:	f7fd fee2 	bl	8001906 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b42:	4b17      	ldr	r3, [pc, #92]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b46:	4a16      	ldr	r2, [pc, #88]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <HAL_UART_MspInit+0x124>)
 8003b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b72:	2330      	movs	r3, #48	@ 0x30
 8003b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b76:	2302      	movs	r3, #2
 8003b78:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b82:	2307      	movs	r3, #7
 8003b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b86:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4805      	ldr	r0, [pc, #20]	@ (8003ba4 <HAL_UART_MspInit+0x128>)
 8003b8e:	f000 f9ad 	bl	8003eec <HAL_GPIO_Init>
}
 8003b92:	bf00      	nop
 8003b94:	3780      	adds	r7, #128	@ 0x80
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40004c00 	.word	0x40004c00
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	48000800 	.word	0x48000800
 8003ba8:	40013800 	.word	0x40013800

08003bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003bac:	480d      	ldr	r0, [pc, #52]	@ (8003be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003bae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003bb0:	f7ff faf0 	bl	8003194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bb4:	480c      	ldr	r0, [pc, #48]	@ (8003be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bb6:	490d      	ldr	r1, [pc, #52]	@ (8003bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf0 <LoopForever+0xe>)
  movs r3, #0
 8003bba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003bbc:	e002      	b.n	8003bc4 <LoopCopyDataInit>

08003bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bc2:	3304      	adds	r3, #4

08003bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bc8:	d3f9      	bcc.n	8003bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bca:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf8 <LoopForever+0x16>)
  movs r3, #0
 8003bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bd0:	e001      	b.n	8003bd6 <LoopFillZerobss>

08003bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bd4:	3204      	adds	r2, #4

08003bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bd8:	d3fb      	bcc.n	8003bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bda:	f004 f86d 	bl	8007cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bde:	f7fd fcd5 	bl	800158c <main>

08003be2 <LoopForever>:

LoopForever:
    b LoopForever
 8003be2:	e7fe      	b.n	8003be2 <LoopForever>
  ldr   r0, =_estack
 8003be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bec:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003bf0:	08009470 	.word	0x08009470
  ldr r2, =_sbss
 8003bf4:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003bf8:	200005ac 	.word	0x200005ac

08003bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bfc:	e7fe      	b.n	8003bfc <ADC1_2_IRQHandler>

08003bfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c08:	2003      	movs	r0, #3
 8003c0a:	f000 f93d 	bl	8003e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c0e:	200f      	movs	r0, #15
 8003c10:	f000 f80e 	bl	8003c30 <HAL_InitTick>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	71fb      	strb	r3, [r7, #7]
 8003c1e:	e001      	b.n	8003c24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c20:	f7ff f9c2 	bl	8002fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c24:	79fb      	ldrb	r3, [r7, #7]

}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003c3c:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <HAL_InitTick+0x68>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d022      	beq.n	8003c8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003c44:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <HAL_InitTick+0x6c>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <HAL_InitTick+0x68>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f93a 	bl	8003ed2 <HAL_SYSTICK_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10f      	bne.n	8003c84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d809      	bhi.n	8003c7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c72:	f000 f914 	bl	8003e9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <HAL_InitTick+0x70>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e007      	b.n	8003c8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	e004      	b.n	8003c8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	e001      	b.n	8003c8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000080 	.word	0x20000080
 8003c9c:	20000078 	.word	0x20000078
 8003ca0:	2000007c 	.word	0x2000007c

08003ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_IncTick+0x1c>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_IncTick+0x20>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a03      	ldr	r2, [pc, #12]	@ (8003cc0 <HAL_IncTick+0x1c>)
 8003cb4:	6013      	str	r3, [r2, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	2000045c 	.word	0x2000045c
 8003cc4:	20000080 	.word	0x20000080

08003cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return uwTick;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <HAL_GetTick+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	2000045c 	.word	0x2000045c

08003ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ce8:	f7ff ffee 	bl	8003cc8 <HAL_GetTick>
 8003cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cf8:	d004      	beq.n	8003d04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cfa:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <HAL_Delay+0x40>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d04:	bf00      	nop
 8003d06:	f7ff ffdf 	bl	8003cc8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d8f7      	bhi.n	8003d06 <HAL_Delay+0x26>
  {
  }
}
 8003d16:	bf00      	nop
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000080 	.word	0x20000080

08003d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d34:	4b0c      	ldr	r3, [pc, #48]	@ (8003d68 <__NVIC_SetPriorityGrouping+0x44>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d40:	4013      	ands	r3, r2
 8003d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d56:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <__NVIC_SetPriorityGrouping+0x44>)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	60d3      	str	r3, [r2, #12]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d70:	4b04      	ldr	r3, [pc, #16]	@ (8003d84 <__NVIC_GetPriorityGrouping+0x18>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	f003 0307 	and.w	r3, r3, #7
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	6039      	str	r1, [r7, #0]
 8003d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	db0a      	blt.n	8003db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	490c      	ldr	r1, [pc, #48]	@ (8003dd4 <__NVIC_SetPriority+0x4c>)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	440b      	add	r3, r1
 8003dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db0:	e00a      	b.n	8003dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	4908      	ldr	r1, [pc, #32]	@ (8003dd8 <__NVIC_SetPriority+0x50>)
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	3b04      	subs	r3, #4
 8003dc0:	0112      	lsls	r2, r2, #4
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	761a      	strb	r2, [r3, #24]
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	e000e100 	.word	0xe000e100
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b089      	sub	sp, #36	@ 0x24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f1c3 0307 	rsb	r3, r3, #7
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	bf28      	it	cs
 8003dfa:	2304      	movcs	r3, #4
 8003dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3304      	adds	r3, #4
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d902      	bls.n	8003e0c <NVIC_EncodePriority+0x30>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3b03      	subs	r3, #3
 8003e0a:	e000      	b.n	8003e0e <NVIC_EncodePriority+0x32>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	401a      	ands	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	43d9      	mvns	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e34:	4313      	orrs	r3, r2
         );
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	@ 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e54:	d301      	bcc.n	8003e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00f      	b.n	8003e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e84 <SysTick_Config+0x40>)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e62:	210f      	movs	r1, #15
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e68:	f7ff ff8e 	bl	8003d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e6c:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <SysTick_Config+0x40>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e72:	4b04      	ldr	r3, [pc, #16]	@ (8003e84 <SysTick_Config+0x40>)
 8003e74:	2207      	movs	r2, #7
 8003e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	e000e010 	.word	0xe000e010

08003e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ff47 	bl	8003d24 <__NVIC_SetPriorityGrouping>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003eac:	f7ff ff5e 	bl	8003d6c <__NVIC_GetPriorityGrouping>
 8003eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	6978      	ldr	r0, [r7, #20]
 8003eb8:	f7ff ff90 	bl	8003ddc <NVIC_EncodePriority>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff5f 	bl	8003d88 <__NVIC_SetPriority>
}
 8003eca:	bf00      	nop
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ffb2 	bl	8003e44 <SysTick_Config>
 8003ee0:	4603      	mov	r3, r0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003efa:	e15a      	b.n	80041b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 814c 	beq.w	80041ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d005      	beq.n	8003f2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d130      	bne.n	8003f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f62:	2201      	movs	r2, #1
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0201 	and.w	r2, r3, #1
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d017      	beq.n	8003fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d123      	bne.n	800401e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	08da      	lsrs	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3208      	adds	r2, #8
 8004018:	6939      	ldr	r1, [r7, #16]
 800401a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80a6 	beq.w	80041ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004060:	4b5b      	ldr	r3, [pc, #364]	@ (80041d0 <HAL_GPIO_Init+0x2e4>)
 8004062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004064:	4a5a      	ldr	r2, [pc, #360]	@ (80041d0 <HAL_GPIO_Init+0x2e4>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6613      	str	r3, [r2, #96]	@ 0x60
 800406c:	4b58      	ldr	r3, [pc, #352]	@ (80041d0 <HAL_GPIO_Init+0x2e4>)
 800406e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004078:	4a56      	ldr	r2, [pc, #344]	@ (80041d4 <HAL_GPIO_Init+0x2e8>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	220f      	movs	r2, #15
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040a2:	d01f      	beq.n	80040e4 <HAL_GPIO_Init+0x1f8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a4c      	ldr	r2, [pc, #304]	@ (80041d8 <HAL_GPIO_Init+0x2ec>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d019      	beq.n	80040e0 <HAL_GPIO_Init+0x1f4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a4b      	ldr	r2, [pc, #300]	@ (80041dc <HAL_GPIO_Init+0x2f0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_GPIO_Init+0x1f0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a4a      	ldr	r2, [pc, #296]	@ (80041e0 <HAL_GPIO_Init+0x2f4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00d      	beq.n	80040d8 <HAL_GPIO_Init+0x1ec>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a49      	ldr	r2, [pc, #292]	@ (80041e4 <HAL_GPIO_Init+0x2f8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d007      	beq.n	80040d4 <HAL_GPIO_Init+0x1e8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a48      	ldr	r2, [pc, #288]	@ (80041e8 <HAL_GPIO_Init+0x2fc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <HAL_GPIO_Init+0x1e4>
 80040cc:	2305      	movs	r3, #5
 80040ce:	e00a      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040d0:	2306      	movs	r3, #6
 80040d2:	e008      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040d4:	2304      	movs	r3, #4
 80040d6:	e006      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040d8:	2303      	movs	r3, #3
 80040da:	e004      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040dc:	2302      	movs	r3, #2
 80040de:	e002      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_GPIO_Init+0x1fa>
 80040e4:	2300      	movs	r3, #0
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	f002 0203 	and.w	r2, r2, #3
 80040ec:	0092      	lsls	r2, r2, #2
 80040ee:	4093      	lsls	r3, r2
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040f6:	4937      	ldr	r1, [pc, #220]	@ (80041d4 <HAL_GPIO_Init+0x2e8>)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	3302      	adds	r3, #2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004104:	4b39      	ldr	r3, [pc, #228]	@ (80041ec <HAL_GPIO_Init+0x300>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	43db      	mvns	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004128:	4a30      	ldr	r2, [pc, #192]	@ (80041ec <HAL_GPIO_Init+0x300>)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800412e:	4b2f      	ldr	r3, [pc, #188]	@ (80041ec <HAL_GPIO_Init+0x300>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	43db      	mvns	r3, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004152:	4a26      	ldr	r2, [pc, #152]	@ (80041ec <HAL_GPIO_Init+0x300>)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004158:	4b24      	ldr	r3, [pc, #144]	@ (80041ec <HAL_GPIO_Init+0x300>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800417c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <HAL_GPIO_Init+0x300>)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004182:	4b1a      	ldr	r3, [pc, #104]	@ (80041ec <HAL_GPIO_Init+0x300>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43db      	mvns	r3, r3
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041a6:	4a11      	ldr	r2, [pc, #68]	@ (80041ec <HAL_GPIO_Init+0x300>)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3301      	adds	r3, #1
 80041b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f ae9d 	bne.w	8003efc <HAL_GPIO_Init+0x10>
  }
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40010000 	.word	0x40010000
 80041d8:	48000400 	.word	0x48000400
 80041dc:	48000800 	.word	0x48000800
 80041e0:	48000c00 	.word	0x48000c00
 80041e4:	48001000 	.word	0x48001000
 80041e8:	48001400 	.word	0x48001400
 80041ec:	40010400 	.word	0x40010400

080041f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
 80041fc:	4613      	mov	r3, r2
 80041fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004200:	787b      	ldrb	r3, [r7, #1]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800420c:	e002      	b.n	8004214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d141      	bne.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800422e:	4b4b      	ldr	r3, [pc, #300]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423a:	d131      	bne.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800423c:	4b47      	ldr	r3, [pc, #284]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004242:	4a46      	ldr	r2, [pc, #280]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800424c:	4b43      	ldr	r3, [pc, #268]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004254:	4a41      	ldr	r2, [pc, #260]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800425a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800425c:	4b40      	ldr	r3, [pc, #256]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2232      	movs	r2, #50	@ 0x32
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	4a3f      	ldr	r2, [pc, #252]	@ (8004364 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	0c9b      	lsrs	r3, r3, #18
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004272:	e002      	b.n	800427a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b01      	subs	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800427a:	4b38      	ldr	r3, [pc, #224]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004286:	d102      	bne.n	800428e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f2      	bne.n	8004274 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800428e:	4b33      	ldr	r3, [pc, #204]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429a:	d158      	bne.n	800434e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e057      	b.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042a0:	4b2e      	ldr	r3, [pc, #184]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042a6:	4a2d      	ldr	r2, [pc, #180]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042b0:	e04d      	b.n	800434e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b8:	d141      	bne.n	800433e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ba:	4b28      	ldr	r3, [pc, #160]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c6:	d131      	bne.n	800432c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042c8:	4b24      	ldr	r3, [pc, #144]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ce:	4a23      	ldr	r2, [pc, #140]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042d8:	4b20      	ldr	r3, [pc, #128]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042e0:	4a1e      	ldr	r2, [pc, #120]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2232      	movs	r2, #50	@ 0x32
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	0c9b      	lsrs	r3, r3, #18
 80042fa:	3301      	adds	r3, #1
 80042fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042fe:	e002      	b.n	8004306 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3b01      	subs	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004306:	4b15      	ldr	r3, [pc, #84]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004312:	d102      	bne.n	800431a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f2      	bne.n	8004300 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800431a:	4b10      	ldr	r3, [pc, #64]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004326:	d112      	bne.n	800434e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e011      	b.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800432c:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004332:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800433c:	e007      	b.n	800434e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800433e:	4b07      	ldr	r3, [pc, #28]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004346:	4a05      	ldr	r2, [pc, #20]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004348:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800434c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40007000 	.word	0x40007000
 8004360:	20000078 	.word	0x20000078
 8004364:	431bde83 	.word	0x431bde83

08004368 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800436c:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a04      	ldr	r2, [pc, #16]	@ (8004384 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004376:	6093      	str	r3, [r2, #8]
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40007000 	.word	0x40007000

08004388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e2fe      	b.n	8004998 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d075      	beq.n	8004492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a6:	4b97      	ldr	r3, [pc, #604]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b0:	4b94      	ldr	r3, [pc, #592]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d102      	bne.n	80043c6 <HAL_RCC_OscConfig+0x3e>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_OscConfig+0x44>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d10b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	4b8d      	ldr	r3, [pc, #564]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d05b      	beq.n	8004490 <HAL_RCC_OscConfig+0x108>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d157      	bne.n	8004490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e2d9      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x74>
 80043ee:	4b85      	ldr	r3, [pc, #532]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a84      	ldr	r2, [pc, #528]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e01d      	b.n	8004438 <HAL_RCC_OscConfig+0xb0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x98>
 8004406:	4b7f      	ldr	r3, [pc, #508]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a7e      	ldr	r2, [pc, #504]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b7c      	ldr	r3, [pc, #496]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a7b      	ldr	r2, [pc, #492]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0xb0>
 8004420:	4b78      	ldr	r3, [pc, #480]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a77      	ldr	r2, [pc, #476]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b75      	ldr	r3, [pc, #468]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a74      	ldr	r2, [pc, #464]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d013      	beq.n	8004468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7ff fc42 	bl	8003cc8 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004448:	f7ff fc3e 	bl	8003cc8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	@ 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e29e      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445a:	4b6a      	ldr	r3, [pc, #424]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0xc0>
 8004466:	e014      	b.n	8004492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7ff fc2e 	bl	8003cc8 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7ff fc2a 	bl	8003cc8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	@ 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e28a      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004482:	4b60      	ldr	r3, [pc, #384]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0xe8>
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d075      	beq.n	800458a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449e:	4b59      	ldr	r3, [pc, #356]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a8:	4b56      	ldr	r3, [pc, #344]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	d102      	bne.n	80044be <HAL_RCC_OscConfig+0x136>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d002      	beq.n	80044c4 <HAL_RCC_OscConfig+0x13c>
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d11f      	bne.n	8004504 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_OscConfig+0x154>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e25d      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b49      	ldr	r3, [pc, #292]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	4946      	ldr	r1, [pc, #280]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044f0:	4b45      	ldr	r3, [pc, #276]	@ (8004608 <HAL_RCC_OscConfig+0x280>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fb9b 	bl	8003c30 <HAL_InitTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d043      	beq.n	8004588 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e249      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d023      	beq.n	8004554 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800450c:	4b3d      	ldr	r3, [pc, #244]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a3c      	ldr	r2, [pc, #240]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7ff fbd6 	bl	8003cc8 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004520:	f7ff fbd2 	bl	8003cc8 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e232      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004532:	4b34      	ldr	r3, [pc, #208]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453e:	4b31      	ldr	r3, [pc, #196]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	061b      	lsls	r3, r3, #24
 800454c:	492d      	ldr	r1, [pc, #180]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	604b      	str	r3, [r1, #4]
 8004552:	e01a      	b.n	800458a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004554:	4b2b      	ldr	r3, [pc, #172]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2a      	ldr	r2, [pc, #168]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 800455a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800455e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7ff fbb2 	bl	8003cc8 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004568:	f7ff fbae 	bl	8003cc8 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e20e      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800457a:	4b22      	ldr	r3, [pc, #136]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1e0>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d041      	beq.n	800461a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01c      	beq.n	80045d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459e:	4b19      	ldr	r3, [pc, #100]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a4:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ae:	f7ff fb8b 	bl	8003cc8 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b6:	f7ff fb87 	bl	8003cc8 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e1e7      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80045ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ef      	beq.n	80045b6 <HAL_RCC_OscConfig+0x22e>
 80045d6:	e020      	b.n	800461a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80045da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045de:	4a09      	ldr	r2, [pc, #36]	@ (8004604 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7ff fb6e 	bl	8003cc8 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ee:	e00d      	b.n	800460c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f0:	f7ff fb6a 	bl	8003cc8 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d906      	bls.n	800460c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e1ca      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800460c:	4b8c      	ldr	r3, [pc, #560]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1ea      	bne.n	80045f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80a6 	beq.w	8004774 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004628:	2300      	movs	r3, #0
 800462a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800462c:	4b84      	ldr	r3, [pc, #528]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 800462e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_OscConfig+0x2b4>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x2b6>
 800463c:	2300      	movs	r3, #0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	4b7f      	ldr	r3, [pc, #508]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004646:	4a7e      	ldr	r2, [pc, #504]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464c:	6593      	str	r3, [r2, #88]	@ 0x58
 800464e:	4b7c      	ldr	r3, [pc, #496]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800465a:	2301      	movs	r3, #1
 800465c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465e:	4b79      	ldr	r3, [pc, #484]	@ (8004844 <HAL_RCC_OscConfig+0x4bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d118      	bne.n	800469c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800466a:	4b76      	ldr	r3, [pc, #472]	@ (8004844 <HAL_RCC_OscConfig+0x4bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a75      	ldr	r2, [pc, #468]	@ (8004844 <HAL_RCC_OscConfig+0x4bc>)
 8004670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004676:	f7ff fb27 	bl	8003cc8 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467e:	f7ff fb23 	bl	8003cc8 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e183      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004690:	4b6c      	ldr	r3, [pc, #432]	@ (8004844 <HAL_RCC_OscConfig+0x4bc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d108      	bne.n	80046b6 <HAL_RCC_OscConfig+0x32e>
 80046a4:	4b66      	ldr	r3, [pc, #408]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	4a65      	ldr	r2, [pc, #404]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046b4:	e024      	b.n	8004700 <HAL_RCC_OscConfig+0x378>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d110      	bne.n	80046e0 <HAL_RCC_OscConfig+0x358>
 80046be:	4b60      	ldr	r3, [pc, #384]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046de:	e00f      	b.n	8004700 <HAL_RCC_OscConfig+0x378>
 80046e0:	4b57      	ldr	r3, [pc, #348]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	4a56      	ldr	r2, [pc, #344]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046f0:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	4a52      	ldr	r2, [pc, #328]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d016      	beq.n	8004736 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7ff fade 	bl	8003cc8 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7ff fada 	bl	8003cc8 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e138      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004726:	4b46      	ldr	r3, [pc, #280]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0ed      	beq.n	8004710 <HAL_RCC_OscConfig+0x388>
 8004734:	e015      	b.n	8004762 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004736:	f7ff fac7 	bl	8003cc8 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800473c:	e00a      	b.n	8004754 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473e:	f7ff fac3 	bl	8003cc8 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e121      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004754:	4b3a      	ldr	r3, [pc, #232]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ed      	bne.n	800473e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004762:	7ffb      	ldrb	r3, [r7, #31]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b35      	ldr	r3, [pc, #212]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	4a34      	ldr	r2, [pc, #208]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d03c      	beq.n	80047fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01c      	beq.n	80047c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004788:	4b2d      	ldr	r3, [pc, #180]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 800478a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800478e:	4a2c      	ldr	r2, [pc, #176]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7ff fa96 	bl	8003cc8 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a0:	f7ff fa92 	bl	8003cc8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e0f2      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047b2:	4b23      	ldr	r3, [pc, #140]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80047b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0ef      	beq.n	80047a0 <HAL_RCC_OscConfig+0x418>
 80047c0:	e01b      	b.n	80047fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80047c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d2:	f7ff fa79 	bl	8003cc8 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047da:	f7ff fa75 	bl	8003cc8 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e0d5      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047ec:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 80047ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ef      	bne.n	80047da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80c9 	beq.w	8004996 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004804:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 030c 	and.w	r3, r3, #12
 800480c:	2b0c      	cmp	r3, #12
 800480e:	f000 8083 	beq.w	8004918 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d15e      	bne.n	80048d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a08      	ldr	r2, [pc, #32]	@ (8004840 <HAL_RCC_OscConfig+0x4b8>)
 8004820:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7ff fa4f 	bl	8003cc8 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482c:	e00c      	b.n	8004848 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7ff fa4b 	bl	8003cc8 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d905      	bls.n	8004848 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0ab      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
 8004840:	40021000 	.word	0x40021000
 8004844:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004848:	4b55      	ldr	r3, [pc, #340]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ec      	bne.n	800482e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004854:	4b52      	ldr	r3, [pc, #328]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	4b52      	ldr	r3, [pc, #328]	@ (80049a4 <HAL_RCC_OscConfig+0x61c>)
 800485a:	4013      	ands	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6a11      	ldr	r1, [r2, #32]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004864:	3a01      	subs	r2, #1
 8004866:	0112      	lsls	r2, r2, #4
 8004868:	4311      	orrs	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800486e:	0212      	lsls	r2, r2, #8
 8004870:	4311      	orrs	r1, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004876:	0852      	lsrs	r2, r2, #1
 8004878:	3a01      	subs	r2, #1
 800487a:	0552      	lsls	r2, r2, #21
 800487c:	4311      	orrs	r1, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004882:	0852      	lsrs	r2, r2, #1
 8004884:	3a01      	subs	r2, #1
 8004886:	0652      	lsls	r2, r2, #25
 8004888:	4311      	orrs	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800488e:	06d2      	lsls	r2, r2, #27
 8004890:	430a      	orrs	r2, r1
 8004892:	4943      	ldr	r1, [pc, #268]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 8004894:	4313      	orrs	r3, r2
 8004896:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004898:	4b41      	ldr	r3, [pc, #260]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a40      	ldr	r2, [pc, #256]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 800489e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048a4:	4b3e      	ldr	r3, [pc, #248]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a3d      	ldr	r2, [pc, #244]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 80048aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7ff fa0a 	bl	8003cc8 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b8:	f7ff fa06 	bl	8003cc8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e066      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ca:	4b35      	ldr	r3, [pc, #212]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x530>
 80048d6:	e05e      	b.n	8004996 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d8:	4b31      	ldr	r3, [pc, #196]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a30      	ldr	r2, [pc, #192]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7ff f9f0 	bl	8003cc8 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7ff f9ec 	bl	8003cc8 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e04c      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048fe:	4b28      	ldr	r3, [pc, #160]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800490a:	4b25      	ldr	r3, [pc, #148]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	4924      	ldr	r1, [pc, #144]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 8004910:	4b25      	ldr	r3, [pc, #148]	@ (80049a8 <HAL_RCC_OscConfig+0x620>)
 8004912:	4013      	ands	r3, r2
 8004914:	60cb      	str	r3, [r1, #12]
 8004916:	e03e      	b.n	8004996 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e039      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004924:	4b1e      	ldr	r3, [pc, #120]	@ (80049a0 <HAL_RCC_OscConfig+0x618>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f003 0203 	and.w	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	429a      	cmp	r2, r3
 8004936:	d12c      	bne.n	8004992 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	3b01      	subs	r3, #1
 8004944:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d123      	bne.n	8004992 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d11b      	bne.n	8004992 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d113      	bne.n	8004992 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d109      	bne.n	8004992 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	3b01      	subs	r3, #1
 800498c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d001      	beq.n	8004996 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000
 80049a4:	019f800c 	.word	0x019f800c
 80049a8:	feeefffc 	.word	0xfeeefffc

080049ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e11e      	b.n	8004c02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b91      	ldr	r3, [pc, #580]	@ (8004c0c <HAL_RCC_ClockConfig+0x260>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d910      	bls.n	80049f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b8e      	ldr	r3, [pc, #568]	@ (8004c0c <HAL_RCC_ClockConfig+0x260>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 020f 	bic.w	r2, r3, #15
 80049da:	498c      	ldr	r1, [pc, #560]	@ (8004c0c <HAL_RCC_ClockConfig+0x260>)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b8a      	ldr	r3, [pc, #552]	@ (8004c0c <HAL_RCC_ClockConfig+0x260>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e106      	b.n	8004c02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d073      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d129      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a08:	4b81      	ldr	r3, [pc, #516]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0f4      	b.n	8004c02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a18:	f000 f99e 	bl	8004d58 <RCC_GetSysClockFreqFromPLLSource>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4a7c      	ldr	r2, [pc, #496]	@ (8004c14 <HAL_RCC_ClockConfig+0x268>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d93f      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a26:	4b7a      	ldr	r3, [pc, #488]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d033      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d12f      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a46:	4b72      	ldr	r3, [pc, #456]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a4e:	4a70      	ldr	r2, [pc, #448]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a56:	2380      	movs	r3, #128	@ 0x80
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e024      	b.n	8004aa6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a64:	4b6a      	ldr	r3, [pc, #424]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0c6      	b.n	8004c02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a74:	4b66      	ldr	r3, [pc, #408]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0be      	b.n	8004c02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a84:	f000 f8ce 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4a61      	ldr	r2, [pc, #388]	@ (8004c14 <HAL_RCC_ClockConfig+0x268>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d909      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a92:	4b5f      	ldr	r3, [pc, #380]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a9a:	4a5d      	ldr	r2, [pc, #372]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4957      	ldr	r1, [pc, #348]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab8:	f7ff f906 	bl	8003cc8 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7ff f902 	bl	8003cc8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e095      	b.n	8004c02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d023      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b00:	4b43      	ldr	r3, [pc, #268]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a42      	ldr	r2, [pc, #264]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004b06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b18:	4b3d      	ldr	r3, [pc, #244]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b20:	4a3b      	ldr	r2, [pc, #236]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004b22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b39      	ldr	r3, [pc, #228]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4936      	ldr	r1, [pc, #216]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b80      	cmp	r3, #128	@ 0x80
 8004b40:	d105      	bne.n	8004b4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b42:	4b33      	ldr	r3, [pc, #204]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	4a32      	ldr	r2, [pc, #200]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004b48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c0c <HAL_RCC_ClockConfig+0x260>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d21d      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c0c <HAL_RCC_ClockConfig+0x260>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 020f 	bic.w	r2, r3, #15
 8004b64:	4929      	ldr	r1, [pc, #164]	@ (8004c0c <HAL_RCC_ClockConfig+0x260>)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b6c:	f7ff f8ac 	bl	8003cc8 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b74:	f7ff f8a8 	bl	8003cc8 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e03b      	b.n	8004c02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <HAL_RCC_ClockConfig+0x260>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1ed      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4917      	ldr	r1, [pc, #92]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc2:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	490f      	ldr	r1, [pc, #60]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bd6:	f000 f825 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	490c      	ldr	r1, [pc, #48]	@ (8004c18 <HAL_RCC_ClockConfig+0x26c>)
 8004be8:	5ccb      	ldrb	r3, [r1, r3]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004c1c <HAL_RCC_ClockConfig+0x270>)
 8004bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <HAL_RCC_ClockConfig+0x274>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f818 	bl	8003c30 <HAL_InitTick>
 8004c00:	4603      	mov	r3, r0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	40021000 	.word	0x40021000
 8004c14:	04c4b400 	.word	0x04c4b400
 8004c18:	08009290 	.word	0x08009290
 8004c1c:	20000078 	.word	0x20000078
 8004c20:	2000007c 	.word	0x2000007c

08004c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d102      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c36:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	e047      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c3c:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d102      	bne.n	8004c4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c48:	4b26      	ldr	r3, [pc, #152]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e03e      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c4e:	4b23      	ldr	r3, [pc, #140]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d136      	bne.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c64:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	091b      	lsrs	r3, r3, #4
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d10c      	bne.n	8004c92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c78:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	4a16      	ldr	r2, [pc, #88]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c82:	68d2      	ldr	r2, [r2, #12]
 8004c84:	0a12      	lsrs	r2, r2, #8
 8004c86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	617b      	str	r3, [r7, #20]
      break;
 8004c90:	e00c      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c92:	4a13      	ldr	r2, [pc, #76]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	4a10      	ldr	r2, [pc, #64]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c9c:	68d2      	ldr	r2, [r2, #12]
 8004c9e:	0a12      	lsrs	r2, r2, #8
 8004ca0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ca4:	fb02 f303 	mul.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]
      break;
 8004caa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cac:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	0e5b      	lsrs	r3, r3, #25
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	e001      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ccc:	693b      	ldr	r3, [r7, #16]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	00f42400 	.word	0x00f42400
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b03      	ldr	r3, [pc, #12]	@ (8004cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000078 	.word	0x20000078

08004d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d04:	f7ff fff0 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4904      	ldr	r1, [pc, #16]	@ (8004d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	080092a0 	.word	0x080092a0

08004d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d30:	f7ff ffda 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0adb      	lsrs	r3, r3, #11
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4904      	ldr	r1, [pc, #16]	@ (8004d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000
 8004d54:	080092a0 	.word	0x080092a0

08004d58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d10c      	bne.n	8004d96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d7c:	4a17      	ldr	r2, [pc, #92]	@ (8004ddc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	4a14      	ldr	r2, [pc, #80]	@ (8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d86:	68d2      	ldr	r2, [r2, #12]
 8004d88:	0a12      	lsrs	r2, r2, #8
 8004d8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	617b      	str	r3, [r7, #20]
    break;
 8004d94:	e00c      	b.n	8004db0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d96:	4a12      	ldr	r2, [pc, #72]	@ (8004de0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004da0:	68d2      	ldr	r2, [r2, #12]
 8004da2:	0a12      	lsrs	r2, r2, #8
 8004da4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	617b      	str	r3, [r7, #20]
    break;
 8004dae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004db0:	4b09      	ldr	r3, [pc, #36]	@ (8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	0e5b      	lsrs	r3, r3, #25
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004dca:	687b      	ldr	r3, [r7, #4]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	007a1200 	.word	0x007a1200
 8004de0:	00f42400 	.word	0x00f42400

08004de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dec:	2300      	movs	r3, #0
 8004dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004df0:	2300      	movs	r3, #0
 8004df2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8098 	beq.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e06:	4b43      	ldr	r3, [pc, #268]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10d      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	4b40      	ldr	r3, [pc, #256]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e16:	4a3f      	ldr	r2, [pc, #252]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a39      	ldr	r2, [pc, #228]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e3a:	f7fe ff45 	bl	8003cc8 <HAL_GetTick>
 8004e3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e40:	e009      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e42:	f7fe ff41 	bl	8003cc8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d902      	bls.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	74fb      	strb	r3, [r7, #19]
        break;
 8004e54:	e005      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e56:	4b30      	ldr	r3, [pc, #192]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0ef      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d159      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e68:	4b2a      	ldr	r3, [pc, #168]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01e      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d019      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e84:	4b23      	ldr	r3, [pc, #140]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	4a1f      	ldr	r2, [pc, #124]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eb0:	4a18      	ldr	r2, [pc, #96]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7fe ff01 	bl	8003cc8 <HAL_GetTick>
 8004ec6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec8:	e00b      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eca:	f7fe fefd 	bl	8003cc8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d902      	bls.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	74fb      	strb	r3, [r7, #19]
            break;
 8004ee0:	e006      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ec      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef6:	4b07      	ldr	r3, [pc, #28]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f04:	4903      	ldr	r1, [pc, #12]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f0c:	e008      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f0e:	7cfb      	ldrb	r3, [r7, #19]
 8004f10:	74bb      	strb	r3, [r7, #18]
 8004f12:	e005      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f20:	7c7b      	ldrb	r3, [r7, #17]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d105      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f26:	4ba7      	ldr	r3, [pc, #668]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2a:	4aa6      	ldr	r2, [pc, #664]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f3e:	4ba1      	ldr	r3, [pc, #644]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f023 0203 	bic.w	r2, r3, #3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	499d      	ldr	r1, [pc, #628]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f60:	4b98      	ldr	r3, [pc, #608]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f66:	f023 020c 	bic.w	r2, r3, #12
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4995      	ldr	r1, [pc, #596]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f82:	4b90      	ldr	r3, [pc, #576]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	498c      	ldr	r1, [pc, #560]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa4:	4b87      	ldr	r3, [pc, #540]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	4984      	ldr	r1, [pc, #528]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	497b      	ldr	r1, [pc, #492]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe8:	4b76      	ldr	r3, [pc, #472]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	4973      	ldr	r1, [pc, #460]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800500a:	4b6e      	ldr	r3, [pc, #440]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005010:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	496a      	ldr	r1, [pc, #424]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800502c:	4b65      	ldr	r3, [pc, #404]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005032:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	4962      	ldr	r1, [pc, #392]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800504e:	4b5d      	ldr	r3, [pc, #372]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005054:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505c:	4959      	ldr	r1, [pc, #356]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005070:	4b54      	ldr	r3, [pc, #336]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005072:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005076:	f023 0203 	bic.w	r2, r3, #3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507e:	4951      	ldr	r1, [pc, #324]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005092:	4b4c      	ldr	r3, [pc, #304]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005098:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	4948      	ldr	r1, [pc, #288]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d015      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b4:	4b43      	ldr	r3, [pc, #268]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	4940      	ldr	r1, [pc, #256]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050d2:	d105      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d4:	4b3b      	ldr	r3, [pc, #236]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a3a      	ldr	r2, [pc, #232]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d015      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050ec:	4b35      	ldr	r3, [pc, #212]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fa:	4932      	ldr	r1, [pc, #200]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005106:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510a:	d105      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800510c:	4b2d      	ldr	r3, [pc, #180]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a2c      	ldr	r2, [pc, #176]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005116:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d015      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005124:	4b27      	ldr	r3, [pc, #156]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005132:	4924      	ldr	r1, [pc, #144]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005142:	d105      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005144:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800514e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800515c:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005162:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516a:	4916      	ldr	r1, [pc, #88]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800517a:	d105      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517c:	4b11      	ldr	r3, [pc, #68]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4a10      	ldr	r2, [pc, #64]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005186:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d019      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005194:	4b0b      	ldr	r3, [pc, #44]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	4908      	ldr	r1, [pc, #32]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b2:	d109      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b4:	4b03      	ldr	r3, [pc, #12]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a02      	ldr	r2, [pc, #8]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051be:	60d3      	str	r3, [r2, #12]
 80051c0:	e002      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051d4:	4b29      	ldr	r3, [pc, #164]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e2:	4926      	ldr	r1, [pc, #152]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051f2:	d105      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051f4:	4b21      	ldr	r3, [pc, #132]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4a20      	ldr	r2, [pc, #128]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d015      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800520c:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005212:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800521a:	4918      	ldr	r1, [pc, #96]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522a:	d105      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800522c:	4b13      	ldr	r3, [pc, #76]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4a12      	ldr	r2, [pc, #72]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005236:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d015      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005244:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800524a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005252:	490a      	ldr	r1, [pc, #40]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005262:	d105      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a04      	ldr	r2, [pc, #16]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800526e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005270:	7cbb      	ldrb	r3, [r7, #18]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40021000 	.word	0x40021000

08005280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e049      	b.n	8005326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fe fac2 	bl	8003830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f000 fd96 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d001      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e054      	b.n	80053f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a26      	ldr	r2, [pc, #152]	@ (8005400 <HAL_TIM_Base_Start_IT+0xd0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d022      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005372:	d01d      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a22      	ldr	r2, [pc, #136]	@ (8005404 <HAL_TIM_Base_Start_IT+0xd4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a21      	ldr	r2, [pc, #132]	@ (8005408 <HAL_TIM_Base_Start_IT+0xd8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1f      	ldr	r2, [pc, #124]	@ (800540c <HAL_TIM_Base_Start_IT+0xdc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	@ (8005410 <HAL_TIM_Base_Start_IT+0xe0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005414 <HAL_TIM_Base_Start_IT+0xe4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <HAL_TIM_Base_Start_IT+0xe8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d115      	bne.n	80053dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	4b19      	ldr	r3, [pc, #100]	@ (800541c <HAL_TIM_Base_Start_IT+0xec>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d015      	beq.n	80053ee <HAL_TIM_Base_Start_IT+0xbe>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c8:	d011      	beq.n	80053ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	e008      	b.n	80053ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	e000      	b.n	80053f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40013400 	.word	0x40013400
 8005414:	40014000 	.word	0x40014000
 8005418:	40015000 	.word	0x40015000
 800541c:	00010007 	.word	0x00010007

08005420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e049      	b.n	80054c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f841 	bl	80054ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f000 fcc6 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <HAL_TIM_PWM_Start+0x24>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e03c      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b04      	cmp	r3, #4
 800550c:	d109      	bne.n	8005522 <HAL_TIM_PWM_Start+0x3e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e02f      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d109      	bne.n	800553c <HAL_TIM_PWM_Start+0x58>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e022      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	d109      	bne.n	8005556 <HAL_TIM_PWM_Start+0x72>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	e015      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b10      	cmp	r3, #16
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start+0x8c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e008      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0a6      	b.n	80056d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start+0xb6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005598:	e023      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Start+0xc6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a8:	e01b      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0xd6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b8:	e013      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	d104      	bne.n	80055ca <HAL_TIM_PWM_Start+0xe6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055c8:	e00b      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0xf6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055d8:	e003      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f87a 	bl	80066e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3a      	ldr	r2, [pc, #232]	@ (80056e0 <HAL_TIM_PWM_Start+0x1fc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a39      	ldr	r2, [pc, #228]	@ (80056e4 <HAL_TIM_PWM_Start+0x200>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a37      	ldr	r2, [pc, #220]	@ (80056e8 <HAL_TIM_PWM_Start+0x204>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a36      	ldr	r2, [pc, #216]	@ (80056ec <HAL_TIM_PWM_Start+0x208>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a34      	ldr	r2, [pc, #208]	@ (80056f0 <HAL_TIM_PWM_Start+0x20c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a33      	ldr	r2, [pc, #204]	@ (80056f4 <HAL_TIM_PWM_Start+0x210>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <HAL_TIM_PWM_Start+0x14c>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_TIM_PWM_Start+0x14e>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a25      	ldr	r2, [pc, #148]	@ (80056e0 <HAL_TIM_PWM_Start+0x1fc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d022      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005658:	d01d      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <HAL_TIM_PWM_Start+0x214>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a24      	ldr	r2, [pc, #144]	@ (80056fc <HAL_TIM_PWM_Start+0x218>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a23      	ldr	r2, [pc, #140]	@ (8005700 <HAL_TIM_PWM_Start+0x21c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <HAL_TIM_PWM_Start+0x200>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <HAL_TIM_PWM_Start+0x204>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a18      	ldr	r2, [pc, #96]	@ (80056f4 <HAL_TIM_PWM_Start+0x210>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d115      	bne.n	80056c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	4b19      	ldr	r3, [pc, #100]	@ (8005704 <HAL_TIM_PWM_Start+0x220>)
 800569e:	4013      	ands	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b06      	cmp	r3, #6
 80056a6:	d015      	beq.n	80056d4 <HAL_TIM_PWM_Start+0x1f0>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ae:	d011      	beq.n	80056d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c0:	e008      	b.n	80056d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e000      	b.n	80056d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800
 80056f4:	40015000 	.word	0x40015000
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	00010007 	.word	0x00010007

08005708 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e097      	b.n	800584c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7fd ffa5 	bl	8003680 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800574c:	f023 0307 	bic.w	r3, r3, #7
 8005750:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3304      	adds	r3, #4
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f000 fb47 	bl	8005df0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	4313      	orrs	r3, r2
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80057a8:	f023 030c 	bic.w	r3, r3, #12
 80057ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	4313      	orrs	r3, r2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	011a      	lsls	r2, r3, #4
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	031b      	lsls	r3, r3, #12
 80057d8:	4313      	orrs	r3, r2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	4313      	orrs	r3, r2
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005864:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800586c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005874:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800587c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d110      	bne.n	80058a6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d102      	bne.n	8005890 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800588a:	7b7b      	ldrb	r3, [r7, #13]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e089      	b.n	80059a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058a4:	e031      	b.n	800590a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d110      	bne.n	80058ce <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d102      	bne.n	80058b8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b2:	7b3b      	ldrb	r3, [r7, #12]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d001      	beq.n	80058bc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e075      	b.n	80059a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058cc:	e01d      	b.n	800590a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d108      	bne.n	80058e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d105      	bne.n	80058e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058da:	7b7b      	ldrb	r3, [r7, #13]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d102      	bne.n	80058e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058e0:	7b3b      	ldrb	r3, [r7, #12]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d001      	beq.n	80058ea <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e05e      	b.n	80059a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b04      	cmp	r3, #4
 8005914:	d010      	beq.n	8005938 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005916:	e01f      	b.n	8005958 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2201      	movs	r2, #1
 800591e:	2100      	movs	r1, #0
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fedf 	bl	80066e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0202 	orr.w	r2, r2, #2
 8005934:	60da      	str	r2, [r3, #12]
      break;
 8005936:	e02e      	b.n	8005996 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2201      	movs	r2, #1
 800593e:	2104      	movs	r1, #4
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fecf 	bl	80066e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0204 	orr.w	r2, r2, #4
 8005954:	60da      	str	r2, [r3, #12]
      break;
 8005956:	e01e      	b.n	8005996 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f000 febf 	bl	80066e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2201      	movs	r2, #1
 800596c:	2104      	movs	r1, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f000 feb8 	bl	80066e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0202 	orr.w	r2, r2, #2
 8005982:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0204 	orr.w	r2, r2, #4
 8005992:	60da      	str	r2, [r3, #12]
      break;
 8005994:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e0ff      	b.n	8005bce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b14      	cmp	r3, #20
 80059da:	f200 80f0 	bhi.w	8005bbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059de:	a201      	add	r2, pc, #4	@ (adr r2, 80059e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005bbf 	.word	0x08005bbf
 80059ec:	08005bbf 	.word	0x08005bbf
 80059f0:	08005bbf 	.word	0x08005bbf
 80059f4:	08005a79 	.word	0x08005a79
 80059f8:	08005bbf 	.word	0x08005bbf
 80059fc:	08005bbf 	.word	0x08005bbf
 8005a00:	08005bbf 	.word	0x08005bbf
 8005a04:	08005abb 	.word	0x08005abb
 8005a08:	08005bbf 	.word	0x08005bbf
 8005a0c:	08005bbf 	.word	0x08005bbf
 8005a10:	08005bbf 	.word	0x08005bbf
 8005a14:	08005afb 	.word	0x08005afb
 8005a18:	08005bbf 	.word	0x08005bbf
 8005a1c:	08005bbf 	.word	0x08005bbf
 8005a20:	08005bbf 	.word	0x08005bbf
 8005a24:	08005b3d 	.word	0x08005b3d
 8005a28:	08005bbf 	.word	0x08005bbf
 8005a2c:	08005bbf 	.word	0x08005bbf
 8005a30:	08005bbf 	.word	0x08005bbf
 8005a34:	08005b7d 	.word	0x08005b7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fa8a 	bl	8005f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0208 	orr.w	r2, r2, #8
 8005a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0204 	bic.w	r2, r2, #4
 8005a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6999      	ldr	r1, [r3, #24]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	619a      	str	r2, [r3, #24]
      break;
 8005a76:	e0a5      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fb04 	bl	800608c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6999      	ldr	r1, [r3, #24]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	619a      	str	r2, [r3, #24]
      break;
 8005ab8:	e084      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fb77 	bl	80061b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0208 	orr.w	r2, r2, #8
 8005ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0204 	bic.w	r2, r2, #4
 8005ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69d9      	ldr	r1, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	61da      	str	r2, [r3, #28]
      break;
 8005af8:	e064      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fbe9 	bl	80062d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69d9      	ldr	r1, [r3, #28]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	021a      	lsls	r2, r3, #8
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	61da      	str	r2, [r3, #28]
      break;
 8005b3a:	e043      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fc5c 	bl	8006400 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0208 	orr.w	r2, r2, #8
 8005b56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0204 	bic.w	r2, r2, #4
 8005b66:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b7a:	e023      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fca6 	bl	80064d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ba6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	021a      	lsls	r2, r3, #8
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005bbc:	e002      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop

08005bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e0ee      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x1fa>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005c12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8005ddc <HAL_TIM_ConfigClockSource+0x204>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	f000 80b9 	beq.w	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c34:	4a69      	ldr	r2, [pc, #420]	@ (8005ddc <HAL_TIM_ConfigClockSource+0x204>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	f200 80be 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c3c:	4a68      	ldr	r2, [pc, #416]	@ (8005de0 <HAL_TIM_ConfigClockSource+0x208>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	f000 80b1 	beq.w	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c44:	4a66      	ldr	r2, [pc, #408]	@ (8005de0 <HAL_TIM_ConfigClockSource+0x208>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	f200 80b6 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c4c:	4a65      	ldr	r2, [pc, #404]	@ (8005de4 <HAL_TIM_ConfigClockSource+0x20c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	f000 80a9 	beq.w	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c54:	4a63      	ldr	r2, [pc, #396]	@ (8005de4 <HAL_TIM_ConfigClockSource+0x20c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f200 80ae 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c5c:	4a62      	ldr	r2, [pc, #392]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x210>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	f000 80a1 	beq.w	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c64:	4a60      	ldr	r2, [pc, #384]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x210>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	f200 80a6 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c6c:	4a5f      	ldr	r2, [pc, #380]	@ (8005dec <HAL_TIM_ConfigClockSource+0x214>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	f000 8099 	beq.w	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c74:	4a5d      	ldr	r2, [pc, #372]	@ (8005dec <HAL_TIM_ConfigClockSource+0x214>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f200 809e 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c80:	f000 8091 	beq.w	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c88:	f200 8096 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c90:	f000 8089 	beq.w	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c98:	f200 808e 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca0:	d03e      	beq.n	8005d20 <HAL_TIM_ConfigClockSource+0x148>
 8005ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca6:	f200 8087 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cae:	f000 8086 	beq.w	8005dbe <HAL_TIM_ConfigClockSource+0x1e6>
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb6:	d87f      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cb8:	2b70      	cmp	r3, #112	@ 0x70
 8005cba:	d01a      	beq.n	8005cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8005cbc:	2b70      	cmp	r3, #112	@ 0x70
 8005cbe:	d87b      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cc0:	2b60      	cmp	r3, #96	@ 0x60
 8005cc2:	d050      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x18e>
 8005cc4:	2b60      	cmp	r3, #96	@ 0x60
 8005cc6:	d877      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cc8:	2b50      	cmp	r3, #80	@ 0x50
 8005cca:	d03c      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x16e>
 8005ccc:	2b50      	cmp	r3, #80	@ 0x50
 8005cce:	d873      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d058      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x1ae>
 8005cd4:	2b40      	cmp	r3, #64	@ 0x40
 8005cd6:	d86f      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cd8:	2b30      	cmp	r3, #48	@ 0x30
 8005cda:	d064      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005cdc:	2b30      	cmp	r3, #48	@ 0x30
 8005cde:	d86b      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d060      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d867      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d05c      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d05a      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005cf0:	e062      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d02:	f000 fccf 	bl	80066a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	609a      	str	r2, [r3, #8]
      break;
 8005d1e:	e04f      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d30:	f000 fcb8 	bl	80066a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d42:	609a      	str	r2, [r3, #8]
      break;
 8005d44:	e03c      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	461a      	mov	r2, r3
 8005d54:	f000 fc2a 	bl	80065ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2150      	movs	r1, #80	@ 0x50
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fc83 	bl	800666a <TIM_ITRx_SetConfig>
      break;
 8005d64:	e02c      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d72:	461a      	mov	r2, r3
 8005d74:	f000 fc49 	bl	800660a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2160      	movs	r1, #96	@ 0x60
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fc73 	bl	800666a <TIM_ITRx_SetConfig>
      break;
 8005d84:	e01c      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d92:	461a      	mov	r2, r3
 8005d94:	f000 fc0a 	bl	80065ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2140      	movs	r1, #64	@ 0x40
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fc63 	bl	800666a <TIM_ITRx_SetConfig>
      break;
 8005da4:	e00c      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f000 fc5a 	bl	800666a <TIM_ITRx_SetConfig>
      break;
 8005db6:	e003      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
      break;
 8005dbc:	e000      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8005dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	00100070 	.word	0x00100070
 8005de0:	00100050 	.word	0x00100050
 8005de4:	00100040 	.word	0x00100040
 8005de8:	00100030 	.word	0x00100030
 8005dec:	00100020 	.word	0x00100020

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a4c      	ldr	r2, [pc, #304]	@ (8005f34 <TIM_Base_SetConfig+0x144>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d017      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0e:	d013      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a49      	ldr	r2, [pc, #292]	@ (8005f38 <TIM_Base_SetConfig+0x148>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00f      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a48      	ldr	r2, [pc, #288]	@ (8005f3c <TIM_Base_SetConfig+0x14c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a47      	ldr	r2, [pc, #284]	@ (8005f40 <TIM_Base_SetConfig+0x150>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a46      	ldr	r2, [pc, #280]	@ (8005f44 <TIM_Base_SetConfig+0x154>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0x48>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a45      	ldr	r2, [pc, #276]	@ (8005f48 <TIM_Base_SetConfig+0x158>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a39      	ldr	r2, [pc, #228]	@ (8005f34 <TIM_Base_SetConfig+0x144>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d023      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e58:	d01f      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a36      	ldr	r2, [pc, #216]	@ (8005f38 <TIM_Base_SetConfig+0x148>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01b      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <TIM_Base_SetConfig+0x14c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d017      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a34      	ldr	r2, [pc, #208]	@ (8005f40 <TIM_Base_SetConfig+0x150>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a33      	ldr	r2, [pc, #204]	@ (8005f44 <TIM_Base_SetConfig+0x154>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a33      	ldr	r2, [pc, #204]	@ (8005f4c <TIM_Base_SetConfig+0x15c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a32      	ldr	r2, [pc, #200]	@ (8005f50 <TIM_Base_SetConfig+0x160>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a31      	ldr	r2, [pc, #196]	@ (8005f54 <TIM_Base_SetConfig+0x164>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_Base_SetConfig+0xaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2c      	ldr	r2, [pc, #176]	@ (8005f48 <TIM_Base_SetConfig+0x158>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d108      	bne.n	8005eac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a18      	ldr	r2, [pc, #96]	@ (8005f34 <TIM_Base_SetConfig+0x144>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d013      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1a      	ldr	r2, [pc, #104]	@ (8005f44 <TIM_Base_SetConfig+0x154>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00f      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f4c <TIM_Base_SetConfig+0x15c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a19      	ldr	r2, [pc, #100]	@ (8005f50 <TIM_Base_SetConfig+0x160>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d007      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <TIM_Base_SetConfig+0x164>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_Base_SetConfig+0x110>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a13      	ldr	r2, [pc, #76]	@ (8005f48 <TIM_Base_SetConfig+0x158>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d103      	bne.n	8005f08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d105      	bne.n	8005f26 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f023 0201 	bic.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	611a      	str	r2, [r3, #16]
  }
}
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	40013400 	.word	0x40013400
 8005f48:	40015000 	.word	0x40015000
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800

08005f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f023 0201 	bic.w	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f023 0302 	bic.w	r3, r3, #2
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a30      	ldr	r2, [pc, #192]	@ (8006074 <TIM_OC1_SetConfig+0x11c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a2f      	ldr	r2, [pc, #188]	@ (8006078 <TIM_OC1_SetConfig+0x120>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800607c <TIM_OC1_SetConfig+0x124>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a2d      	ldr	r2, [pc, #180]	@ (8006080 <TIM_OC1_SetConfig+0x128>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8006084 <TIM_OC1_SetConfig+0x12c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC1_SetConfig+0x88>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a2b      	ldr	r2, [pc, #172]	@ (8006088 <TIM_OC1_SetConfig+0x130>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10c      	bne.n	8005ffa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 0308 	bic.w	r3, r3, #8
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 0304 	bic.w	r3, r3, #4
 8005ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8006074 <TIM_OC1_SetConfig+0x11c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1c      	ldr	r2, [pc, #112]	@ (8006078 <TIM_OC1_SetConfig+0x120>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00f      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1b      	ldr	r2, [pc, #108]	@ (800607c <TIM_OC1_SetConfig+0x124>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00b      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1a      	ldr	r2, [pc, #104]	@ (8006080 <TIM_OC1_SetConfig+0x128>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d007      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a19      	ldr	r2, [pc, #100]	@ (8006084 <TIM_OC1_SetConfig+0x12c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC1_SetConfig+0xd2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a18      	ldr	r2, [pc, #96]	@ (8006088 <TIM_OC1_SetConfig+0x130>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d111      	bne.n	800604e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800
 8006088:	40015000 	.word	0x40015000

0800608c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f023 0210 	bic.w	r2, r3, #16
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0320 	bic.w	r3, r3, #32
 80060da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a2c      	ldr	r2, [pc, #176]	@ (800619c <TIM_OC2_SetConfig+0x110>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_OC2_SetConfig+0x74>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a2b      	ldr	r2, [pc, #172]	@ (80061a0 <TIM_OC2_SetConfig+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_OC2_SetConfig+0x74>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a2a      	ldr	r2, [pc, #168]	@ (80061a4 <TIM_OC2_SetConfig+0x118>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10d      	bne.n	800611c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800611a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a1f      	ldr	r2, [pc, #124]	@ (800619c <TIM_OC2_SetConfig+0x110>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a1e      	ldr	r2, [pc, #120]	@ (80061a0 <TIM_OC2_SetConfig+0x114>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00f      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1e      	ldr	r2, [pc, #120]	@ (80061a8 <TIM_OC2_SetConfig+0x11c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a1d      	ldr	r2, [pc, #116]	@ (80061ac <TIM_OC2_SetConfig+0x120>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1c      	ldr	r2, [pc, #112]	@ (80061b0 <TIM_OC2_SetConfig+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC2_SetConfig+0xc0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a17      	ldr	r2, [pc, #92]	@ (80061a4 <TIM_OC2_SetConfig+0x118>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d113      	bne.n	8006174 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800615a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40013400 	.word	0x40013400
 80061a4:	40015000 	.word	0x40015000
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40014400 	.word	0x40014400
 80061b0:	40014800 	.word	0x40014800

080061b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a2b      	ldr	r2, [pc, #172]	@ (80062c0 <TIM_OC3_SetConfig+0x10c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d007      	beq.n	8006226 <TIM_OC3_SetConfig+0x72>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2a      	ldr	r2, [pc, #168]	@ (80062c4 <TIM_OC3_SetConfig+0x110>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d003      	beq.n	8006226 <TIM_OC3_SetConfig+0x72>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a29      	ldr	r2, [pc, #164]	@ (80062c8 <TIM_OC3_SetConfig+0x114>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d10d      	bne.n	8006242 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800622c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1e      	ldr	r2, [pc, #120]	@ (80062c0 <TIM_OC3_SetConfig+0x10c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d013      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1d      	ldr	r2, [pc, #116]	@ (80062c4 <TIM_OC3_SetConfig+0x110>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00f      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a1d      	ldr	r2, [pc, #116]	@ (80062cc <TIM_OC3_SetConfig+0x118>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00b      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a1c      	ldr	r2, [pc, #112]	@ (80062d0 <TIM_OC3_SetConfig+0x11c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d007      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1b      	ldr	r2, [pc, #108]	@ (80062d4 <TIM_OC3_SetConfig+0x120>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_OC3_SetConfig+0xbe>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a16      	ldr	r2, [pc, #88]	@ (80062c8 <TIM_OC3_SetConfig+0x114>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d113      	bne.n	800629a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40015000 	.word	0x40015000
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40014400 	.word	0x40014400
 80062d4:	40014800 	.word	0x40014800

080062d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a2c      	ldr	r2, [pc, #176]	@ (80063e8 <TIM_OC4_SetConfig+0x110>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d007      	beq.n	800634c <TIM_OC4_SetConfig+0x74>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a2b      	ldr	r2, [pc, #172]	@ (80063ec <TIM_OC4_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_OC4_SetConfig+0x74>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a2a      	ldr	r2, [pc, #168]	@ (80063f0 <TIM_OC4_SetConfig+0x118>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d10d      	bne.n	8006368 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a1f      	ldr	r2, [pc, #124]	@ (80063e8 <TIM_OC4_SetConfig+0x110>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a1e      	ldr	r2, [pc, #120]	@ (80063ec <TIM_OC4_SetConfig+0x114>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00f      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1e      	ldr	r2, [pc, #120]	@ (80063f4 <TIM_OC4_SetConfig+0x11c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00b      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1d      	ldr	r2, [pc, #116]	@ (80063f8 <TIM_OC4_SetConfig+0x120>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <TIM_OC4_SetConfig+0x124>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_OC4_SetConfig+0xc0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a17      	ldr	r2, [pc, #92]	@ (80063f0 <TIM_OC4_SetConfig+0x118>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d113      	bne.n	80063c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800639e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	019b      	lsls	r3, r3, #6
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	40015000 	.word	0x40015000
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40014800 	.word	0x40014800

08006400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800642e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006444:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <TIM_OC5_SetConfig+0xbc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <TIM_OC5_SetConfig+0xc0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00f      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <TIM_OC5_SetConfig+0xc4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00b      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a16      	ldr	r2, [pc, #88]	@ (80064c8 <TIM_OC5_SetConfig+0xc8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d007      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <TIM_OC5_SetConfig+0xcc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a14      	ldr	r2, [pc, #80]	@ (80064d0 <TIM_OC5_SetConfig+0xd0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d109      	bne.n	8006496 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006488:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	621a      	str	r2, [r3, #32]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40013400 	.word	0x40013400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800
 80064d0:	40015000 	.word	0x40015000

080064d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800651a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	051b      	lsls	r3, r3, #20
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a1a      	ldr	r2, [pc, #104]	@ (8006594 <TIM_OC6_SetConfig+0xc0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a19      	ldr	r2, [pc, #100]	@ (8006598 <TIM_OC6_SetConfig+0xc4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00f      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a18      	ldr	r2, [pc, #96]	@ (800659c <TIM_OC6_SetConfig+0xc8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00b      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <TIM_OC6_SetConfig+0xcc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a16      	ldr	r2, [pc, #88]	@ (80065a4 <TIM_OC6_SetConfig+0xd0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <TIM_OC6_SetConfig+0xd4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d109      	bne.n	800656c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800
 80065a8:	40015000 	.word	0x40015000

080065ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f023 030a 	bic.w	r3, r3, #10
 80065e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	621a      	str	r2, [r3, #32]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800660a:	b480      	push	{r7}
 800660c:	b087      	sub	sp, #28
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f023 0210 	bic.w	r2, r3, #16
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006646:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	621a      	str	r2, [r3, #32]
}
 800665e:	bf00      	nop
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	f043 0307 	orr.w	r3, r3, #7
 8006690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	021a      	lsls	r2, r3, #8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	609a      	str	r2, [r3, #8]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	2201      	movs	r2, #1
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	43db      	mvns	r3, r3
 8006706:	401a      	ands	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	fa01 f303 	lsl.w	r3, r1, r3
 800671c:	431a      	orrs	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006744:	2302      	movs	r3, #2
 8006746:	e074      	b.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a34      	ldr	r2, [pc, #208]	@ (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a33      	ldr	r2, [pc, #204]	@ (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a31      	ldr	r2, [pc, #196]	@ (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d108      	bne.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800678c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a21      	ldr	r2, [pc, #132]	@ (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d022      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c8:	d01d      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1f      	ldr	r2, [pc, #124]	@ (800684c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d018      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006854 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00e      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a15      	ldr	r2, [pc, #84]	@ (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a18      	ldr	r2, [pc, #96]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a11      	ldr	r2, [pc, #68]	@ (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d10c      	bne.n	8006820 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800680c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	4313      	orrs	r3, r2
 8006816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40012c00 	.word	0x40012c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40015000 	.word	0x40015000
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40014000 	.word	0x40014000

0800685c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e042      	b.n	80068f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7fd f8fb 	bl	8003a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2224      	movs	r2, #36	@ 0x24
 800688a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fc7a 	bl	80071a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f97b 	bl	8006ba8 <UART_SetConfig>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e01b      	b.n	80068f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fcf9 	bl	80072e4 <UART_CheckIdleState>
 80068f2:	4603      	mov	r3, r0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	@ 0x28
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	4613      	mov	r3, r2
 800690a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006912:	2b20      	cmp	r3, #32
 8006914:	d17b      	bne.n	8006a0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_UART_Transmit+0x26>
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e074      	b.n	8006a10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2221      	movs	r2, #33	@ 0x21
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006936:	f7fd f9c7 	bl	8003cc8 <HAL_GetTick>
 800693a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	88fa      	ldrh	r2, [r7, #6]
 8006948:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006954:	d108      	bne.n	8006968 <HAL_UART_Transmit+0x6c>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e003      	b.n	8006970 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800696c:	2300      	movs	r3, #0
 800696e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006970:	e030      	b.n	80069d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2200      	movs	r2, #0
 800697a:	2180      	movs	r1, #128	@ 0x80
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fd5b 	bl	8007438 <UART_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e03d      	b.n	8006a10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	3302      	adds	r3, #2
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e007      	b.n	80069c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3301      	adds	r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1c8      	bne.n	8006972 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2200      	movs	r2, #0
 80069e8:	2140      	movs	r1, #64	@ 0x40
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fd24 	bl	8007438 <UART_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e006      	b.n	8006a10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e000      	b.n	8006a10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
  }
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	@ 0x28
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	f040 80b5 	bne.w	8006b9e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <HAL_UART_Receive+0x28>
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0ad      	b.n	8006ba0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2222      	movs	r2, #34	@ 0x22
 8006a50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a5a:	f7fd f935 	bl	8003cc8 <HAL_GetTick>
 8006a5e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	88fa      	ldrh	r2, [r7, #6]
 8006a64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a78:	d10e      	bne.n	8006a98 <HAL_UART_Receive+0x80>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d105      	bne.n	8006a8e <HAL_UART_Receive+0x76>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a8c:	e02d      	b.n	8006aea <HAL_UART_Receive+0xd2>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	22ff      	movs	r2, #255	@ 0xff
 8006a92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a96:	e028      	b.n	8006aea <HAL_UART_Receive+0xd2>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <HAL_UART_Receive+0xa4>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <HAL_UART_Receive+0x9a>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	22ff      	movs	r2, #255	@ 0xff
 8006aac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ab0:	e01b      	b.n	8006aea <HAL_UART_Receive+0xd2>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	227f      	movs	r2, #127	@ 0x7f
 8006ab6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006aba:	e016      	b.n	8006aea <HAL_UART_Receive+0xd2>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ac4:	d10d      	bne.n	8006ae2 <HAL_UART_Receive+0xca>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <HAL_UART_Receive+0xc0>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	227f      	movs	r2, #127	@ 0x7f
 8006ad2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ad6:	e008      	b.n	8006aea <HAL_UART_Receive+0xd2>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	223f      	movs	r2, #63	@ 0x3f
 8006adc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ae0:	e003      	b.n	8006aea <HAL_UART_Receive+0xd2>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006af0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afa:	d108      	bne.n	8006b0e <HAL_UART_Receive+0xf6>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	e003      	b.n	8006b16 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006b16:	e036      	b.n	8006b86 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2120      	movs	r1, #32
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fc88 	bl	8007438 <UART_WaitOnFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e032      	b.n	8006ba0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10c      	bne.n	8006b5a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	8a7b      	ldrh	r3, [r7, #18]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	3302      	adds	r3, #2
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e00c      	b.n	8006b74 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	8a7b      	ldrh	r3, [r7, #18]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	4013      	ands	r3, r2
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	3301      	adds	r3, #1
 8006b72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1c2      	bne.n	8006b18 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e000      	b.n	8006ba0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
  }
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3720      	adds	r7, #32
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bac:	b08c      	sub	sp, #48	@ 0x30
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4baa      	ldr	r3, [pc, #680]	@ (8006e80 <UART_SetConfig+0x2d8>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a9f      	ldr	r2, [pc, #636]	@ (8006e84 <UART_SetConfig+0x2dc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c10:	4313      	orrs	r3, r2
 8006c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c32:	f023 010f 	bic.w	r1, r3, #15
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a90      	ldr	r2, [pc, #576]	@ (8006e88 <UART_SetConfig+0x2e0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d125      	bne.n	8006c98 <UART_SetConfig+0xf0>
 8006c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8006e8c <UART_SetConfig+0x2e4>)
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d81a      	bhi.n	8006c90 <UART_SetConfig+0xe8>
 8006c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <UART_SetConfig+0xb8>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c81 	.word	0x08006c81
 8006c68:	08006c79 	.word	0x08006c79
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c76:	e116      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e112      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	e10e      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8e:	e10a      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c96:	e106      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a7c      	ldr	r2, [pc, #496]	@ (8006e90 <UART_SetConfig+0x2e8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d138      	bne.n	8006d14 <UART_SetConfig+0x16c>
 8006ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8006e8c <UART_SetConfig+0x2e4>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca8:	f003 030c 	and.w	r3, r3, #12
 8006cac:	2b0c      	cmp	r3, #12
 8006cae:	d82d      	bhi.n	8006d0c <UART_SetConfig+0x164>
 8006cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <UART_SetConfig+0x110>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006ced 	.word	0x08006ced
 8006cbc:	08006d0d 	.word	0x08006d0d
 8006cc0:	08006d0d 	.word	0x08006d0d
 8006cc4:	08006d0d 	.word	0x08006d0d
 8006cc8:	08006cfd 	.word	0x08006cfd
 8006ccc:	08006d0d 	.word	0x08006d0d
 8006cd0:	08006d0d 	.word	0x08006d0d
 8006cd4:	08006d0d 	.word	0x08006d0d
 8006cd8:	08006cf5 	.word	0x08006cf5
 8006cdc:	08006d0d 	.word	0x08006d0d
 8006ce0:	08006d0d 	.word	0x08006d0d
 8006ce4:	08006d0d 	.word	0x08006d0d
 8006ce8:	08006d05 	.word	0x08006d05
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cf2:	e0d8      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cfa:	e0d4      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d02:	e0d0      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006d04:	2308      	movs	r3, #8
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0a:	e0cc      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d12:	e0c8      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a5e      	ldr	r2, [pc, #376]	@ (8006e94 <UART_SetConfig+0x2ec>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d125      	bne.n	8006d6a <UART_SetConfig+0x1c2>
 8006d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8006e8c <UART_SetConfig+0x2e4>)
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d28:	2b30      	cmp	r3, #48	@ 0x30
 8006d2a:	d016      	beq.n	8006d5a <UART_SetConfig+0x1b2>
 8006d2c:	2b30      	cmp	r3, #48	@ 0x30
 8006d2e:	d818      	bhi.n	8006d62 <UART_SetConfig+0x1ba>
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d00a      	beq.n	8006d4a <UART_SetConfig+0x1a2>
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d814      	bhi.n	8006d62 <UART_SetConfig+0x1ba>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <UART_SetConfig+0x19a>
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d008      	beq.n	8006d52 <UART_SetConfig+0x1aa>
 8006d40:	e00f      	b.n	8006d62 <UART_SetConfig+0x1ba>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d48:	e0ad      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d50:	e0a9      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006d52:	2304      	movs	r3, #4
 8006d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d58:	e0a5      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d60:	e0a1      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006d62:	2310      	movs	r3, #16
 8006d64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d68:	e09d      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006e98 <UART_SetConfig+0x2f0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d125      	bne.n	8006dc0 <UART_SetConfig+0x218>
 8006d74:	4b45      	ldr	r3, [pc, #276]	@ (8006e8c <UART_SetConfig+0x2e4>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d80:	d016      	beq.n	8006db0 <UART_SetConfig+0x208>
 8006d82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d84:	d818      	bhi.n	8006db8 <UART_SetConfig+0x210>
 8006d86:	2b80      	cmp	r3, #128	@ 0x80
 8006d88:	d00a      	beq.n	8006da0 <UART_SetConfig+0x1f8>
 8006d8a:	2b80      	cmp	r3, #128	@ 0x80
 8006d8c:	d814      	bhi.n	8006db8 <UART_SetConfig+0x210>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <UART_SetConfig+0x1f0>
 8006d92:	2b40      	cmp	r3, #64	@ 0x40
 8006d94:	d008      	beq.n	8006da8 <UART_SetConfig+0x200>
 8006d96:	e00f      	b.n	8006db8 <UART_SetConfig+0x210>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9e:	e082      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006da0:	2302      	movs	r3, #2
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da6:	e07e      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006da8:	2304      	movs	r3, #4
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dae:	e07a      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006db0:	2308      	movs	r3, #8
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db6:	e076      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006db8:	2310      	movs	r3, #16
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	e072      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a35      	ldr	r2, [pc, #212]	@ (8006e9c <UART_SetConfig+0x2f4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d12a      	bne.n	8006e20 <UART_SetConfig+0x278>
 8006dca:	4b30      	ldr	r3, [pc, #192]	@ (8006e8c <UART_SetConfig+0x2e4>)
 8006dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dd8:	d01a      	beq.n	8006e10 <UART_SetConfig+0x268>
 8006dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dde:	d81b      	bhi.n	8006e18 <UART_SetConfig+0x270>
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de4:	d00c      	beq.n	8006e00 <UART_SetConfig+0x258>
 8006de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dea:	d815      	bhi.n	8006e18 <UART_SetConfig+0x270>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <UART_SetConfig+0x250>
 8006df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df4:	d008      	beq.n	8006e08 <UART_SetConfig+0x260>
 8006df6:	e00f      	b.n	8006e18 <UART_SetConfig+0x270>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dfe:	e052      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e00:	2302      	movs	r3, #2
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e06:	e04e      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	e04a      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e10:	2308      	movs	r3, #8
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e16:	e046      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	e042      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a17      	ldr	r2, [pc, #92]	@ (8006e84 <UART_SetConfig+0x2dc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d13a      	bne.n	8006ea0 <UART_SetConfig+0x2f8>
 8006e2a:	4b18      	ldr	r3, [pc, #96]	@ (8006e8c <UART_SetConfig+0x2e4>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e38:	d01a      	beq.n	8006e70 <UART_SetConfig+0x2c8>
 8006e3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e3e:	d81b      	bhi.n	8006e78 <UART_SetConfig+0x2d0>
 8006e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e44:	d00c      	beq.n	8006e60 <UART_SetConfig+0x2b8>
 8006e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e4a:	d815      	bhi.n	8006e78 <UART_SetConfig+0x2d0>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <UART_SetConfig+0x2b0>
 8006e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e54:	d008      	beq.n	8006e68 <UART_SetConfig+0x2c0>
 8006e56:	e00f      	b.n	8006e78 <UART_SetConfig+0x2d0>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5e:	e022      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e60:	2302      	movs	r3, #2
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e66:	e01e      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6e:	e01a      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e70:	2308      	movs	r3, #8
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e016      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7e:	e012      	b.n	8006ea6 <UART_SetConfig+0x2fe>
 8006e80:	cfff69f3 	.word	0xcfff69f3
 8006e84:	40008000 	.word	0x40008000
 8006e88:	40013800 	.word	0x40013800
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40004400 	.word	0x40004400
 8006e94:	40004800 	.word	0x40004800
 8006e98:	40004c00 	.word	0x40004c00
 8006e9c:	40005000 	.word	0x40005000
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4aae      	ldr	r2, [pc, #696]	@ (8007164 <UART_SetConfig+0x5bc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	f040 8097 	bne.w	8006fe0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d823      	bhi.n	8006f02 <UART_SetConfig+0x35a>
 8006eba:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec0 <UART_SetConfig+0x318>)
 8006ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec0:	08006ee5 	.word	0x08006ee5
 8006ec4:	08006f03 	.word	0x08006f03
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006f03 	.word	0x08006f03
 8006ed0:	08006ef3 	.word	0x08006ef3
 8006ed4:	08006f03 	.word	0x08006f03
 8006ed8:	08006f03 	.word	0x08006f03
 8006edc:	08006f03 	.word	0x08006f03
 8006ee0:	08006efb 	.word	0x08006efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee4:	f7fd ff0c 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8006ee8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eea:	e010      	b.n	8006f0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eec:	4b9e      	ldr	r3, [pc, #632]	@ (8007168 <UART_SetConfig+0x5c0>)
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ef0:	e00d      	b.n	8006f0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fd fe97 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8006ef6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ef8:	e009      	b.n	8006f0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f00:	e005      	b.n	8006f0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8130 	beq.w	8007176 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1a:	4a94      	ldr	r2, [pc, #592]	@ (800716c <UART_SetConfig+0x5c4>)
 8006f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f20:	461a      	mov	r2, r3
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	4413      	add	r3, r2
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d305      	bcc.n	8006f46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d903      	bls.n	8006f4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f4c:	e113      	b.n	8007176 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	2200      	movs	r2, #0
 8006f52:	60bb      	str	r3, [r7, #8]
 8006f54:	60fa      	str	r2, [r7, #12]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	4a84      	ldr	r2, [pc, #528]	@ (800716c <UART_SetConfig+0x5c4>)
 8006f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2200      	movs	r2, #0
 8006f64:	603b      	str	r3, [r7, #0]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f70:	f7f9 feb2 	bl	8000cd8 <__aeabi_uldivmod>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	020b      	lsls	r3, r1, #8
 8006f86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f8a:	0202      	lsls	r2, r0, #8
 8006f8c:	6979      	ldr	r1, [r7, #20]
 8006f8e:	6849      	ldr	r1, [r1, #4]
 8006f90:	0849      	lsrs	r1, r1, #1
 8006f92:	2000      	movs	r0, #0
 8006f94:	460c      	mov	r4, r1
 8006f96:	4605      	mov	r5, r0
 8006f98:	eb12 0804 	adds.w	r8, r2, r4
 8006f9c:	eb43 0905 	adc.w	r9, r3, r5
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	469a      	mov	sl, r3
 8006fa8:	4693      	mov	fp, r2
 8006faa:	4652      	mov	r2, sl
 8006fac:	465b      	mov	r3, fp
 8006fae:	4640      	mov	r0, r8
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	f7f9 fe91 	bl	8000cd8 <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4613      	mov	r3, r2
 8006fbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fc4:	d308      	bcc.n	8006fd8 <UART_SetConfig+0x430>
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fcc:	d204      	bcs.n	8006fd8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a3a      	ldr	r2, [r7, #32]
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	e0ce      	b.n	8007176 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006fde:	e0ca      	b.n	8007176 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe8:	d166      	bne.n	80070b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006fea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d827      	bhi.n	8007042 <UART_SetConfig+0x49a>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <UART_SetConfig+0x450>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800702d 	.word	0x0800702d
 8007004:	08007043 	.word	0x08007043
 8007008:	08007033 	.word	0x08007033
 800700c:	08007043 	.word	0x08007043
 8007010:	08007043 	.word	0x08007043
 8007014:	08007043 	.word	0x08007043
 8007018:	0800703b 	.word	0x0800703b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fd fe70 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8007020:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007022:	e014      	b.n	800704e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007024:	f7fd fe82 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8007028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800702a:	e010      	b.n	800704e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800702c:	4b4e      	ldr	r3, [pc, #312]	@ (8007168 <UART_SetConfig+0x5c0>)
 800702e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007030:	e00d      	b.n	800704e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007032:	f7fd fdf7 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8007036:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007038:	e009      	b.n	800704e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800703e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007040:	e005      	b.n	800704e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800704c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 8090 	beq.w	8007176 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705a:	4a44      	ldr	r2, [pc, #272]	@ (800716c <UART_SetConfig+0x5c4>)
 800705c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007060:	461a      	mov	r2, r3
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	fbb3 f3f2 	udiv	r3, r3, r2
 8007068:	005a      	lsls	r2, r3, #1
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	085b      	lsrs	r3, r3, #1
 8007070:	441a      	add	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	fbb2 f3f3 	udiv	r3, r2, r3
 800707a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	2b0f      	cmp	r3, #15
 8007080:	d916      	bls.n	80070b0 <UART_SetConfig+0x508>
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007088:	d212      	bcs.n	80070b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f023 030f 	bic.w	r3, r3, #15
 8007092:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	085b      	lsrs	r3, r3, #1
 8007098:	b29b      	uxth	r3, r3
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	b29a      	uxth	r2, r3
 80070a0:	8bfb      	ldrh	r3, [r7, #30]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	8bfa      	ldrh	r2, [r7, #30]
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	e062      	b.n	8007176 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070b6:	e05e      	b.n	8007176 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d828      	bhi.n	8007112 <UART_SetConfig+0x56a>
 80070c0:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <UART_SetConfig+0x520>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	080070ed 	.word	0x080070ed
 80070cc:	080070f5 	.word	0x080070f5
 80070d0:	080070fd 	.word	0x080070fd
 80070d4:	08007113 	.word	0x08007113
 80070d8:	08007103 	.word	0x08007103
 80070dc:	08007113 	.word	0x08007113
 80070e0:	08007113 	.word	0x08007113
 80070e4:	08007113 	.word	0x08007113
 80070e8:	0800710b 	.word	0x0800710b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ec:	f7fd fe08 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 80070f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070f2:	e014      	b.n	800711e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070f4:	f7fd fe1a 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 80070f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070fa:	e010      	b.n	800711e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007168 <UART_SetConfig+0x5c0>)
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007100:	e00d      	b.n	800711e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007102:	f7fd fd8f 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8007106:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007108:	e009      	b.n	800711e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800710a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800710e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007110:	e005      	b.n	800711e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800711c:	bf00      	nop
    }

    if (pclk != 0U)
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	2b00      	cmp	r3, #0
 8007122:	d028      	beq.n	8007176 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007128:	4a10      	ldr	r2, [pc, #64]	@ (800716c <UART_SetConfig+0x5c4>)
 800712a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800712e:	461a      	mov	r2, r3
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	fbb3 f2f2 	udiv	r2, r3, r2
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	441a      	add	r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	fbb2 f3f3 	udiv	r3, r2, r3
 8007146:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	2b0f      	cmp	r3, #15
 800714c:	d910      	bls.n	8007170 <UART_SetConfig+0x5c8>
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007154:	d20c      	bcs.n	8007170 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	b29a      	uxth	r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60da      	str	r2, [r3, #12]
 8007160:	e009      	b.n	8007176 <UART_SetConfig+0x5ce>
 8007162:	bf00      	nop
 8007164:	40008000 	.word	0x40008000
 8007168:	00f42400 	.word	0x00f42400
 800716c:	080092a8 	.word	0x080092a8
      }
      else
      {
        ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2201      	movs	r2, #1
 800717a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2201      	movs	r2, #1
 8007182:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2200      	movs	r2, #0
 800718a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2200      	movs	r2, #0
 8007190:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007192:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007196:	4618      	mov	r0, r3
 8007198:	3730      	adds	r7, #48	@ 0x30
 800719a:	46bd      	mov	sp, r7
 800719c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01a      	beq.n	80072b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800729e:	d10a      	bne.n	80072b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	605a      	str	r2, [r3, #4]
  }
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b098      	sub	sp, #96	@ 0x60
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072f4:	f7fc fce8 	bl	8003cc8 <HAL_GetTick>
 80072f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b08      	cmp	r3, #8
 8007306:	d12f      	bne.n	8007368 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007310:	2200      	movs	r2, #0
 8007312:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f88e 	bl	8007438 <UART_WaitOnFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d022      	beq.n	8007368 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007336:	653b      	str	r3, [r7, #80]	@ 0x50
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007340:	647b      	str	r3, [r7, #68]	@ 0x44
 8007342:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800734e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e6      	bne.n	8007322 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e063      	b.n	8007430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b04      	cmp	r3, #4
 8007374:	d149      	bne.n	800740a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007376:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800737e:	2200      	movs	r2, #0
 8007380:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f857 	bl	8007438 <UART_WaitOnFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d03c      	beq.n	800740a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	623b      	str	r3, [r7, #32]
   return(result);
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e6      	bne.n	8007390 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073e2:	61fa      	str	r2, [r7, #28]
 80073e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	69b9      	ldr	r1, [r7, #24]
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	617b      	str	r3, [r7, #20]
   return(result);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e5      	bne.n	80073c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e012      	b.n	8007430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3758      	adds	r7, #88	@ 0x58
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	4613      	mov	r3, r2
 8007446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007448:	e04f      	b.n	80074ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007450:	d04b      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007452:	f7fc fc39 	bl	8003cc8 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	429a      	cmp	r2, r3
 8007460:	d302      	bcc.n	8007468 <UART_WaitOnFlagUntilTimeout+0x30>
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e04e      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0304 	and.w	r3, r3, #4
 8007476:	2b00      	cmp	r3, #0
 8007478:	d037      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b80      	cmp	r3, #128	@ 0x80
 800747e:	d034      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b40      	cmp	r3, #64	@ 0x40
 8007484:	d031      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b08      	cmp	r3, #8
 8007492:	d110      	bne.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2208      	movs	r2, #8
 800749a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f838 	bl	8007512 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2208      	movs	r2, #8
 80074a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e029      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c4:	d111      	bne.n	80074ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f81e 	bl	8007512 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e00f      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4013      	ands	r3, r2
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	429a      	cmp	r2, r3
 8007506:	d0a0      	beq.n	800744a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007512:	b480      	push	{r7}
 8007514:	b095      	sub	sp, #84	@ 0x54
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800752e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007538:	643b      	str	r3, [r7, #64]	@ 0x40
 800753a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800753e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e6      	bne.n	800751a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	61fb      	str	r3, [r7, #28]
   return(result);
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3308      	adds	r3, #8
 800756e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007570:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e3      	bne.n	800754c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007588:	2b01      	cmp	r3, #1
 800758a:	d118      	bne.n	80075be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	60bb      	str	r3, [r7, #8]
   return(result);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0310 	bic.w	r3, r3, #16
 80075a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6979      	ldr	r1, [r7, #20]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	613b      	str	r3, [r7, #16]
   return(result);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e6      	bne.n	800758c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075d2:	bf00      	nop
 80075d4:	3754      	adds	r7, #84	@ 0x54
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e027      	b.n	8007644 <HAL_UARTEx_DisableFifoMode+0x66>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2224      	movs	r2, #36	@ 0x24
 8007600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007622:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007664:	2302      	movs	r3, #2
 8007666:	e02d      	b.n	80076c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2224      	movs	r2, #36	@ 0x24
 8007674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f84f 	bl	8007748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e02d      	b.n	8007740 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2224      	movs	r2, #36	@ 0x24
 80076f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f811 	bl	8007748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007754:	2b00      	cmp	r3, #0
 8007756:	d108      	bne.n	800776a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007768:	e031      	b.n	80077ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800776a:	2308      	movs	r3, #8
 800776c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800776e:	2308      	movs	r3, #8
 8007770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	0e5b      	lsrs	r3, r3, #25
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	0f5b      	lsrs	r3, r3, #29
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	7b3a      	ldrb	r2, [r7, #12]
 8007796:	4911      	ldr	r1, [pc, #68]	@ (80077dc <UARTEx_SetNbDataToProcess+0x94>)
 8007798:	5c8a      	ldrb	r2, [r1, r2]
 800779a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800779e:	7b3a      	ldrb	r2, [r7, #12]
 80077a0:	490f      	ldr	r1, [pc, #60]	@ (80077e0 <UARTEx_SetNbDataToProcess+0x98>)
 80077a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	7b7a      	ldrb	r2, [r7, #13]
 80077b4:	4909      	ldr	r1, [pc, #36]	@ (80077dc <UARTEx_SetNbDataToProcess+0x94>)
 80077b6:	5c8a      	ldrb	r2, [r1, r2]
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077bc:	7b7a      	ldrb	r2, [r7, #13]
 80077be:	4908      	ldr	r1, [pc, #32]	@ (80077e0 <UARTEx_SetNbDataToProcess+0x98>)
 80077c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	080092c0 	.word	0x080092c0
 80077e0:	080092c8 	.word	0x080092c8

080077e4 <siscanf>:
 80077e4:	b40e      	push	{r1, r2, r3}
 80077e6:	b530      	push	{r4, r5, lr}
 80077e8:	b09c      	sub	sp, #112	@ 0x70
 80077ea:	ac1f      	add	r4, sp, #124	@ 0x7c
 80077ec:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80077f0:	f854 5b04 	ldr.w	r5, [r4], #4
 80077f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80077f8:	9002      	str	r0, [sp, #8]
 80077fa:	9006      	str	r0, [sp, #24]
 80077fc:	f7f8 fd10 	bl	8000220 <strlen>
 8007800:	4b0b      	ldr	r3, [pc, #44]	@ (8007830 <siscanf+0x4c>)
 8007802:	9003      	str	r0, [sp, #12]
 8007804:	9007      	str	r0, [sp, #28]
 8007806:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007808:	480a      	ldr	r0, [pc, #40]	@ (8007834 <siscanf+0x50>)
 800780a:	9401      	str	r4, [sp, #4]
 800780c:	2300      	movs	r3, #0
 800780e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007810:	9314      	str	r3, [sp, #80]	@ 0x50
 8007812:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007816:	f8ad 3016 	strh.w	r3, [sp, #22]
 800781a:	462a      	mov	r2, r5
 800781c:	4623      	mov	r3, r4
 800781e:	a902      	add	r1, sp, #8
 8007820:	6800      	ldr	r0, [r0, #0]
 8007822:	f000 fb13 	bl	8007e4c <__ssvfiscanf_r>
 8007826:	b01c      	add	sp, #112	@ 0x70
 8007828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800782c:	b003      	add	sp, #12
 800782e:	4770      	bx	lr
 8007830:	0800785b 	.word	0x0800785b
 8007834:	20000090 	.word	0x20000090

08007838 <__sread>:
 8007838:	b510      	push	{r4, lr}
 800783a:	460c      	mov	r4, r1
 800783c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007840:	f000 fa10 	bl	8007c64 <_read_r>
 8007844:	2800      	cmp	r0, #0
 8007846:	bfab      	itete	ge
 8007848:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800784a:	89a3      	ldrhlt	r3, [r4, #12]
 800784c:	181b      	addge	r3, r3, r0
 800784e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007852:	bfac      	ite	ge
 8007854:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007856:	81a3      	strhlt	r3, [r4, #12]
 8007858:	bd10      	pop	{r4, pc}

0800785a <__seofread>:
 800785a:	2000      	movs	r0, #0
 800785c:	4770      	bx	lr

0800785e <__swrite>:
 800785e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007862:	461f      	mov	r7, r3
 8007864:	898b      	ldrh	r3, [r1, #12]
 8007866:	05db      	lsls	r3, r3, #23
 8007868:	4605      	mov	r5, r0
 800786a:	460c      	mov	r4, r1
 800786c:	4616      	mov	r6, r2
 800786e:	d505      	bpl.n	800787c <__swrite+0x1e>
 8007870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007874:	2302      	movs	r3, #2
 8007876:	2200      	movs	r2, #0
 8007878:	f000 f9e2 	bl	8007c40 <_lseek_r>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007882:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	4632      	mov	r2, r6
 800788a:	463b      	mov	r3, r7
 800788c:	4628      	mov	r0, r5
 800788e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	f000 b9f9 	b.w	8007c88 <_write_r>

08007896 <__sseek>:
 8007896:	b510      	push	{r4, lr}
 8007898:	460c      	mov	r4, r1
 800789a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789e:	f000 f9cf 	bl	8007c40 <_lseek_r>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	bf15      	itete	ne
 80078a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078b2:	81a3      	strheq	r3, [r4, #12]
 80078b4:	bf18      	it	ne
 80078b6:	81a3      	strhne	r3, [r4, #12]
 80078b8:	bd10      	pop	{r4, pc}

080078ba <__sclose>:
 80078ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078be:	f000 b9af 	b.w	8007c20 <_close_r>
	...

080078c4 <std>:
 80078c4:	2300      	movs	r3, #0
 80078c6:	b510      	push	{r4, lr}
 80078c8:	4604      	mov	r4, r0
 80078ca:	e9c0 3300 	strd	r3, r3, [r0]
 80078ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078d2:	6083      	str	r3, [r0, #8]
 80078d4:	8181      	strh	r1, [r0, #12]
 80078d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80078d8:	81c2      	strh	r2, [r0, #14]
 80078da:	6183      	str	r3, [r0, #24]
 80078dc:	4619      	mov	r1, r3
 80078de:	2208      	movs	r2, #8
 80078e0:	305c      	adds	r0, #92	@ 0x5c
 80078e2:	f000 f995 	bl	8007c10 <memset>
 80078e6:	4b0d      	ldr	r3, [pc, #52]	@ (800791c <std+0x58>)
 80078e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <std+0x5c>)
 80078ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007924 <std+0x60>)
 80078f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <std+0x64>)
 80078f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <std+0x68>)
 80078f8:	6224      	str	r4, [r4, #32]
 80078fa:	429c      	cmp	r4, r3
 80078fc:	d006      	beq.n	800790c <std+0x48>
 80078fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007902:	4294      	cmp	r4, r2
 8007904:	d002      	beq.n	800790c <std+0x48>
 8007906:	33d0      	adds	r3, #208	@ 0xd0
 8007908:	429c      	cmp	r4, r3
 800790a:	d105      	bne.n	8007918 <std+0x54>
 800790c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007914:	f000 b9f4 	b.w	8007d00 <__retarget_lock_init_recursive>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	bf00      	nop
 800791c:	08007839 	.word	0x08007839
 8007920:	0800785f 	.word	0x0800785f
 8007924:	08007897 	.word	0x08007897
 8007928:	080078bb 	.word	0x080078bb
 800792c:	20000460 	.word	0x20000460

08007930 <stdio_exit_handler>:
 8007930:	4a02      	ldr	r2, [pc, #8]	@ (800793c <stdio_exit_handler+0xc>)
 8007932:	4903      	ldr	r1, [pc, #12]	@ (8007940 <stdio_exit_handler+0x10>)
 8007934:	4803      	ldr	r0, [pc, #12]	@ (8007944 <stdio_exit_handler+0x14>)
 8007936:	f000 b8ef 	b.w	8007b18 <_fwalk_sglue>
 800793a:	bf00      	nop
 800793c:	20000084 	.word	0x20000084
 8007940:	08008691 	.word	0x08008691
 8007944:	20000094 	.word	0x20000094

08007948 <cleanup_stdio>:
 8007948:	6841      	ldr	r1, [r0, #4]
 800794a:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <cleanup_stdio+0x34>)
 800794c:	4299      	cmp	r1, r3
 800794e:	b510      	push	{r4, lr}
 8007950:	4604      	mov	r4, r0
 8007952:	d001      	beq.n	8007958 <cleanup_stdio+0x10>
 8007954:	f000 fe9c 	bl	8008690 <_fflush_r>
 8007958:	68a1      	ldr	r1, [r4, #8]
 800795a:	4b09      	ldr	r3, [pc, #36]	@ (8007980 <cleanup_stdio+0x38>)
 800795c:	4299      	cmp	r1, r3
 800795e:	d002      	beq.n	8007966 <cleanup_stdio+0x1e>
 8007960:	4620      	mov	r0, r4
 8007962:	f000 fe95 	bl	8008690 <_fflush_r>
 8007966:	68e1      	ldr	r1, [r4, #12]
 8007968:	4b06      	ldr	r3, [pc, #24]	@ (8007984 <cleanup_stdio+0x3c>)
 800796a:	4299      	cmp	r1, r3
 800796c:	d004      	beq.n	8007978 <cleanup_stdio+0x30>
 800796e:	4620      	mov	r0, r4
 8007970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007974:	f000 be8c 	b.w	8008690 <_fflush_r>
 8007978:	bd10      	pop	{r4, pc}
 800797a:	bf00      	nop
 800797c:	20000460 	.word	0x20000460
 8007980:	200004c8 	.word	0x200004c8
 8007984:	20000530 	.word	0x20000530

08007988 <global_stdio_init.part.0>:
 8007988:	b510      	push	{r4, lr}
 800798a:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <global_stdio_init.part.0+0x30>)
 800798c:	4c0b      	ldr	r4, [pc, #44]	@ (80079bc <global_stdio_init.part.0+0x34>)
 800798e:	4a0c      	ldr	r2, [pc, #48]	@ (80079c0 <global_stdio_init.part.0+0x38>)
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	4620      	mov	r0, r4
 8007994:	2200      	movs	r2, #0
 8007996:	2104      	movs	r1, #4
 8007998:	f7ff ff94 	bl	80078c4 <std>
 800799c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079a0:	2201      	movs	r2, #1
 80079a2:	2109      	movs	r1, #9
 80079a4:	f7ff ff8e 	bl	80078c4 <std>
 80079a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079ac:	2202      	movs	r2, #2
 80079ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b2:	2112      	movs	r1, #18
 80079b4:	f7ff bf86 	b.w	80078c4 <std>
 80079b8:	20000598 	.word	0x20000598
 80079bc:	20000460 	.word	0x20000460
 80079c0:	08007931 	.word	0x08007931

080079c4 <__sfp_lock_acquire>:
 80079c4:	4801      	ldr	r0, [pc, #4]	@ (80079cc <__sfp_lock_acquire+0x8>)
 80079c6:	f000 b99c 	b.w	8007d02 <__retarget_lock_acquire_recursive>
 80079ca:	bf00      	nop
 80079cc:	200005a1 	.word	0x200005a1

080079d0 <__sfp_lock_release>:
 80079d0:	4801      	ldr	r0, [pc, #4]	@ (80079d8 <__sfp_lock_release+0x8>)
 80079d2:	f000 b997 	b.w	8007d04 <__retarget_lock_release_recursive>
 80079d6:	bf00      	nop
 80079d8:	200005a1 	.word	0x200005a1

080079dc <__sinit>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4604      	mov	r4, r0
 80079e0:	f7ff fff0 	bl	80079c4 <__sfp_lock_acquire>
 80079e4:	6a23      	ldr	r3, [r4, #32]
 80079e6:	b11b      	cbz	r3, 80079f0 <__sinit+0x14>
 80079e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ec:	f7ff bff0 	b.w	80079d0 <__sfp_lock_release>
 80079f0:	4b04      	ldr	r3, [pc, #16]	@ (8007a04 <__sinit+0x28>)
 80079f2:	6223      	str	r3, [r4, #32]
 80079f4:	4b04      	ldr	r3, [pc, #16]	@ (8007a08 <__sinit+0x2c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f5      	bne.n	80079e8 <__sinit+0xc>
 80079fc:	f7ff ffc4 	bl	8007988 <global_stdio_init.part.0>
 8007a00:	e7f2      	b.n	80079e8 <__sinit+0xc>
 8007a02:	bf00      	nop
 8007a04:	08007949 	.word	0x08007949
 8007a08:	20000598 	.word	0x20000598

08007a0c <_strtol_l.constprop.0>:
 8007a0c:	2b24      	cmp	r3, #36	@ 0x24
 8007a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a12:	4686      	mov	lr, r0
 8007a14:	4690      	mov	r8, r2
 8007a16:	d801      	bhi.n	8007a1c <_strtol_l.constprop.0+0x10>
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d106      	bne.n	8007a2a <_strtol_l.constprop.0+0x1e>
 8007a1c:	f000 f946 	bl	8007cac <__errno>
 8007a20:	2316      	movs	r3, #22
 8007a22:	6003      	str	r3, [r0, #0]
 8007a24:	2000      	movs	r0, #0
 8007a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2a:	4834      	ldr	r0, [pc, #208]	@ (8007afc <_strtol_l.constprop.0+0xf0>)
 8007a2c:	460d      	mov	r5, r1
 8007a2e:	462a      	mov	r2, r5
 8007a30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a34:	5d06      	ldrb	r6, [r0, r4]
 8007a36:	f016 0608 	ands.w	r6, r6, #8
 8007a3a:	d1f8      	bne.n	8007a2e <_strtol_l.constprop.0+0x22>
 8007a3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a3e:	d12d      	bne.n	8007a9c <_strtol_l.constprop.0+0x90>
 8007a40:	782c      	ldrb	r4, [r5, #0]
 8007a42:	2601      	movs	r6, #1
 8007a44:	1c95      	adds	r5, r2, #2
 8007a46:	f033 0210 	bics.w	r2, r3, #16
 8007a4a:	d109      	bne.n	8007a60 <_strtol_l.constprop.0+0x54>
 8007a4c:	2c30      	cmp	r4, #48	@ 0x30
 8007a4e:	d12a      	bne.n	8007aa6 <_strtol_l.constprop.0+0x9a>
 8007a50:	782a      	ldrb	r2, [r5, #0]
 8007a52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007a56:	2a58      	cmp	r2, #88	@ 0x58
 8007a58:	d125      	bne.n	8007aa6 <_strtol_l.constprop.0+0x9a>
 8007a5a:	786c      	ldrb	r4, [r5, #1]
 8007a5c:	2310      	movs	r3, #16
 8007a5e:	3502      	adds	r5, #2
 8007a60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007a64:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007a68:	2200      	movs	r2, #0
 8007a6a:	fbbc f9f3 	udiv	r9, ip, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007a78:	2f09      	cmp	r7, #9
 8007a7a:	d81b      	bhi.n	8007ab4 <_strtol_l.constprop.0+0xa8>
 8007a7c:	463c      	mov	r4, r7
 8007a7e:	42a3      	cmp	r3, r4
 8007a80:	dd27      	ble.n	8007ad2 <_strtol_l.constprop.0+0xc6>
 8007a82:	1c57      	adds	r7, r2, #1
 8007a84:	d007      	beq.n	8007a96 <_strtol_l.constprop.0+0x8a>
 8007a86:	4581      	cmp	r9, r0
 8007a88:	d320      	bcc.n	8007acc <_strtol_l.constprop.0+0xc0>
 8007a8a:	d101      	bne.n	8007a90 <_strtol_l.constprop.0+0x84>
 8007a8c:	45a2      	cmp	sl, r4
 8007a8e:	db1d      	blt.n	8007acc <_strtol_l.constprop.0+0xc0>
 8007a90:	fb00 4003 	mla	r0, r0, r3, r4
 8007a94:	2201      	movs	r2, #1
 8007a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a9a:	e7eb      	b.n	8007a74 <_strtol_l.constprop.0+0x68>
 8007a9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007a9e:	bf04      	itt	eq
 8007aa0:	782c      	ldrbeq	r4, [r5, #0]
 8007aa2:	1c95      	addeq	r5, r2, #2
 8007aa4:	e7cf      	b.n	8007a46 <_strtol_l.constprop.0+0x3a>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1da      	bne.n	8007a60 <_strtol_l.constprop.0+0x54>
 8007aaa:	2c30      	cmp	r4, #48	@ 0x30
 8007aac:	bf0c      	ite	eq
 8007aae:	2308      	moveq	r3, #8
 8007ab0:	230a      	movne	r3, #10
 8007ab2:	e7d5      	b.n	8007a60 <_strtol_l.constprop.0+0x54>
 8007ab4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ab8:	2f19      	cmp	r7, #25
 8007aba:	d801      	bhi.n	8007ac0 <_strtol_l.constprop.0+0xb4>
 8007abc:	3c37      	subs	r4, #55	@ 0x37
 8007abe:	e7de      	b.n	8007a7e <_strtol_l.constprop.0+0x72>
 8007ac0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ac4:	2f19      	cmp	r7, #25
 8007ac6:	d804      	bhi.n	8007ad2 <_strtol_l.constprop.0+0xc6>
 8007ac8:	3c57      	subs	r4, #87	@ 0x57
 8007aca:	e7d8      	b.n	8007a7e <_strtol_l.constprop.0+0x72>
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ad0:	e7e1      	b.n	8007a96 <_strtol_l.constprop.0+0x8a>
 8007ad2:	1c53      	adds	r3, r2, #1
 8007ad4:	d108      	bne.n	8007ae8 <_strtol_l.constprop.0+0xdc>
 8007ad6:	2322      	movs	r3, #34	@ 0x22
 8007ad8:	f8ce 3000 	str.w	r3, [lr]
 8007adc:	4660      	mov	r0, ip
 8007ade:	f1b8 0f00 	cmp.w	r8, #0
 8007ae2:	d0a0      	beq.n	8007a26 <_strtol_l.constprop.0+0x1a>
 8007ae4:	1e69      	subs	r1, r5, #1
 8007ae6:	e006      	b.n	8007af6 <_strtol_l.constprop.0+0xea>
 8007ae8:	b106      	cbz	r6, 8007aec <_strtol_l.constprop.0+0xe0>
 8007aea:	4240      	negs	r0, r0
 8007aec:	f1b8 0f00 	cmp.w	r8, #0
 8007af0:	d099      	beq.n	8007a26 <_strtol_l.constprop.0+0x1a>
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d1f6      	bne.n	8007ae4 <_strtol_l.constprop.0+0xd8>
 8007af6:	f8c8 1000 	str.w	r1, [r8]
 8007afa:	e794      	b.n	8007a26 <_strtol_l.constprop.0+0x1a>
 8007afc:	080092d1 	.word	0x080092d1

08007b00 <_strtol_r>:
 8007b00:	f7ff bf84 	b.w	8007a0c <_strtol_l.constprop.0>

08007b04 <strtol>:
 8007b04:	4613      	mov	r3, r2
 8007b06:	460a      	mov	r2, r1
 8007b08:	4601      	mov	r1, r0
 8007b0a:	4802      	ldr	r0, [pc, #8]	@ (8007b14 <strtol+0x10>)
 8007b0c:	6800      	ldr	r0, [r0, #0]
 8007b0e:	f7ff bf7d 	b.w	8007a0c <_strtol_l.constprop.0>
 8007b12:	bf00      	nop
 8007b14:	20000090 	.word	0x20000090

08007b18 <_fwalk_sglue>:
 8007b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	4688      	mov	r8, r1
 8007b20:	4614      	mov	r4, r2
 8007b22:	2600      	movs	r6, #0
 8007b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b28:	f1b9 0901 	subs.w	r9, r9, #1
 8007b2c:	d505      	bpl.n	8007b3a <_fwalk_sglue+0x22>
 8007b2e:	6824      	ldr	r4, [r4, #0]
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	d1f7      	bne.n	8007b24 <_fwalk_sglue+0xc>
 8007b34:	4630      	mov	r0, r6
 8007b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d907      	bls.n	8007b50 <_fwalk_sglue+0x38>
 8007b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b44:	3301      	adds	r3, #1
 8007b46:	d003      	beq.n	8007b50 <_fwalk_sglue+0x38>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	47c0      	blx	r8
 8007b4e:	4306      	orrs	r6, r0
 8007b50:	3568      	adds	r5, #104	@ 0x68
 8007b52:	e7e9      	b.n	8007b28 <_fwalk_sglue+0x10>

08007b54 <_puts_r>:
 8007b54:	6a03      	ldr	r3, [r0, #32]
 8007b56:	b570      	push	{r4, r5, r6, lr}
 8007b58:	6884      	ldr	r4, [r0, #8]
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	460e      	mov	r6, r1
 8007b5e:	b90b      	cbnz	r3, 8007b64 <_puts_r+0x10>
 8007b60:	f7ff ff3c 	bl	80079dc <__sinit>
 8007b64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b66:	07db      	lsls	r3, r3, #31
 8007b68:	d405      	bmi.n	8007b76 <_puts_r+0x22>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	0598      	lsls	r0, r3, #22
 8007b6e:	d402      	bmi.n	8007b76 <_puts_r+0x22>
 8007b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b72:	f000 f8c6 	bl	8007d02 <__retarget_lock_acquire_recursive>
 8007b76:	89a3      	ldrh	r3, [r4, #12]
 8007b78:	0719      	lsls	r1, r3, #28
 8007b7a:	d502      	bpl.n	8007b82 <_puts_r+0x2e>
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d135      	bne.n	8007bee <_puts_r+0x9a>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	f000 fecd 	bl	8008924 <__swsetup_r>
 8007b8a:	b380      	cbz	r0, 8007bee <_puts_r+0x9a>
 8007b8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007b90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b92:	07da      	lsls	r2, r3, #31
 8007b94:	d405      	bmi.n	8007ba2 <_puts_r+0x4e>
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	059b      	lsls	r3, r3, #22
 8007b9a:	d402      	bmi.n	8007ba2 <_puts_r+0x4e>
 8007b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b9e:	f000 f8b1 	bl	8007d04 <__retarget_lock_release_recursive>
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da04      	bge.n	8007bb4 <_puts_r+0x60>
 8007baa:	69a2      	ldr	r2, [r4, #24]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	dc17      	bgt.n	8007be0 <_puts_r+0x8c>
 8007bb0:	290a      	cmp	r1, #10
 8007bb2:	d015      	beq.n	8007be0 <_puts_r+0x8c>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	6022      	str	r2, [r4, #0]
 8007bba:	7019      	strb	r1, [r3, #0]
 8007bbc:	68a3      	ldr	r3, [r4, #8]
 8007bbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	60a3      	str	r3, [r4, #8]
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d1ed      	bne.n	8007ba6 <_puts_r+0x52>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da11      	bge.n	8007bf2 <_puts_r+0x9e>
 8007bce:	4622      	mov	r2, r4
 8007bd0:	210a      	movs	r1, #10
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 fe68 	bl	80088a8 <__swbuf_r>
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d0d7      	beq.n	8007b8c <_puts_r+0x38>
 8007bdc:	250a      	movs	r5, #10
 8007bde:	e7d7      	b.n	8007b90 <_puts_r+0x3c>
 8007be0:	4622      	mov	r2, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 fe60 	bl	80088a8 <__swbuf_r>
 8007be8:	3001      	adds	r0, #1
 8007bea:	d1e7      	bne.n	8007bbc <_puts_r+0x68>
 8007bec:	e7ce      	b.n	8007b8c <_puts_r+0x38>
 8007bee:	3e01      	subs	r6, #1
 8007bf0:	e7e4      	b.n	8007bbc <_puts_r+0x68>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	6022      	str	r2, [r4, #0]
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	701a      	strb	r2, [r3, #0]
 8007bfc:	e7ee      	b.n	8007bdc <_puts_r+0x88>
	...

08007c00 <puts>:
 8007c00:	4b02      	ldr	r3, [pc, #8]	@ (8007c0c <puts+0xc>)
 8007c02:	4601      	mov	r1, r0
 8007c04:	6818      	ldr	r0, [r3, #0]
 8007c06:	f7ff bfa5 	b.w	8007b54 <_puts_r>
 8007c0a:	bf00      	nop
 8007c0c:	20000090 	.word	0x20000090

08007c10 <memset>:
 8007c10:	4402      	add	r2, r0
 8007c12:	4603      	mov	r3, r0
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d100      	bne.n	8007c1a <memset+0xa>
 8007c18:	4770      	bx	lr
 8007c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1e:	e7f9      	b.n	8007c14 <memset+0x4>

08007c20 <_close_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d06      	ldr	r5, [pc, #24]	@ (8007c3c <_close_r+0x1c>)
 8007c24:	2300      	movs	r3, #0
 8007c26:	4604      	mov	r4, r0
 8007c28:	4608      	mov	r0, r1
 8007c2a:	602b      	str	r3, [r5, #0]
 8007c2c:	f7fb fa48 	bl	80030c0 <_close>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_close_r+0x1a>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_close_r+0x1a>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	2000059c 	.word	0x2000059c

08007c40 <_lseek_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d07      	ldr	r5, [pc, #28]	@ (8007c60 <_lseek_r+0x20>)
 8007c44:	4604      	mov	r4, r0
 8007c46:	4608      	mov	r0, r1
 8007c48:	4611      	mov	r1, r2
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	602a      	str	r2, [r5, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f7fb fa5d 	bl	800310e <_lseek>
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	d102      	bne.n	8007c5e <_lseek_r+0x1e>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	b103      	cbz	r3, 8007c5e <_lseek_r+0x1e>
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	2000059c 	.word	0x2000059c

08007c64 <_read_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d07      	ldr	r5, [pc, #28]	@ (8007c84 <_read_r+0x20>)
 8007c68:	4604      	mov	r4, r0
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f7fb f9eb 	bl	800304e <_read>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_read_r+0x1e>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_read_r+0x1e>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	2000059c 	.word	0x2000059c

08007c88 <_write_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	4d07      	ldr	r5, [pc, #28]	@ (8007ca8 <_write_r+0x20>)
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	4608      	mov	r0, r1
 8007c90:	4611      	mov	r1, r2
 8007c92:	2200      	movs	r2, #0
 8007c94:	602a      	str	r2, [r5, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	f7fb f9f6 	bl	8003088 <_write>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d102      	bne.n	8007ca6 <_write_r+0x1e>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	b103      	cbz	r3, 8007ca6 <_write_r+0x1e>
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	2000059c 	.word	0x2000059c

08007cac <__errno>:
 8007cac:	4b01      	ldr	r3, [pc, #4]	@ (8007cb4 <__errno+0x8>)
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	20000090 	.word	0x20000090

08007cb8 <__libc_init_array>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	4d0d      	ldr	r5, [pc, #52]	@ (8007cf0 <__libc_init_array+0x38>)
 8007cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8007cf4 <__libc_init_array+0x3c>)
 8007cbe:	1b64      	subs	r4, r4, r5
 8007cc0:	10a4      	asrs	r4, r4, #2
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	42a6      	cmp	r6, r4
 8007cc6:	d109      	bne.n	8007cdc <__libc_init_array+0x24>
 8007cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8007cf8 <__libc_init_array+0x40>)
 8007cca:	4c0c      	ldr	r4, [pc, #48]	@ (8007cfc <__libc_init_array+0x44>)
 8007ccc:	f001 fa9a 	bl	8009204 <_init>
 8007cd0:	1b64      	subs	r4, r4, r5
 8007cd2:	10a4      	asrs	r4, r4, #2
 8007cd4:	2600      	movs	r6, #0
 8007cd6:	42a6      	cmp	r6, r4
 8007cd8:	d105      	bne.n	8007ce6 <__libc_init_array+0x2e>
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce0:	4798      	blx	r3
 8007ce2:	3601      	adds	r6, #1
 8007ce4:	e7ee      	b.n	8007cc4 <__libc_init_array+0xc>
 8007ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cea:	4798      	blx	r3
 8007cec:	3601      	adds	r6, #1
 8007cee:	e7f2      	b.n	8007cd6 <__libc_init_array+0x1e>
 8007cf0:	08009468 	.word	0x08009468
 8007cf4:	08009468 	.word	0x08009468
 8007cf8:	08009468 	.word	0x08009468
 8007cfc:	0800946c 	.word	0x0800946c

08007d00 <__retarget_lock_init_recursive>:
 8007d00:	4770      	bx	lr

08007d02 <__retarget_lock_acquire_recursive>:
 8007d02:	4770      	bx	lr

08007d04 <__retarget_lock_release_recursive>:
 8007d04:	4770      	bx	lr
	...

08007d08 <_free_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d041      	beq.n	8007d94 <_free_r+0x8c>
 8007d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d14:	1f0c      	subs	r4, r1, #4
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bfb8      	it	lt
 8007d1a:	18e4      	addlt	r4, r4, r3
 8007d1c:	f000 fce0 	bl	80086e0 <__malloc_lock>
 8007d20:	4a1d      	ldr	r2, [pc, #116]	@ (8007d98 <_free_r+0x90>)
 8007d22:	6813      	ldr	r3, [r2, #0]
 8007d24:	b933      	cbnz	r3, 8007d34 <_free_r+0x2c>
 8007d26:	6063      	str	r3, [r4, #4]
 8007d28:	6014      	str	r4, [r2, #0]
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d30:	f000 bcdc 	b.w	80086ec <__malloc_unlock>
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d908      	bls.n	8007d4a <_free_r+0x42>
 8007d38:	6820      	ldr	r0, [r4, #0]
 8007d3a:	1821      	adds	r1, r4, r0
 8007d3c:	428b      	cmp	r3, r1
 8007d3e:	bf01      	itttt	eq
 8007d40:	6819      	ldreq	r1, [r3, #0]
 8007d42:	685b      	ldreq	r3, [r3, #4]
 8007d44:	1809      	addeq	r1, r1, r0
 8007d46:	6021      	streq	r1, [r4, #0]
 8007d48:	e7ed      	b.n	8007d26 <_free_r+0x1e>
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	b10b      	cbz	r3, 8007d54 <_free_r+0x4c>
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d9fa      	bls.n	8007d4a <_free_r+0x42>
 8007d54:	6811      	ldr	r1, [r2, #0]
 8007d56:	1850      	adds	r0, r2, r1
 8007d58:	42a0      	cmp	r0, r4
 8007d5a:	d10b      	bne.n	8007d74 <_free_r+0x6c>
 8007d5c:	6820      	ldr	r0, [r4, #0]
 8007d5e:	4401      	add	r1, r0
 8007d60:	1850      	adds	r0, r2, r1
 8007d62:	4283      	cmp	r3, r0
 8007d64:	6011      	str	r1, [r2, #0]
 8007d66:	d1e0      	bne.n	8007d2a <_free_r+0x22>
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	6053      	str	r3, [r2, #4]
 8007d6e:	4408      	add	r0, r1
 8007d70:	6010      	str	r0, [r2, #0]
 8007d72:	e7da      	b.n	8007d2a <_free_r+0x22>
 8007d74:	d902      	bls.n	8007d7c <_free_r+0x74>
 8007d76:	230c      	movs	r3, #12
 8007d78:	602b      	str	r3, [r5, #0]
 8007d7a:	e7d6      	b.n	8007d2a <_free_r+0x22>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	1821      	adds	r1, r4, r0
 8007d80:	428b      	cmp	r3, r1
 8007d82:	bf04      	itt	eq
 8007d84:	6819      	ldreq	r1, [r3, #0]
 8007d86:	685b      	ldreq	r3, [r3, #4]
 8007d88:	6063      	str	r3, [r4, #4]
 8007d8a:	bf04      	itt	eq
 8007d8c:	1809      	addeq	r1, r1, r0
 8007d8e:	6021      	streq	r1, [r4, #0]
 8007d90:	6054      	str	r4, [r2, #4]
 8007d92:	e7ca      	b.n	8007d2a <_free_r+0x22>
 8007d94:	bd38      	pop	{r3, r4, r5, pc}
 8007d96:	bf00      	nop
 8007d98:	200005a8 	.word	0x200005a8

08007d9c <_sungetc_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	1c4b      	adds	r3, r1, #1
 8007da0:	4614      	mov	r4, r2
 8007da2:	d103      	bne.n	8007dac <_sungetc_r+0x10>
 8007da4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007da8:	4628      	mov	r0, r5
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	8993      	ldrh	r3, [r2, #12]
 8007dae:	f023 0320 	bic.w	r3, r3, #32
 8007db2:	8193      	strh	r3, [r2, #12]
 8007db4:	6853      	ldr	r3, [r2, #4]
 8007db6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007db8:	b2cd      	uxtb	r5, r1
 8007dba:	b18a      	cbz	r2, 8007de0 <_sungetc_r+0x44>
 8007dbc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	dd08      	ble.n	8007dd4 <_sungetc_r+0x38>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	1e5a      	subs	r2, r3, #1
 8007dc6:	6022      	str	r2, [r4, #0]
 8007dc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007dcc:	6863      	ldr	r3, [r4, #4]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	6063      	str	r3, [r4, #4]
 8007dd2:	e7e9      	b.n	8007da8 <_sungetc_r+0xc>
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	f000 fc8f 	bl	80086f8 <__submore>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d0f1      	beq.n	8007dc2 <_sungetc_r+0x26>
 8007dde:	e7e1      	b.n	8007da4 <_sungetc_r+0x8>
 8007de0:	6921      	ldr	r1, [r4, #16]
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	b141      	cbz	r1, 8007df8 <_sungetc_r+0x5c>
 8007de6:	4291      	cmp	r1, r2
 8007de8:	d206      	bcs.n	8007df8 <_sungetc_r+0x5c>
 8007dea:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007dee:	42a9      	cmp	r1, r5
 8007df0:	d102      	bne.n	8007df8 <_sungetc_r+0x5c>
 8007df2:	3a01      	subs	r2, #1
 8007df4:	6022      	str	r2, [r4, #0]
 8007df6:	e7ea      	b.n	8007dce <_sungetc_r+0x32>
 8007df8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007dfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e02:	2303      	movs	r3, #3
 8007e04:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007e06:	4623      	mov	r3, r4
 8007e08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e7de      	b.n	8007dd0 <_sungetc_r+0x34>

08007e12 <__ssrefill_r>:
 8007e12:	b510      	push	{r4, lr}
 8007e14:	460c      	mov	r4, r1
 8007e16:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007e18:	b169      	cbz	r1, 8007e36 <__ssrefill_r+0x24>
 8007e1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d001      	beq.n	8007e26 <__ssrefill_r+0x14>
 8007e22:	f7ff ff71 	bl	8007d08 <_free_r>
 8007e26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e28:	6063      	str	r3, [r4, #4]
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	6360      	str	r0, [r4, #52]	@ 0x34
 8007e2e:	b113      	cbz	r3, 8007e36 <__ssrefill_r+0x24>
 8007e30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e32:	6023      	str	r3, [r4, #0]
 8007e34:	bd10      	pop	{r4, pc}
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6063      	str	r3, [r4, #4]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	f043 0320 	orr.w	r3, r3, #32
 8007e44:	81a3      	strh	r3, [r4, #12]
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e4a:	e7f3      	b.n	8007e34 <__ssrefill_r+0x22>

08007e4c <__ssvfiscanf_r>:
 8007e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e50:	460c      	mov	r4, r1
 8007e52:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007e56:	2100      	movs	r1, #0
 8007e58:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007e5c:	49a5      	ldr	r1, [pc, #660]	@ (80080f4 <__ssvfiscanf_r+0x2a8>)
 8007e5e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007e60:	f10d 0804 	add.w	r8, sp, #4
 8007e64:	49a4      	ldr	r1, [pc, #656]	@ (80080f8 <__ssvfiscanf_r+0x2ac>)
 8007e66:	4fa5      	ldr	r7, [pc, #660]	@ (80080fc <__ssvfiscanf_r+0x2b0>)
 8007e68:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	7813      	ldrb	r3, [r2, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8158 	beq.w	800812a <__ssvfiscanf_r+0x2de>
 8007e7a:	5cf9      	ldrb	r1, [r7, r3]
 8007e7c:	f011 0108 	ands.w	r1, r1, #8
 8007e80:	f102 0501 	add.w	r5, r2, #1
 8007e84:	d019      	beq.n	8007eba <__ssvfiscanf_r+0x6e>
 8007e86:	6863      	ldr	r3, [r4, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dd0f      	ble.n	8007eac <__ssvfiscanf_r+0x60>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	781a      	ldrb	r2, [r3, #0]
 8007e90:	5cba      	ldrb	r2, [r7, r2]
 8007e92:	0712      	lsls	r2, r2, #28
 8007e94:	d401      	bmi.n	8007e9a <__ssvfiscanf_r+0x4e>
 8007e96:	462a      	mov	r2, r5
 8007e98:	e7eb      	b.n	8007e72 <__ssvfiscanf_r+0x26>
 8007e9a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007e9c:	3201      	adds	r2, #1
 8007e9e:	9245      	str	r2, [sp, #276]	@ 0x114
 8007ea0:	6862      	ldr	r2, [r4, #4]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	3a01      	subs	r2, #1
 8007ea6:	6062      	str	r2, [r4, #4]
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	e7ec      	b.n	8007e86 <__ssvfiscanf_r+0x3a>
 8007eac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	4798      	blx	r3
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d0e9      	beq.n	8007e8c <__ssvfiscanf_r+0x40>
 8007eb8:	e7ed      	b.n	8007e96 <__ssvfiscanf_r+0x4a>
 8007eba:	2b25      	cmp	r3, #37	@ 0x25
 8007ebc:	d012      	beq.n	8007ee4 <__ssvfiscanf_r+0x98>
 8007ebe:	4699      	mov	r9, r3
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f340 8093 	ble.w	8007fee <__ssvfiscanf_r+0x1a2>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	7813      	ldrb	r3, [r2, #0]
 8007ecc:	454b      	cmp	r3, r9
 8007ece:	f040 812c 	bne.w	800812a <__ssvfiscanf_r+0x2de>
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	6063      	str	r3, [r4, #4]
 8007ed8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007eda:	3201      	adds	r2, #1
 8007edc:	3301      	adds	r3, #1
 8007ede:	6022      	str	r2, [r4, #0]
 8007ee0:	9345      	str	r3, [sp, #276]	@ 0x114
 8007ee2:	e7d8      	b.n	8007e96 <__ssvfiscanf_r+0x4a>
 8007ee4:	9141      	str	r1, [sp, #260]	@ 0x104
 8007ee6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007ee8:	7853      	ldrb	r3, [r2, #1]
 8007eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eec:	bf02      	ittt	eq
 8007eee:	2310      	moveq	r3, #16
 8007ef0:	1c95      	addeq	r5, r2, #2
 8007ef2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007ef4:	220a      	movs	r2, #10
 8007ef6:	46a9      	mov	r9, r5
 8007ef8:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007efc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d91e      	bls.n	8007f42 <__ssvfiscanf_r+0xf6>
 8007f04:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008100 <__ssvfiscanf_r+0x2b4>
 8007f08:	2203      	movs	r2, #3
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	f7f8 f990 	bl	8000230 <memchr>
 8007f10:	b138      	cbz	r0, 8007f22 <__ssvfiscanf_r+0xd6>
 8007f12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007f14:	eba0 000a 	sub.w	r0, r0, sl
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4083      	lsls	r3, r0
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007f20:	464d      	mov	r5, r9
 8007f22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f26:	2b78      	cmp	r3, #120	@ 0x78
 8007f28:	d806      	bhi.n	8007f38 <__ssvfiscanf_r+0xec>
 8007f2a:	2b57      	cmp	r3, #87	@ 0x57
 8007f2c:	d810      	bhi.n	8007f50 <__ssvfiscanf_r+0x104>
 8007f2e:	2b25      	cmp	r3, #37	@ 0x25
 8007f30:	d0c5      	beq.n	8007ebe <__ssvfiscanf_r+0x72>
 8007f32:	d857      	bhi.n	8007fe4 <__ssvfiscanf_r+0x198>
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d065      	beq.n	8008004 <__ssvfiscanf_r+0x1b8>
 8007f38:	2303      	movs	r3, #3
 8007f3a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007f3c:	230a      	movs	r3, #10
 8007f3e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007f40:	e078      	b.n	8008034 <__ssvfiscanf_r+0x1e8>
 8007f42:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007f44:	fb02 1103 	mla	r1, r2, r3, r1
 8007f48:	3930      	subs	r1, #48	@ 0x30
 8007f4a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007f4c:	464d      	mov	r5, r9
 8007f4e:	e7d2      	b.n	8007ef6 <__ssvfiscanf_r+0xaa>
 8007f50:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007f54:	2a20      	cmp	r2, #32
 8007f56:	d8ef      	bhi.n	8007f38 <__ssvfiscanf_r+0xec>
 8007f58:	a101      	add	r1, pc, #4	@ (adr r1, 8007f60 <__ssvfiscanf_r+0x114>)
 8007f5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08008013 	.word	0x08008013
 8007f64:	08007f39 	.word	0x08007f39
 8007f68:	08007f39 	.word	0x08007f39
 8007f6c:	0800806d 	.word	0x0800806d
 8007f70:	08007f39 	.word	0x08007f39
 8007f74:	08007f39 	.word	0x08007f39
 8007f78:	08007f39 	.word	0x08007f39
 8007f7c:	08007f39 	.word	0x08007f39
 8007f80:	08007f39 	.word	0x08007f39
 8007f84:	08007f39 	.word	0x08007f39
 8007f88:	08007f39 	.word	0x08007f39
 8007f8c:	08008083 	.word	0x08008083
 8007f90:	08008069 	.word	0x08008069
 8007f94:	08007feb 	.word	0x08007feb
 8007f98:	08007feb 	.word	0x08007feb
 8007f9c:	08007feb 	.word	0x08007feb
 8007fa0:	08007f39 	.word	0x08007f39
 8007fa4:	08008025 	.word	0x08008025
 8007fa8:	08007f39 	.word	0x08007f39
 8007fac:	08007f39 	.word	0x08007f39
 8007fb0:	08007f39 	.word	0x08007f39
 8007fb4:	08007f39 	.word	0x08007f39
 8007fb8:	08008093 	.word	0x08008093
 8007fbc:	0800802d 	.word	0x0800802d
 8007fc0:	0800800b 	.word	0x0800800b
 8007fc4:	08007f39 	.word	0x08007f39
 8007fc8:	08007f39 	.word	0x08007f39
 8007fcc:	0800808f 	.word	0x0800808f
 8007fd0:	08007f39 	.word	0x08007f39
 8007fd4:	08008069 	.word	0x08008069
 8007fd8:	08007f39 	.word	0x08007f39
 8007fdc:	08007f39 	.word	0x08007f39
 8007fe0:	08008013 	.word	0x08008013
 8007fe4:	3b45      	subs	r3, #69	@ 0x45
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d8a6      	bhi.n	8007f38 <__ssvfiscanf_r+0xec>
 8007fea:	2305      	movs	r3, #5
 8007fec:	e021      	b.n	8008032 <__ssvfiscanf_r+0x1e6>
 8007fee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	4798      	blx	r3
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f43f af66 	beq.w	8007ec8 <__ssvfiscanf_r+0x7c>
 8007ffc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f040 808b 	bne.w	800811a <__ssvfiscanf_r+0x2ce>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008008:	e08b      	b.n	8008122 <__ssvfiscanf_r+0x2d6>
 800800a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800800c:	f042 0220 	orr.w	r2, r2, #32
 8008010:	9241      	str	r2, [sp, #260]	@ 0x104
 8008012:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008018:	9241      	str	r2, [sp, #260]	@ 0x104
 800801a:	2210      	movs	r2, #16
 800801c:	2b6e      	cmp	r3, #110	@ 0x6e
 800801e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008020:	d902      	bls.n	8008028 <__ssvfiscanf_r+0x1dc>
 8008022:	e005      	b.n	8008030 <__ssvfiscanf_r+0x1e4>
 8008024:	2300      	movs	r3, #0
 8008026:	9342      	str	r3, [sp, #264]	@ 0x108
 8008028:	2303      	movs	r3, #3
 800802a:	e002      	b.n	8008032 <__ssvfiscanf_r+0x1e6>
 800802c:	2308      	movs	r3, #8
 800802e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008030:	2304      	movs	r3, #4
 8008032:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	dd39      	ble.n	80080ae <__ssvfiscanf_r+0x262>
 800803a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800803c:	0659      	lsls	r1, r3, #25
 800803e:	d404      	bmi.n	800804a <__ssvfiscanf_r+0x1fe>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	5cba      	ldrb	r2, [r7, r2]
 8008046:	0712      	lsls	r2, r2, #28
 8008048:	d438      	bmi.n	80080bc <__ssvfiscanf_r+0x270>
 800804a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800804c:	2b02      	cmp	r3, #2
 800804e:	dc47      	bgt.n	80080e0 <__ssvfiscanf_r+0x294>
 8008050:	466b      	mov	r3, sp
 8008052:	4622      	mov	r2, r4
 8008054:	a941      	add	r1, sp, #260	@ 0x104
 8008056:	4630      	mov	r0, r6
 8008058:	f000 f90e 	bl	8008278 <_scanf_chars>
 800805c:	2801      	cmp	r0, #1
 800805e:	d064      	beq.n	800812a <__ssvfiscanf_r+0x2de>
 8008060:	2802      	cmp	r0, #2
 8008062:	f47f af18 	bne.w	8007e96 <__ssvfiscanf_r+0x4a>
 8008066:	e7c9      	b.n	8007ffc <__ssvfiscanf_r+0x1b0>
 8008068:	220a      	movs	r2, #10
 800806a:	e7d7      	b.n	800801c <__ssvfiscanf_r+0x1d0>
 800806c:	4629      	mov	r1, r5
 800806e:	4640      	mov	r0, r8
 8008070:	f000 fa50 	bl	8008514 <__sccl>
 8008074:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800807a:	9341      	str	r3, [sp, #260]	@ 0x104
 800807c:	4605      	mov	r5, r0
 800807e:	2301      	movs	r3, #1
 8008080:	e7d7      	b.n	8008032 <__ssvfiscanf_r+0x1e6>
 8008082:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008088:	9341      	str	r3, [sp, #260]	@ 0x104
 800808a:	2300      	movs	r3, #0
 800808c:	e7d1      	b.n	8008032 <__ssvfiscanf_r+0x1e6>
 800808e:	2302      	movs	r3, #2
 8008090:	e7cf      	b.n	8008032 <__ssvfiscanf_r+0x1e6>
 8008092:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008094:	06c3      	lsls	r3, r0, #27
 8008096:	f53f aefe 	bmi.w	8007e96 <__ssvfiscanf_r+0x4a>
 800809a:	9b00      	ldr	r3, [sp, #0]
 800809c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800809e:	1d19      	adds	r1, r3, #4
 80080a0:	9100      	str	r1, [sp, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	07c0      	lsls	r0, r0, #31
 80080a6:	bf4c      	ite	mi
 80080a8:	801a      	strhmi	r2, [r3, #0]
 80080aa:	601a      	strpl	r2, [r3, #0]
 80080ac:	e6f3      	b.n	8007e96 <__ssvfiscanf_r+0x4a>
 80080ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80080b0:	4621      	mov	r1, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	4798      	blx	r3
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d0bf      	beq.n	800803a <__ssvfiscanf_r+0x1ee>
 80080ba:	e79f      	b.n	8007ffc <__ssvfiscanf_r+0x1b0>
 80080bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80080be:	3201      	adds	r2, #1
 80080c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	3a01      	subs	r2, #1
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	6062      	str	r2, [r4, #4]
 80080ca:	dd02      	ble.n	80080d2 <__ssvfiscanf_r+0x286>
 80080cc:	3301      	adds	r3, #1
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	e7b6      	b.n	8008040 <__ssvfiscanf_r+0x1f4>
 80080d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80080d4:	4621      	mov	r1, r4
 80080d6:	4630      	mov	r0, r6
 80080d8:	4798      	blx	r3
 80080da:	2800      	cmp	r0, #0
 80080dc:	d0b0      	beq.n	8008040 <__ssvfiscanf_r+0x1f4>
 80080de:	e78d      	b.n	8007ffc <__ssvfiscanf_r+0x1b0>
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	dc0f      	bgt.n	8008104 <__ssvfiscanf_r+0x2b8>
 80080e4:	466b      	mov	r3, sp
 80080e6:	4622      	mov	r2, r4
 80080e8:	a941      	add	r1, sp, #260	@ 0x104
 80080ea:	4630      	mov	r0, r6
 80080ec:	f000 f91e 	bl	800832c <_scanf_i>
 80080f0:	e7b4      	b.n	800805c <__ssvfiscanf_r+0x210>
 80080f2:	bf00      	nop
 80080f4:	08007d9d 	.word	0x08007d9d
 80080f8:	08007e13 	.word	0x08007e13
 80080fc:	080092d1 	.word	0x080092d1
 8008100:	080093d1 	.word	0x080093d1
 8008104:	4b0a      	ldr	r3, [pc, #40]	@ (8008130 <__ssvfiscanf_r+0x2e4>)
 8008106:	2b00      	cmp	r3, #0
 8008108:	f43f aec5 	beq.w	8007e96 <__ssvfiscanf_r+0x4a>
 800810c:	466b      	mov	r3, sp
 800810e:	4622      	mov	r2, r4
 8008110:	a941      	add	r1, sp, #260	@ 0x104
 8008112:	4630      	mov	r0, r6
 8008114:	f3af 8000 	nop.w
 8008118:	e7a0      	b.n	800805c <__ssvfiscanf_r+0x210>
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	065b      	lsls	r3, r3, #25
 800811e:	f53f af71 	bmi.w	8008004 <__ssvfiscanf_r+0x1b8>
 8008122:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800812c:	e7f9      	b.n	8008122 <__ssvfiscanf_r+0x2d6>
 800812e:	bf00      	nop
 8008130:	00000000 	.word	0x00000000

08008134 <sbrk_aligned>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4e0f      	ldr	r6, [pc, #60]	@ (8008174 <sbrk_aligned+0x40>)
 8008138:	460c      	mov	r4, r1
 800813a:	6831      	ldr	r1, [r6, #0]
 800813c:	4605      	mov	r5, r0
 800813e:	b911      	cbnz	r1, 8008146 <sbrk_aligned+0x12>
 8008140:	f000 fcca 	bl	8008ad8 <_sbrk_r>
 8008144:	6030      	str	r0, [r6, #0]
 8008146:	4621      	mov	r1, r4
 8008148:	4628      	mov	r0, r5
 800814a:	f000 fcc5 	bl	8008ad8 <_sbrk_r>
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	d103      	bne.n	800815a <sbrk_aligned+0x26>
 8008152:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008156:	4620      	mov	r0, r4
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	1cc4      	adds	r4, r0, #3
 800815c:	f024 0403 	bic.w	r4, r4, #3
 8008160:	42a0      	cmp	r0, r4
 8008162:	d0f8      	beq.n	8008156 <sbrk_aligned+0x22>
 8008164:	1a21      	subs	r1, r4, r0
 8008166:	4628      	mov	r0, r5
 8008168:	f000 fcb6 	bl	8008ad8 <_sbrk_r>
 800816c:	3001      	adds	r0, #1
 800816e:	d1f2      	bne.n	8008156 <sbrk_aligned+0x22>
 8008170:	e7ef      	b.n	8008152 <sbrk_aligned+0x1e>
 8008172:	bf00      	nop
 8008174:	200005a4 	.word	0x200005a4

08008178 <_malloc_r>:
 8008178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800817c:	1ccd      	adds	r5, r1, #3
 800817e:	f025 0503 	bic.w	r5, r5, #3
 8008182:	3508      	adds	r5, #8
 8008184:	2d0c      	cmp	r5, #12
 8008186:	bf38      	it	cc
 8008188:	250c      	movcc	r5, #12
 800818a:	2d00      	cmp	r5, #0
 800818c:	4606      	mov	r6, r0
 800818e:	db01      	blt.n	8008194 <_malloc_r+0x1c>
 8008190:	42a9      	cmp	r1, r5
 8008192:	d904      	bls.n	800819e <_malloc_r+0x26>
 8008194:	230c      	movs	r3, #12
 8008196:	6033      	str	r3, [r6, #0]
 8008198:	2000      	movs	r0, #0
 800819a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008274 <_malloc_r+0xfc>
 80081a2:	f000 fa9d 	bl	80086e0 <__malloc_lock>
 80081a6:	f8d8 3000 	ldr.w	r3, [r8]
 80081aa:	461c      	mov	r4, r3
 80081ac:	bb44      	cbnz	r4, 8008200 <_malloc_r+0x88>
 80081ae:	4629      	mov	r1, r5
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff ffbf 	bl	8008134 <sbrk_aligned>
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	4604      	mov	r4, r0
 80081ba:	d158      	bne.n	800826e <_malloc_r+0xf6>
 80081bc:	f8d8 4000 	ldr.w	r4, [r8]
 80081c0:	4627      	mov	r7, r4
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	d143      	bne.n	800824e <_malloc_r+0xd6>
 80081c6:	2c00      	cmp	r4, #0
 80081c8:	d04b      	beq.n	8008262 <_malloc_r+0xea>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	4639      	mov	r1, r7
 80081ce:	4630      	mov	r0, r6
 80081d0:	eb04 0903 	add.w	r9, r4, r3
 80081d4:	f000 fc80 	bl	8008ad8 <_sbrk_r>
 80081d8:	4581      	cmp	r9, r0
 80081da:	d142      	bne.n	8008262 <_malloc_r+0xea>
 80081dc:	6821      	ldr	r1, [r4, #0]
 80081de:	1a6d      	subs	r5, r5, r1
 80081e0:	4629      	mov	r1, r5
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ffa6 	bl	8008134 <sbrk_aligned>
 80081e8:	3001      	adds	r0, #1
 80081ea:	d03a      	beq.n	8008262 <_malloc_r+0xea>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	442b      	add	r3, r5
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	f8d8 3000 	ldr.w	r3, [r8]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	bb62      	cbnz	r2, 8008254 <_malloc_r+0xdc>
 80081fa:	f8c8 7000 	str.w	r7, [r8]
 80081fe:	e00f      	b.n	8008220 <_malloc_r+0xa8>
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	1b52      	subs	r2, r2, r5
 8008204:	d420      	bmi.n	8008248 <_malloc_r+0xd0>
 8008206:	2a0b      	cmp	r2, #11
 8008208:	d917      	bls.n	800823a <_malloc_r+0xc2>
 800820a:	1961      	adds	r1, r4, r5
 800820c:	42a3      	cmp	r3, r4
 800820e:	6025      	str	r5, [r4, #0]
 8008210:	bf18      	it	ne
 8008212:	6059      	strne	r1, [r3, #4]
 8008214:	6863      	ldr	r3, [r4, #4]
 8008216:	bf08      	it	eq
 8008218:	f8c8 1000 	streq.w	r1, [r8]
 800821c:	5162      	str	r2, [r4, r5]
 800821e:	604b      	str	r3, [r1, #4]
 8008220:	4630      	mov	r0, r6
 8008222:	f000 fa63 	bl	80086ec <__malloc_unlock>
 8008226:	f104 000b 	add.w	r0, r4, #11
 800822a:	1d23      	adds	r3, r4, #4
 800822c:	f020 0007 	bic.w	r0, r0, #7
 8008230:	1ac2      	subs	r2, r0, r3
 8008232:	bf1c      	itt	ne
 8008234:	1a1b      	subne	r3, r3, r0
 8008236:	50a3      	strne	r3, [r4, r2]
 8008238:	e7af      	b.n	800819a <_malloc_r+0x22>
 800823a:	6862      	ldr	r2, [r4, #4]
 800823c:	42a3      	cmp	r3, r4
 800823e:	bf0c      	ite	eq
 8008240:	f8c8 2000 	streq.w	r2, [r8]
 8008244:	605a      	strne	r2, [r3, #4]
 8008246:	e7eb      	b.n	8008220 <_malloc_r+0xa8>
 8008248:	4623      	mov	r3, r4
 800824a:	6864      	ldr	r4, [r4, #4]
 800824c:	e7ae      	b.n	80081ac <_malloc_r+0x34>
 800824e:	463c      	mov	r4, r7
 8008250:	687f      	ldr	r7, [r7, #4]
 8008252:	e7b6      	b.n	80081c2 <_malloc_r+0x4a>
 8008254:	461a      	mov	r2, r3
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	42a3      	cmp	r3, r4
 800825a:	d1fb      	bne.n	8008254 <_malloc_r+0xdc>
 800825c:	2300      	movs	r3, #0
 800825e:	6053      	str	r3, [r2, #4]
 8008260:	e7de      	b.n	8008220 <_malloc_r+0xa8>
 8008262:	230c      	movs	r3, #12
 8008264:	6033      	str	r3, [r6, #0]
 8008266:	4630      	mov	r0, r6
 8008268:	f000 fa40 	bl	80086ec <__malloc_unlock>
 800826c:	e794      	b.n	8008198 <_malloc_r+0x20>
 800826e:	6005      	str	r5, [r0, #0]
 8008270:	e7d6      	b.n	8008220 <_malloc_r+0xa8>
 8008272:	bf00      	nop
 8008274:	200005a8 	.word	0x200005a8

08008278 <_scanf_chars>:
 8008278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800827c:	4615      	mov	r5, r2
 800827e:	688a      	ldr	r2, [r1, #8]
 8008280:	4680      	mov	r8, r0
 8008282:	460c      	mov	r4, r1
 8008284:	b932      	cbnz	r2, 8008294 <_scanf_chars+0x1c>
 8008286:	698a      	ldr	r2, [r1, #24]
 8008288:	2a00      	cmp	r2, #0
 800828a:	bf14      	ite	ne
 800828c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008290:	2201      	moveq	r2, #1
 8008292:	608a      	str	r2, [r1, #8]
 8008294:	6822      	ldr	r2, [r4, #0]
 8008296:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008328 <_scanf_chars+0xb0>
 800829a:	06d1      	lsls	r1, r2, #27
 800829c:	bf5f      	itttt	pl
 800829e:	681a      	ldrpl	r2, [r3, #0]
 80082a0:	1d11      	addpl	r1, r2, #4
 80082a2:	6019      	strpl	r1, [r3, #0]
 80082a4:	6816      	ldrpl	r6, [r2, #0]
 80082a6:	2700      	movs	r7, #0
 80082a8:	69a0      	ldr	r0, [r4, #24]
 80082aa:	b188      	cbz	r0, 80082d0 <_scanf_chars+0x58>
 80082ac:	2801      	cmp	r0, #1
 80082ae:	d107      	bne.n	80082c0 <_scanf_chars+0x48>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	6963      	ldr	r3, [r4, #20]
 80082b6:	5c9b      	ldrb	r3, [r3, r2]
 80082b8:	b953      	cbnz	r3, 80082d0 <_scanf_chars+0x58>
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d031      	beq.n	8008322 <_scanf_chars+0xaa>
 80082be:	e022      	b.n	8008306 <_scanf_chars+0x8e>
 80082c0:	2802      	cmp	r0, #2
 80082c2:	d120      	bne.n	8008306 <_scanf_chars+0x8e>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80082cc:	071b      	lsls	r3, r3, #28
 80082ce:	d41a      	bmi.n	8008306 <_scanf_chars+0x8e>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	06da      	lsls	r2, r3, #27
 80082d4:	bf5e      	ittt	pl
 80082d6:	682b      	ldrpl	r3, [r5, #0]
 80082d8:	781b      	ldrbpl	r3, [r3, #0]
 80082da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80082de:	682a      	ldr	r2, [r5, #0]
 80082e0:	686b      	ldr	r3, [r5, #4]
 80082e2:	3201      	adds	r2, #1
 80082e4:	602a      	str	r2, [r5, #0]
 80082e6:	68a2      	ldr	r2, [r4, #8]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	3a01      	subs	r2, #1
 80082ec:	606b      	str	r3, [r5, #4]
 80082ee:	3701      	adds	r7, #1
 80082f0:	60a2      	str	r2, [r4, #8]
 80082f2:	b142      	cbz	r2, 8008306 <_scanf_chars+0x8e>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dcd7      	bgt.n	80082a8 <_scanf_chars+0x30>
 80082f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80082fc:	4629      	mov	r1, r5
 80082fe:	4640      	mov	r0, r8
 8008300:	4798      	blx	r3
 8008302:	2800      	cmp	r0, #0
 8008304:	d0d0      	beq.n	80082a8 <_scanf_chars+0x30>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	f013 0310 	ands.w	r3, r3, #16
 800830c:	d105      	bne.n	800831a <_scanf_chars+0xa2>
 800830e:	68e2      	ldr	r2, [r4, #12]
 8008310:	3201      	adds	r2, #1
 8008312:	60e2      	str	r2, [r4, #12]
 8008314:	69a2      	ldr	r2, [r4, #24]
 8008316:	b102      	cbz	r2, 800831a <_scanf_chars+0xa2>
 8008318:	7033      	strb	r3, [r6, #0]
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	443b      	add	r3, r7
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	2000      	movs	r0, #0
 8008322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008326:	bf00      	nop
 8008328:	080092d1 	.word	0x080092d1

0800832c <_scanf_i>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	4698      	mov	r8, r3
 8008332:	4b74      	ldr	r3, [pc, #464]	@ (8008504 <_scanf_i+0x1d8>)
 8008334:	460c      	mov	r4, r1
 8008336:	4682      	mov	sl, r0
 8008338:	4616      	mov	r6, r2
 800833a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800833e:	b087      	sub	sp, #28
 8008340:	ab03      	add	r3, sp, #12
 8008342:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008346:	4b70      	ldr	r3, [pc, #448]	@ (8008508 <_scanf_i+0x1dc>)
 8008348:	69a1      	ldr	r1, [r4, #24]
 800834a:	4a70      	ldr	r2, [pc, #448]	@ (800850c <_scanf_i+0x1e0>)
 800834c:	2903      	cmp	r1, #3
 800834e:	bf08      	it	eq
 8008350:	461a      	moveq	r2, r3
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	9201      	str	r2, [sp, #4]
 8008356:	1e5a      	subs	r2, r3, #1
 8008358:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800835c:	bf88      	it	hi
 800835e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008362:	4627      	mov	r7, r4
 8008364:	bf82      	ittt	hi
 8008366:	eb03 0905 	addhi.w	r9, r3, r5
 800836a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800836e:	60a3      	strhi	r3, [r4, #8]
 8008370:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008374:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008378:	bf98      	it	ls
 800837a:	f04f 0900 	movls.w	r9, #0
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	463d      	mov	r5, r7
 8008382:	f04f 0b00 	mov.w	fp, #0
 8008386:	6831      	ldr	r1, [r6, #0]
 8008388:	ab03      	add	r3, sp, #12
 800838a:	7809      	ldrb	r1, [r1, #0]
 800838c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008390:	2202      	movs	r2, #2
 8008392:	f7f7 ff4d 	bl	8000230 <memchr>
 8008396:	b328      	cbz	r0, 80083e4 <_scanf_i+0xb8>
 8008398:	f1bb 0f01 	cmp.w	fp, #1
 800839c:	d159      	bne.n	8008452 <_scanf_i+0x126>
 800839e:	6862      	ldr	r2, [r4, #4]
 80083a0:	b92a      	cbnz	r2, 80083ae <_scanf_i+0x82>
 80083a2:	6822      	ldr	r2, [r4, #0]
 80083a4:	2108      	movs	r1, #8
 80083a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083aa:	6061      	str	r1, [r4, #4]
 80083ac:	6022      	str	r2, [r4, #0]
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80083b4:	6022      	str	r2, [r4, #0]
 80083b6:	68a2      	ldr	r2, [r4, #8]
 80083b8:	1e51      	subs	r1, r2, #1
 80083ba:	60a1      	str	r1, [r4, #8]
 80083bc:	b192      	cbz	r2, 80083e4 <_scanf_i+0xb8>
 80083be:	6832      	ldr	r2, [r6, #0]
 80083c0:	1c51      	adds	r1, r2, #1
 80083c2:	6031      	str	r1, [r6, #0]
 80083c4:	7812      	ldrb	r2, [r2, #0]
 80083c6:	f805 2b01 	strb.w	r2, [r5], #1
 80083ca:	6872      	ldr	r2, [r6, #4]
 80083cc:	3a01      	subs	r2, #1
 80083ce:	2a00      	cmp	r2, #0
 80083d0:	6072      	str	r2, [r6, #4]
 80083d2:	dc07      	bgt.n	80083e4 <_scanf_i+0xb8>
 80083d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80083d8:	4631      	mov	r1, r6
 80083da:	4650      	mov	r0, sl
 80083dc:	4790      	blx	r2
 80083de:	2800      	cmp	r0, #0
 80083e0:	f040 8085 	bne.w	80084ee <_scanf_i+0x1c2>
 80083e4:	f10b 0b01 	add.w	fp, fp, #1
 80083e8:	f1bb 0f03 	cmp.w	fp, #3
 80083ec:	d1cb      	bne.n	8008386 <_scanf_i+0x5a>
 80083ee:	6863      	ldr	r3, [r4, #4]
 80083f0:	b90b      	cbnz	r3, 80083f6 <_scanf_i+0xca>
 80083f2:	230a      	movs	r3, #10
 80083f4:	6063      	str	r3, [r4, #4]
 80083f6:	6863      	ldr	r3, [r4, #4]
 80083f8:	4945      	ldr	r1, [pc, #276]	@ (8008510 <_scanf_i+0x1e4>)
 80083fa:	6960      	ldr	r0, [r4, #20]
 80083fc:	1ac9      	subs	r1, r1, r3
 80083fe:	f000 f889 	bl	8008514 <__sccl>
 8008402:	f04f 0b00 	mov.w	fp, #0
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d03d      	beq.n	800848a <_scanf_i+0x15e>
 800840e:	6831      	ldr	r1, [r6, #0]
 8008410:	6960      	ldr	r0, [r4, #20]
 8008412:	f891 c000 	ldrb.w	ip, [r1]
 8008416:	f810 000c 	ldrb.w	r0, [r0, ip]
 800841a:	2800      	cmp	r0, #0
 800841c:	d035      	beq.n	800848a <_scanf_i+0x15e>
 800841e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008422:	d124      	bne.n	800846e <_scanf_i+0x142>
 8008424:	0510      	lsls	r0, r2, #20
 8008426:	d522      	bpl.n	800846e <_scanf_i+0x142>
 8008428:	f10b 0b01 	add.w	fp, fp, #1
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	d003      	beq.n	800843a <_scanf_i+0x10e>
 8008432:	3301      	adds	r3, #1
 8008434:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	6873      	ldr	r3, [r6, #4]
 800843c:	3b01      	subs	r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	6073      	str	r3, [r6, #4]
 8008442:	dd1b      	ble.n	800847c <_scanf_i+0x150>
 8008444:	6833      	ldr	r3, [r6, #0]
 8008446:	3301      	adds	r3, #1
 8008448:	6033      	str	r3, [r6, #0]
 800844a:	68a3      	ldr	r3, [r4, #8]
 800844c:	3b01      	subs	r3, #1
 800844e:	60a3      	str	r3, [r4, #8]
 8008450:	e7d9      	b.n	8008406 <_scanf_i+0xda>
 8008452:	f1bb 0f02 	cmp.w	fp, #2
 8008456:	d1ae      	bne.n	80083b6 <_scanf_i+0x8a>
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800845e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008462:	d1bf      	bne.n	80083e4 <_scanf_i+0xb8>
 8008464:	2110      	movs	r1, #16
 8008466:	6061      	str	r1, [r4, #4]
 8008468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800846c:	e7a2      	b.n	80083b4 <_scanf_i+0x88>
 800846e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008472:	6022      	str	r2, [r4, #0]
 8008474:	780b      	ldrb	r3, [r1, #0]
 8008476:	f805 3b01 	strb.w	r3, [r5], #1
 800847a:	e7de      	b.n	800843a <_scanf_i+0x10e>
 800847c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008480:	4631      	mov	r1, r6
 8008482:	4650      	mov	r0, sl
 8008484:	4798      	blx	r3
 8008486:	2800      	cmp	r0, #0
 8008488:	d0df      	beq.n	800844a <_scanf_i+0x11e>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	05d9      	lsls	r1, r3, #23
 800848e:	d50d      	bpl.n	80084ac <_scanf_i+0x180>
 8008490:	42bd      	cmp	r5, r7
 8008492:	d909      	bls.n	80084a8 <_scanf_i+0x17c>
 8008494:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008498:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800849c:	4632      	mov	r2, r6
 800849e:	4650      	mov	r0, sl
 80084a0:	4798      	blx	r3
 80084a2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80084a6:	464d      	mov	r5, r9
 80084a8:	42bd      	cmp	r5, r7
 80084aa:	d028      	beq.n	80084fe <_scanf_i+0x1d2>
 80084ac:	6822      	ldr	r2, [r4, #0]
 80084ae:	f012 0210 	ands.w	r2, r2, #16
 80084b2:	d113      	bne.n	80084dc <_scanf_i+0x1b0>
 80084b4:	702a      	strb	r2, [r5, #0]
 80084b6:	6863      	ldr	r3, [r4, #4]
 80084b8:	9e01      	ldr	r6, [sp, #4]
 80084ba:	4639      	mov	r1, r7
 80084bc:	4650      	mov	r0, sl
 80084be:	47b0      	blx	r6
 80084c0:	f8d8 3000 	ldr.w	r3, [r8]
 80084c4:	6821      	ldr	r1, [r4, #0]
 80084c6:	1d1a      	adds	r2, r3, #4
 80084c8:	f8c8 2000 	str.w	r2, [r8]
 80084cc:	f011 0f20 	tst.w	r1, #32
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	d00f      	beq.n	80084f4 <_scanf_i+0x1c8>
 80084d4:	6018      	str	r0, [r3, #0]
 80084d6:	68e3      	ldr	r3, [r4, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	60e3      	str	r3, [r4, #12]
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	1bed      	subs	r5, r5, r7
 80084e0:	445d      	add	r5, fp
 80084e2:	442b      	add	r3, r5
 80084e4:	6123      	str	r3, [r4, #16]
 80084e6:	2000      	movs	r0, #0
 80084e8:	b007      	add	sp, #28
 80084ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ee:	f04f 0b00 	mov.w	fp, #0
 80084f2:	e7ca      	b.n	800848a <_scanf_i+0x15e>
 80084f4:	07ca      	lsls	r2, r1, #31
 80084f6:	bf4c      	ite	mi
 80084f8:	8018      	strhmi	r0, [r3, #0]
 80084fa:	6018      	strpl	r0, [r3, #0]
 80084fc:	e7eb      	b.n	80084d6 <_scanf_i+0x1aa>
 80084fe:	2001      	movs	r0, #1
 8008500:	e7f2      	b.n	80084e8 <_scanf_i+0x1bc>
 8008502:	bf00      	nop
 8008504:	08009284 	.word	0x08009284
 8008508:	08007b01 	.word	0x08007b01
 800850c:	080088a5 	.word	0x080088a5
 8008510:	080093e5 	.word	0x080093e5

08008514 <__sccl>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	780b      	ldrb	r3, [r1, #0]
 8008518:	4604      	mov	r4, r0
 800851a:	2b5e      	cmp	r3, #94	@ 0x5e
 800851c:	bf0b      	itete	eq
 800851e:	784b      	ldrbeq	r3, [r1, #1]
 8008520:	1c4a      	addne	r2, r1, #1
 8008522:	1c8a      	addeq	r2, r1, #2
 8008524:	2100      	movne	r1, #0
 8008526:	bf08      	it	eq
 8008528:	2101      	moveq	r1, #1
 800852a:	3801      	subs	r0, #1
 800852c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008530:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008534:	42a8      	cmp	r0, r5
 8008536:	d1fb      	bne.n	8008530 <__sccl+0x1c>
 8008538:	b90b      	cbnz	r3, 800853e <__sccl+0x2a>
 800853a:	1e50      	subs	r0, r2, #1
 800853c:	bd70      	pop	{r4, r5, r6, pc}
 800853e:	f081 0101 	eor.w	r1, r1, #1
 8008542:	54e1      	strb	r1, [r4, r3]
 8008544:	4610      	mov	r0, r2
 8008546:	4602      	mov	r2, r0
 8008548:	f812 5b01 	ldrb.w	r5, [r2], #1
 800854c:	2d2d      	cmp	r5, #45	@ 0x2d
 800854e:	d005      	beq.n	800855c <__sccl+0x48>
 8008550:	2d5d      	cmp	r5, #93	@ 0x5d
 8008552:	d016      	beq.n	8008582 <__sccl+0x6e>
 8008554:	2d00      	cmp	r5, #0
 8008556:	d0f1      	beq.n	800853c <__sccl+0x28>
 8008558:	462b      	mov	r3, r5
 800855a:	e7f2      	b.n	8008542 <__sccl+0x2e>
 800855c:	7846      	ldrb	r6, [r0, #1]
 800855e:	2e5d      	cmp	r6, #93	@ 0x5d
 8008560:	d0fa      	beq.n	8008558 <__sccl+0x44>
 8008562:	42b3      	cmp	r3, r6
 8008564:	dcf8      	bgt.n	8008558 <__sccl+0x44>
 8008566:	3002      	adds	r0, #2
 8008568:	461a      	mov	r2, r3
 800856a:	3201      	adds	r2, #1
 800856c:	4296      	cmp	r6, r2
 800856e:	54a1      	strb	r1, [r4, r2]
 8008570:	dcfb      	bgt.n	800856a <__sccl+0x56>
 8008572:	1af2      	subs	r2, r6, r3
 8008574:	3a01      	subs	r2, #1
 8008576:	1c5d      	adds	r5, r3, #1
 8008578:	42b3      	cmp	r3, r6
 800857a:	bfa8      	it	ge
 800857c:	2200      	movge	r2, #0
 800857e:	18ab      	adds	r3, r5, r2
 8008580:	e7e1      	b.n	8008546 <__sccl+0x32>
 8008582:	4610      	mov	r0, r2
 8008584:	e7da      	b.n	800853c <__sccl+0x28>
	...

08008588 <__sflush_r>:
 8008588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008590:	0716      	lsls	r6, r2, #28
 8008592:	4605      	mov	r5, r0
 8008594:	460c      	mov	r4, r1
 8008596:	d454      	bmi.n	8008642 <__sflush_r+0xba>
 8008598:	684b      	ldr	r3, [r1, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	dc02      	bgt.n	80085a4 <__sflush_r+0x1c>
 800859e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dd48      	ble.n	8008636 <__sflush_r+0xae>
 80085a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	d045      	beq.n	8008636 <__sflush_r+0xae>
 80085aa:	2300      	movs	r3, #0
 80085ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085b0:	682f      	ldr	r7, [r5, #0]
 80085b2:	6a21      	ldr	r1, [r4, #32]
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	d030      	beq.n	800861a <__sflush_r+0x92>
 80085b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085ba:	89a3      	ldrh	r3, [r4, #12]
 80085bc:	0759      	lsls	r1, r3, #29
 80085be:	d505      	bpl.n	80085cc <__sflush_r+0x44>
 80085c0:	6863      	ldr	r3, [r4, #4]
 80085c2:	1ad2      	subs	r2, r2, r3
 80085c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085c6:	b10b      	cbz	r3, 80085cc <__sflush_r+0x44>
 80085c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085ca:	1ad2      	subs	r2, r2, r3
 80085cc:	2300      	movs	r3, #0
 80085ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085d0:	6a21      	ldr	r1, [r4, #32]
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b0      	blx	r6
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	d106      	bne.n	80085ea <__sflush_r+0x62>
 80085dc:	6829      	ldr	r1, [r5, #0]
 80085de:	291d      	cmp	r1, #29
 80085e0:	d82b      	bhi.n	800863a <__sflush_r+0xb2>
 80085e2:	4a2a      	ldr	r2, [pc, #168]	@ (800868c <__sflush_r+0x104>)
 80085e4:	410a      	asrs	r2, r1
 80085e6:	07d6      	lsls	r6, r2, #31
 80085e8:	d427      	bmi.n	800863a <__sflush_r+0xb2>
 80085ea:	2200      	movs	r2, #0
 80085ec:	6062      	str	r2, [r4, #4]
 80085ee:	04d9      	lsls	r1, r3, #19
 80085f0:	6922      	ldr	r2, [r4, #16]
 80085f2:	6022      	str	r2, [r4, #0]
 80085f4:	d504      	bpl.n	8008600 <__sflush_r+0x78>
 80085f6:	1c42      	adds	r2, r0, #1
 80085f8:	d101      	bne.n	80085fe <__sflush_r+0x76>
 80085fa:	682b      	ldr	r3, [r5, #0]
 80085fc:	b903      	cbnz	r3, 8008600 <__sflush_r+0x78>
 80085fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008602:	602f      	str	r7, [r5, #0]
 8008604:	b1b9      	cbz	r1, 8008636 <__sflush_r+0xae>
 8008606:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800860a:	4299      	cmp	r1, r3
 800860c:	d002      	beq.n	8008614 <__sflush_r+0x8c>
 800860e:	4628      	mov	r0, r5
 8008610:	f7ff fb7a 	bl	8007d08 <_free_r>
 8008614:	2300      	movs	r3, #0
 8008616:	6363      	str	r3, [r4, #52]	@ 0x34
 8008618:	e00d      	b.n	8008636 <__sflush_r+0xae>
 800861a:	2301      	movs	r3, #1
 800861c:	4628      	mov	r0, r5
 800861e:	47b0      	blx	r6
 8008620:	4602      	mov	r2, r0
 8008622:	1c50      	adds	r0, r2, #1
 8008624:	d1c9      	bne.n	80085ba <__sflush_r+0x32>
 8008626:	682b      	ldr	r3, [r5, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0c6      	beq.n	80085ba <__sflush_r+0x32>
 800862c:	2b1d      	cmp	r3, #29
 800862e:	d001      	beq.n	8008634 <__sflush_r+0xac>
 8008630:	2b16      	cmp	r3, #22
 8008632:	d11e      	bne.n	8008672 <__sflush_r+0xea>
 8008634:	602f      	str	r7, [r5, #0]
 8008636:	2000      	movs	r0, #0
 8008638:	e022      	b.n	8008680 <__sflush_r+0xf8>
 800863a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863e:	b21b      	sxth	r3, r3
 8008640:	e01b      	b.n	800867a <__sflush_r+0xf2>
 8008642:	690f      	ldr	r7, [r1, #16]
 8008644:	2f00      	cmp	r7, #0
 8008646:	d0f6      	beq.n	8008636 <__sflush_r+0xae>
 8008648:	0793      	lsls	r3, r2, #30
 800864a:	680e      	ldr	r6, [r1, #0]
 800864c:	bf08      	it	eq
 800864e:	694b      	ldreq	r3, [r1, #20]
 8008650:	600f      	str	r7, [r1, #0]
 8008652:	bf18      	it	ne
 8008654:	2300      	movne	r3, #0
 8008656:	eba6 0807 	sub.w	r8, r6, r7
 800865a:	608b      	str	r3, [r1, #8]
 800865c:	f1b8 0f00 	cmp.w	r8, #0
 8008660:	dde9      	ble.n	8008636 <__sflush_r+0xae>
 8008662:	6a21      	ldr	r1, [r4, #32]
 8008664:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008666:	4643      	mov	r3, r8
 8008668:	463a      	mov	r2, r7
 800866a:	4628      	mov	r0, r5
 800866c:	47b0      	blx	r6
 800866e:	2800      	cmp	r0, #0
 8008670:	dc08      	bgt.n	8008684 <__sflush_r+0xfc>
 8008672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008684:	4407      	add	r7, r0
 8008686:	eba8 0800 	sub.w	r8, r8, r0
 800868a:	e7e7      	b.n	800865c <__sflush_r+0xd4>
 800868c:	dfbffffe 	.word	0xdfbffffe

08008690 <_fflush_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	690b      	ldr	r3, [r1, #16]
 8008694:	4605      	mov	r5, r0
 8008696:	460c      	mov	r4, r1
 8008698:	b913      	cbnz	r3, 80086a0 <_fflush_r+0x10>
 800869a:	2500      	movs	r5, #0
 800869c:	4628      	mov	r0, r5
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	b118      	cbz	r0, 80086aa <_fflush_r+0x1a>
 80086a2:	6a03      	ldr	r3, [r0, #32]
 80086a4:	b90b      	cbnz	r3, 80086aa <_fflush_r+0x1a>
 80086a6:	f7ff f999 	bl	80079dc <__sinit>
 80086aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0f3      	beq.n	800869a <_fflush_r+0xa>
 80086b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086b4:	07d0      	lsls	r0, r2, #31
 80086b6:	d404      	bmi.n	80086c2 <_fflush_r+0x32>
 80086b8:	0599      	lsls	r1, r3, #22
 80086ba:	d402      	bmi.n	80086c2 <_fflush_r+0x32>
 80086bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086be:	f7ff fb20 	bl	8007d02 <__retarget_lock_acquire_recursive>
 80086c2:	4628      	mov	r0, r5
 80086c4:	4621      	mov	r1, r4
 80086c6:	f7ff ff5f 	bl	8008588 <__sflush_r>
 80086ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086cc:	07da      	lsls	r2, r3, #31
 80086ce:	4605      	mov	r5, r0
 80086d0:	d4e4      	bmi.n	800869c <_fflush_r+0xc>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	059b      	lsls	r3, r3, #22
 80086d6:	d4e1      	bmi.n	800869c <_fflush_r+0xc>
 80086d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086da:	f7ff fb13 	bl	8007d04 <__retarget_lock_release_recursive>
 80086de:	e7dd      	b.n	800869c <_fflush_r+0xc>

080086e0 <__malloc_lock>:
 80086e0:	4801      	ldr	r0, [pc, #4]	@ (80086e8 <__malloc_lock+0x8>)
 80086e2:	f7ff bb0e 	b.w	8007d02 <__retarget_lock_acquire_recursive>
 80086e6:	bf00      	nop
 80086e8:	200005a0 	.word	0x200005a0

080086ec <__malloc_unlock>:
 80086ec:	4801      	ldr	r0, [pc, #4]	@ (80086f4 <__malloc_unlock+0x8>)
 80086ee:	f7ff bb09 	b.w	8007d04 <__retarget_lock_release_recursive>
 80086f2:	bf00      	nop
 80086f4:	200005a0 	.word	0x200005a0

080086f8 <__submore>:
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fc:	460c      	mov	r4, r1
 80086fe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008704:	4299      	cmp	r1, r3
 8008706:	d11d      	bne.n	8008744 <__submore+0x4c>
 8008708:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800870c:	f7ff fd34 	bl	8008178 <_malloc_r>
 8008710:	b918      	cbnz	r0, 800871a <__submore+0x22>
 8008712:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800871a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800871e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008720:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008724:	6360      	str	r0, [r4, #52]	@ 0x34
 8008726:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800872a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800872e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008732:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008736:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800873a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800873e:	6020      	str	r0, [r4, #0]
 8008740:	2000      	movs	r0, #0
 8008742:	e7e8      	b.n	8008716 <__submore+0x1e>
 8008744:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008746:	0077      	lsls	r7, r6, #1
 8008748:	463a      	mov	r2, r7
 800874a:	f000 f80f 	bl	800876c <_realloc_r>
 800874e:	4605      	mov	r5, r0
 8008750:	2800      	cmp	r0, #0
 8008752:	d0de      	beq.n	8008712 <__submore+0x1a>
 8008754:	eb00 0806 	add.w	r8, r0, r6
 8008758:	4601      	mov	r1, r0
 800875a:	4632      	mov	r2, r6
 800875c:	4640      	mov	r0, r8
 800875e:	f000 f9cb 	bl	8008af8 <memcpy>
 8008762:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008766:	f8c4 8000 	str.w	r8, [r4]
 800876a:	e7e9      	b.n	8008740 <__submore+0x48>

0800876c <_realloc_r>:
 800876c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008770:	4680      	mov	r8, r0
 8008772:	4615      	mov	r5, r2
 8008774:	460c      	mov	r4, r1
 8008776:	b921      	cbnz	r1, 8008782 <_realloc_r+0x16>
 8008778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877c:	4611      	mov	r1, r2
 800877e:	f7ff bcfb 	b.w	8008178 <_malloc_r>
 8008782:	b92a      	cbnz	r2, 8008790 <_realloc_r+0x24>
 8008784:	f7ff fac0 	bl	8007d08 <_free_r>
 8008788:	2400      	movs	r4, #0
 800878a:	4620      	mov	r0, r4
 800878c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008790:	f000 f9c0 	bl	8008b14 <_malloc_usable_size_r>
 8008794:	4285      	cmp	r5, r0
 8008796:	4606      	mov	r6, r0
 8008798:	d802      	bhi.n	80087a0 <_realloc_r+0x34>
 800879a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800879e:	d8f4      	bhi.n	800878a <_realloc_r+0x1e>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4640      	mov	r0, r8
 80087a4:	f7ff fce8 	bl	8008178 <_malloc_r>
 80087a8:	4607      	mov	r7, r0
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d0ec      	beq.n	8008788 <_realloc_r+0x1c>
 80087ae:	42b5      	cmp	r5, r6
 80087b0:	462a      	mov	r2, r5
 80087b2:	4621      	mov	r1, r4
 80087b4:	bf28      	it	cs
 80087b6:	4632      	movcs	r2, r6
 80087b8:	f000 f99e 	bl	8008af8 <memcpy>
 80087bc:	4621      	mov	r1, r4
 80087be:	4640      	mov	r0, r8
 80087c0:	f7ff faa2 	bl	8007d08 <_free_r>
 80087c4:	463c      	mov	r4, r7
 80087c6:	e7e0      	b.n	800878a <_realloc_r+0x1e>

080087c8 <_strtoul_l.constprop.0>:
 80087c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087cc:	4e34      	ldr	r6, [pc, #208]	@ (80088a0 <_strtoul_l.constprop.0+0xd8>)
 80087ce:	4686      	mov	lr, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	4628      	mov	r0, r5
 80087d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087d8:	5d37      	ldrb	r7, [r6, r4]
 80087da:	f017 0708 	ands.w	r7, r7, #8
 80087de:	d1f8      	bne.n	80087d2 <_strtoul_l.constprop.0+0xa>
 80087e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80087e2:	d12f      	bne.n	8008844 <_strtoul_l.constprop.0+0x7c>
 80087e4:	782c      	ldrb	r4, [r5, #0]
 80087e6:	2701      	movs	r7, #1
 80087e8:	1c85      	adds	r5, r0, #2
 80087ea:	f033 0010 	bics.w	r0, r3, #16
 80087ee:	d109      	bne.n	8008804 <_strtoul_l.constprop.0+0x3c>
 80087f0:	2c30      	cmp	r4, #48	@ 0x30
 80087f2:	d12c      	bne.n	800884e <_strtoul_l.constprop.0+0x86>
 80087f4:	7828      	ldrb	r0, [r5, #0]
 80087f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80087fa:	2858      	cmp	r0, #88	@ 0x58
 80087fc:	d127      	bne.n	800884e <_strtoul_l.constprop.0+0x86>
 80087fe:	786c      	ldrb	r4, [r5, #1]
 8008800:	2310      	movs	r3, #16
 8008802:	3502      	adds	r5, #2
 8008804:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8008808:	2600      	movs	r6, #0
 800880a:	fbb8 f8f3 	udiv	r8, r8, r3
 800880e:	fb03 f908 	mul.w	r9, r3, r8
 8008812:	ea6f 0909 	mvn.w	r9, r9
 8008816:	4630      	mov	r0, r6
 8008818:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800881c:	f1bc 0f09 	cmp.w	ip, #9
 8008820:	d81c      	bhi.n	800885c <_strtoul_l.constprop.0+0x94>
 8008822:	4664      	mov	r4, ip
 8008824:	42a3      	cmp	r3, r4
 8008826:	dd2a      	ble.n	800887e <_strtoul_l.constprop.0+0xb6>
 8008828:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800882c:	d007      	beq.n	800883e <_strtoul_l.constprop.0+0x76>
 800882e:	4580      	cmp	r8, r0
 8008830:	d322      	bcc.n	8008878 <_strtoul_l.constprop.0+0xb0>
 8008832:	d101      	bne.n	8008838 <_strtoul_l.constprop.0+0x70>
 8008834:	45a1      	cmp	r9, r4
 8008836:	db1f      	blt.n	8008878 <_strtoul_l.constprop.0+0xb0>
 8008838:	fb00 4003 	mla	r0, r0, r3, r4
 800883c:	2601      	movs	r6, #1
 800883e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008842:	e7e9      	b.n	8008818 <_strtoul_l.constprop.0+0x50>
 8008844:	2c2b      	cmp	r4, #43	@ 0x2b
 8008846:	bf04      	itt	eq
 8008848:	782c      	ldrbeq	r4, [r5, #0]
 800884a:	1c85      	addeq	r5, r0, #2
 800884c:	e7cd      	b.n	80087ea <_strtoul_l.constprop.0+0x22>
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1d8      	bne.n	8008804 <_strtoul_l.constprop.0+0x3c>
 8008852:	2c30      	cmp	r4, #48	@ 0x30
 8008854:	bf0c      	ite	eq
 8008856:	2308      	moveq	r3, #8
 8008858:	230a      	movne	r3, #10
 800885a:	e7d3      	b.n	8008804 <_strtoul_l.constprop.0+0x3c>
 800885c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008860:	f1bc 0f19 	cmp.w	ip, #25
 8008864:	d801      	bhi.n	800886a <_strtoul_l.constprop.0+0xa2>
 8008866:	3c37      	subs	r4, #55	@ 0x37
 8008868:	e7dc      	b.n	8008824 <_strtoul_l.constprop.0+0x5c>
 800886a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800886e:	f1bc 0f19 	cmp.w	ip, #25
 8008872:	d804      	bhi.n	800887e <_strtoul_l.constprop.0+0xb6>
 8008874:	3c57      	subs	r4, #87	@ 0x57
 8008876:	e7d5      	b.n	8008824 <_strtoul_l.constprop.0+0x5c>
 8008878:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800887c:	e7df      	b.n	800883e <_strtoul_l.constprop.0+0x76>
 800887e:	1c73      	adds	r3, r6, #1
 8008880:	d106      	bne.n	8008890 <_strtoul_l.constprop.0+0xc8>
 8008882:	2322      	movs	r3, #34	@ 0x22
 8008884:	f8ce 3000 	str.w	r3, [lr]
 8008888:	4630      	mov	r0, r6
 800888a:	b932      	cbnz	r2, 800889a <_strtoul_l.constprop.0+0xd2>
 800888c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008890:	b107      	cbz	r7, 8008894 <_strtoul_l.constprop.0+0xcc>
 8008892:	4240      	negs	r0, r0
 8008894:	2a00      	cmp	r2, #0
 8008896:	d0f9      	beq.n	800888c <_strtoul_l.constprop.0+0xc4>
 8008898:	b106      	cbz	r6, 800889c <_strtoul_l.constprop.0+0xd4>
 800889a:	1e69      	subs	r1, r5, #1
 800889c:	6011      	str	r1, [r2, #0]
 800889e:	e7f5      	b.n	800888c <_strtoul_l.constprop.0+0xc4>
 80088a0:	080092d1 	.word	0x080092d1

080088a4 <_strtoul_r>:
 80088a4:	f7ff bf90 	b.w	80087c8 <_strtoul_l.constprop.0>

080088a8 <__swbuf_r>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	460e      	mov	r6, r1
 80088ac:	4614      	mov	r4, r2
 80088ae:	4605      	mov	r5, r0
 80088b0:	b118      	cbz	r0, 80088ba <__swbuf_r+0x12>
 80088b2:	6a03      	ldr	r3, [r0, #32]
 80088b4:	b90b      	cbnz	r3, 80088ba <__swbuf_r+0x12>
 80088b6:	f7ff f891 	bl	80079dc <__sinit>
 80088ba:	69a3      	ldr	r3, [r4, #24]
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	071a      	lsls	r2, r3, #28
 80088c2:	d501      	bpl.n	80088c8 <__swbuf_r+0x20>
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	b943      	cbnz	r3, 80088da <__swbuf_r+0x32>
 80088c8:	4621      	mov	r1, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f82a 	bl	8008924 <__swsetup_r>
 80088d0:	b118      	cbz	r0, 80088da <__swbuf_r+0x32>
 80088d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80088d6:	4638      	mov	r0, r7
 80088d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	6922      	ldr	r2, [r4, #16]
 80088de:	1a98      	subs	r0, r3, r2
 80088e0:	6963      	ldr	r3, [r4, #20]
 80088e2:	b2f6      	uxtb	r6, r6
 80088e4:	4283      	cmp	r3, r0
 80088e6:	4637      	mov	r7, r6
 80088e8:	dc05      	bgt.n	80088f6 <__swbuf_r+0x4e>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	f7ff fecf 	bl	8008690 <_fflush_r>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d1ed      	bne.n	80088d2 <__swbuf_r+0x2a>
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	60a3      	str	r3, [r4, #8]
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	6022      	str	r2, [r4, #0]
 8008902:	701e      	strb	r6, [r3, #0]
 8008904:	6962      	ldr	r2, [r4, #20]
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	429a      	cmp	r2, r3
 800890a:	d004      	beq.n	8008916 <__swbuf_r+0x6e>
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	07db      	lsls	r3, r3, #31
 8008910:	d5e1      	bpl.n	80088d6 <__swbuf_r+0x2e>
 8008912:	2e0a      	cmp	r6, #10
 8008914:	d1df      	bne.n	80088d6 <__swbuf_r+0x2e>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f7ff feb9 	bl	8008690 <_fflush_r>
 800891e:	2800      	cmp	r0, #0
 8008920:	d0d9      	beq.n	80088d6 <__swbuf_r+0x2e>
 8008922:	e7d6      	b.n	80088d2 <__swbuf_r+0x2a>

08008924 <__swsetup_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4b29      	ldr	r3, [pc, #164]	@ (80089cc <__swsetup_r+0xa8>)
 8008928:	4605      	mov	r5, r0
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	460c      	mov	r4, r1
 800892e:	b118      	cbz	r0, 8008938 <__swsetup_r+0x14>
 8008930:	6a03      	ldr	r3, [r0, #32]
 8008932:	b90b      	cbnz	r3, 8008938 <__swsetup_r+0x14>
 8008934:	f7ff f852 	bl	80079dc <__sinit>
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	0719      	lsls	r1, r3, #28
 800893e:	d422      	bmi.n	8008986 <__swsetup_r+0x62>
 8008940:	06da      	lsls	r2, r3, #27
 8008942:	d407      	bmi.n	8008954 <__swsetup_r+0x30>
 8008944:	2209      	movs	r2, #9
 8008946:	602a      	str	r2, [r5, #0]
 8008948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008952:	e033      	b.n	80089bc <__swsetup_r+0x98>
 8008954:	0758      	lsls	r0, r3, #29
 8008956:	d512      	bpl.n	800897e <__swsetup_r+0x5a>
 8008958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800895a:	b141      	cbz	r1, 800896e <__swsetup_r+0x4a>
 800895c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008960:	4299      	cmp	r1, r3
 8008962:	d002      	beq.n	800896a <__swsetup_r+0x46>
 8008964:	4628      	mov	r0, r5
 8008966:	f7ff f9cf 	bl	8007d08 <_free_r>
 800896a:	2300      	movs	r3, #0
 800896c:	6363      	str	r3, [r4, #52]	@ 0x34
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	2300      	movs	r3, #0
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	b94b      	cbnz	r3, 800899e <__swsetup_r+0x7a>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008994:	d003      	beq.n	800899e <__swsetup_r+0x7a>
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f83f 	bl	8008a1c <__smakebuf_r>
 800899e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a2:	f013 0201 	ands.w	r2, r3, #1
 80089a6:	d00a      	beq.n	80089be <__swsetup_r+0x9a>
 80089a8:	2200      	movs	r2, #0
 80089aa:	60a2      	str	r2, [r4, #8]
 80089ac:	6962      	ldr	r2, [r4, #20]
 80089ae:	4252      	negs	r2, r2
 80089b0:	61a2      	str	r2, [r4, #24]
 80089b2:	6922      	ldr	r2, [r4, #16]
 80089b4:	b942      	cbnz	r2, 80089c8 <__swsetup_r+0xa4>
 80089b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ba:	d1c5      	bne.n	8008948 <__swsetup_r+0x24>
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	0799      	lsls	r1, r3, #30
 80089c0:	bf58      	it	pl
 80089c2:	6962      	ldrpl	r2, [r4, #20]
 80089c4:	60a2      	str	r2, [r4, #8]
 80089c6:	e7f4      	b.n	80089b2 <__swsetup_r+0x8e>
 80089c8:	2000      	movs	r0, #0
 80089ca:	e7f7      	b.n	80089bc <__swsetup_r+0x98>
 80089cc:	20000090 	.word	0x20000090

080089d0 <__swhatbuf_r>:
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	460c      	mov	r4, r1
 80089d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d8:	2900      	cmp	r1, #0
 80089da:	b096      	sub	sp, #88	@ 0x58
 80089dc:	4615      	mov	r5, r2
 80089de:	461e      	mov	r6, r3
 80089e0:	da0d      	bge.n	80089fe <__swhatbuf_r+0x2e>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089e8:	f04f 0100 	mov.w	r1, #0
 80089ec:	bf14      	ite	ne
 80089ee:	2340      	movne	r3, #64	@ 0x40
 80089f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089f4:	2000      	movs	r0, #0
 80089f6:	6031      	str	r1, [r6, #0]
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	b016      	add	sp, #88	@ 0x58
 80089fc:	bd70      	pop	{r4, r5, r6, pc}
 80089fe:	466a      	mov	r2, sp
 8008a00:	f000 f848 	bl	8008a94 <_fstat_r>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	dbec      	blt.n	80089e2 <__swhatbuf_r+0x12>
 8008a08:	9901      	ldr	r1, [sp, #4]
 8008a0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a12:	4259      	negs	r1, r3
 8008a14:	4159      	adcs	r1, r3
 8008a16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a1a:	e7eb      	b.n	80089f4 <__swhatbuf_r+0x24>

08008a1c <__smakebuf_r>:
 8008a1c:	898b      	ldrh	r3, [r1, #12]
 8008a1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a20:	079d      	lsls	r5, r3, #30
 8008a22:	4606      	mov	r6, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	d507      	bpl.n	8008a38 <__smakebuf_r+0x1c>
 8008a28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	6123      	str	r3, [r4, #16]
 8008a30:	2301      	movs	r3, #1
 8008a32:	6163      	str	r3, [r4, #20]
 8008a34:	b003      	add	sp, #12
 8008a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a38:	ab01      	add	r3, sp, #4
 8008a3a:	466a      	mov	r2, sp
 8008a3c:	f7ff ffc8 	bl	80089d0 <__swhatbuf_r>
 8008a40:	9f00      	ldr	r7, [sp, #0]
 8008a42:	4605      	mov	r5, r0
 8008a44:	4639      	mov	r1, r7
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff fb96 	bl	8008178 <_malloc_r>
 8008a4c:	b948      	cbnz	r0, 8008a62 <__smakebuf_r+0x46>
 8008a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a52:	059a      	lsls	r2, r3, #22
 8008a54:	d4ee      	bmi.n	8008a34 <__smakebuf_r+0x18>
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	f043 0302 	orr.w	r3, r3, #2
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	e7e2      	b.n	8008a28 <__smakebuf_r+0xc>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	6020      	str	r0, [r4, #0]
 8008a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a72:	b15b      	cbz	r3, 8008a8c <__smakebuf_r+0x70>
 8008a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 f81d 	bl	8008ab8 <_isatty_r>
 8008a7e:	b128      	cbz	r0, 8008a8c <__smakebuf_r+0x70>
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	431d      	orrs	r5, r3
 8008a90:	81a5      	strh	r5, [r4, #12]
 8008a92:	e7cf      	b.n	8008a34 <__smakebuf_r+0x18>

08008a94 <_fstat_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4d07      	ldr	r5, [pc, #28]	@ (8008ab4 <_fstat_r+0x20>)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	602b      	str	r3, [r5, #0]
 8008aa2:	f7fa fb19 	bl	80030d8 <_fstat>
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	d102      	bne.n	8008ab0 <_fstat_r+0x1c>
 8008aaa:	682b      	ldr	r3, [r5, #0]
 8008aac:	b103      	cbz	r3, 8008ab0 <_fstat_r+0x1c>
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	bd38      	pop	{r3, r4, r5, pc}
 8008ab2:	bf00      	nop
 8008ab4:	2000059c 	.word	0x2000059c

08008ab8 <_isatty_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4d06      	ldr	r5, [pc, #24]	@ (8008ad4 <_isatty_r+0x1c>)
 8008abc:	2300      	movs	r3, #0
 8008abe:	4604      	mov	r4, r0
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	f7fa fb18 	bl	80030f8 <_isatty>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d102      	bne.n	8008ad2 <_isatty_r+0x1a>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	b103      	cbz	r3, 8008ad2 <_isatty_r+0x1a>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	2000059c 	.word	0x2000059c

08008ad8 <_sbrk_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d06      	ldr	r5, [pc, #24]	@ (8008af4 <_sbrk_r+0x1c>)
 8008adc:	2300      	movs	r3, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7fa fb20 	bl	8003128 <_sbrk>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_sbrk_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_sbrk_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	2000059c 	.word	0x2000059c

08008af8 <memcpy>:
 8008af8:	440a      	add	r2, r1
 8008afa:	4291      	cmp	r1, r2
 8008afc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008b00:	d100      	bne.n	8008b04 <memcpy+0xc>
 8008b02:	4770      	bx	lr
 8008b04:	b510      	push	{r4, lr}
 8008b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b0e:	4291      	cmp	r1, r2
 8008b10:	d1f9      	bne.n	8008b06 <memcpy+0xe>
 8008b12:	bd10      	pop	{r4, pc}

08008b14 <_malloc_usable_size_r>:
 8008b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b18:	1f18      	subs	r0, r3, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfbc      	itt	lt
 8008b1e:	580b      	ldrlt	r3, [r1, r0]
 8008b20:	18c0      	addlt	r0, r0, r3
 8008b22:	4770      	bx	lr

08008b24 <atan2>:
 8008b24:	f000 b800 	b.w	8008b28 <__ieee754_atan2>

08008b28 <__ieee754_atan2>:
 8008b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	ec57 6b11 	vmov	r6, r7, d1
 8008b30:	4273      	negs	r3, r6
 8008b32:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008cb0 <__ieee754_atan2+0x188>
 8008b36:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008b3a:	4333      	orrs	r3, r6
 8008b3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008b40:	4543      	cmp	r3, r8
 8008b42:	ec51 0b10 	vmov	r0, r1, d0
 8008b46:	4635      	mov	r5, r6
 8008b48:	d809      	bhi.n	8008b5e <__ieee754_atan2+0x36>
 8008b4a:	4244      	negs	r4, r0
 8008b4c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008b50:	4304      	orrs	r4, r0
 8008b52:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008b56:	4544      	cmp	r4, r8
 8008b58:	468e      	mov	lr, r1
 8008b5a:	4681      	mov	r9, r0
 8008b5c:	d907      	bls.n	8008b6e <__ieee754_atan2+0x46>
 8008b5e:	4632      	mov	r2, r6
 8008b60:	463b      	mov	r3, r7
 8008b62:	f7f7 fbbb 	bl	80002dc <__adddf3>
 8008b66:	ec41 0b10 	vmov	d0, r0, r1
 8008b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008b72:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008b76:	4334      	orrs	r4, r6
 8008b78:	d103      	bne.n	8008b82 <__ieee754_atan2+0x5a>
 8008b7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7e:	f000 b8c7 	b.w	8008d10 <atan>
 8008b82:	17bc      	asrs	r4, r7, #30
 8008b84:	f004 0402 	and.w	r4, r4, #2
 8008b88:	ea53 0909 	orrs.w	r9, r3, r9
 8008b8c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008b90:	d107      	bne.n	8008ba2 <__ieee754_atan2+0x7a>
 8008b92:	2c02      	cmp	r4, #2
 8008b94:	d05f      	beq.n	8008c56 <__ieee754_atan2+0x12e>
 8008b96:	2c03      	cmp	r4, #3
 8008b98:	d1e5      	bne.n	8008b66 <__ieee754_atan2+0x3e>
 8008b9a:	a141      	add	r1, pc, #260	@ (adr r1, 8008ca0 <__ieee754_atan2+0x178>)
 8008b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ba0:	e7e1      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008ba2:	4315      	orrs	r5, r2
 8008ba4:	d106      	bne.n	8008bb4 <__ieee754_atan2+0x8c>
 8008ba6:	f1be 0f00 	cmp.w	lr, #0
 8008baa:	da5f      	bge.n	8008c6c <__ieee754_atan2+0x144>
 8008bac:	a13e      	add	r1, pc, #248	@ (adr r1, 8008ca8 <__ieee754_atan2+0x180>)
 8008bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb2:	e7d8      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008bb4:	4542      	cmp	r2, r8
 8008bb6:	d10f      	bne.n	8008bd8 <__ieee754_atan2+0xb0>
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8008bbe:	d107      	bne.n	8008bd0 <__ieee754_atan2+0xa8>
 8008bc0:	2c02      	cmp	r4, #2
 8008bc2:	d84c      	bhi.n	8008c5e <__ieee754_atan2+0x136>
 8008bc4:	4b34      	ldr	r3, [pc, #208]	@ (8008c98 <__ieee754_atan2+0x170>)
 8008bc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bce:	e7ca      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008bd0:	2c02      	cmp	r4, #2
 8008bd2:	d848      	bhi.n	8008c66 <__ieee754_atan2+0x13e>
 8008bd4:	4b31      	ldr	r3, [pc, #196]	@ (8008c9c <__ieee754_atan2+0x174>)
 8008bd6:	e7f6      	b.n	8008bc6 <__ieee754_atan2+0x9e>
 8008bd8:	4543      	cmp	r3, r8
 8008bda:	d0e4      	beq.n	8008ba6 <__ieee754_atan2+0x7e>
 8008bdc:	1a9b      	subs	r3, r3, r2
 8008bde:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008be2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008be6:	da1e      	bge.n	8008c26 <__ieee754_atan2+0xfe>
 8008be8:	2f00      	cmp	r7, #0
 8008bea:	da01      	bge.n	8008bf0 <__ieee754_atan2+0xc8>
 8008bec:	323c      	adds	r2, #60	@ 0x3c
 8008bee:	db1e      	blt.n	8008c2e <__ieee754_atan2+0x106>
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	f7f7 fe52 	bl	800089c <__aeabi_ddiv>
 8008bf8:	ec41 0b10 	vmov	d0, r0, r1
 8008bfc:	f000 fa20 	bl	8009040 <fabs>
 8008c00:	f000 f886 	bl	8008d10 <atan>
 8008c04:	ec51 0b10 	vmov	r0, r1, d0
 8008c08:	2c01      	cmp	r4, #1
 8008c0a:	d013      	beq.n	8008c34 <__ieee754_atan2+0x10c>
 8008c0c:	2c02      	cmp	r4, #2
 8008c0e:	d015      	beq.n	8008c3c <__ieee754_atan2+0x114>
 8008c10:	2c00      	cmp	r4, #0
 8008c12:	d0a8      	beq.n	8008b66 <__ieee754_atan2+0x3e>
 8008c14:	a318      	add	r3, pc, #96	@ (adr r3, 8008c78 <__ieee754_atan2+0x150>)
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	f7f7 fb5d 	bl	80002d8 <__aeabi_dsub>
 8008c1e:	a318      	add	r3, pc, #96	@ (adr r3, 8008c80 <__ieee754_atan2+0x158>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	e014      	b.n	8008c50 <__ieee754_atan2+0x128>
 8008c26:	a118      	add	r1, pc, #96	@ (adr r1, 8008c88 <__ieee754_atan2+0x160>)
 8008c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c2c:	e7ec      	b.n	8008c08 <__ieee754_atan2+0xe0>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	2100      	movs	r1, #0
 8008c32:	e7e9      	b.n	8008c08 <__ieee754_atan2+0xe0>
 8008c34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c38:	4619      	mov	r1, r3
 8008c3a:	e794      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008c3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c78 <__ieee754_atan2+0x150>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 fb49 	bl	80002d8 <__aeabi_dsub>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	a10d      	add	r1, pc, #52	@ (adr r1, 8008c80 <__ieee754_atan2+0x158>)
 8008c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c50:	f7f7 fb42 	bl	80002d8 <__aeabi_dsub>
 8008c54:	e787      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008c56:	a10a      	add	r1, pc, #40	@ (adr r1, 8008c80 <__ieee754_atan2+0x158>)
 8008c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c5c:	e783      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008c5e:	a10c      	add	r1, pc, #48	@ (adr r1, 8008c90 <__ieee754_atan2+0x168>)
 8008c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c64:	e77f      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008c66:	2000      	movs	r0, #0
 8008c68:	2100      	movs	r1, #0
 8008c6a:	e77c      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008c6c:	a106      	add	r1, pc, #24	@ (adr r1, 8008c88 <__ieee754_atan2+0x160>)
 8008c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c72:	e778      	b.n	8008b66 <__ieee754_atan2+0x3e>
 8008c74:	f3af 8000 	nop.w
 8008c78:	33145c07 	.word	0x33145c07
 8008c7c:	3ca1a626 	.word	0x3ca1a626
 8008c80:	54442d18 	.word	0x54442d18
 8008c84:	400921fb 	.word	0x400921fb
 8008c88:	54442d18 	.word	0x54442d18
 8008c8c:	3ff921fb 	.word	0x3ff921fb
 8008c90:	54442d18 	.word	0x54442d18
 8008c94:	3fe921fb 	.word	0x3fe921fb
 8008c98:	08009408 	.word	0x08009408
 8008c9c:	080093f0 	.word	0x080093f0
 8008ca0:	54442d18 	.word	0x54442d18
 8008ca4:	c00921fb 	.word	0xc00921fb
 8008ca8:	54442d18 	.word	0x54442d18
 8008cac:	bff921fb 	.word	0xbff921fb
 8008cb0:	7ff00000 	.word	0x7ff00000

08008cb4 <sqrt>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	ed2d 8b02 	vpush	{d8}
 8008cba:	ec55 4b10 	vmov	r4, r5, d0
 8008cbe:	f000 f9c7 	bl	8009050 <__ieee754_sqrt>
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	eeb0 8a40 	vmov.f32	s16, s0
 8008cce:	eef0 8a60 	vmov.f32	s17, s1
 8008cd2:	f7f7 ff53 	bl	8000b7c <__aeabi_dcmpun>
 8008cd6:	b990      	cbnz	r0, 8008cfe <sqrt+0x4a>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4620      	mov	r0, r4
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f7f7 ff24 	bl	8000b2c <__aeabi_dcmplt>
 8008ce4:	b158      	cbz	r0, 8008cfe <sqrt+0x4a>
 8008ce6:	f7fe ffe1 	bl	8007cac <__errno>
 8008cea:	2321      	movs	r3, #33	@ 0x21
 8008cec:	6003      	str	r3, [r0, #0]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	f7f7 fdd1 	bl	800089c <__aeabi_ddiv>
 8008cfa:	ec41 0b18 	vmov	d8, r0, r1
 8008cfe:	eeb0 0a48 	vmov.f32	s0, s16
 8008d02:	eef0 0a68 	vmov.f32	s1, s17
 8008d06:	ecbd 8b02 	vpop	{d8}
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	0000      	movs	r0, r0
	...

08008d10 <atan>:
 8008d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	ec55 4b10 	vmov	r4, r5, d0
 8008d18:	4bbf      	ldr	r3, [pc, #764]	@ (8009018 <atan+0x308>)
 8008d1a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008d1e:	429e      	cmp	r6, r3
 8008d20:	46ab      	mov	fp, r5
 8008d22:	d918      	bls.n	8008d56 <atan+0x46>
 8008d24:	4bbd      	ldr	r3, [pc, #756]	@ (800901c <atan+0x30c>)
 8008d26:	429e      	cmp	r6, r3
 8008d28:	d801      	bhi.n	8008d2e <atan+0x1e>
 8008d2a:	d109      	bne.n	8008d40 <atan+0x30>
 8008d2c:	b144      	cbz	r4, 8008d40 <atan+0x30>
 8008d2e:	4622      	mov	r2, r4
 8008d30:	462b      	mov	r3, r5
 8008d32:	4620      	mov	r0, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	f7f7 fad1 	bl	80002dc <__adddf3>
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	e006      	b.n	8008d4e <atan+0x3e>
 8008d40:	f1bb 0f00 	cmp.w	fp, #0
 8008d44:	f340 812b 	ble.w	8008f9e <atan+0x28e>
 8008d48:	a597      	add	r5, pc, #604	@ (adr r5, 8008fa8 <atan+0x298>)
 8008d4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d4e:	ec45 4b10 	vmov	d0, r4, r5
 8008d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d56:	4bb2      	ldr	r3, [pc, #712]	@ (8009020 <atan+0x310>)
 8008d58:	429e      	cmp	r6, r3
 8008d5a:	d813      	bhi.n	8008d84 <atan+0x74>
 8008d5c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008d60:	429e      	cmp	r6, r3
 8008d62:	d80c      	bhi.n	8008d7e <atan+0x6e>
 8008d64:	a392      	add	r3, pc, #584	@ (adr r3, 8008fb0 <atan+0x2a0>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	f7f7 fab5 	bl	80002dc <__adddf3>
 8008d72:	4bac      	ldr	r3, [pc, #688]	@ (8009024 <atan+0x314>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	f7f7 fef7 	bl	8000b68 <__aeabi_dcmpgt>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d1e7      	bne.n	8008d4e <atan+0x3e>
 8008d7e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008d82:	e029      	b.n	8008dd8 <atan+0xc8>
 8008d84:	f000 f95c 	bl	8009040 <fabs>
 8008d88:	4ba7      	ldr	r3, [pc, #668]	@ (8009028 <atan+0x318>)
 8008d8a:	429e      	cmp	r6, r3
 8008d8c:	ec55 4b10 	vmov	r4, r5, d0
 8008d90:	f200 80bc 	bhi.w	8008f0c <atan+0x1fc>
 8008d94:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008d98:	429e      	cmp	r6, r3
 8008d9a:	f200 809e 	bhi.w	8008eda <atan+0x1ca>
 8008d9e:	4622      	mov	r2, r4
 8008da0:	462b      	mov	r3, r5
 8008da2:	4620      	mov	r0, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	f7f7 fa99 	bl	80002dc <__adddf3>
 8008daa:	4b9e      	ldr	r3, [pc, #632]	@ (8009024 <atan+0x314>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	f7f7 fa93 	bl	80002d8 <__aeabi_dsub>
 8008db2:	2200      	movs	r2, #0
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	f7f7 fa8c 	bl	80002dc <__adddf3>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fd66 	bl	800089c <__aeabi_ddiv>
 8008dd0:	f04f 0a00 	mov.w	sl, #0
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	4622      	mov	r2, r4
 8008dda:	462b      	mov	r3, r5
 8008ddc:	4620      	mov	r0, r4
 8008dde:	4629      	mov	r1, r5
 8008de0:	f7f7 fc32 	bl	8000648 <__aeabi_dmul>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4680      	mov	r8, r0
 8008dea:	4689      	mov	r9, r1
 8008dec:	f7f7 fc2c 	bl	8000648 <__aeabi_dmul>
 8008df0:	a371      	add	r3, pc, #452	@ (adr r3, 8008fb8 <atan+0x2a8>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	f7f7 fc25 	bl	8000648 <__aeabi_dmul>
 8008dfe:	a370      	add	r3, pc, #448	@ (adr r3, 8008fc0 <atan+0x2b0>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f7f7 fa6a 	bl	80002dc <__adddf3>
 8008e08:	4632      	mov	r2, r6
 8008e0a:	463b      	mov	r3, r7
 8008e0c:	f7f7 fc1c 	bl	8000648 <__aeabi_dmul>
 8008e10:	a36d      	add	r3, pc, #436	@ (adr r3, 8008fc8 <atan+0x2b8>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fa61 	bl	80002dc <__adddf3>
 8008e1a:	4632      	mov	r2, r6
 8008e1c:	463b      	mov	r3, r7
 8008e1e:	f7f7 fc13 	bl	8000648 <__aeabi_dmul>
 8008e22:	a36b      	add	r3, pc, #428	@ (adr r3, 8008fd0 <atan+0x2c0>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f7f7 fa58 	bl	80002dc <__adddf3>
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	463b      	mov	r3, r7
 8008e30:	f7f7 fc0a 	bl	8000648 <__aeabi_dmul>
 8008e34:	a368      	add	r3, pc, #416	@ (adr r3, 8008fd8 <atan+0x2c8>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f7f7 fa4f 	bl	80002dc <__adddf3>
 8008e3e:	4632      	mov	r2, r6
 8008e40:	463b      	mov	r3, r7
 8008e42:	f7f7 fc01 	bl	8000648 <__aeabi_dmul>
 8008e46:	a366      	add	r3, pc, #408	@ (adr r3, 8008fe0 <atan+0x2d0>)
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 fa46 	bl	80002dc <__adddf3>
 8008e50:	4642      	mov	r2, r8
 8008e52:	464b      	mov	r3, r9
 8008e54:	f7f7 fbf8 	bl	8000648 <__aeabi_dmul>
 8008e58:	a363      	add	r3, pc, #396	@ (adr r3, 8008fe8 <atan+0x2d8>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	4680      	mov	r8, r0
 8008e60:	4689      	mov	r9, r1
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 fbef 	bl	8000648 <__aeabi_dmul>
 8008e6a:	a361      	add	r3, pc, #388	@ (adr r3, 8008ff0 <atan+0x2e0>)
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	f7f7 fa32 	bl	80002d8 <__aeabi_dsub>
 8008e74:	4632      	mov	r2, r6
 8008e76:	463b      	mov	r3, r7
 8008e78:	f7f7 fbe6 	bl	8000648 <__aeabi_dmul>
 8008e7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008ff8 <atan+0x2e8>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fa29 	bl	80002d8 <__aeabi_dsub>
 8008e86:	4632      	mov	r2, r6
 8008e88:	463b      	mov	r3, r7
 8008e8a:	f7f7 fbdd 	bl	8000648 <__aeabi_dmul>
 8008e8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009000 <atan+0x2f0>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7f7 fa20 	bl	80002d8 <__aeabi_dsub>
 8008e98:	4632      	mov	r2, r6
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	f7f7 fbd4 	bl	8000648 <__aeabi_dmul>
 8008ea0:	a359      	add	r3, pc, #356	@ (adr r3, 8009008 <atan+0x2f8>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 fa17 	bl	80002d8 <__aeabi_dsub>
 8008eaa:	4632      	mov	r2, r6
 8008eac:	463b      	mov	r3, r7
 8008eae:	f7f7 fbcb 	bl	8000648 <__aeabi_dmul>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 fa0f 	bl	80002dc <__adddf3>
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	f7f7 fbc1 	bl	8000648 <__aeabi_dmul>
 8008ec6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	d148      	bne.n	8008f62 <atan+0x252>
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	f7f7 fa00 	bl	80002d8 <__aeabi_dsub>
 8008ed8:	e72f      	b.n	8008d3a <atan+0x2a>
 8008eda:	4b52      	ldr	r3, [pc, #328]	@ (8009024 <atan+0x314>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7f7 f9f9 	bl	80002d8 <__aeabi_dsub>
 8008ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8009024 <atan+0x314>)
 8008ee8:	4606      	mov	r6, r0
 8008eea:	460f      	mov	r7, r1
 8008eec:	2200      	movs	r2, #0
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 f9f3 	bl	80002dc <__adddf3>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4630      	mov	r0, r6
 8008efc:	4639      	mov	r1, r7
 8008efe:	f7f7 fccd 	bl	800089c <__aeabi_ddiv>
 8008f02:	f04f 0a01 	mov.w	sl, #1
 8008f06:	4604      	mov	r4, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	e765      	b.n	8008dd8 <atan+0xc8>
 8008f0c:	4b47      	ldr	r3, [pc, #284]	@ (800902c <atan+0x31c>)
 8008f0e:	429e      	cmp	r6, r3
 8008f10:	d21c      	bcs.n	8008f4c <atan+0x23c>
 8008f12:	4b47      	ldr	r3, [pc, #284]	@ (8009030 <atan+0x320>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7f7 f9dd 	bl	80002d8 <__aeabi_dsub>
 8008f1e:	4b44      	ldr	r3, [pc, #272]	@ (8009030 <atan+0x320>)
 8008f20:	4606      	mov	r6, r0
 8008f22:	460f      	mov	r7, r1
 8008f24:	2200      	movs	r2, #0
 8008f26:	4620      	mov	r0, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f7 fb8d 	bl	8000648 <__aeabi_dmul>
 8008f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8009024 <atan+0x314>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	f7f7 f9d3 	bl	80002dc <__adddf3>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	f7f7 fcad 	bl	800089c <__aeabi_ddiv>
 8008f42:	f04f 0a02 	mov.w	sl, #2
 8008f46:	4604      	mov	r4, r0
 8008f48:	460d      	mov	r5, r1
 8008f4a:	e745      	b.n	8008dd8 <atan+0xc8>
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	462b      	mov	r3, r5
 8008f50:	4938      	ldr	r1, [pc, #224]	@ (8009034 <atan+0x324>)
 8008f52:	2000      	movs	r0, #0
 8008f54:	f7f7 fca2 	bl	800089c <__aeabi_ddiv>
 8008f58:	f04f 0a03 	mov.w	sl, #3
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	460d      	mov	r5, r1
 8008f60:	e73a      	b.n	8008dd8 <atan+0xc8>
 8008f62:	4b35      	ldr	r3, [pc, #212]	@ (8009038 <atan+0x328>)
 8008f64:	4e35      	ldr	r6, [pc, #212]	@ (800903c <atan+0x32c>)
 8008f66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f7f7 f9b3 	bl	80002d8 <__aeabi_dsub>
 8008f72:	4622      	mov	r2, r4
 8008f74:	462b      	mov	r3, r5
 8008f76:	f7f7 f9af 	bl	80002d8 <__aeabi_dsub>
 8008f7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008f86:	f7f7 f9a7 	bl	80002d8 <__aeabi_dsub>
 8008f8a:	f1bb 0f00 	cmp.w	fp, #0
 8008f8e:	4604      	mov	r4, r0
 8008f90:	460d      	mov	r5, r1
 8008f92:	f6bf aedc 	bge.w	8008d4e <atan+0x3e>
 8008f96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f9a:	461d      	mov	r5, r3
 8008f9c:	e6d7      	b.n	8008d4e <atan+0x3e>
 8008f9e:	a51c      	add	r5, pc, #112	@ (adr r5, 8009010 <atan+0x300>)
 8008fa0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008fa4:	e6d3      	b.n	8008d4e <atan+0x3e>
 8008fa6:	bf00      	nop
 8008fa8:	54442d18 	.word	0x54442d18
 8008fac:	3ff921fb 	.word	0x3ff921fb
 8008fb0:	8800759c 	.word	0x8800759c
 8008fb4:	7e37e43c 	.word	0x7e37e43c
 8008fb8:	e322da11 	.word	0xe322da11
 8008fbc:	3f90ad3a 	.word	0x3f90ad3a
 8008fc0:	24760deb 	.word	0x24760deb
 8008fc4:	3fa97b4b 	.word	0x3fa97b4b
 8008fc8:	a0d03d51 	.word	0xa0d03d51
 8008fcc:	3fb10d66 	.word	0x3fb10d66
 8008fd0:	c54c206e 	.word	0xc54c206e
 8008fd4:	3fb745cd 	.word	0x3fb745cd
 8008fd8:	920083ff 	.word	0x920083ff
 8008fdc:	3fc24924 	.word	0x3fc24924
 8008fe0:	5555550d 	.word	0x5555550d
 8008fe4:	3fd55555 	.word	0x3fd55555
 8008fe8:	2c6a6c2f 	.word	0x2c6a6c2f
 8008fec:	bfa2b444 	.word	0xbfa2b444
 8008ff0:	52defd9a 	.word	0x52defd9a
 8008ff4:	3fadde2d 	.word	0x3fadde2d
 8008ff8:	af749a6d 	.word	0xaf749a6d
 8008ffc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009000:	fe231671 	.word	0xfe231671
 8009004:	3fbc71c6 	.word	0x3fbc71c6
 8009008:	9998ebc4 	.word	0x9998ebc4
 800900c:	3fc99999 	.word	0x3fc99999
 8009010:	54442d18 	.word	0x54442d18
 8009014:	bff921fb 	.word	0xbff921fb
 8009018:	440fffff 	.word	0x440fffff
 800901c:	7ff00000 	.word	0x7ff00000
 8009020:	3fdbffff 	.word	0x3fdbffff
 8009024:	3ff00000 	.word	0x3ff00000
 8009028:	3ff2ffff 	.word	0x3ff2ffff
 800902c:	40038000 	.word	0x40038000
 8009030:	3ff80000 	.word	0x3ff80000
 8009034:	bff00000 	.word	0xbff00000
 8009038:	08009420 	.word	0x08009420
 800903c:	08009440 	.word	0x08009440

08009040 <fabs>:
 8009040:	ec51 0b10 	vmov	r0, r1, d0
 8009044:	4602      	mov	r2, r0
 8009046:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800904a:	ec43 2b10 	vmov	d0, r2, r3
 800904e:	4770      	bx	lr

08009050 <__ieee754_sqrt>:
 8009050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	4a68      	ldr	r2, [pc, #416]	@ (80091f8 <__ieee754_sqrt+0x1a8>)
 8009056:	ec55 4b10 	vmov	r4, r5, d0
 800905a:	43aa      	bics	r2, r5
 800905c:	462b      	mov	r3, r5
 800905e:	4621      	mov	r1, r4
 8009060:	d110      	bne.n	8009084 <__ieee754_sqrt+0x34>
 8009062:	4622      	mov	r2, r4
 8009064:	4620      	mov	r0, r4
 8009066:	4629      	mov	r1, r5
 8009068:	f7f7 faee 	bl	8000648 <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4620      	mov	r0, r4
 8009072:	4629      	mov	r1, r5
 8009074:	f7f7 f932 	bl	80002dc <__adddf3>
 8009078:	4604      	mov	r4, r0
 800907a:	460d      	mov	r5, r1
 800907c:	ec45 4b10 	vmov	d0, r4, r5
 8009080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	2d00      	cmp	r5, #0
 8009086:	dc0e      	bgt.n	80090a6 <__ieee754_sqrt+0x56>
 8009088:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800908c:	4322      	orrs	r2, r4
 800908e:	d0f5      	beq.n	800907c <__ieee754_sqrt+0x2c>
 8009090:	b19d      	cbz	r5, 80090ba <__ieee754_sqrt+0x6a>
 8009092:	4622      	mov	r2, r4
 8009094:	4620      	mov	r0, r4
 8009096:	4629      	mov	r1, r5
 8009098:	f7f7 f91e 	bl	80002d8 <__aeabi_dsub>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	f7f7 fbfc 	bl	800089c <__aeabi_ddiv>
 80090a4:	e7e8      	b.n	8009078 <__ieee754_sqrt+0x28>
 80090a6:	152a      	asrs	r2, r5, #20
 80090a8:	d115      	bne.n	80090d6 <__ieee754_sqrt+0x86>
 80090aa:	2000      	movs	r0, #0
 80090ac:	e009      	b.n	80090c2 <__ieee754_sqrt+0x72>
 80090ae:	0acb      	lsrs	r3, r1, #11
 80090b0:	3a15      	subs	r2, #21
 80090b2:	0549      	lsls	r1, r1, #21
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0fa      	beq.n	80090ae <__ieee754_sqrt+0x5e>
 80090b8:	e7f7      	b.n	80090aa <__ieee754_sqrt+0x5a>
 80090ba:	462a      	mov	r2, r5
 80090bc:	e7fa      	b.n	80090b4 <__ieee754_sqrt+0x64>
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	3001      	adds	r0, #1
 80090c2:	02dc      	lsls	r4, r3, #11
 80090c4:	d5fb      	bpl.n	80090be <__ieee754_sqrt+0x6e>
 80090c6:	1e44      	subs	r4, r0, #1
 80090c8:	1b12      	subs	r2, r2, r4
 80090ca:	f1c0 0420 	rsb	r4, r0, #32
 80090ce:	fa21 f404 	lsr.w	r4, r1, r4
 80090d2:	4323      	orrs	r3, r4
 80090d4:	4081      	lsls	r1, r0
 80090d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80090de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090e2:	07d2      	lsls	r2, r2, #31
 80090e4:	bf5c      	itt	pl
 80090e6:	005b      	lslpl	r3, r3, #1
 80090e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80090ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090f0:	bf58      	it	pl
 80090f2:	0049      	lslpl	r1, r1, #1
 80090f4:	2600      	movs	r6, #0
 80090f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80090fa:	106d      	asrs	r5, r5, #1
 80090fc:	0049      	lsls	r1, r1, #1
 80090fe:	2016      	movs	r0, #22
 8009100:	4632      	mov	r2, r6
 8009102:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009106:	1917      	adds	r7, r2, r4
 8009108:	429f      	cmp	r7, r3
 800910a:	bfde      	ittt	le
 800910c:	193a      	addle	r2, r7, r4
 800910e:	1bdb      	suble	r3, r3, r7
 8009110:	1936      	addle	r6, r6, r4
 8009112:	0fcf      	lsrs	r7, r1, #31
 8009114:	3801      	subs	r0, #1
 8009116:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800911a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800911e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009122:	d1f0      	bne.n	8009106 <__ieee754_sqrt+0xb6>
 8009124:	4604      	mov	r4, r0
 8009126:	2720      	movs	r7, #32
 8009128:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800912c:	429a      	cmp	r2, r3
 800912e:	eb00 0e0c 	add.w	lr, r0, ip
 8009132:	db02      	blt.n	800913a <__ieee754_sqrt+0xea>
 8009134:	d113      	bne.n	800915e <__ieee754_sqrt+0x10e>
 8009136:	458e      	cmp	lr, r1
 8009138:	d811      	bhi.n	800915e <__ieee754_sqrt+0x10e>
 800913a:	f1be 0f00 	cmp.w	lr, #0
 800913e:	eb0e 000c 	add.w	r0, lr, ip
 8009142:	da42      	bge.n	80091ca <__ieee754_sqrt+0x17a>
 8009144:	2800      	cmp	r0, #0
 8009146:	db40      	blt.n	80091ca <__ieee754_sqrt+0x17a>
 8009148:	f102 0801 	add.w	r8, r2, #1
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	458e      	cmp	lr, r1
 8009150:	bf88      	it	hi
 8009152:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8009156:	eba1 010e 	sub.w	r1, r1, lr
 800915a:	4464      	add	r4, ip
 800915c:	4642      	mov	r2, r8
 800915e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009162:	3f01      	subs	r7, #1
 8009164:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009168:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800916c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009170:	d1dc      	bne.n	800912c <__ieee754_sqrt+0xdc>
 8009172:	4319      	orrs	r1, r3
 8009174:	d01b      	beq.n	80091ae <__ieee754_sqrt+0x15e>
 8009176:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80091fc <__ieee754_sqrt+0x1ac>
 800917a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009200 <__ieee754_sqrt+0x1b0>
 800917e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009182:	e9db 2300 	ldrd	r2, r3, [fp]
 8009186:	f7f7 f8a7 	bl	80002d8 <__aeabi_dsub>
 800918a:	e9da 8900 	ldrd	r8, r9, [sl]
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4640      	mov	r0, r8
 8009194:	4649      	mov	r1, r9
 8009196:	f7f7 fcd3 	bl	8000b40 <__aeabi_dcmple>
 800919a:	b140      	cbz	r0, 80091ae <__ieee754_sqrt+0x15e>
 800919c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80091a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80091a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80091a8:	d111      	bne.n	80091ce <__ieee754_sqrt+0x17e>
 80091aa:	3601      	adds	r6, #1
 80091ac:	463c      	mov	r4, r7
 80091ae:	1072      	asrs	r2, r6, #1
 80091b0:	0863      	lsrs	r3, r4, #1
 80091b2:	07f1      	lsls	r1, r6, #31
 80091b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80091b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80091bc:	bf48      	it	mi
 80091be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80091c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80091c6:	4618      	mov	r0, r3
 80091c8:	e756      	b.n	8009078 <__ieee754_sqrt+0x28>
 80091ca:	4690      	mov	r8, r2
 80091cc:	e7be      	b.n	800914c <__ieee754_sqrt+0xfc>
 80091ce:	f7f7 f885 	bl	80002dc <__adddf3>
 80091d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4640      	mov	r0, r8
 80091dc:	4649      	mov	r1, r9
 80091de:	f7f7 fca5 	bl	8000b2c <__aeabi_dcmplt>
 80091e2:	b120      	cbz	r0, 80091ee <__ieee754_sqrt+0x19e>
 80091e4:	1ca0      	adds	r0, r4, #2
 80091e6:	bf08      	it	eq
 80091e8:	3601      	addeq	r6, #1
 80091ea:	3402      	adds	r4, #2
 80091ec:	e7df      	b.n	80091ae <__ieee754_sqrt+0x15e>
 80091ee:	1c63      	adds	r3, r4, #1
 80091f0:	f023 0401 	bic.w	r4, r3, #1
 80091f4:	e7db      	b.n	80091ae <__ieee754_sqrt+0x15e>
 80091f6:	bf00      	nop
 80091f8:	7ff00000 	.word	0x7ff00000
 80091fc:	200000e8 	.word	0x200000e8
 8009200:	200000e0 	.word	0x200000e0

08009204 <_init>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr

08009210 <_fini>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	bf00      	nop
 8009214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009216:	bc08      	pop	{r3}
 8009218:	469e      	mov	lr, r3
 800921a:	4770      	bx	lr
