
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004558  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004730  08004730  00005730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f0  080047f0  00006024  2**0
                  CONTENTS
  4 .ARM          00000008  080047f0  080047f0  000057f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f8  080047f8  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000057f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047fc  080047fc  000057fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004800  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000024  08004824  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08004824  000060d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7e8  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001faf  00000000  00000000  0001283c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  000147f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b8  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9a0  00000000  00000000  000159d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d80e  00000000  00000000  00035370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c69d6  00000000  00000000  00042b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109554  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  00109598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0010c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004718 	.word	0x08004718

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08004718 	.word	0x08004718

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a29      	ldr	r2, [pc, #164]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a23      	ldr	r2, [pc, #140]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0320 	and.w	r3, r3, #32
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	4a17      	ldr	r2, [pc, #92]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_GPIO_Init+0xc0>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000f28:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <MX_GPIO_Init+0xc4>)
 8000f2a:	f001 fa1b 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000f2e:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_GPIO_Init+0xc4>)
 8000f48:	f001 f88a 	bl	8002060 <HAL_GPIO_Init>

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	@ 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48001000 	.word	0x48001000

08000f5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f000 ff06 	bl	8001d72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f8b1 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f7ff ff93 	bl	8000e94 <MX_GPIO_Init>
  MX_UART5_Init();
 8000f6e:	f000 fe13 	bl	8001b98 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f78:	4851      	ldr	r0, [pc, #324]	@ (80010c0 <main+0x164>)
 8000f7a:	f001 f9f3 	bl	8002364 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f84:	484e      	ldr	r0, [pc, #312]	@ (80010c0 <main+0x164>)
 8000f86:	f001 f9ed 	bl	8002364 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f90:	484b      	ldr	r0, [pc, #300]	@ (80010c0 <main+0x164>)
 8000f92:	f001 f9e7 	bl	8002364 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2180      	movs	r1, #128	@ 0x80
 8000f9a:	4849      	ldr	r0, [pc, #292]	@ (80010c0 <main+0x164>)
 8000f9c:	f001 f9e2 	bl	8002364 <HAL_GPIO_WritePin>

  servo_reset_all();
 8000fa0:	f000 fd76 	bl	8001a90 <servo_reset_all>
  HAL_Delay(2000);
 8000fa4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fa8:	f000 ff54 	bl	8001e54 <HAL_Delay>
  BaseVelocity base_vel = {-1, 1, 0};
 8000fac:	4a45      	ldr	r2, [pc, #276]	@ (80010c4 <main+0x168>)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  rotate_motor(base_vel);
 8000fb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000fba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc2:	eeb0 0a66 	vmov.f32	s0, s13
 8000fc6:	eef0 0a47 	vmov.f32	s1, s14
 8000fca:	eeb0 1a67 	vmov.f32	s2, s15
 8000fce:	f000 f8cf 	bl	8001170 <rotate_motor>
  HAL_Delay(2000);
 8000fd2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fd6:	f000 ff3d 	bl	8001e54 <HAL_Delay>
  base_vel.x_vel = 1;
 8000fda:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fde:	607b      	str	r3, [r7, #4]
  base_vel.y_vel = 1;
 8000fe0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fe4:	60bb      	str	r3, [r7, #8]
  base_vel.z_vel = 0;
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  rotate_motor(base_vel);
 8000fec:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ff0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff8:	eeb0 0a66 	vmov.f32	s0, s13
 8000ffc:	eef0 0a47 	vmov.f32	s1, s14
 8001000:	eeb0 1a67 	vmov.f32	s2, s15
 8001004:	f000 f8b4 	bl	8001170 <rotate_motor>
  HAL_Delay(2000);
 8001008:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800100c:	f000 ff22 	bl	8001e54 <HAL_Delay>
  base_vel.x_vel = 1;
 8001010:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001014:	607b      	str	r3, [r7, #4]
  base_vel.y_vel = -1;
 8001016:	4b2c      	ldr	r3, [pc, #176]	@ (80010c8 <main+0x16c>)
 8001018:	60bb      	str	r3, [r7, #8]
  base_vel.z_vel = 0;
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  rotate_motor(base_vel);
 8001020:	edd7 6a01 	vldr	s13, [r7, #4]
 8001024:	ed97 7a02 	vldr	s14, [r7, #8]
 8001028:	edd7 7a03 	vldr	s15, [r7, #12]
 800102c:	eeb0 0a66 	vmov.f32	s0, s13
 8001030:	eef0 0a47 	vmov.f32	s1, s14
 8001034:	eeb0 1a67 	vmov.f32	s2, s15
 8001038:	f000 f89a 	bl	8001170 <rotate_motor>
  HAL_Delay(2000);
 800103c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001040:	f000 ff08 	bl	8001e54 <HAL_Delay>
  base_vel.x_vel = -1;
 8001044:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <main+0x16c>)
 8001046:	607b      	str	r3, [r7, #4]
  base_vel.y_vel = -1;
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <main+0x16c>)
 800104a:	60bb      	str	r3, [r7, #8]
  base_vel.z_vel = 0;
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  rotate_motor(base_vel);
 8001052:	edd7 6a01 	vldr	s13, [r7, #4]
 8001056:	ed97 7a02 	vldr	s14, [r7, #8]
 800105a:	edd7 7a03 	vldr	s15, [r7, #12]
 800105e:	eeb0 0a66 	vmov.f32	s0, s13
 8001062:	eef0 0a47 	vmov.f32	s1, s14
 8001066:	eeb0 1a67 	vmov.f32	s2, s15
 800106a:	f000 f881 	bl	8001170 <rotate_motor>
  HAL_Delay(2000);
 800106e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001072:	f000 feef 	bl	8001e54 <HAL_Delay>
  base_vel.x_vel = 0;
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  base_vel.y_vel = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  base_vel.z_vel = 1;
 8001082:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001086:	60fb      	str	r3, [r7, #12]
  rotate_motor(base_vel);
 8001088:	edd7 6a01 	vldr	s13, [r7, #4]
 800108c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001090:	edd7 7a03 	vldr	s15, [r7, #12]
 8001094:	eeb0 0a66 	vmov.f32	s0, s13
 8001098:	eef0 0a47 	vmov.f32	s1, s14
 800109c:	eeb0 1a67 	vmov.f32	s2, s15
 80010a0:	f000 f866 	bl	8001170 <rotate_motor>
  HAL_Delay(2000);
 80010a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010a8:	f000 fed4 	bl	8001e54 <HAL_Delay>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2180      	movs	r1, #128	@ 0x80
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <main+0x164>)
 80010b2:	f001 f957 	bl	8002364 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
    // test_servo_pos[0] = servo_get_current_pos(&(servos[0]));
    // test_servo_pos[1] = servo_get_current_pos(&(servos[1]));
    // test_servo_pos[2] = servo_get_current_pos(&(servos[2]));
    // test_servo_pos[3] = servo_get_current_pos(&(servos[3]));
    HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 fecc 	bl	8001e54 <HAL_Delay>
 80010bc:	e7fb      	b.n	80010b6 <main+0x15a>
 80010be:	bf00      	nop
 80010c0:	48001000 	.word	0x48001000
 80010c4:	08004730 	.word	0x08004730
 80010c8:	bf800000 	.word	0xbf800000

080010cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	@ 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	2238      	movs	r2, #56	@ 0x38
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 f886 	bl	80041ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f001 f950 	bl	8002394 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	2303      	movs	r3, #3
 8001104:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800110a:	2355      	movs	r3, #85	@ 0x55
 800110c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f9ec 	bl	80024fc <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x62>
    Error_Handler();
 800112a:	f000 f818 	bl	800115e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800112e:	230f      	movs	r3, #15
 8001130:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2303      	movs	r3, #3
 8001134:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2104      	movs	r1, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fcea 	bl	8002b20 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x8a>
    Error_Handler();
 8001152:	f000 f804 	bl	800115e <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	@ 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001166:	bf00      	nop
 8001168:	e7fd      	b.n	8001166 <Error_Handler+0x8>
 800116a:	0000      	movs	r0, r0
 800116c:	0000      	movs	r0, r0
	...

08001170 <rotate_motor>:
  wheel_control(REAR_LEFT, pwm.rear_left);
  wheel_control(REAR_RIGHT, pwm.rear_right);
}

// TODO: need to test
void rotate_motor(BaseVelocity base_vel) {
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	eef0 6a40 	vmov.f32	s13, s0
 800117a:	eeb0 7a60 	vmov.f32	s14, s1
 800117e:	eef0 7a41 	vmov.f32	s15, s2
 8001182:	edc7 6a01 	vstr	s13, [r7, #4]
 8001186:	ed87 7a02 	vstr	s14, [r7, #8]
 800118a:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 800118e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001192:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119a:	d01b      	beq.n	80011d4 <rotate_motor+0x64>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(45));
 800119c:	2287      	movs	r2, #135	@ 0x87
 800119e:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 80011a2:	48af      	ldr	r0, [pc, #700]	@ (8001460 <rotate_motor+0x2f0>)
 80011a4:	f000 fc40 	bl	8001a28 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(-45));
 80011a8:	f64f 7279 	movw	r2, #65401	@ 0xff79
 80011ac:	f240 1131 	movw	r1, #305	@ 0x131
 80011b0:	48ac      	ldr	r0, [pc, #688]	@ (8001464 <rotate_motor+0x2f4>)
 80011b2:	f000 fc39 	bl	8001a28 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(45));
 80011b6:	2287      	movs	r2, #135	@ 0x87
 80011b8:	f240 21af 	movw	r1, #687	@ 0x2af
 80011bc:	48aa      	ldr	r0, [pc, #680]	@ (8001468 <rotate_motor+0x2f8>)
 80011be:	f000 fc33 	bl	8001a28 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(-45));
 80011c2:	f64f 7279 	movw	r2, #65401	@ 0xff79
 80011c6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80011ca:	48a8      	ldr	r0, [pc, #672]	@ (800146c <rotate_motor+0x2fc>)
 80011cc:	f000 fc2c 	bl	8001a28 <servo_move>
    return;
 80011d0:	f000 bc09 	b.w	80019e6 <rotate_motor+0x876>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f982 	bl	80004e0 <__aeabi_f2d>
 80011dc:	4604      	mov	r4, r0
 80011de:	460d      	mov	r5, r1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f97c 	bl	80004e0 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	ec43 2b11 	vmov	d1, r2, r3
 80011f0:	ec45 4b10 	vmov	d0, r4, r5
 80011f4:	f003 f826 	bl	8004244 <atan2>
 80011f8:	ec51 0b10 	vmov	r0, r1, d0
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b9b      	ldr	r3, [pc, #620]	@ (8001470 <rotate_motor+0x300>)
 8001202:	f7ff f9c5 	bl	8000590 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a392      	add	r3, pc, #584	@ (adr r3, 8001458 <rotate_motor+0x2e8>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fae6 	bl	80007e4 <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fc70 	bl	8000b04 <__aeabi_d2f>
 8001224:	4603      	mov	r3, r0
 8001226:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 8001228:	edd7 7a01 	vldr	s15, [r7, #4]
 800122c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	d123      	bne.n	800127e <rotate_motor+0x10e>
 8001236:	edd7 7a02 	vldr	s15, [r7, #8]
 800123a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	d01c      	beq.n	800127e <rotate_motor+0x10e>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(90));
 8001244:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001248:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800124c:	4884      	ldr	r0, [pc, #528]	@ (8001460 <rotate_motor+0x2f0>)
 800124e:	f000 fbeb 	bl	8001a28 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(90));
 8001252:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001256:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800125a:	4882      	ldr	r0, [pc, #520]	@ (8001464 <rotate_motor+0x2f4>)
 800125c:	f000 fbe4 	bl	8001a28 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(90));
 8001260:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001264:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001268:	487f      	ldr	r0, [pc, #508]	@ (8001468 <rotate_motor+0x2f8>)
 800126a:	f000 fbdd 	bl	8001a28 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(90));
 800126e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001272:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001276:	487d      	ldr	r0, [pc, #500]	@ (800146c <rotate_motor+0x2fc>)
 8001278:	f000 fbd6 	bl	8001a28 <servo_move>
 800127c:	e3b3      	b.n	80019e6 <rotate_motor+0x876>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	d023      	beq.n	80012d4 <rotate_motor+0x164>
 800128c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001290:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	d11c      	bne.n	80012d4 <rotate_motor+0x164>
    servo_move(&(servos[0]), SERVO_ID1_MAX_POS, SHORTEST_TIME_ROTATE(90));
 800129a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800129e:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 80012a2:	486f      	ldr	r0, [pc, #444]	@ (8001460 <rotate_motor+0x2f0>)
 80012a4:	f000 fbc0 	bl	8001a28 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(90));
 80012a8:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80012ac:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 80012b0:	486c      	ldr	r0, [pc, #432]	@ (8001464 <rotate_motor+0x2f4>)
 80012b2:	f000 fbb9 	bl	8001a28 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MAX_POS, SHORTEST_TIME_ROTATE(90));
 80012b6:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80012ba:	f240 316b 	movw	r1, #875	@ 0x36b
 80012be:	486a      	ldr	r0, [pc, #424]	@ (8001468 <rotate_motor+0x2f8>)
 80012c0:	f000 fbb2 	bl	8001a28 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(90));
 80012c4:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80012c8:	f44f 715c 	mov.w	r1, #880	@ 0x370
 80012cc:	4867      	ldr	r0, [pc, #412]	@ (800146c <rotate_motor+0x2fc>)
 80012ce:	f000 fbab 	bl	8001a28 <servo_move>
 80012d2:	e388      	b.n	80019e6 <rotate_motor+0x876>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {    // quadrant 2 or 4
 80012d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	d506      	bpl.n	80012f0 <rotate_motor+0x180>
 80012e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	dc0f      	bgt.n	8001310 <rotate_motor+0x1a0>
 80012f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	f340 81ae 	ble.w	800165c <rotate_motor+0x4ec>
 8001300:	edd7 7a02 	vldr	s15, [r7, #8]
 8001304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	f140 81a6 	bpl.w	800165c <rotate_motor+0x4ec>
    if (angle < 0)
 8001310:	edd7 7a05 	vldr	s15, [r7, #20]
 8001314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d507      	bpl.n	800132e <rotate_motor+0x1be>
      angle += 180;
 800131e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001322:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001474 <rotate_motor+0x304>
 8001326:	ee77 7a87 	vadd.f32	s15, s15, s14
 800132a:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 800132e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001332:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001478 <rotate_motor+0x308>
 8001336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800133a:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 800133e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001342:	eef1 7a67 	vneg.f32	s15, s15
 8001346:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(angle));
 800134a:	edd7 7a05 	vldr	s15, [r7, #20]
 800134e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	dd22      	ble.n	800139e <rotate_motor+0x22e>
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff f8c1 	bl	80004e0 <__aeabi_f2d>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b46      	ldr	r3, [pc, #280]	@ (800147c <rotate_motor+0x30c>)
 8001364:	f7ff fa3e 	bl	80007e4 <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <rotate_motor+0x310>)
 8001376:	f7ff f90b 	bl	8000590 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b3f      	ldr	r3, [pc, #252]	@ (8001484 <rotate_motor+0x314>)
 8001388:	f7fe ff4c 	bl	8000224 <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fb96 	bl	8000ac4 <__aeabi_d2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	b29b      	uxth	r3, r3
 800139c:	e021      	b.n	80013e2 <rotate_motor+0x272>
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff f89e 	bl	80004e0 <__aeabi_f2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b34      	ldr	r3, [pc, #208]	@ (800147c <rotate_motor+0x30c>)
 80013aa:	f7ff fa1b 	bl	80007e4 <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b33      	ldr	r3, [pc, #204]	@ (8001488 <rotate_motor+0x318>)
 80013bc:	f7ff f8e8 	bl	8000590 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <rotate_motor+0x314>)
 80013ce:	f7fe ff29 	bl	8000224 <__adddf3>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fb73 	bl	8000ac4 <__aeabi_d2uiz>
 80013de:	4603      	mov	r3, r0
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f2:	ee17 2a90 	vmov	r2, s15
 80013f6:	b292      	uxth	r2, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	4819      	ldr	r0, [pc, #100]	@ (8001460 <rotate_motor+0x2f0>)
 80013fc:	f000 fb14 	bl	8001a28 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(angle));
 8001400:	edd7 7a05 	vldr	s15, [r7, #20]
 8001404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	dd3e      	ble.n	800148c <rotate_motor+0x31c>
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff f866 	bl	80004e0 <__aeabi_f2d>
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b18      	ldr	r3, [pc, #96]	@ (800147c <rotate_motor+0x30c>)
 800141a:	f7ff f9e3 	bl	80007e4 <__aeabi_ddiv>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <rotate_motor+0x310>)
 800142c:	f7ff f8b0 	bl	8000590 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <rotate_motor+0x314>)
 800143e:	f7fe fef1 	bl	8000224 <__adddf3>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fb3b 	bl	8000ac4 <__aeabi_d2uiz>
 800144e:	4603      	mov	r3, r0
 8001450:	b29b      	uxth	r3, r3
 8001452:	e03d      	b.n	80014d0 <rotate_motor+0x360>
 8001454:	f3af 8000 	nop.w
 8001458:	54442d18 	.word	0x54442d18
 800145c:	400921fb 	.word	0x400921fb
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004
 8001468:	20000008 	.word	0x20000008
 800146c:	2000000c 	.word	0x2000000c
 8001470:	40668000 	.word	0x40668000
 8001474:	43340000 	.word	0x43340000
 8001478:	42b40000 	.word	0x42b40000
 800147c:	40568000 	.word	0x40568000
 8001480:	40768000 	.word	0x40768000
 8001484:	407f4000 	.word	0x407f4000
 8001488:	40790000 	.word	0x40790000
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff f827 	bl	80004e0 <__aeabi_f2d>
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	4bd6      	ldr	r3, [pc, #856]	@ (80017f0 <rotate_motor+0x680>)
 8001498:	f7ff f9a4 	bl	80007e4 <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	a3ca      	add	r3, pc, #808	@ (adr r3, 80017d0 <rotate_motor+0x660>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f871 	bl	8000590 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4bce      	ldr	r3, [pc, #824]	@ (80017f4 <rotate_motor+0x684>)
 80014bc:	f7fe feb2 	bl	8000224 <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fafc 	bl	8000ac4 <__aeabi_d2uiz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d4:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80014d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	ee17 2a90 	vmov	r2, s15
 80014e4:	b292      	uxth	r2, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	48c3      	ldr	r0, [pc, #780]	@ (80017f8 <rotate_motor+0x688>)
 80014ea:	f000 fa9d 	bl	8001a28 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(angle));
 80014ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	dd22      	ble.n	8001542 <rotate_motor+0x3d2>
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7fe ffef 	bl	80004e0 <__aeabi_f2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4bba      	ldr	r3, [pc, #744]	@ (80017f0 <rotate_motor+0x680>)
 8001508:	f7ff f96c 	bl	80007e4 <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a3b0      	add	r3, pc, #704	@ (adr r3, 80017d8 <rotate_motor+0x668>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f839 	bl	8000590 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4bb2      	ldr	r3, [pc, #712]	@ (80017f4 <rotate_motor+0x684>)
 800152c:	f7fe fe7a 	bl	8000224 <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fac4 	bl	8000ac4 <__aeabi_d2uiz>
 800153c:	4603      	mov	r3, r0
 800153e:	b29b      	uxth	r3, r3
 8001540:	e021      	b.n	8001586 <rotate_motor+0x416>
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7fe ffcc 	bl	80004e0 <__aeabi_f2d>
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4ba8      	ldr	r3, [pc, #672]	@ (80017f0 <rotate_motor+0x680>)
 800154e:	f7ff f949 	bl	80007e4 <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80017e0 <rotate_motor+0x670>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f816 	bl	8000590 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4ba0      	ldr	r3, [pc, #640]	@ (80017f4 <rotate_motor+0x684>)
 8001572:	f7fe fe57 	bl	8000224 <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff faa1 	bl	8000ac4 <__aeabi_d2uiz>
 8001582:	4603      	mov	r3, r0
 8001584:	b29b      	uxth	r3, r3
 8001586:	edd7 7a05 	vldr	s15, [r7, #20]
 800158a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800158e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001596:	ee17 2a90 	vmov	r2, s15
 800159a:	b292      	uxth	r2, r2
 800159c:	4619      	mov	r1, r3
 800159e:	4897      	ldr	r0, [pc, #604]	@ (80017fc <rotate_motor+0x68c>)
 80015a0:	f000 fa42 	bl	8001a28 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(angle));
 80015a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	dd22      	ble.n	80015f8 <rotate_motor+0x488>
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7fe ff94 	bl	80004e0 <__aeabi_f2d>
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <rotate_motor+0x680>)
 80015be:	f7ff f911 	bl	80007e4 <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	a387      	add	r3, pc, #540	@ (adr r3, 80017e8 <rotate_motor+0x678>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7fe ffde 	bl	8000590 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b84      	ldr	r3, [pc, #528]	@ (80017f4 <rotate_motor+0x684>)
 80015e2:	f7fe fe1f 	bl	8000224 <__adddf3>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fa69 	bl	8000ac4 <__aeabi_d2uiz>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	e021      	b.n	800163c <rotate_motor+0x4cc>
 80015f8:	6978      	ldr	r0, [r7, #20]
 80015fa:	f7fe ff71 	bl	80004e0 <__aeabi_f2d>
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b7b      	ldr	r3, [pc, #492]	@ (80017f0 <rotate_motor+0x680>)
 8001604:	f7ff f8ee 	bl	80007e4 <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b7a      	ldr	r3, [pc, #488]	@ (8001800 <rotate_motor+0x690>)
 8001616:	f7fe ffbb 	bl	8000590 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b73      	ldr	r3, [pc, #460]	@ (80017f4 <rotate_motor+0x684>)
 8001628:	f7fe fdfc 	bl	8000224 <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa46 	bl	8000ac4 <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	b29b      	uxth	r3, r3
 800163c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001640:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164c:	ee17 2a90 	vmov	r2, s15
 8001650:	b292      	uxth	r2, r2
 8001652:	4619      	mov	r1, r3
 8001654:	486b      	ldr	r0, [pc, #428]	@ (8001804 <rotate_motor+0x694>)
 8001656:	f000 f9e7 	bl	8001a28 <servo_move>
 800165a:	e1c4      	b.n	80019e6 <rotate_motor+0x876>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {    // quadrant 1 or 3
 800165c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d506      	bpl.n	8001678 <rotate_motor+0x508>
 800166a:	edd7 7a02 	vldr	s15, [r7, #8]
 800166e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	d40f      	bmi.n	8001698 <rotate_motor+0x528>
 8001678:	edd7 7a01 	vldr	s15, [r7, #4]
 800167c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	f340 81af 	ble.w	80019e6 <rotate_motor+0x876>
 8001688:	edd7 7a02 	vldr	s15, [r7, #8]
 800168c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	f340 81a7 	ble.w	80019e6 <rotate_motor+0x876>
    if (angle < 0)
 8001698:	edd7 7a05 	vldr	s15, [r7, #20]
 800169c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d507      	bpl.n	80016b6 <rotate_motor+0x546>
      angle += 180;
 80016a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016aa:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001808 <rotate_motor+0x698>
 80016ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016b2:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 80016b6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800180c <rotate_motor+0x69c>
 80016ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80016be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c2:	edc7 7a05 	vstr	s15, [r7, #20]
    
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(angle));
 80016c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	dd22      	ble.n	800171a <rotate_motor+0x5aa>
 80016d4:	6978      	ldr	r0, [r7, #20]
 80016d6:	f7fe ff03 	bl	80004e0 <__aeabi_f2d>
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <rotate_motor+0x680>)
 80016e0:	f7ff f880 	bl	80007e4 <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <rotate_motor+0x690>)
 80016f2:	f7fe ff4d 	bl	8000590 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b3c      	ldr	r3, [pc, #240]	@ (80017f4 <rotate_motor+0x684>)
 8001704:	f7fe fd8e 	bl	8000224 <__adddf3>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f9d8 	bl	8000ac4 <__aeabi_d2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	b29b      	uxth	r3, r3
 8001718:	e021      	b.n	800175e <rotate_motor+0x5ee>
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7fe fee0 	bl	80004e0 <__aeabi_f2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b32      	ldr	r3, [pc, #200]	@ (80017f0 <rotate_motor+0x680>)
 8001726:	f7ff f85d 	bl	80007e4 <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b36      	ldr	r3, [pc, #216]	@ (8001810 <rotate_motor+0x6a0>)
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <rotate_motor+0x684>)
 800174a:	f7fe fd6b 	bl	8000224 <__adddf3>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f9b5 	bl	8000ac4 <__aeabi_d2uiz>
 800175a:	4603      	mov	r3, r0
 800175c:	b29b      	uxth	r3, r3
 800175e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001762:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800176e:	ee17 2a90 	vmov	r2, s15
 8001772:	b292      	uxth	r2, r2
 8001774:	4619      	mov	r1, r3
 8001776:	4827      	ldr	r0, [pc, #156]	@ (8001814 <rotate_motor+0x6a4>)
 8001778:	f000 f956 	bl	8001a28 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(angle));
 800177c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	dd46      	ble.n	8001818 <rotate_motor+0x6a8>
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7fe fea8 	bl	80004e0 <__aeabi_f2d>
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <rotate_motor+0x680>)
 8001796:	f7ff f825 	bl	80007e4 <__aeabi_ddiv>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <rotate_motor+0x690>)
 80017a8:	f7fe fef2 	bl	8000590 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <rotate_motor+0x684>)
 80017ba:	f7fe fd33 	bl	8000224 <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff f97d 	bl	8000ac4 <__aeabi_d2uiz>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	e045      	b.n	800185c <rotate_motor+0x6ec>
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40786000 	.word	0x40786000
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40777000 	.word	0x40777000
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40772000 	.word	0x40772000
 80017e8:	00000000 	.word	0x00000000
 80017ec:	4077c000 	.word	0x4077c000
 80017f0:	40568000 	.word	0x40568000
 80017f4:	407f4000 	.word	0x407f4000
 80017f8:	20000004 	.word	0x20000004
 80017fc:	20000008 	.word	0x20000008
 8001800:	40768000 	.word	0x40768000
 8001804:	2000000c 	.word	0x2000000c
 8001808:	43340000 	.word	0x43340000
 800180c:	42b40000 	.word	0x42b40000
 8001810:	40790000 	.word	0x40790000
 8001814:	20000000 	.word	0x20000000
 8001818:	6978      	ldr	r0, [r7, #20]
 800181a:	f7fe fe61 	bl	80004e0 <__aeabi_f2d>
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b7b      	ldr	r3, [pc, #492]	@ (8001a10 <rotate_motor+0x8a0>)
 8001824:	f7fe ffde 	bl	80007e4 <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a36f      	add	r3, pc, #444	@ (adr r3, 80019f0 <rotate_motor+0x880>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe feab 	bl	8000590 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <rotate_motor+0x8a4>)
 8001848:	f7fe fcec 	bl	8000224 <__adddf3>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f936 	bl	8000ac4 <__aeabi_d2uiz>
 8001858:	4603      	mov	r3, r0
 800185a:	b29b      	uxth	r3, r3
 800185c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001860:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186c:	ee17 2a90 	vmov	r2, s15
 8001870:	b292      	uxth	r2, r2
 8001872:	4619      	mov	r1, r3
 8001874:	4868      	ldr	r0, [pc, #416]	@ (8001a18 <rotate_motor+0x8a8>)
 8001876:	f000 f8d7 	bl	8001a28 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(angle));
 800187a:	edd7 7a05 	vldr	s15, [r7, #20]
 800187e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	dd22      	ble.n	80018ce <rotate_motor+0x75e>
 8001888:	6978      	ldr	r0, [r7, #20]
 800188a:	f7fe fe29 	bl	80004e0 <__aeabi_f2d>
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b5f      	ldr	r3, [pc, #380]	@ (8001a10 <rotate_motor+0x8a0>)
 8001894:	f7fe ffa6 	bl	80007e4 <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	a355      	add	r3, pc, #340	@ (adr r3, 80019f8 <rotate_motor+0x888>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fe73 	bl	8000590 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <rotate_motor+0x8a4>)
 80018b8:	f7fe fcb4 	bl	8000224 <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f8fe 	bl	8000ac4 <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	e021      	b.n	8001912 <rotate_motor+0x7a2>
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7fe fe06 	bl	80004e0 <__aeabi_f2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a10 <rotate_motor+0x8a0>)
 80018da:	f7fe ff83 	bl	80007e4 <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	a346      	add	r3, pc, #280	@ (adr r3, 8001a00 <rotate_motor+0x890>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fe50 	bl	8000590 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b45      	ldr	r3, [pc, #276]	@ (8001a14 <rotate_motor+0x8a4>)
 80018fe:	f7fe fc91 	bl	8000224 <__adddf3>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f8db 	bl	8000ac4 <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29b      	uxth	r3, r3
 8001912:	edd7 7a05 	vldr	s15, [r7, #20]
 8001916:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001922:	ee17 2a90 	vmov	r2, s15
 8001926:	b292      	uxth	r2, r2
 8001928:	4619      	mov	r1, r3
 800192a:	483c      	ldr	r0, [pc, #240]	@ (8001a1c <rotate_motor+0x8ac>)
 800192c:	f000 f87c 	bl	8001a28 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(angle));
 8001930:	edd7 7a05 	vldr	s15, [r7, #20]
 8001934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	dd22      	ble.n	8001984 <rotate_motor+0x814>
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7fe fdce 	bl	80004e0 <__aeabi_f2d>
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <rotate_motor+0x8a0>)
 800194a:	f7fe ff4b 	bl	80007e4 <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	a32c      	add	r3, pc, #176	@ (adr r3, 8001a08 <rotate_motor+0x898>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe fe18 	bl	8000590 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <rotate_motor+0x8a4>)
 800196e:	f7fe fc59 	bl	8000224 <__adddf3>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f8a3 	bl	8000ac4 <__aeabi_d2uiz>
 800197e:	4603      	mov	r3, r0
 8001980:	b29b      	uxth	r3, r3
 8001982:	e021      	b.n	80019c8 <rotate_motor+0x858>
 8001984:	6978      	ldr	r0, [r7, #20]
 8001986:	f7fe fdab 	bl	80004e0 <__aeabi_f2d>
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <rotate_motor+0x8a0>)
 8001990:	f7fe ff28 	bl	80007e4 <__aeabi_ddiv>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <rotate_motor+0x8b0>)
 80019a2:	f7fe fdf5 	bl	8000590 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <rotate_motor+0x8a4>)
 80019b4:	f7fe fc36 	bl	8000224 <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f880 	bl	8000ac4 <__aeabi_d2uiz>
 80019c4:	4603      	mov	r3, r0
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d8:	ee17 2a90 	vmov	r2, s15
 80019dc:	b292      	uxth	r2, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	4810      	ldr	r0, [pc, #64]	@ (8001a24 <rotate_motor+0x8b4>)
 80019e2:	f000 f821 	bl	8001a28 <servo_move>
  }
}
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	f3af 8000 	nop.w
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40786000 	.word	0x40786000
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40777000 	.word	0x40777000
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40772000 	.word	0x40772000
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	4077c000 	.word	0x4077c000
 8001a10:	40568000 	.word	0x40568000
 8001a14:	407f4000 	.word	0x407f4000
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	40768000 	.word	0x40768000
 8001a24:	2000000c 	.word	0x2000000c

08001a28 <servo_move>:
  HAL_UART_Transmit(&huart5, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart5, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8001a38:	2355      	movs	r3, #85	@ 0x55
 8001a3a:	737b      	strb	r3, [r7, #13]
 8001a3c:	7b7b      	ldrb	r3, [r7, #13]
 8001a3e:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8001a40:	2308      	movs	r3, #8
 8001a42:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 8001a44:	2303      	movs	r3, #3
 8001a46:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 8001a4c:	883b      	ldrh	r3, [r7, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 8001a52:	883b      	ldrh	r3, [r7, #0]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart5, send_buffer, sizeof(send_buffer), 0xFFFF);
 8001a72:	f107 010c 	add.w	r1, r7, #12
 8001a76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a7a:	220a      	movs	r2, #10
 8001a7c:	4803      	ldr	r0, [pc, #12]	@ (8001a8c <servo_move+0x64>)
 8001a7e:	f001 fd09 	bl	8003494 <HAL_UART_Transmit>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000040 	.word	0x20000040

08001a90 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	e00d      	b.n	8001ab8 <servo_reset_all+0x28>
    servo_move(&(servos[i]), INITIAL_POS, 1000);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <servo_reset_all+0x38>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001aa8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ffbb 	bl	8001a28 <servo_move>
  for (int i = 0; i < 6; i++)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	ddee      	ble.n	8001a9c <servo_reset_all+0xc>
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000000 	.word	0x20000000

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_MspInit+0x44>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <HAL_MspInit+0x44>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_MspInit+0x44>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_MspInit+0x44>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	4a08      	ldr	r2, [pc, #32]	@ (8001b10 <HAL_MspInit+0x44>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_MspInit+0x44>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b02:	f000 fceb 	bl	80024dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <NMI_Handler+0x4>

08001b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6a:	f000 f955 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b9c:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001b9e:	4a23      	ldr	r2, [pc, #140]	@ (8001c2c <MX_UART5_Init+0x94>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001ba4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ba8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bda:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001be0:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001be2:	f001 fc07 	bl	80033f4 <HAL_UART_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001bec:	f7ff fab7 	bl	800115e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001bf4:	f002 fa30 	bl	8004058 <HAL_UARTEx_SetTxFifoThreshold>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001bfe:	f7ff faae 	bl	800115e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c02:	2100      	movs	r1, #0
 8001c04:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001c06:	f002 fa65 	bl	80040d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001c10:	f7ff faa5 	bl	800115e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <MX_UART5_Init+0x90>)
 8001c16:	f002 f9e6 	bl	8003fe6 <HAL_UARTEx_DisableFifoMode>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001c20:	f7ff fa9d 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000040 	.word	0x20000040
 8001c2c:	40005000 	.word	0x40005000

08001c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a0      	sub	sp, #128	@ 0x80
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	2254      	movs	r2, #84	@ 0x54
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 facb 	bl	80041ec <memset>
  if(uartHandle->Instance==UART5)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d10 <HAL_UART_MspInit+0xe0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d152      	bne.n	8001d06 <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001c60:	2310      	movs	r3, #16
 8001c62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 f973 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c78:	f7ff fa71 	bl	800115e <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c7c:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	4a24      	ldr	r2, [pc, #144]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c88:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c94:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	4a1e      	ldr	r2, [pc, #120]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb0:	4a18      	ldr	r2, [pc, #96]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_UART_MspInit+0xe4>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480d      	ldr	r0, [pc, #52]	@ (8001d18 <HAL_UART_MspInit+0xe8>)
 8001ce2:	f000 f9bd 	bl	8002060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4806      	ldr	r0, [pc, #24]	@ (8001d1c <HAL_UART_MspInit+0xec>)
 8001d02:	f000 f9ad 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001d06:	bf00      	nop
 8001d08:	3780      	adds	r7, #128	@ 0x80
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40005000 	.word	0x40005000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	48000c00 	.word	0x48000c00

08001d20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d20:	480d      	ldr	r0, [pc, #52]	@ (8001d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d24:	f7ff ff26 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d28:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2a:	490d      	ldr	r1, [pc, #52]	@ (8001d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <LoopForever+0xe>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d40:	4c0a      	ldr	r4, [pc, #40]	@ (8001d6c <LoopForever+0x16>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f002 fa55 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d52:	f7ff f903 	bl	8000f5c <main>

08001d56 <LoopForever>:

LoopForever:
    b LoopForever
 8001d56:	e7fe      	b.n	8001d56 <LoopForever>
  ldr   r0, =_estack
 8001d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001d64:	08004800 	.word	0x08004800
  ldr r2, =_sbss
 8001d68:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001d6c:	200000d8 	.word	0x200000d8

08001d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC1_2_IRQHandler>

08001d72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f93d 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f80e 	bl	8001da4 <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	e001      	b.n	8001d98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d94:	f7ff fe9a 	bl	8001acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d98:	79fb      	ldrb	r3, [r7, #7]

}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <HAL_InitTick+0x68>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d022      	beq.n	8001dfe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001db8:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <HAL_InitTick+0x68>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f93a 	bl	8002046 <HAL_SYSTICK_Config>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10f      	bne.n	8001df8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	d809      	bhi.n	8001df2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dde:	2200      	movs	r2, #0
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de6:	f000 f914 	bl	8002012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <HAL_InitTick+0x70>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e004      	b.n	8001e02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000020 	.word	0x20000020
 8001e10:	20000018 	.word	0x20000018
 8001e14:	2000001c 	.word	0x2000001c

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_IncTick+0x1c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a03      	ldr	r2, [pc, #12]	@ (8001e34 <HAL_IncTick+0x1c>)
 8001e28:	6013      	str	r3, [r2, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	200000d4 	.word	0x200000d4
 8001e38:	20000020 	.word	0x20000020

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200000d4 	.word	0x200000d4

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff ffee 	bl	8001e3c <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e6c:	d004      	beq.n	8001e78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_Delay+0x40>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e78:	bf00      	nop
 8001e7a:	f7ff ffdf 	bl	8001e3c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d8f7      	bhi.n	8001e7a <HAL_Delay+0x26>
  {
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000020 	.word	0x20000020

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	@ (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	@ (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
         );
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	@ 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fdc:	f7ff ff8e 	bl	8001efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff47 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff5e 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff90 	bl	8001f50 <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5f 	bl	8001efc <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffb2 	bl	8001fb8 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800206e:	e15a      	b.n	8002326 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 814c 	beq.w	8002320 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d005      	beq.n	80020a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800209c:	2b02      	cmp	r3, #2
 800209e:	d130      	bne.n	8002102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d6:	2201      	movs	r2, #1
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	f003 0201 	and.w	r2, r3, #1
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b03      	cmp	r3, #3
 800210c:	d017      	beq.n	800213e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d123      	bne.n	8002192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	08da      	lsrs	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3208      	adds	r2, #8
 8002152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0203 	and.w	r2, r3, #3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80a6 	beq.w	8002320 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002344 <HAL_GPIO_Init+0x2e4>)
 80021d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002344 <HAL_GPIO_Init+0x2e4>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6613      	str	r3, [r2, #96]	@ 0x60
 80021e0:	4b58      	ldr	r3, [pc, #352]	@ (8002344 <HAL_GPIO_Init+0x2e4>)
 80021e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ec:	4a56      	ldr	r2, [pc, #344]	@ (8002348 <HAL_GPIO_Init+0x2e8>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002216:	d01f      	beq.n	8002258 <HAL_GPIO_Init+0x1f8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a4c      	ldr	r2, [pc, #304]	@ (800234c <HAL_GPIO_Init+0x2ec>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d019      	beq.n	8002254 <HAL_GPIO_Init+0x1f4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a4b      	ldr	r2, [pc, #300]	@ (8002350 <HAL_GPIO_Init+0x2f0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d013      	beq.n	8002250 <HAL_GPIO_Init+0x1f0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a4a      	ldr	r2, [pc, #296]	@ (8002354 <HAL_GPIO_Init+0x2f4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00d      	beq.n	800224c <HAL_GPIO_Init+0x1ec>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a49      	ldr	r2, [pc, #292]	@ (8002358 <HAL_GPIO_Init+0x2f8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <HAL_GPIO_Init+0x1e8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a48      	ldr	r2, [pc, #288]	@ (800235c <HAL_GPIO_Init+0x2fc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_GPIO_Init+0x1e4>
 8002240:	2305      	movs	r3, #5
 8002242:	e00a      	b.n	800225a <HAL_GPIO_Init+0x1fa>
 8002244:	2306      	movs	r3, #6
 8002246:	e008      	b.n	800225a <HAL_GPIO_Init+0x1fa>
 8002248:	2304      	movs	r3, #4
 800224a:	e006      	b.n	800225a <HAL_GPIO_Init+0x1fa>
 800224c:	2303      	movs	r3, #3
 800224e:	e004      	b.n	800225a <HAL_GPIO_Init+0x1fa>
 8002250:	2302      	movs	r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x1fa>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_GPIO_Init+0x1fa>
 8002258:	2300      	movs	r3, #0
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4093      	lsls	r3, r2
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800226a:	4937      	ldr	r1, [pc, #220]	@ (8002348 <HAL_GPIO_Init+0x2e8>)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002278:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <HAL_GPIO_Init+0x300>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800229c:	4a30      	ldr	r2, [pc, #192]	@ (8002360 <HAL_GPIO_Init+0x300>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002360 <HAL_GPIO_Init+0x300>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022c6:	4a26      	ldr	r2, [pc, #152]	@ (8002360 <HAL_GPIO_Init+0x300>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022cc:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_GPIO_Init+0x300>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <HAL_GPIO_Init+0x300>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002360 <HAL_GPIO_Init+0x300>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800231a:	4a11      	ldr	r2, [pc, #68]	@ (8002360 <HAL_GPIO_Init+0x300>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3301      	adds	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	f47f ae9d 	bne.w	8002070 <HAL_GPIO_Init+0x10>
  }
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	48000400 	.word	0x48000400
 8002350:	48000800 	.word	0x48000800
 8002354:	48000c00 	.word	0x48000c00
 8002358:	48001000 	.word	0x48001000
 800235c:	48001400 	.word	0x48001400
 8002360:	40010400 	.word	0x40010400

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002380:	e002      	b.n	8002388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d141      	bne.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023a2:	4b4b      	ldr	r3, [pc, #300]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ae:	d131      	bne.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023b0:	4b47      	ldr	r3, [pc, #284]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023b6:	4a46      	ldr	r2, [pc, #280]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c0:	4b43      	ldr	r3, [pc, #268]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023c8:	4a41      	ldr	r2, [pc, #260]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023d0:	4b40      	ldr	r3, [pc, #256]	@ (80024d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2232      	movs	r2, #50	@ 0x32
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	4a3f      	ldr	r2, [pc, #252]	@ (80024d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	0c9b      	lsrs	r3, r3, #18
 80023e2:	3301      	adds	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e6:	e002      	b.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ee:	4b38      	ldr	r3, [pc, #224]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fa:	d102      	bne.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f2      	bne.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002402:	4b33      	ldr	r3, [pc, #204]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240e:	d158      	bne.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e057      	b.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002414:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800241a:	4a2d      	ldr	r2, [pc, #180]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002420:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002424:	e04d      	b.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800242c:	d141      	bne.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800242e:	4b28      	ldr	r3, [pc, #160]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800243a:	d131      	bne.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800243c:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002442:	4a23      	ldr	r2, [pc, #140]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002448:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800244c:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002454:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800245a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800245c:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2232      	movs	r2, #50	@ 0x32
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	4a1c      	ldr	r2, [pc, #112]	@ (80024d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	0c9b      	lsrs	r3, r3, #18
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002472:	e002      	b.n	800247a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3b01      	subs	r3, #1
 8002478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002486:	d102      	bne.n	800248e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f2      	bne.n	8002474 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249a:	d112      	bne.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e011      	b.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024a6:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024b0:	e007      	b.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40007000 	.word	0x40007000
 80024d4:	20000018 	.word	0x20000018
 80024d8:	431bde83 	.word	0x431bde83

080024dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ea:	6093      	str	r3, [r2, #8]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40007000 	.word	0x40007000

080024fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e2fe      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d075      	beq.n	8002606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251a:	4b97      	ldr	r3, [pc, #604]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002524:	4b94      	ldr	r3, [pc, #592]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	d102      	bne.n	800253a <HAL_RCC_OscConfig+0x3e>
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d002      	beq.n	8002540 <HAL_RCC_OscConfig+0x44>
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b08      	cmp	r3, #8
 800253e:	d10b      	bne.n	8002558 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	4b8d      	ldr	r3, [pc, #564]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d05b      	beq.n	8002604 <HAL_RCC_OscConfig+0x108>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d157      	bne.n	8002604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e2d9      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x74>
 8002562:	4b85      	ldr	r3, [pc, #532]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a84      	ldr	r2, [pc, #528]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e01d      	b.n	80025ac <HAL_RCC_OscConfig+0xb0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x98>
 800257a:	4b7f      	ldr	r3, [pc, #508]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a7e      	ldr	r2, [pc, #504]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b7c      	ldr	r3, [pc, #496]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7b      	ldr	r2, [pc, #492]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xb0>
 8002594:	4b78      	ldr	r3, [pc, #480]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a77      	ldr	r2, [pc, #476]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b75      	ldr	r3, [pc, #468]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a74      	ldr	r2, [pc, #464]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff fc42 	bl	8001e3c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff fc3e 	bl	8001e3c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e29e      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0xc0>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7ff fc2e 	bl	8001e3c <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff fc2a 	bl	8001e3c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	@ 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e28a      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025f6:	4b60      	ldr	r3, [pc, #384]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0xe8>
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d075      	beq.n	80026fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	4b59      	ldr	r3, [pc, #356]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261c:	4b56      	ldr	r3, [pc, #344]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0x136>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d002      	beq.n	8002638 <HAL_RCC_OscConfig+0x13c>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d11f      	bne.n	8002678 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002638:	4b4f      	ldr	r3, [pc, #316]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_OscConfig+0x154>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e25d      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b49      	ldr	r3, [pc, #292]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	4946      	ldr	r1, [pc, #280]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002664:	4b45      	ldr	r3, [pc, #276]	@ (800277c <HAL_RCC_OscConfig+0x280>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fb9b 	bl	8001da4 <HAL_InitTick>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d043      	beq.n	80026fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e249      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b3d      	ldr	r3, [pc, #244]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3c      	ldr	r2, [pc, #240]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff fbd6 	bl	8001e3c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7ff fbd2 	bl	8001e3c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e232      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a6:	4b34      	ldr	r3, [pc, #208]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b31      	ldr	r3, [pc, #196]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	492d      	ldr	r1, [pc, #180]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
 80026c6:	e01a      	b.n	80026fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80026ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff fbb2 	bl	8001e3c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7ff fbae 	bl	8001e3c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e20e      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ee:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1e0>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d041      	beq.n	800278e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d01c      	beq.n	800274c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002718:	4a17      	ldr	r2, [pc, #92]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7ff fb8b 	bl	8001e3c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272a:	f7ff fb87 	bl	8001e3c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1e7      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800273c:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ef      	beq.n	800272a <HAL_RCC_OscConfig+0x22e>
 800274a:	e020      	b.n	800278e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274c:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002752:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <HAL_RCC_OscConfig+0x27c>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7ff fb6e 	bl	8001e3c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002762:	e00d      	b.n	8002780 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7ff fb6a 	bl	8001e3c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d906      	bls.n	8002780 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1ca      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002780:	4b8c      	ldr	r3, [pc, #560]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ea      	bne.n	8002764 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80a6 	beq.w	80028e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027a0:	4b84      	ldr	r3, [pc, #528]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2b4>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x2b6>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b7f      	ldr	r3, [pc, #508]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	4a7e      	ldr	r2, [pc, #504]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c2:	4b7c      	ldr	r3, [pc, #496]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d2:	4b79      	ldr	r3, [pc, #484]	@ (80029b8 <HAL_RCC_OscConfig+0x4bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027de:	4b76      	ldr	r3, [pc, #472]	@ (80029b8 <HAL_RCC_OscConfig+0x4bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a75      	ldr	r2, [pc, #468]	@ (80029b8 <HAL_RCC_OscConfig+0x4bc>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7ff fb27 	bl	8001e3c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7ff fb23 	bl	8001e3c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e183      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002804:	4b6c      	ldr	r3, [pc, #432]	@ (80029b8 <HAL_RCC_OscConfig+0x4bc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0x32e>
 8002818:	4b66      	ldr	r3, [pc, #408]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281e:	4a65      	ldr	r2, [pc, #404]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002828:	e024      	b.n	8002874 <HAL_RCC_OscConfig+0x378>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b05      	cmp	r3, #5
 8002830:	d110      	bne.n	8002854 <HAL_RCC_OscConfig+0x358>
 8002832:	4b60      	ldr	r3, [pc, #384]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002838:	4a5e      	ldr	r2, [pc, #376]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002842:	4b5c      	ldr	r3, [pc, #368]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002848:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002852:	e00f      	b.n	8002874 <HAL_RCC_OscConfig+0x378>
 8002854:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285a:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002864:	4b53      	ldr	r3, [pc, #332]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	4a52      	ldr	r2, [pc, #328]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d016      	beq.n	80028aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7ff fade 	bl	8001e3c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7ff fada 	bl	8001e3c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e138      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289a:	4b46      	ldr	r3, [pc, #280]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ed      	beq.n	8002884 <HAL_RCC_OscConfig+0x388>
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7ff fac7 	bl	8001e3c <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7ff fac3 	bl	8001e3c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e121      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c8:	4b3a      	ldr	r3, [pc, #232]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1ed      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4b35      	ldr	r3, [pc, #212]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	4a34      	ldr	r2, [pc, #208]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d03c      	beq.n	800296e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01c      	beq.n	8002936 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028fc:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 80028fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002902:	4a2c      	ldr	r2, [pc, #176]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff fa96 	bl	8001e3c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002914:	f7ff fa92 	bl	8001e3c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0f2      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002926:	4b23      	ldr	r3, [pc, #140]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002928:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ef      	beq.n	8002914 <HAL_RCC_OscConfig+0x418>
 8002934:	e01b      	b.n	800296e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002936:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800293c:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7ff fa79 	bl	8001e3c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800294e:	f7ff fa75 	bl	8001e3c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0d5      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002960:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002962:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ef      	bne.n	800294e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80c9 	beq.w	8002b0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b0c      	cmp	r3, #12
 8002982:	f000 8083 	beq.w	8002a8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d15e      	bne.n	8002a4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a08      	ldr	r2, [pc, #32]	@ (80029b4 <HAL_RCC_OscConfig+0x4b8>)
 8002994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7ff fa4f 	bl	8001e3c <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	e00c      	b.n	80029bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7ff fa4b 	bl	8001e3c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d905      	bls.n	80029bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e0ab      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	4b55      	ldr	r3, [pc, #340]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ec      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c8:	4b52      	ldr	r3, [pc, #328]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	4b52      	ldr	r3, [pc, #328]	@ (8002b18 <HAL_RCC_OscConfig+0x61c>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6a11      	ldr	r1, [r2, #32]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029d8:	3a01      	subs	r2, #1
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	4311      	orrs	r1, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80029e2:	0212      	lsls	r2, r2, #8
 80029e4:	4311      	orrs	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029ea:	0852      	lsrs	r2, r2, #1
 80029ec:	3a01      	subs	r2, #1
 80029ee:	0552      	lsls	r2, r2, #21
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029f6:	0852      	lsrs	r2, r2, #1
 80029f8:	3a01      	subs	r2, #1
 80029fa:	0652      	lsls	r2, r2, #25
 80029fc:	4311      	orrs	r1, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a02:	06d2      	lsls	r2, r2, #27
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4943      	ldr	r1, [pc, #268]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a40      	ldr	r2, [pc, #256]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a18:	4b3e      	ldr	r3, [pc, #248]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7ff fa0a 	bl	8001e3c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7ff fa06 	bl	8001e3c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e066      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	4b35      	ldr	r3, [pc, #212]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x530>
 8002a4a:	e05e      	b.n	8002b0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4c:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a30      	ldr	r2, [pc, #192]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7ff f9f0 	bl	8001e3c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7ff f9ec 	bl	8001e3c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e04c      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a72:	4b28      	ldr	r3, [pc, #160]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a7e:	4b25      	ldr	r3, [pc, #148]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	4924      	ldr	r1, [pc, #144]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a84:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <HAL_RCC_OscConfig+0x620>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	60cb      	str	r3, [r1, #12]
 8002a8a:	e03e      	b.n	8002b0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e039      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	@ (8002b14 <HAL_RCC_OscConfig+0x618>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d12c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d123      	bne.n	8002b06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11b      	bne.n	8002b06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d113      	bne.n	8002b06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	3b01      	subs	r3, #1
 8002b00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	019f800c 	.word	0x019f800c
 8002b1c:	feeefffc 	.word	0xfeeefffc

08002b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e11e      	b.n	8002d76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b91      	ldr	r3, [pc, #580]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b8e      	ldr	r3, [pc, #568]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 020f 	bic.w	r2, r3, #15
 8002b4e:	498c      	ldr	r1, [pc, #560]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b8a      	ldr	r3, [pc, #552]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e106      	b.n	8002d76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d073      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d129      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7c:	4b81      	ldr	r3, [pc, #516]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0f4      	b.n	8002d76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b8c:	f000 f99e 	bl	8002ecc <RCC_GetSysClockFreqFromPLLSource>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4a7c      	ldr	r2, [pc, #496]	@ (8002d88 <HAL_RCC_ClockConfig+0x268>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d93f      	bls.n	8002c1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d033      	beq.n	8002c1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d12f      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bba:	4b72      	ldr	r3, [pc, #456]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bc2:	4a70      	ldr	r2, [pc, #448]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e024      	b.n	8002c1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0c6      	b.n	8002d76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	4b66      	ldr	r3, [pc, #408]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0be      	b.n	8002d76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002bf8:	f000 f8ce 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4a61      	ldr	r2, [pc, #388]	@ (8002d88 <HAL_RCC_ClockConfig+0x268>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d909      	bls.n	8002c1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c06:	4b5f      	ldr	r3, [pc, #380]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 0203 	bic.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4957      	ldr	r1, [pc, #348]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7ff f906 	bl	8001e3c <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7ff f902 	bl	8001e3c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e095      	b.n	8002d76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 020c 	and.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1eb      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d023      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b43      	ldr	r3, [pc, #268]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a42      	ldr	r2, [pc, #264]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c94:	4a3b      	ldr	r2, [pc, #236]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b39      	ldr	r3, [pc, #228]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4936      	ldr	r1, [pc, #216]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b80      	cmp	r3, #128	@ 0x80
 8002cb4:	d105      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cb6:	4b33      	ldr	r3, [pc, #204]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4a32      	ldr	r2, [pc, #200]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002cbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d21d      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 020f 	bic.w	r2, r3, #15
 8002cd8:	4929      	ldr	r1, [pc, #164]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ce0:	f7ff f8ac 	bl	8001e3c <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7ff f8a8 	bl	8001e3c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e03b      	b.n	8002d76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1ed      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4917      	ldr	r1, [pc, #92]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490f      	ldr	r1, [pc, #60]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d4a:	f000 f825 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <HAL_RCC_ClockConfig+0x264>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	490c      	ldr	r1, [pc, #48]	@ (8002d8c <HAL_RCC_ClockConfig+0x26c>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <HAL_RCC_ClockConfig+0x270>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f818 	bl	8001da4 <HAL_InitTick>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40021000 	.word	0x40021000
 8002d88:	04c4b400 	.word	0x04c4b400
 8002d8c:	0800473c 	.word	0x0800473c
 8002d90:	20000018 	.word	0x20000018
 8002d94:	2000001c 	.word	0x2000001c

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d102      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002daa:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e047      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002db0:	4b27      	ldr	r3, [pc, #156]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dbc:	4b26      	ldr	r3, [pc, #152]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	e03e      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002dc2:	4b23      	ldr	r3, [pc, #140]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d136      	bne.n	8002e3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dce:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	3301      	adds	r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d10c      	bne.n	8002e06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dec:	4a1a      	ldr	r2, [pc, #104]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df6:	68d2      	ldr	r2, [r2, #12]
 8002df8:	0a12      	lsrs	r2, r2, #8
 8002dfa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	617b      	str	r3, [r7, #20]
      break;
 8002e04:	e00c      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e06:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	4a10      	ldr	r2, [pc, #64]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e10:	68d2      	ldr	r2, [r2, #12]
 8002e12:	0a12      	lsrs	r2, r2, #8
 8002e14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
      break;
 8002e1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	0e5b      	lsrs	r3, r3, #25
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e001      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e40:	693b      	ldr	r3, [r7, #16]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	007a1200 	.word	0x007a1200

08002e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e60:	4b03      	ldr	r3, [pc, #12]	@ (8002e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000018 	.word	0x20000018

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e78:	f7ff fff0 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4904      	ldr	r1, [pc, #16]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	0800474c 	.word	0x0800474c

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ea4:	f7ff ffda 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0adb      	lsrs	r3, r3, #11
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4904      	ldr	r1, [pc, #16]	@ (8002ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	0800474c 	.word	0x0800474c

08002ecc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d10c      	bne.n	8002f0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ef0:	4a17      	ldr	r2, [pc, #92]	@ (8002f50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	4a14      	ldr	r2, [pc, #80]	@ (8002f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002efa:	68d2      	ldr	r2, [r2, #12]
 8002efc:	0a12      	lsrs	r2, r2, #8
 8002efe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
    break;
 8002f08:	e00c      	b.n	8002f24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f0a:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	4a0e      	ldr	r2, [pc, #56]	@ (8002f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f14:	68d2      	ldr	r2, [r2, #12]
 8002f16:	0a12      	lsrs	r2, r2, #8
 8002f18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    break;
 8002f22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0e5b      	lsrs	r3, r3, #25
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f3e:	687b      	ldr	r3, [r7, #4]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	007a1200 	.word	0x007a1200
 8002f54:	00f42400 	.word	0x00f42400

08002f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f60:	2300      	movs	r3, #0
 8002f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f64:	2300      	movs	r3, #0
 8002f66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8098 	beq.w	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b43      	ldr	r3, [pc, #268]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b40      	ldr	r3, [pc, #256]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f92:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a39      	ldr	r2, [pc, #228]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fae:	f7fe ff45 	bl	8001e3c <HAL_GetTick>
 8002fb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb4:	e009      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fe ff41 	bl	8001e3c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d902      	bls.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	74fb      	strb	r3, [r7, #19]
        break;
 8002fc8:	e005      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fca:	4b30      	ldr	r3, [pc, #192]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ef      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d159      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01e      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d019      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ff8:	4b23      	ldr	r3, [pc, #140]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003002:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003004:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300a:	4a1f      	ldr	r2, [pc, #124]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003014:	4b1c      	ldr	r3, [pc, #112]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301a:	4a1b      	ldr	r2, [pc, #108]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800301c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003024:	4a18      	ldr	r2, [pc, #96]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe ff01 	bl	8001e3c <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	e00b      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fefd 	bl	8001e3c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d902      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	74fb      	strb	r3, [r7, #19]
            break;
 8003054:	e006      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003056:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ec      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306a:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003070:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003078:	4903      	ldr	r1, [pc, #12]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003080:	e008      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	74bb      	strb	r3, [r7, #18]
 8003086:	e005      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003088:	40021000 	.word	0x40021000
 800308c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003094:	7c7b      	ldrb	r3, [r7, #17]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4ba7      	ldr	r3, [pc, #668]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	4aa6      	ldr	r2, [pc, #664]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b2:	4ba1      	ldr	r3, [pc, #644]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	f023 0203 	bic.w	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	499d      	ldr	r1, [pc, #628]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d4:	4b98      	ldr	r3, [pc, #608]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030da:	f023 020c 	bic.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4995      	ldr	r1, [pc, #596]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030f6:	4b90      	ldr	r3, [pc, #576]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	498c      	ldr	r1, [pc, #560]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003118:	4b87      	ldr	r3, [pc, #540]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	4984      	ldr	r1, [pc, #528]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800313a:	4b7f      	ldr	r3, [pc, #508]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003140:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	497b      	ldr	r1, [pc, #492]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800315c:	4b76      	ldr	r3, [pc, #472]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003162:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	4973      	ldr	r1, [pc, #460]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800317e:	4b6e      	ldr	r3, [pc, #440]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003184:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	496a      	ldr	r1, [pc, #424]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031a0:	4b65      	ldr	r3, [pc, #404]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4962      	ldr	r1, [pc, #392]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	4959      	ldr	r1, [pc, #356]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031e4:	4b54      	ldr	r3, [pc, #336]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f2:	4951      	ldr	r1, [pc, #324]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003206:	4b4c      	ldr	r3, [pc, #304]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	4948      	ldr	r1, [pc, #288]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003228:	4b43      	ldr	r3, [pc, #268]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	4940      	ldr	r1, [pc, #256]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003246:	d105      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003248:	4b3b      	ldr	r3, [pc, #236]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a3a      	ldr	r2, [pc, #232]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003252:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003260:	4b35      	ldr	r3, [pc, #212]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326e:	4932      	ldr	r1, [pc, #200]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800327e:	d105      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003280:	4b2d      	ldr	r3, [pc, #180]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a2c      	ldr	r2, [pc, #176]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800328a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003298:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	4924      	ldr	r1, [pc, #144]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b6:	d105      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d015      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d0:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032de:	4916      	ldr	r1, [pc, #88]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032ee:	d105      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a10      	ldr	r2, [pc, #64]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d019      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	4908      	ldr	r1, [pc, #32]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003326:	d109      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003328:	4b03      	ldr	r3, [pc, #12]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a02      	ldr	r2, [pc, #8]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003332:	60d3      	str	r3, [r2, #12]
 8003334:	e002      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d015      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003348:	4b29      	ldr	r3, [pc, #164]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	4926      	ldr	r1, [pc, #152]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003366:	d105      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003368:	4b21      	ldr	r3, [pc, #132]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a20      	ldr	r2, [pc, #128]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d015      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003380:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003386:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338e:	4918      	ldr	r1, [pc, #96]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339e:	d105      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033a0:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d015      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80033b8:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	490a      	ldr	r1, [pc, #40]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033d6:	d105      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80033e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e042      	b.n	800348c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fe fc09 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2224      	movs	r2, #36	@ 0x24
 8003422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fbb2 	bl	8003ba8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f8b3 	bl	80035b0 <UART_SetConfig>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e01b      	b.n	800348c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fc31 	bl	8003cec <UART_CheckIdleState>
 800348a:	4603      	mov	r3, r0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	@ 0x28
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d17b      	bne.n	80035a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_UART_Transmit+0x26>
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e074      	b.n	80035a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2221      	movs	r2, #33	@ 0x21
 80034ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ce:	f7fe fcb5 	bl	8001e3c <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ec:	d108      	bne.n	8003500 <HAL_UART_Transmit+0x6c>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d104      	bne.n	8003500 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	e003      	b.n	8003508 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003508:	e030      	b.n	800356c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2180      	movs	r1, #128	@ 0x80
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fc93 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e03d      	b.n	80035a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3302      	adds	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e007      	b.n	800355a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1c8      	bne.n	800350a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2200      	movs	r2, #0
 8003580:	2140      	movs	r1, #64	@ 0x40
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fc5c 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e006      	b.n	80035a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b4:	b08c      	sub	sp, #48	@ 0x30
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4baa      	ldr	r3, [pc, #680]	@ (8003888 <UART_SetConfig+0x2d8>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a9f      	ldr	r2, [pc, #636]	@ (800388c <UART_SetConfig+0x2dc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003618:	4313      	orrs	r3, r2
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003626:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003630:	430b      	orrs	r3, r1
 8003632:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	f023 010f 	bic.w	r1, r3, #15
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a90      	ldr	r2, [pc, #576]	@ (8003890 <UART_SetConfig+0x2e0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d125      	bne.n	80036a0 <UART_SetConfig+0xf0>
 8003654:	4b8f      	ldr	r3, [pc, #572]	@ (8003894 <UART_SetConfig+0x2e4>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b03      	cmp	r3, #3
 8003660:	d81a      	bhi.n	8003698 <UART_SetConfig+0xe8>
 8003662:	a201      	add	r2, pc, #4	@ (adr r2, 8003668 <UART_SetConfig+0xb8>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	08003679 	.word	0x08003679
 800366c:	08003689 	.word	0x08003689
 8003670:	08003681 	.word	0x08003681
 8003674:	08003691 	.word	0x08003691
 8003678:	2301      	movs	r3, #1
 800367a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800367e:	e116      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003680:	2302      	movs	r3, #2
 8003682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003686:	e112      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003688:	2304      	movs	r3, #4
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800368e:	e10e      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003690:	2308      	movs	r3, #8
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e10a      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003698:	2310      	movs	r3, #16
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369e:	e106      	b.n	80038ae <UART_SetConfig+0x2fe>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003898 <UART_SetConfig+0x2e8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d138      	bne.n	800371c <UART_SetConfig+0x16c>
 80036aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003894 <UART_SetConfig+0x2e4>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d82d      	bhi.n	8003714 <UART_SetConfig+0x164>
 80036b8:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <UART_SetConfig+0x110>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	08003715 	.word	0x08003715
 80036c8:	08003715 	.word	0x08003715
 80036cc:	08003715 	.word	0x08003715
 80036d0:	08003705 	.word	0x08003705
 80036d4:	08003715 	.word	0x08003715
 80036d8:	08003715 	.word	0x08003715
 80036dc:	08003715 	.word	0x08003715
 80036e0:	080036fd 	.word	0x080036fd
 80036e4:	08003715 	.word	0x08003715
 80036e8:	08003715 	.word	0x08003715
 80036ec:	08003715 	.word	0x08003715
 80036f0:	0800370d 	.word	0x0800370d
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fa:	e0d8      	b.n	80038ae <UART_SetConfig+0x2fe>
 80036fc:	2302      	movs	r3, #2
 80036fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003702:	e0d4      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003704:	2304      	movs	r3, #4
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370a:	e0d0      	b.n	80038ae <UART_SetConfig+0x2fe>
 800370c:	2308      	movs	r3, #8
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003712:	e0cc      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003714:	2310      	movs	r3, #16
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800371a:	e0c8      	b.n	80038ae <UART_SetConfig+0x2fe>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5e      	ldr	r2, [pc, #376]	@ (800389c <UART_SetConfig+0x2ec>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d125      	bne.n	8003772 <UART_SetConfig+0x1c2>
 8003726:	4b5b      	ldr	r3, [pc, #364]	@ (8003894 <UART_SetConfig+0x2e4>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003730:	2b30      	cmp	r3, #48	@ 0x30
 8003732:	d016      	beq.n	8003762 <UART_SetConfig+0x1b2>
 8003734:	2b30      	cmp	r3, #48	@ 0x30
 8003736:	d818      	bhi.n	800376a <UART_SetConfig+0x1ba>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d00a      	beq.n	8003752 <UART_SetConfig+0x1a2>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d814      	bhi.n	800376a <UART_SetConfig+0x1ba>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <UART_SetConfig+0x19a>
 8003744:	2b10      	cmp	r3, #16
 8003746:	d008      	beq.n	800375a <UART_SetConfig+0x1aa>
 8003748:	e00f      	b.n	800376a <UART_SetConfig+0x1ba>
 800374a:	2300      	movs	r3, #0
 800374c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003750:	e0ad      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003752:	2302      	movs	r3, #2
 8003754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003758:	e0a9      	b.n	80038ae <UART_SetConfig+0x2fe>
 800375a:	2304      	movs	r3, #4
 800375c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003760:	e0a5      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003762:	2308      	movs	r3, #8
 8003764:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003768:	e0a1      	b.n	80038ae <UART_SetConfig+0x2fe>
 800376a:	2310      	movs	r3, #16
 800376c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003770:	e09d      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a4a      	ldr	r2, [pc, #296]	@ (80038a0 <UART_SetConfig+0x2f0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d125      	bne.n	80037c8 <UART_SetConfig+0x218>
 800377c:	4b45      	ldr	r3, [pc, #276]	@ (8003894 <UART_SetConfig+0x2e4>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003786:	2bc0      	cmp	r3, #192	@ 0xc0
 8003788:	d016      	beq.n	80037b8 <UART_SetConfig+0x208>
 800378a:	2bc0      	cmp	r3, #192	@ 0xc0
 800378c:	d818      	bhi.n	80037c0 <UART_SetConfig+0x210>
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d00a      	beq.n	80037a8 <UART_SetConfig+0x1f8>
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d814      	bhi.n	80037c0 <UART_SetConfig+0x210>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <UART_SetConfig+0x1f0>
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d008      	beq.n	80037b0 <UART_SetConfig+0x200>
 800379e:	e00f      	b.n	80037c0 <UART_SetConfig+0x210>
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037a6:	e082      	b.n	80038ae <UART_SetConfig+0x2fe>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ae:	e07e      	b.n	80038ae <UART_SetConfig+0x2fe>
 80037b0:	2304      	movs	r3, #4
 80037b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037b6:	e07a      	b.n	80038ae <UART_SetConfig+0x2fe>
 80037b8:	2308      	movs	r3, #8
 80037ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037be:	e076      	b.n	80038ae <UART_SetConfig+0x2fe>
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c6:	e072      	b.n	80038ae <UART_SetConfig+0x2fe>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a35      	ldr	r2, [pc, #212]	@ (80038a4 <UART_SetConfig+0x2f4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d12a      	bne.n	8003828 <UART_SetConfig+0x278>
 80037d2:	4b30      	ldr	r3, [pc, #192]	@ (8003894 <UART_SetConfig+0x2e4>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037e0:	d01a      	beq.n	8003818 <UART_SetConfig+0x268>
 80037e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037e6:	d81b      	bhi.n	8003820 <UART_SetConfig+0x270>
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ec:	d00c      	beq.n	8003808 <UART_SetConfig+0x258>
 80037ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f2:	d815      	bhi.n	8003820 <UART_SetConfig+0x270>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <UART_SetConfig+0x250>
 80037f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fc:	d008      	beq.n	8003810 <UART_SetConfig+0x260>
 80037fe:	e00f      	b.n	8003820 <UART_SetConfig+0x270>
 8003800:	2300      	movs	r3, #0
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003806:	e052      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003808:	2302      	movs	r3, #2
 800380a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800380e:	e04e      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003810:	2304      	movs	r3, #4
 8003812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003816:	e04a      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003818:	2308      	movs	r3, #8
 800381a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800381e:	e046      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003820:	2310      	movs	r3, #16
 8003822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003826:	e042      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a17      	ldr	r2, [pc, #92]	@ (800388c <UART_SetConfig+0x2dc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d13a      	bne.n	80038a8 <UART_SetConfig+0x2f8>
 8003832:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <UART_SetConfig+0x2e4>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800383c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003840:	d01a      	beq.n	8003878 <UART_SetConfig+0x2c8>
 8003842:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003846:	d81b      	bhi.n	8003880 <UART_SetConfig+0x2d0>
 8003848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800384c:	d00c      	beq.n	8003868 <UART_SetConfig+0x2b8>
 800384e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003852:	d815      	bhi.n	8003880 <UART_SetConfig+0x2d0>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <UART_SetConfig+0x2b0>
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385c:	d008      	beq.n	8003870 <UART_SetConfig+0x2c0>
 800385e:	e00f      	b.n	8003880 <UART_SetConfig+0x2d0>
 8003860:	2300      	movs	r3, #0
 8003862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003866:	e022      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003868:	2302      	movs	r3, #2
 800386a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386e:	e01e      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003870:	2304      	movs	r3, #4
 8003872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003876:	e01a      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003878:	2308      	movs	r3, #8
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387e:	e016      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003880:	2310      	movs	r3, #16
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003886:	e012      	b.n	80038ae <UART_SetConfig+0x2fe>
 8003888:	cfff69f3 	.word	0xcfff69f3
 800388c:	40008000 	.word	0x40008000
 8003890:	40013800 	.word	0x40013800
 8003894:	40021000 	.word	0x40021000
 8003898:	40004400 	.word	0x40004400
 800389c:	40004800 	.word	0x40004800
 80038a0:	40004c00 	.word	0x40004c00
 80038a4:	40005000 	.word	0x40005000
 80038a8:	2310      	movs	r3, #16
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4aae      	ldr	r2, [pc, #696]	@ (8003b6c <UART_SetConfig+0x5bc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	f040 8097 	bne.w	80039e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d823      	bhi.n	800390a <UART_SetConfig+0x35a>
 80038c2:	a201      	add	r2, pc, #4	@ (adr r2, 80038c8 <UART_SetConfig+0x318>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	0800390b 	.word	0x0800390b
 80038d0:	080038f5 	.word	0x080038f5
 80038d4:	0800390b 	.word	0x0800390b
 80038d8:	080038fb 	.word	0x080038fb
 80038dc:	0800390b 	.word	0x0800390b
 80038e0:	0800390b 	.word	0x0800390b
 80038e4:	0800390b 	.word	0x0800390b
 80038e8:	08003903 	.word	0x08003903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7ff fac2 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 80038f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038f2:	e010      	b.n	8003916 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f4:	4b9e      	ldr	r3, [pc, #632]	@ (8003b70 <UART_SetConfig+0x5c0>)
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038f8:	e00d      	b.n	8003916 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fa:	f7ff fa4d 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 80038fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003900:	e009      	b.n	8003916 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003908:	e005      	b.n	8003916 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8130 	beq.w	8003b7e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	4a94      	ldr	r2, [pc, #592]	@ (8003b74 <UART_SetConfig+0x5c4>)
 8003924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003928:	461a      	mov	r2, r3
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003930:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4413      	add	r3, r2
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	429a      	cmp	r2, r3
 8003940:	d305      	bcc.n	800394e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	429a      	cmp	r2, r3
 800394c:	d903      	bls.n	8003956 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003954:	e113      	b.n	8003b7e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	2200      	movs	r2, #0
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	60fa      	str	r2, [r7, #12]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	4a84      	ldr	r2, [pc, #528]	@ (8003b74 <UART_SetConfig+0x5c4>)
 8003964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003968:	b29b      	uxth	r3, r3
 800396a:	2200      	movs	r2, #0
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003974:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003978:	f7fd f914 	bl	8000ba4 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	020b      	lsls	r3, r1, #8
 800398e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003992:	0202      	lsls	r2, r0, #8
 8003994:	6979      	ldr	r1, [r7, #20]
 8003996:	6849      	ldr	r1, [r1, #4]
 8003998:	0849      	lsrs	r1, r1, #1
 800399a:	2000      	movs	r0, #0
 800399c:	460c      	mov	r4, r1
 800399e:	4605      	mov	r5, r0
 80039a0:	eb12 0804 	adds.w	r8, r2, r4
 80039a4:	eb43 0905 	adc.w	r9, r3, r5
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	469a      	mov	sl, r3
 80039b0:	4693      	mov	fp, r2
 80039b2:	4652      	mov	r2, sl
 80039b4:	465b      	mov	r3, fp
 80039b6:	4640      	mov	r0, r8
 80039b8:	4649      	mov	r1, r9
 80039ba:	f7fd f8f3 	bl	8000ba4 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4613      	mov	r3, r2
 80039c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039cc:	d308      	bcc.n	80039e0 <UART_SetConfig+0x430>
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d4:	d204      	bcs.n	80039e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6a3a      	ldr	r2, [r7, #32]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	e0ce      	b.n	8003b7e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039e6:	e0ca      	b.n	8003b7e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039f0:	d166      	bne.n	8003ac0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80039f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d827      	bhi.n	8003a4a <UART_SetConfig+0x49a>
 80039fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <UART_SetConfig+0x450>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7ff fa26 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8003a28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a2a:	e014      	b.n	8003a56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7ff fa38 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 8003a30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a32:	e010      	b.n	8003a56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b4e      	ldr	r3, [pc, #312]	@ (8003b70 <UART_SetConfig+0x5c0>)
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a38:	e00d      	b.n	8003a56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7ff f9ad 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8003a3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a40:	e009      	b.n	8003a56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a48:	e005      	b.n	8003a56 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8090 	beq.w	8003b7e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	4a44      	ldr	r2, [pc, #272]	@ (8003b74 <UART_SetConfig+0x5c4>)
 8003a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a70:	005a      	lsls	r2, r3, #1
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	441a      	add	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	d916      	bls.n	8003ab8 <UART_SetConfig+0x508>
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a90:	d212      	bcs.n	8003ab8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f023 030f 	bic.w	r3, r3, #15
 8003a9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	8bfb      	ldrh	r3, [r7, #30]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	8bfa      	ldrh	r2, [r7, #30]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	e062      	b.n	8003b7e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003abe:	e05e      	b.n	8003b7e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ac0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d828      	bhi.n	8003b1a <UART_SetConfig+0x56a>
 8003ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad0 <UART_SetConfig+0x520>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003af5 	.word	0x08003af5
 8003ad4:	08003afd 	.word	0x08003afd
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b1b 	.word	0x08003b1b
 8003ae0:	08003b0b 	.word	0x08003b0b
 8003ae4:	08003b1b 	.word	0x08003b1b
 8003ae8:	08003b1b 	.word	0x08003b1b
 8003aec:	08003b1b 	.word	0x08003b1b
 8003af0:	08003b13 	.word	0x08003b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af4:	f7ff f9be 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8003af8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003afa:	e014      	b.n	8003b26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003afc:	f7ff f9d0 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 8003b00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b02:	e010      	b.n	8003b26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b04:	4b1a      	ldr	r3, [pc, #104]	@ (8003b70 <UART_SetConfig+0x5c0>)
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b08:	e00d      	b.n	8003b26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7ff f945 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8003b0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b10:	e009      	b.n	8003b26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b18:	e005      	b.n	8003b26 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b24:	bf00      	nop
    }

    if (pclk != 0U)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d028      	beq.n	8003b7e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	4a10      	ldr	r2, [pc, #64]	@ (8003b74 <UART_SetConfig+0x5c4>)
 8003b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b36:	461a      	mov	r2, r3
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	441a      	add	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	2b0f      	cmp	r3, #15
 8003b54:	d910      	bls.n	8003b78 <UART_SetConfig+0x5c8>
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5c:	d20c      	bcs.n	8003b78 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	e009      	b.n	8003b7e <UART_SetConfig+0x5ce>
 8003b6a:	bf00      	nop
 8003b6c:	40008000 	.word	0x40008000
 8003b70:	00f42400 	.word	0x00f42400
 8003b74:	08004754 	.word	0x08004754
      }
      else
      {
        ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2200      	movs	r2, #0
 8003b92:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b9a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3730      	adds	r7, #48	@ 0x30
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01a      	beq.n	8003cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca6:	d10a      	bne.n	8003cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b098      	sub	sp, #96	@ 0x60
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cfc:	f7fe f89e 	bl	8001e3c <HAL_GetTick>
 8003d00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d12f      	bne.n	8003d70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f88e 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d022      	beq.n	8003d70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e6      	bne.n	8003d2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e063      	b.n	8003e38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d149      	bne.n	8003e12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d86:	2200      	movs	r2, #0
 8003d88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f857 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d03c      	beq.n	8003e12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	623b      	str	r3, [r7, #32]
   return(result);
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003db8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e6      	bne.n	8003d98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dea:	61fa      	str	r2, [r7, #28]
 8003dec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	617b      	str	r3, [r7, #20]
   return(result);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e5      	bne.n	8003dca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e012      	b.n	8003e38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3758      	adds	r7, #88	@ 0x58
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e50:	e04f      	b.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e58:	d04b      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fd ffef 	bl	8001e3c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e04e      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d037      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b80      	cmp	r3, #128	@ 0x80
 8003e86:	d034      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b40      	cmp	r3, #64	@ 0x40
 8003e8c:	d031      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d110      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f838 	bl	8003f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2208      	movs	r2, #8
 8003eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e029      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ecc:	d111      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f81e 	bl	8003f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e00f      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d0a0      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b095      	sub	sp, #84	@ 0x54
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e6      	bne.n	8003f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e3      	bne.n	8003f54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d118      	bne.n	8003fc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6979      	ldr	r1, [r7, #20]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e6      	bne.n	8003f94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fda:	bf00      	nop
 8003fdc:	3754      	adds	r7, #84	@ 0x54
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_UARTEx_DisableFifoMode+0x16>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e027      	b.n	800404c <HAL_UARTEx_DisableFifoMode+0x66>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	@ 0x24
 8004008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800402a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800406c:	2302      	movs	r3, #2
 800406e:	e02d      	b.n	80040cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2224      	movs	r2, #36	@ 0x24
 800407c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f84f 	bl	8004150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e02d      	b.n	8004148 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	@ 0x24
 80040f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f811 	bl	8004150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004170:	e031      	b.n	80041d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004172:	2308      	movs	r3, #8
 8004174:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004176:	2308      	movs	r3, #8
 8004178:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	0e5b      	lsrs	r3, r3, #25
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	0f5b      	lsrs	r3, r3, #29
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800419a:	7bbb      	ldrb	r3, [r7, #14]
 800419c:	7b3a      	ldrb	r2, [r7, #12]
 800419e:	4911      	ldr	r1, [pc, #68]	@ (80041e4 <UARTEx_SetNbDataToProcess+0x94>)
 80041a0:	5c8a      	ldrb	r2, [r1, r2]
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041a6:	7b3a      	ldrb	r2, [r7, #12]
 80041a8:	490f      	ldr	r1, [pc, #60]	@ (80041e8 <UARTEx_SetNbDataToProcess+0x98>)
 80041aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	7b7a      	ldrb	r2, [r7, #13]
 80041bc:	4909      	ldr	r1, [pc, #36]	@ (80041e4 <UARTEx_SetNbDataToProcess+0x94>)
 80041be:	5c8a      	ldrb	r2, [r1, r2]
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80041c4:	7b7a      	ldrb	r2, [r7, #13]
 80041c6:	4908      	ldr	r1, [pc, #32]	@ (80041e8 <UARTEx_SetNbDataToProcess+0x98>)
 80041c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	0800476c 	.word	0x0800476c
 80041e8:	08004774 	.word	0x08004774

080041ec <memset>:
 80041ec:	4402      	add	r2, r0
 80041ee:	4603      	mov	r3, r0
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d100      	bne.n	80041f6 <memset+0xa>
 80041f4:	4770      	bx	lr
 80041f6:	f803 1b01 	strb.w	r1, [r3], #1
 80041fa:	e7f9      	b.n	80041f0 <memset+0x4>

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004234 <__libc_init_array+0x38>)
 8004200:	4c0d      	ldr	r4, [pc, #52]	@ (8004238 <__libc_init_array+0x3c>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	2600      	movs	r6, #0
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	4d0b      	ldr	r5, [pc, #44]	@ (800423c <__libc_init_array+0x40>)
 800420e:	4c0c      	ldr	r4, [pc, #48]	@ (8004240 <__libc_init_array+0x44>)
 8004210:	f000 fa82 	bl	8004718 <_init>
 8004214:	1b64      	subs	r4, r4, r5
 8004216:	10a4      	asrs	r4, r4, #2
 8004218:	2600      	movs	r6, #0
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	080047f8 	.word	0x080047f8
 8004238:	080047f8 	.word	0x080047f8
 800423c:	080047f8 	.word	0x080047f8
 8004240:	080047fc 	.word	0x080047fc

08004244 <atan2>:
 8004244:	f000 b800 	b.w	8004248 <__ieee754_atan2>

08004248 <__ieee754_atan2>:
 8004248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800424c:	ec57 6b11 	vmov	r6, r7, d1
 8004250:	4273      	negs	r3, r6
 8004252:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80043d0 <__ieee754_atan2+0x188>
 8004256:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800425a:	4333      	orrs	r3, r6
 800425c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004260:	4543      	cmp	r3, r8
 8004262:	ec51 0b10 	vmov	r0, r1, d0
 8004266:	4635      	mov	r5, r6
 8004268:	d809      	bhi.n	800427e <__ieee754_atan2+0x36>
 800426a:	4244      	negs	r4, r0
 800426c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004270:	4304      	orrs	r4, r0
 8004272:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004276:	4544      	cmp	r4, r8
 8004278:	468e      	mov	lr, r1
 800427a:	4681      	mov	r9, r0
 800427c:	d907      	bls.n	800428e <__ieee754_atan2+0x46>
 800427e:	4632      	mov	r2, r6
 8004280:	463b      	mov	r3, r7
 8004282:	f7fb ffcf 	bl	8000224 <__adddf3>
 8004286:	ec41 0b10 	vmov	d0, r0, r1
 800428a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800428e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8004292:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8004296:	4334      	orrs	r4, r6
 8004298:	d103      	bne.n	80042a2 <__ieee754_atan2+0x5a>
 800429a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800429e:	f000 b89b 	b.w	80043d8 <atan>
 80042a2:	17bc      	asrs	r4, r7, #30
 80042a4:	f004 0402 	and.w	r4, r4, #2
 80042a8:	ea53 0909 	orrs.w	r9, r3, r9
 80042ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80042b0:	d107      	bne.n	80042c2 <__ieee754_atan2+0x7a>
 80042b2:	2c02      	cmp	r4, #2
 80042b4:	d05f      	beq.n	8004376 <__ieee754_atan2+0x12e>
 80042b6:	2c03      	cmp	r4, #3
 80042b8:	d1e5      	bne.n	8004286 <__ieee754_atan2+0x3e>
 80042ba:	a141      	add	r1, pc, #260	@ (adr r1, 80043c0 <__ieee754_atan2+0x178>)
 80042bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042c0:	e7e1      	b.n	8004286 <__ieee754_atan2+0x3e>
 80042c2:	4315      	orrs	r5, r2
 80042c4:	d106      	bne.n	80042d4 <__ieee754_atan2+0x8c>
 80042c6:	f1be 0f00 	cmp.w	lr, #0
 80042ca:	da5f      	bge.n	800438c <__ieee754_atan2+0x144>
 80042cc:	a13e      	add	r1, pc, #248	@ (adr r1, 80043c8 <__ieee754_atan2+0x180>)
 80042ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042d2:	e7d8      	b.n	8004286 <__ieee754_atan2+0x3e>
 80042d4:	4542      	cmp	r2, r8
 80042d6:	d10f      	bne.n	80042f8 <__ieee754_atan2+0xb0>
 80042d8:	4293      	cmp	r3, r2
 80042da:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80042de:	d107      	bne.n	80042f0 <__ieee754_atan2+0xa8>
 80042e0:	2c02      	cmp	r4, #2
 80042e2:	d84c      	bhi.n	800437e <__ieee754_atan2+0x136>
 80042e4:	4b34      	ldr	r3, [pc, #208]	@ (80043b8 <__ieee754_atan2+0x170>)
 80042e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ee:	e7ca      	b.n	8004286 <__ieee754_atan2+0x3e>
 80042f0:	2c02      	cmp	r4, #2
 80042f2:	d848      	bhi.n	8004386 <__ieee754_atan2+0x13e>
 80042f4:	4b31      	ldr	r3, [pc, #196]	@ (80043bc <__ieee754_atan2+0x174>)
 80042f6:	e7f6      	b.n	80042e6 <__ieee754_atan2+0x9e>
 80042f8:	4543      	cmp	r3, r8
 80042fa:	d0e4      	beq.n	80042c6 <__ieee754_atan2+0x7e>
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004302:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004306:	da1e      	bge.n	8004346 <__ieee754_atan2+0xfe>
 8004308:	2f00      	cmp	r7, #0
 800430a:	da01      	bge.n	8004310 <__ieee754_atan2+0xc8>
 800430c:	323c      	adds	r2, #60	@ 0x3c
 800430e:	db1e      	blt.n	800434e <__ieee754_atan2+0x106>
 8004310:	4632      	mov	r2, r6
 8004312:	463b      	mov	r3, r7
 8004314:	f7fc fa66 	bl	80007e4 <__aeabi_ddiv>
 8004318:	ec41 0b10 	vmov	d0, r0, r1
 800431c:	f000 f9f4 	bl	8004708 <fabs>
 8004320:	f000 f85a 	bl	80043d8 <atan>
 8004324:	ec51 0b10 	vmov	r0, r1, d0
 8004328:	2c01      	cmp	r4, #1
 800432a:	d013      	beq.n	8004354 <__ieee754_atan2+0x10c>
 800432c:	2c02      	cmp	r4, #2
 800432e:	d015      	beq.n	800435c <__ieee754_atan2+0x114>
 8004330:	2c00      	cmp	r4, #0
 8004332:	d0a8      	beq.n	8004286 <__ieee754_atan2+0x3e>
 8004334:	a318      	add	r3, pc, #96	@ (adr r3, 8004398 <__ieee754_atan2+0x150>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fb ff71 	bl	8000220 <__aeabi_dsub>
 800433e:	a318      	add	r3, pc, #96	@ (adr r3, 80043a0 <__ieee754_atan2+0x158>)
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	e014      	b.n	8004370 <__ieee754_atan2+0x128>
 8004346:	a118      	add	r1, pc, #96	@ (adr r1, 80043a8 <__ieee754_atan2+0x160>)
 8004348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800434c:	e7ec      	b.n	8004328 <__ieee754_atan2+0xe0>
 800434e:	2000      	movs	r0, #0
 8004350:	2100      	movs	r1, #0
 8004352:	e7e9      	b.n	8004328 <__ieee754_atan2+0xe0>
 8004354:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004358:	4619      	mov	r1, r3
 800435a:	e794      	b.n	8004286 <__ieee754_atan2+0x3e>
 800435c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004398 <__ieee754_atan2+0x150>)
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	f7fb ff5d 	bl	8000220 <__aeabi_dsub>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	a10d      	add	r1, pc, #52	@ (adr r1, 80043a0 <__ieee754_atan2+0x158>)
 800436c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004370:	f7fb ff56 	bl	8000220 <__aeabi_dsub>
 8004374:	e787      	b.n	8004286 <__ieee754_atan2+0x3e>
 8004376:	a10a      	add	r1, pc, #40	@ (adr r1, 80043a0 <__ieee754_atan2+0x158>)
 8004378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800437c:	e783      	b.n	8004286 <__ieee754_atan2+0x3e>
 800437e:	a10c      	add	r1, pc, #48	@ (adr r1, 80043b0 <__ieee754_atan2+0x168>)
 8004380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004384:	e77f      	b.n	8004286 <__ieee754_atan2+0x3e>
 8004386:	2000      	movs	r0, #0
 8004388:	2100      	movs	r1, #0
 800438a:	e77c      	b.n	8004286 <__ieee754_atan2+0x3e>
 800438c:	a106      	add	r1, pc, #24	@ (adr r1, 80043a8 <__ieee754_atan2+0x160>)
 800438e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004392:	e778      	b.n	8004286 <__ieee754_atan2+0x3e>
 8004394:	f3af 8000 	nop.w
 8004398:	33145c07 	.word	0x33145c07
 800439c:	3ca1a626 	.word	0x3ca1a626
 80043a0:	54442d18 	.word	0x54442d18
 80043a4:	400921fb 	.word	0x400921fb
 80043a8:	54442d18 	.word	0x54442d18
 80043ac:	3ff921fb 	.word	0x3ff921fb
 80043b0:	54442d18 	.word	0x54442d18
 80043b4:	3fe921fb 	.word	0x3fe921fb
 80043b8:	08004798 	.word	0x08004798
 80043bc:	08004780 	.word	0x08004780
 80043c0:	54442d18 	.word	0x54442d18
 80043c4:	c00921fb 	.word	0xc00921fb
 80043c8:	54442d18 	.word	0x54442d18
 80043cc:	bff921fb 	.word	0xbff921fb
 80043d0:	7ff00000 	.word	0x7ff00000
 80043d4:	00000000 	.word	0x00000000

080043d8 <atan>:
 80043d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	ec55 4b10 	vmov	r4, r5, d0
 80043e0:	4bbf      	ldr	r3, [pc, #764]	@ (80046e0 <atan+0x308>)
 80043e2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80043e6:	429e      	cmp	r6, r3
 80043e8:	46ab      	mov	fp, r5
 80043ea:	d918      	bls.n	800441e <atan+0x46>
 80043ec:	4bbd      	ldr	r3, [pc, #756]	@ (80046e4 <atan+0x30c>)
 80043ee:	429e      	cmp	r6, r3
 80043f0:	d801      	bhi.n	80043f6 <atan+0x1e>
 80043f2:	d109      	bne.n	8004408 <atan+0x30>
 80043f4:	b144      	cbz	r4, 8004408 <atan+0x30>
 80043f6:	4622      	mov	r2, r4
 80043f8:	462b      	mov	r3, r5
 80043fa:	4620      	mov	r0, r4
 80043fc:	4629      	mov	r1, r5
 80043fe:	f7fb ff11 	bl	8000224 <__adddf3>
 8004402:	4604      	mov	r4, r0
 8004404:	460d      	mov	r5, r1
 8004406:	e006      	b.n	8004416 <atan+0x3e>
 8004408:	f1bb 0f00 	cmp.w	fp, #0
 800440c:	f340 812b 	ble.w	8004666 <atan+0x28e>
 8004410:	a597      	add	r5, pc, #604	@ (adr r5, 8004670 <atan+0x298>)
 8004412:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004416:	ec45 4b10 	vmov	d0, r4, r5
 800441a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441e:	4bb2      	ldr	r3, [pc, #712]	@ (80046e8 <atan+0x310>)
 8004420:	429e      	cmp	r6, r3
 8004422:	d813      	bhi.n	800444c <atan+0x74>
 8004424:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8004428:	429e      	cmp	r6, r3
 800442a:	d80c      	bhi.n	8004446 <atan+0x6e>
 800442c:	a392      	add	r3, pc, #584	@ (adr r3, 8004678 <atan+0x2a0>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	4620      	mov	r0, r4
 8004434:	4629      	mov	r1, r5
 8004436:	f7fb fef5 	bl	8000224 <__adddf3>
 800443a:	4bac      	ldr	r3, [pc, #688]	@ (80046ec <atan+0x314>)
 800443c:	2200      	movs	r2, #0
 800443e:	f7fc fb37 	bl	8000ab0 <__aeabi_dcmpgt>
 8004442:	2800      	cmp	r0, #0
 8004444:	d1e7      	bne.n	8004416 <atan+0x3e>
 8004446:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800444a:	e029      	b.n	80044a0 <atan+0xc8>
 800444c:	f000 f95c 	bl	8004708 <fabs>
 8004450:	4ba7      	ldr	r3, [pc, #668]	@ (80046f0 <atan+0x318>)
 8004452:	429e      	cmp	r6, r3
 8004454:	ec55 4b10 	vmov	r4, r5, d0
 8004458:	f200 80bc 	bhi.w	80045d4 <atan+0x1fc>
 800445c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8004460:	429e      	cmp	r6, r3
 8004462:	f200 809e 	bhi.w	80045a2 <atan+0x1ca>
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	4620      	mov	r0, r4
 800446c:	4629      	mov	r1, r5
 800446e:	f7fb fed9 	bl	8000224 <__adddf3>
 8004472:	4b9e      	ldr	r3, [pc, #632]	@ (80046ec <atan+0x314>)
 8004474:	2200      	movs	r2, #0
 8004476:	f7fb fed3 	bl	8000220 <__aeabi_dsub>
 800447a:	2200      	movs	r2, #0
 800447c:	4606      	mov	r6, r0
 800447e:	460f      	mov	r7, r1
 8004480:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004484:	4620      	mov	r0, r4
 8004486:	4629      	mov	r1, r5
 8004488:	f7fb fecc 	bl	8000224 <__adddf3>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4630      	mov	r0, r6
 8004492:	4639      	mov	r1, r7
 8004494:	f7fc f9a6 	bl	80007e4 <__aeabi_ddiv>
 8004498:	f04f 0a00 	mov.w	sl, #0
 800449c:	4604      	mov	r4, r0
 800449e:	460d      	mov	r5, r1
 80044a0:	4622      	mov	r2, r4
 80044a2:	462b      	mov	r3, r5
 80044a4:	4620      	mov	r0, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	f7fc f872 	bl	8000590 <__aeabi_dmul>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4680      	mov	r8, r0
 80044b2:	4689      	mov	r9, r1
 80044b4:	f7fc f86c 	bl	8000590 <__aeabi_dmul>
 80044b8:	a371      	add	r3, pc, #452	@ (adr r3, 8004680 <atan+0x2a8>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	4606      	mov	r6, r0
 80044c0:	460f      	mov	r7, r1
 80044c2:	f7fc f865 	bl	8000590 <__aeabi_dmul>
 80044c6:	a370      	add	r3, pc, #448	@ (adr r3, 8004688 <atan+0x2b0>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f7fb feaa 	bl	8000224 <__adddf3>
 80044d0:	4632      	mov	r2, r6
 80044d2:	463b      	mov	r3, r7
 80044d4:	f7fc f85c 	bl	8000590 <__aeabi_dmul>
 80044d8:	a36d      	add	r3, pc, #436	@ (adr r3, 8004690 <atan+0x2b8>)
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	f7fb fea1 	bl	8000224 <__adddf3>
 80044e2:	4632      	mov	r2, r6
 80044e4:	463b      	mov	r3, r7
 80044e6:	f7fc f853 	bl	8000590 <__aeabi_dmul>
 80044ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8004698 <atan+0x2c0>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f7fb fe98 	bl	8000224 <__adddf3>
 80044f4:	4632      	mov	r2, r6
 80044f6:	463b      	mov	r3, r7
 80044f8:	f7fc f84a 	bl	8000590 <__aeabi_dmul>
 80044fc:	a368      	add	r3, pc, #416	@ (adr r3, 80046a0 <atan+0x2c8>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fb fe8f 	bl	8000224 <__adddf3>
 8004506:	4632      	mov	r2, r6
 8004508:	463b      	mov	r3, r7
 800450a:	f7fc f841 	bl	8000590 <__aeabi_dmul>
 800450e:	a366      	add	r3, pc, #408	@ (adr r3, 80046a8 <atan+0x2d0>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fb fe86 	bl	8000224 <__adddf3>
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	f7fc f838 	bl	8000590 <__aeabi_dmul>
 8004520:	a363      	add	r3, pc, #396	@ (adr r3, 80046b0 <atan+0x2d8>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	4680      	mov	r8, r0
 8004528:	4689      	mov	r9, r1
 800452a:	4630      	mov	r0, r6
 800452c:	4639      	mov	r1, r7
 800452e:	f7fc f82f 	bl	8000590 <__aeabi_dmul>
 8004532:	a361      	add	r3, pc, #388	@ (adr r3, 80046b8 <atan+0x2e0>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f7fb fe72 	bl	8000220 <__aeabi_dsub>
 800453c:	4632      	mov	r2, r6
 800453e:	463b      	mov	r3, r7
 8004540:	f7fc f826 	bl	8000590 <__aeabi_dmul>
 8004544:	a35e      	add	r3, pc, #376	@ (adr r3, 80046c0 <atan+0x2e8>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fb fe69 	bl	8000220 <__aeabi_dsub>
 800454e:	4632      	mov	r2, r6
 8004550:	463b      	mov	r3, r7
 8004552:	f7fc f81d 	bl	8000590 <__aeabi_dmul>
 8004556:	a35c      	add	r3, pc, #368	@ (adr r3, 80046c8 <atan+0x2f0>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fb fe60 	bl	8000220 <__aeabi_dsub>
 8004560:	4632      	mov	r2, r6
 8004562:	463b      	mov	r3, r7
 8004564:	f7fc f814 	bl	8000590 <__aeabi_dmul>
 8004568:	a359      	add	r3, pc, #356	@ (adr r3, 80046d0 <atan+0x2f8>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb fe57 	bl	8000220 <__aeabi_dsub>
 8004572:	4632      	mov	r2, r6
 8004574:	463b      	mov	r3, r7
 8004576:	f7fc f80b 	bl	8000590 <__aeabi_dmul>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4640      	mov	r0, r8
 8004580:	4649      	mov	r1, r9
 8004582:	f7fb fe4f 	bl	8000224 <__adddf3>
 8004586:	4622      	mov	r2, r4
 8004588:	462b      	mov	r3, r5
 800458a:	f7fc f801 	bl	8000590 <__aeabi_dmul>
 800458e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	d148      	bne.n	800462a <atan+0x252>
 8004598:	4620      	mov	r0, r4
 800459a:	4629      	mov	r1, r5
 800459c:	f7fb fe40 	bl	8000220 <__aeabi_dsub>
 80045a0:	e72f      	b.n	8004402 <atan+0x2a>
 80045a2:	4b52      	ldr	r3, [pc, #328]	@ (80046ec <atan+0x314>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	4620      	mov	r0, r4
 80045a8:	4629      	mov	r1, r5
 80045aa:	f7fb fe39 	bl	8000220 <__aeabi_dsub>
 80045ae:	4b4f      	ldr	r3, [pc, #316]	@ (80046ec <atan+0x314>)
 80045b0:	4606      	mov	r6, r0
 80045b2:	460f      	mov	r7, r1
 80045b4:	2200      	movs	r2, #0
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fb fe33 	bl	8000224 <__adddf3>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4630      	mov	r0, r6
 80045c4:	4639      	mov	r1, r7
 80045c6:	f7fc f90d 	bl	80007e4 <__aeabi_ddiv>
 80045ca:	f04f 0a01 	mov.w	sl, #1
 80045ce:	4604      	mov	r4, r0
 80045d0:	460d      	mov	r5, r1
 80045d2:	e765      	b.n	80044a0 <atan+0xc8>
 80045d4:	4b47      	ldr	r3, [pc, #284]	@ (80046f4 <atan+0x31c>)
 80045d6:	429e      	cmp	r6, r3
 80045d8:	d21c      	bcs.n	8004614 <atan+0x23c>
 80045da:	4b47      	ldr	r3, [pc, #284]	@ (80046f8 <atan+0x320>)
 80045dc:	2200      	movs	r2, #0
 80045de:	4620      	mov	r0, r4
 80045e0:	4629      	mov	r1, r5
 80045e2:	f7fb fe1d 	bl	8000220 <__aeabi_dsub>
 80045e6:	4b44      	ldr	r3, [pc, #272]	@ (80046f8 <atan+0x320>)
 80045e8:	4606      	mov	r6, r0
 80045ea:	460f      	mov	r7, r1
 80045ec:	2200      	movs	r2, #0
 80045ee:	4620      	mov	r0, r4
 80045f0:	4629      	mov	r1, r5
 80045f2:	f7fb ffcd 	bl	8000590 <__aeabi_dmul>
 80045f6:	4b3d      	ldr	r3, [pc, #244]	@ (80046ec <atan+0x314>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	f7fb fe13 	bl	8000224 <__adddf3>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4630      	mov	r0, r6
 8004604:	4639      	mov	r1, r7
 8004606:	f7fc f8ed 	bl	80007e4 <__aeabi_ddiv>
 800460a:	f04f 0a02 	mov.w	sl, #2
 800460e:	4604      	mov	r4, r0
 8004610:	460d      	mov	r5, r1
 8004612:	e745      	b.n	80044a0 <atan+0xc8>
 8004614:	4622      	mov	r2, r4
 8004616:	462b      	mov	r3, r5
 8004618:	4938      	ldr	r1, [pc, #224]	@ (80046fc <atan+0x324>)
 800461a:	2000      	movs	r0, #0
 800461c:	f7fc f8e2 	bl	80007e4 <__aeabi_ddiv>
 8004620:	f04f 0a03 	mov.w	sl, #3
 8004624:	4604      	mov	r4, r0
 8004626:	460d      	mov	r5, r1
 8004628:	e73a      	b.n	80044a0 <atan+0xc8>
 800462a:	4b35      	ldr	r3, [pc, #212]	@ (8004700 <atan+0x328>)
 800462c:	4e35      	ldr	r6, [pc, #212]	@ (8004704 <atan+0x32c>)
 800462e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f7fb fdf3 	bl	8000220 <__aeabi_dsub>
 800463a:	4622      	mov	r2, r4
 800463c:	462b      	mov	r3, r5
 800463e:	f7fb fdef 	bl	8000220 <__aeabi_dsub>
 8004642:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800464e:	f7fb fde7 	bl	8000220 <__aeabi_dsub>
 8004652:	f1bb 0f00 	cmp.w	fp, #0
 8004656:	4604      	mov	r4, r0
 8004658:	460d      	mov	r5, r1
 800465a:	f6bf aedc 	bge.w	8004416 <atan+0x3e>
 800465e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004662:	461d      	mov	r5, r3
 8004664:	e6d7      	b.n	8004416 <atan+0x3e>
 8004666:	a51c      	add	r5, pc, #112	@ (adr r5, 80046d8 <atan+0x300>)
 8004668:	e9d5 4500 	ldrd	r4, r5, [r5]
 800466c:	e6d3      	b.n	8004416 <atan+0x3e>
 800466e:	bf00      	nop
 8004670:	54442d18 	.word	0x54442d18
 8004674:	3ff921fb 	.word	0x3ff921fb
 8004678:	8800759c 	.word	0x8800759c
 800467c:	7e37e43c 	.word	0x7e37e43c
 8004680:	e322da11 	.word	0xe322da11
 8004684:	3f90ad3a 	.word	0x3f90ad3a
 8004688:	24760deb 	.word	0x24760deb
 800468c:	3fa97b4b 	.word	0x3fa97b4b
 8004690:	a0d03d51 	.word	0xa0d03d51
 8004694:	3fb10d66 	.word	0x3fb10d66
 8004698:	c54c206e 	.word	0xc54c206e
 800469c:	3fb745cd 	.word	0x3fb745cd
 80046a0:	920083ff 	.word	0x920083ff
 80046a4:	3fc24924 	.word	0x3fc24924
 80046a8:	5555550d 	.word	0x5555550d
 80046ac:	3fd55555 	.word	0x3fd55555
 80046b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80046b4:	bfa2b444 	.word	0xbfa2b444
 80046b8:	52defd9a 	.word	0x52defd9a
 80046bc:	3fadde2d 	.word	0x3fadde2d
 80046c0:	af749a6d 	.word	0xaf749a6d
 80046c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80046c8:	fe231671 	.word	0xfe231671
 80046cc:	3fbc71c6 	.word	0x3fbc71c6
 80046d0:	9998ebc4 	.word	0x9998ebc4
 80046d4:	3fc99999 	.word	0x3fc99999
 80046d8:	54442d18 	.word	0x54442d18
 80046dc:	bff921fb 	.word	0xbff921fb
 80046e0:	440fffff 	.word	0x440fffff
 80046e4:	7ff00000 	.word	0x7ff00000
 80046e8:	3fdbffff 	.word	0x3fdbffff
 80046ec:	3ff00000 	.word	0x3ff00000
 80046f0:	3ff2ffff 	.word	0x3ff2ffff
 80046f4:	40038000 	.word	0x40038000
 80046f8:	3ff80000 	.word	0x3ff80000
 80046fc:	bff00000 	.word	0xbff00000
 8004700:	080047b0 	.word	0x080047b0
 8004704:	080047d0 	.word	0x080047d0

08004708 <fabs>:
 8004708:	ec51 0b10 	vmov	r0, r1, d0
 800470c:	4602      	mov	r2, r0
 800470e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004712:	ec43 2b10 	vmov	d0, r2, r3
 8004716:	4770      	bx	lr

08004718 <_init>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr

08004724 <_fini>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr
