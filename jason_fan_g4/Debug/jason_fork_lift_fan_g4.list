
jason_fork_lift_fan_g4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003388  08003388  00004388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003398  08003398  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003398  08003398  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003398  08003398  00004398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800339c  0800339c  0000439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080033ac  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080033ac  000051a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6b5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001859  00000000  00000000  0000f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00010f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094c  00000000  00000000  00011b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001edca  00000000  00000000  000124a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c012  00000000  00000000  0003126e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce370  00000000  00000000  0003d280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b5f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003288  00000000  00000000  0010b634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0010e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003370 	.word	0x08003370

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003370 	.word	0x08003370

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fe0d 	bl	8000e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f86c 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fb9c 	bl	8000960 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f8b2 	bl	8000390 <MX_TIM1_Init>
  MX_TIM2_Init();
 800022c:	f000 f96c 	bl	8000508 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000230:	f000 f9ec 	bl	800060c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000234:	f000 fa62 	bl	80006fc <MX_TIM4_Init>
  MX_TIM15_Init();
 8000238:	f000 faee 	bl	8000818 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4826      	ldr	r0, [pc, #152]	@ (80002d8 <main+0xc0>)
 8000240:	f001 ff6e 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000244:	2104      	movs	r1, #4
 8000246:	4824      	ldr	r0, [pc, #144]	@ (80002d8 <main+0xc0>)
 8000248:	f001 ff6a 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800024c:	2108      	movs	r1, #8
 800024e:	4823      	ldr	r0, [pc, #140]	@ (80002dc <main+0xc4>)
 8000250:	f001 ff66 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000254:	210c      	movs	r1, #12
 8000256:	4821      	ldr	r0, [pc, #132]	@ (80002dc <main+0xc4>)
 8000258:	f001 ff62 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800025c:	2100      	movs	r1, #0
 800025e:	4820      	ldr	r0, [pc, #128]	@ (80002e0 <main+0xc8>)
 8000260:	f001 ff5e 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000264:	2100      	movs	r1, #0
 8000266:	481f      	ldr	r0, [pc, #124]	@ (80002e4 <main+0xcc>)
 8000268:	f001 ff5a 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800026c:	2104      	movs	r1, #4
 800026e:	481d      	ldr	r0, [pc, #116]	@ (80002e4 <main+0xcc>)
 8000270:	f001 ff56 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000274:	2108      	movs	r1, #8
 8000276:	481b      	ldr	r0, [pc, #108]	@ (80002e4 <main+0xcc>)
 8000278:	f001 ff52 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800027c:	2100      	movs	r1, #0
 800027e:	481a      	ldr	r0, [pc, #104]	@ (80002e8 <main+0xd0>)
 8000280:	f001 ff4e 	bl	8002120 <HAL_TIM_PWM_Start>

  // TIM2->CCR1 = 10000/2; // PA5 shit /
  // TIM2->CCR2 = 10000/2; // PB3 shit /
  TIM1->CCR1 = 10000/2; // PC0
 8000284:	4b19      	ldr	r3, [pc, #100]	@ (80002ec <main+0xd4>)
 8000286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800028a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 10000/2; // PC1
 800028c:	4b17      	ldr	r3, [pc, #92]	@ (80002ec <main+0xd4>)
 800028e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000292:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM2->CCR3 = 10000/2; // PA2 good
 8000294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800029c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = 10000/2; // PA3 good
 800029e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002a6:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = 10000/2; // PE5 good
 80002a8:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <main+0xd8>)
 80002aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002ae:	635a      	str	r2, [r3, #52]	@ 0x34
  // TIM3->CCR2 = 10000/2; // PB5 shit
  // TIM3->CCR3 = 10000/2; // PC8 shit
  // TIM3->CCR4 = 10000/2; // PC9 shit
  TIM4->CCR1 = 10000/2; // PD12
 80002b0:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <main+0xdc>)
 80002b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002b6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM4->CCR2 = 10000/2; // PD13
 80002b8:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <main+0xdc>)
 80002ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002be:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM4->CCR3 = 10000/2; // PD14
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <main+0xdc>)
 80002c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM15->CCR1 = 20000/2; // PE5 good
 80002c8:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <main+0xe0>)
 80002ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80002ce:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 fe23 	bl	8000f1c <HAL_Delay>
 80002d6:	e7fb      	b.n	80002d0 <main+0xb8>
 80002d8:	20000028 	.word	0x20000028
 80002dc:	20000074 	.word	0x20000074
 80002e0:	200000c0 	.word	0x200000c0
 80002e4:	2000010c 	.word	0x2000010c
 80002e8:	20000158 	.word	0x20000158
 80002ec:	40012c00 	.word	0x40012c00
 80002f0:	40000400 	.word	0x40000400
 80002f4:	40000800 	.word	0x40000800
 80002f8:	40014000 	.word	0x40014000

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b094      	sub	sp, #80	@ 0x50
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2238      	movs	r2, #56	@ 0x38
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f003 f804 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000322:	f001 f89b 	bl	800145c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000326:	2301      	movs	r3, #1
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000334:	2303      	movs	r3, #3
 8000336:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000338:	2301      	movs	r3, #1
 800033a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800033c:	2314      	movs	r3, #20
 800033e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000340:	2302      	movs	r3, #2
 8000342:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000344:	2302      	movs	r3, #2
 8000346:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000348:	2302      	movs	r3, #2
 800034a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034c:	f107 0318 	add.w	r3, r7, #24
 8000350:	4618      	mov	r0, r3
 8000352:	f001 f937 	bl	80015c4 <HAL_RCC_OscConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800035c:	f000 fb9c 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000360:	230f      	movs	r3, #15
 8000362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000364:	2303      	movs	r3, #3
 8000366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2102      	movs	r1, #2
 8000378:	4618      	mov	r0, r3
 800037a:	f001 fc35 	bl	8001be8 <HAL_RCC_ClockConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000384:	f000 fb88 	bl	8000a98 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3750      	adds	r7, #80	@ 0x50
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b09c      	sub	sp, #112	@ 0x70
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
 80003c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2234      	movs	r2, #52	@ 0x34
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 ffa4 	bl	8003318 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d0:	4b4b      	ldr	r3, [pc, #300]	@ (8000500 <MX_TIM1_Init+0x170>)
 80003d2:	4a4c      	ldr	r2, [pc, #304]	@ (8000504 <MX_TIM1_Init+0x174>)
 80003d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80003d6:	4b4a      	ldr	r3, [pc, #296]	@ (8000500 <MX_TIM1_Init+0x170>)
 80003d8:	224f      	movs	r2, #79	@ 0x4f
 80003da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003dc:	4b48      	ldr	r3, [pc, #288]	@ (8000500 <MX_TIM1_Init+0x170>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80003e2:	4b47      	ldr	r3, [pc, #284]	@ (8000500 <MX_TIM1_Init+0x170>)
 80003e4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ea:	4b45      	ldr	r3, [pc, #276]	@ (8000500 <MX_TIM1_Init+0x170>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f0:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <MX_TIM1_Init+0x170>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f6:	4b42      	ldr	r3, [pc, #264]	@ (8000500 <MX_TIM1_Init+0x170>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003fc:	4840      	ldr	r0, [pc, #256]	@ (8000500 <MX_TIM1_Init+0x170>)
 80003fe:	f001 fdd7 	bl	8001fb0 <HAL_TIM_Base_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000408:	f000 fb46 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000410:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000412:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000416:	4619      	mov	r1, r3
 8000418:	4839      	ldr	r0, [pc, #228]	@ (8000500 <MX_TIM1_Init+0x170>)
 800041a:	f002 f8a7 	bl	800256c <HAL_TIM_ConfigClockSource>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000424:	f000 fb38 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000428:	4835      	ldr	r0, [pc, #212]	@ (8000500 <MX_TIM1_Init+0x170>)
 800042a:	f001 fe18 	bl	800205e <HAL_TIM_PWM_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000434:	f000 fb30 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000438:	2300      	movs	r3, #0
 800043a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800043c:	2300      	movs	r3, #0
 800043e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000444:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000448:	4619      	mov	r1, r3
 800044a:	482d      	ldr	r0, [pc, #180]	@ (8000500 <MX_TIM1_Init+0x170>)
 800044c:	f002 fe3a 	bl	80030c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000456:	f000 fb1f 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800045a:	2360      	movs	r3, #96	@ 0x60
 800045c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000462:	2300      	movs	r3, #0
 8000464:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000466:	2300      	movs	r3, #0
 8000468:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800046e:	2300      	movs	r3, #0
 8000470:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000472:	2300      	movs	r3, #0
 8000474:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000476:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800047a:	2200      	movs	r2, #0
 800047c:	4619      	mov	r1, r3
 800047e:	4820      	ldr	r0, [pc, #128]	@ (8000500 <MX_TIM1_Init+0x170>)
 8000480:	f001 ff60 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800048a:	f000 fb05 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800048e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000492:	2204      	movs	r2, #4
 8000494:	4619      	mov	r1, r3
 8000496:	481a      	ldr	r0, [pc, #104]	@ (8000500 <MX_TIM1_Init+0x170>)
 8000498:	f001 ff54 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80004a2:	f000 faf9 	bl	8000a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004c4:	2300      	movs	r3, #0
 80004c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80004d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004d6:	2300      	movs	r3, #0
 80004d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4619      	mov	r1, r3
 80004e2:	4807      	ldr	r0, [pc, #28]	@ (8000500 <MX_TIM1_Init+0x170>)
 80004e4:	f002 fe84 	bl	80031f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80004ee:	f000 fad3 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004f2:	4803      	ldr	r0, [pc, #12]	@ (8000500 <MX_TIM1_Init+0x170>)
 80004f4:	f000 fb68 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 80004f8:	bf00      	nop
 80004fa:	3770      	adds	r7, #112	@ 0x70
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000028 	.word	0x20000028
 8000504:	40012c00 	.word	0x40012c00

08000508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08e      	sub	sp, #56	@ 0x38
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051c:	f107 031c 	add.w	r3, r7, #28
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800053a:	4b33      	ldr	r3, [pc, #204]	@ (8000608 <MX_TIM2_Init+0x100>)
 800053c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000540:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <MX_TIM2_Init+0x100>)
 8000544:	224f      	movs	r2, #79	@ 0x4f
 8000546:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000548:	4b2f      	ldr	r3, [pc, #188]	@ (8000608 <MX_TIM2_Init+0x100>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800054e:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <MX_TIM2_Init+0x100>)
 8000550:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000554:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000556:	4b2c      	ldr	r3, [pc, #176]	@ (8000608 <MX_TIM2_Init+0x100>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800055c:	4b2a      	ldr	r3, [pc, #168]	@ (8000608 <MX_TIM2_Init+0x100>)
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000562:	4829      	ldr	r0, [pc, #164]	@ (8000608 <MX_TIM2_Init+0x100>)
 8000564:	f001 fd24 	bl	8001fb0 <HAL_TIM_Base_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800056e:	f000 fa93 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800057c:	4619      	mov	r1, r3
 800057e:	4822      	ldr	r0, [pc, #136]	@ (8000608 <MX_TIM2_Init+0x100>)
 8000580:	f001 fff4 	bl	800256c <HAL_TIM_ConfigClockSource>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800058a:	f000 fa85 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800058e:	481e      	ldr	r0, [pc, #120]	@ (8000608 <MX_TIM2_Init+0x100>)
 8000590:	f001 fd65 	bl	800205e <HAL_TIM_PWM_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800059a:	f000 fa7d 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	4619      	mov	r1, r3
 80005ac:	4816      	ldr	r0, [pc, #88]	@ (8000608 <MX_TIM2_Init+0x100>)
 80005ae:	f002 fd89 	bl	80030c4 <HAL_TIMEx_MasterConfigSynchronization>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80005b8:	f000 fa6e 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005bc:	2360      	movs	r3, #96	@ 0x60
 80005be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	2208      	movs	r2, #8
 80005d0:	4619      	mov	r1, r3
 80005d2:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_TIM2_Init+0x100>)
 80005d4:	f001 feb6 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80005de:	f000 fa5b 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	220c      	movs	r2, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <MX_TIM2_Init+0x100>)
 80005ea:	f001 feab 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80005f4:	f000 fa50 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <MX_TIM2_Init+0x100>)
 80005fa:	f000 fae5 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 80005fe:	bf00      	nop
 8000600:	3738      	adds	r7, #56	@ 0x38
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000074 	.word	0x20000074

0800060c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	@ 0x38
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 8000640:	4a2d      	ldr	r2, [pc, #180]	@ (80006f8 <MX_TIM3_Init+0xec>)
 8000642:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 8000646:	224f      	movs	r2, #79	@ 0x4f
 8000648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 8000652:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 8000660:	2280      	movs	r2, #128	@ 0x80
 8000662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000664:	4823      	ldr	r0, [pc, #140]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 8000666:	f001 fca3 	bl	8001fb0 <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000670:	f000 fa12 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000678:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800067a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800067e:	4619      	mov	r1, r3
 8000680:	481c      	ldr	r0, [pc, #112]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 8000682:	f001 ff73 	bl	800256c <HAL_TIM_ConfigClockSource>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800068c:	f000 fa04 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000690:	4818      	ldr	r0, [pc, #96]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 8000692:	f001 fce4 	bl	800205e <HAL_TIM_PWM_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800069c:	f000 f9fc 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	4811      	ldr	r0, [pc, #68]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 80006b0:	f002 fd08 	bl	80030c4 <HAL_TIMEx_MasterConfigSynchronization>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80006ba:	f000 f9ed 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006be:	2360      	movs	r3, #96	@ 0x60
 80006c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 80006d6:	f001 fe35 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80006e0:	f000 f9da 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <MX_TIM3_Init+0xe8>)
 80006e6:	f000 fa6f 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 80006ea:	bf00      	nop
 80006ec:	3738      	adds	r7, #56	@ 0x38
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000c0 	.word	0x200000c0
 80006f8:	40000400 	.word	0x40000400

080006fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	@ 0x38
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800072e:	4b38      	ldr	r3, [pc, #224]	@ (8000810 <MX_TIM4_Init+0x114>)
 8000730:	4a38      	ldr	r2, [pc, #224]	@ (8000814 <MX_TIM4_Init+0x118>)
 8000732:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8000734:	4b36      	ldr	r3, [pc, #216]	@ (8000810 <MX_TIM4_Init+0x114>)
 8000736:	224f      	movs	r2, #79	@ 0x4f
 8000738:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b35      	ldr	r3, [pc, #212]	@ (8000810 <MX_TIM4_Init+0x114>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000740:	4b33      	ldr	r3, [pc, #204]	@ (8000810 <MX_TIM4_Init+0x114>)
 8000742:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <MX_TIM4_Init+0x114>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b30      	ldr	r3, [pc, #192]	@ (8000810 <MX_TIM4_Init+0x114>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000754:	482e      	ldr	r0, [pc, #184]	@ (8000810 <MX_TIM4_Init+0x114>)
 8000756:	f001 fc2b 	bl	8001fb0 <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000760:	f000 f99a 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800076a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800076e:	4619      	mov	r1, r3
 8000770:	4827      	ldr	r0, [pc, #156]	@ (8000810 <MX_TIM4_Init+0x114>)
 8000772:	f001 fefb 	bl	800256c <HAL_TIM_ConfigClockSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800077c:	f000 f98c 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000780:	4823      	ldr	r0, [pc, #140]	@ (8000810 <MX_TIM4_Init+0x114>)
 8000782:	f001 fc6c 	bl	800205e <HAL_TIM_PWM_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800078c:	f000 f984 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	481c      	ldr	r0, [pc, #112]	@ (8000810 <MX_TIM4_Init+0x114>)
 80007a0:	f002 fc90 	bl	80030c4 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007aa:	f000 f975 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ae:	2360      	movs	r3, #96	@ 0x60
 80007b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	4812      	ldr	r0, [pc, #72]	@ (8000810 <MX_TIM4_Init+0x114>)
 80007c6:	f001 fdbd 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80007d0:	f000 f962 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	2204      	movs	r2, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_TIM4_Init+0x114>)
 80007dc:	f001 fdb2 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80007e6:	f000 f957 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	2208      	movs	r2, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	4807      	ldr	r0, [pc, #28]	@ (8000810 <MX_TIM4_Init+0x114>)
 80007f2:	f001 fda7 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80007fc:	f000 f94c 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <MX_TIM4_Init+0x114>)
 8000802:	f000 f9e1 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 8000806:	bf00      	nop
 8000808:	3738      	adds	r7, #56	@ 0x38
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000010c 	.word	0x2000010c
 8000814:	40000800 	.word	0x40000800

08000818 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	@ 0x70
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000838:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
 8000848:	615a      	str	r2, [r3, #20]
 800084a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2234      	movs	r2, #52	@ 0x34
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fd60 	bl	8003318 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000858:	4b3f      	ldr	r3, [pc, #252]	@ (8000958 <MX_TIM15_Init+0x140>)
 800085a:	4a40      	ldr	r2, [pc, #256]	@ (800095c <MX_TIM15_Init+0x144>)
 800085c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 800085e:	4b3e      	ldr	r3, [pc, #248]	@ (8000958 <MX_TIM15_Init+0x140>)
 8000860:	224f      	movs	r2, #79	@ 0x4f
 8000862:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b3c      	ldr	r3, [pc, #240]	@ (8000958 <MX_TIM15_Init+0x140>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 800086a:	4b3b      	ldr	r3, [pc, #236]	@ (8000958 <MX_TIM15_Init+0x140>)
 800086c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000870:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	4b39      	ldr	r3, [pc, #228]	@ (8000958 <MX_TIM15_Init+0x140>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000878:	4b37      	ldr	r3, [pc, #220]	@ (8000958 <MX_TIM15_Init+0x140>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087e:	4b36      	ldr	r3, [pc, #216]	@ (8000958 <MX_TIM15_Init+0x140>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000884:	4834      	ldr	r0, [pc, #208]	@ (8000958 <MX_TIM15_Init+0x140>)
 8000886:	f001 fb93 	bl	8001fb0 <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000890:	f000 f902 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000898:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800089a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800089e:	4619      	mov	r1, r3
 80008a0:	482d      	ldr	r0, [pc, #180]	@ (8000958 <MX_TIM15_Init+0x140>)
 80008a2:	f001 fe63 	bl	800256c <HAL_TIM_ConfigClockSource>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80008ac:	f000 f8f4 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80008b0:	4829      	ldr	r0, [pc, #164]	@ (8000958 <MX_TIM15_Init+0x140>)
 80008b2:	f001 fbd4 	bl	800205e <HAL_TIM_PWM_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80008bc:	f000 f8ec 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008cc:	4619      	mov	r1, r3
 80008ce:	4822      	ldr	r0, [pc, #136]	@ (8000958 <MX_TIM15_Init+0x140>)
 80008d0:	f002 fbf8 	bl	80030c4 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80008da:	f000 f8dd 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008de:	2360      	movs	r3, #96	@ 0x60
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4815      	ldr	r0, [pc, #84]	@ (8000958 <MX_TIM15_Init+0x140>)
 8000904:	f001 fd1e 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800090e:	f000 f8c3 	bl	8000a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000926:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	@ (8000958 <MX_TIM15_Init+0x140>)
 800093a:	f002 fc59 	bl	80031f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8000944:	f000 f8a8 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <MX_TIM15_Init+0x140>)
 800094a:	f000 f93d 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 800094e:	bf00      	nop
 8000950:	3770      	adds	r7, #112	@ 0x70
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000158 	.word	0x20000158
 800095c:	40014000 	.word	0x40014000

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	@ 0x30
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	4b44      	ldr	r3, [pc, #272]	@ (8000a88 <MX_GPIO_Init+0x128>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	4a43      	ldr	r2, [pc, #268]	@ (8000a88 <MX_GPIO_Init+0x128>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000982:	4b41      	ldr	r3, [pc, #260]	@ (8000a88 <MX_GPIO_Init+0x128>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a88 <MX_GPIO_Init+0x128>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	4a3d      	ldr	r2, [pc, #244]	@ (8000a88 <MX_GPIO_Init+0x128>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a88 <MX_GPIO_Init+0x128>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a6:	4b38      	ldr	r3, [pc, #224]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a37      	ldr	r2, [pc, #220]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b35      	ldr	r3, [pc, #212]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0320 	and.w	r3, r3, #32
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b32      	ldr	r3, [pc, #200]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a31      	ldr	r2, [pc, #196]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a2b      	ldr	r2, [pc, #172]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a25      	ldr	r2, [pc, #148]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <MX_GPIO_Init+0x128>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C_IN2_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2130      	movs	r1, #48	@ 0x30
 8000a0a:	4820      	ldr	r0, [pc, #128]	@ (8000a8c <MX_GPIO_Init+0x12c>)
 8000a0c:	f000 fd0e 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_IN2_Pin|A_IN1_Pin|C_IN1_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f242 0103 	movw	r1, #8195	@ 0x2003
 8000a16:	481e      	ldr	r0, [pc, #120]	@ (8000a90 <MX_GPIO_Init+0x130>)
 8000a18:	f000 fd08 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 518c 	mov.w	r1, #4480	@ 0x1180
 8000a22:	481c      	ldr	r0, [pc, #112]	@ (8000a94 <MX_GPIO_Init+0x134>)
 8000a24:	f000 fd02 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C_IN2_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin|D_IN1_Pin;
 8000a28:	2330      	movs	r3, #48	@ 0x30
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <MX_GPIO_Init+0x12c>)
 8000a40:	f000 fb72 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin A_IN1_Pin C_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin|A_IN1_Pin|C_IN1_Pin;
 8000a44:	f242 0303 	movw	r3, #8195	@ 0x2003
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_GPIO_Init+0x130>)
 8000a5e:	f000 fb63 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 8000a62:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <MX_GPIO_Init+0x134>)
 8000a7c:	f000 fb54 	bl	8001128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a80:	bf00      	nop
 8000a82:	3730      	adds	r7, #48	@ 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	48000400 	.word	0x48000400
 8000a94:	48001000 	.word	0x48001000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac6:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ada:	f000 fd63 	bl	80015a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	@ 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a2e      	ldr	r2, [pc, #184]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xc8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10c      	bne.n	8000b18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000afe:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000b16:	e046      	b.n	8000ba6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b20:	d10c      	bne.n	8000b3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b22:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	4a24      	ldr	r2, [pc, #144]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b2e:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]
}
 8000b3a:	e034      	b.n	8000ba6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1e      	ldr	r2, [pc, #120]	@ (8000bbc <HAL_TIM_Base_MspInit+0xd0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d10c      	bne.n	8000b60 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
}
 8000b5e:	e022      	b.n	8000ba6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a16      	ldr	r2, [pc, #88]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d10c      	bne.n	8000b84 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
}
 8000b82:	e010      	b.n	8000ba6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM15)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <HAL_TIM_Base_MspInit+0xd8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10b      	bne.n	8000ba6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b92:	4a09      	ldr	r2, [pc, #36]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b9a:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
}
 8000ba6:	bf00      	nop
 8000ba8:	3724      	adds	r7, #36	@ 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40012c00 	.word	0x40012c00
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	40000800 	.word	0x40000800
 8000bc4:	40014000 	.word	0x40014000

08000bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	@ 0x30
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a56      	ldr	r2, [pc, #344]	@ (8000d40 <HAL_TIM_MspPostInit+0x178>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d11c      	bne.n	8000c24 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b56      	ldr	r3, [pc, #344]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a55      	ldr	r2, [pc, #340]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b53      	ldr	r3, [pc, #332]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c02:	2303      	movs	r3, #3
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	484a      	ldr	r0, [pc, #296]	@ (8000d48 <HAL_TIM_MspPostInit+0x180>)
 8000c1e:	f000 fa83 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000c22:	e089      	b.n	8000d38 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c2c:	d11d      	bne.n	8000c6a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b45      	ldr	r3, [pc, #276]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	4a44      	ldr	r2, [pc, #272]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3a:	4b42      	ldr	r3, [pc, #264]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c46:	230c      	movs	r3, #12
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c56:	2301      	movs	r3, #1
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c64:	f000 fa60 	bl	8001128 <HAL_GPIO_Init>
}
 8000c68:	e066      	b.n	8000d38 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a37      	ldr	r2, [pc, #220]	@ (8000d4c <HAL_TIM_MspPostInit+0x184>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d11c      	bne.n	8000cae <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c74:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c78:	4a32      	ldr	r2, [pc, #200]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c80:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	482a      	ldr	r0, [pc, #168]	@ (8000d50 <HAL_TIM_MspPostInit+0x188>)
 8000ca8:	f000 fa3e 	bl	8001128 <HAL_GPIO_Init>
}
 8000cac:	e044      	b.n	8000d38 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM4)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a28      	ldr	r2, [pc, #160]	@ (8000d54 <HAL_TIM_MspPostInit+0x18c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d11d      	bne.n	8000cf4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbc:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000cd0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	481a      	ldr	r0, [pc, #104]	@ (8000d58 <HAL_TIM_MspPostInit+0x190>)
 8000cee:	f000 fa1b 	bl	8001128 <HAL_GPIO_Init>
}
 8000cf2:	e021      	b.n	8000d38 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM15)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <HAL_TIM_MspPostInit+0x194>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d11c      	bne.n	8000d38 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_TIM_MspPostInit+0x17c>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0320 	and.w	r3, r3, #32
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <HAL_TIM_MspPostInit+0x198>)
 8000d34:	f000 f9f8 	bl	8001128 <HAL_GPIO_Init>
}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	@ 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40012c00 	.word	0x40012c00
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	40000400 	.word	0x40000400
 8000d50:	48001000 	.word	0x48001000
 8000d54:	40000800 	.word	0x40000800
 8000d58:	48000c00 	.word	0x48000c00
 8000d5c:	40014000 	.word	0x40014000
 8000d60:	48001400 	.word	0x48001400

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f000 f891 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de8:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <LoopForever+0xe>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	@ (8000e34 <LoopForever+0x16>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f002 fa87 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1a:	f7ff f9fd 	bl	8000218 <main>

08000e1e <LoopForever>:

LoopForever:
    b LoopForever
 8000e1e:	e7fe      	b.n	8000e1e <LoopForever>
  ldr   r0, =_estack
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e2c:	080033a0 	.word	0x080033a0
  ldr r2, =_sbss
 8000e30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e34:	200001a8 	.word	0x200001a8

08000e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_2_IRQHandler>

08000e3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f93d 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f80e 	bl	8000e6c <HAL_InitTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	e001      	b.n	8000e60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5c:	f7ff fe22 	bl	8000aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e60:	79fb      	ldrb	r3, [r7, #7]

}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <HAL_InitTick+0x68>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d022      	beq.n	8000ec6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_InitTick+0x6c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <HAL_InitTick+0x68>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f93a 	bl	800110e <HAL_SYSTICK_Config>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10f      	bne.n	8000ec0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	d809      	bhi.n	8000eba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eae:	f000 f914 	bl	80010da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_InitTick+0x70>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	e007      	b.n	8000eca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e004      	b.n	8000eca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e001      	b.n	8000eca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <HAL_IncTick+0x20>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a03      	ldr	r2, [pc, #12]	@ (8000efc <HAL_IncTick+0x1c>)
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	200001a4 	.word	0x200001a4
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001a4 	.word	0x200001a4

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f34:	d004      	beq.n	8000f40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <HAL_Delay+0x40>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f40:	bf00      	nop
 8000f42:	f7ff ffdf 	bl	8000f04 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d8f7      	bhi.n	8000f42 <HAL_Delay+0x26>
  {
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff47 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff5e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff90 	bl	8001018 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5f 	bl	8000fc4 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffb2 	bl	8001080 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001136:	e15a      	b.n	80013ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 814c 	beq.w	80013e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d005      	beq.n	8001168 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001164:	2b02      	cmp	r3, #2
 8001166:	d130      	bne.n	80011ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119e:	2201      	movs	r2, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 0201 	and.w	r2, r3, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d017      	beq.n	8001206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d123      	bne.n	800125a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	6939      	ldr	r1, [r7, #16]
 8001256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0203 	and.w	r2, r3, #3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80a6 	beq.w	80013e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	4b5b      	ldr	r3, [pc, #364]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 800129e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a0:	4a5a      	ldr	r2, [pc, #360]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a8:	4b58      	ldr	r3, [pc, #352]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 80012aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b4:	4a56      	ldr	r2, [pc, #344]	@ (8001410 <HAL_GPIO_Init+0x2e8>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012de:	d01f      	beq.n	8001320 <HAL_GPIO_Init+0x1f8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001414 <HAL_GPIO_Init+0x2ec>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d019      	beq.n	800131c <HAL_GPIO_Init+0x1f4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4b      	ldr	r2, [pc, #300]	@ (8001418 <HAL_GPIO_Init+0x2f0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1f0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4a      	ldr	r2, [pc, #296]	@ (800141c <HAL_GPIO_Init+0x2f4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1ec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a49      	ldr	r2, [pc, #292]	@ (8001420 <HAL_GPIO_Init+0x2f8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a48      	ldr	r2, [pc, #288]	@ (8001424 <HAL_GPIO_Init+0x2fc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1e4>
 8001308:	2305      	movs	r3, #5
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 800130c:	2306      	movs	r3, #6
 800130e:	e008      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001320:	2300      	movs	r3, #0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001332:	4937      	ldr	r1, [pc, #220]	@ (8001410 <HAL_GPIO_Init+0x2e8>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001340:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001364:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800136a:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <HAL_GPIO_Init+0x300>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138e:	4a26      	ldr	r2, [pc, #152]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e2:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f ae9d 	bne.w	8001138 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	48001400 	.word	0x48001400
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001448:	e002      	b.n	8001450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d141      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800146a:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001476:	d131      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001478:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800147e:	4a46      	ldr	r2, [pc, #280]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001484:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001488:	4b43      	ldr	r3, [pc, #268]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001490:	4a41      	ldr	r2, [pc, #260]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001496:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001498:	4b40      	ldr	r3, [pc, #256]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2232      	movs	r2, #50	@ 0x32
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	4a3f      	ldr	r2, [pc, #252]	@ (80015a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ae:	e002      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b6:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c2:	d102      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f2      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ca:	4b33      	ldr	r3, [pc, #204]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d6:	d158      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e057      	b.n	800158c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014ec:	e04d      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014f4:	d141      	bne.n	800157a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001502:	d131      	bne.n	8001568 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800150a:	4a23      	ldr	r2, [pc, #140]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800151c:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001522:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2232      	movs	r2, #50	@ 0x32
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	0c9b      	lsrs	r3, r3, #18
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153a:	e002      	b.n	8001542 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3b01      	subs	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154e:	d102      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f2      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001562:	d112      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e011      	b.n	800158c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001574:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001578:	e007      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001584:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001588:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40007000 	.word	0x40007000
 800159c:	20000000 	.word	0x20000000
 80015a0:	431bde83 	.word	0x431bde83

080015a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b2:	6093      	str	r3, [r2, #8]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40007000 	.word	0x40007000

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e2fe      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d075      	beq.n	80016ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e2:	4b97      	ldr	r3, [pc, #604]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ec:	4b94      	ldr	r3, [pc, #592]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	d102      	bne.n	8001602 <HAL_RCC_OscConfig+0x3e>
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d002      	beq.n	8001608 <HAL_RCC_OscConfig+0x44>
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b08      	cmp	r3, #8
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b8d      	ldr	r3, [pc, #564]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05b      	beq.n	80016cc <HAL_RCC_OscConfig+0x108>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d157      	bne.n	80016cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e2d9      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x74>
 800162a:	4b85      	ldr	r3, [pc, #532]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a84      	ldr	r2, [pc, #528]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x98>
 8001642:	4b7f      	ldr	r3, [pc, #508]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7e      	ldr	r2, [pc, #504]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b7c      	ldr	r3, [pc, #496]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7b      	ldr	r2, [pc, #492]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 800165c:	4b78      	ldr	r3, [pc, #480]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a77      	ldr	r2, [pc, #476]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b75      	ldr	r3, [pc, #468]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a74      	ldr	r2, [pc, #464]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fc42 	bl	8000f04 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fc3e 	bl	8000f04 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e29e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	4b6a      	ldr	r3, [pc, #424]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xc0>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc2e 	bl	8000f04 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fc2a 	bl	8000f04 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e28a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016be:	4b60      	ldr	r3, [pc, #384]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0xe8>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d075      	beq.n	80017c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e4:	4b56      	ldr	r3, [pc, #344]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b0c      	cmp	r3, #12
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x136>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d002      	beq.n	8001700 <HAL_RCC_OscConfig+0x13c>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d11f      	bne.n	8001740 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001700:	4b4f      	ldr	r3, [pc, #316]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x154>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e25d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b49      	ldr	r3, [pc, #292]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	4946      	ldr	r1, [pc, #280]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800172c:	4b45      	ldr	r3, [pc, #276]	@ (8001844 <HAL_RCC_OscConfig+0x280>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fb9b 	bl	8000e6c <HAL_InitTick>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d043      	beq.n	80017c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e249      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d023      	beq.n	8001790 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a3c      	ldr	r2, [pc, #240]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fbd6 	bl	8000f04 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fbd2 	bl	8000f04 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e232      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	061b      	lsls	r3, r3, #24
 8001788:	492d      	ldr	r1, [pc, #180]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
 800178e:	e01a      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001790:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2a      	ldr	r2, [pc, #168]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001796:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800179a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fbb2 	bl	8000f04 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fbae 	bl	8000f04 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e20e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1e0>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d041      	beq.n	8001856 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01c      	beq.n	8001814 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e0:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb8b 	bl	8000f04 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff fb87 	bl	8000f04 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1e7      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0ef      	beq.n	80017f2 <HAL_RCC_OscConfig+0x22e>
 8001812:	e020      	b.n	8001856 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fb6e 	bl	8000f04 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800182a:	e00d      	b.n	8001848 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff fb6a 	bl	8000f04 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d906      	bls.n	8001848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1ca      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001848:	4b8c      	ldr	r3, [pc, #560]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ea      	bne.n	800182c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80a6 	beq.w	80019b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001868:	4b84      	ldr	r3, [pc, #528]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_OscConfig+0x2b4>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x2b6>
 8001878:	2300      	movs	r3, #0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	4a7e      	ldr	r2, [pc, #504]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	6593      	str	r3, [r2, #88]	@ 0x58
 800188a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001896:	2301      	movs	r3, #1
 8001898:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189a:	4b79      	ldr	r3, [pc, #484]	@ (8001a80 <HAL_RCC_OscConfig+0x4bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d118      	bne.n	80018d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_RCC_OscConfig+0x4bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a75      	ldr	r2, [pc, #468]	@ (8001a80 <HAL_RCC_OscConfig+0x4bc>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb27 	bl	8000f04 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ba:	f7ff fb23 	bl	8000f04 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e183      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <HAL_RCC_OscConfig+0x4bc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d108      	bne.n	80018f2 <HAL_RCC_OscConfig+0x32e>
 80018e0:	4b66      	ldr	r3, [pc, #408]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e6:	4a65      	ldr	r2, [pc, #404]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f0:	e024      	b.n	800193c <HAL_RCC_OscConfig+0x378>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d110      	bne.n	800191c <HAL_RCC_OscConfig+0x358>
 80018fa:	4b60      	ldr	r3, [pc, #384]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001900:	4a5e      	ldr	r2, [pc, #376]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001910:	4a5a      	ldr	r2, [pc, #360]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800191a:	e00f      	b.n	800193c <HAL_RCC_OscConfig+0x378>
 800191c:	4b57      	ldr	r3, [pc, #348]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001922:	4a56      	ldr	r2, [pc, #344]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	4a52      	ldr	r2, [pc, #328]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d016      	beq.n	8001972 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fade 	bl	8000f04 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fada 	bl	8000f04 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e138      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	4b46      	ldr	r3, [pc, #280]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ed      	beq.n	800194c <HAL_RCC_OscConfig+0x388>
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fac7 	bl	8000f04 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff fac3 	bl	8000f04 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e121      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001990:	4b3a      	ldr	r3, [pc, #232]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ed      	bne.n	800197a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800199e:	7ffb      	ldrb	r3, [r7, #31]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	4b35      	ldr	r3, [pc, #212]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	4a34      	ldr	r2, [pc, #208]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d03c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ca:	4a2c      	ldr	r2, [pc, #176]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff fa96 	bl	8000f04 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019dc:	f7ff fa92 	bl	8000f04 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0f2      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ef      	beq.n	80019dc <HAL_RCC_OscConfig+0x418>
 80019fc:	e01b      	b.n	8001a36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a04:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fa79 	bl	8000f04 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a16:	f7ff fa75 	bl	8000f04 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0d5      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ef      	bne.n	8001a16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80c9 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a40:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	f000 8083 	beq.w	8001b54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d15e      	bne.n	8001b14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff fa4f 	bl	8000f04 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	e00c      	b.n	8001a84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff fa4b 	bl	8000f04 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d905      	bls.n	8001a84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0ab      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a84:	4b55      	ldr	r3, [pc, #340]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ec      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4b52      	ldr	r3, [pc, #328]	@ (8001be0 <HAL_RCC_OscConfig+0x61c>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6a11      	ldr	r1, [r2, #32]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001aaa:	0212      	lsls	r2, r2, #8
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ab2:	0852      	lsrs	r2, r2, #1
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0552      	lsls	r2, r2, #21
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001abe:	0852      	lsrs	r2, r2, #1
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	0652      	lsls	r2, r2, #25
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001aca:	06d2      	lsls	r2, r2, #27
 8001acc:	430a      	orrs	r2, r1
 8001ace:	4943      	ldr	r1, [pc, #268]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad4:	4b41      	ldr	r3, [pc, #260]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a40      	ldr	r2, [pc, #256]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa0a 	bl	8000f04 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fa06 	bl	8000f04 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e066      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	4b35      	ldr	r3, [pc, #212]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x530>
 8001b12:	e05e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a30      	ldr	r2, [pc, #192]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9f0 	bl	8000f04 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f9ec 	bl	8000f04 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b46:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4924      	ldr	r1, [pc, #144]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60cb      	str	r3, [r1, #12]
 8001b52:	e03e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e039      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b60:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d12c      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d123      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d11b      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d113      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d109      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	019f800c 	.word	0x019f800c
 8001be4:	feeefffc 	.word	0xfeeefffc

08001be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e11e      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b91      	ldr	r3, [pc, #580]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b8e      	ldr	r3, [pc, #568]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 020f 	bic.w	r2, r3, #15
 8001c16:	498c      	ldr	r1, [pc, #560]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b8a      	ldr	r3, [pc, #552]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e106      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d073      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d129      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c44:	4b81      	ldr	r3, [pc, #516]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0f4      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c54:	f000 f966 	bl	8001f24 <RCC_GetSysClockFreqFromPLLSource>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8001e50 <HAL_RCC_ClockConfig+0x268>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d93f      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c62:	4b7a      	ldr	r3, [pc, #488]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d033      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d12f      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c82:	4b72      	ldr	r3, [pc, #456]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c8a:	4a70      	ldr	r2, [pc, #448]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e024      	b.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d109      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0c6      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	4b66      	ldr	r3, [pc, #408]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0be      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cc0:	f000 f8ce 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4a61      	ldr	r2, [pc, #388]	@ (8001e50 <HAL_RCC_ClockConfig+0x268>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d909      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cce:	4b5f      	ldr	r3, [pc, #380]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4957      	ldr	r1, [pc, #348]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf4:	f7ff f906 	bl	8000f04 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f902 	bl	8000f04 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e095      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b4e      	ldr	r3, [pc, #312]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d3c:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a42      	ldr	r2, [pc, #264]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d54:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d5c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4936      	ldr	r1, [pc, #216]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b80      	cmp	r3, #128	@ 0x80
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d7e:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4a32      	ldr	r2, [pc, #200]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d21d      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d98:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 020f 	bic.w	r2, r3, #15
 8001da0:	4929      	ldr	r1, [pc, #164]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001da8:	f7ff f8ac 	bl	8000f04 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff f8a8 	bl	8000f04 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e03b      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d1ed      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4917      	ldr	r1, [pc, #92]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	490f      	ldr	r1, [pc, #60]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e12:	f000 f825 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <HAL_RCC_ClockConfig+0x26c>)
 8001e24:	5ccb      	ldrb	r3, [r1, r3]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_RCC_ClockConfig+0x270>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_ClockConfig+0x274>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f818 	bl	8000e6c <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	04c4b400 	.word	0x04c4b400
 8001e54:	08003388 	.word	0x08003388
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e66:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e72:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e047      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d102      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e84:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e03e      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e8a:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d136      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e96:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d10c      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebe:	68d2      	ldr	r2, [r2, #12]
 8001ec0:	0a12      	lsrs	r2, r2, #8
 8001ec2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
      break;
 8001ecc:	e00c      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ece:	4a13      	ldr	r2, [pc, #76]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed8:	68d2      	ldr	r2, [r2, #12]
 8001eda:	0a12      	lsrs	r2, r2, #8
 8001edc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
      break;
 8001ee6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0e5b      	lsrs	r3, r3, #25
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e001      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f08:	693b      	ldr	r3, [r7, #16]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	00f42400 	.word	0x00f42400
 8001f20:	007a1200 	.word	0x007a1200

08001f24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d10c      	bne.n	8001f62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f48:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	4a14      	ldr	r2, [pc, #80]	@ (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f52:	68d2      	ldr	r2, [r2, #12]
 8001f54:	0a12      	lsrs	r2, r2, #8
 8001f56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
    break;
 8001f60:	e00c      	b.n	8001f7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f62:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6c:	68d2      	ldr	r2, [r2, #12]
 8001f6e:	0a12      	lsrs	r2, r2, #8
 8001f70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
    break;
 8001f7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0e5b      	lsrs	r3, r3, #25
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	3301      	adds	r3, #1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f96:	687b      	ldr	r3, [r7, #4]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	00f42400 	.word	0x00f42400

08001fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e049      	b.n	8002056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fd88 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f000 fbc8 	bl	8002784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e049      	b.n	8002104 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d106      	bne.n	800208a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f841 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3304      	adds	r3, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f000 fb71 	bl	8002784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_TIM_PWM_Start+0x24>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e03c      	b.n	80021be <HAL_TIM_PWM_Start+0x9e>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d109      	bne.n	800215e <HAL_TIM_PWM_Start+0x3e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e02f      	b.n	80021be <HAL_TIM_PWM_Start+0x9e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b08      	cmp	r3, #8
 8002162:	d109      	bne.n	8002178 <HAL_TIM_PWM_Start+0x58>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e022      	b.n	80021be <HAL_TIM_PWM_Start+0x9e>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d109      	bne.n	8002192 <HAL_TIM_PWM_Start+0x72>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	bf14      	ite	ne
 800218a:	2301      	movne	r3, #1
 800218c:	2300      	moveq	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e015      	b.n	80021be <HAL_TIM_PWM_Start+0x9e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b10      	cmp	r3, #16
 8002196:	d109      	bne.n	80021ac <HAL_TIM_PWM_Start+0x8c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e008      	b.n	80021be <HAL_TIM_PWM_Start+0x9e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0a6      	b.n	8002314 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <HAL_TIM_PWM_Start+0xb6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d4:	e023      	b.n	800221e <HAL_TIM_PWM_Start+0xfe>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d104      	bne.n	80021e6 <HAL_TIM_PWM_Start+0xc6>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021e4:	e01b      	b.n	800221e <HAL_TIM_PWM_Start+0xfe>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_PWM_Start+0xd6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f4:	e013      	b.n	800221e <HAL_TIM_PWM_Start+0xfe>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d104      	bne.n	8002206 <HAL_TIM_PWM_Start+0xe6>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002204:	e00b      	b.n	800221e <HAL_TIM_PWM_Start+0xfe>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b10      	cmp	r3, #16
 800220a:	d104      	bne.n	8002216 <HAL_TIM_PWM_Start+0xf6>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002214:	e003      	b.n	800221e <HAL_TIM_PWM_Start+0xfe>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2201      	movs	r2, #1
 8002224:	6839      	ldr	r1, [r7, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 ff26 	bl	8003078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a3a      	ldr	r2, [pc, #232]	@ (800231c <HAL_TIM_PWM_Start+0x1fc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d018      	beq.n	8002268 <HAL_TIM_PWM_Start+0x148>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a39      	ldr	r2, [pc, #228]	@ (8002320 <HAL_TIM_PWM_Start+0x200>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <HAL_TIM_PWM_Start+0x148>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a37      	ldr	r2, [pc, #220]	@ (8002324 <HAL_TIM_PWM_Start+0x204>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00e      	beq.n	8002268 <HAL_TIM_PWM_Start+0x148>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a36      	ldr	r2, [pc, #216]	@ (8002328 <HAL_TIM_PWM_Start+0x208>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_TIM_PWM_Start+0x148>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a34      	ldr	r2, [pc, #208]	@ (800232c <HAL_TIM_PWM_Start+0x20c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_TIM_PWM_Start+0x148>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a33      	ldr	r2, [pc, #204]	@ (8002330 <HAL_TIM_PWM_Start+0x210>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_TIM_PWM_Start+0x14c>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_TIM_PWM_Start+0x14e>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a25      	ldr	r2, [pc, #148]	@ (800231c <HAL_TIM_PWM_Start+0x1fc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d022      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x1b2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002294:	d01d      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x1b2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a26      	ldr	r2, [pc, #152]	@ (8002334 <HAL_TIM_PWM_Start+0x214>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d018      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x1b2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a24      	ldr	r2, [pc, #144]	@ (8002338 <HAL_TIM_PWM_Start+0x218>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x1b2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a23      	ldr	r2, [pc, #140]	@ (800233c <HAL_TIM_PWM_Start+0x21c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00e      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x1b2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <HAL_TIM_PWM_Start+0x200>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d009      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x1b2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a18      	ldr	r2, [pc, #96]	@ (8002324 <HAL_TIM_PWM_Start+0x204>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x1b2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a18      	ldr	r2, [pc, #96]	@ (8002330 <HAL_TIM_PWM_Start+0x210>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d115      	bne.n	80022fe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_TIM_PWM_Start+0x220>)
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	d015      	beq.n	8002310 <HAL_TIM_PWM_Start+0x1f0>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ea:	d011      	beq.n	8002310 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	e008      	b.n	8002310 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e000      	b.n	8002312 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40013400 	.word	0x40013400
 8002324:	40014000 	.word	0x40014000
 8002328:	40014400 	.word	0x40014400
 800232c:	40014800 	.word	0x40014800
 8002330:	40015000 	.word	0x40015000
 8002334:	40000400 	.word	0x40000400
 8002338:	40000800 	.word	0x40000800
 800233c:	40000c00 	.word	0x40000c00
 8002340:	00010007 	.word	0x00010007

08002344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800235e:	2302      	movs	r3, #2
 8002360:	e0ff      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b14      	cmp	r3, #20
 800236e:	f200 80f0 	bhi.w	8002552 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002372:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	080023cd 	.word	0x080023cd
 800237c:	08002553 	.word	0x08002553
 8002380:	08002553 	.word	0x08002553
 8002384:	08002553 	.word	0x08002553
 8002388:	0800240d 	.word	0x0800240d
 800238c:	08002553 	.word	0x08002553
 8002390:	08002553 	.word	0x08002553
 8002394:	08002553 	.word	0x08002553
 8002398:	0800244f 	.word	0x0800244f
 800239c:	08002553 	.word	0x08002553
 80023a0:	08002553 	.word	0x08002553
 80023a4:	08002553 	.word	0x08002553
 80023a8:	0800248f 	.word	0x0800248f
 80023ac:	08002553 	.word	0x08002553
 80023b0:	08002553 	.word	0x08002553
 80023b4:	08002553 	.word	0x08002553
 80023b8:	080024d1 	.word	0x080024d1
 80023bc:	08002553 	.word	0x08002553
 80023c0:	08002553 	.word	0x08002553
 80023c4:	08002553 	.word	0x08002553
 80023c8:	08002511 	.word	0x08002511
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fa8a 	bl	80028ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0204 	bic.w	r2, r2, #4
 80023f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6999      	ldr	r1, [r3, #24]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	619a      	str	r2, [r3, #24]
      break;
 800240a:	e0a5      	b.n	8002558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fb04 	bl	8002a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6999      	ldr	r1, [r3, #24]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	021a      	lsls	r2, r3, #8
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	619a      	str	r2, [r3, #24]
      break;
 800244c:	e084      	b.n	8002558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fb77 	bl	8002b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0208 	orr.w	r2, r2, #8
 8002468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0204 	bic.w	r2, r2, #4
 8002478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69d9      	ldr	r1, [r3, #28]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	61da      	str	r2, [r3, #28]
      break;
 800248c:	e064      	b.n	8002558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fbe9 	bl	8002c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69d9      	ldr	r1, [r3, #28]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	021a      	lsls	r2, r3, #8
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	61da      	str	r2, [r3, #28]
      break;
 80024ce:	e043      	b.n	8002558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fc5c 	bl	8002d94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0208 	orr.w	r2, r2, #8
 80024ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0204 	bic.w	r2, r2, #4
 80024fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800250e:	e023      	b.n	8002558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fca6 	bl	8002e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800252a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	021a      	lsls	r2, r3, #8
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002550:	e002      	b.n	8002558 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
      break;
 8002556:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002560:	7dfb      	ldrb	r3, [r7, #23]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop

0800256c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIM_ConfigClockSource+0x1c>
 8002584:	2302      	movs	r3, #2
 8002586:	e0ee      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x1fa>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80025a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002770 <HAL_TIM_ConfigClockSource+0x204>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	f000 80b9 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 80025c8:	4a69      	ldr	r2, [pc, #420]	@ (8002770 <HAL_TIM_ConfigClockSource+0x204>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f200 80be 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 80025d0:	4a68      	ldr	r2, [pc, #416]	@ (8002774 <HAL_TIM_ConfigClockSource+0x208>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	f000 80b1 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 80025d8:	4a66      	ldr	r2, [pc, #408]	@ (8002774 <HAL_TIM_ConfigClockSource+0x208>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	f200 80b6 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 80025e0:	4a65      	ldr	r2, [pc, #404]	@ (8002778 <HAL_TIM_ConfigClockSource+0x20c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f000 80a9 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 80025e8:	4a63      	ldr	r2, [pc, #396]	@ (8002778 <HAL_TIM_ConfigClockSource+0x20c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	f200 80ae 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 80025f0:	4a62      	ldr	r2, [pc, #392]	@ (800277c <HAL_TIM_ConfigClockSource+0x210>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f000 80a1 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 80025f8:	4a60      	ldr	r2, [pc, #384]	@ (800277c <HAL_TIM_ConfigClockSource+0x210>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	f200 80a6 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 8002600:	4a5f      	ldr	r2, [pc, #380]	@ (8002780 <HAL_TIM_ConfigClockSource+0x214>)
 8002602:	4293      	cmp	r3, r2
 8002604:	f000 8099 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 8002608:	4a5d      	ldr	r2, [pc, #372]	@ (8002780 <HAL_TIM_ConfigClockSource+0x214>)
 800260a:	4293      	cmp	r3, r2
 800260c:	f200 809e 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 8002610:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002614:	f000 8091 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 8002618:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800261c:	f200 8096 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 8002620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002624:	f000 8089 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 8002628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800262c:	f200 808e 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 8002630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002634:	d03e      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0x148>
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800263a:	f200 8087 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002642:	f000 8086 	beq.w	8002752 <HAL_TIM_ConfigClockSource+0x1e6>
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800264a:	d87f      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 800264c:	2b70      	cmp	r3, #112	@ 0x70
 800264e:	d01a      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x11a>
 8002650:	2b70      	cmp	r3, #112	@ 0x70
 8002652:	d87b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 8002654:	2b60      	cmp	r3, #96	@ 0x60
 8002656:	d050      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0x18e>
 8002658:	2b60      	cmp	r3, #96	@ 0x60
 800265a:	d877      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 800265c:	2b50      	cmp	r3, #80	@ 0x50
 800265e:	d03c      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x16e>
 8002660:	2b50      	cmp	r3, #80	@ 0x50
 8002662:	d873      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 8002664:	2b40      	cmp	r3, #64	@ 0x40
 8002666:	d058      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x1ae>
 8002668:	2b40      	cmp	r3, #64	@ 0x40
 800266a:	d86f      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 800266c:	2b30      	cmp	r3, #48	@ 0x30
 800266e:	d064      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 8002670:	2b30      	cmp	r3, #48	@ 0x30
 8002672:	d86b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 8002674:	2b20      	cmp	r3, #32
 8002676:	d060      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d867      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x1e0>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05c      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 8002680:	2b10      	cmp	r3, #16
 8002682:	d05a      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x1ce>
 8002684:	e062      	b.n	800274c <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002696:	f000 fccf 	bl	8003038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	609a      	str	r2, [r3, #8]
      break;
 80026b2:	e04f      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026c4:	f000 fcb8 	bl	8003038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e03c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e6:	461a      	mov	r2, r3
 80026e8:	f000 fc2a 	bl	8002f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2150      	movs	r1, #80	@ 0x50
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fc83 	bl	8002ffe <TIM_ITRx_SetConfig>
      break;
 80026f8:	e02c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002706:	461a      	mov	r2, r3
 8002708:	f000 fc49 	bl	8002f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2160      	movs	r1, #96	@ 0x60
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fc73 	bl	8002ffe <TIM_ITRx_SetConfig>
      break;
 8002718:	e01c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002726:	461a      	mov	r2, r3
 8002728:	f000 fc0a 	bl	8002f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2140      	movs	r1, #64	@ 0x40
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fc63 	bl	8002ffe <TIM_ITRx_SetConfig>
      break;
 8002738:	e00c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 fc5a 	bl	8002ffe <TIM_ITRx_SetConfig>
      break;
 800274a:	e003      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e000      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8002752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	00100070 	.word	0x00100070
 8002774:	00100050 	.word	0x00100050
 8002778:	00100040 	.word	0x00100040
 800277c:	00100030 	.word	0x00100030
 8002780:	00100020 	.word	0x00100020

08002784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4c      	ldr	r2, [pc, #304]	@ (80028c8 <TIM_Base_SetConfig+0x144>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d017      	beq.n	80027cc <TIM_Base_SetConfig+0x48>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a2:	d013      	beq.n	80027cc <TIM_Base_SetConfig+0x48>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a49      	ldr	r2, [pc, #292]	@ (80028cc <TIM_Base_SetConfig+0x148>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00f      	beq.n	80027cc <TIM_Base_SetConfig+0x48>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a48      	ldr	r2, [pc, #288]	@ (80028d0 <TIM_Base_SetConfig+0x14c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00b      	beq.n	80027cc <TIM_Base_SetConfig+0x48>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a47      	ldr	r2, [pc, #284]	@ (80028d4 <TIM_Base_SetConfig+0x150>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d007      	beq.n	80027cc <TIM_Base_SetConfig+0x48>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a46      	ldr	r2, [pc, #280]	@ (80028d8 <TIM_Base_SetConfig+0x154>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <TIM_Base_SetConfig+0x48>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a45      	ldr	r2, [pc, #276]	@ (80028dc <TIM_Base_SetConfig+0x158>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d108      	bne.n	80027de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a39      	ldr	r2, [pc, #228]	@ (80028c8 <TIM_Base_SetConfig+0x144>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d023      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ec:	d01f      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a36      	ldr	r2, [pc, #216]	@ (80028cc <TIM_Base_SetConfig+0x148>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01b      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a35      	ldr	r2, [pc, #212]	@ (80028d0 <TIM_Base_SetConfig+0x14c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d017      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a34      	ldr	r2, [pc, #208]	@ (80028d4 <TIM_Base_SetConfig+0x150>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a33      	ldr	r2, [pc, #204]	@ (80028d8 <TIM_Base_SetConfig+0x154>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00f      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a33      	ldr	r2, [pc, #204]	@ (80028e0 <TIM_Base_SetConfig+0x15c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00b      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a32      	ldr	r2, [pc, #200]	@ (80028e4 <TIM_Base_SetConfig+0x160>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a31      	ldr	r2, [pc, #196]	@ (80028e8 <TIM_Base_SetConfig+0x164>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0xaa>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a2c      	ldr	r2, [pc, #176]	@ (80028dc <TIM_Base_SetConfig+0x158>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a18      	ldr	r2, [pc, #96]	@ (80028c8 <TIM_Base_SetConfig+0x144>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <TIM_Base_SetConfig+0x110>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a1a      	ldr	r2, [pc, #104]	@ (80028d8 <TIM_Base_SetConfig+0x154>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00f      	beq.n	8002894 <TIM_Base_SetConfig+0x110>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a1a      	ldr	r2, [pc, #104]	@ (80028e0 <TIM_Base_SetConfig+0x15c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00b      	beq.n	8002894 <TIM_Base_SetConfig+0x110>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a19      	ldr	r2, [pc, #100]	@ (80028e4 <TIM_Base_SetConfig+0x160>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_Base_SetConfig+0x110>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <TIM_Base_SetConfig+0x164>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <TIM_Base_SetConfig+0x110>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a13      	ldr	r2, [pc, #76]	@ (80028dc <TIM_Base_SetConfig+0x158>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d103      	bne.n	800289c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f023 0201 	bic.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	611a      	str	r2, [r3, #16]
  }
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800
 80028d4:	40000c00 	.word	0x40000c00
 80028d8:	40013400 	.word	0x40013400
 80028dc:	40015000 	.word	0x40015000
 80028e0:	40014000 	.word	0x40014000
 80028e4:	40014400 	.word	0x40014400
 80028e8:	40014800 	.word	0x40014800

080028ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f023 0201 	bic.w	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f023 0302 	bic.w	r3, r3, #2
 8002938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <TIM_OC1_SetConfig+0x11c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <TIM_OC1_SetConfig+0x88>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a0c <TIM_OC1_SetConfig+0x120>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00f      	beq.n	8002974 <TIM_OC1_SetConfig+0x88>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a2e      	ldr	r2, [pc, #184]	@ (8002a10 <TIM_OC1_SetConfig+0x124>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00b      	beq.n	8002974 <TIM_OC1_SetConfig+0x88>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a14 <TIM_OC1_SetConfig+0x128>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <TIM_OC1_SetConfig+0x88>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <TIM_OC1_SetConfig+0x12c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_OC1_SetConfig+0x88>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a1c <TIM_OC1_SetConfig+0x130>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d10c      	bne.n	800298e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f023 0308 	bic.w	r3, r3, #8
 800297a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1d      	ldr	r2, [pc, #116]	@ (8002a08 <TIM_OC1_SetConfig+0x11c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <TIM_OC1_SetConfig+0xd2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1c      	ldr	r2, [pc, #112]	@ (8002a0c <TIM_OC1_SetConfig+0x120>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00f      	beq.n	80029be <TIM_OC1_SetConfig+0xd2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <TIM_OC1_SetConfig+0x124>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00b      	beq.n	80029be <TIM_OC1_SetConfig+0xd2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a14 <TIM_OC1_SetConfig+0x128>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <TIM_OC1_SetConfig+0xd2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a19      	ldr	r2, [pc, #100]	@ (8002a18 <TIM_OC1_SetConfig+0x12c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d003      	beq.n	80029be <TIM_OC1_SetConfig+0xd2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a18      	ldr	r2, [pc, #96]	@ (8002a1c <TIM_OC1_SetConfig+0x130>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d111      	bne.n	80029e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40013400 	.word	0x40013400
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40014400 	.word	0x40014400
 8002a18:	40014800 	.word	0x40014800
 8002a1c:	40015000 	.word	0x40015000

08002a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f023 0210 	bic.w	r2, r3, #16
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0320 	bic.w	r3, r3, #32
 8002a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b30 <TIM_OC2_SetConfig+0x110>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <TIM_OC2_SetConfig+0x74>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a2b      	ldr	r2, [pc, #172]	@ (8002b34 <TIM_OC2_SetConfig+0x114>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <TIM_OC2_SetConfig+0x74>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b38 <TIM_OC2_SetConfig+0x118>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10d      	bne.n	8002ab0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <TIM_OC2_SetConfig+0x110>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <TIM_OC2_SetConfig+0xc0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <TIM_OC2_SetConfig+0x114>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00f      	beq.n	8002ae0 <TIM_OC2_SetConfig+0xc0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b3c <TIM_OC2_SetConfig+0x11c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00b      	beq.n	8002ae0 <TIM_OC2_SetConfig+0xc0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <TIM_OC2_SetConfig+0x120>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_OC2_SetConfig+0xc0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b44 <TIM_OC2_SetConfig+0x124>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_OC2_SetConfig+0xc0>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <TIM_OC2_SetConfig+0x118>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d113      	bne.n	8002b08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40013400 	.word	0x40013400
 8002b38:	40015000 	.word	0x40015000
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c54 <TIM_OC3_SetConfig+0x10c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <TIM_OC3_SetConfig+0x72>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a2a      	ldr	r2, [pc, #168]	@ (8002c58 <TIM_OC3_SetConfig+0x110>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_OC3_SetConfig+0x72>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a29      	ldr	r2, [pc, #164]	@ (8002c5c <TIM_OC3_SetConfig+0x114>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10d      	bne.n	8002bd6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c54 <TIM_OC3_SetConfig+0x10c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <TIM_OC3_SetConfig+0xbe>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c58 <TIM_OC3_SetConfig+0x110>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00f      	beq.n	8002c06 <TIM_OC3_SetConfig+0xbe>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c60 <TIM_OC3_SetConfig+0x118>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <TIM_OC3_SetConfig+0xbe>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c64 <TIM_OC3_SetConfig+0x11c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <TIM_OC3_SetConfig+0xbe>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c68 <TIM_OC3_SetConfig+0x120>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_OC3_SetConfig+0xbe>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a16      	ldr	r2, [pc, #88]	@ (8002c5c <TIM_OC3_SetConfig+0x114>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d113      	bne.n	8002c2e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	621a      	str	r2, [r3, #32]
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40013400 	.word	0x40013400
 8002c5c:	40015000 	.word	0x40015000
 8002c60:	40014000 	.word	0x40014000
 8002c64:	40014400 	.word	0x40014400
 8002c68:	40014800 	.word	0x40014800

08002c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	031b      	lsls	r3, r3, #12
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a2c      	ldr	r2, [pc, #176]	@ (8002d7c <TIM_OC4_SetConfig+0x110>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <TIM_OC4_SetConfig+0x74>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d80 <TIM_OC4_SetConfig+0x114>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_OC4_SetConfig+0x74>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a2a      	ldr	r2, [pc, #168]	@ (8002d84 <TIM_OC4_SetConfig+0x118>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10d      	bne.n	8002cfc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	031b      	lsls	r3, r3, #12
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002d7c <TIM_OC4_SetConfig+0x110>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <TIM_OC4_SetConfig+0xc0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a1e      	ldr	r2, [pc, #120]	@ (8002d80 <TIM_OC4_SetConfig+0x114>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00f      	beq.n	8002d2c <TIM_OC4_SetConfig+0xc0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <TIM_OC4_SetConfig+0x11c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <TIM_OC4_SetConfig+0xc0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <TIM_OC4_SetConfig+0x120>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <TIM_OC4_SetConfig+0xc0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d90 <TIM_OC4_SetConfig+0x124>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_OC4_SetConfig+0xc0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a17      	ldr	r2, [pc, #92]	@ (8002d84 <TIM_OC4_SetConfig+0x118>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d113      	bne.n	8002d54 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002d3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	019b      	lsls	r3, r3, #6
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40013400 	.word	0x40013400
 8002d84:	40015000 	.word	0x40015000
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800

08002d94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002dd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a19      	ldr	r2, [pc, #100]	@ (8002e50 <TIM_OC5_SetConfig+0xbc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <TIM_OC5_SetConfig+0x82>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a18      	ldr	r2, [pc, #96]	@ (8002e54 <TIM_OC5_SetConfig+0xc0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00f      	beq.n	8002e16 <TIM_OC5_SetConfig+0x82>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a17      	ldr	r2, [pc, #92]	@ (8002e58 <TIM_OC5_SetConfig+0xc4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00b      	beq.n	8002e16 <TIM_OC5_SetConfig+0x82>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <TIM_OC5_SetConfig+0xc8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <TIM_OC5_SetConfig+0x82>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <TIM_OC5_SetConfig+0xcc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d003      	beq.n	8002e16 <TIM_OC5_SetConfig+0x82>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a14      	ldr	r2, [pc, #80]	@ (8002e64 <TIM_OC5_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d109      	bne.n	8002e2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40013400 	.word	0x40013400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800
 8002e64:	40015000 	.word	0x40015000

08002e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	051b      	lsls	r3, r3, #20
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <TIM_OC6_SetConfig+0xc0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <TIM_OC6_SetConfig+0x84>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	@ (8002f2c <TIM_OC6_SetConfig+0xc4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00f      	beq.n	8002eec <TIM_OC6_SetConfig+0x84>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a18      	ldr	r2, [pc, #96]	@ (8002f30 <TIM_OC6_SetConfig+0xc8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <TIM_OC6_SetConfig+0x84>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a17      	ldr	r2, [pc, #92]	@ (8002f34 <TIM_OC6_SetConfig+0xcc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_OC6_SetConfig+0x84>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a16      	ldr	r2, [pc, #88]	@ (8002f38 <TIM_OC6_SetConfig+0xd0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <TIM_OC6_SetConfig+0x84>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	@ (8002f3c <TIM_OC6_SetConfig+0xd4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d109      	bne.n	8002f00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	029b      	lsls	r3, r3, #10
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40013400 	.word	0x40013400
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40014400 	.word	0x40014400
 8002f38:	40014800 	.word	0x40014800
 8002f3c:	40015000 	.word	0x40015000

08002f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0201 	bic.w	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f023 030a 	bic.w	r3, r3, #10
 8002f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 0210 	bic.w	r2, r3, #16
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	031b      	lsls	r3, r3, #12
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	f043 0307 	orr.w	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	021a      	lsls	r2, r3, #8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	431a      	orrs	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	609a      	str	r2, [r3, #8]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2201      	movs	r2, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	43db      	mvns	r3, r3
 800309a:	401a      	ands	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a1a      	ldr	r2, [r3, #32]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d8:	2302      	movs	r3, #2
 80030da:	e074      	b.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a34      	ldr	r2, [pc, #208]	@ (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a33      	ldr	r2, [pc, #204]	@ (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a31      	ldr	r2, [pc, #196]	@ (80031dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d108      	bne.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003120:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a21      	ldr	r2, [pc, #132]	@ (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d022      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315c:	d01d      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d018      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1d      	ldr	r2, [pc, #116]	@ (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1c      	ldr	r2, [pc, #112]	@ (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a15      	ldr	r2, [pc, #84]	@ (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d009      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a18      	ldr	r2, [pc, #96]	@ (80031ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d10c      	bne.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40013400 	.word	0x40013400
 80031dc:	40015000 	.word	0x40015000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800
 80031e8:	40000c00 	.word	0x40000c00
 80031ec:	40014000 	.word	0x40014000

080031f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003208:	2302      	movs	r3, #2
 800320a:	e078      	b.n	80032fe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	@ (8003314 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d11c      	bne.n	80032ec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	051b      	lsls	r3, r3, #20
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40013400 	.word	0x40013400
 8003314:	40015000 	.word	0x40015000

08003318 <memset>:
 8003318:	4402      	add	r2, r0
 800331a:	4603      	mov	r3, r0
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	f803 1b01 	strb.w	r1, [r3], #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	4d0d      	ldr	r5, [pc, #52]	@ (8003360 <__libc_init_array+0x38>)
 800332c:	4c0d      	ldr	r4, [pc, #52]	@ (8003364 <__libc_init_array+0x3c>)
 800332e:	1b64      	subs	r4, r4, r5
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	2600      	movs	r6, #0
 8003334:	42a6      	cmp	r6, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	4d0b      	ldr	r5, [pc, #44]	@ (8003368 <__libc_init_array+0x40>)
 800333a:	4c0c      	ldr	r4, [pc, #48]	@ (800336c <__libc_init_array+0x44>)
 800333c:	f000 f818 	bl	8003370 <_init>
 8003340:	1b64      	subs	r4, r4, r5
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	2600      	movs	r6, #0
 8003346:	42a6      	cmp	r6, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003350:	4798      	blx	r3
 8003352:	3601      	adds	r6, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	f855 3b04 	ldr.w	r3, [r5], #4
 800335a:	4798      	blx	r3
 800335c:	3601      	adds	r6, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	08003398 	.word	0x08003398
 8003364:	08003398 	.word	0x08003398
 8003368:	08003398 	.word	0x08003398
 800336c:	0800339c 	.word	0x0800339c

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
